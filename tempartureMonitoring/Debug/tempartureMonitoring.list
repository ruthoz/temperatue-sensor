
tempartureMonitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800ea50  0800ea50  0001ea50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f148  0800f148  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f148  0800f148  0001f148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f150  0800f150  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800f150  0800f150  0001f150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  0800f160  0800f160  0001f160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800f170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002418  20000210  0800f37c  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002628  0800f37c  00022628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ae85  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000631f  00000000  00000000  0004b0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020a0  00000000  00000000  000513e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e68  00000000  00000000  00053480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d9cd  00000000  00000000  000552e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000274c0  00000000  00000000  00082cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105866  00000000  00000000  000aa175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001af9db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009dfc  00000000  00000000  001afa2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ea34 	.word	0x0800ea34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800ea34 	.word	0x0800ea34

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <_ZN6ButtonC1EP12GPIO_TypeDeft>:
#include "Button.h"
#include "cmsis_os.h"

extern Button button;

Button::Button(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	80fb      	strh	r3, [r7, #6]
{
	_GPIOx = GPIOx;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	60da      	str	r2, [r3, #12]
	_GPIO_Pin = GPIO_Pin;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	88fa      	ldrh	r2, [r7, #6]
 8000ee4:	821a      	strh	r2, [r3, #16]
	_counter = 0;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
	_state = BUTTON_STATE_NONE;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
}
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_ZN6Button9interruptEv>:

void Button::interrupt()
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	uint32_t delayTick = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]

	if(HAL_GPIO_ReadPin(_GPIOx, _GPIO_Pin) == 0){
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68da      	ldr	r2, [r3, #12]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	8a1b      	ldrh	r3, [r3, #16]
 8000f14:	4619      	mov	r1, r3
 8000f16:	4610      	mov	r0, r2
 8000f18:	f003 f856 	bl	8003fc8 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	bf0c      	ite	eq
 8000f22:	2301      	moveq	r3, #1
 8000f24:	2300      	movne	r3, #0
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d005      	beq.n	8000f38 <_ZN6Button9interruptEv+0x38>
		_timeTickOn = HAL_GetTick();
 8000f2c:	f002 f964 	bl	80031f8 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	605a      	str	r2, [r3, #4]
		}
		else{
			_state = BUTTON_STATE_WAITH;
		}
	}
}
 8000f36:	e030      	b.n	8000f9a <_ZN6Button9interruptEv+0x9a>
	else if(HAL_GPIO_ReadPin(_GPIOx, _GPIO_Pin) == 1){
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	8a1b      	ldrh	r3, [r3, #16]
 8000f40:	4619      	mov	r1, r3
 8000f42:	4610      	mov	r0, r2
 8000f44:	f003 f840 	bl	8003fc8 <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	bf0c      	ite	eq
 8000f4e:	2301      	moveq	r3, #1
 8000f50:	2300      	movne	r3, #0
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d020      	beq.n	8000f9a <_ZN6Button9interruptEv+0x9a>
		_timeTickOff = HAL_GetTick();
 8000f58:	f002 f94e 	bl	80031f8 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	609a      	str	r2, [r3, #8]
		delayTick = _timeTickOff - _timeTickOn;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	60fb      	str	r3, [r7, #12]
		if(delayTick > 500){
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f74:	d903      	bls.n	8000f7e <_ZN6Button9interruptEv+0x7e>
			_state = BUTTON_LONG_PRESS;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2203      	movs	r2, #3
 8000f7a:	701a      	strb	r2, [r3, #0]
}
 8000f7c:	e00d      	b.n	8000f9a <_ZN6Button9interruptEv+0x9a>
		else if (_state == BUTTON_STATE_WAITH) {
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d106      	bne.n	8000f94 <_ZN6Button9interruptEv+0x94>
			_state = BUTTON_DOUBLE_PRESS;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2204      	movs	r2, #4
 8000f8a:	701a      	strb	r2, [r3, #0]
			_counter = 0;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
}
 8000f92:	e002      	b.n	8000f9a <_ZN6Button9interruptEv+0x9a>
			_state = BUTTON_STATE_WAITH;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_ZN6Button8getStateEv>:

StateButton Button::getState(){
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
	return _state;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	781b      	ldrb	r3, [r3, #0]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <_ZN6Button10getCounterEv>:

uint32_t Button::getCounter(){
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
	return _counter;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	695b      	ldr	r3, [r3, #20]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <_ZN6Button8setStateE11StateButon_>:

void Button::setState(StateButton state){
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	70fb      	strb	r3, [r7, #3]
	_state = state;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	78fa      	ldrb	r2, [r7, #3]
 8000fe2:	701a      	strb	r2, [r3, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <_ZN6Button12resetCounterEv>:

void Button::resetCounter(){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	_counter = 0;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <_ZN6Button11plusCounterEv>:

void Button::plusCounter(){
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
	_counter++;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	615a      	str	r2, [r3, #20]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <StartbuttonTak>:

extern "C" void StartbuttonTak()
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StartbuttonTak */
  /* Infinite loop */
  while(1)
  {
	if (button.getState() == BUTTON_STATE_WAITH) {
 800102c:	4811      	ldr	r0, [pc, #68]	; (8001074 <StartbuttonTak+0x4c>)
 800102e:	f7ff ffb8 	bl	8000fa2 <_ZN6Button8getStateEv>
 8001032:	4603      	mov	r3, r0
 8001034:	2b01      	cmp	r3, #1
 8001036:	bf0c      	ite	eq
 8001038:	2301      	moveq	r3, #1
 800103a:	2300      	movne	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d014      	beq.n	800106c <StartbuttonTak+0x44>
		button.plusCounter();
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <StartbuttonTak+0x4c>)
 8001044:	f7ff ffe1 	bl	800100a <_ZN6Button11plusCounterEv>
	  	if(button.getCounter() > 200 ){
 8001048:	480a      	ldr	r0, [pc, #40]	; (8001074 <StartbuttonTak+0x4c>)
 800104a:	f7ff ffb6 	bl	8000fba <_ZN6Button10getCounterEv>
 800104e:	4603      	mov	r3, r0
 8001050:	2bc8      	cmp	r3, #200	; 0xc8
 8001052:	bf8c      	ite	hi
 8001054:	2301      	movhi	r3, #1
 8001056:	2300      	movls	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d006      	beq.n	800106c <StartbuttonTak+0x44>
	  		button.setState(BUTTON_STATE_PRESS);
 800105e:	2102      	movs	r1, #2
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <StartbuttonTak+0x4c>)
 8001062:	f7ff ffb6 	bl	8000fd2 <_ZN6Button8setStateE11StateButon_>
   	  	    button.resetCounter();
 8001066:	4803      	ldr	r0, [pc, #12]	; (8001074 <StartbuttonTak+0x4c>)
 8001068:	f7ff ffc2 	bl	8000ff0 <_ZN6Button12resetCounterEv>
		    //printf("One \n\r");
	  	}
	}
    osDelay(1);
 800106c:	2001      	movs	r0, #1
 800106e:	f007 fd53 	bl	8008b18 <osDelay>
	if (button.getState() == BUTTON_STATE_WAITH) {
 8001072:	e7db      	b.n	800102c <StartbuttonTak+0x4>
 8001074:	20000304 	.word	0x20000304

08001078 <_ZN6Buzzer8playNoteEv>:
	}
	playNote();
}

void Buzzer::playNote()
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(_timer,0);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(_timer, _noteBuzzer[_currentNote]);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7d1b      	ldrb	r3, [r3, #20]
 800108e:	461a      	mov	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3202      	adds	r2, #2
 8001094:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	62da      	str	r2, [r3, #44]	; 0x2c
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7d1b      	ldrb	r3, [r3, #20]
 80010a4:	461a      	mov	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3202      	adds	r2, #2
 80010aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(_timer, TIM_CHANNEL_1, (_noteBuzzer[_currentNote]/2));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7d1b      	ldrb	r3, [r3, #20]
 80010b8:	461a      	mov	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3202      	adds	r2, #2
 80010be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c2:	0fda      	lsrs	r2, r3, #31
 80010c4:	4413      	add	r3, r2
 80010c6:	105b      	asrs	r3, r3, #1
 80010c8:	461a      	mov	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <_ZN6Buzzer2onEv>:


void Buzzer::on(){
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
	_state = MUSIC_ON;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	711a      	strb	r2, [r3, #4]
	HAL_TIM_Base_Start_IT(_timer);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f005 f867 	bl	80061c4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(_timer, TIM_CHANNEL_1);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f005 f957 	bl	80063b0 <HAL_TIM_PWM_Start_IT>
	playNote();
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffb8 	bl	8001078 <_ZN6Buzzer8playNoteEv>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <_ZN6Buzzer3offEv>:

void Buzzer::off(){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	_state = MUSIC_OFF;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	711a      	strb	r2, [r3, #4]
	HAL_TIM_Base_Stop_IT(_timer);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f005 f8be 	bl	80062a4 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(_timer, TIM_CHANNEL_1);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f005 fa92 	bl	8006658 <HAL_TIM_PWM_Stop_IT>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <_ZN10CliCommandC1EPKc>:
class CliCommand {
private:
	char _name[MAX_NAME_LEN];
public:
	CliCommand(){}
	CliCommand(const char* name){
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	4a07      	ldr	r2, [pc, #28]	; (8001164 <_ZN10CliCommandC1EPKc+0x28>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	601a      	str	r2, [r3, #0]
		strcpy(_name, name);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3304      	adds	r3, #4
 8001150:	6839      	ldr	r1, [r7, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f00b f87d 	bl	800c252 <strcpy>
	}
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	0800ec24 	.word	0x0800ec24

08001168 <_ZN10CliCommandD1Ev>:
	virtual void doCommand(const char* param) = 0;
	virtual ~CliCommand(){}
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <_ZN10CliCommandD1Ev+0x1c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	0800ec24 	.word	0x0800ec24

08001188 <_ZN10CliCommandD0Ev>:
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ffe9 	bl	8001168 <_ZN10CliCommandD1Ev>
 8001196:	2118      	movs	r1, #24
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f00a f92f 	bl	800b3fc <_ZdlPvj>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <_ZN8LedOnCmdC1EPKcP3Led>:
extern CliContainer CliContainer;

class LedOnCmd : public CliCommand {
	Led *_led;
public:
	LedOnCmd (const char * name, Led * led) : CliCommand(name), _led(led) {}
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	68b9      	ldr	r1, [r7, #8]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ffbf 	bl	800113c <_ZN10CliCommandC1EPKc>
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <_ZN8LedOnCmdC1EPKcP3Led+0x2c>)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	619a      	str	r2, [r3, #24]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	0800ec10 	.word	0x0800ec10

080011d8 <_ZN8LedOnCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
		_led->on();
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 ff7f 	bl	80020ea <_ZN3Led2onEv>
	}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <_ZN9LedOffCmdC1EPKcP3Led>:
};

class LedOffCmd : public CliCommand {
	Led *_led;
public:
	LedOffCmd (const char * name, Led * led) : CliCommand(name), _led(led) {}
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	68b9      	ldr	r1, [r7, #8]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff99 	bl	800113c <_ZN10CliCommandC1EPKc>
 800120a:	4a05      	ldr	r2, [pc, #20]	; (8001220 <_ZN9LedOffCmdC1EPKcP3Led+0x2c>)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	619a      	str	r2, [r3, #24]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	0800ebfc 	.word	0x0800ebfc

08001224 <_ZN9LedOffCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
		_led->off();
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	4618      	mov	r0, r3
 8001234:	f000 ff6c 	bl	8002110 <_ZN3Led3offEv>
	}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <_ZN11LedBlinkCmdC1EPKcP3Led>:
};

class LedBlinkCmd : public CliCommand {
	Led *_led;
public:
	LedBlinkCmd (const char * name, Led * led) : CliCommand(name), _led(led) {}
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	68b9      	ldr	r1, [r7, #8]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff73 	bl	800113c <_ZN10CliCommandC1EPKc>
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <_ZN11LedBlinkCmdC1EPKcP3Led+0x2c>)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	0800ebe8 	.word	0x0800ebe8

08001270 <_ZN11LedBlinkCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
		_led->blink();
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 ff59 	bl	8002136 <_ZN3Led5blinkEv>
	}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <_ZN11BuzzerOnCmdC1EPKcP6Buzzer>:
};

class BuzzerOnCmd : public CliCommand {
	Buzzer *_buzzer;
public:
	BuzzerOnCmd (const char * name, Buzzer* buzzer) : CliCommand(name), _buzzer(buzzer) {}
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	68b9      	ldr	r1, [r7, #8]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff4d 	bl	800113c <_ZN10CliCommandC1EPKc>
 80012a2:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <_ZN11BuzzerOnCmdC1EPKcP6Buzzer+0x2c>)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	619a      	str	r2, [r3, #24]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	0800ebd4 	.word	0x0800ebd4

080012bc <_ZN11BuzzerOnCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
		_buzzer->on();
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff07 	bl	80010de <_ZN6Buzzer2onEv>
	}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_ZN12BuzzerOffCmdC1EPKcP6Buzzer>:
};

class BuzzerOffCmd : public CliCommand {
	Buzzer *_buzzer;
public:
	BuzzerOffCmd (const char * name, Buzzer* buzzer) : CliCommand(name), _buzzer(buzzer) {}
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	68b9      	ldr	r1, [r7, #8]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff27 	bl	800113c <_ZN10CliCommandC1EPKc>
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <_ZN12BuzzerOffCmdC1EPKcP6Buzzer+0x2c>)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	619a      	str	r2, [r3, #24]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	0800ebc0 	.word	0x0800ebc0

08001308 <_ZN12BuzzerOffCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
		_buzzer->off();
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fefa 	bl	8001110 <_ZN6Buzzer3offEv>
	}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <_ZN14getDataTimeCmdC1EPKcP3Rtc>:
};

class getDataTimeCmd : public CliCommand {
	Rtc *_rtc;
public:
	getDataTimeCmd (const char * name, Rtc* rtc) : CliCommand(name), _rtc(rtc) {}
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff01 	bl	800113c <_ZN10CliCommandC1EPKc>
 800133a:	4a05      	ldr	r2, [pc, #20]	; (8001350 <_ZN14getDataTimeCmdC1EPKcP3Rtc+0x2c>)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	619a      	str	r2, [r3, #24]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	0800ebac 	.word	0x0800ebac

08001354 <_ZN14getDataTimeCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001356:	b08f      	sub	sp, #60	; 0x3c
 8001358:	af04      	add	r7, sp, #16
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
		DateTime dateTime;
		_rtc->getTime(&dateTime);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	f107 020c 	add.w	r2, r7, #12
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f001 f917 	bl	800259c <_ZN3Rtc7getTimeEP9DateTime_>
		printf("%02d:%02d:%02d-%d-%02d/%02d/%02d\r\n",
 800136e:	697c      	ldr	r4, [r7, #20]
 8001370:	693d      	ldr	r5, [r7, #16]
 8001372:	68fe      	ldr	r6, [r7, #12]
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	6a39      	ldr	r1, [r7, #32]
 800137a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800137c:	9003      	str	r0, [sp, #12]
 800137e:	9102      	str	r1, [sp, #8]
 8001380:	9201      	str	r2, [sp, #4]
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	4633      	mov	r3, r6
 8001386:	462a      	mov	r2, r5
 8001388:	4621      	mov	r1, r4
 800138a:	4803      	ldr	r0, [pc, #12]	; (8001398 <_ZN14getDataTimeCmd9doCommandEPKc+0x44>)
 800138c:	f00a fe0e 	bl	800bfac <iprintf>
						dateTime.hours, dateTime.min, dateTime.sec,
						dateTime.weekDay,
						dateTime.day, dateTime.month, dateTime.year);
	}
 8001390:	bf00      	nop
 8001392:	372c      	adds	r7, #44	; 0x2c
 8001394:	46bd      	mov	sp, r7
 8001396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001398:	0800ea50 	.word	0x0800ea50

0800139c <_ZN14setDataTimeCmdC1EPKcP3Rtc>:
};

class setDataTimeCmd : public CliCommand {
	Rtc *_rtc;
public:
	setDataTimeCmd (const char * name, Rtc* rtc) : CliCommand(name), _rtc(rtc) {}
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	68b9      	ldr	r1, [r7, #8]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fec5 	bl	800113c <_ZN10CliCommandC1EPKc>
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <_ZN14setDataTimeCmdC1EPKcP3Rtc+0x2c>)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	619a      	str	r2, [r3, #24]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	0800eb98 	.word	0x0800eb98

080013cc <_ZN14setDataTimeCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
		//DateTime dateTime;
	}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <_ZN18setCriticalTempCmdC1EPKcP5Flash>:

class setCriticalTempCmd : public CliCommand {
	Flash* _flash;

public:
	setCriticalTempCmd (const char * name, Flash* flash) : CliCommand(name), _flash(flash) {}
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	68b9      	ldr	r1, [r7, #8]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fea1 	bl	800113c <_ZN10CliCommandC1EPKc>
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <_ZN18setCriticalTempCmdC1EPKcP5Flash+0x2c>)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	619a      	str	r2, [r3, #24]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	0800eb84 	.word	0x0800eb84

08001414 <_ZN18setCriticalTempCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
		uint16_t val;
		val = atoi(param);
 800141e:	6838      	ldr	r0, [r7, #0]
 8001420:	f00a f825 	bl	800b46e <atoi>
 8001424:	4603      	mov	r3, r0
 8001426:	81fb      	strh	r3, [r7, #14]
		Temprature.criticalTemp = val;
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <_ZN18setCriticalTempCmd9doCommandEPKc+0x30>)
 800142a:	89fb      	ldrh	r3, [r7, #14]
 800142c:	8013      	strh	r3, [r2, #0]
		_flash->writh(&Temprature, sizeof(thresholdTemp));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	2206      	movs	r2, #6
 8001434:	4903      	ldr	r1, [pc, #12]	; (8001444 <_ZN18setCriticalTempCmd9doCommandEPKc+0x30>)
 8001436:	4618      	mov	r0, r3
 8001438:	f000 fdcd 	bl	8001fd6 <_ZN5Flash5writhEPvj>
	}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000000 	.word	0x20000000

08001448 <_ZN17setWarningTempCmdC1EPKcP5Flash>:

class setWarningTempCmd : public CliCommand {
	Flash* _flash;

public:
	setWarningTempCmd (const char * name, Flash* flash) : CliCommand(name), _flash(flash) {}
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fe6f 	bl	800113c <_ZN10CliCommandC1EPKc>
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_ZN17setWarningTempCmdC1EPKcP5Flash+0x2c>)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	619a      	str	r2, [r3, #24]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	0800eb70 	.word	0x0800eb70

08001478 <_ZN17setWarningTempCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
		uint16_t val;
		val = atoi(param);
 8001482:	6838      	ldr	r0, [r7, #0]
 8001484:	f009 fff3 	bl	800b46e <atoi>
 8001488:	4603      	mov	r3, r0
 800148a:	81fb      	strh	r3, [r7, #14]
		Temprature.warningTemp = val;
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <_ZN17setWarningTempCmd9doCommandEPKc+0x30>)
 800148e:	89fb      	ldrh	r3, [r7, #14]
 8001490:	8053      	strh	r3, [r2, #2]
		_flash->writh(&Temprature, sizeof(thresholdTemp));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	2206      	movs	r2, #6
 8001498:	4903      	ldr	r1, [pc, #12]	; (80014a8 <_ZN17setWarningTempCmd9doCommandEPKc+0x30>)
 800149a:	4618      	mov	r0, r3
 800149c:	f000 fd9b 	bl	8001fd6 <_ZN5Flash5writhEPvj>
	}
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000000 	.word	0x20000000

080014ac <_ZN18getCriticalTempCmdC1EPKcP5Flash>:

class getCriticalTempCmd : public CliCommand {
	Flash* _flash;

public:
	getCriticalTempCmd (const char * name, Flash* flash) : CliCommand(name), _flash(flash) {}
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	68b9      	ldr	r1, [r7, #8]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fe3d 	bl	800113c <_ZN10CliCommandC1EPKc>
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <_ZN18getCriticalTempCmdC1EPKcP5Flash+0x2c>)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	619a      	str	r2, [r3, #24]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	0800eb5c 	.word	0x0800eb5c

080014dc <_ZN18getCriticalTempCmd9doCommandEPKc>:
	void doCommand(const char* param) override
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
	{
		//_flash->read(&Temprature);
	}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <_Z7CliInitv>:
};


void CliInit()
{
 80014f4:	b598      	push	{r3, r4, r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	//////////////////ledB//////////////////////////////
	CliContainer.add (new LedOnCmd("ledOn", &ledB));
 80014f8:	201c      	movs	r0, #28
 80014fa:	f009 ff81 	bl	800b400 <_Znwj>
 80014fe:	4603      	mov	r3, r0
 8001500:	461c      	mov	r4, r3
 8001502:	4a44      	ldr	r2, [pc, #272]	; (8001614 <_Z7CliInitv+0x120>)
 8001504:	4944      	ldr	r1, [pc, #272]	; (8001618 <_Z7CliInitv+0x124>)
 8001506:	4620      	mov	r0, r4
 8001508:	f7ff fe4e 	bl	80011a8 <_ZN8LedOnCmdC1EPKcP3Led>
 800150c:	4621      	mov	r1, r4
 800150e:	4843      	ldr	r0, [pc, #268]	; (800161c <_Z7CliInitv+0x128>)
 8001510:	f000 fa33 	bl	800197a <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new LedOffCmd("ledOff", &ledB));
 8001514:	201c      	movs	r0, #28
 8001516:	f009 ff73 	bl	800b400 <_Znwj>
 800151a:	4603      	mov	r3, r0
 800151c:	461c      	mov	r4, r3
 800151e:	4a3d      	ldr	r2, [pc, #244]	; (8001614 <_Z7CliInitv+0x120>)
 8001520:	493f      	ldr	r1, [pc, #252]	; (8001620 <_Z7CliInitv+0x12c>)
 8001522:	4620      	mov	r0, r4
 8001524:	f7ff fe66 	bl	80011f4 <_ZN9LedOffCmdC1EPKcP3Led>
 8001528:	4621      	mov	r1, r4
 800152a:	483c      	ldr	r0, [pc, #240]	; (800161c <_Z7CliInitv+0x128>)
 800152c:	f000 fa25 	bl	800197a <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new LedBlinkCmd("ledBlink", &ledB));
 8001530:	201c      	movs	r0, #28
 8001532:	f009 ff65 	bl	800b400 <_Znwj>
 8001536:	4603      	mov	r3, r0
 8001538:	461c      	mov	r4, r3
 800153a:	4a36      	ldr	r2, [pc, #216]	; (8001614 <_Z7CliInitv+0x120>)
 800153c:	4939      	ldr	r1, [pc, #228]	; (8001624 <_Z7CliInitv+0x130>)
 800153e:	4620      	mov	r0, r4
 8001540:	f7ff fe7e 	bl	8001240 <_ZN11LedBlinkCmdC1EPKcP3Led>
 8001544:	4621      	mov	r1, r4
 8001546:	4835      	ldr	r0, [pc, #212]	; (800161c <_Z7CliInitv+0x128>)
 8001548:	f000 fa17 	bl	800197a <_ZN12CliContainer3addEP10CliCommand>
	////////////////////buzzer///////////////////////////
	CliContainer.add (new BuzzerOnCmd("BOn", &buzzer));
 800154c:	201c      	movs	r0, #28
 800154e:	f009 ff57 	bl	800b400 <_Znwj>
 8001552:	4603      	mov	r3, r0
 8001554:	461c      	mov	r4, r3
 8001556:	4a34      	ldr	r2, [pc, #208]	; (8001628 <_Z7CliInitv+0x134>)
 8001558:	4934      	ldr	r1, [pc, #208]	; (800162c <_Z7CliInitv+0x138>)
 800155a:	4620      	mov	r0, r4
 800155c:	f7ff fe96 	bl	800128c <_ZN11BuzzerOnCmdC1EPKcP6Buzzer>
 8001560:	4621      	mov	r1, r4
 8001562:	482e      	ldr	r0, [pc, #184]	; (800161c <_Z7CliInitv+0x128>)
 8001564:	f000 fa09 	bl	800197a <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new BuzzerOffCmd("BOff", &buzzer));
 8001568:	201c      	movs	r0, #28
 800156a:	f009 ff49 	bl	800b400 <_Znwj>
 800156e:	4603      	mov	r3, r0
 8001570:	461c      	mov	r4, r3
 8001572:	4a2d      	ldr	r2, [pc, #180]	; (8001628 <_Z7CliInitv+0x134>)
 8001574:	492e      	ldr	r1, [pc, #184]	; (8001630 <_Z7CliInitv+0x13c>)
 8001576:	4620      	mov	r0, r4
 8001578:	f7ff feae 	bl	80012d8 <_ZN12BuzzerOffCmdC1EPKcP6Buzzer>
 800157c:	4621      	mov	r1, r4
 800157e:	4827      	ldr	r0, [pc, #156]	; (800161c <_Z7CliInitv+0x128>)
 8001580:	f000 f9fb 	bl	800197a <_ZN12CliContainer3addEP10CliCommand>

	/////////////////////RTC//////////////////////////
	CliContainer.add (new getDataTimeCmd("getTime", &rtc));
 8001584:	201c      	movs	r0, #28
 8001586:	f009 ff3b 	bl	800b400 <_Znwj>
 800158a:	4603      	mov	r3, r0
 800158c:	461c      	mov	r4, r3
 800158e:	4a29      	ldr	r2, [pc, #164]	; (8001634 <_Z7CliInitv+0x140>)
 8001590:	4929      	ldr	r1, [pc, #164]	; (8001638 <_Z7CliInitv+0x144>)
 8001592:	4620      	mov	r0, r4
 8001594:	f7ff fec6 	bl	8001324 <_ZN14getDataTimeCmdC1EPKcP3Rtc>
 8001598:	4621      	mov	r1, r4
 800159a:	4820      	ldr	r0, [pc, #128]	; (800161c <_Z7CliInitv+0x128>)
 800159c:	f000 f9ed 	bl	800197a <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new setDataTimeCmd("setTime", &rtc));
 80015a0:	201c      	movs	r0, #28
 80015a2:	f009 ff2d 	bl	800b400 <_Znwj>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461c      	mov	r4, r3
 80015aa:	4a22      	ldr	r2, [pc, #136]	; (8001634 <_Z7CliInitv+0x140>)
 80015ac:	4923      	ldr	r1, [pc, #140]	; (800163c <_Z7CliInitv+0x148>)
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff fef4 	bl	800139c <_ZN14setDataTimeCmdC1EPKcP3Rtc>
 80015b4:	4621      	mov	r1, r4
 80015b6:	4819      	ldr	r0, [pc, #100]	; (800161c <_Z7CliInitv+0x128>)
 80015b8:	f000 f9df 	bl	800197a <_ZN12CliContainer3addEP10CliCommand>

	////////////////////flash/////////////////////////
	CliContainer.add (new setCriticalTempCmd("setCritical", &flash));
 80015bc:	201c      	movs	r0, #28
 80015be:	f009 ff1f 	bl	800b400 <_Znwj>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461c      	mov	r4, r3
 80015c6:	4a1e      	ldr	r2, [pc, #120]	; (8001640 <_Z7CliInitv+0x14c>)
 80015c8:	491e      	ldr	r1, [pc, #120]	; (8001644 <_Z7CliInitv+0x150>)
 80015ca:	4620      	mov	r0, r4
 80015cc:	f7ff ff0a 	bl	80013e4 <_ZN18setCriticalTempCmdC1EPKcP5Flash>
 80015d0:	4621      	mov	r1, r4
 80015d2:	4812      	ldr	r0, [pc, #72]	; (800161c <_Z7CliInitv+0x128>)
 80015d4:	f000 f9d1 	bl	800197a <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new setWarningTempCmd("setWarning", &flash));
 80015d8:	201c      	movs	r0, #28
 80015da:	f009 ff11 	bl	800b400 <_Znwj>
 80015de:	4603      	mov	r3, r0
 80015e0:	461c      	mov	r4, r3
 80015e2:	4a17      	ldr	r2, [pc, #92]	; (8001640 <_Z7CliInitv+0x14c>)
 80015e4:	4918      	ldr	r1, [pc, #96]	; (8001648 <_Z7CliInitv+0x154>)
 80015e6:	4620      	mov	r0, r4
 80015e8:	f7ff ff2e 	bl	8001448 <_ZN17setWarningTempCmdC1EPKcP5Flash>
 80015ec:	4621      	mov	r1, r4
 80015ee:	480b      	ldr	r0, [pc, #44]	; (800161c <_Z7CliInitv+0x128>)
 80015f0:	f000 f9c3 	bl	800197a <_ZN12CliContainer3addEP10CliCommand>

	CliContainer.add (new getCriticalTempCmd("getCritical", &flash));
 80015f4:	201c      	movs	r0, #28
 80015f6:	f009 ff03 	bl	800b400 <_Znwj>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461c      	mov	r4, r3
 80015fe:	4a10      	ldr	r2, [pc, #64]	; (8001640 <_Z7CliInitv+0x14c>)
 8001600:	4912      	ldr	r1, [pc, #72]	; (800164c <_Z7CliInitv+0x158>)
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff ff52 	bl	80014ac <_ZN18getCriticalTempCmdC1EPKcP5Flash>
 8001608:	4621      	mov	r1, r4
 800160a:	4804      	ldr	r0, [pc, #16]	; (800161c <_Z7CliInitv+0x128>)
 800160c:	f000 f9b5 	bl	800197a <_ZN12CliContainer3addEP10CliCommand>

}
 8001610:	bf00      	nop
 8001612:	bd98      	pop	{r3, r4, r7, pc}
 8001614:	2000031c 	.word	0x2000031c
 8001618:	0800ea74 	.word	0x0800ea74
 800161c:	2000022c 	.word	0x2000022c
 8001620:	0800ea7c 	.word	0x0800ea7c
 8001624:	0800ea84 	.word	0x0800ea84
 8001628:	200002ec 	.word	0x200002ec
 800162c:	0800ea90 	.word	0x0800ea90
 8001630:	0800ea94 	.word	0x0800ea94
 8001634:	20000358 	.word	0x20000358
 8001638:	0800ea9c 	.word	0x0800ea9c
 800163c:	0800eaa4 	.word	0x0800eaa4
 8001640:	20000350 	.word	0x20000350
 8001644:	0800eaac 	.word	0x0800eaac
 8001648:	0800eab8 	.word	0x0800eab8
 800164c:	0800eac4 	.word	0x0800eac4

08001650 <_ZN18getCriticalTempCmdD1Ev>:
class getCriticalTempCmd : public CliCommand {
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	4a05      	ldr	r2, [pc, #20]	; (8001670 <_ZN18getCriticalTempCmdD1Ev+0x20>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fd81 	bl	8001168 <_ZN10CliCommandD1Ev>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	0800eb5c 	.word	0x0800eb5c

08001674 <_ZN18getCriticalTempCmdD0Ev>:
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ffe7 	bl	8001650 <_ZN18getCriticalTempCmdD1Ev>
 8001682:	211c      	movs	r1, #28
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f009 feb9 	bl	800b3fc <_ZdlPvj>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <_ZN17setWarningTempCmdD1Ev>:
class setWarningTempCmd : public CliCommand {
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <_ZN17setWarningTempCmdD1Ev+0x20>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fd5f 	bl	8001168 <_ZN10CliCommandD1Ev>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	0800eb70 	.word	0x0800eb70

080016b8 <_ZN17setWarningTempCmdD0Ev>:
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ffe7 	bl	8001694 <_ZN17setWarningTempCmdD1Ev>
 80016c6:	211c      	movs	r1, #28
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f009 fe97 	bl	800b3fc <_ZdlPvj>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_ZN18setCriticalTempCmdD1Ev>:
class setCriticalTempCmd : public CliCommand {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <_ZN18setCriticalTempCmdD1Ev+0x20>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fd3d 	bl	8001168 <_ZN10CliCommandD1Ev>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	0800eb84 	.word	0x0800eb84

080016fc <_ZN18setCriticalTempCmdD0Ev>:
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ffe7 	bl	80016d8 <_ZN18setCriticalTempCmdD1Ev>
 800170a:	211c      	movs	r1, #28
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f009 fe75 	bl	800b3fc <_ZdlPvj>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <_ZN14setDataTimeCmdD1Ev>:
class setDataTimeCmd : public CliCommand {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	4a05      	ldr	r2, [pc, #20]	; (800173c <_ZN14setDataTimeCmdD1Ev+0x20>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fd1b 	bl	8001168 <_ZN10CliCommandD1Ev>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	0800eb98 	.word	0x0800eb98

08001740 <_ZN14setDataTimeCmdD0Ev>:
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ffe7 	bl	800171c <_ZN14setDataTimeCmdD1Ev>
 800174e:	211c      	movs	r1, #28
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f009 fe53 	bl	800b3fc <_ZdlPvj>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <_ZN14getDataTimeCmdD1Ev>:
class getDataTimeCmd : public CliCommand {
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	4a05      	ldr	r2, [pc, #20]	; (8001780 <_ZN14getDataTimeCmdD1Ev+0x20>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fcf9 	bl	8001168 <_ZN10CliCommandD1Ev>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	0800ebac 	.word	0x0800ebac

08001784 <_ZN14getDataTimeCmdD0Ev>:
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ffe7 	bl	8001760 <_ZN14getDataTimeCmdD1Ev>
 8001792:	211c      	movs	r1, #28
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f009 fe31 	bl	800b3fc <_ZdlPvj>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <_ZN12BuzzerOffCmdD1Ev>:
class BuzzerOffCmd : public CliCommand {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <_ZN12BuzzerOffCmdD1Ev+0x20>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fcd7 	bl	8001168 <_ZN10CliCommandD1Ev>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	0800ebc0 	.word	0x0800ebc0

080017c8 <_ZN12BuzzerOffCmdD0Ev>:
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ffe7 	bl	80017a4 <_ZN12BuzzerOffCmdD1Ev>
 80017d6:	211c      	movs	r1, #28
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f009 fe0f 	bl	800b3fc <_ZdlPvj>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <_ZN11BuzzerOnCmdD1Ev>:
class BuzzerOnCmd : public CliCommand {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	4a05      	ldr	r2, [pc, #20]	; (8001808 <_ZN11BuzzerOnCmdD1Ev+0x20>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fcb5 	bl	8001168 <_ZN10CliCommandD1Ev>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	0800ebd4 	.word	0x0800ebd4

0800180c <_ZN11BuzzerOnCmdD0Ev>:
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ffe7 	bl	80017e8 <_ZN11BuzzerOnCmdD1Ev>
 800181a:	211c      	movs	r1, #28
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f009 fded 	bl	800b3fc <_ZdlPvj>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <_ZN11LedBlinkCmdD1Ev>:
class LedBlinkCmd : public CliCommand {
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	4a05      	ldr	r2, [pc, #20]	; (800184c <_ZN11LedBlinkCmdD1Ev+0x20>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fc93 	bl	8001168 <_ZN10CliCommandD1Ev>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	0800ebe8 	.word	0x0800ebe8

08001850 <_ZN11LedBlinkCmdD0Ev>:
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ffe7 	bl	800182c <_ZN11LedBlinkCmdD1Ev>
 800185e:	211c      	movs	r1, #28
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f009 fdcb 	bl	800b3fc <_ZdlPvj>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <_ZN9LedOffCmdD1Ev>:
class LedOffCmd : public CliCommand {
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	4a05      	ldr	r2, [pc, #20]	; (8001890 <_ZN9LedOffCmdD1Ev+0x20>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fc71 	bl	8001168 <_ZN10CliCommandD1Ev>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	0800ebfc 	.word	0x0800ebfc

08001894 <_ZN9LedOffCmdD0Ev>:
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ffe7 	bl	8001870 <_ZN9LedOffCmdD1Ev>
 80018a2:	211c      	movs	r1, #28
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f009 fda9 	bl	800b3fc <_ZdlPvj>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_ZN8LedOnCmdD1Ev>:
class LedOnCmd : public CliCommand {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <_ZN8LedOnCmdD1Ev+0x20>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fc4f 	bl	8001168 <_ZN10CliCommandD1Ev>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	0800ec10 	.word	0x0800ec10

080018d8 <_ZN8LedOnCmdD0Ev>:
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ffe7 	bl	80018b4 <_ZN8LedOnCmdD1Ev>
 80018e6:	211c      	movs	r1, #28
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f009 fd87 	bl	800b3fc <_ZdlPvj>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_ZNK10CliCommand7getNameEv>:
	const char* getName ()const {
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
		return _name;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3304      	adds	r3, #4
	}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <_ZN12CliContainerC1Ev>:

#include "CliContainer.h"

CliContainer CliContainer;

CliContainer::CliContainer()
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
{
	_counter = 0;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	651a      	str	r2, [r3, #80]	; 0x50
	memset(_CliCommand, 0, sizeof(CliCommand*) * MAX_CLI);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2250      	movs	r2, #80	; 0x50
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f009 fdef 	bl	800b508 <memset>
}
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <_ZN12CliContainerD1Ev>:

CliContainer::~CliContainer()
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
{
	for (int i = 0; i < MAX_CLI; i++) {
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2b13      	cmp	r3, #19
 8001944:	dc14      	bgt.n	8001970 <_ZN12CliContainerD1Ev+0x3c>
		if (_CliCommand[i] != NULL) {
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00a      	beq.n	8001968 <_ZN12CliContainerD1Ev+0x34>
			delete _CliCommand[i];
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <_ZN12CliContainerD1Ev+0x34>
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	3208      	adds	r2, #8
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	4790      	blx	r2
	for (int i = 0; i < MAX_CLI; i++) {
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3301      	adds	r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	e7e7      	b.n	8001940 <_ZN12CliContainerD1Ev+0xc>
		}
	}
}
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <_ZN12CliContainer3addEP10CliCommand>:

void CliContainer::add(CliCommand* pCliCommand)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
	if (_counter < MAX_CLI) {
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001988:	2b13      	cmp	r3, #19
 800198a:	dc0a      	bgt.n	80019a2 <_ZN12CliContainer3addEP10CliCommand+0x28>
		_CliCommand[_counter] = pCliCommand;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6839      	ldr	r1, [r7, #0]
 8001994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		_counter++;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <_ZN12CliContainer4CallEPcS0_>:

int CliContainer::getCounter(){
	return _counter;
}

int CliContainer::Call (char* cmdname, char* param ){
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b086      	sub	sp, #24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < _counter; i++){
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	da25      	bge.n	8001a14 <_ZN12CliContainer4CallEPcS0_+0x66>
		if(strcmp(cmdname, _CliCommand[i]->getName())==0){
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff91 	bl	80018f8 <_ZNK10CliCommand7getNameEv>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4619      	mov	r1, r3
 80019da:	68b8      	ldr	r0, [r7, #8]
 80019dc:	f7fe fbf8 	bl	80001d0 <strcmp>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	bf0c      	ite	eq
 80019e6:	2301      	moveq	r3, #1
 80019e8:	2300      	movne	r3, #0
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00d      	beq.n	8001a0c <_ZN12CliContainer4CallEPcS0_+0x5e>
			_CliCommand[i]->doCommand(param);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4798      	blx	r3
			return 1;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e004      	b.n	8001a16 <_ZN12CliContainer4CallEPcS0_+0x68>
	for (int i = 0; i < _counter; i++){
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	e7d4      	b.n	80019be <_ZN12CliContainer4CallEPcS0_+0x10>
		}
	}
	return 0;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <_Z41__static_initialization_and_destruction_0ii>:
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d107      	bne.n	8001a40 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d102      	bne.n	8001a40 <_Z41__static_initialization_and_destruction_0ii+0x20>
CliContainer CliContainer;
 8001a3a:	4809      	ldr	r0, [pc, #36]	; (8001a60 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001a3c:	f7ff ff68 	bl	8001910 <_ZN12CliContainerC1Ev>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d107      	bne.n	8001a56 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d102      	bne.n	8001a56 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001a50:	4803      	ldr	r0, [pc, #12]	; (8001a60 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001a52:	f7ff ff6f 	bl	8001934 <_ZN12CliContainerD1Ev>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000022c 	.word	0x2000022c

08001a64 <_GLOBAL__sub_I_CliContainer>:
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	f7ff ffd7 	bl	8001a20 <_Z41__static_initialization_and_destruction_0ii>
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_GLOBAL__sub_D_CliContainer>:
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff ffcf 	bl	8001a20 <_Z41__static_initialization_and_destruction_0ii>
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <_Z22Communication_commTaskv>:
static uint8_t cmdbuffer[MAX_BUFFER_LENGTH];
static int cmdcount = 0;
static int cmdprint = 0;

int Communication_commTask()
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8001a8a:	1db9      	adds	r1, r7, #6
 8001a8c:	230a      	movs	r3, #10
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4839      	ldr	r0, [pc, #228]	; (8001b78 <_Z22Communication_commTaskv+0xf4>)
 8001a92:	f005 fe49 	bl	8007728 <HAL_UART_Receive>
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d025      	beq.n	8001aec <_Z22Communication_commTaskv+0x68>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 8001aa0:	4b35      	ldr	r3, [pc, #212]	; (8001b78 <_Z22Communication_commTaskv+0xf4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	bf14      	ite	ne
 8001aae:	2301      	movne	r3, #1
 8001ab0:	2300      	moveq	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <_Z22Communication_commTaskv+0x3c>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <_Z22Communication_commTaskv+0xf4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2208      	movs	r2, #8
 8001abe:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 8001ac0:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <_Z22Communication_commTaskv+0xf8>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <_Z22Communication_commTaskv+0xfc>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	da0d      	bge.n	8001ae8 <_Z22Communication_commTaskv+0x64>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8001acc:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <_Z22Communication_commTaskv+0xf8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	492a      	ldr	r1, [pc, #168]	; (8001b7c <_Z22Communication_commTaskv+0xf8>)
 8001ad4:	600a      	str	r2, [r1, #0]
 8001ad6:	4a2b      	ldr	r2, [pc, #172]	; (8001b84 <_Z22Communication_commTaskv+0x100>)
 8001ad8:	1899      	adds	r1, r3, r2
 8001ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4825      	ldr	r0, [pc, #148]	; (8001b78 <_Z22Communication_commTaskv+0xf4>)
 8001ae2:	f005 fd8d 	bl	8007600 <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 8001ae6:	e7eb      	b.n	8001ac0 <_Z22Communication_commTaskv+0x3c>
		}

		return 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e040      	b.n	8001b6e <_Z22Communication_commTaskv+0xea>
	}

	if (ch != '\r' && ch != '\n')
 8001aec:	79bb      	ldrb	r3, [r7, #6]
 8001aee:	2b0d      	cmp	r3, #13
 8001af0:	d016      	beq.n	8001b20 <_Z22Communication_commTaskv+0x9c>
 8001af2:	79bb      	ldrb	r3, [r7, #6]
 8001af4:	2b0a      	cmp	r3, #10
 8001af6:	d013      	beq.n	8001b20 <_Z22Communication_commTaskv+0x9c>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 8001af8:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <_Z22Communication_commTaskv+0xfc>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b63      	cmp	r3, #99	; 0x63
 8001afe:	dd05      	ble.n	8001b0c <_Z22Communication_commTaskv+0x88>
		{
			cmdcount = 0;
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <_Z22Communication_commTaskv+0xfc>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8001b06:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <_Z22Communication_commTaskv+0xf8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <_Z22Communication_commTaskv+0xfc>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	491b      	ldr	r1, [pc, #108]	; (8001b80 <_Z22Communication_commTaskv+0xfc>)
 8001b14:	600a      	str	r2, [r1, #0]
 8001b16:	79b9      	ldrb	r1, [r7, #6]
 8001b18:	4a1a      	ldr	r2, [pc, #104]	; (8001b84 <_Z22Communication_commTaskv+0x100>)
 8001b1a:	54d1      	strb	r1, [r2, r3]
		return 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e026      	b.n	8001b6e <_Z22Communication_commTaskv+0xea>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount)
 8001b20:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <_Z22Communication_commTaskv+0xf8>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <_Z22Communication_commTaskv+0xfc>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	da0d      	bge.n	8001b48 <_Z22Communication_commTaskv+0xc4>
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <_Z22Communication_commTaskv+0xf8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	4912      	ldr	r1, [pc, #72]	; (8001b7c <_Z22Communication_commTaskv+0xf8>)
 8001b34:	600a      	str	r2, [r1, #0]
 8001b36:	4a13      	ldr	r2, [pc, #76]	; (8001b84 <_Z22Communication_commTaskv+0x100>)
 8001b38:	1899      	adds	r1, r3, r2
 8001b3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b3e:	2201      	movs	r2, #1
 8001b40:	480d      	ldr	r0, [pc, #52]	; (8001b78 <_Z22Communication_commTaskv+0xf4>)
 8001b42:	f005 fd5d 	bl	8007600 <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 8001b46:	e7eb      	b.n	8001b20 <_Z22Communication_commTaskv+0x9c>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8001b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	490e      	ldr	r1, [pc, #56]	; (8001b88 <_Z22Communication_commTaskv+0x104>)
 8001b50:	4809      	ldr	r0, [pc, #36]	; (8001b78 <_Z22Communication_commTaskv+0xf4>)
 8001b52:	f005 fd55 	bl	8007600 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <_Z22Communication_commTaskv+0xfc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <_Z22Communication_commTaskv+0x100>)
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <_Z22Communication_commTaskv+0xfc>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <_Z22Communication_commTaskv+0xf8>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
	return 1;
 8001b6c:	2301      	movs	r3, #1
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000498 	.word	0x20000498
 8001b7c:	200002e8 	.word	0x200002e8
 8001b80:	200002e4 	.word	0x200002e4
 8001b84:	20000280 	.word	0x20000280
 8001b88:	0800ead0 	.word	0x0800ead0

08001b8c <_Z27Communication_handleCommandv>:


void Communication_handleCommand()
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08c      	sub	sp, #48	; 0x30
 8001b90:	af00      	add	r7, sp, #0
	char cmd[20];
	char param [20];

    int params = sscanf((const char*)cmdbuffer,"%s %s", cmd, param );
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	f107 0218 	add.w	r2, r7, #24
 8001b98:	490f      	ldr	r1, [pc, #60]	; (8001bd8 <_Z27Communication_handleCommandv+0x4c>)
 8001b9a:	4810      	ldr	r0, [pc, #64]	; (8001bdc <_Z27Communication_handleCommandv+0x50>)
 8001b9c:	f00a fae8 	bl	800c170 <siscanf>
 8001ba0:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (params == 0){
 8001ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d012      	beq.n	8001bce <_Z27Communication_handleCommandv+0x42>
	   return;
    }

    if(CliContainer.Call(cmd, param) == 0){
 8001ba8:	1d3a      	adds	r2, r7, #4
 8001baa:	f107 0318 	add.w	r3, r7, #24
 8001bae:	4619      	mov	r1, r3
 8001bb0:	480b      	ldr	r0, [pc, #44]	; (8001be0 <_Z27Communication_handleCommandv+0x54>)
 8001bb2:	f7ff fefc 	bl	80019ae <_ZN12CliContainer4CallEPcS0_>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf0c      	ite	eq
 8001bbc:	2301      	moveq	r3, #1
 8001bbe:	2300      	movne	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d004      	beq.n	8001bd0 <_Z27Communication_handleCommandv+0x44>
    printf("Invalid command\r\n");
 8001bc6:	4807      	ldr	r0, [pc, #28]	; (8001be4 <_Z27Communication_handleCommandv+0x58>)
 8001bc8:	f00a fa76 	bl	800c0b8 <puts>
 8001bcc:	e000      	b.n	8001bd0 <_Z27Communication_handleCommandv+0x44>
	   return;
 8001bce:	bf00      	nop
    }
}
 8001bd0:	3730      	adds	r7, #48	; 0x30
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	0800ead4 	.word	0x0800ead4
 8001bdc:	20000280 	.word	0x20000280
 8001be0:	2000022c 	.word	0x2000022c
 8001be4:	0800eadc 	.word	0x0800eadc

08001be8 <StartComTask>:

extern "C" void StartComTask()
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Entry_comTask */
  /* Infinite loop */
  CliInit();
 8001bec:	f7ff fc82 	bl	80014f4 <_Z7CliInitv>
  while(1)
  {
	  if (Communication_commTask()){
 8001bf0:	f7ff ff48 	bl	8001a84 <_Z22Communication_commTaskv>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	bf14      	ite	ne
 8001bfa:	2301      	movne	r3, #1
 8001bfc:	2300      	moveq	r3, #0
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <StartComTask+0x20>
		  Communication_handleCommand();
 8001c04:	f7ff ffc2 	bl	8001b8c <_Z27Communication_handleCommandv>
	  }
    osDelay(1);
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f006 ff85 	bl	8008b18 <osDelay>
	  if (Communication_commTask()){
 8001c0e:	e7ef      	b.n	8001bf0 <StartComTask+0x8>

08001c10 <_ZN3Dht14waitWhileEqualEii>:
extern TIM_HandleTypeDef htim16;

extern Dht dht;

int Dht::waitWhileEqual(int value, int expectedTime)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
	// set a timeout 20% bigger than the expected time
	uint32_t timeout = expectedTime + (expectedTime) / 5;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a19      	ldr	r2, [pc, #100]	; (8001c84 <_ZN3Dht14waitWhileEqualEii+0x74>)
 8001c20:	fb82 1203 	smull	r1, r2, r2, r3
 8001c24:	1052      	asrs	r2, r2, #1
 8001c26:	17db      	asrs	r3, r3, #31
 8001c28:	1ad2      	subs	r2, r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	617b      	str	r3, [r7, #20]

	__HAL_TIM_SET_COUNTER(_timer, 0);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2200      	movs	r2, #0
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
	while (HAL_GPIO_ReadPin(_gpioPort, _gpioPin) == value) {
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	889b      	ldrh	r3, [r3, #4]
 8001c42:	4619      	mov	r1, r3
 8001c44:	4610      	mov	r0, r2
 8001c46:	f002 f9bf 	bl	8003fc8 <HAL_GPIO_ReadPin>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	4293      	cmp	r3, r2
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00d      	beq.n	8001c7a <_ZN3Dht14waitWhileEqualEii+0x6a>
		if (__HAL_TIM_GET_COUNTER(_timer) > timeout) {
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	bf34      	ite	cc
 8001c6c:	2301      	movcc	r3, #1
 8001c6e:	2300      	movcs	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0e1      	beq.n	8001c3a <_ZN3Dht14waitWhileEqualEii+0x2a>
			// too much time in the state
			return false;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e000      	b.n	8001c7c <_ZN3Dht14waitWhileEqualEii+0x6c>
		}
	}

	return true;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	66666667 	.word	0x66666667

08001c88 <_ZN3Dht13setGpioOutputEv>:

void Dht::setGpioOutput()
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct = {0};
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]

	gpioStruct.Pin = _gpioPin;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	889b      	ldrh	r3, [r3, #4]
 8001ca4:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
	gpioStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(_gpioPort, &gpioStruct);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f107 020c 	add.w	r2, r7, #12
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f001 ffd9 	bl	8003c74 <HAL_GPIO_Init>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001cc2:	2017      	movs	r0, #23
 8001cc4:	f001 fbcd 	bl	8003462 <HAL_NVIC_DisableIRQ>
}
 8001cc8:	bf00      	nop
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_ZN3Dht12setGpioInputEv>:

void Dht::setGpioInput()
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct = {0};
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]

	gpioStruct.Pin = _gpioPin;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	889b      	ldrh	r3, [r3, #4]
 8001cec:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_INPUT;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
	gpioStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(_gpioPort, &gpioStruct);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f107 020c 	add.w	r2, r7, #12
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 ffb5 	bl	8003c74 <HAL_GPIO_Init>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001d0a:	2017      	movs	r0, #23
 8001d0c:	f001 fba9 	bl	8003462 <HAL_NVIC_DisableIRQ>
}
 8001d10:	bf00      	nop
 8001d12:	3720      	adds	r7, #32
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <_ZN3Dht4readEv>:

int Dht::read()
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	setGpioOutput();
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ffb1 	bl	8001c88 <_ZN3Dht13setGpioOutputEv>

	HAL_TIM_Base_Start(_timer);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f004 f9ba 	bl	80060a4 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(_timer, 0);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2200      	movs	r2, #0
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24

	// switch the sensor on by putting the line in '0'
	HAL_GPIO_WritePin(_gpioPort,_gpioPin, GPIO_PIN_RESET);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	889b      	ldrh	r3, [r3, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	4619      	mov	r1, r3
 8001d46:	f002 f957 	bl	8003ff8 <HAL_GPIO_WritePin>
	while (__HAL_TIM_GET_COUNTER(_timer) < 19000);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	f644 2237 	movw	r2, #18999	; 0x4a37
 8001d56:	4293      	cmp	r3, r2
 8001d58:	bf94      	ite	ls
 8001d5a:	2301      	movls	r3, #1
 8001d5c:	2300      	movhi	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d000      	beq.n	8001d66 <_ZN3Dht4readEv+0x4e>
 8001d64:	e7f1      	b.n	8001d4a <_ZN3Dht4readEv+0x32>

	HAL_GPIO_WritePin(_gpioPort,_gpioPin, GPIO_PIN_SET);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	889b      	ldrh	r3, [r3, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4619      	mov	r1, r3
 8001d72:	f002 f941 	bl	8003ff8 <HAL_GPIO_WritePin>

	// start listening
	setGpioInput();
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ffaa 	bl	8001cd0 <_ZN3Dht12setGpioInputEv>

	// wait for response 20-40us
	if (!waitWhileEqual( 1, 40)) {
 8001d7c:	2228      	movs	r2, #40	; 0x28
 8001d7e:	2101      	movs	r1, #1
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff45 	bl	8001c10 <_ZN3Dht14waitWhileEqualEii>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bf0c      	ite	eq
 8001d8c:	2301      	moveq	r3, #1
 8001d8e:	2300      	movne	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <_ZN3Dht4readEv+0x82>
		return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e021      	b.n	8001dde <_ZN3Dht4readEv+0xc6>
	}

	// DHT should keep in low for 80us
	if (!waitWhileEqual(0, 80)) {
 8001d9a:	2250      	movs	r2, #80	; 0x50
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ff36 	bl	8001c10 <_ZN3Dht14waitWhileEqualEii>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bf0c      	ite	eq
 8001daa:	2301      	moveq	r3, #1
 8001dac:	2300      	movne	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <_ZN3Dht4readEv+0xa0>
		return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e012      	b.n	8001dde <_ZN3Dht4readEv+0xc6>
	}

	// DHT should keep in high for 80us
	if (!waitWhileEqual(1, 80)) {
 8001db8:	2250      	movs	r2, #80	; 0x50
 8001dba:	2101      	movs	r1, #1
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ff27 	bl	8001c10 <_ZN3Dht14waitWhileEqualEii>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf0c      	ite	eq
 8001dc8:	2301      	moveq	r3, #1
 8001dca:	2300      	movne	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <_ZN3Dht4readEv+0xbe>
		return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e003      	b.n	8001dde <_ZN3Dht4readEv+0xc6>
	}
	reciveData();
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f806 	bl	8001de8 <_ZN3Dht10reciveDataEv>
	return 1;
 8001ddc:	2301      	movs	r3, #1

}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <_ZN3Dht10reciveDataEv>:

int Dht::reciveData()
{
 8001de8:	b5b0      	push	{r4, r5, r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	// DHT start send data bits

	uint8_t data[5] = { 0 };
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	2300      	movs	r3, #0
 8001df6:	733b      	strb	r3, [r7, #12]
	for (int i = 0; i < 5; i++) {
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	dc50      	bgt.n	8001ea4 <_ZN3Dht10reciveDataEv+0xbc>
		for (int j = 0; j < 8; j++) {
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b07      	cmp	r3, #7
 8001e0a:	dc47      	bgt.n	8001e9c <_ZN3Dht10reciveDataEv+0xb4>

			// DHT keeps in low for 50us before each bit
			if (!waitWhileEqual( 0, 60)) {
 8001e0c:	223c      	movs	r2, #60	; 0x3c
 8001e0e:	2100      	movs	r1, #0
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff fefd 	bl	8001c10 <_ZN3Dht14waitWhileEqualEii>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2301      	moveq	r3, #1
 8001e1e:	2300      	movne	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <_ZN3Dht10reciveDataEv+0x42>
				return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e095      	b.n	8001f56 <_ZN3Dht10reciveDataEv+0x16e>
			}

			// DHT sends bit keeping line in high maximum 70us
			if (!waitWhileEqual( 1, 70)) {
 8001e2a:	2246      	movs	r2, #70	; 0x46
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff feee 	bl	8001c10 <_ZN3Dht14waitWhileEqualEii>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	bf0c      	ite	eq
 8001e3a:	2301      	moveq	r3, #1
 8001e3c:	2300      	movne	r3, #0
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <_ZN3Dht10reciveDataEv+0x60>
				return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e086      	b.n	8001f56 <_ZN3Dht10reciveDataEv+0x16e>
			}

			data[i] <<= 1;
 8001e48:	f107 0208 	add.w	r2, r7, #8
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	4413      	add	r3, r2
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	b2d9      	uxtb	r1, r3
 8001e56:	f107 0208 	add.w	r2, r7, #8
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	460a      	mov	r2, r1
 8001e60:	701a      	strb	r2, [r3, #0]

			// 26-28us for '0' and 70us for '1', so 50us is a good split time
			if (__HAL_TIM_GET_COUNTER(_timer) > 50) {
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	2b32      	cmp	r3, #50	; 0x32
 8001e6c:	bf8c      	ite	hi
 8001e6e:	2301      	movhi	r3, #1
 8001e70:	2300      	movls	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00d      	beq.n	8001e94 <_ZN3Dht10reciveDataEv+0xac>
				data[i] |= 1;
 8001e78:	f107 0208 	add.w	r2, r7, #8
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	4413      	add	r3, r2
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	b2d9      	uxtb	r1, r3
 8001e88:	f107 0208 	add.w	r2, r7, #8
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	4413      	add	r3, r2
 8001e90:	460a      	mov	r2, r1
 8001e92:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	3301      	adds	r3, #1
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	e7b4      	b.n	8001e06 <_ZN3Dht10reciveDataEv+0x1e>
	for (int i = 0; i < 5; i++) {
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e7ab      	b.n	8001dfc <_ZN3Dht10reciveDataEv+0x14>
			}
		}
	}

	uint8_t checksum = data[0] + data[1] + data[2] + data[3];
 8001ea4:	7a3a      	ldrb	r2, [r7, #8]
 8001ea6:	7a7b      	ldrb	r3, [r7, #9]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	7abb      	ldrb	r3, [r7, #10]
 8001eae:	4413      	add	r3, r2
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	7afb      	ldrb	r3, [r7, #11]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	73fb      	strb	r3, [r7, #15]
	if (checksum != data[4]) {
 8001eb8:	7b3b      	ldrb	r3, [r7, #12]
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d001      	beq.n	8001ec4 <_ZN3Dht10reciveDataEv+0xdc>
		return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e048      	b.n	8001f56 <_ZN3Dht10reciveDataEv+0x16e>
	}

	_humidity = (double)data[0] + ((double)data[1]) / 10;
 8001ec4:	7a3b      	ldrb	r3, [r7, #8]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fb2c 	bl	8000524 <__aeabi_ui2d>
 8001ecc:	4604      	mov	r4, r0
 8001ece:	460d      	mov	r5, r1
 8001ed0:	7a7b      	ldrb	r3, [r7, #9]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fb26 	bl	8000524 <__aeabi_ui2d>
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <_ZN3Dht10reciveDataEv+0x178>)
 8001ede:	f7fe fcc5 	bl	800086c <__aeabi_ddiv>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	4629      	mov	r1, r5
 8001eea:	f7fe f9df 	bl	80002ac <__adddf3>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	_temperature = (double)data[2] + ((double)data[3]) / 10;
 8001ef8:	7abb      	ldrb	r3, [r7, #10]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fb12 	bl	8000524 <__aeabi_ui2d>
 8001f00:	4604      	mov	r4, r0
 8001f02:	460d      	mov	r5, r1
 8001f04:	7afb      	ldrb	r3, [r7, #11]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fb0c 	bl	8000524 <__aeabi_ui2d>
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <_ZN3Dht10reciveDataEv+0x178>)
 8001f12:	f7fe fcab 	bl	800086c <__aeabi_ddiv>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	4629      	mov	r1, r5
 8001f1e:	f7fe f9c5 	bl	80002ac <__adddf3>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	e9c1 2306 	strd	r2, r3, [r1, #24]

	//printf("Humidity: %d.%d, temp: %d.%d\r\n", (int)data[0], (int)data[1], (int)data[2], (int)data[3]);

	// wait while DHT return to high
	if (!waitWhileEqual( 0, 100)) {
 8001f2c:	2264      	movs	r2, #100	; 0x64
 8001f2e:	2100      	movs	r1, #0
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff fe6d 	bl	8001c10 <_ZN3Dht14waitWhileEqualEii>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <_ZN3Dht10reciveDataEv+0x162>
		return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e005      	b.n	8001f56 <_ZN3Dht10reciveDataEv+0x16e>
	}

	HAL_TIM_Base_Stop(_timer);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f004 f910 	bl	8006174 <HAL_TIM_Base_Stop>

	return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40240000 	.word	0x40240000

08001f64 <_ZN3Dht15getTempperatureEv>:
{
	return _humidity;
}

double Dht::getTempperature()
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	return _temperature;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f72:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f76:	eeb0 0a47 	vmov.f32	s0, s14
 8001f7a:	eef0 0a67 	vmov.f32	s1, s15
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <StartDhtTask>:


/* USER CODE END Header_StartDhtTask */
extern "C" void StartDhtTask()
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StartDhtTask */
  /* Infinite loop */
  while(1)
  {
	dht.read();
 8001f8c:	4803      	ldr	r0, [pc, #12]	; (8001f9c <StartDhtTask+0x14>)
 8001f8e:	f7ff fec3 	bl	8001d18 <_ZN3Dht4readEv>
    osDelay(1000);
 8001f92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f96:	f006 fdbf 	bl	8008b18 <osDelay>
	dht.read();
 8001f9a:	e7f7      	b.n	8001f8c <StartDhtTask+0x4>
 8001f9c:	20000328 	.word	0x20000328

08001fa0 <_ZN5Flash5eraseEv>:

#include "Flash.h"


void Flash::erase()
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	uint32_t pageError;
	FLASH_EraseInitTypeDef basicFlash;

	basicFlash.TypeErase = FLASH_TYPEERASE_PAGES;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
	basicFlash.Banks = FLASH_BANK_2;
 8001fac:	2302      	movs	r3, #2
 8001fae:	613b      	str	r3, [r7, #16]
	basicFlash.Page = _page;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	617b      	str	r3, [r7, #20]
	basicFlash.NbPages = 1;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock();
 8001fba:	f001 fc43 	bl	8003844 <HAL_FLASH_Unlock>

	HAL_FLASHEx_Erase(&basicFlash, &pageError);
 8001fbe:	f107 021c 	add.w	r2, r7, #28
 8001fc2:	f107 030c 	add.w	r3, r7, #12
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f001 fd0f 	bl	80039ec <HAL_FLASHEx_Erase>
}
 8001fce:	bf00      	nop
 8001fd0:	3720      	adds	r7, #32
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <_ZN5Flash5writhEPvj>:

void Flash::writh(void* data, size_t size)
{
 8001fd6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
	erase();
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f7ff ffdb 	bl	8001fa0 <_ZN5Flash5eraseEv>
	uint64_t* Data = (uint64_t *)(data);
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	617b      	str	r3, [r7, #20]
	for(uint64_t i = 0; i < size ; i ++){
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	461c      	mov	r4, r3
 8002000:	4615      	mov	r5, r2
 8002002:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002006:	42a2      	cmp	r2, r4
 8002008:	41ab      	sbcs	r3, r5
 800200a:	d216      	bcs.n	800203a <_ZN5Flash5writhEPvj+0x64>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)_flashAdd+(i*8), *(Data+i));
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	18d1      	adds	r1, r2, r3
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4413      	add	r3, r2
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	2000      	movs	r0, #0
 8002024:	f001 fab6 	bl	8003594 <HAL_FLASH_Program>
	for(uint64_t i = 0; i < size ; i ++){
 8002028:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800202c:	f112 0801 	adds.w	r8, r2, #1
 8002030:	f143 0900 	adc.w	r9, r3, #0
 8002034:	e9c7 8906 	strd	r8, r9, [r7, #24]
 8002038:	e7df      	b.n	8001ffa <_ZN5Flash5writhEPvj+0x24>
	}
}
 800203a:	bf00      	nop
 800203c:	3720      	adds	r7, #32
 800203e:	46bd      	mov	sp, r7
 8002040:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002044 <_ZN5Flash4readEP13thresholdTemp>:

void Flash::read(thresholdTemp* buffer)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 800204e:	f001 fbf9 	bl	8003844 <HAL_FLASH_Unlock>
	thresholdTemp * data = (thresholdTemp *)(_flashAdd);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	60fb      	str	r3, [r7, #12]
	if(data->magicNum!= 0x5A5A){
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	889b      	ldrh	r3, [r3, #4]
 800205c:	f645 225a 	movw	r2, #23130	; 0x5a5a
 8002060:	4293      	cmp	r3, r2
 8002062:	d103      	bne.n	800206c <_ZN5Flash4readEP13thresholdTemp+0x28>
		return;
	}
	buffer = (thresholdTemp *)(_flashAdd);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	e000      	b.n	800206e <_ZN5Flash4readEP13thresholdTemp+0x2a>
		return;
 800206c:	bf00      	nop
}
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_ZN3Led8getGPIOxEv>:

    void on();
    void off();
    void blink();

    GPIO_TypeDef* getGPIOx(){
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
    	return _GPIOx;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
   }
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <_ZN3Led11getGPIO_PinEv>:

    uint16_t getGPIO_Pin(){
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
        return _GPIO_Pin;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	891b      	ldrh	r3, [r3, #8]
   }
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <_ZN3Led8getStateEv>:

    LedState getState(){
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
    	return _state;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	781b      	ldrb	r3, [r3, #0]
   }
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <_ZN3LedC1EP12GPIO_TypeDeft>:
#include <stdio.h>
#include "cmsis_os.h"

extern Led ledB;

Led::Led(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	4613      	mov	r3, r2
 80020c8:	80fb      	strh	r3, [r7, #6]
{
	_GPIOx = GPIOx;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	605a      	str	r2, [r3, #4]
	_GPIO_Pin = GPIO_Pin;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	88fa      	ldrh	r2, [r7, #6]
 80020d4:	811a      	strh	r2, [r3, #8]
	_state = STATE_OFF;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
}
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <_ZN3Led2onEv>:

void Led::on()
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
	_state = STATE_ON,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_GPIOx, _GPIO_Pin, GPIO_PIN_SET);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6858      	ldr	r0, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	891b      	ldrh	r3, [r3, #8]
 8002100:	2201      	movs	r2, #1
 8002102:	4619      	mov	r1, r3
 8002104:	f001 ff78 	bl	8003ff8 <HAL_GPIO_WritePin>
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <_ZN3Led3offEv>:

void Led::off()
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	_state = STATE_OFF,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_GPIOx, _GPIO_Pin, GPIO_PIN_RESET);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6858      	ldr	r0, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	891b      	ldrh	r3, [r3, #8]
 8002126:	2200      	movs	r2, #0
 8002128:	4619      	mov	r1, r3
 800212a:	f001 ff65 	bl	8003ff8 <HAL_GPIO_WritePin>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <_ZN3Led5blinkEv>:
void Led::blink()
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
	_state = STATE_BLINKING;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2202      	movs	r2, #2
 8002142:	701a      	strb	r2, [r3, #0]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <startBlinkTask>:


extern "C" void startBlinkTask()
{
 8002150:	b598      	push	{r3, r4, r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN startBlinkTask */

  /* Infinite loop */
  while(1)
  {
	if(ledB.getState() == STATE_BLINKING){
 8002154:	480f      	ldr	r0, [pc, #60]	; (8002194 <startBlinkTask+0x44>)
 8002156:	f7ff ffa5 	bl	80020a4 <_ZN3Led8getStateEv>
 800215a:	4603      	mov	r3, r0
 800215c:	2b02      	cmp	r3, #2
 800215e:	bf0c      	ite	eq
 8002160:	2301      	moveq	r3, #1
 8002162:	2300      	movne	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00f      	beq.n	800218a <startBlinkTask+0x3a>
	HAL_GPIO_TogglePin(ledB.getGPIOx(), ledB.getGPIO_Pin());
 800216a:	480a      	ldr	r0, [pc, #40]	; (8002194 <startBlinkTask+0x44>)
 800216c:	f7ff ff82 	bl	8002074 <_ZN3Led8getGPIOxEv>
 8002170:	4604      	mov	r4, r0
 8002172:	4808      	ldr	r0, [pc, #32]	; (8002194 <startBlinkTask+0x44>)
 8002174:	f7ff ff8a 	bl	800208c <_ZN3Led11getGPIO_PinEv>
 8002178:	4603      	mov	r3, r0
 800217a:	4619      	mov	r1, r3
 800217c:	4620      	mov	r0, r4
 800217e:	f001 ff53 	bl	8004028 <HAL_GPIO_TogglePin>
	osDelay(600);
 8002182:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002186:	f006 fcc7 	bl	8008b18 <osDelay>
	}
	osDelay(1);
 800218a:	2001      	movs	r0, #1
 800218c:	f006 fcc4 	bl	8008b18 <osDelay>
	if(ledB.getState() == STATE_BLINKING){
 8002190:	e7e0      	b.n	8002154 <startBlinkTask+0x4>
 8002192:	bf00      	nop
 8002194:	2000031c 	.word	0x2000031c

08002198 <_ZN3LedD1Ev>:
    ~Led(){};
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <_ZN6ButtonD1Ev>:
	uint32_t _counter;
public:


	Button(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin);
    ~Button(){};
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <_ZN6BuzzerC1EP17TIM_HandleTypeDef>:


public:


	Buzzer(TIM_HandleTypeDef * timer){
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
	_timer = timer;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	601a      	str	r2, [r3, #0]
	_noteBuzzer [0] = 390;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f44f 72c3 	mov.w	r2, #390	; 0x186
 80021da:	609a      	str	r2, [r3, #8]
	_noteBuzzer [1] = 100;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2264      	movs	r2, #100	; 0x64
 80021e0:	60da      	str	r2, [r3, #12]
	_state = MUSIC_OFF;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	711a      	strb	r2, [r3, #4]
	_sizeOfMusic = (sizeof(_noteBuzzer) / sizeof(_noteBuzzer[0]));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	611a      	str	r2, [r3, #16]
	_currentNote= 0;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	751a      	strb	r2, [r3, #20]
	}
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <_ZN6BuzzerD1Ev>:
	~Buzzer(){};
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <_ZN3DhtC1EP12GPIO_TypeDeftP17TIM_HandleTypeDef>:

	int waitWhileEqual(int value, int expectedTime);
	void setGpioOutput();
	void setGpioInput();
public:
	Dht( GPIO_TypeDef* gpioPort, uint16_t gpioPin, TIM_HandleTypeDef * timer){
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	4613      	mov	r3, r2
 8002226:	80fb      	strh	r3, [r7, #6]
		_gpioPort = gpioPort;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	601a      	str	r2, [r3, #0]
		_gpioPin = gpioPin;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	88fa      	ldrh	r2, [r7, #6]
 8002232:	809a      	strh	r2, [r3, #4]
		_timer = timer;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	609a      	str	r2, [r3, #8]
//		_counter = 0;
//		_maxCounter = 0;
//		_state = DHT_STATE_NO_DATA;
		_temperature = 0.0;
 800223a:	68f9      	ldr	r1, [r7, #12]
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	e9c1 2306 	strd	r2, r3, [r1, #24]
		_humidity = 0.0;
 8002248:	68f9      	ldr	r1, [r7, #12]
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	e9c1 2308 	strd	r2, r3, [r1, #32]
	}
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <_ZN3DhtD1Ev>:
	~Dht(){};
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <_ZN5FlashC1Ev>:
	uint32_t _flashAdd;
	uint32_t _page;

public:

	Flash(){
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
		_page = 256;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800228a:	605a      	str	r2, [r3, #4]
		_flashAdd = 0x08080000;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <_ZN5FlashC1Ev+0x24>)
 8002290:	601a      	str	r2, [r3, #0]
	}
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	08080000 	.word	0x08080000

080022a4 <_ZN5FlashD1Ev>:
	~Flash(){};
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
	...

080022bc <_write>:
Flash flash;
thresholdTemp Temprature;

//////////////////////////////////////////////////////////////
extern "C" int _write(int fd, char* ptr, int len)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295
 80022d0:	68b9      	ldr	r1, [r7, #8]
 80022d2:	4804      	ldr	r0, [pc, #16]	; (80022e4 <_write+0x28>)
 80022d4:	f005 f994 	bl	8007600 <HAL_UART_Transmit>
	return len;
 80022d8:	687b      	ldr	r3, [r7, #4]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000498 	.word	0x20000498

080022e8 <HAL_GPIO_EXTI_Callback>:
//////////////////////////////////////////////////////////////


extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	80fb      	strh	r3, [r7, #6]
	button.interrupt();
 80022f2:	4803      	ldr	r0, [pc, #12]	; (8002300 <HAL_GPIO_EXTI_Callback+0x18>)
 80022f4:	f7fe fe04 	bl	8000f00 <_ZN6Button9interruptEv>
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000304 	.word	0x20000304

08002304 <StartManagerTask>:




extern "C" void StartManagerTask(void *argument)
{
 8002304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManagerTask */

	flash.read(&Temprature);
 800230c:	4951      	ldr	r1, [pc, #324]	; (8002454 <StartManagerTask+0x150>)
 800230e:	4852      	ldr	r0, [pc, #328]	; (8002458 <StartManagerTask+0x154>)
 8002310:	f7ff fe98 	bl	8002044 <_ZN5Flash4readEP13thresholdTemp>
	stateTemp stateOfTemp = NORMAL_TEMPRATURE;
 8002314:	2302      	movs	r3, #2
 8002316:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
	while(1)
	{

	if(dht.getTempperature() > Temprature.criticalTemp){
 8002318:	4850      	ldr	r0, [pc, #320]	; (800245c <StartManagerTask+0x158>)
 800231a:	f7ff fe23 	bl	8001f64 <_ZN3Dht15getTempperatureEv>
 800231e:	ec55 4b10 	vmov	r4, r5, d0
 8002322:	4b4c      	ldr	r3, [pc, #304]	; (8002454 <StartManagerTask+0x150>)
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe f90c 	bl	8000544 <__aeabi_i2d>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	2101      	movs	r1, #1
 8002332:	460e      	mov	r6, r1
 8002334:	4620      	mov	r0, r4
 8002336:	4629      	mov	r1, r5
 8002338:	f7fe fbfe 	bl	8000b38 <__aeabi_dcmpgt>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <StartManagerTask+0x42>
 8002342:	2300      	movs	r3, #0
 8002344:	461e      	mov	r6, r3
 8002346:	b2f3      	uxtb	r3, r6
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00b      	beq.n	8002364 <StartManagerTask+0x60>
		if(stateOfTemp!=CRITICAL_TEMPRATURE){
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d07b      	beq.n	800244a <StartManagerTask+0x146>
		ledB.blink();
 8002352:	4843      	ldr	r0, [pc, #268]	; (8002460 <StartManagerTask+0x15c>)
 8002354:	f7ff feef 	bl	8002136 <_ZN3Led5blinkEv>
		buzzer.on();
 8002358:	4842      	ldr	r0, [pc, #264]	; (8002464 <StartManagerTask+0x160>)
 800235a:	f7fe fec0 	bl	80010de <_ZN6Buzzer2onEv>
		stateOfTemp = CRITICAL_TEMPRATURE;
 800235e:	2300      	movs	r3, #0
 8002360:	73fb      	strb	r3, [r7, #15]
 8002362:	e072      	b.n	800244a <StartManagerTask+0x146>
		}
	}
	else if(dht.getTempperature() > Temprature.warningTemp){
 8002364:	483d      	ldr	r0, [pc, #244]	; (800245c <StartManagerTask+0x158>)
 8002366:	f7ff fdfd 	bl	8001f64 <_ZN3Dht15getTempperatureEv>
 800236a:	ec55 4b10 	vmov	r4, r5, d0
 800236e:	4b39      	ldr	r3, [pc, #228]	; (8002454 <StartManagerTask+0x150>)
 8002370:	885b      	ldrh	r3, [r3, #2]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe f8e6 	bl	8000544 <__aeabi_i2d>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	2101      	movs	r1, #1
 800237e:	460e      	mov	r6, r1
 8002380:	4620      	mov	r0, r4
 8002382:	4629      	mov	r1, r5
 8002384:	f7fe fbd8 	bl	8000b38 <__aeabi_dcmpgt>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <StartManagerTask+0x8e>
 800238e:	2300      	movs	r3, #0
 8002390:	461e      	mov	r6, r3
 8002392:	b2f3      	uxtb	r3, r6
 8002394:	2b00      	cmp	r3, #0
 8002396:	d02c      	beq.n	80023f2 <StartManagerTask+0xee>

		if(stateOfTemp==NORMAL_TEMPRATURE){
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d104      	bne.n	80023a8 <StartManagerTask+0xa4>
			ledB.on();
 800239e:	4830      	ldr	r0, [pc, #192]	; (8002460 <StartManagerTask+0x15c>)
 80023a0:	f7ff fea3 	bl	80020ea <_ZN3Led2onEv>
			stateOfTemp = WARNING_TEMPRATURE;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
		}
		if(stateOfTemp==CRITICAL_TEMPRATURE &&
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d115      	bne.n	80023da <StartManagerTask+0xd6>
			dht.getTempperature() > (Temprature.criticalTemp-3)){
 80023ae:	482b      	ldr	r0, [pc, #172]	; (800245c <StartManagerTask+0x158>)
 80023b0:	f7ff fdd8 	bl	8001f64 <_ZN3Dht15getTempperatureEv>
 80023b4:	ec55 4b10 	vmov	r4, r5, d0
 80023b8:	4b26      	ldr	r3, [pc, #152]	; (8002454 <StartManagerTask+0x150>)
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	3b03      	subs	r3, #3
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe f8c0 	bl	8000544 <__aeabi_i2d>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
		if(stateOfTemp==CRITICAL_TEMPRATURE &&
 80023c8:	4620      	mov	r0, r4
 80023ca:	4629      	mov	r1, r5
 80023cc:	f7fe fbb4 	bl	8000b38 <__aeabi_dcmpgt>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <StartManagerTask+0xd6>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <StartManagerTask+0xd8>
 80023da:	2300      	movs	r3, #0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d034      	beq.n	800244a <StartManagerTask+0x146>
			buzzer.off();
 80023e0:	4820      	ldr	r0, [pc, #128]	; (8002464 <StartManagerTask+0x160>)
 80023e2:	f7fe fe95 	bl	8001110 <_ZN6Buzzer3offEv>
			ledB.on();
 80023e6:	481e      	ldr	r0, [pc, #120]	; (8002460 <StartManagerTask+0x15c>)
 80023e8:	f7ff fe7f 	bl	80020ea <_ZN3Led2onEv>
			stateOfTemp = WARNING_TEMPRATURE;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
 80023f0:	e02b      	b.n	800244a <StartManagerTask+0x146>
		}

	}
	else{
		if(stateOfTemp==CRITICAL_TEMPRATURE){
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d107      	bne.n	8002408 <StartManagerTask+0x104>
					ledB.off();
 80023f8:	4819      	ldr	r0, [pc, #100]	; (8002460 <StartManagerTask+0x15c>)
 80023fa:	f7ff fe89 	bl	8002110 <_ZN3Led3offEv>
					buzzer.off();
 80023fe:	4819      	ldr	r0, [pc, #100]	; (8002464 <StartManagerTask+0x160>)
 8002400:	f7fe fe86 	bl	8001110 <_ZN6Buzzer3offEv>
					stateOfTemp = NORMAL_TEMPRATURE;
 8002404:	2302      	movs	r3, #2
 8002406:	73fb      	strb	r3, [r7, #15]
		}
		if(stateOfTemp==WARNING_TEMPRATURE &&
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d115      	bne.n	800243a <StartManagerTask+0x136>
					dht.getTempperature() > (Temprature.warningTemp-3)){
 800240e:	4813      	ldr	r0, [pc, #76]	; (800245c <StartManagerTask+0x158>)
 8002410:	f7ff fda8 	bl	8001f64 <_ZN3Dht15getTempperatureEv>
 8002414:	ec55 4b10 	vmov	r4, r5, d0
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <StartManagerTask+0x150>)
 800241a:	885b      	ldrh	r3, [r3, #2]
 800241c:	3b03      	subs	r3, #3
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe f890 	bl	8000544 <__aeabi_i2d>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
		if(stateOfTemp==WARNING_TEMPRATURE &&
 8002428:	4620      	mov	r0, r4
 800242a:	4629      	mov	r1, r5
 800242c:	f7fe fb84 	bl	8000b38 <__aeabi_dcmpgt>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <StartManagerTask+0x136>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <StartManagerTask+0x138>
 800243a:	2300      	movs	r3, #0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d004      	beq.n	800244a <StartManagerTask+0x146>
					ledB.off();
 8002440:	4807      	ldr	r0, [pc, #28]	; (8002460 <StartManagerTask+0x15c>)
 8002442:	f7ff fe65 	bl	8002110 <_ZN3Led3offEv>
					stateOfTemp = NORMAL_TEMPRATURE;
 8002446:	2302      	movs	r3, #2
 8002448:	73fb      	strb	r3, [r7, #15]
		}
	}
	osDelay(1000);
 800244a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800244e:	f006 fb63 	bl	8008b18 <osDelay>
	if(dht.getTempperature() > Temprature.criticalTemp){
 8002452:	e761      	b.n	8002318 <StartManagerTask+0x14>
 8002454:	20000000 	.word	0x20000000
 8002458:	20000350 	.word	0x20000350
 800245c:	20000328 	.word	0x20000328
 8002460:	2000031c 	.word	0x2000031c
 8002464:	200002ec 	.word	0x200002ec

08002468 <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END StartManagerTask */
}
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d11e      	bne.n	80024b6 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800247e:	4293      	cmp	r3, r2
 8002480:	d119      	bne.n	80024b6 <_Z41__static_initialization_and_destruction_0ii+0x4e>
Buzzer buzzer(&htim3);
 8002482:	491a      	ldr	r1, [pc, #104]	; (80024ec <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002484:	481a      	ldr	r0, [pc, #104]	; (80024f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002486:	f7ff fe9d 	bl	80021c4 <_ZN6BuzzerC1EP17TIM_HandleTypeDef>
Button button(B2_GPIO_Port ,  B2_Pin);
 800248a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800248e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002492:	4818      	ldr	r0, [pc, #96]	; (80024f4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002494:	f7fe fd1a 	bl	8000ecc <_ZN6ButtonC1EP12GPIO_TypeDeft>
Led ledB(LD2_GPIO_Port , LD2_Pin );
 8002498:	2220      	movs	r2, #32
 800249a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800249e:	4816      	ldr	r0, [pc, #88]	; (80024f8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80024a0:	f7ff fe0c 	bl	80020bc <_ZN3LedC1EP12GPIO_TypeDeft>
Dht dht(DHT11_GPIO_Port , DHT11_Pin, &htim16);
 80024a4:	4b15      	ldr	r3, [pc, #84]	; (80024fc <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80024a6:	2220      	movs	r2, #32
 80024a8:	4915      	ldr	r1, [pc, #84]	; (8002500 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80024aa:	4816      	ldr	r0, [pc, #88]	; (8002504 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80024ac:	f7ff feb4 	bl	8002218 <_ZN3DhtC1EP12GPIO_TypeDeftP17TIM_HandleTypeDef>
Flash flash;
 80024b0:	4815      	ldr	r0, [pc, #84]	; (8002508 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80024b2:	f7ff fee3 	bl	800227c <_ZN5FlashC1Ev>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d113      	bne.n	80024e4 <_Z41__static_initialization_and_destruction_0ii+0x7c>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d10e      	bne.n	80024e4 <_Z41__static_initialization_and_destruction_0ii+0x7c>
 80024c6:	4810      	ldr	r0, [pc, #64]	; (8002508 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80024c8:	f7ff feec 	bl	80022a4 <_ZN5FlashD1Ev>
Dht dht(DHT11_GPIO_Port , DHT11_Pin, &htim16);
 80024cc:	480d      	ldr	r0, [pc, #52]	; (8002504 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80024ce:	f7ff fec9 	bl	8002264 <_ZN3DhtD1Ev>
Led ledB(LD2_GPIO_Port , LD2_Pin );
 80024d2:	4809      	ldr	r0, [pc, #36]	; (80024f8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80024d4:	f7ff fe60 	bl	8002198 <_ZN3LedD1Ev>
Button button(B2_GPIO_Port ,  B2_Pin);
 80024d8:	4806      	ldr	r0, [pc, #24]	; (80024f4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80024da:	f7ff fe68 	bl	80021ae <_ZN6ButtonD1Ev>
Buzzer buzzer(&htim3);
 80024de:	4804      	ldr	r0, [pc, #16]	; (80024f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80024e0:	f7ff fe8f 	bl	8002202 <_ZN6BuzzerD1Ev>
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200003b4 	.word	0x200003b4
 80024f0:	200002ec 	.word	0x200002ec
 80024f4:	20000304 	.word	0x20000304
 80024f8:	2000031c 	.word	0x2000031c
 80024fc:	2000044c 	.word	0x2000044c
 8002500:	48000400 	.word	0x48000400
 8002504:	20000328 	.word	0x20000328
 8002508:	20000350 	.word	0x20000350

0800250c <_GLOBAL__sub_I_buzzer>:
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
 8002510:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002514:	2001      	movs	r0, #1
 8002516:	f7ff ffa7 	bl	8002468 <_Z41__static_initialization_and_destruction_0ii>
 800251a:	bd80      	pop	{r7, pc}

0800251c <_GLOBAL__sub_D_buzzer>:
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
 8002520:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002524:	2000      	movs	r0, #0
 8002526:	f7ff ff9f 	bl	8002468 <_Z41__static_initialization_and_destruction_0ii>
 800252a:	bd80      	pop	{r7, pc}

0800252c <_ZN3RtcC1EP19__I2C_HandleTypeDefm>:

	int bcdToInt(uint8_t bcd);
	uint8_t intToBcd(int value, int minVal, int maxVal);

public:
	Rtc(I2C_HandleTypeDef * hi2c, uint32_t devAddr){
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
		_hi2c = hi2c;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	601a      	str	r2, [r3, #0]
		_devAddr = devAddr;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	711a      	strb	r2, [r3, #4]
	};
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_ZN3RtcD1Ev>:
	~Rtc(){};
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <_ZN3Rtc8bcdToIntEh>:

extern I2C_HandleTypeDef hi2c1;
Rtc rtc(&hi2c1, 0xD0);

int Rtc::bcdToInt(uint8_t bcd)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	460b      	mov	r3, r1
 8002574:	70fb      	strb	r3, [r7, #3]
	return (bcd >> 4) * 10 + (bcd & 0x0F);
 8002576:	78fb      	ldrb	r3, [r7, #3]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	b2db      	uxtb	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	461a      	mov	r2, r3
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	4413      	add	r3, r2
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <_ZN3Rtc7getTimeEP9DateTime_>:
	return ((value / 10) << 4) | (value % 10);
}


void Rtc::getTime(DateTime* dateTime)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af04      	add	r7, sp, #16
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
	uint8_t buffer[RTC_DATE_TIME_SIZE];
	HAL_I2C_Mem_Read(_hi2c, _devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	791b      	ldrb	r3, [r3, #4]
 80025ae:	b299      	uxth	r1, r3
 80025b0:	23ff      	movs	r3, #255	; 0xff
 80025b2:	9302      	str	r3, [sp, #8]
 80025b4:	2307      	movs	r3, #7
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	f107 0308 	add.w	r3, r7, #8
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2301      	movs	r3, #1
 80025c0:	2200      	movs	r2, #0
 80025c2:	f001 fdf3 	bl	80041ac <HAL_I2C_Mem_Read>

	// remove stop bit if set
	buffer[0] &= ~RTC_START_STOP;
 80025c6:	7a3b      	ldrb	r3, [r7, #8]
 80025c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	723b      	strb	r3, [r7, #8]
	dateTime->sec = bcdToInt(buffer[0]);
 80025d0:	7a3b      	ldrb	r3, [r7, #8]
 80025d2:	4619      	mov	r1, r3
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ffc8 	bl	800256a <_ZN3Rtc8bcdToIntEh>
 80025da:	4602      	mov	r2, r0
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	601a      	str	r2, [r3, #0]
	dateTime->min = bcdToInt(buffer[1]);
 80025e0:	7a7b      	ldrb	r3, [r7, #9]
 80025e2:	4619      	mov	r1, r3
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff ffc0 	bl	800256a <_ZN3Rtc8bcdToIntEh>
 80025ea:	4602      	mov	r2, r0
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	605a      	str	r2, [r3, #4]
	dateTime->hours = bcdToInt(buffer[2]);
 80025f0:	7abb      	ldrb	r3, [r7, #10]
 80025f2:	4619      	mov	r1, r3
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ffb8 	bl	800256a <_ZN3Rtc8bcdToIntEh>
 80025fa:	4602      	mov	r2, r0
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	609a      	str	r2, [r3, #8]
	dateTime->weekDay = buffer[3] & 0x07;
 8002600:	7afb      	ldrb	r3, [r7, #11]
 8002602:	f003 0207 	and.w	r2, r3, #7
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	60da      	str	r2, [r3, #12]
	dateTime->day = bcdToInt(buffer[4]);
 800260a:	7b3b      	ldrb	r3, [r7, #12]
 800260c:	4619      	mov	r1, r3
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff ffab 	bl	800256a <_ZN3Rtc8bcdToIntEh>
 8002614:	4602      	mov	r2, r0
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	611a      	str	r2, [r3, #16]
	dateTime->month = bcdToInt(buffer[5]);
 800261a:	7b7b      	ldrb	r3, [r7, #13]
 800261c:	4619      	mov	r1, r3
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff ffa3 	bl	800256a <_ZN3Rtc8bcdToIntEh>
 8002624:	4602      	mov	r2, r0
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	615a      	str	r2, [r3, #20]
	dateTime->year = bcdToInt(buffer[6]);
 800262a:	7bbb      	ldrb	r3, [r7, #14]
 800262c:	4619      	mov	r1, r3
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ff9b 	bl	800256a <_ZN3Rtc8bcdToIntEh>
 8002634:	4602      	mov	r2, r0
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	619a      	str	r2, [r3, #24]
}
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <_Z41__static_initialization_and_destruction_0ii>:
	buffer[4] = intToBcd(dateTime->day, 1, 31);
	buffer[5] = intToBcd(dateTime->month, 1, 12);
	buffer[6] = intToBcd(dateTime->year, 1, 99);

	HAL_I2C_Mem_Write(_hi2c, _devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF);
}
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d109      	bne.n	8002668 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800265a:	4293      	cmp	r3, r2
 800265c:	d104      	bne.n	8002668 <_Z41__static_initialization_and_destruction_0ii+0x24>
Rtc rtc(&hi2c1, 0xD0);
 800265e:	22d0      	movs	r2, #208	; 0xd0
 8002660:	4909      	ldr	r1, [pc, #36]	; (8002688 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002662:	480a      	ldr	r0, [pc, #40]	; (800268c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002664:	f7ff ff62 	bl	800252c <_ZN3RtcC1EP19__I2C_HandleTypeDefm>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d107      	bne.n	800267e <_Z41__static_initialization_and_destruction_0ii+0x3a>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002674:	4293      	cmp	r3, r2
 8002676:	d102      	bne.n	800267e <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8002678:	4804      	ldr	r0, [pc, #16]	; (800268c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800267a:	f7ff ff6b 	bl	8002554 <_ZN3RtcD1Ev>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000360 	.word	0x20000360
 800268c:	20000358 	.word	0x20000358

08002690 <_GLOBAL__sub_I_rtc>:
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
 8002694:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002698:	2001      	movs	r0, #1
 800269a:	f7ff ffd3 	bl	8002644 <_Z41__static_initialization_and_destruction_0ii>
 800269e:	bd80      	pop	{r7, pc}

080026a0 <_GLOBAL__sub_D_rtc>:
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026a8:	2000      	movs	r0, #0
 80026aa:	f7ff ffcb 	bl	8002644 <_Z41__static_initialization_and_destruction_0ii>
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026b4:	f000 fd30 	bl	8003118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026b8:	f000 f866 	bl	8002788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026bc:	f000 f9de 	bl	8002a7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80026c0:	f000 f9ac 	bl	8002a1c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80026c4:	f000 f8b2 	bl	800282c <MX_I2C1_Init>
  MX_TIM3_Init();
 80026c8:	f000 f8f0 	bl	80028ac <MX_TIM3_Init>
  MX_TIM6_Init();
 80026cc:	f000 f948 	bl	8002960 <MX_TIM6_Init>
  MX_TIM16_Init();
 80026d0:	f000 f97e 	bl	80029d0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80026d4:	f006 f944 	bl	8008960 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80026d8:	4a19      	ldr	r2, [pc, #100]	; (8002740 <main+0x90>)
 80026da:	2100      	movs	r1, #0
 80026dc:	4819      	ldr	r0, [pc, #100]	; (8002744 <main+0x94>)
 80026de:	f006 f989 	bl	80089f4 <osThreadNew>
 80026e2:	4603      	mov	r3, r0
 80026e4:	4a18      	ldr	r2, [pc, #96]	; (8002748 <main+0x98>)
 80026e6:	6013      	str	r3, [r2, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(startBlinkTask, NULL, &blinkTask_attributes);
 80026e8:	4a18      	ldr	r2, [pc, #96]	; (800274c <main+0x9c>)
 80026ea:	2100      	movs	r1, #0
 80026ec:	4818      	ldr	r0, [pc, #96]	; (8002750 <main+0xa0>)
 80026ee:	f006 f981 	bl	80089f4 <osThreadNew>
 80026f2:	4603      	mov	r3, r0
 80026f4:	4a17      	ldr	r2, [pc, #92]	; (8002754 <main+0xa4>)
 80026f6:	6013      	str	r3, [r2, #0]

  /* creation of comTask */
  comTaskHandle = osThreadNew(StartComTask, NULL, &comTask_attributes);
 80026f8:	4a17      	ldr	r2, [pc, #92]	; (8002758 <main+0xa8>)
 80026fa:	2100      	movs	r1, #0
 80026fc:	4817      	ldr	r0, [pc, #92]	; (800275c <main+0xac>)
 80026fe:	f006 f979 	bl	80089f4 <osThreadNew>
 8002702:	4603      	mov	r3, r0
 8002704:	4a16      	ldr	r2, [pc, #88]	; (8002760 <main+0xb0>)
 8002706:	6013      	str	r3, [r2, #0]

  /* creation of buttonTak */
  buttonTakHandle = osThreadNew(StartbuttonTak, NULL, &buttonTak_attributes);
 8002708:	4a16      	ldr	r2, [pc, #88]	; (8002764 <main+0xb4>)
 800270a:	2100      	movs	r1, #0
 800270c:	4816      	ldr	r0, [pc, #88]	; (8002768 <main+0xb8>)
 800270e:	f006 f971 	bl	80089f4 <osThreadNew>
 8002712:	4603      	mov	r3, r0
 8002714:	4a15      	ldr	r2, [pc, #84]	; (800276c <main+0xbc>)
 8002716:	6013      	str	r3, [r2, #0]

  /* creation of DhtTask */
  DhtTaskHandle = osThreadNew(StartDhtTask, NULL, &DhtTask_attributes);
 8002718:	4a15      	ldr	r2, [pc, #84]	; (8002770 <main+0xc0>)
 800271a:	2100      	movs	r1, #0
 800271c:	4815      	ldr	r0, [pc, #84]	; (8002774 <main+0xc4>)
 800271e:	f006 f969 	bl	80089f4 <osThreadNew>
 8002722:	4603      	mov	r3, r0
 8002724:	4a14      	ldr	r2, [pc, #80]	; (8002778 <main+0xc8>)
 8002726:	6013      	str	r3, [r2, #0]

  /* creation of ManagerTask */
  ManagerTaskHandle = osThreadNew(StartManagerTask, NULL, &ManagerTask_attributes);
 8002728:	4a14      	ldr	r2, [pc, #80]	; (800277c <main+0xcc>)
 800272a:	2100      	movs	r1, #0
 800272c:	4814      	ldr	r0, [pc, #80]	; (8002780 <main+0xd0>)
 800272e:	f006 f961 	bl	80089f4 <osThreadNew>
 8002732:	4603      	mov	r3, r0
 8002734:	4a13      	ldr	r2, [pc, #76]	; (8002784 <main+0xd4>)
 8002736:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002738:	f006 f936 	bl	80089a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800273c:	e7fe      	b.n	800273c <main+0x8c>
 800273e:	bf00      	nop
 8002740:	0800ec30 	.word	0x0800ec30
 8002744:	08002b95 	.word	0x08002b95
 8002748:	2000051c 	.word	0x2000051c
 800274c:	0800ec54 	.word	0x0800ec54
 8002750:	08002151 	.word	0x08002151
 8002754:	20000520 	.word	0x20000520
 8002758:	0800ec78 	.word	0x0800ec78
 800275c:	08001be9 	.word	0x08001be9
 8002760:	20000524 	.word	0x20000524
 8002764:	0800ec9c 	.word	0x0800ec9c
 8002768:	08001029 	.word	0x08001029
 800276c:	20000528 	.word	0x20000528
 8002770:	0800ecc0 	.word	0x0800ecc0
 8002774:	08001f89 	.word	0x08001f89
 8002778:	2000052c 	.word	0x2000052c
 800277c:	0800ece4 	.word	0x0800ece4
 8002780:	08002305 	.word	0x08002305
 8002784:	20000530 	.word	0x20000530

08002788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b096      	sub	sp, #88	; 0x58
 800278c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800278e:	f107 0314 	add.w	r3, r7, #20
 8002792:	2244      	movs	r2, #68	; 0x44
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f008 feb6 	bl	800b508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800279c:	463b      	mov	r3, r7
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80027aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80027ae:	f002 f90f 	bl	80049d0 <HAL_PWREx_ControlVoltageScaling>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80027b8:	f000 f9f4 	bl	8002ba4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027bc:	2302      	movs	r3, #2
 80027be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027c6:	2310      	movs	r3, #16
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027ca:	2302      	movs	r3, #2
 80027cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027ce:	2302      	movs	r3, #2
 80027d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80027d2:	2301      	movs	r3, #1
 80027d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80027d6:	230a      	movs	r3, #10
 80027d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80027da:	2307      	movs	r3, #7
 80027dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80027de:	2302      	movs	r3, #2
 80027e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80027e2:	2302      	movs	r3, #2
 80027e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	4618      	mov	r0, r3
 80027ec:	f002 f946 	bl	8004a7c <HAL_RCC_OscConfig>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80027f6:	f000 f9d5 	bl	8002ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027fa:	230f      	movs	r3, #15
 80027fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027fe:	2303      	movs	r3, #3
 8002800:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800280e:	463b      	mov	r3, r7
 8002810:	2104      	movs	r1, #4
 8002812:	4618      	mov	r0, r3
 8002814:	f002 fd0e 	bl	8005234 <HAL_RCC_ClockConfig>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800281e:	f000 f9c1 	bl	8002ba4 <Error_Handler>
  }
}
 8002822:	bf00      	nop
 8002824:	3758      	adds	r7, #88	; 0x58
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002830:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <MX_I2C1_Init+0x74>)
 8002832:	4a1c      	ldr	r2, [pc, #112]	; (80028a4 <MX_I2C1_Init+0x78>)
 8002834:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8002836:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <MX_I2C1_Init+0x74>)
 8002838:	4a1b      	ldr	r2, [pc, #108]	; (80028a8 <MX_I2C1_Init+0x7c>)
 800283a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800283c:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <MX_I2C1_Init+0x74>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002842:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <MX_I2C1_Init+0x74>)
 8002844:	2201      	movs	r2, #1
 8002846:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002848:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <MX_I2C1_Init+0x74>)
 800284a:	2200      	movs	r2, #0
 800284c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <MX_I2C1_Init+0x74>)
 8002850:	2200      	movs	r2, #0
 8002852:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002854:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <MX_I2C1_Init+0x74>)
 8002856:	2200      	movs	r2, #0
 8002858:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <MX_I2C1_Init+0x74>)
 800285c:	2200      	movs	r2, #0
 800285e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <MX_I2C1_Init+0x74>)
 8002862:	2200      	movs	r2, #0
 8002864:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002866:	480e      	ldr	r0, [pc, #56]	; (80028a0 <MX_I2C1_Init+0x74>)
 8002868:	f001 fc10 	bl	800408c <HAL_I2C_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002872:	f000 f997 	bl	8002ba4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002876:	2100      	movs	r1, #0
 8002878:	4809      	ldr	r0, [pc, #36]	; (80028a0 <MX_I2C1_Init+0x74>)
 800287a:	f002 f803 	bl	8004884 <HAL_I2CEx_ConfigAnalogFilter>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002884:	f000 f98e 	bl	8002ba4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002888:	2100      	movs	r1, #0
 800288a:	4805      	ldr	r0, [pc, #20]	; (80028a0 <MX_I2C1_Init+0x74>)
 800288c:	f002 f845 	bl	800491a <HAL_I2CEx_ConfigDigitalFilter>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002896:	f000 f985 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000360 	.word	0x20000360
 80028a4:	40005400 	.word	0x40005400
 80028a8:	10909cec 	.word	0x10909cec

080028ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08a      	sub	sp, #40	; 0x28
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b2:	f107 031c 	add.w	r3, r7, #28
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028be:	463b      	mov	r3, r7
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
 80028cc:	615a      	str	r2, [r3, #20]
 80028ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028d0:	4b21      	ldr	r3, [pc, #132]	; (8002958 <MX_TIM3_Init+0xac>)
 80028d2:	4a22      	ldr	r2, [pc, #136]	; (800295c <MX_TIM3_Init+0xb0>)
 80028d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 80028d6:	4b20      	ldr	r3, [pc, #128]	; (8002958 <MX_TIM3_Init+0xac>)
 80028d8:	f240 321f 	movw	r2, #799	; 0x31f
 80028dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028de:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <MX_TIM3_Init+0xac>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80028e4:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <MX_TIM3_Init+0xac>)
 80028e6:	2264      	movs	r2, #100	; 0x64
 80028e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ea:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <MX_TIM3_Init+0xac>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f0:	4b19      	ldr	r3, [pc, #100]	; (8002958 <MX_TIM3_Init+0xac>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028f6:	4818      	ldr	r0, [pc, #96]	; (8002958 <MX_TIM3_Init+0xac>)
 80028f8:	f003 fd03 	bl	8006302 <HAL_TIM_PWM_Init>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002902:	f000 f94f 	bl	8002ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800290a:	2300      	movs	r3, #0
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800290e:	f107 031c 	add.w	r3, r7, #28
 8002912:	4619      	mov	r1, r3
 8002914:	4810      	ldr	r0, [pc, #64]	; (8002958 <MX_TIM3_Init+0xac>)
 8002916:	f004 fd7f 	bl	8007418 <HAL_TIMEx_MasterConfigSynchronization>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002920:	f000 f940 	bl	8002ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002924:	2360      	movs	r3, #96	; 0x60
 8002926:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8002928:	2332      	movs	r3, #50	; 0x32
 800292a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800292c:	2300      	movs	r3, #0
 800292e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002934:	463b      	mov	r3, r7
 8002936:	2200      	movs	r2, #0
 8002938:	4619      	mov	r1, r3
 800293a:	4807      	ldr	r0, [pc, #28]	; (8002958 <MX_TIM3_Init+0xac>)
 800293c:	f004 f890 	bl	8006a60 <HAL_TIM_PWM_ConfigChannel>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002946:	f000 f92d 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800294a:	4803      	ldr	r0, [pc, #12]	; (8002958 <MX_TIM3_Init+0xac>)
 800294c:	f000 fa18 	bl	8002d80 <HAL_TIM_MspPostInit>

}
 8002950:	bf00      	nop
 8002952:	3728      	adds	r7, #40	; 0x28
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	200003b4 	.word	0x200003b4
 800295c:	40000400 	.word	0x40000400

08002960 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002970:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <MX_TIM6_Init+0x68>)
 8002972:	4a16      	ldr	r2, [pc, #88]	; (80029cc <MX_TIM6_Init+0x6c>)
 8002974:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <MX_TIM6_Init+0x68>)
 8002978:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800297c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800297e:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <MX_TIM6_Init+0x68>)
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8002984:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <MX_TIM6_Init+0x68>)
 8002986:	f240 32e7 	movw	r2, #999	; 0x3e7
 800298a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <MX_TIM6_Init+0x68>)
 800298e:	2200      	movs	r2, #0
 8002990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002992:	480d      	ldr	r0, [pc, #52]	; (80029c8 <MX_TIM6_Init+0x68>)
 8002994:	f003 fb2e 	bl	8005ff4 <HAL_TIM_Base_Init>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800299e:	f000 f901 	bl	8002ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	4619      	mov	r1, r3
 80029ae:	4806      	ldr	r0, [pc, #24]	; (80029c8 <MX_TIM6_Init+0x68>)
 80029b0:	f004 fd32 	bl	8007418 <HAL_TIMEx_MasterConfigSynchronization>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80029ba:	f000 f8f3 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000400 	.word	0x20000400
 80029cc:	40001000 	.word	0x40001000

080029d0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029d6:	4a10      	ldr	r2, [pc, #64]	; (8002a18 <MX_TIM16_Init+0x48>)
 80029d8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80;
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029dc:	2250      	movs	r2, #80	; 0x50
 80029de:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80029e6:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029ec:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80029f4:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002a00:	4804      	ldr	r0, [pc, #16]	; (8002a14 <MX_TIM16_Init+0x44>)
 8002a02:	f003 faf7 	bl	8005ff4 <HAL_TIM_Base_Init>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002a0c:	f000 f8ca 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002a10:	bf00      	nop
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	2000044c 	.word	0x2000044c
 8002a18:	40014400 	.word	0x40014400

08002a1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <MX_USART2_UART_Init+0x58>)
 8002a22:	4a15      	ldr	r2, [pc, #84]	; (8002a78 <MX_USART2_UART_Init+0x5c>)
 8002a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a26:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <MX_USART2_UART_Init+0x58>)
 8002a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a2e:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <MX_USART2_UART_Init+0x58>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a34:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <MX_USART2_UART_Init+0x58>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <MX_USART2_UART_Init+0x58>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <MX_USART2_UART_Init+0x58>)
 8002a42:	220c      	movs	r2, #12
 8002a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a46:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <MX_USART2_UART_Init+0x58>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a4c:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <MX_USART2_UART_Init+0x58>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <MX_USART2_UART_Init+0x58>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <MX_USART2_UART_Init+0x58>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a5e:	4805      	ldr	r0, [pc, #20]	; (8002a74 <MX_USART2_UART_Init+0x58>)
 8002a60:	f004 fd80 	bl	8007564 <HAL_UART_Init>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a6a:	f000 f89b 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000498 	.word	0x20000498
 8002a78:	40004400 	.word	0x40004400

08002a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	; 0x28
 8002a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a82:	f107 0314 	add.w	r3, r7, #20
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	60da      	str	r2, [r3, #12]
 8002a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a92:	4b3d      	ldr	r3, [pc, #244]	; (8002b88 <MX_GPIO_Init+0x10c>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a96:	4a3c      	ldr	r2, [pc, #240]	; (8002b88 <MX_GPIO_Init+0x10c>)
 8002a98:	f043 0304 	orr.w	r3, r3, #4
 8002a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a9e:	4b3a      	ldr	r3, [pc, #232]	; (8002b88 <MX_GPIO_Init+0x10c>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002aaa:	4b37      	ldr	r3, [pc, #220]	; (8002b88 <MX_GPIO_Init+0x10c>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	4a36      	ldr	r2, [pc, #216]	; (8002b88 <MX_GPIO_Init+0x10c>)
 8002ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ab6:	4b34      	ldr	r3, [pc, #208]	; (8002b88 <MX_GPIO_Init+0x10c>)
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac2:	4b31      	ldr	r3, [pc, #196]	; (8002b88 <MX_GPIO_Init+0x10c>)
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac6:	4a30      	ldr	r2, [pc, #192]	; (8002b88 <MX_GPIO_Init+0x10c>)
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ace:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <MX_GPIO_Init+0x10c>)
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ada:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <MX_GPIO_Init+0x10c>)
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	4a2a      	ldr	r2, [pc, #168]	; (8002b88 <MX_GPIO_Init+0x10c>)
 8002ae0:	f043 0302 	orr.w	r3, r3, #2
 8002ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ae6:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <MX_GPIO_Init+0x10c>)
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	607b      	str	r3, [r7, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002af2:	2200      	movs	r2, #0
 8002af4:	2120      	movs	r1, #32
 8002af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002afa:	f001 fa7d 	bl	8003ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002afe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b04:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b0e:	f107 0314 	add.w	r3, r7, #20
 8002b12:	4619      	mov	r1, r3
 8002b14:	481d      	ldr	r0, [pc, #116]	; (8002b8c <MX_GPIO_Init+0x110>)
 8002b16:	f001 f8ad 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002b1a:	2320      	movs	r3, #32
 8002b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b26:	2300      	movs	r3, #0
 8002b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b34:	f001 f89e 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8002b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b3e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8002b48:	f107 0314 	add.w	r3, r7, #20
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b52:	f001 f88f 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8002b56:	2320      	movs	r3, #32
 8002b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b5a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4809      	ldr	r0, [pc, #36]	; (8002b90 <MX_GPIO_Init+0x114>)
 8002b6c:	f001 f882 	bl	8003c74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002b70:	2200      	movs	r2, #0
 8002b72:	2105      	movs	r1, #5
 8002b74:	2028      	movs	r0, #40	; 0x28
 8002b76:	f000 fc4a 	bl	800340e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b7a:	2028      	movs	r0, #40	; 0x28
 8002b7c:	f000 fc63 	bl	8003446 <HAL_NVIC_EnableIRQ>

}
 8002b80:	bf00      	nop
 8002b82:	3728      	adds	r7, #40	; 0x28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	48000800 	.word	0x48000800
 8002b90:	48000400 	.word	0x48000400

08002b94 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	f005 ffbb 	bl	8008b18 <osDelay>
 8002ba2:	e7fb      	b.n	8002b9c <StartDefaultTask+0x8>

08002ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba8:	b672      	cpsid	i
}
 8002baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bac:	e7fe      	b.n	8002bac <Error_Handler+0x8>
	...

08002bb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <HAL_MspInit+0x5c>)
 8002bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bba:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <HAL_MspInit+0x5c>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6613      	str	r3, [r2, #96]	; 0x60
 8002bc2:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_MspInit+0x5c>)
 8002bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bce:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <HAL_MspInit+0x5c>)
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd2:	4a0e      	ldr	r2, [pc, #56]	; (8002c0c <HAL_MspInit+0x5c>)
 8002bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8002bda:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <HAL_MspInit+0x5c>)
 8002bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	210f      	movs	r1, #15
 8002bea:	f06f 0001 	mvn.w	r0, #1
 8002bee:	f000 fc0e 	bl	800340e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2105      	movs	r1, #5
 8002bf6:	2004      	movs	r0, #4
 8002bf8:	f000 fc09 	bl	800340e <HAL_NVIC_SetPriority>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8002bfc:	2004      	movs	r0, #4
 8002bfe:	f000 fc22 	bl	8003446 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000

08002c10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b0ac      	sub	sp, #176	; 0xb0
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	2288      	movs	r2, #136	; 0x88
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f008 fc69 	bl	800b508 <memset>
  if(hi2c->Instance==I2C1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a21      	ldr	r2, [pc, #132]	; (8002cc0 <HAL_I2C_MspInit+0xb0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d13b      	bne.n	8002cb8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c40:	2340      	movs	r3, #64	; 0x40
 8002c42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c44:	2300      	movs	r3, #0
 8002c46:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c48:	f107 0314 	add.w	r3, r7, #20
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f002 fd15 	bl	800567c <HAL_RCCEx_PeriphCLKConfig>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002c58:	f7ff ffa4 	bl	8002ba4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_I2C_MspInit+0xb4>)
 8002c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c60:	4a18      	ldr	r2, [pc, #96]	; (8002cc4 <HAL_I2C_MspInit+0xb4>)
 8002c62:	f043 0302 	orr.w	r3, r3, #2
 8002c66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c68:	4b16      	ldr	r3, [pc, #88]	; (8002cc4 <HAL_I2C_MspInit+0xb4>)
 8002c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c7c:	2312      	movs	r3, #18
 8002c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c8e:	2304      	movs	r3, #4
 8002c90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c98:	4619      	mov	r1, r3
 8002c9a:	480b      	ldr	r0, [pc, #44]	; (8002cc8 <HAL_I2C_MspInit+0xb8>)
 8002c9c:	f000 ffea 	bl	8003c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ca0:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <HAL_I2C_MspInit+0xb4>)
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca4:	4a07      	ldr	r2, [pc, #28]	; (8002cc4 <HAL_I2C_MspInit+0xb4>)
 8002ca6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002caa:	6593      	str	r3, [r2, #88]	; 0x58
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_I2C_MspInit+0xb4>)
 8002cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cb8:	bf00      	nop
 8002cba:	37b0      	adds	r7, #176	; 0xb0
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40005400 	.word	0x40005400
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	48000400 	.word	0x48000400

08002ccc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <HAL_TIM_PWM_MspInit+0x38>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d10b      	bne.n	8002cf6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cde:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce2:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8002cea:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <HAL_TIM_PWM_MspInit+0x3c>)
 8002cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40000400 	.word	0x40000400
 8002d08:	40021000 	.word	0x40021000

08002d0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a16      	ldr	r2, [pc, #88]	; (8002d74 <HAL_TIM_Base_MspInit+0x68>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d114      	bne.n	8002d48 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d1e:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <HAL_TIM_Base_MspInit+0x6c>)
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d22:	4a15      	ldr	r2, [pc, #84]	; (8002d78 <HAL_TIM_Base_MspInit+0x6c>)
 8002d24:	f043 0310 	orr.w	r3, r3, #16
 8002d28:	6593      	str	r3, [r2, #88]	; 0x58
 8002d2a:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <HAL_TIM_Base_MspInit+0x6c>)
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002d36:	2200      	movs	r2, #0
 8002d38:	2105      	movs	r1, #5
 8002d3a:	2036      	movs	r0, #54	; 0x36
 8002d3c:	f000 fb67 	bl	800340e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d40:	2036      	movs	r0, #54	; 0x36
 8002d42:	f000 fb80 	bl	8003446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002d46:	e010      	b.n	8002d6a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a0b      	ldr	r2, [pc, #44]	; (8002d7c <HAL_TIM_Base_MspInit+0x70>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d10b      	bne.n	8002d6a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_TIM_Base_MspInit+0x6c>)
 8002d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d56:	4a08      	ldr	r2, [pc, #32]	; (8002d78 <HAL_TIM_Base_MspInit+0x6c>)
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5c:	6613      	str	r3, [r2, #96]	; 0x60
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_TIM_Base_MspInit+0x6c>)
 8002d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
}
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40001000 	.word	0x40001000
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40014400 	.word	0x40014400

08002d80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d88:	f107 030c 	add.w	r3, r7, #12
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a11      	ldr	r2, [pc, #68]	; (8002de4 <HAL_TIM_MspPostInit+0x64>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d11b      	bne.n	8002dda <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_TIM_MspPostInit+0x68>)
 8002da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da6:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <HAL_TIM_MspPostInit+0x68>)
 8002da8:	f043 0302 	orr.w	r3, r3, #2
 8002dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <HAL_TIM_MspPostInit+0x68>)
 8002db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002dba:	2310      	movs	r3, #16
 8002dbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dce:	f107 030c 	add.w	r3, r7, #12
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4805      	ldr	r0, [pc, #20]	; (8002dec <HAL_TIM_MspPostInit+0x6c>)
 8002dd6:	f000 ff4d 	bl	8003c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002dda:	bf00      	nop
 8002ddc:	3720      	adds	r7, #32
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40021000 	.word	0x40021000
 8002dec:	48000400 	.word	0x48000400

08002df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b0ac      	sub	sp, #176	; 0xb0
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	60da      	str	r2, [r3, #12]
 8002e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	2288      	movs	r2, #136	; 0x88
 8002e0e:	2100      	movs	r1, #0
 8002e10:	4618      	mov	r0, r3
 8002e12:	f008 fb79 	bl	800b508 <memset>
  if(huart->Instance==USART2)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a25      	ldr	r2, [pc, #148]	; (8002eb0 <HAL_UART_MspInit+0xc0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d143      	bne.n	8002ea8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e20:	2302      	movs	r3, #2
 8002e22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e24:	2300      	movs	r3, #0
 8002e26:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f002 fc25 	bl	800567c <HAL_RCCEx_PeriphCLKConfig>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e38:	f7ff feb4 	bl	8002ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_UART_MspInit+0xc4>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	4a1c      	ldr	r2, [pc, #112]	; (8002eb4 <HAL_UART_MspInit+0xc4>)
 8002e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e46:	6593      	str	r3, [r2, #88]	; 0x58
 8002e48:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <HAL_UART_MspInit+0xc4>)
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e54:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <HAL_UART_MspInit+0xc4>)
 8002e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e58:	4a16      	ldr	r2, [pc, #88]	; (8002eb4 <HAL_UART_MspInit+0xc4>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e60:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <HAL_UART_MspInit+0xc4>)
 8002e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e6c:	230c      	movs	r3, #12
 8002e6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e84:	2307      	movs	r3, #7
 8002e86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e8e:	4619      	mov	r1, r3
 8002e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e94:	f000 feee 	bl	8003c74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2105      	movs	r1, #5
 8002e9c:	2026      	movs	r0, #38	; 0x26
 8002e9e:	f000 fab6 	bl	800340e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ea2:	2026      	movs	r0, #38	; 0x26
 8002ea4:	f000 facf 	bl	8003446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ea8:	bf00      	nop
 8002eaa:	37b0      	adds	r7, #176	; 0xb0
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40004400 	.word	0x40004400
 8002eb4:	40021000 	.word	0x40021000

08002eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ebc:	e7fe      	b.n	8002ebc <NMI_Handler+0x4>

08002ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec2:	e7fe      	b.n	8002ec2 <HardFault_Handler+0x4>

08002ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ec8:	e7fe      	b.n	8002ec8 <MemManage_Handler+0x4>

08002eca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ece:	e7fe      	b.n	8002ece <BusFault_Handler+0x4>

08002ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed4:	e7fe      	b.n	8002ed4 <UsageFault_Handler+0x4>

08002ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ee8:	f000 f972 	bl	80031d0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002eec:	f007 fa22 	bl	800a334 <xTaskGetSchedulerState>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d001      	beq.n	8002efa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002ef6:	f008 f807 	bl	800af08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}

08002efe <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002f02:	f000 fbb3 	bl	800366c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f10:	4802      	ldr	r0, [pc, #8]	; (8002f1c <USART2_IRQHandler+0x10>)
 8002f12:	f004 fcdb 	bl	80078cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000498 	.word	0x20000498

08002f20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8002f24:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f28:	f001 f898 	bl	800405c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002f2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002f30:	f001 f894 	bl	800405c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f34:	bf00      	nop
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f3c:	4802      	ldr	r0, [pc, #8]	; (8002f48 <TIM6_DAC_IRQHandler+0x10>)
 8002f3e:	f003 fc6f 	bl	8006820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000400 	.word	0x20000400

08002f4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
	return 1;
 8002f50:	2301      	movs	r3, #1
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <_kill>:

int _kill(int pid, int sig)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f66:	f008 fa87 	bl	800b478 <__errno>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2216      	movs	r2, #22
 8002f6e:	601a      	str	r2, [r3, #0]
	return -1;
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <_exit>:

void _exit (int status)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f84:	f04f 31ff 	mov.w	r1, #4294967295
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ffe7 	bl	8002f5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f8e:	e7fe      	b.n	8002f8e <_exit+0x12>

08002f90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	e00a      	b.n	8002fb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002fa2:	f3af 8000 	nop.w
 8002fa6:	4601      	mov	r1, r0
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	60ba      	str	r2, [r7, #8]
 8002fae:	b2ca      	uxtb	r2, r1
 8002fb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	dbf0      	blt.n	8002fa2 <_read+0x12>
	}

return len;
 8002fc0:	687b      	ldr	r3, [r7, #4]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <_close>:
	}
	return len;
}

int _close(int file)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
	return -1;
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ff2:	605a      	str	r2, [r3, #4]
	return 0;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <_isatty>:

int _isatty(int file)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
	return 1;
 800300a:	2301      	movs	r3, #1
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
	return 0;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800303c:	4a14      	ldr	r2, [pc, #80]	; (8003090 <_sbrk+0x5c>)
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <_sbrk+0x60>)
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003048:	4b13      	ldr	r3, [pc, #76]	; (8003098 <_sbrk+0x64>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d102      	bne.n	8003056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003050:	4b11      	ldr	r3, [pc, #68]	; (8003098 <_sbrk+0x64>)
 8003052:	4a12      	ldr	r2, [pc, #72]	; (800309c <_sbrk+0x68>)
 8003054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <_sbrk+0x64>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	429a      	cmp	r2, r3
 8003062:	d207      	bcs.n	8003074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003064:	f008 fa08 	bl	800b478 <__errno>
 8003068:	4603      	mov	r3, r0
 800306a:	220c      	movs	r2, #12
 800306c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800306e:	f04f 33ff 	mov.w	r3, #4294967295
 8003072:	e009      	b.n	8003088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003074:	4b08      	ldr	r3, [pc, #32]	; (8003098 <_sbrk+0x64>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <_sbrk+0x64>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	4a05      	ldr	r2, [pc, #20]	; (8003098 <_sbrk+0x64>)
 8003084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003086:	68fb      	ldr	r3, [r7, #12]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20018000 	.word	0x20018000
 8003094:	00000400 	.word	0x00000400
 8003098:	20000534 	.word	0x20000534
 800309c:	20002628 	.word	0x20002628

080030a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <SystemInit+0x20>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030aa:	4a05      	ldr	r2, [pc, #20]	; (80030c0 <SystemInit+0x20>)
 80030ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80030c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030c8:	f7ff ffea 	bl	80030a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030cc:	480c      	ldr	r0, [pc, #48]	; (8003100 <LoopForever+0x6>)
  ldr r1, =_edata
 80030ce:	490d      	ldr	r1, [pc, #52]	; (8003104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030d0:	4a0d      	ldr	r2, [pc, #52]	; (8003108 <LoopForever+0xe>)
  movs r3, #0
 80030d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030d4:	e002      	b.n	80030dc <LoopCopyDataInit>

080030d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030da:	3304      	adds	r3, #4

080030dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030e0:	d3f9      	bcc.n	80030d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030e2:	4a0a      	ldr	r2, [pc, #40]	; (800310c <LoopForever+0x12>)
  ldr r4, =_ebss
 80030e4:	4c0a      	ldr	r4, [pc, #40]	; (8003110 <LoopForever+0x16>)
  movs r3, #0
 80030e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030e8:	e001      	b.n	80030ee <LoopFillZerobss>

080030ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030ec:	3204      	adds	r2, #4

080030ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030f0:	d3fb      	bcc.n	80030ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030f2:	f008 f9c7 	bl	800b484 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030f6:	f7ff fadb 	bl	80026b0 <main>

080030fa <LoopForever>:

LoopForever:
    b LoopForever
 80030fa:	e7fe      	b.n	80030fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80030fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003104:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8003108:	0800f170 	.word	0x0800f170
  ldr r2, =_sbss
 800310c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8003110:	20002628 	.word	0x20002628

08003114 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003114:	e7fe      	b.n	8003114 <ADC1_2_IRQHandler>
	...

08003118 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003122:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <HAL_Init+0x3c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a0b      	ldr	r2, [pc, #44]	; (8003154 <HAL_Init+0x3c>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800312e:	2003      	movs	r0, #3
 8003130:	f000 f962 	bl	80033f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003134:	200f      	movs	r0, #15
 8003136:	f000 f80f 	bl	8003158 <HAL_InitTick>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	71fb      	strb	r3, [r7, #7]
 8003144:	e001      	b.n	800314a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003146:	f7ff fd33 	bl	8002bb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800314a:	79fb      	ldrb	r3, [r7, #7]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40022000 	.word	0x40022000

08003158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003164:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <HAL_InitTick+0x6c>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d023      	beq.n	80031b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800316c:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <HAL_InitTick+0x70>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <HAL_InitTick+0x6c>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	4619      	mov	r1, r3
 8003176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800317a:	fbb3 f3f1 	udiv	r3, r3, r1
 800317e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f97b 	bl	800347e <HAL_SYSTICK_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10f      	bne.n	80031ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b0f      	cmp	r3, #15
 8003192:	d809      	bhi.n	80031a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003194:	2200      	movs	r2, #0
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	f04f 30ff 	mov.w	r0, #4294967295
 800319c:	f000 f937 	bl	800340e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031a0:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <HAL_InitTick+0x74>)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e007      	b.n	80031b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
 80031ac:	e004      	b.n	80031b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	73fb      	strb	r3, [r7, #15]
 80031b2:	e001      	b.n	80031b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000010 	.word	0x20000010
 80031c8:	20000008 	.word	0x20000008
 80031cc:	2000000c 	.word	0x2000000c

080031d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <HAL_IncTick+0x20>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <HAL_IncTick+0x24>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4413      	add	r3, r2
 80031e0:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <HAL_IncTick+0x24>)
 80031e2:	6013      	str	r3, [r2, #0]
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20000010 	.word	0x20000010
 80031f4:	20000538 	.word	0x20000538

080031f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return uwTick;
 80031fc:	4b03      	ldr	r3, [pc, #12]	; (800320c <HAL_GetTick+0x14>)
 80031fe:	681b      	ldr	r3, [r3, #0]
}
 8003200:	4618      	mov	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000538 	.word	0x20000538

08003210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003220:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <__NVIC_SetPriorityGrouping+0x44>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800322c:	4013      	ands	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800323c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003242:	4a04      	ldr	r2, [pc, #16]	; (8003254 <__NVIC_SetPriorityGrouping+0x44>)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	60d3      	str	r3, [r2, #12]
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <__NVIC_GetPriorityGrouping+0x18>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	0a1b      	lsrs	r3, r3, #8
 8003262:	f003 0307 	and.w	r3, r3, #7
}
 8003266:	4618      	mov	r0, r3
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	2b00      	cmp	r3, #0
 8003284:	db0b      	blt.n	800329e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	f003 021f 	and.w	r2, r3, #31
 800328c:	4907      	ldr	r1, [pc, #28]	; (80032ac <__NVIC_EnableIRQ+0x38>)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	2001      	movs	r0, #1
 8003296:	fa00 f202 	lsl.w	r2, r0, r2
 800329a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	e000e100 	.word	0xe000e100

080032b0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	db12      	blt.n	80032e8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	f003 021f 	and.w	r2, r3, #31
 80032c8:	490a      	ldr	r1, [pc, #40]	; (80032f4 <__NVIC_DisableIRQ+0x44>)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	2001      	movs	r0, #1
 80032d2:	fa00 f202 	lsl.w	r2, r0, r2
 80032d6:	3320      	adds	r3, #32
 80032d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80032dc:	f3bf 8f4f 	dsb	sy
}
 80032e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032e2:	f3bf 8f6f 	isb	sy
}
 80032e6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000e100 	.word	0xe000e100

080032f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	6039      	str	r1, [r7, #0]
 8003302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003308:	2b00      	cmp	r3, #0
 800330a:	db0a      	blt.n	8003322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	b2da      	uxtb	r2, r3
 8003310:	490c      	ldr	r1, [pc, #48]	; (8003344 <__NVIC_SetPriority+0x4c>)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	0112      	lsls	r2, r2, #4
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	440b      	add	r3, r1
 800331c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003320:	e00a      	b.n	8003338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	b2da      	uxtb	r2, r3
 8003326:	4908      	ldr	r1, [pc, #32]	; (8003348 <__NVIC_SetPriority+0x50>)
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	3b04      	subs	r3, #4
 8003330:	0112      	lsls	r2, r2, #4
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	440b      	add	r3, r1
 8003336:	761a      	strb	r2, [r3, #24]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000e100 	.word	0xe000e100
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	; 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f1c3 0307 	rsb	r3, r3, #7
 8003366:	2b04      	cmp	r3, #4
 8003368:	bf28      	it	cs
 800336a:	2304      	movcs	r3, #4
 800336c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3304      	adds	r3, #4
 8003372:	2b06      	cmp	r3, #6
 8003374:	d902      	bls.n	800337c <NVIC_EncodePriority+0x30>
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3b03      	subs	r3, #3
 800337a:	e000      	b.n	800337e <NVIC_EncodePriority+0x32>
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003380:	f04f 32ff 	mov.w	r2, #4294967295
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43da      	mvns	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	401a      	ands	r2, r3
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003394:	f04f 31ff 	mov.w	r1, #4294967295
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	fa01 f303 	lsl.w	r3, r1, r3
 800339e:	43d9      	mvns	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a4:	4313      	orrs	r3, r2
         );
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3724      	adds	r7, #36	; 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3b01      	subs	r3, #1
 80033c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033c4:	d301      	bcc.n	80033ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033c6:	2301      	movs	r3, #1
 80033c8:	e00f      	b.n	80033ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ca:	4a0a      	ldr	r2, [pc, #40]	; (80033f4 <SysTick_Config+0x40>)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033d2:	210f      	movs	r1, #15
 80033d4:	f04f 30ff 	mov.w	r0, #4294967295
 80033d8:	f7ff ff8e 	bl	80032f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <SysTick_Config+0x40>)
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033e2:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <SysTick_Config+0x40>)
 80033e4:	2207      	movs	r2, #7
 80033e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	e000e010 	.word	0xe000e010

080033f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff ff05 	bl	8003210 <__NVIC_SetPriorityGrouping>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b086      	sub	sp, #24
 8003412:	af00      	add	r7, sp, #0
 8003414:	4603      	mov	r3, r0
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003420:	f7ff ff1a 	bl	8003258 <__NVIC_GetPriorityGrouping>
 8003424:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	6978      	ldr	r0, [r7, #20]
 800342c:	f7ff ff8e 	bl	800334c <NVIC_EncodePriority>
 8003430:	4602      	mov	r2, r0
 8003432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003436:	4611      	mov	r1, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ff5d 	bl	80032f8 <__NVIC_SetPriority>
}
 800343e:	bf00      	nop
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	4603      	mov	r3, r0
 800344e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ff0d 	bl	8003274 <__NVIC_EnableIRQ>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	4603      	mov	r3, r0
 800346a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800346c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ff1d 	bl	80032b0 <__NVIC_DisableIRQ>
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ff94 	bl	80033b4 <SysTick_Config>
 800348c:	4603      	mov	r3, r0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003496:	b480      	push	{r7}
 8003498:	b085      	sub	sp, #20
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d008      	beq.n	80034c0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2204      	movs	r2, #4
 80034b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e022      	b.n	8003506 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 020e 	bic.w	r2, r2, #14
 80034ce:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	f003 021c 	and.w	r2, r3, #28
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	2101      	movs	r1, #1
 80034ee:	fa01 f202 	lsl.w	r2, r1, r2
 80034f2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003504:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d005      	beq.n	8003536 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2204      	movs	r2, #4
 800352e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
 8003534:	e029      	b.n	800358a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 020e 	bic.w	r2, r2, #14
 8003544:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0201 	bic.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	f003 021c 	and.w	r2, r3, #28
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	2101      	movs	r1, #1
 8003564:	fa01 f202 	lsl.w	r2, r1, r2
 8003568:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
    }
  }
  return status;
 800358a:	7bfb      	ldrb	r3, [r7, #15]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80035a6:	4b2f      	ldr	r3, [pc, #188]	; (8003664 <HAL_FLASH_Program+0xd0>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_FLASH_Program+0x1e>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e053      	b.n	800365a <HAL_FLASH_Program+0xc6>
 80035b2:	4b2c      	ldr	r3, [pc, #176]	; (8003664 <HAL_FLASH_Program+0xd0>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035bc:	f000 f964 	bl	8003888 <FLASH_WaitForLastOperation>
 80035c0:	4603      	mov	r3, r0
 80035c2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80035c4:	7dfb      	ldrb	r3, [r7, #23]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d143      	bne.n	8003652 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80035ca:	4b26      	ldr	r3, [pc, #152]	; (8003664 <HAL_FLASH_Program+0xd0>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80035d0:	4b25      	ldr	r3, [pc, #148]	; (8003668 <HAL_FLASH_Program+0xd4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d009      	beq.n	80035f0 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80035dc:	4b22      	ldr	r3, [pc, #136]	; (8003668 <HAL_FLASH_Program+0xd4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a21      	ldr	r2, [pc, #132]	; (8003668 <HAL_FLASH_Program+0xd4>)
 80035e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035e6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80035e8:	4b1e      	ldr	r3, [pc, #120]	; (8003664 <HAL_FLASH_Program+0xd0>)
 80035ea:	2202      	movs	r2, #2
 80035ec:	771a      	strb	r2, [r3, #28]
 80035ee:	e002      	b.n	80035f6 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80035f0:	4b1c      	ldr	r3, [pc, #112]	; (8003664 <HAL_FLASH_Program+0xd0>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d107      	bne.n	800360c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80035fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003600:	68b8      	ldr	r0, [r7, #8]
 8003602:	f000 f997 	bl	8003934 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003606:	2301      	movs	r3, #1
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	e010      	b.n	800362e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d002      	beq.n	8003618 <HAL_FLASH_Program+0x84>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d10a      	bne.n	800362e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	4619      	mov	r1, r3
 800361c:	68b8      	ldr	r0, [r7, #8]
 800361e:	f000 f9af 	bl	8003980 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b02      	cmp	r3, #2
 8003626:	d102      	bne.n	800362e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003628:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800362c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800362e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003632:	f000 f929 	bl	8003888 <FLASH_WaitForLastOperation>
 8003636:	4603      	mov	r3, r0
 8003638:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d006      	beq.n	800364e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003640:	4b09      	ldr	r3, [pc, #36]	; (8003668 <HAL_FLASH_Program+0xd4>)
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	43db      	mvns	r3, r3
 8003648:	4907      	ldr	r1, [pc, #28]	; (8003668 <HAL_FLASH_Program+0xd4>)
 800364a:	4013      	ands	r3, r2
 800364c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800364e:	f000 fac7 	bl	8003be0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003652:	4b04      	ldr	r3, [pc, #16]	; (8003664 <HAL_FLASH_Program+0xd0>)
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]

  return status;
 8003658:	7dfb      	ldrb	r3, [r7, #23]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20000014 	.word	0x20000014
 8003668:	40022000 	.word	0x40022000

0800366c <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 8003672:	4b68      	ldr	r3, [pc, #416]	; (8003814 <HAL_FLASH_IRQHandler+0x1a8>)
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	4a67      	ldr	r2, [pc, #412]	; (8003814 <HAL_FLASH_IRQHandler+0x1a8>)
 8003678:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800367c:	f023 0307 	bic.w	r3, r3, #7
 8003680:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 8003682:	4b64      	ldr	r3, [pc, #400]	; (8003814 <HAL_FLASH_IRQHandler+0x1a8>)
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	4a63      	ldr	r2, [pc, #396]	; (8003814 <HAL_FLASH_IRQHandler+0x1a8>)
 8003688:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800368c:	6153      	str	r3, [r2, #20]
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 800368e:	4b62      	ldr	r3, [pc, #392]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 8003690:	7a1b      	ldrb	r3, [r3, #8]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b04      	cmp	r3, #4
 8003696:	d105      	bne.n	80036a4 <HAL_FLASH_IRQHandler+0x38>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003698:	4b5e      	ldr	r3, [pc, #376]	; (8003814 <HAL_FLASH_IRQHandler+0x1a8>)
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	4a5d      	ldr	r2, [pc, #372]	; (8003814 <HAL_FLASH_IRQHandler+0x1a8>)
 800369e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a2:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80036a4:	4b5b      	ldr	r3, [pc, #364]	; (8003814 <HAL_FLASH_IRQHandler+0x1a8>)
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80036ac:	4013      	ands	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]

  if (error !=0U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d045      	beq.n	8003742 <HAL_FLASH_IRQHandler+0xd6>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80036b6:	4b58      	ldr	r3, [pc, #352]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4313      	orrs	r3, r2
 80036be:	4a56      	ldr	r2, [pc, #344]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 80036c0:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d007      	beq.n	80036dc <HAL_FLASH_IRQHandler+0x70>
 80036cc:	4b51      	ldr	r3, [pc, #324]	; (8003814 <HAL_FLASH_IRQHandler+0x1a8>)
 80036ce:	699a      	ldr	r2, [r3, #24]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80036d6:	494f      	ldr	r1, [pc, #316]	; (8003814 <HAL_FLASH_IRQHandler+0x1a8>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	618b      	str	r3, [r1, #24]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d004      	beq.n	80036f0 <HAL_FLASH_IRQHandler+0x84>
 80036e6:	4a4b      	ldr	r2, [pc, #300]	; (8003814 <HAL_FLASH_IRQHandler+0x1a8>)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80036ee:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches() ;
 80036f0:	f000 fa76 	bl	8003be0 <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 80036f4:	4b48      	ldr	r3, [pc, #288]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 80036f6:	7a1b      	ldrb	r3, [r3, #8]
 80036f8:	72fb      	strb	r3, [r7, #11]
    if(procedure == FLASH_PROC_PAGE_ERASE)
 80036fa:	7afb      	ldrb	r3, [r7, #11]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d105      	bne.n	800370c <HAL_FLASH_IRQHandler+0xa0>
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Page);
 8003700:	4b45      	ldr	r3, [pc, #276]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	4618      	mov	r0, r3
 8003706:	f000 f893 	bl	8003830 <HAL_FLASH_OperationErrorCallback>
 800370a:	e017      	b.n	800373c <HAL_FLASH_IRQHandler+0xd0>
    }
    else if(procedure == FLASH_PROC_MASS_ERASE)
 800370c:	7afb      	ldrb	r3, [r7, #11]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d105      	bne.n	800371e <HAL_FLASH_IRQHandler+0xb2>
    {
        HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 8003712:	4b41      	ldr	r3, [pc, #260]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f88a 	bl	8003830 <HAL_FLASH_OperationErrorCallback>
 800371c:	e00e      	b.n	800373c <HAL_FLASH_IRQHandler+0xd0>
    }
    else if((procedure == FLASH_PROC_PROGRAM) ||
 800371e:	7afb      	ldrb	r3, [r7, #11]
 8003720:	2b03      	cmp	r3, #3
 8003722:	d002      	beq.n	800372a <HAL_FLASH_IRQHandler+0xbe>
 8003724:	7afb      	ldrb	r3, [r7, #11]
 8003726:	2b04      	cmp	r3, #4
 8003728:	d105      	bne.n	8003736 <HAL_FLASH_IRQHandler+0xca>
            (procedure == FLASH_PROC_PROGRAM_LAST))
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Address);
 800372a:	4b3b      	ldr	r3, [pc, #236]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	4618      	mov	r0, r3
 8003730:	f000 f87e 	bl	8003830 <HAL_FLASH_OperationErrorCallback>
 8003734:	e002      	b.n	800373c <HAL_FLASH_IRQHandler+0xd0>
    }
    else
    {
       HAL_FLASH_OperationErrorCallback(0U);
 8003736:	2000      	movs	r0, #0
 8003738:	f000 f87a 	bl	8003830 <HAL_FLASH_OperationErrorCallback>
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800373c:	4b36      	ldr	r3, [pc, #216]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 800373e:	2200      	movs	r2, #0
 8003740:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
 8003742:	4b34      	ldr	r3, [pc, #208]	; (8003814 <HAL_FLASH_IRQHandler+0x1a8>)
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d04f      	beq.n	80037ee <HAL_FLASH_IRQHandler+0x182>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800374e:	4b31      	ldr	r3, [pc, #196]	; (8003814 <HAL_FLASH_IRQHandler+0x1a8>)
 8003750:	2201      	movs	r2, #1
 8003752:	611a      	str	r2, [r3, #16]

    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 8003754:	4b30      	ldr	r3, [pc, #192]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 8003756:	7a1b      	ldrb	r3, [r3, #8]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b01      	cmp	r3, #1
 800375c:	d12b      	bne.n	80037b6 <HAL_FLASH_IRQHandler+0x14a>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 800375e:	4b2e      	ldr	r3, [pc, #184]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	3b01      	subs	r3, #1
 8003764:	4a2c      	ldr	r2, [pc, #176]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 8003766:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if(pFlash.NbPagesToErase != 0U)
 8003768:	4b2b      	ldr	r3, [pc, #172]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d013      	beq.n	8003798 <HAL_FLASH_IRQHandler+0x12c>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8003770:	4b29      	ldr	r3, [pc, #164]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	4618      	mov	r0, r3
 8003776:	f000 f851 	bl	800381c <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 800377a:	4b27      	ldr	r3, [pc, #156]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	3301      	adds	r3, #1
 8003780:	4a25      	ldr	r2, [pc, #148]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 8003782:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 8003784:	4b24      	ldr	r3, [pc, #144]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 800378a:	4b23      	ldr	r3, [pc, #140]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	4619      	mov	r1, r3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f9ef 	bl	8003b74 <FLASH_PageErase>
 8003796:	e02a      	b.n	80037ee <HAL_FLASH_IRQHandler+0x182>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 8003798:	4b1f      	ldr	r3, [pc, #124]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 800379a:	f04f 32ff 	mov.w	r2, #4294967295
 800379e:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80037a0:	4b1d      	ldr	r3, [pc, #116]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80037a6:	f000 fa1b 	bl	8003be0 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 80037aa:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 f834 	bl	800381c <HAL_FLASH_EndOfOperationCallback>
 80037b4:	e01b      	b.n	80037ee <HAL_FLASH_IRQHandler+0x182>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches() ;
 80037b6:	f000 fa13 	bl	8003be0 <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 80037ba:	4b17      	ldr	r3, [pc, #92]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 80037bc:	7a1b      	ldrb	r3, [r3, #8]
 80037be:	72fb      	strb	r3, [r7, #11]
      if(procedure == FLASH_PROC_MASS_ERASE)
 80037c0:	7afb      	ldrb	r3, [r7, #11]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d105      	bne.n	80037d2 <HAL_FLASH_IRQHandler+0x166>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80037c6:	4b14      	ldr	r3, [pc, #80]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 f826 	bl	800381c <HAL_FLASH_EndOfOperationCallback>
 80037d0:	e00a      	b.n	80037e8 <HAL_FLASH_IRQHandler+0x17c>
      }
      else if((procedure == FLASH_PROC_PROGRAM) ||
 80037d2:	7afb      	ldrb	r3, [r7, #11]
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d002      	beq.n	80037de <HAL_FLASH_IRQHandler+0x172>
 80037d8:	7afb      	ldrb	r3, [r7, #11]
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d104      	bne.n	80037e8 <HAL_FLASH_IRQHandler+0x17c>
              (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80037de:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 f81a 	bl	800381c <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	721a      	strb	r2, [r3, #8]
    }
  }

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80037ee:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 80037f0:	7a1b      	ldrb	r3, [r3, #8]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d108      	bne.n	800380a <HAL_FLASH_IRQHandler+0x19e>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_FLASH_IRQHandler+0x1a8>)
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	4a05      	ldr	r2, [pc, #20]	; (8003814 <HAL_FLASH_IRQHandler+0x1a8>)
 80037fe:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003802:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <HAL_FLASH_IRQHandler+0x1ac>)
 8003806:	2200      	movs	r2, #0
 8003808:	701a      	strb	r2, [r3, #0]
  }
}
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40022000 	.word	0x40022000
 8003818:	20000014 	.word	0x20000014

0800381c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800384e:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_FLASH_Unlock+0x38>)
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	2b00      	cmp	r3, #0
 8003854:	da0b      	bge.n	800386e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <HAL_FLASH_Unlock+0x38>)
 8003858:	4a09      	ldr	r2, [pc, #36]	; (8003880 <HAL_FLASH_Unlock+0x3c>)
 800385a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800385c:	4b07      	ldr	r3, [pc, #28]	; (800387c <HAL_FLASH_Unlock+0x38>)
 800385e:	4a09      	ldr	r2, [pc, #36]	; (8003884 <HAL_FLASH_Unlock+0x40>)
 8003860:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003862:	4b06      	ldr	r3, [pc, #24]	; (800387c <HAL_FLASH_Unlock+0x38>)
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	2b00      	cmp	r3, #0
 8003868:	da01      	bge.n	800386e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800386e:	79fb      	ldrb	r3, [r7, #7]
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40022000 	.word	0x40022000
 8003880:	45670123 	.word	0x45670123
 8003884:	cdef89ab 	.word	0xcdef89ab

08003888 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003890:	f7ff fcb2 	bl	80031f8 <HAL_GetTick>
 8003894:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003896:	e00d      	b.n	80038b4 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d009      	beq.n	80038b4 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80038a0:	f7ff fcaa 	bl	80031f8 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d801      	bhi.n	80038b4 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e037      	b.n	8003924 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80038b4:	4b1d      	ldr	r3, [pc, #116]	; (800392c <FLASH_WaitForLastOperation+0xa4>)
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1eb      	bne.n	8003898 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80038c0:	4b1a      	ldr	r3, [pc, #104]	; (800392c <FLASH_WaitForLastOperation+0xa4>)
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80038c8:	4013      	ands	r3, r2
 80038ca:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d01e      	beq.n	8003910 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80038d2:	4b17      	ldr	r3, [pc, #92]	; (8003930 <FLASH_WaitForLastOperation+0xa8>)
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4313      	orrs	r3, r2
 80038da:	4a15      	ldr	r2, [pc, #84]	; (8003930 <FLASH_WaitForLastOperation+0xa8>)
 80038dc:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <FLASH_WaitForLastOperation+0x70>
 80038e8:	4b10      	ldr	r3, [pc, #64]	; (800392c <FLASH_WaitForLastOperation+0xa4>)
 80038ea:	699a      	ldr	r2, [r3, #24]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80038f2:	490e      	ldr	r1, [pc, #56]	; (800392c <FLASH_WaitForLastOperation+0xa4>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	618b      	str	r3, [r1, #24]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d004      	beq.n	800390c <FLASH_WaitForLastOperation+0x84>
 8003902:	4a0a      	ldr	r2, [pc, #40]	; (800392c <FLASH_WaitForLastOperation+0xa4>)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800390a:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e009      	b.n	8003924 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003910:	4b06      	ldr	r3, [pc, #24]	; (800392c <FLASH_WaitForLastOperation+0xa4>)
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800391c:	4b03      	ldr	r3, [pc, #12]	; (800392c <FLASH_WaitForLastOperation+0xa4>)
 800391e:	2201      	movs	r2, #1
 8003920:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40022000 	.word	0x40022000
 8003930:	20000014 	.word	0x20000014

08003934 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003940:	4b0e      	ldr	r3, [pc, #56]	; (800397c <FLASH_Program_DoubleWord+0x48>)
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	4a0d      	ldr	r2, [pc, #52]	; (800397c <FLASH_Program_DoubleWord+0x48>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003952:	f3bf 8f6f 	isb	sy
}
 8003956:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	000a      	movs	r2, r1
 8003966:	2300      	movs	r3, #0
 8003968:	68f9      	ldr	r1, [r7, #12]
 800396a:	3104      	adds	r1, #4
 800396c:	4613      	mov	r3, r2
 800396e:	600b      	str	r3, [r1, #0]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	40022000 	.word	0x40022000

08003980 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003980:	b480      	push	{r7}
 8003982:	b089      	sub	sp, #36	; 0x24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800398a:	2340      	movs	r3, #64	; 0x40
 800398c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003996:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <FLASH_Program_Fast+0x68>)
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	4a13      	ldr	r2, [pc, #76]	; (80039e8 <FLASH_Program_Fast+0x68>)
 800399c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a2:	f3ef 8310 	mrs	r3, PRIMASK
 80039a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80039a8:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80039aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80039ac:	b672      	cpsid	i
}
 80039ae:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	3304      	adds	r3, #4
 80039bc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	3304      	adds	r3, #4
 80039c2:	617b      	str	r3, [r7, #20]
    row_index--;
 80039c4:	7ffb      	ldrb	r3, [r7, #31]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80039ca:	7ffb      	ldrb	r3, [r7, #31]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1ef      	bne.n	80039b0 <FLASH_Program_Fast+0x30>
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f383 8810 	msr	PRIMASK, r3
}
 80039da:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80039dc:	bf00      	nop
 80039de:	3724      	adds	r7, #36	; 0x24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	40022000 	.word	0x40022000

080039ec <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80039f6:	4b49      	ldr	r3, [pc, #292]	; (8003b1c <HAL_FLASHEx_Erase+0x130>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_FLASHEx_Erase+0x16>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e087      	b.n	8003b12 <HAL_FLASHEx_Erase+0x126>
 8003a02:	4b46      	ldr	r3, [pc, #280]	; (8003b1c <HAL_FLASHEx_Erase+0x130>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a0c:	f7ff ff3c 	bl	8003888 <FLASH_WaitForLastOperation>
 8003a10:	4603      	mov	r3, r0
 8003a12:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d177      	bne.n	8003b0a <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a1a:	4b40      	ldr	r3, [pc, #256]	; (8003b1c <HAL_FLASHEx_Erase+0x130>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003a20:	4b3f      	ldr	r3, [pc, #252]	; (8003b20 <HAL_FLASHEx_Erase+0x134>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003a2c:	4b3c      	ldr	r3, [pc, #240]	; (8003b20 <HAL_FLASHEx_Erase+0x134>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d009      	beq.n	8003a4c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003a38:	4b39      	ldr	r3, [pc, #228]	; (8003b20 <HAL_FLASHEx_Erase+0x134>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a38      	ldr	r2, [pc, #224]	; (8003b20 <HAL_FLASHEx_Erase+0x134>)
 8003a3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a42:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003a44:	4b35      	ldr	r3, [pc, #212]	; (8003b1c <HAL_FLASHEx_Erase+0x130>)
 8003a46:	2203      	movs	r2, #3
 8003a48:	771a      	strb	r2, [r3, #28]
 8003a4a:	e016      	b.n	8003a7a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003a4c:	4b33      	ldr	r3, [pc, #204]	; (8003b1c <HAL_FLASHEx_Erase+0x130>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	771a      	strb	r2, [r3, #28]
 8003a52:	e012      	b.n	8003a7a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003a54:	4b32      	ldr	r3, [pc, #200]	; (8003b20 <HAL_FLASHEx_Erase+0x134>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003a60:	4b2f      	ldr	r3, [pc, #188]	; (8003b20 <HAL_FLASHEx_Erase+0x134>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a2e      	ldr	r2, [pc, #184]	; (8003b20 <HAL_FLASHEx_Erase+0x134>)
 8003a66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a6a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003a6c:	4b2b      	ldr	r3, [pc, #172]	; (8003b1c <HAL_FLASHEx_Erase+0x130>)
 8003a6e:	2202      	movs	r2, #2
 8003a70:	771a      	strb	r2, [r3, #28]
 8003a72:	e002      	b.n	8003a7a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003a74:	4b29      	ldr	r3, [pc, #164]	; (8003b1c <HAL_FLASHEx_Erase+0x130>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d113      	bne.n	8003aaa <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 f84c 	bl	8003b24 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a90:	f7ff fefa 	bl	8003888 <FLASH_WaitForLastOperation>
 8003a94:	4603      	mov	r3, r0
 8003a96:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8003a98:	4b21      	ldr	r3, [pc, #132]	; (8003b20 <HAL_FLASHEx_Erase+0x134>)
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	4a20      	ldr	r2, [pc, #128]	; (8003b20 <HAL_FLASHEx_Erase+0x134>)
 8003a9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003aa2:	f023 0304 	bic.w	r3, r3, #4
 8003aa6:	6153      	str	r3, [r2, #20]
 8003aa8:	e02d      	b.n	8003b06 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab0:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	e01d      	b.n	8003af6 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4619      	mov	r1, r3
 8003ac0:	68b8      	ldr	r0, [r7, #8]
 8003ac2:	f000 f857 	bl	8003b74 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ac6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003aca:	f7ff fedd 	bl	8003888 <FLASH_WaitForLastOperation>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003ad2:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <HAL_FLASHEx_Erase+0x134>)
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <HAL_FLASHEx_Erase+0x134>)
 8003ad8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003adc:	f023 0302 	bic.w	r3, r3, #2
 8003ae0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	601a      	str	r2, [r3, #0]
          break;
 8003aee:	e00a      	b.n	8003b06 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	3301      	adds	r3, #1
 8003af4:	60bb      	str	r3, [r7, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	4413      	add	r3, r2
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d3d9      	bcc.n	8003aba <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003b06:	f000 f86b 	bl	8003be0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003b0a:	4b04      	ldr	r3, [pc, #16]	; (8003b1c <HAL_FLASHEx_Erase+0x130>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]

  return status;
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000014 	.word	0x20000014
 8003b20:	40022000 	.word	0x40022000

08003b24 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8003b36:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <FLASH_MassErase+0x4c>)
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	4a0d      	ldr	r2, [pc, #52]	; (8003b70 <FLASH_MassErase+0x4c>)
 8003b3c:	f043 0304 	orr.w	r3, r3, #4
 8003b40:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8003b4c:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <FLASH_MassErase+0x4c>)
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	4a07      	ldr	r2, [pc, #28]	; (8003b70 <FLASH_MassErase+0x4c>)
 8003b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b56:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <FLASH_MassErase+0x4c>)
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	4a04      	ldr	r2, [pc, #16]	; (8003b70 <FLASH_MassErase+0x4c>)
 8003b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b62:	6153      	str	r3, [r2, #20]
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	40022000 	.word	0x40022000

08003b74 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d006      	beq.n	8003b96 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8003b88:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <FLASH_PageErase+0x68>)
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	4a13      	ldr	r2, [pc, #76]	; (8003bdc <FLASH_PageErase+0x68>)
 8003b8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b92:	6153      	str	r3, [r2, #20]
 8003b94:	e005      	b.n	8003ba2 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8003b96:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <FLASH_PageErase+0x68>)
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	4a10      	ldr	r2, [pc, #64]	; (8003bdc <FLASH_PageErase+0x68>)
 8003b9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ba0:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003ba2:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <FLASH_PageErase+0x68>)
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8003bb2:	490a      	ldr	r1, [pc, #40]	; (8003bdc <FLASH_PageErase+0x68>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <FLASH_PageErase+0x68>)
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	4a07      	ldr	r2, [pc, #28]	; (8003bdc <FLASH_PageErase+0x68>)
 8003bbe:	f043 0302 	orr.w	r3, r3, #2
 8003bc2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <FLASH_PageErase+0x68>)
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	4a04      	ldr	r2, [pc, #16]	; (8003bdc <FLASH_PageErase+0x68>)
 8003bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bce:	6153      	str	r3, [r2, #20]
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	40022000 	.word	0x40022000

08003be0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003be6:	4b21      	ldr	r3, [pc, #132]	; (8003c6c <FLASH_FlushCaches+0x8c>)
 8003be8:	7f1b      	ldrb	r3, [r3, #28]
 8003bea:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d002      	beq.n	8003bf8 <FLASH_FlushCaches+0x18>
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d117      	bne.n	8003c28 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003bf8:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <FLASH_FlushCaches+0x90>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a1c      	ldr	r2, [pc, #112]	; (8003c70 <FLASH_FlushCaches+0x90>)
 8003bfe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c02:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003c04:	4b1a      	ldr	r3, [pc, #104]	; (8003c70 <FLASH_FlushCaches+0x90>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <FLASH_FlushCaches+0x90>)
 8003c0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	4b17      	ldr	r3, [pc, #92]	; (8003c70 <FLASH_FlushCaches+0x90>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <FLASH_FlushCaches+0x90>)
 8003c16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c1a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c1c:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <FLASH_FlushCaches+0x90>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <FLASH_FlushCaches+0x90>)
 8003c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c26:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d002      	beq.n	8003c34 <FLASH_FlushCaches+0x54>
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d111      	bne.n	8003c58 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003c34:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <FLASH_FlushCaches+0x90>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a0d      	ldr	r2, [pc, #52]	; (8003c70 <FLASH_FlushCaches+0x90>)
 8003c3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <FLASH_FlushCaches+0x90>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <FLASH_FlushCaches+0x90>)
 8003c46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c4a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c4c:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <FLASH_FlushCaches+0x90>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a07      	ldr	r2, [pc, #28]	; (8003c70 <FLASH_FlushCaches+0x90>)
 8003c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c56:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003c58:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <FLASH_FlushCaches+0x8c>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	771a      	strb	r2, [r3, #28]
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	20000014 	.word	0x20000014
 8003c70:	40022000 	.word	0x40022000

08003c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c82:	e17f      	b.n	8003f84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	2101      	movs	r1, #1
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c90:	4013      	ands	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 8171 	beq.w	8003f7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d005      	beq.n	8003cb4 <HAL_GPIO_Init+0x40>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d130      	bne.n	8003d16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cea:	2201      	movs	r2, #1
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	091b      	lsrs	r3, r3, #4
 8003d00:	f003 0201 	and.w	r2, r3, #1
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d118      	bne.n	8003d54 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003d28:	2201      	movs	r2, #1
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4013      	ands	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	08db      	lsrs	r3, r3, #3
 8003d3e:	f003 0201 	and.w	r2, r3, #1
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d017      	beq.n	8003d90 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4013      	ands	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d123      	bne.n	8003de4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	08da      	lsrs	r2, r3, #3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3208      	adds	r2, #8
 8003da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003da8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	220f      	movs	r2, #15
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	08da      	lsrs	r2, r3, #3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3208      	adds	r2, #8
 8003dde:	6939      	ldr	r1, [r7, #16]
 8003de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	2203      	movs	r2, #3
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 0203 	and.w	r2, r3, #3
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 80ac 	beq.w	8003f7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e26:	4b5f      	ldr	r3, [pc, #380]	; (8003fa4 <HAL_GPIO_Init+0x330>)
 8003e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2a:	4a5e      	ldr	r2, [pc, #376]	; (8003fa4 <HAL_GPIO_Init+0x330>)
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	6613      	str	r3, [r2, #96]	; 0x60
 8003e32:	4b5c      	ldr	r3, [pc, #368]	; (8003fa4 <HAL_GPIO_Init+0x330>)
 8003e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e3e:	4a5a      	ldr	r2, [pc, #360]	; (8003fa8 <HAL_GPIO_Init+0x334>)
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	3302      	adds	r3, #2
 8003e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	220f      	movs	r2, #15
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e68:	d025      	beq.n	8003eb6 <HAL_GPIO_Init+0x242>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a4f      	ldr	r2, [pc, #316]	; (8003fac <HAL_GPIO_Init+0x338>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d01f      	beq.n	8003eb2 <HAL_GPIO_Init+0x23e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a4e      	ldr	r2, [pc, #312]	; (8003fb0 <HAL_GPIO_Init+0x33c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d019      	beq.n	8003eae <HAL_GPIO_Init+0x23a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a4d      	ldr	r2, [pc, #308]	; (8003fb4 <HAL_GPIO_Init+0x340>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d013      	beq.n	8003eaa <HAL_GPIO_Init+0x236>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a4c      	ldr	r2, [pc, #304]	; (8003fb8 <HAL_GPIO_Init+0x344>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00d      	beq.n	8003ea6 <HAL_GPIO_Init+0x232>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a4b      	ldr	r2, [pc, #300]	; (8003fbc <HAL_GPIO_Init+0x348>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d007      	beq.n	8003ea2 <HAL_GPIO_Init+0x22e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a4a      	ldr	r2, [pc, #296]	; (8003fc0 <HAL_GPIO_Init+0x34c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d101      	bne.n	8003e9e <HAL_GPIO_Init+0x22a>
 8003e9a:	2306      	movs	r3, #6
 8003e9c:	e00c      	b.n	8003eb8 <HAL_GPIO_Init+0x244>
 8003e9e:	2307      	movs	r3, #7
 8003ea0:	e00a      	b.n	8003eb8 <HAL_GPIO_Init+0x244>
 8003ea2:	2305      	movs	r3, #5
 8003ea4:	e008      	b.n	8003eb8 <HAL_GPIO_Init+0x244>
 8003ea6:	2304      	movs	r3, #4
 8003ea8:	e006      	b.n	8003eb8 <HAL_GPIO_Init+0x244>
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e004      	b.n	8003eb8 <HAL_GPIO_Init+0x244>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e002      	b.n	8003eb8 <HAL_GPIO_Init+0x244>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <HAL_GPIO_Init+0x244>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	f002 0203 	and.w	r2, r2, #3
 8003ebe:	0092      	lsls	r2, r2, #2
 8003ec0:	4093      	lsls	r3, r2
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ec8:	4937      	ldr	r1, [pc, #220]	; (8003fa8 <HAL_GPIO_Init+0x334>)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	089b      	lsrs	r3, r3, #2
 8003ece:	3302      	adds	r3, #2
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ed6:	4b3b      	ldr	r3, [pc, #236]	; (8003fc4 <HAL_GPIO_Init+0x350>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003efa:	4a32      	ldr	r2, [pc, #200]	; (8003fc4 <HAL_GPIO_Init+0x350>)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f00:	4b30      	ldr	r3, [pc, #192]	; (8003fc4 <HAL_GPIO_Init+0x350>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f24:	4a27      	ldr	r2, [pc, #156]	; (8003fc4 <HAL_GPIO_Init+0x350>)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f2a:	4b26      	ldr	r3, [pc, #152]	; (8003fc4 <HAL_GPIO_Init+0x350>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	43db      	mvns	r3, r3
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4013      	ands	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f4e:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <HAL_GPIO_Init+0x350>)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f54:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <HAL_GPIO_Init+0x350>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4013      	ands	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f78:	4a12      	ldr	r2, [pc, #72]	; (8003fc4 <HAL_GPIO_Init+0x350>)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	3301      	adds	r3, #1
 8003f82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f47f ae78 	bne.w	8003c84 <HAL_GPIO_Init+0x10>
  }
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	371c      	adds	r7, #28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40010000 	.word	0x40010000
 8003fac:	48000400 	.word	0x48000400
 8003fb0:	48000800 	.word	0x48000800
 8003fb4:	48000c00 	.word	0x48000c00
 8003fb8:	48001000 	.word	0x48001000
 8003fbc:	48001400 	.word	0x48001400
 8003fc0:	48001800 	.word	0x48001800
 8003fc4:	40010400 	.word	0x40010400

08003fc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	887b      	ldrh	r3, [r7, #2]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
 8003fe4:	e001      	b.n	8003fea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	807b      	strh	r3, [r7, #2]
 8004004:	4613      	mov	r3, r2
 8004006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004008:	787b      	ldrb	r3, [r7, #1]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800400e:	887a      	ldrh	r2, [r7, #2]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004014:	e002      	b.n	800401c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004016:	887a      	ldrh	r2, [r7, #2]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800403a:	887a      	ldrh	r2, [r7, #2]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4013      	ands	r3, r2
 8004040:	041a      	lsls	r2, r3, #16
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	43d9      	mvns	r1, r3
 8004046:	887b      	ldrh	r3, [r7, #2]
 8004048:	400b      	ands	r3, r1
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	619a      	str	r2, [r3, #24]
}
 8004050:	bf00      	nop
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004066:	4b08      	ldr	r3, [pc, #32]	; (8004088 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004068:	695a      	ldr	r2, [r3, #20]
 800406a:	88fb      	ldrh	r3, [r7, #6]
 800406c:	4013      	ands	r3, r2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d006      	beq.n	8004080 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004072:	4a05      	ldr	r2, [pc, #20]	; (8004088 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004078:	88fb      	ldrh	r3, [r7, #6]
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe f934 	bl	80022e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40010400 	.word	0x40010400

0800408c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e081      	b.n	80041a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d106      	bne.n	80040b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fe fdac 	bl	8002c10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2224      	movs	r2, #36	; 0x24
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0201 	bic.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d107      	bne.n	8004106 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	e006      	b.n	8004114 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004112:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	2b02      	cmp	r3, #2
 800411a:	d104      	bne.n	8004126 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004124:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6812      	ldr	r2, [r2, #0]
 8004130:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004138:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004148:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691a      	ldr	r2, [r3, #16]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69d9      	ldr	r1, [r3, #28]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1a      	ldr	r2, [r3, #32]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	4608      	mov	r0, r1
 80041b6:	4611      	mov	r1, r2
 80041b8:	461a      	mov	r2, r3
 80041ba:	4603      	mov	r3, r0
 80041bc:	817b      	strh	r3, [r7, #10]
 80041be:	460b      	mov	r3, r1
 80041c0:	813b      	strh	r3, [r7, #8]
 80041c2:	4613      	mov	r3, r2
 80041c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b20      	cmp	r3, #32
 80041d0:	f040 80fd 	bne.w	80043ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_I2C_Mem_Read+0x34>
 80041da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d105      	bne.n	80041ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0f1      	b.n	80043d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_I2C_Mem_Read+0x4e>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e0ea      	b.n	80043d0 <HAL_I2C_Mem_Read+0x224>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004202:	f7fe fff9 	bl	80031f8 <HAL_GetTick>
 8004206:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	2319      	movs	r3, #25
 800420e:	2201      	movs	r2, #1
 8004210:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f95b 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0d5      	b.n	80043d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2222      	movs	r2, #34	; 0x22
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2240      	movs	r2, #64	; 0x40
 8004230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a3a      	ldr	r2, [r7, #32]
 800423e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004244:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800424c:	88f8      	ldrh	r0, [r7, #6]
 800424e:	893a      	ldrh	r2, [r7, #8]
 8004250:	8979      	ldrh	r1, [r7, #10]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	9301      	str	r3, [sp, #4]
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	4603      	mov	r3, r0
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 f8bf 	bl	80043e0 <I2C_RequestMemoryRead>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0ad      	b.n	80043d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	2bff      	cmp	r3, #255	; 0xff
 800427c:	d90e      	bls.n	800429c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	22ff      	movs	r2, #255	; 0xff
 8004282:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004288:	b2da      	uxtb	r2, r3
 800428a:	8979      	ldrh	r1, [r7, #10]
 800428c:	4b52      	ldr	r3, [pc, #328]	; (80043d8 <HAL_I2C_Mem_Read+0x22c>)
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 fac3 	bl	8004820 <I2C_TransferConfig>
 800429a:	e00f      	b.n	80042bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	8979      	ldrh	r1, [r7, #10]
 80042ae:	4b4a      	ldr	r3, [pc, #296]	; (80043d8 <HAL_I2C_Mem_Read+0x22c>)
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 fab2 	bl	8004820 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c2:	2200      	movs	r2, #0
 80042c4:	2104      	movs	r1, #4
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f902 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e07c      	b.n	80043d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d034      	beq.n	800437c <HAL_I2C_Mem_Read+0x1d0>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004316:	2b00      	cmp	r3, #0
 8004318:	d130      	bne.n	800437c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004320:	2200      	movs	r2, #0
 8004322:	2180      	movs	r1, #128	; 0x80
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f8d3 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e04d      	b.n	80043d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	2bff      	cmp	r3, #255	; 0xff
 800433c:	d90e      	bls.n	800435c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	22ff      	movs	r2, #255	; 0xff
 8004342:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004348:	b2da      	uxtb	r2, r3
 800434a:	8979      	ldrh	r1, [r7, #10]
 800434c:	2300      	movs	r3, #0
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 fa63 	bl	8004820 <I2C_TransferConfig>
 800435a:	e00f      	b.n	800437c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436a:	b2da      	uxtb	r2, r3
 800436c:	8979      	ldrh	r1, [r7, #10]
 800436e:	2300      	movs	r3, #0
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 fa52 	bl	8004820 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d19a      	bne.n	80042bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 f920 	bl	80045d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e01a      	b.n	80043d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2220      	movs	r2, #32
 80043a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6859      	ldr	r1, [r3, #4]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <HAL_I2C_Mem_Read+0x230>)
 80043ae:	400b      	ands	r3, r1
 80043b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e000      	b.n	80043d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80043ce:	2302      	movs	r3, #2
  }
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	80002400 	.word	0x80002400
 80043dc:	fe00e800 	.word	0xfe00e800

080043e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	4608      	mov	r0, r1
 80043ea:	4611      	mov	r1, r2
 80043ec:	461a      	mov	r2, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	817b      	strh	r3, [r7, #10]
 80043f2:	460b      	mov	r3, r1
 80043f4:	813b      	strh	r3, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80043fa:	88fb      	ldrh	r3, [r7, #6]
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	8979      	ldrh	r1, [r7, #10]
 8004400:	4b20      	ldr	r3, [pc, #128]	; (8004484 <I2C_RequestMemoryRead+0xa4>)
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	2300      	movs	r3, #0
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 fa0a 	bl	8004820 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	69b9      	ldr	r1, [r7, #24]
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f89d 	bl	8004550 <I2C_WaitOnTXISFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e02c      	b.n	800447a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004420:	88fb      	ldrh	r3, [r7, #6]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d105      	bne.n	8004432 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004426:	893b      	ldrh	r3, [r7, #8]
 8004428:	b2da      	uxtb	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	629a      	str	r2, [r3, #40]	; 0x28
 8004430:	e015      	b.n	800445e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004432:	893b      	ldrh	r3, [r7, #8]
 8004434:	0a1b      	lsrs	r3, r3, #8
 8004436:	b29b      	uxth	r3, r3
 8004438:	b2da      	uxtb	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004440:	69fa      	ldr	r2, [r7, #28]
 8004442:	69b9      	ldr	r1, [r7, #24]
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 f883 	bl	8004550 <I2C_WaitOnTXISFlagUntilTimeout>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e012      	b.n	800447a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004454:	893b      	ldrh	r3, [r7, #8]
 8004456:	b2da      	uxtb	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2200      	movs	r2, #0
 8004466:	2140      	movs	r1, #64	; 0x40
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f831 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e000      	b.n	800447a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	80002000 	.word	0x80002000

08004488 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b02      	cmp	r3, #2
 800449c:	d103      	bne.n	80044a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2200      	movs	r2, #0
 80044a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d007      	beq.n	80044c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	619a      	str	r2, [r3, #24]
  }
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	4613      	mov	r3, r2
 80044de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044e0:	e022      	b.n	8004528 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e8:	d01e      	beq.n	8004528 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ea:	f7fe fe85 	bl	80031f8 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d302      	bcc.n	8004500 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d113      	bne.n	8004528 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004504:	f043 0220 	orr.w	r2, r3, #32
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e00f      	b.n	8004548 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4013      	ands	r3, r2
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	429a      	cmp	r2, r3
 8004536:	bf0c      	ite	eq
 8004538:	2301      	moveq	r3, #1
 800453a:	2300      	movne	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	429a      	cmp	r2, r3
 8004544:	d0cd      	beq.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800455c:	e02c      	b.n	80045b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f870 	bl	8004648 <I2C_IsErrorOccurred>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e02a      	b.n	80045c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d01e      	beq.n	80045b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457a:	f7fe fe3d 	bl	80031f8 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	429a      	cmp	r2, r3
 8004588:	d302      	bcc.n	8004590 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d113      	bne.n	80045b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004594:	f043 0220 	orr.w	r2, r3, #32
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e007      	b.n	80045c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d1cb      	bne.n	800455e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045dc:	e028      	b.n	8004630 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f830 	bl	8004648 <I2C_IsErrorOccurred>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e026      	b.n	8004640 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f2:	f7fe fe01 	bl	80031f8 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d302      	bcc.n	8004608 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d113      	bne.n	8004630 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460c:	f043 0220 	orr.w	r2, r3, #32
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e007      	b.n	8004640 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b20      	cmp	r3, #32
 800463c:	d1cf      	bne.n	80045de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b08a      	sub	sp, #40	; 0x28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004662:	2300      	movs	r3, #0
 8004664:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	2b00      	cmp	r3, #0
 8004672:	d075      	beq.n	8004760 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2210      	movs	r2, #16
 800467a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800467c:	e056      	b.n	800472c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004684:	d052      	beq.n	800472c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004686:	f7fe fdb7 	bl	80031f8 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	429a      	cmp	r2, r3
 8004694:	d302      	bcc.n	800469c <I2C_IsErrorOccurred+0x54>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d147      	bne.n	800472c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046be:	d12e      	bne.n	800471e <I2C_IsErrorOccurred+0xd6>
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046c6:	d02a      	beq.n	800471e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80046c8:	7cfb      	ldrb	r3, [r7, #19]
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d027      	beq.n	800471e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80046de:	f7fe fd8b 	bl	80031f8 <HAL_GetTick>
 80046e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046e4:	e01b      	b.n	800471e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046e6:	f7fe fd87 	bl	80031f8 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b19      	cmp	r3, #25
 80046f2:	d914      	bls.n	800471e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f8:	f043 0220 	orr.w	r2, r3, #32
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	f003 0320 	and.w	r3, r3, #32
 8004728:	2b20      	cmp	r3, #32
 800472a:	d1dc      	bne.n	80046e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b20      	cmp	r3, #32
 8004738:	d003      	beq.n	8004742 <I2C_IsErrorOccurred+0xfa>
 800473a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800473e:	2b00      	cmp	r3, #0
 8004740:	d09d      	beq.n	800467e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004742:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004746:	2b00      	cmp	r3, #0
 8004748:	d103      	bne.n	8004752 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2220      	movs	r2, #32
 8004750:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	f043 0304 	orr.w	r3, r3, #4
 8004758:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00b      	beq.n	800478a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	f043 0301 	orr.w	r3, r3, #1
 8004778:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004782:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00b      	beq.n	80047ac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	f043 0308 	orr.w	r3, r3, #8
 800479a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00b      	beq.n	80047ce <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	f043 0302 	orr.w	r3, r3, #2
 80047bc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80047ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d01c      	beq.n	8004810 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f7ff fe56 	bl	8004488 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6859      	ldr	r1, [r3, #4]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	4b0d      	ldr	r3, [pc, #52]	; (800481c <I2C_IsErrorOccurred+0x1d4>)
 80047e8:	400b      	ands	r3, r1
 80047ea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004814:	4618      	mov	r0, r3
 8004816:	3728      	adds	r7, #40	; 0x28
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	fe00e800 	.word	0xfe00e800

08004820 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	607b      	str	r3, [r7, #4]
 800482a:	460b      	mov	r3, r1
 800482c:	817b      	strh	r3, [r7, #10]
 800482e:	4613      	mov	r3, r2
 8004830:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004832:	897b      	ldrh	r3, [r7, #10]
 8004834:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004838:	7a7b      	ldrb	r3, [r7, #9]
 800483a:	041b      	lsls	r3, r3, #16
 800483c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004840:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	4313      	orrs	r3, r2
 800484a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800484e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	0d5b      	lsrs	r3, r3, #21
 800485a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800485e:	4b08      	ldr	r3, [pc, #32]	; (8004880 <I2C_TransferConfig+0x60>)
 8004860:	430b      	orrs	r3, r1
 8004862:	43db      	mvns	r3, r3
 8004864:	ea02 0103 	and.w	r1, r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	03ff63ff 	.word	0x03ff63ff

08004884 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b20      	cmp	r3, #32
 8004898:	d138      	bne.n	800490c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d101      	bne.n	80048a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048a4:	2302      	movs	r3, #2
 80048a6:	e032      	b.n	800490e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2224      	movs	r2, #36	; 0x24
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0201 	bic.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6819      	ldr	r1, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	e000      	b.n	800490e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800490c:	2302      	movs	r3, #2
  }
}
 800490e:	4618      	mov	r0, r3
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b20      	cmp	r3, #32
 800492e:	d139      	bne.n	80049a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800493a:	2302      	movs	r3, #2
 800493c:	e033      	b.n	80049a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2224      	movs	r2, #36	; 0x24
 800494a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0201 	bic.w	r2, r2, #1
 800495c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800496c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	4313      	orrs	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	e000      	b.n	80049a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049a4:	2302      	movs	r3, #2
  }
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
	...

080049b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80049b8:	4b04      	ldr	r3, [pc, #16]	; (80049cc <HAL_PWREx_GetVoltageRange+0x18>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40007000 	.word	0x40007000

080049d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049de:	d130      	bne.n	8004a42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80049e0:	4b23      	ldr	r3, [pc, #140]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ec:	d038      	beq.n	8004a60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049ee:	4b20      	ldr	r3, [pc, #128]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049f6:	4a1e      	ldr	r2, [pc, #120]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049fe:	4b1d      	ldr	r3, [pc, #116]	; (8004a74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2232      	movs	r2, #50	; 0x32
 8004a04:	fb02 f303 	mul.w	r3, r2, r3
 8004a08:	4a1b      	ldr	r2, [pc, #108]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	0c9b      	lsrs	r3, r3, #18
 8004a10:	3301      	adds	r3, #1
 8004a12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a14:	e002      	b.n	8004a1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a1c:	4b14      	ldr	r3, [pc, #80]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a28:	d102      	bne.n	8004a30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f2      	bne.n	8004a16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a30:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a3c:	d110      	bne.n	8004a60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e00f      	b.n	8004a62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a42:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a4e:	d007      	beq.n	8004a60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a58:	4a05      	ldr	r2, [pc, #20]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40007000 	.word	0x40007000
 8004a74:	20000008 	.word	0x20000008
 8004a78:	431bde83 	.word	0x431bde83

08004a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e3ca      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a8e:	4b97      	ldr	r3, [pc, #604]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 030c 	and.w	r3, r3, #12
 8004a96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a98:	4b94      	ldr	r3, [pc, #592]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0303 	and.w	r3, r3, #3
 8004aa0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0310 	and.w	r3, r3, #16
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 80e4 	beq.w	8004c78 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x4a>
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	2b0c      	cmp	r3, #12
 8004aba:	f040 808b 	bne.w	8004bd4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	f040 8087 	bne.w	8004bd4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ac6:	4b89      	ldr	r3, [pc, #548]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <HAL_RCC_OscConfig+0x62>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e3a2      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1a      	ldr	r2, [r3, #32]
 8004ae2:	4b82      	ldr	r3, [pc, #520]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d004      	beq.n	8004af8 <HAL_RCC_OscConfig+0x7c>
 8004aee:	4b7f      	ldr	r3, [pc, #508]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af6:	e005      	b.n	8004b04 <HAL_RCC_OscConfig+0x88>
 8004af8:	4b7c      	ldr	r3, [pc, #496]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d223      	bcs.n	8004b50 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fd55 	bl	80055bc <RCC_SetFlashLatencyFromMSIRange>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e383      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b1c:	4b73      	ldr	r3, [pc, #460]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a72      	ldr	r2, [pc, #456]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004b22:	f043 0308 	orr.w	r3, r3, #8
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	4b70      	ldr	r3, [pc, #448]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	496d      	ldr	r1, [pc, #436]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b3a:	4b6c      	ldr	r3, [pc, #432]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	021b      	lsls	r3, r3, #8
 8004b48:	4968      	ldr	r1, [pc, #416]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	604b      	str	r3, [r1, #4]
 8004b4e:	e025      	b.n	8004b9c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b50:	4b66      	ldr	r3, [pc, #408]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a65      	ldr	r2, [pc, #404]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004b56:	f043 0308 	orr.w	r3, r3, #8
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	4b63      	ldr	r3, [pc, #396]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	4960      	ldr	r1, [pc, #384]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b6e:	4b5f      	ldr	r3, [pc, #380]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	021b      	lsls	r3, r3, #8
 8004b7c:	495b      	ldr	r1, [pc, #364]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d109      	bne.n	8004b9c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fd15 	bl	80055bc <RCC_SetFlashLatencyFromMSIRange>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e343      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b9c:	f000 fc4a 	bl	8005434 <HAL_RCC_GetSysClockFreq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4b52      	ldr	r3, [pc, #328]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	091b      	lsrs	r3, r3, #4
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	4950      	ldr	r1, [pc, #320]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004bae:	5ccb      	ldrb	r3, [r1, r3]
 8004bb0:	f003 031f 	and.w	r3, r3, #31
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb8:	4a4e      	ldr	r2, [pc, #312]	; (8004cf4 <HAL_RCC_OscConfig+0x278>)
 8004bba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004bbc:	4b4e      	ldr	r3, [pc, #312]	; (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fe fac9 	bl	8003158 <HAL_InitTick>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d052      	beq.n	8004c76 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	e327      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d032      	beq.n	8004c42 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004bdc:	4b43      	ldr	r3, [pc, #268]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a42      	ldr	r2, [pc, #264]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004be8:	f7fe fb06 	bl	80031f8 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bf0:	f7fe fb02 	bl	80031f8 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e310      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c02:	4b3a      	ldr	r3, [pc, #232]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f0      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c0e:	4b37      	ldr	r3, [pc, #220]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a36      	ldr	r2, [pc, #216]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004c14:	f043 0308 	orr.w	r3, r3, #8
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	4b34      	ldr	r3, [pc, #208]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	4931      	ldr	r1, [pc, #196]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c2c:	4b2f      	ldr	r3, [pc, #188]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	492c      	ldr	r1, [pc, #176]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	604b      	str	r3, [r1, #4]
 8004c40:	e01a      	b.n	8004c78 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c42:	4b2a      	ldr	r3, [pc, #168]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a29      	ldr	r2, [pc, #164]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004c48:	f023 0301 	bic.w	r3, r3, #1
 8004c4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c4e:	f7fe fad3 	bl	80031f8 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c56:	f7fe facf 	bl	80031f8 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e2dd      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c68:	4b20      	ldr	r3, [pc, #128]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1f0      	bne.n	8004c56 <HAL_RCC_OscConfig+0x1da>
 8004c74:	e000      	b.n	8004c78 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d074      	beq.n	8004d6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	d005      	beq.n	8004c96 <HAL_RCC_OscConfig+0x21a>
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	2b0c      	cmp	r3, #12
 8004c8e:	d10e      	bne.n	8004cae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d10b      	bne.n	8004cae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c96:	4b15      	ldr	r3, [pc, #84]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d064      	beq.n	8004d6c <HAL_RCC_OscConfig+0x2f0>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d160      	bne.n	8004d6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e2ba      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb6:	d106      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x24a>
 8004cb8:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a0b      	ldr	r2, [pc, #44]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc2:	6013      	str	r3, [r2, #0]
 8004cc4:	e026      	b.n	8004d14 <HAL_RCC_OscConfig+0x298>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cce:	d115      	bne.n	8004cfc <HAL_RCC_OscConfig+0x280>
 8004cd0:	4b06      	ldr	r3, [pc, #24]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a05      	ldr	r2, [pc, #20]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004cd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	4b03      	ldr	r3, [pc, #12]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a02      	ldr	r2, [pc, #8]	; (8004cec <HAL_RCC_OscConfig+0x270>)
 8004ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	e014      	b.n	8004d14 <HAL_RCC_OscConfig+0x298>
 8004cea:	bf00      	nop
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	0800ed08 	.word	0x0800ed08
 8004cf4:	20000008 	.word	0x20000008
 8004cf8:	2000000c 	.word	0x2000000c
 8004cfc:	4ba0      	ldr	r3, [pc, #640]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a9f      	ldr	r2, [pc, #636]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	4b9d      	ldr	r3, [pc, #628]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a9c      	ldr	r2, [pc, #624]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d013      	beq.n	8004d44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1c:	f7fe fa6c 	bl	80031f8 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d24:	f7fe fa68 	bl	80031f8 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	; 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e276      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d36:	4b92      	ldr	r3, [pc, #584]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCC_OscConfig+0x2a8>
 8004d42:	e014      	b.n	8004d6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d44:	f7fe fa58 	bl	80031f8 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d4c:	f7fe fa54 	bl	80031f8 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	; 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e262      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d5e:	4b88      	ldr	r3, [pc, #544]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCC_OscConfig+0x2d0>
 8004d6a:	e000      	b.n	8004d6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d060      	beq.n	8004e3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d005      	beq.n	8004d8c <HAL_RCC_OscConfig+0x310>
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	2b0c      	cmp	r3, #12
 8004d84:	d119      	bne.n	8004dba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d116      	bne.n	8004dba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d8c:	4b7c      	ldr	r3, [pc, #496]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <HAL_RCC_OscConfig+0x328>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e23f      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da4:	4b76      	ldr	r3, [pc, #472]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	061b      	lsls	r3, r3, #24
 8004db2:	4973      	ldr	r1, [pc, #460]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004db8:	e040      	b.n	8004e3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d023      	beq.n	8004e0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dc2:	4b6f      	ldr	r3, [pc, #444]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a6e      	ldr	r2, [pc, #440]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dce:	f7fe fa13 	bl	80031f8 <HAL_GetTick>
 8004dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dd4:	e008      	b.n	8004de8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd6:	f7fe fa0f 	bl	80031f8 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e21d      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004de8:	4b65      	ldr	r3, [pc, #404]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0f0      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df4:	4b62      	ldr	r3, [pc, #392]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	061b      	lsls	r3, r3, #24
 8004e02:	495f      	ldr	r1, [pc, #380]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	604b      	str	r3, [r1, #4]
 8004e08:	e018      	b.n	8004e3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e0a:	4b5d      	ldr	r3, [pc, #372]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a5c      	ldr	r2, [pc, #368]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e16:	f7fe f9ef 	bl	80031f8 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e1e:	f7fe f9eb 	bl	80031f8 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e1f9      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e30:	4b53      	ldr	r3, [pc, #332]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1f0      	bne.n	8004e1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d03c      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d01c      	beq.n	8004e8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e50:	4b4b      	ldr	r3, [pc, #300]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e56:	4a4a      	ldr	r2, [pc, #296]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004e58:	f043 0301 	orr.w	r3, r3, #1
 8004e5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e60:	f7fe f9ca 	bl	80031f8 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e68:	f7fe f9c6 	bl	80031f8 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e1d4      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e7a:	4b41      	ldr	r3, [pc, #260]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0ef      	beq.n	8004e68 <HAL_RCC_OscConfig+0x3ec>
 8004e88:	e01b      	b.n	8004ec2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e8a:	4b3d      	ldr	r3, [pc, #244]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e90:	4a3b      	ldr	r2, [pc, #236]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004e92:	f023 0301 	bic.w	r3, r3, #1
 8004e96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9a:	f7fe f9ad 	bl	80031f8 <HAL_GetTick>
 8004e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ea2:	f7fe f9a9 	bl	80031f8 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e1b7      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004eb4:	4b32      	ldr	r3, [pc, #200]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1ef      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 80a6 	beq.w	800501c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ed4:	4b2a      	ldr	r3, [pc, #168]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10d      	bne.n	8004efc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ee0:	4b27      	ldr	r3, [pc, #156]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee4:	4a26      	ldr	r2, [pc, #152]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eea:	6593      	str	r3, [r2, #88]	; 0x58
 8004eec:	4b24      	ldr	r3, [pc, #144]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef4:	60bb      	str	r3, [r7, #8]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004efc:	4b21      	ldr	r3, [pc, #132]	; (8004f84 <HAL_RCC_OscConfig+0x508>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d118      	bne.n	8004f3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f08:	4b1e      	ldr	r3, [pc, #120]	; (8004f84 <HAL_RCC_OscConfig+0x508>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1d      	ldr	r2, [pc, #116]	; (8004f84 <HAL_RCC_OscConfig+0x508>)
 8004f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f14:	f7fe f970 	bl	80031f8 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f1c:	f7fe f96c 	bl	80031f8 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e17a      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f2e:	4b15      	ldr	r3, [pc, #84]	; (8004f84 <HAL_RCC_OscConfig+0x508>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0f0      	beq.n	8004f1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d108      	bne.n	8004f54 <HAL_RCC_OscConfig+0x4d8>
 8004f42:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f48:	4a0d      	ldr	r2, [pc, #52]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004f4a:	f043 0301 	orr.w	r3, r3, #1
 8004f4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f52:	e029      	b.n	8004fa8 <HAL_RCC_OscConfig+0x52c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	2b05      	cmp	r3, #5
 8004f5a:	d115      	bne.n	8004f88 <HAL_RCC_OscConfig+0x50c>
 8004f5c:	4b08      	ldr	r3, [pc, #32]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f62:	4a07      	ldr	r2, [pc, #28]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004f64:	f043 0304 	orr.w	r3, r3, #4
 8004f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f6c:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f72:	4a03      	ldr	r2, [pc, #12]	; (8004f80 <HAL_RCC_OscConfig+0x504>)
 8004f74:	f043 0301 	orr.w	r3, r3, #1
 8004f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f7c:	e014      	b.n	8004fa8 <HAL_RCC_OscConfig+0x52c>
 8004f7e:	bf00      	nop
 8004f80:	40021000 	.word	0x40021000
 8004f84:	40007000 	.word	0x40007000
 8004f88:	4b9c      	ldr	r3, [pc, #624]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 8004f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8e:	4a9b      	ldr	r2, [pc, #620]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f98:	4b98      	ldr	r3, [pc, #608]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 8004f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9e:	4a97      	ldr	r2, [pc, #604]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 8004fa0:	f023 0304 	bic.w	r3, r3, #4
 8004fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d016      	beq.n	8004fde <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb0:	f7fe f922 	bl	80031f8 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fb6:	e00a      	b.n	8004fce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb8:	f7fe f91e 	bl	80031f8 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e12a      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fce:	4b8b      	ldr	r3, [pc, #556]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0ed      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x53c>
 8004fdc:	e015      	b.n	800500a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fde:	f7fe f90b 	bl	80031f8 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fe4:	e00a      	b.n	8004ffc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe6:	f7fe f907 	bl	80031f8 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e113      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ffc:	4b7f      	ldr	r3, [pc, #508]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1ed      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800500a:	7ffb      	ldrb	r3, [r7, #31]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d105      	bne.n	800501c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005010:	4b7a      	ldr	r3, [pc, #488]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 8005012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005014:	4a79      	ldr	r2, [pc, #484]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 8005016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800501a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80fe 	beq.w	8005222 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502a:	2b02      	cmp	r3, #2
 800502c:	f040 80d0 	bne.w	80051d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005030:	4b72      	ldr	r3, [pc, #456]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f003 0203 	and.w	r2, r3, #3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	429a      	cmp	r2, r3
 8005042:	d130      	bne.n	80050a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504e:	3b01      	subs	r3, #1
 8005050:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005052:	429a      	cmp	r2, r3
 8005054:	d127      	bne.n	80050a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005060:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005062:	429a      	cmp	r2, r3
 8005064:	d11f      	bne.n	80050a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005070:	2a07      	cmp	r2, #7
 8005072:	bf14      	ite	ne
 8005074:	2201      	movne	r2, #1
 8005076:	2200      	moveq	r2, #0
 8005078:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800507a:	4293      	cmp	r3, r2
 800507c:	d113      	bne.n	80050a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005088:	085b      	lsrs	r3, r3, #1
 800508a:	3b01      	subs	r3, #1
 800508c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800508e:	429a      	cmp	r2, r3
 8005090:	d109      	bne.n	80050a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	085b      	lsrs	r3, r3, #1
 800509e:	3b01      	subs	r3, #1
 80050a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d06e      	beq.n	8005184 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	2b0c      	cmp	r3, #12
 80050aa:	d069      	beq.n	8005180 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050ac:	4b53      	ldr	r3, [pc, #332]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d105      	bne.n	80050c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80050b8:	4b50      	ldr	r3, [pc, #320]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0ad      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80050c8:	4b4c      	ldr	r3, [pc, #304]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a4b      	ldr	r2, [pc, #300]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 80050ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050d4:	f7fe f890 	bl	80031f8 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050dc:	f7fe f88c 	bl	80031f8 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e09a      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ee:	4b43      	ldr	r3, [pc, #268]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f0      	bne.n	80050dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050fa:	4b40      	ldr	r3, [pc, #256]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	4b40      	ldr	r3, [pc, #256]	; (8005200 <HAL_RCC_OscConfig+0x784>)
 8005100:	4013      	ands	r3, r2
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800510a:	3a01      	subs	r2, #1
 800510c:	0112      	lsls	r2, r2, #4
 800510e:	4311      	orrs	r1, r2
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005114:	0212      	lsls	r2, r2, #8
 8005116:	4311      	orrs	r1, r2
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800511c:	0852      	lsrs	r2, r2, #1
 800511e:	3a01      	subs	r2, #1
 8005120:	0552      	lsls	r2, r2, #21
 8005122:	4311      	orrs	r1, r2
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005128:	0852      	lsrs	r2, r2, #1
 800512a:	3a01      	subs	r2, #1
 800512c:	0652      	lsls	r2, r2, #25
 800512e:	4311      	orrs	r1, r2
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005134:	0912      	lsrs	r2, r2, #4
 8005136:	0452      	lsls	r2, r2, #17
 8005138:	430a      	orrs	r2, r1
 800513a:	4930      	ldr	r1, [pc, #192]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 800513c:	4313      	orrs	r3, r2
 800513e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005140:	4b2e      	ldr	r3, [pc, #184]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a2d      	ldr	r2, [pc, #180]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 8005146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800514a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800514c:	4b2b      	ldr	r3, [pc, #172]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	4a2a      	ldr	r2, [pc, #168]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 8005152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005156:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005158:	f7fe f84e 	bl	80031f8 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005160:	f7fe f84a 	bl	80031f8 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e058      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005172:	4b22      	ldr	r3, [pc, #136]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0f0      	beq.n	8005160 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800517e:	e050      	b.n	8005222 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e04f      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005184:	4b1d      	ldr	r3, [pc, #116]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d148      	bne.n	8005222 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005190:	4b1a      	ldr	r3, [pc, #104]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a19      	ldr	r2, [pc, #100]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 8005196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800519a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800519c:	4b17      	ldr	r3, [pc, #92]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4a16      	ldr	r2, [pc, #88]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 80051a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051a8:	f7fe f826 	bl	80031f8 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b0:	f7fe f822 	bl	80031f8 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e030      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c2:	4b0e      	ldr	r3, [pc, #56]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0f0      	beq.n	80051b0 <HAL_RCC_OscConfig+0x734>
 80051ce:	e028      	b.n	8005222 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	2b0c      	cmp	r3, #12
 80051d4:	d023      	beq.n	800521e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d6:	4b09      	ldr	r3, [pc, #36]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a08      	ldr	r2, [pc, #32]	; (80051fc <HAL_RCC_OscConfig+0x780>)
 80051dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e2:	f7fe f809 	bl	80031f8 <HAL_GetTick>
 80051e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051e8:	e00c      	b.n	8005204 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ea:	f7fe f805 	bl	80031f8 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d905      	bls.n	8005204 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e013      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
 80051fc:	40021000 	.word	0x40021000
 8005200:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005204:	4b09      	ldr	r3, [pc, #36]	; (800522c <HAL_RCC_OscConfig+0x7b0>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1ec      	bne.n	80051ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005210:	4b06      	ldr	r3, [pc, #24]	; (800522c <HAL_RCC_OscConfig+0x7b0>)
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	4905      	ldr	r1, [pc, #20]	; (800522c <HAL_RCC_OscConfig+0x7b0>)
 8005216:	4b06      	ldr	r3, [pc, #24]	; (8005230 <HAL_RCC_OscConfig+0x7b4>)
 8005218:	4013      	ands	r3, r2
 800521a:	60cb      	str	r3, [r1, #12]
 800521c:	e001      	b.n	8005222 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3720      	adds	r7, #32
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40021000 	.word	0x40021000
 8005230:	feeefffc 	.word	0xfeeefffc

08005234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e0e7      	b.n	8005418 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005248:	4b75      	ldr	r3, [pc, #468]	; (8005420 <HAL_RCC_ClockConfig+0x1ec>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d910      	bls.n	8005278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005256:	4b72      	ldr	r3, [pc, #456]	; (8005420 <HAL_RCC_ClockConfig+0x1ec>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f023 0207 	bic.w	r2, r3, #7
 800525e:	4970      	ldr	r1, [pc, #448]	; (8005420 <HAL_RCC_ClockConfig+0x1ec>)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	4313      	orrs	r3, r2
 8005264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005266:	4b6e      	ldr	r3, [pc, #440]	; (8005420 <HAL_RCC_ClockConfig+0x1ec>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d001      	beq.n	8005278 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0cf      	b.n	8005418 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d010      	beq.n	80052a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	4b66      	ldr	r3, [pc, #408]	; (8005424 <HAL_RCC_ClockConfig+0x1f0>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005290:	429a      	cmp	r2, r3
 8005292:	d908      	bls.n	80052a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005294:	4b63      	ldr	r3, [pc, #396]	; (8005424 <HAL_RCC_ClockConfig+0x1f0>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	4960      	ldr	r1, [pc, #384]	; (8005424 <HAL_RCC_ClockConfig+0x1f0>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d04c      	beq.n	800534c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d107      	bne.n	80052ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ba:	4b5a      	ldr	r3, [pc, #360]	; (8005424 <HAL_RCC_ClockConfig+0x1f0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d121      	bne.n	800530a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e0a6      	b.n	8005418 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d107      	bne.n	80052e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052d2:	4b54      	ldr	r3, [pc, #336]	; (8005424 <HAL_RCC_ClockConfig+0x1f0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d115      	bne.n	800530a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e09a      	b.n	8005418 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d107      	bne.n	80052fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052ea:	4b4e      	ldr	r3, [pc, #312]	; (8005424 <HAL_RCC_ClockConfig+0x1f0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e08e      	b.n	8005418 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052fa:	4b4a      	ldr	r3, [pc, #296]	; (8005424 <HAL_RCC_ClockConfig+0x1f0>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e086      	b.n	8005418 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800530a:	4b46      	ldr	r3, [pc, #280]	; (8005424 <HAL_RCC_ClockConfig+0x1f0>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f023 0203 	bic.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	4943      	ldr	r1, [pc, #268]	; (8005424 <HAL_RCC_ClockConfig+0x1f0>)
 8005318:	4313      	orrs	r3, r2
 800531a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800531c:	f7fd ff6c 	bl	80031f8 <HAL_GetTick>
 8005320:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005322:	e00a      	b.n	800533a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005324:	f7fd ff68 	bl	80031f8 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e06e      	b.n	8005418 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533a:	4b3a      	ldr	r3, [pc, #232]	; (8005424 <HAL_RCC_ClockConfig+0x1f0>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 020c 	and.w	r2, r3, #12
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	429a      	cmp	r2, r3
 800534a:	d1eb      	bne.n	8005324 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d010      	beq.n	800537a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	4b31      	ldr	r3, [pc, #196]	; (8005424 <HAL_RCC_ClockConfig+0x1f0>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005364:	429a      	cmp	r2, r3
 8005366:	d208      	bcs.n	800537a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005368:	4b2e      	ldr	r3, [pc, #184]	; (8005424 <HAL_RCC_ClockConfig+0x1f0>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	492b      	ldr	r1, [pc, #172]	; (8005424 <HAL_RCC_ClockConfig+0x1f0>)
 8005376:	4313      	orrs	r3, r2
 8005378:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800537a:	4b29      	ldr	r3, [pc, #164]	; (8005420 <HAL_RCC_ClockConfig+0x1ec>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d210      	bcs.n	80053aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005388:	4b25      	ldr	r3, [pc, #148]	; (8005420 <HAL_RCC_ClockConfig+0x1ec>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f023 0207 	bic.w	r2, r3, #7
 8005390:	4923      	ldr	r1, [pc, #140]	; (8005420 <HAL_RCC_ClockConfig+0x1ec>)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	4313      	orrs	r3, r2
 8005396:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005398:	4b21      	ldr	r3, [pc, #132]	; (8005420 <HAL_RCC_ClockConfig+0x1ec>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d001      	beq.n	80053aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e036      	b.n	8005418 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d008      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053b6:	4b1b      	ldr	r3, [pc, #108]	; (8005424 <HAL_RCC_ClockConfig+0x1f0>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	4918      	ldr	r1, [pc, #96]	; (8005424 <HAL_RCC_ClockConfig+0x1f0>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d009      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053d4:	4b13      	ldr	r3, [pc, #76]	; (8005424 <HAL_RCC_ClockConfig+0x1f0>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	4910      	ldr	r1, [pc, #64]	; (8005424 <HAL_RCC_ClockConfig+0x1f0>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053e8:	f000 f824 	bl	8005434 <HAL_RCC_GetSysClockFreq>
 80053ec:	4602      	mov	r2, r0
 80053ee:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <HAL_RCC_ClockConfig+0x1f0>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	091b      	lsrs	r3, r3, #4
 80053f4:	f003 030f 	and.w	r3, r3, #15
 80053f8:	490b      	ldr	r1, [pc, #44]	; (8005428 <HAL_RCC_ClockConfig+0x1f4>)
 80053fa:	5ccb      	ldrb	r3, [r1, r3]
 80053fc:	f003 031f 	and.w	r3, r3, #31
 8005400:	fa22 f303 	lsr.w	r3, r2, r3
 8005404:	4a09      	ldr	r2, [pc, #36]	; (800542c <HAL_RCC_ClockConfig+0x1f8>)
 8005406:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005408:	4b09      	ldr	r3, [pc, #36]	; (8005430 <HAL_RCC_ClockConfig+0x1fc>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4618      	mov	r0, r3
 800540e:	f7fd fea3 	bl	8003158 <HAL_InitTick>
 8005412:	4603      	mov	r3, r0
 8005414:	72fb      	strb	r3, [r7, #11]

  return status;
 8005416:	7afb      	ldrb	r3, [r7, #11]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40022000 	.word	0x40022000
 8005424:	40021000 	.word	0x40021000
 8005428:	0800ed08 	.word	0x0800ed08
 800542c:	20000008 	.word	0x20000008
 8005430:	2000000c 	.word	0x2000000c

08005434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005434:	b480      	push	{r7}
 8005436:	b089      	sub	sp, #36	; 0x24
 8005438:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	61fb      	str	r3, [r7, #28]
 800543e:	2300      	movs	r3, #0
 8005440:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005442:	4b3e      	ldr	r3, [pc, #248]	; (800553c <HAL_RCC_GetSysClockFreq+0x108>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
 800544a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800544c:	4b3b      	ldr	r3, [pc, #236]	; (800553c <HAL_RCC_GetSysClockFreq+0x108>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f003 0303 	and.w	r3, r3, #3
 8005454:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d005      	beq.n	8005468 <HAL_RCC_GetSysClockFreq+0x34>
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	2b0c      	cmp	r3, #12
 8005460:	d121      	bne.n	80054a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d11e      	bne.n	80054a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005468:	4b34      	ldr	r3, [pc, #208]	; (800553c <HAL_RCC_GetSysClockFreq+0x108>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b00      	cmp	r3, #0
 8005472:	d107      	bne.n	8005484 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005474:	4b31      	ldr	r3, [pc, #196]	; (800553c <HAL_RCC_GetSysClockFreq+0x108>)
 8005476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800547a:	0a1b      	lsrs	r3, r3, #8
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	61fb      	str	r3, [r7, #28]
 8005482:	e005      	b.n	8005490 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005484:	4b2d      	ldr	r3, [pc, #180]	; (800553c <HAL_RCC_GetSysClockFreq+0x108>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005490:	4a2b      	ldr	r2, [pc, #172]	; (8005540 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005498:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10d      	bne.n	80054bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054a4:	e00a      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d102      	bne.n	80054b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054ac:	4b25      	ldr	r3, [pc, #148]	; (8005544 <HAL_RCC_GetSysClockFreq+0x110>)
 80054ae:	61bb      	str	r3, [r7, #24]
 80054b0:	e004      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d101      	bne.n	80054bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054b8:	4b23      	ldr	r3, [pc, #140]	; (8005548 <HAL_RCC_GetSysClockFreq+0x114>)
 80054ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	2b0c      	cmp	r3, #12
 80054c0:	d134      	bne.n	800552c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054c2:	4b1e      	ldr	r3, [pc, #120]	; (800553c <HAL_RCC_GetSysClockFreq+0x108>)
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d003      	beq.n	80054da <HAL_RCC_GetSysClockFreq+0xa6>
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d003      	beq.n	80054e0 <HAL_RCC_GetSysClockFreq+0xac>
 80054d8:	e005      	b.n	80054e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80054da:	4b1a      	ldr	r3, [pc, #104]	; (8005544 <HAL_RCC_GetSysClockFreq+0x110>)
 80054dc:	617b      	str	r3, [r7, #20]
      break;
 80054de:	e005      	b.n	80054ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80054e0:	4b19      	ldr	r3, [pc, #100]	; (8005548 <HAL_RCC_GetSysClockFreq+0x114>)
 80054e2:	617b      	str	r3, [r7, #20]
      break;
 80054e4:	e002      	b.n	80054ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	617b      	str	r3, [r7, #20]
      break;
 80054ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054ec:	4b13      	ldr	r3, [pc, #76]	; (800553c <HAL_RCC_GetSysClockFreq+0x108>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	091b      	lsrs	r3, r3, #4
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	3301      	adds	r3, #1
 80054f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80054fa:	4b10      	ldr	r3, [pc, #64]	; (800553c <HAL_RCC_GetSysClockFreq+0x108>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	0a1b      	lsrs	r3, r3, #8
 8005500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	fb03 f202 	mul.w	r2, r3, r2
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005510:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005512:	4b0a      	ldr	r3, [pc, #40]	; (800553c <HAL_RCC_GetSysClockFreq+0x108>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	0e5b      	lsrs	r3, r3, #25
 8005518:	f003 0303 	and.w	r3, r3, #3
 800551c:	3301      	adds	r3, #1
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	fbb2 f3f3 	udiv	r3, r2, r3
 800552a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800552c:	69bb      	ldr	r3, [r7, #24]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3724      	adds	r7, #36	; 0x24
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40021000 	.word	0x40021000
 8005540:	0800ed20 	.word	0x0800ed20
 8005544:	00f42400 	.word	0x00f42400
 8005548:	007a1200 	.word	0x007a1200

0800554c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005550:	4b03      	ldr	r3, [pc, #12]	; (8005560 <HAL_RCC_GetHCLKFreq+0x14>)
 8005552:	681b      	ldr	r3, [r3, #0]
}
 8005554:	4618      	mov	r0, r3
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	20000008 	.word	0x20000008

08005564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005568:	f7ff fff0 	bl	800554c <HAL_RCC_GetHCLKFreq>
 800556c:	4602      	mov	r2, r0
 800556e:	4b06      	ldr	r3, [pc, #24]	; (8005588 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	0a1b      	lsrs	r3, r3, #8
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	4904      	ldr	r1, [pc, #16]	; (800558c <HAL_RCC_GetPCLK1Freq+0x28>)
 800557a:	5ccb      	ldrb	r3, [r1, r3]
 800557c:	f003 031f 	and.w	r3, r3, #31
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005584:	4618      	mov	r0, r3
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40021000 	.word	0x40021000
 800558c:	0800ed18 	.word	0x0800ed18

08005590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005594:	f7ff ffda 	bl	800554c <HAL_RCC_GetHCLKFreq>
 8005598:	4602      	mov	r2, r0
 800559a:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	0adb      	lsrs	r3, r3, #11
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	4904      	ldr	r1, [pc, #16]	; (80055b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055a6:	5ccb      	ldrb	r3, [r1, r3]
 80055a8:	f003 031f 	and.w	r3, r3, #31
 80055ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40021000 	.word	0x40021000
 80055b8:	0800ed18 	.word	0x0800ed18

080055bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055c4:	2300      	movs	r3, #0
 80055c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055c8:	4b2a      	ldr	r3, [pc, #168]	; (8005674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055d4:	f7ff f9ee 	bl	80049b4 <HAL_PWREx_GetVoltageRange>
 80055d8:	6178      	str	r0, [r7, #20]
 80055da:	e014      	b.n	8005606 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055dc:	4b25      	ldr	r3, [pc, #148]	; (8005674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e0:	4a24      	ldr	r2, [pc, #144]	; (8005674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e6:	6593      	str	r3, [r2, #88]	; 0x58
 80055e8:	4b22      	ldr	r3, [pc, #136]	; (8005674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055f4:	f7ff f9de 	bl	80049b4 <HAL_PWREx_GetVoltageRange>
 80055f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055fa:	4b1e      	ldr	r3, [pc, #120]	; (8005674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fe:	4a1d      	ldr	r2, [pc, #116]	; (8005674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005604:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800560c:	d10b      	bne.n	8005626 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b80      	cmp	r3, #128	; 0x80
 8005612:	d919      	bls.n	8005648 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2ba0      	cmp	r3, #160	; 0xa0
 8005618:	d902      	bls.n	8005620 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800561a:	2302      	movs	r3, #2
 800561c:	613b      	str	r3, [r7, #16]
 800561e:	e013      	b.n	8005648 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005620:	2301      	movs	r3, #1
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	e010      	b.n	8005648 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b80      	cmp	r3, #128	; 0x80
 800562a:	d902      	bls.n	8005632 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800562c:	2303      	movs	r3, #3
 800562e:	613b      	str	r3, [r7, #16]
 8005630:	e00a      	b.n	8005648 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b80      	cmp	r3, #128	; 0x80
 8005636:	d102      	bne.n	800563e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005638:	2302      	movs	r3, #2
 800563a:	613b      	str	r3, [r7, #16]
 800563c:	e004      	b.n	8005648 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b70      	cmp	r3, #112	; 0x70
 8005642:	d101      	bne.n	8005648 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005644:	2301      	movs	r3, #1
 8005646:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005648:	4b0b      	ldr	r3, [pc, #44]	; (8005678 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f023 0207 	bic.w	r2, r3, #7
 8005650:	4909      	ldr	r1, [pc, #36]	; (8005678 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	4313      	orrs	r3, r2
 8005656:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005658:	4b07      	ldr	r3, [pc, #28]	; (8005678 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	429a      	cmp	r2, r3
 8005664:	d001      	beq.n	800566a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e000      	b.n	800566c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40021000 	.word	0x40021000
 8005678:	40022000 	.word	0x40022000

0800567c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005684:	2300      	movs	r3, #0
 8005686:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005688:	2300      	movs	r3, #0
 800568a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005694:	2b00      	cmp	r3, #0
 8005696:	d041      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800569c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056a0:	d02a      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80056a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056a6:	d824      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056ac:	d008      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80056ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056b2:	d81e      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80056b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056bc:	d010      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80056be:	e018      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056c0:	4b86      	ldr	r3, [pc, #536]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	4a85      	ldr	r2, [pc, #532]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056cc:	e015      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3304      	adds	r3, #4
 80056d2:	2100      	movs	r1, #0
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fabb 	bl	8005c50 <RCCEx_PLLSAI1_Config>
 80056da:	4603      	mov	r3, r0
 80056dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056de:	e00c      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3320      	adds	r3, #32
 80056e4:	2100      	movs	r1, #0
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fba6 	bl	8005e38 <RCCEx_PLLSAI2_Config>
 80056ec:	4603      	mov	r3, r0
 80056ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056f0:	e003      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	74fb      	strb	r3, [r7, #19]
      break;
 80056f6:	e000      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80056f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056fa:	7cfb      	ldrb	r3, [r7, #19]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10b      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005700:	4b76      	ldr	r3, [pc, #472]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005706:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800570e:	4973      	ldr	r1, [pc, #460]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005716:	e001      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005718:	7cfb      	ldrb	r3, [r7, #19]
 800571a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d041      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800572c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005730:	d02a      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005732:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005736:	d824      	bhi.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005738:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800573c:	d008      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800573e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005742:	d81e      	bhi.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800574c:	d010      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800574e:	e018      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005750:	4b62      	ldr	r3, [pc, #392]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4a61      	ldr	r2, [pc, #388]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800575a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800575c:	e015      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3304      	adds	r3, #4
 8005762:	2100      	movs	r1, #0
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fa73 	bl	8005c50 <RCCEx_PLLSAI1_Config>
 800576a:	4603      	mov	r3, r0
 800576c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800576e:	e00c      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3320      	adds	r3, #32
 8005774:	2100      	movs	r1, #0
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fb5e 	bl	8005e38 <RCCEx_PLLSAI2_Config>
 800577c:	4603      	mov	r3, r0
 800577e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005780:	e003      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	74fb      	strb	r3, [r7, #19]
      break;
 8005786:	e000      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800578a:	7cfb      	ldrb	r3, [r7, #19]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10b      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005790:	4b52      	ldr	r3, [pc, #328]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005796:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800579e:	494f      	ldr	r1, [pc, #316]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057a6:	e001      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a8:	7cfb      	ldrb	r3, [r7, #19]
 80057aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80a0 	beq.w	80058fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ba:	2300      	movs	r3, #0
 80057bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057be:	4b47      	ldr	r3, [pc, #284]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80057ca:	2301      	movs	r3, #1
 80057cc:	e000      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80057ce:	2300      	movs	r3, #0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00d      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057d4:	4b41      	ldr	r3, [pc, #260]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	4a40      	ldr	r2, [pc, #256]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057de:	6593      	str	r3, [r2, #88]	; 0x58
 80057e0:	4b3e      	ldr	r3, [pc, #248]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e8:	60bb      	str	r3, [r7, #8]
 80057ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ec:	2301      	movs	r3, #1
 80057ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057f0:	4b3b      	ldr	r3, [pc, #236]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a3a      	ldr	r2, [pc, #232]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80057f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057fc:	f7fd fcfc 	bl	80031f8 <HAL_GetTick>
 8005800:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005802:	e009      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005804:	f7fd fcf8 	bl	80031f8 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d902      	bls.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	74fb      	strb	r3, [r7, #19]
        break;
 8005816:	e005      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005818:	4b31      	ldr	r3, [pc, #196]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0ef      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005824:	7cfb      	ldrb	r3, [r7, #19]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d15c      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800582a:	4b2c      	ldr	r3, [pc, #176]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800582c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005834:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d01f      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	429a      	cmp	r2, r3
 8005846:	d019      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005848:	4b24      	ldr	r3, [pc, #144]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800584a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005852:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005854:	4b21      	ldr	r3, [pc, #132]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585a:	4a20      	ldr	r2, [pc, #128]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800585c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005864:	4b1d      	ldr	r3, [pc, #116]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586a:	4a1c      	ldr	r2, [pc, #112]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800586c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005874:	4a19      	ldr	r2, [pc, #100]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d016      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005886:	f7fd fcb7 	bl	80031f8 <HAL_GetTick>
 800588a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800588c:	e00b      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800588e:	f7fd fcb3 	bl	80031f8 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	f241 3288 	movw	r2, #5000	; 0x1388
 800589c:	4293      	cmp	r3, r2
 800589e:	d902      	bls.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	74fb      	strb	r3, [r7, #19]
            break;
 80058a4:	e006      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058a6:	4b0d      	ldr	r3, [pc, #52]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0ec      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80058b4:	7cfb      	ldrb	r3, [r7, #19]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10c      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058ba:	4b08      	ldr	r3, [pc, #32]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ca:	4904      	ldr	r1, [pc, #16]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058d2:	e009      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058d4:	7cfb      	ldrb	r3, [r7, #19]
 80058d6:	74bb      	strb	r3, [r7, #18]
 80058d8:	e006      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80058da:	bf00      	nop
 80058dc:	40021000 	.word	0x40021000
 80058e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e4:	7cfb      	ldrb	r3, [r7, #19]
 80058e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058e8:	7c7b      	ldrb	r3, [r7, #17]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d105      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ee:	4b9e      	ldr	r3, [pc, #632]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f2:	4a9d      	ldr	r2, [pc, #628]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005906:	4b98      	ldr	r3, [pc, #608]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590c:	f023 0203 	bic.w	r2, r3, #3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	4994      	ldr	r1, [pc, #592]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005916:	4313      	orrs	r3, r2
 8005918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00a      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005928:	4b8f      	ldr	r3, [pc, #572]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800592a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592e:	f023 020c 	bic.w	r2, r3, #12
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005936:	498c      	ldr	r1, [pc, #560]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005938:	4313      	orrs	r3, r2
 800593a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800594a:	4b87      	ldr	r3, [pc, #540]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005950:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005958:	4983      	ldr	r1, [pc, #524]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0308 	and.w	r3, r3, #8
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800596c:	4b7e      	ldr	r3, [pc, #504]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005972:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597a:	497b      	ldr	r1, [pc, #492]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0310 	and.w	r3, r3, #16
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800598e:	4b76      	ldr	r3, [pc, #472]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005994:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800599c:	4972      	ldr	r1, [pc, #456]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059b0:	4b6d      	ldr	r3, [pc, #436]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059be:	496a      	ldr	r1, [pc, #424]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059d2:	4b65      	ldr	r3, [pc, #404]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e0:	4961      	ldr	r1, [pc, #388]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059f4:	4b5c      	ldr	r3, [pc, #368]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a02:	4959      	ldr	r1, [pc, #356]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a16:	4b54      	ldr	r3, [pc, #336]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a24:	4950      	ldr	r1, [pc, #320]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a38:	4b4b      	ldr	r3, [pc, #300]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a46:	4948      	ldr	r1, [pc, #288]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a5a:	4b43      	ldr	r3, [pc, #268]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a68:	493f      	ldr	r1, [pc, #252]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d028      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a7c:	4b3a      	ldr	r3, [pc, #232]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a8a:	4937      	ldr	r1, [pc, #220]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a9a:	d106      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a9c:	4b32      	ldr	r3, [pc, #200]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	4a31      	ldr	r2, [pc, #196]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aa6:	60d3      	str	r3, [r2, #12]
 8005aa8:	e011      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ab2:	d10c      	bne.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	2101      	movs	r1, #1
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 f8c8 	bl	8005c50 <RCCEx_PLLSAI1_Config>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ac4:	7cfb      	ldrb	r3, [r7, #19]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005aca:	7cfb      	ldrb	r3, [r7, #19]
 8005acc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d028      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ada:	4b23      	ldr	r3, [pc, #140]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae8:	491f      	ldr	r1, [pc, #124]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005af8:	d106      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005afa:	4b1b      	ldr	r3, [pc, #108]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	4a1a      	ldr	r2, [pc, #104]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b04:	60d3      	str	r3, [r2, #12]
 8005b06:	e011      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b10:	d10c      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	3304      	adds	r3, #4
 8005b16:	2101      	movs	r1, #1
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 f899 	bl	8005c50 <RCCEx_PLLSAI1_Config>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b22:	7cfb      	ldrb	r3, [r7, #19]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005b28:	7cfb      	ldrb	r3, [r7, #19]
 8005b2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d02b      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b38:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b46:	4908      	ldr	r1, [pc, #32]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b56:	d109      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b58:	4b03      	ldr	r3, [pc, #12]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	4a02      	ldr	r2, [pc, #8]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b62:	60d3      	str	r3, [r2, #12]
 8005b64:	e014      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005b66:	bf00      	nop
 8005b68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b74:	d10c      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 f867 	bl	8005c50 <RCCEx_PLLSAI1_Config>
 8005b82:	4603      	mov	r3, r0
 8005b84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b86:	7cfb      	ldrb	r3, [r7, #19]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005b8c:	7cfb      	ldrb	r3, [r7, #19]
 8005b8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d02f      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b9c:	4b2b      	ldr	r3, [pc, #172]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005baa:	4928      	ldr	r1, [pc, #160]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bba:	d10d      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	2102      	movs	r1, #2
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 f844 	bl	8005c50 <RCCEx_PLLSAI1_Config>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bcc:	7cfb      	ldrb	r3, [r7, #19]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d014      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005bd2:	7cfb      	ldrb	r3, [r7, #19]
 8005bd4:	74bb      	strb	r3, [r7, #18]
 8005bd6:	e011      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005be0:	d10c      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3320      	adds	r3, #32
 8005be6:	2102      	movs	r1, #2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 f925 	bl	8005e38 <RCCEx_PLLSAI2_Config>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bf2:	7cfb      	ldrb	r3, [r7, #19]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005bf8:	7cfb      	ldrb	r3, [r7, #19]
 8005bfa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00a      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c08:	4b10      	ldr	r3, [pc, #64]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c16:	490d      	ldr	r1, [pc, #52]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00b      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c2a:	4b08      	ldr	r3, [pc, #32]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c3a:	4904      	ldr	r1, [pc, #16]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c42:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	40021000 	.word	0x40021000

08005c50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c5e:	4b75      	ldr	r3, [pc, #468]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d018      	beq.n	8005c9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c6a:	4b72      	ldr	r3, [pc, #456]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f003 0203 	and.w	r2, r3, #3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d10d      	bne.n	8005c96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
       ||
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d009      	beq.n	8005c96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005c82:	4b6c      	ldr	r3, [pc, #432]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	091b      	lsrs	r3, r3, #4
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
       ||
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d047      	beq.n	8005d26 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	73fb      	strb	r3, [r7, #15]
 8005c9a:	e044      	b.n	8005d26 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d018      	beq.n	8005cd6 <RCCEx_PLLSAI1_Config+0x86>
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d825      	bhi.n	8005cf4 <RCCEx_PLLSAI1_Config+0xa4>
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d002      	beq.n	8005cb2 <RCCEx_PLLSAI1_Config+0x62>
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d009      	beq.n	8005cc4 <RCCEx_PLLSAI1_Config+0x74>
 8005cb0:	e020      	b.n	8005cf4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005cb2:	4b60      	ldr	r3, [pc, #384]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d11d      	bne.n	8005cfa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cc2:	e01a      	b.n	8005cfa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005cc4:	4b5b      	ldr	r3, [pc, #364]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d116      	bne.n	8005cfe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cd4:	e013      	b.n	8005cfe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cd6:	4b57      	ldr	r3, [pc, #348]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10f      	bne.n	8005d02 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ce2:	4b54      	ldr	r3, [pc, #336]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d109      	bne.n	8005d02 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cf2:	e006      	b.n	8005d02 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf8:	e004      	b.n	8005d04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cfa:	bf00      	nop
 8005cfc:	e002      	b.n	8005d04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cfe:	bf00      	nop
 8005d00:	e000      	b.n	8005d04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d02:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10d      	bne.n	8005d26 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d0a:	4b4a      	ldr	r3, [pc, #296]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6819      	ldr	r1, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	4944      	ldr	r1, [pc, #272]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d17d      	bne.n	8005e28 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d2c:	4b41      	ldr	r3, [pc, #260]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a40      	ldr	r2, [pc, #256]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d38:	f7fd fa5e 	bl	80031f8 <HAL_GetTick>
 8005d3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d3e:	e009      	b.n	8005d54 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d40:	f7fd fa5a 	bl	80031f8 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d902      	bls.n	8005d54 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	73fb      	strb	r3, [r7, #15]
        break;
 8005d52:	e005      	b.n	8005d60 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d54:	4b37      	ldr	r3, [pc, #220]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1ef      	bne.n	8005d40 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d160      	bne.n	8005e28 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d111      	bne.n	8005d90 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d6c:	4b31      	ldr	r3, [pc, #196]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6892      	ldr	r2, [r2, #8]
 8005d7c:	0211      	lsls	r1, r2, #8
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	68d2      	ldr	r2, [r2, #12]
 8005d82:	0912      	lsrs	r2, r2, #4
 8005d84:	0452      	lsls	r2, r2, #17
 8005d86:	430a      	orrs	r2, r1
 8005d88:	492a      	ldr	r1, [pc, #168]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	610b      	str	r3, [r1, #16]
 8005d8e:	e027      	b.n	8005de0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d112      	bne.n	8005dbc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d96:	4b27      	ldr	r3, [pc, #156]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005d9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6892      	ldr	r2, [r2, #8]
 8005da6:	0211      	lsls	r1, r2, #8
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6912      	ldr	r2, [r2, #16]
 8005dac:	0852      	lsrs	r2, r2, #1
 8005dae:	3a01      	subs	r2, #1
 8005db0:	0552      	lsls	r2, r2, #21
 8005db2:	430a      	orrs	r2, r1
 8005db4:	491f      	ldr	r1, [pc, #124]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	610b      	str	r3, [r1, #16]
 8005dba:	e011      	b.n	8005de0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dbc:	4b1d      	ldr	r3, [pc, #116]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005dc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6892      	ldr	r2, [r2, #8]
 8005dcc:	0211      	lsls	r1, r2, #8
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6952      	ldr	r2, [r2, #20]
 8005dd2:	0852      	lsrs	r2, r2, #1
 8005dd4:	3a01      	subs	r2, #1
 8005dd6:	0652      	lsls	r2, r2, #25
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	4916      	ldr	r1, [pc, #88]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005de0:	4b14      	ldr	r3, [pc, #80]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a13      	ldr	r2, [pc, #76]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005de6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dec:	f7fd fa04 	bl	80031f8 <HAL_GetTick>
 8005df0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005df2:	e009      	b.n	8005e08 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005df4:	f7fd fa00 	bl	80031f8 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d902      	bls.n	8005e08 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	73fb      	strb	r3, [r7, #15]
          break;
 8005e06:	e005      	b.n	8005e14 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e08:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0ef      	beq.n	8005df4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d106      	bne.n	8005e28 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e1a:	4b06      	ldr	r3, [pc, #24]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e1c:	691a      	ldr	r2, [r3, #16]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	4904      	ldr	r1, [pc, #16]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	40021000 	.word	0x40021000

08005e38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e46:	4b6a      	ldr	r3, [pc, #424]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d018      	beq.n	8005e84 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005e52:	4b67      	ldr	r3, [pc, #412]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f003 0203 	and.w	r2, r3, #3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d10d      	bne.n	8005e7e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
       ||
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d009      	beq.n	8005e7e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005e6a:	4b61      	ldr	r3, [pc, #388]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	091b      	lsrs	r3, r3, #4
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
       ||
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d047      	beq.n	8005f0e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	73fb      	strb	r3, [r7, #15]
 8005e82:	e044      	b.n	8005f0e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d018      	beq.n	8005ebe <RCCEx_PLLSAI2_Config+0x86>
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d825      	bhi.n	8005edc <RCCEx_PLLSAI2_Config+0xa4>
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d002      	beq.n	8005e9a <RCCEx_PLLSAI2_Config+0x62>
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d009      	beq.n	8005eac <RCCEx_PLLSAI2_Config+0x74>
 8005e98:	e020      	b.n	8005edc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e9a:	4b55      	ldr	r3, [pc, #340]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d11d      	bne.n	8005ee2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eaa:	e01a      	b.n	8005ee2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005eac:	4b50      	ldr	r3, [pc, #320]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d116      	bne.n	8005ee6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ebc:	e013      	b.n	8005ee6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ebe:	4b4c      	ldr	r3, [pc, #304]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10f      	bne.n	8005eea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005eca:	4b49      	ldr	r3, [pc, #292]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d109      	bne.n	8005eea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005eda:	e006      	b.n	8005eea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	73fb      	strb	r3, [r7, #15]
      break;
 8005ee0:	e004      	b.n	8005eec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ee2:	bf00      	nop
 8005ee4:	e002      	b.n	8005eec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ee6:	bf00      	nop
 8005ee8:	e000      	b.n	8005eec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005eea:	bf00      	nop
    }

    if(status == HAL_OK)
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10d      	bne.n	8005f0e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ef2:	4b3f      	ldr	r3, [pc, #252]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6819      	ldr	r1, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	430b      	orrs	r3, r1
 8005f08:	4939      	ldr	r1, [pc, #228]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d167      	bne.n	8005fe4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005f14:	4b36      	ldr	r3, [pc, #216]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a35      	ldr	r2, [pc, #212]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f20:	f7fd f96a 	bl	80031f8 <HAL_GetTick>
 8005f24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f26:	e009      	b.n	8005f3c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f28:	f7fd f966 	bl	80031f8 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d902      	bls.n	8005f3c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	73fb      	strb	r3, [r7, #15]
        break;
 8005f3a:	e005      	b.n	8005f48 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f3c:	4b2c      	ldr	r3, [pc, #176]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1ef      	bne.n	8005f28 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d14a      	bne.n	8005fe4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d111      	bne.n	8005f78 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f54:	4b26      	ldr	r3, [pc, #152]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	6892      	ldr	r2, [r2, #8]
 8005f64:	0211      	lsls	r1, r2, #8
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	68d2      	ldr	r2, [r2, #12]
 8005f6a:	0912      	lsrs	r2, r2, #4
 8005f6c:	0452      	lsls	r2, r2, #17
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	491f      	ldr	r1, [pc, #124]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	614b      	str	r3, [r1, #20]
 8005f76:	e011      	b.n	8005f9c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f78:	4b1d      	ldr	r3, [pc, #116]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005f80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	6892      	ldr	r2, [r2, #8]
 8005f88:	0211      	lsls	r1, r2, #8
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6912      	ldr	r2, [r2, #16]
 8005f8e:	0852      	lsrs	r2, r2, #1
 8005f90:	3a01      	subs	r2, #1
 8005f92:	0652      	lsls	r2, r2, #25
 8005f94:	430a      	orrs	r2, r1
 8005f96:	4916      	ldr	r1, [pc, #88]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005f9c:	4b14      	ldr	r3, [pc, #80]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a13      	ldr	r2, [pc, #76]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa8:	f7fd f926 	bl	80031f8 <HAL_GetTick>
 8005fac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fae:	e009      	b.n	8005fc4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fb0:	f7fd f922 	bl	80031f8 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d902      	bls.n	8005fc4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	73fb      	strb	r3, [r7, #15]
          break;
 8005fc2:	e005      	b.n	8005fd0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fc4:	4b0a      	ldr	r3, [pc, #40]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d0ef      	beq.n	8005fb0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d106      	bne.n	8005fe4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005fd6:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fd8:	695a      	ldr	r2, [r3, #20]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	4904      	ldr	r1, [pc, #16]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	40021000 	.word	0x40021000

08005ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e049      	b.n	800609a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d106      	bne.n	8006020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7fc fe76 	bl	8002d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3304      	adds	r3, #4
 8006030:	4619      	mov	r1, r3
 8006032:	4610      	mov	r0, r2
 8006034:	f000 fe5a 	bl	8006cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d001      	beq.n	80060bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e047      	b.n	800614c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a23      	ldr	r2, [pc, #140]	; (8006158 <HAL_TIM_Base_Start+0xb4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d01d      	beq.n	800610a <HAL_TIM_Base_Start+0x66>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d6:	d018      	beq.n	800610a <HAL_TIM_Base_Start+0x66>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a1f      	ldr	r2, [pc, #124]	; (800615c <HAL_TIM_Base_Start+0xb8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d013      	beq.n	800610a <HAL_TIM_Base_Start+0x66>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a1e      	ldr	r2, [pc, #120]	; (8006160 <HAL_TIM_Base_Start+0xbc>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00e      	beq.n	800610a <HAL_TIM_Base_Start+0x66>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a1c      	ldr	r2, [pc, #112]	; (8006164 <HAL_TIM_Base_Start+0xc0>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d009      	beq.n	800610a <HAL_TIM_Base_Start+0x66>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a1b      	ldr	r2, [pc, #108]	; (8006168 <HAL_TIM_Base_Start+0xc4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d004      	beq.n	800610a <HAL_TIM_Base_Start+0x66>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a19      	ldr	r2, [pc, #100]	; (800616c <HAL_TIM_Base_Start+0xc8>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d115      	bne.n	8006136 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	4b17      	ldr	r3, [pc, #92]	; (8006170 <HAL_TIM_Base_Start+0xcc>)
 8006112:	4013      	ands	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b06      	cmp	r3, #6
 800611a:	d015      	beq.n	8006148 <HAL_TIM_Base_Start+0xa4>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006122:	d011      	beq.n	8006148 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0201 	orr.w	r2, r2, #1
 8006132:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006134:	e008      	b.n	8006148 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f042 0201 	orr.w	r2, r2, #1
 8006144:	601a      	str	r2, [r3, #0]
 8006146:	e000      	b.n	800614a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006148:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	40012c00 	.word	0x40012c00
 800615c:	40000400 	.word	0x40000400
 8006160:	40000800 	.word	0x40000800
 8006164:	40000c00 	.word	0x40000c00
 8006168:	40013400 	.word	0x40013400
 800616c:	40014000 	.word	0x40014000
 8006170:	00010007 	.word	0x00010007

08006174 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6a1a      	ldr	r2, [r3, #32]
 8006182:	f241 1311 	movw	r3, #4369	; 0x1111
 8006186:	4013      	ands	r3, r2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10f      	bne.n	80061ac <HAL_TIM_Base_Stop+0x38>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6a1a      	ldr	r2, [r3, #32]
 8006192:	f240 4344 	movw	r3, #1092	; 0x444
 8006196:	4013      	ands	r3, r2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d107      	bne.n	80061ac <HAL_TIM_Base_Stop+0x38>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0201 	bic.w	r2, r2, #1
 80061aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
	...

080061c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d001      	beq.n	80061dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e04f      	b.n	800627c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0201 	orr.w	r2, r2, #1
 80061f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a23      	ldr	r2, [pc, #140]	; (8006288 <HAL_TIM_Base_Start_IT+0xc4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d01d      	beq.n	800623a <HAL_TIM_Base_Start_IT+0x76>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006206:	d018      	beq.n	800623a <HAL_TIM_Base_Start_IT+0x76>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a1f      	ldr	r2, [pc, #124]	; (800628c <HAL_TIM_Base_Start_IT+0xc8>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d013      	beq.n	800623a <HAL_TIM_Base_Start_IT+0x76>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a1e      	ldr	r2, [pc, #120]	; (8006290 <HAL_TIM_Base_Start_IT+0xcc>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d00e      	beq.n	800623a <HAL_TIM_Base_Start_IT+0x76>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a1c      	ldr	r2, [pc, #112]	; (8006294 <HAL_TIM_Base_Start_IT+0xd0>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d009      	beq.n	800623a <HAL_TIM_Base_Start_IT+0x76>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a1b      	ldr	r2, [pc, #108]	; (8006298 <HAL_TIM_Base_Start_IT+0xd4>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d004      	beq.n	800623a <HAL_TIM_Base_Start_IT+0x76>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a19      	ldr	r2, [pc, #100]	; (800629c <HAL_TIM_Base_Start_IT+0xd8>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d115      	bne.n	8006266 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	4b17      	ldr	r3, [pc, #92]	; (80062a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006242:	4013      	ands	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2b06      	cmp	r3, #6
 800624a:	d015      	beq.n	8006278 <HAL_TIM_Base_Start_IT+0xb4>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006252:	d011      	beq.n	8006278 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f042 0201 	orr.w	r2, r2, #1
 8006262:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006264:	e008      	b.n	8006278 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0201 	orr.w	r2, r2, #1
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	e000      	b.n	800627a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006278:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	40012c00 	.word	0x40012c00
 800628c:	40000400 	.word	0x40000400
 8006290:	40000800 	.word	0x40000800
 8006294:	40000c00 	.word	0x40000c00
 8006298:	40013400 	.word	0x40013400
 800629c:	40014000 	.word	0x40014000
 80062a0:	00010007 	.word	0x00010007

080062a4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0201 	bic.w	r2, r2, #1
 80062ba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6a1a      	ldr	r2, [r3, #32]
 80062c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80062c6:	4013      	ands	r3, r2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10f      	bne.n	80062ec <HAL_TIM_Base_Stop_IT+0x48>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6a1a      	ldr	r2, [r3, #32]
 80062d2:	f240 4344 	movw	r3, #1092	; 0x444
 80062d6:	4013      	ands	r3, r2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d107      	bne.n	80062ec <HAL_TIM_Base_Stop_IT+0x48>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0201 	bic.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b082      	sub	sp, #8
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e049      	b.n	80063a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	d106      	bne.n	800632e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7fc fccf 	bl	8002ccc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2202      	movs	r2, #2
 8006332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	3304      	adds	r3, #4
 800633e:	4619      	mov	r1, r3
 8006340:	4610      	mov	r0, r2
 8006342:	f000 fcd3 	bl	8006cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d109      	bne.n	80063d8 <HAL_TIM_PWM_Start_IT+0x28>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	bf14      	ite	ne
 80063d0:	2301      	movne	r3, #1
 80063d2:	2300      	moveq	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	e03c      	b.n	8006452 <HAL_TIM_PWM_Start_IT+0xa2>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d109      	bne.n	80063f2 <HAL_TIM_PWM_Start_IT+0x42>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	bf14      	ite	ne
 80063ea:	2301      	movne	r3, #1
 80063ec:	2300      	moveq	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	e02f      	b.n	8006452 <HAL_TIM_PWM_Start_IT+0xa2>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d109      	bne.n	800640c <HAL_TIM_PWM_Start_IT+0x5c>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b01      	cmp	r3, #1
 8006402:	bf14      	ite	ne
 8006404:	2301      	movne	r3, #1
 8006406:	2300      	moveq	r3, #0
 8006408:	b2db      	uxtb	r3, r3
 800640a:	e022      	b.n	8006452 <HAL_TIM_PWM_Start_IT+0xa2>
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	2b0c      	cmp	r3, #12
 8006410:	d109      	bne.n	8006426 <HAL_TIM_PWM_Start_IT+0x76>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b01      	cmp	r3, #1
 800641c:	bf14      	ite	ne
 800641e:	2301      	movne	r3, #1
 8006420:	2300      	moveq	r3, #0
 8006422:	b2db      	uxtb	r3, r3
 8006424:	e015      	b.n	8006452 <HAL_TIM_PWM_Start_IT+0xa2>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b10      	cmp	r3, #16
 800642a:	d109      	bne.n	8006440 <HAL_TIM_PWM_Start_IT+0x90>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b01      	cmp	r3, #1
 8006436:	bf14      	ite	ne
 8006438:	2301      	movne	r3, #1
 800643a:	2300      	moveq	r3, #0
 800643c:	b2db      	uxtb	r3, r3
 800643e:	e008      	b.n	8006452 <HAL_TIM_PWM_Start_IT+0xa2>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b01      	cmp	r3, #1
 800644a:	bf14      	ite	ne
 800644c:	2301      	movne	r3, #1
 800644e:	2300      	moveq	r3, #0
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e0e7      	b.n	800662a <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d104      	bne.n	800646a <HAL_TIM_PWM_Start_IT+0xba>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006468:	e023      	b.n	80064b2 <HAL_TIM_PWM_Start_IT+0x102>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b04      	cmp	r3, #4
 800646e:	d104      	bne.n	800647a <HAL_TIM_PWM_Start_IT+0xca>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006478:	e01b      	b.n	80064b2 <HAL_TIM_PWM_Start_IT+0x102>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b08      	cmp	r3, #8
 800647e:	d104      	bne.n	800648a <HAL_TIM_PWM_Start_IT+0xda>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006488:	e013      	b.n	80064b2 <HAL_TIM_PWM_Start_IT+0x102>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b0c      	cmp	r3, #12
 800648e:	d104      	bne.n	800649a <HAL_TIM_PWM_Start_IT+0xea>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006498:	e00b      	b.n	80064b2 <HAL_TIM_PWM_Start_IT+0x102>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b10      	cmp	r3, #16
 800649e:	d104      	bne.n	80064aa <HAL_TIM_PWM_Start_IT+0xfa>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064a8:	e003      	b.n	80064b2 <HAL_TIM_PWM_Start_IT+0x102>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2202      	movs	r2, #2
 80064ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b0c      	cmp	r3, #12
 80064b6:	d841      	bhi.n	800653c <HAL_TIM_PWM_Start_IT+0x18c>
 80064b8:	a201      	add	r2, pc, #4	; (adr r2, 80064c0 <HAL_TIM_PWM_Start_IT+0x110>)
 80064ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064be:	bf00      	nop
 80064c0:	080064f5 	.word	0x080064f5
 80064c4:	0800653d 	.word	0x0800653d
 80064c8:	0800653d 	.word	0x0800653d
 80064cc:	0800653d 	.word	0x0800653d
 80064d0:	08006507 	.word	0x08006507
 80064d4:	0800653d 	.word	0x0800653d
 80064d8:	0800653d 	.word	0x0800653d
 80064dc:	0800653d 	.word	0x0800653d
 80064e0:	08006519 	.word	0x08006519
 80064e4:	0800653d 	.word	0x0800653d
 80064e8:	0800653d 	.word	0x0800653d
 80064ec:	0800653d 	.word	0x0800653d
 80064f0:	0800652b 	.word	0x0800652b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68da      	ldr	r2, [r3, #12]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f042 0202 	orr.w	r2, r2, #2
 8006502:	60da      	str	r2, [r3, #12]
      break;
 8006504:	e01d      	b.n	8006542 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68da      	ldr	r2, [r3, #12]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f042 0204 	orr.w	r2, r2, #4
 8006514:	60da      	str	r2, [r3, #12]
      break;
 8006516:	e014      	b.n	8006542 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 0208 	orr.w	r2, r2, #8
 8006526:	60da      	str	r2, [r3, #12]
      break;
 8006528:	e00b      	b.n	8006542 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68da      	ldr	r2, [r3, #12]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f042 0210 	orr.w	r2, r2, #16
 8006538:	60da      	str	r2, [r3, #12]
      break;
 800653a:	e002      	b.n	8006542 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	73fb      	strb	r3, [r7, #15]
      break;
 8006540:	bf00      	nop
  }

  if (status == HAL_OK)
 8006542:	7bfb      	ldrb	r3, [r7, #15]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d16f      	bne.n	8006628 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2201      	movs	r2, #1
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	4618      	mov	r0, r3
 8006552:	f000 ff3b 	bl	80073cc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a36      	ldr	r2, [pc, #216]	; (8006634 <HAL_TIM_PWM_Start_IT+0x284>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d013      	beq.n	8006588 <HAL_TIM_PWM_Start_IT+0x1d8>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a34      	ldr	r2, [pc, #208]	; (8006638 <HAL_TIM_PWM_Start_IT+0x288>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d00e      	beq.n	8006588 <HAL_TIM_PWM_Start_IT+0x1d8>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a33      	ldr	r2, [pc, #204]	; (800663c <HAL_TIM_PWM_Start_IT+0x28c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d009      	beq.n	8006588 <HAL_TIM_PWM_Start_IT+0x1d8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a31      	ldr	r2, [pc, #196]	; (8006640 <HAL_TIM_PWM_Start_IT+0x290>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d004      	beq.n	8006588 <HAL_TIM_PWM_Start_IT+0x1d8>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a30      	ldr	r2, [pc, #192]	; (8006644 <HAL_TIM_PWM_Start_IT+0x294>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d101      	bne.n	800658c <HAL_TIM_PWM_Start_IT+0x1dc>
 8006588:	2301      	movs	r3, #1
 800658a:	e000      	b.n	800658e <HAL_TIM_PWM_Start_IT+0x1de>
 800658c:	2300      	movs	r3, #0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d007      	beq.n	80065a2 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a23      	ldr	r2, [pc, #140]	; (8006634 <HAL_TIM_PWM_Start_IT+0x284>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d01d      	beq.n	80065e8 <HAL_TIM_PWM_Start_IT+0x238>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b4:	d018      	beq.n	80065e8 <HAL_TIM_PWM_Start_IT+0x238>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a23      	ldr	r2, [pc, #140]	; (8006648 <HAL_TIM_PWM_Start_IT+0x298>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d013      	beq.n	80065e8 <HAL_TIM_PWM_Start_IT+0x238>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a21      	ldr	r2, [pc, #132]	; (800664c <HAL_TIM_PWM_Start_IT+0x29c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d00e      	beq.n	80065e8 <HAL_TIM_PWM_Start_IT+0x238>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a20      	ldr	r2, [pc, #128]	; (8006650 <HAL_TIM_PWM_Start_IT+0x2a0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d009      	beq.n	80065e8 <HAL_TIM_PWM_Start_IT+0x238>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a17      	ldr	r2, [pc, #92]	; (8006638 <HAL_TIM_PWM_Start_IT+0x288>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d004      	beq.n	80065e8 <HAL_TIM_PWM_Start_IT+0x238>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a16      	ldr	r2, [pc, #88]	; (800663c <HAL_TIM_PWM_Start_IT+0x28c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d115      	bne.n	8006614 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689a      	ldr	r2, [r3, #8]
 80065ee:	4b19      	ldr	r3, [pc, #100]	; (8006654 <HAL_TIM_PWM_Start_IT+0x2a4>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b06      	cmp	r3, #6
 80065f8:	d015      	beq.n	8006626 <HAL_TIM_PWM_Start_IT+0x276>
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006600:	d011      	beq.n	8006626 <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f042 0201 	orr.w	r2, r2, #1
 8006610:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006612:	e008      	b.n	8006626 <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0201 	orr.w	r2, r2, #1
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	e000      	b.n	8006628 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006626:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006628:	7bfb      	ldrb	r3, [r7, #15]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	40012c00 	.word	0x40012c00
 8006638:	40013400 	.word	0x40013400
 800663c:	40014000 	.word	0x40014000
 8006640:	40014400 	.word	0x40014400
 8006644:	40014800 	.word	0x40014800
 8006648:	40000400 	.word	0x40000400
 800664c:	40000800 	.word	0x40000800
 8006650:	40000c00 	.word	0x40000c00
 8006654:	00010007 	.word	0x00010007

08006658 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006662:	2300      	movs	r3, #0
 8006664:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b0c      	cmp	r3, #12
 800666a:	d841      	bhi.n	80066f0 <HAL_TIM_PWM_Stop_IT+0x98>
 800666c:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800666e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006672:	bf00      	nop
 8006674:	080066a9 	.word	0x080066a9
 8006678:	080066f1 	.word	0x080066f1
 800667c:	080066f1 	.word	0x080066f1
 8006680:	080066f1 	.word	0x080066f1
 8006684:	080066bb 	.word	0x080066bb
 8006688:	080066f1 	.word	0x080066f1
 800668c:	080066f1 	.word	0x080066f1
 8006690:	080066f1 	.word	0x080066f1
 8006694:	080066cd 	.word	0x080066cd
 8006698:	080066f1 	.word	0x080066f1
 800669c:	080066f1 	.word	0x080066f1
 80066a0:	080066f1 	.word	0x080066f1
 80066a4:	080066df 	.word	0x080066df
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0202 	bic.w	r2, r2, #2
 80066b6:	60da      	str	r2, [r3, #12]
      break;
 80066b8:	e01d      	b.n	80066f6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0204 	bic.w	r2, r2, #4
 80066c8:	60da      	str	r2, [r3, #12]
      break;
 80066ca:	e014      	b.n	80066f6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0208 	bic.w	r2, r2, #8
 80066da:	60da      	str	r2, [r3, #12]
      break;
 80066dc:	e00b      	b.n	80066f6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0210 	bic.w	r2, r2, #16
 80066ec:	60da      	str	r2, [r3, #12]
      break;
 80066ee:	e002      	b.n	80066f6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	73fb      	strb	r3, [r7, #15]
      break;
 80066f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f040 8081 	bne.w	8006800 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2200      	movs	r2, #0
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fe60 	bl	80073cc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a3e      	ldr	r2, [pc, #248]	; (800680c <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d013      	beq.n	800673e <HAL_TIM_PWM_Stop_IT+0xe6>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a3d      	ldr	r2, [pc, #244]	; (8006810 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d00e      	beq.n	800673e <HAL_TIM_PWM_Stop_IT+0xe6>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a3b      	ldr	r2, [pc, #236]	; (8006814 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d009      	beq.n	800673e <HAL_TIM_PWM_Stop_IT+0xe6>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a3a      	ldr	r2, [pc, #232]	; (8006818 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d004      	beq.n	800673e <HAL_TIM_PWM_Stop_IT+0xe6>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a38      	ldr	r2, [pc, #224]	; (800681c <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d101      	bne.n	8006742 <HAL_TIM_PWM_Stop_IT+0xea>
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <HAL_TIM_PWM_Stop_IT+0xec>
 8006742:	2300      	movs	r3, #0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d017      	beq.n	8006778 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6a1a      	ldr	r2, [r3, #32]
 800674e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006752:	4013      	ands	r3, r2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10f      	bne.n	8006778 <HAL_TIM_PWM_Stop_IT+0x120>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6a1a      	ldr	r2, [r3, #32]
 800675e:	f240 4344 	movw	r3, #1092	; 0x444
 8006762:	4013      	ands	r3, r2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d107      	bne.n	8006778 <HAL_TIM_PWM_Stop_IT+0x120>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006776:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6a1a      	ldr	r2, [r3, #32]
 800677e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006782:	4013      	ands	r3, r2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10f      	bne.n	80067a8 <HAL_TIM_PWM_Stop_IT+0x150>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6a1a      	ldr	r2, [r3, #32]
 800678e:	f240 4344 	movw	r3, #1092	; 0x444
 8006792:	4013      	ands	r3, r2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d107      	bne.n	80067a8 <HAL_TIM_PWM_Stop_IT+0x150>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0201 	bic.w	r2, r2, #1
 80067a6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d104      	bne.n	80067b8 <HAL_TIM_PWM_Stop_IT+0x160>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067b6:	e023      	b.n	8006800 <HAL_TIM_PWM_Stop_IT+0x1a8>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b04      	cmp	r3, #4
 80067bc:	d104      	bne.n	80067c8 <HAL_TIM_PWM_Stop_IT+0x170>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067c6:	e01b      	b.n	8006800 <HAL_TIM_PWM_Stop_IT+0x1a8>
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2b08      	cmp	r3, #8
 80067cc:	d104      	bne.n	80067d8 <HAL_TIM_PWM_Stop_IT+0x180>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067d6:	e013      	b.n	8006800 <HAL_TIM_PWM_Stop_IT+0x1a8>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2b0c      	cmp	r3, #12
 80067dc:	d104      	bne.n	80067e8 <HAL_TIM_PWM_Stop_IT+0x190>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067e6:	e00b      	b.n	8006800 <HAL_TIM_PWM_Stop_IT+0x1a8>
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	2b10      	cmp	r3, #16
 80067ec:	d104      	bne.n	80067f8 <HAL_TIM_PWM_Stop_IT+0x1a0>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067f6:	e003      	b.n	8006800 <HAL_TIM_PWM_Stop_IT+0x1a8>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8006800:	7bfb      	ldrb	r3, [r7, #15]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	40012c00 	.word	0x40012c00
 8006810:	40013400 	.word	0x40013400
 8006814:	40014000 	.word	0x40014000
 8006818:	40014400 	.word	0x40014400
 800681c:	40014800 	.word	0x40014800

08006820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b02      	cmp	r3, #2
 8006834:	d122      	bne.n	800687c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b02      	cmp	r3, #2
 8006842:	d11b      	bne.n	800687c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f06f 0202 	mvn.w	r2, #2
 800684c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	f003 0303 	and.w	r3, r3, #3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fa24 	bl	8006cb0 <HAL_TIM_IC_CaptureCallback>
 8006868:	e005      	b.n	8006876 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fa16 	bl	8006c9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fa27 	bl	8006cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f003 0304 	and.w	r3, r3, #4
 8006886:	2b04      	cmp	r3, #4
 8006888:	d122      	bne.n	80068d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b04      	cmp	r3, #4
 8006896:	d11b      	bne.n	80068d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f06f 0204 	mvn.w	r2, #4
 80068a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2202      	movs	r2, #2
 80068a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f9fa 	bl	8006cb0 <HAL_TIM_IC_CaptureCallback>
 80068bc:	e005      	b.n	80068ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f9ec 	bl	8006c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f9fd 	bl	8006cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f003 0308 	and.w	r3, r3, #8
 80068da:	2b08      	cmp	r3, #8
 80068dc:	d122      	bne.n	8006924 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f003 0308 	and.w	r3, r3, #8
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	d11b      	bne.n	8006924 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f06f 0208 	mvn.w	r2, #8
 80068f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2204      	movs	r2, #4
 80068fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f9d0 	bl	8006cb0 <HAL_TIM_IC_CaptureCallback>
 8006910:	e005      	b.n	800691e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f9c2 	bl	8006c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f9d3 	bl	8006cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f003 0310 	and.w	r3, r3, #16
 800692e:	2b10      	cmp	r3, #16
 8006930:	d122      	bne.n	8006978 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f003 0310 	and.w	r3, r3, #16
 800693c:	2b10      	cmp	r3, #16
 800693e:	d11b      	bne.n	8006978 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f06f 0210 	mvn.w	r2, #16
 8006948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2208      	movs	r2, #8
 800694e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f9a6 	bl	8006cb0 <HAL_TIM_IC_CaptureCallback>
 8006964:	e005      	b.n	8006972 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f998 	bl	8006c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f9a9 	bl	8006cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b01      	cmp	r3, #1
 8006984:	d10e      	bne.n	80069a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b01      	cmp	r3, #1
 8006992:	d107      	bne.n	80069a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f06f 0201 	mvn.w	r2, #1
 800699c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f972 	bl	8006c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ae:	2b80      	cmp	r3, #128	; 0x80
 80069b0:	d10e      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069bc:	2b80      	cmp	r3, #128	; 0x80
 80069be:	d107      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fdb6 	bl	800753c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069de:	d10e      	bne.n	80069fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ea:	2b80      	cmp	r3, #128	; 0x80
 80069ec:	d107      	bne.n	80069fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80069f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fda9 	bl	8007550 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a08:	2b40      	cmp	r3, #64	; 0x40
 8006a0a:	d10e      	bne.n	8006a2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a16:	2b40      	cmp	r3, #64	; 0x40
 8006a18:	d107      	bne.n	8006a2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f957 	bl	8006cd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f003 0320 	and.w	r3, r3, #32
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	d10e      	bne.n	8006a56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f003 0320 	and.w	r3, r3, #32
 8006a42:	2b20      	cmp	r3, #32
 8006a44:	d107      	bne.n	8006a56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f06f 0220 	mvn.w	r2, #32
 8006a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fd69 	bl	8007528 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a56:	bf00      	nop
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
	...

08006a60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d101      	bne.n	8006a7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	e0ff      	b.n	8006c7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b14      	cmp	r3, #20
 8006a8a:	f200 80f0 	bhi.w	8006c6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006a8e:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a94:	08006ae9 	.word	0x08006ae9
 8006a98:	08006c6f 	.word	0x08006c6f
 8006a9c:	08006c6f 	.word	0x08006c6f
 8006aa0:	08006c6f 	.word	0x08006c6f
 8006aa4:	08006b29 	.word	0x08006b29
 8006aa8:	08006c6f 	.word	0x08006c6f
 8006aac:	08006c6f 	.word	0x08006c6f
 8006ab0:	08006c6f 	.word	0x08006c6f
 8006ab4:	08006b6b 	.word	0x08006b6b
 8006ab8:	08006c6f 	.word	0x08006c6f
 8006abc:	08006c6f 	.word	0x08006c6f
 8006ac0:	08006c6f 	.word	0x08006c6f
 8006ac4:	08006bab 	.word	0x08006bab
 8006ac8:	08006c6f 	.word	0x08006c6f
 8006acc:	08006c6f 	.word	0x08006c6f
 8006ad0:	08006c6f 	.word	0x08006c6f
 8006ad4:	08006bed 	.word	0x08006bed
 8006ad8:	08006c6f 	.word	0x08006c6f
 8006adc:	08006c6f 	.word	0x08006c6f
 8006ae0:	08006c6f 	.word	0x08006c6f
 8006ae4:	08006c2d 	.word	0x08006c2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68b9      	ldr	r1, [r7, #8]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 f996 	bl	8006e20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	699a      	ldr	r2, [r3, #24]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f042 0208 	orr.w	r2, r2, #8
 8006b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699a      	ldr	r2, [r3, #24]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0204 	bic.w	r2, r2, #4
 8006b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6999      	ldr	r1, [r3, #24]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	691a      	ldr	r2, [r3, #16]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	430a      	orrs	r2, r1
 8006b24:	619a      	str	r2, [r3, #24]
      break;
 8006b26:	e0a5      	b.n	8006c74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68b9      	ldr	r1, [r7, #8]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 fa06 	bl	8006f40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	699a      	ldr	r2, [r3, #24]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	699a      	ldr	r2, [r3, #24]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6999      	ldr	r1, [r3, #24]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	021a      	lsls	r2, r3, #8
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	430a      	orrs	r2, r1
 8006b66:	619a      	str	r2, [r3, #24]
      break;
 8006b68:	e084      	b.n	8006c74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68b9      	ldr	r1, [r7, #8]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 fa6f 	bl	8007054 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	69da      	ldr	r2, [r3, #28]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f042 0208 	orr.w	r2, r2, #8
 8006b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	69da      	ldr	r2, [r3, #28]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 0204 	bic.w	r2, r2, #4
 8006b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	69d9      	ldr	r1, [r3, #28]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	61da      	str	r2, [r3, #28]
      break;
 8006ba8:	e064      	b.n	8006c74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68b9      	ldr	r1, [r7, #8]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 fad7 	bl	8007164 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	69da      	ldr	r2, [r3, #28]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	69da      	ldr	r2, [r3, #28]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	69d9      	ldr	r1, [r3, #28]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	021a      	lsls	r2, r3, #8
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	61da      	str	r2, [r3, #28]
      break;
 8006bea:	e043      	b.n	8006c74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68b9      	ldr	r1, [r7, #8]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 fb20 	bl	8007238 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f042 0208 	orr.w	r2, r2, #8
 8006c06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f022 0204 	bic.w	r2, r2, #4
 8006c16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	691a      	ldr	r2, [r3, #16]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c2a:	e023      	b.n	8006c74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68b9      	ldr	r1, [r7, #8]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 fb64 	bl	8007300 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	021a      	lsls	r2, r3, #8
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c6c:	e002      	b.n	8006c74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	75fb      	strb	r3, [r7, #23]
      break;
 8006c72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3718      	adds	r7, #24
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop

08006c88 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a40      	ldr	r2, [pc, #256]	; (8006e00 <TIM_Base_SetConfig+0x114>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d013      	beq.n	8006d2c <TIM_Base_SetConfig+0x40>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d0a:	d00f      	beq.n	8006d2c <TIM_Base_SetConfig+0x40>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a3d      	ldr	r2, [pc, #244]	; (8006e04 <TIM_Base_SetConfig+0x118>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d00b      	beq.n	8006d2c <TIM_Base_SetConfig+0x40>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a3c      	ldr	r2, [pc, #240]	; (8006e08 <TIM_Base_SetConfig+0x11c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d007      	beq.n	8006d2c <TIM_Base_SetConfig+0x40>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a3b      	ldr	r2, [pc, #236]	; (8006e0c <TIM_Base_SetConfig+0x120>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d003      	beq.n	8006d2c <TIM_Base_SetConfig+0x40>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a3a      	ldr	r2, [pc, #232]	; (8006e10 <TIM_Base_SetConfig+0x124>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d108      	bne.n	8006d3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a2f      	ldr	r2, [pc, #188]	; (8006e00 <TIM_Base_SetConfig+0x114>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d01f      	beq.n	8006d86 <TIM_Base_SetConfig+0x9a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d4c:	d01b      	beq.n	8006d86 <TIM_Base_SetConfig+0x9a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a2c      	ldr	r2, [pc, #176]	; (8006e04 <TIM_Base_SetConfig+0x118>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d017      	beq.n	8006d86 <TIM_Base_SetConfig+0x9a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a2b      	ldr	r2, [pc, #172]	; (8006e08 <TIM_Base_SetConfig+0x11c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d013      	beq.n	8006d86 <TIM_Base_SetConfig+0x9a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a2a      	ldr	r2, [pc, #168]	; (8006e0c <TIM_Base_SetConfig+0x120>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00f      	beq.n	8006d86 <TIM_Base_SetConfig+0x9a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a29      	ldr	r2, [pc, #164]	; (8006e10 <TIM_Base_SetConfig+0x124>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d00b      	beq.n	8006d86 <TIM_Base_SetConfig+0x9a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a28      	ldr	r2, [pc, #160]	; (8006e14 <TIM_Base_SetConfig+0x128>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d007      	beq.n	8006d86 <TIM_Base_SetConfig+0x9a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a27      	ldr	r2, [pc, #156]	; (8006e18 <TIM_Base_SetConfig+0x12c>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d003      	beq.n	8006d86 <TIM_Base_SetConfig+0x9a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a26      	ldr	r2, [pc, #152]	; (8006e1c <TIM_Base_SetConfig+0x130>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d108      	bne.n	8006d98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a10      	ldr	r2, [pc, #64]	; (8006e00 <TIM_Base_SetConfig+0x114>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d00f      	beq.n	8006de4 <TIM_Base_SetConfig+0xf8>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a12      	ldr	r2, [pc, #72]	; (8006e10 <TIM_Base_SetConfig+0x124>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d00b      	beq.n	8006de4 <TIM_Base_SetConfig+0xf8>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a11      	ldr	r2, [pc, #68]	; (8006e14 <TIM_Base_SetConfig+0x128>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d007      	beq.n	8006de4 <TIM_Base_SetConfig+0xf8>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a10      	ldr	r2, [pc, #64]	; (8006e18 <TIM_Base_SetConfig+0x12c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d003      	beq.n	8006de4 <TIM_Base_SetConfig+0xf8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a0f      	ldr	r2, [pc, #60]	; (8006e1c <TIM_Base_SetConfig+0x130>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d103      	bne.n	8006dec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	691a      	ldr	r2, [r3, #16]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	615a      	str	r2, [r3, #20]
}
 8006df2:	bf00      	nop
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	40012c00 	.word	0x40012c00
 8006e04:	40000400 	.word	0x40000400
 8006e08:	40000800 	.word	0x40000800
 8006e0c:	40000c00 	.word	0x40000c00
 8006e10:	40013400 	.word	0x40013400
 8006e14:	40014000 	.word	0x40014000
 8006e18:	40014400 	.word	0x40014400
 8006e1c:	40014800 	.word	0x40014800

08006e20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b087      	sub	sp, #28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	f023 0201 	bic.w	r2, r3, #1
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 0303 	bic.w	r3, r3, #3
 8006e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f023 0302 	bic.w	r3, r3, #2
 8006e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a2c      	ldr	r2, [pc, #176]	; (8006f2c <TIM_OC1_SetConfig+0x10c>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d00f      	beq.n	8006ea0 <TIM_OC1_SetConfig+0x80>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a2b      	ldr	r2, [pc, #172]	; (8006f30 <TIM_OC1_SetConfig+0x110>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d00b      	beq.n	8006ea0 <TIM_OC1_SetConfig+0x80>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a2a      	ldr	r2, [pc, #168]	; (8006f34 <TIM_OC1_SetConfig+0x114>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d007      	beq.n	8006ea0 <TIM_OC1_SetConfig+0x80>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a29      	ldr	r2, [pc, #164]	; (8006f38 <TIM_OC1_SetConfig+0x118>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d003      	beq.n	8006ea0 <TIM_OC1_SetConfig+0x80>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a28      	ldr	r2, [pc, #160]	; (8006f3c <TIM_OC1_SetConfig+0x11c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d10c      	bne.n	8006eba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f023 0308 	bic.w	r3, r3, #8
 8006ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f023 0304 	bic.w	r3, r3, #4
 8006eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a1b      	ldr	r2, [pc, #108]	; (8006f2c <TIM_OC1_SetConfig+0x10c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d00f      	beq.n	8006ee2 <TIM_OC1_SetConfig+0xc2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a1a      	ldr	r2, [pc, #104]	; (8006f30 <TIM_OC1_SetConfig+0x110>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00b      	beq.n	8006ee2 <TIM_OC1_SetConfig+0xc2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a19      	ldr	r2, [pc, #100]	; (8006f34 <TIM_OC1_SetConfig+0x114>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d007      	beq.n	8006ee2 <TIM_OC1_SetConfig+0xc2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a18      	ldr	r2, [pc, #96]	; (8006f38 <TIM_OC1_SetConfig+0x118>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d003      	beq.n	8006ee2 <TIM_OC1_SetConfig+0xc2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a17      	ldr	r2, [pc, #92]	; (8006f3c <TIM_OC1_SetConfig+0x11c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d111      	bne.n	8006f06 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	621a      	str	r2, [r3, #32]
}
 8006f20:	bf00      	nop
 8006f22:	371c      	adds	r7, #28
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	40012c00 	.word	0x40012c00
 8006f30:	40013400 	.word	0x40013400
 8006f34:	40014000 	.word	0x40014000
 8006f38:	40014400 	.word	0x40014400
 8006f3c:	40014800 	.word	0x40014800

08006f40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	f023 0210 	bic.w	r2, r3, #16
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	021b      	lsls	r3, r3, #8
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f023 0320 	bic.w	r3, r3, #32
 8006f8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	011b      	lsls	r3, r3, #4
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a28      	ldr	r2, [pc, #160]	; (8007040 <TIM_OC2_SetConfig+0x100>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d003      	beq.n	8006fac <TIM_OC2_SetConfig+0x6c>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a27      	ldr	r2, [pc, #156]	; (8007044 <TIM_OC2_SetConfig+0x104>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d10d      	bne.n	8006fc8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	011b      	lsls	r3, r3, #4
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a1d      	ldr	r2, [pc, #116]	; (8007040 <TIM_OC2_SetConfig+0x100>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d00f      	beq.n	8006ff0 <TIM_OC2_SetConfig+0xb0>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a1c      	ldr	r2, [pc, #112]	; (8007044 <TIM_OC2_SetConfig+0x104>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d00b      	beq.n	8006ff0 <TIM_OC2_SetConfig+0xb0>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a1b      	ldr	r2, [pc, #108]	; (8007048 <TIM_OC2_SetConfig+0x108>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d007      	beq.n	8006ff0 <TIM_OC2_SetConfig+0xb0>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a1a      	ldr	r2, [pc, #104]	; (800704c <TIM_OC2_SetConfig+0x10c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d003      	beq.n	8006ff0 <TIM_OC2_SetConfig+0xb0>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a19      	ldr	r2, [pc, #100]	; (8007050 <TIM_OC2_SetConfig+0x110>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d113      	bne.n	8007018 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ff6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	4313      	orrs	r3, r2
 800700a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	4313      	orrs	r3, r2
 8007016:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	621a      	str	r2, [r3, #32]
}
 8007032:	bf00      	nop
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	40012c00 	.word	0x40012c00
 8007044:	40013400 	.word	0x40013400
 8007048:	40014000 	.word	0x40014000
 800704c:	40014400 	.word	0x40014400
 8007050:	40014800 	.word	0x40014800

08007054 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 0303 	bic.w	r3, r3, #3
 800708e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	4313      	orrs	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	021b      	lsls	r3, r3, #8
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a27      	ldr	r2, [pc, #156]	; (8007150 <TIM_OC3_SetConfig+0xfc>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d003      	beq.n	80070be <TIM_OC3_SetConfig+0x6a>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a26      	ldr	r2, [pc, #152]	; (8007154 <TIM_OC3_SetConfig+0x100>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d10d      	bne.n	80070da <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	021b      	lsls	r3, r3, #8
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a1c      	ldr	r2, [pc, #112]	; (8007150 <TIM_OC3_SetConfig+0xfc>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d00f      	beq.n	8007102 <TIM_OC3_SetConfig+0xae>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a1b      	ldr	r2, [pc, #108]	; (8007154 <TIM_OC3_SetConfig+0x100>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d00b      	beq.n	8007102 <TIM_OC3_SetConfig+0xae>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a1a      	ldr	r2, [pc, #104]	; (8007158 <TIM_OC3_SetConfig+0x104>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d007      	beq.n	8007102 <TIM_OC3_SetConfig+0xae>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a19      	ldr	r2, [pc, #100]	; (800715c <TIM_OC3_SetConfig+0x108>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d003      	beq.n	8007102 <TIM_OC3_SetConfig+0xae>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a18      	ldr	r2, [pc, #96]	; (8007160 <TIM_OC3_SetConfig+0x10c>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d113      	bne.n	800712a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	011b      	lsls	r3, r3, #4
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	4313      	orrs	r3, r2
 800711c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	011b      	lsls	r3, r3, #4
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4313      	orrs	r3, r2
 8007128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	621a      	str	r2, [r3, #32]
}
 8007144:	bf00      	nop
 8007146:	371c      	adds	r7, #28
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	40012c00 	.word	0x40012c00
 8007154:	40013400 	.word	0x40013400
 8007158:	40014000 	.word	0x40014000
 800715c:	40014400 	.word	0x40014400
 8007160:	40014800 	.word	0x40014800

08007164 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800719e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	021b      	lsls	r3, r3, #8
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	031b      	lsls	r3, r3, #12
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	4313      	orrs	r3, r2
 80071be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a18      	ldr	r2, [pc, #96]	; (8007224 <TIM_OC4_SetConfig+0xc0>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d00f      	beq.n	80071e8 <TIM_OC4_SetConfig+0x84>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a17      	ldr	r2, [pc, #92]	; (8007228 <TIM_OC4_SetConfig+0xc4>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d00b      	beq.n	80071e8 <TIM_OC4_SetConfig+0x84>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a16      	ldr	r2, [pc, #88]	; (800722c <TIM_OC4_SetConfig+0xc8>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d007      	beq.n	80071e8 <TIM_OC4_SetConfig+0x84>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a15      	ldr	r2, [pc, #84]	; (8007230 <TIM_OC4_SetConfig+0xcc>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d003      	beq.n	80071e8 <TIM_OC4_SetConfig+0x84>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a14      	ldr	r2, [pc, #80]	; (8007234 <TIM_OC4_SetConfig+0xd0>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d109      	bne.n	80071fc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	019b      	lsls	r3, r3, #6
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	621a      	str	r2, [r3, #32]
}
 8007216:	bf00      	nop
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	40012c00 	.word	0x40012c00
 8007228:	40013400 	.word	0x40013400
 800722c:	40014000 	.word	0x40014000
 8007230:	40014400 	.word	0x40014400
 8007234:	40014800 	.word	0x40014800

08007238 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800726a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	4313      	orrs	r3, r2
 8007274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800727c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	041b      	lsls	r3, r3, #16
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	4313      	orrs	r3, r2
 8007288:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a17      	ldr	r2, [pc, #92]	; (80072ec <TIM_OC5_SetConfig+0xb4>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00f      	beq.n	80072b2 <TIM_OC5_SetConfig+0x7a>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a16      	ldr	r2, [pc, #88]	; (80072f0 <TIM_OC5_SetConfig+0xb8>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00b      	beq.n	80072b2 <TIM_OC5_SetConfig+0x7a>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a15      	ldr	r2, [pc, #84]	; (80072f4 <TIM_OC5_SetConfig+0xbc>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d007      	beq.n	80072b2 <TIM_OC5_SetConfig+0x7a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a14      	ldr	r2, [pc, #80]	; (80072f8 <TIM_OC5_SetConfig+0xc0>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d003      	beq.n	80072b2 <TIM_OC5_SetConfig+0x7a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a13      	ldr	r2, [pc, #76]	; (80072fc <TIM_OC5_SetConfig+0xc4>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d109      	bne.n	80072c6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	021b      	lsls	r3, r3, #8
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	621a      	str	r2, [r3, #32]
}
 80072e0:	bf00      	nop
 80072e2:	371c      	adds	r7, #28
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	40012c00 	.word	0x40012c00
 80072f0:	40013400 	.word	0x40013400
 80072f4:	40014000 	.word	0x40014000
 80072f8:	40014400 	.word	0x40014400
 80072fc:	40014800 	.word	0x40014800

08007300 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007300:	b480      	push	{r7}
 8007302:	b087      	sub	sp, #28
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800732e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	021b      	lsls	r3, r3, #8
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	4313      	orrs	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	051b      	lsls	r3, r3, #20
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	4313      	orrs	r3, r2
 8007352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a18      	ldr	r2, [pc, #96]	; (80073b8 <TIM_OC6_SetConfig+0xb8>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d00f      	beq.n	800737c <TIM_OC6_SetConfig+0x7c>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a17      	ldr	r2, [pc, #92]	; (80073bc <TIM_OC6_SetConfig+0xbc>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d00b      	beq.n	800737c <TIM_OC6_SetConfig+0x7c>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a16      	ldr	r2, [pc, #88]	; (80073c0 <TIM_OC6_SetConfig+0xc0>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d007      	beq.n	800737c <TIM_OC6_SetConfig+0x7c>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a15      	ldr	r2, [pc, #84]	; (80073c4 <TIM_OC6_SetConfig+0xc4>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d003      	beq.n	800737c <TIM_OC6_SetConfig+0x7c>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a14      	ldr	r2, [pc, #80]	; (80073c8 <TIM_OC6_SetConfig+0xc8>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d109      	bne.n	8007390 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007382:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	029b      	lsls	r3, r3, #10
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	4313      	orrs	r3, r2
 800738e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	621a      	str	r2, [r3, #32]
}
 80073aa:	bf00      	nop
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	40012c00 	.word	0x40012c00
 80073bc:	40013400 	.word	0x40013400
 80073c0:	40014000 	.word	0x40014000
 80073c4:	40014400 	.word	0x40014400
 80073c8:	40014800 	.word	0x40014800

080073cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f003 031f 	and.w	r3, r3, #31
 80073de:	2201      	movs	r2, #1
 80073e0:	fa02 f303 	lsl.w	r3, r2, r3
 80073e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6a1a      	ldr	r2, [r3, #32]
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	43db      	mvns	r3, r3
 80073ee:	401a      	ands	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6a1a      	ldr	r2, [r3, #32]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	f003 031f 	and.w	r3, r3, #31
 80073fe:	6879      	ldr	r1, [r7, #4]
 8007400:	fa01 f303 	lsl.w	r3, r1, r3
 8007404:	431a      	orrs	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	621a      	str	r2, [r3, #32]
}
 800740a:	bf00      	nop
 800740c:	371c      	adds	r7, #28
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
	...

08007418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007428:	2b01      	cmp	r3, #1
 800742a:	d101      	bne.n	8007430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800742c:	2302      	movs	r3, #2
 800742e:	e068      	b.n	8007502 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2202      	movs	r2, #2
 800743c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a2e      	ldr	r2, [pc, #184]	; (8007510 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d004      	beq.n	8007464 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a2d      	ldr	r2, [pc, #180]	; (8007514 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d108      	bne.n	8007476 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800746a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	4313      	orrs	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	4313      	orrs	r3, r2
 8007486:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a1e      	ldr	r2, [pc, #120]	; (8007510 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d01d      	beq.n	80074d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a2:	d018      	beq.n	80074d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a1b      	ldr	r2, [pc, #108]	; (8007518 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d013      	beq.n	80074d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a1a      	ldr	r2, [pc, #104]	; (800751c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d00e      	beq.n	80074d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a18      	ldr	r2, [pc, #96]	; (8007520 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d009      	beq.n	80074d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a13      	ldr	r2, [pc, #76]	; (8007514 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d004      	beq.n	80074d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a14      	ldr	r2, [pc, #80]	; (8007524 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d10c      	bne.n	80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3714      	adds	r7, #20
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	40012c00 	.word	0x40012c00
 8007514:	40013400 	.word	0x40013400
 8007518:	40000400 	.word	0x40000400
 800751c:	40000800 	.word	0x40000800
 8007520:	40000c00 	.word	0x40000c00
 8007524:	40014000 	.word	0x40014000

08007528 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e040      	b.n	80075f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800757a:	2b00      	cmp	r3, #0
 800757c:	d106      	bne.n	800758c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7fb fc32 	bl	8002df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2224      	movs	r2, #36	; 0x24
 8007590:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 0201 	bic.w	r2, r2, #1
 80075a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fc94 	bl	8007ed0 <UART_SetConfig>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d101      	bne.n	80075b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e022      	b.n	80075f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d002      	beq.n	80075c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 ff40 	bl	8008440 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689a      	ldr	r2, [r3, #8]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f042 0201 	orr.w	r2, r2, #1
 80075ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 ffc7 	bl	8008584 <UART_CheckIdleState>
 80075f6:	4603      	mov	r3, r0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b08a      	sub	sp, #40	; 0x28
 8007604:	af02      	add	r7, sp, #8
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	603b      	str	r3, [r7, #0]
 800760c:	4613      	mov	r3, r2
 800760e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007614:	2b20      	cmp	r3, #32
 8007616:	f040 8082 	bne.w	800771e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <HAL_UART_Transmit+0x26>
 8007620:	88fb      	ldrh	r3, [r7, #6]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e07a      	b.n	8007720 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007630:	2b01      	cmp	r3, #1
 8007632:	d101      	bne.n	8007638 <HAL_UART_Transmit+0x38>
 8007634:	2302      	movs	r3, #2
 8007636:	e073      	b.n	8007720 <HAL_UART_Transmit+0x120>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2221      	movs	r2, #33	; 0x21
 800764c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800764e:	f7fb fdd3 	bl	80031f8 <HAL_GetTick>
 8007652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	88fa      	ldrh	r2, [r7, #6]
 8007658:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	88fa      	ldrh	r2, [r7, #6]
 8007660:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800766c:	d108      	bne.n	8007680 <HAL_UART_Transmit+0x80>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d104      	bne.n	8007680 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007676:	2300      	movs	r3, #0
 8007678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	61bb      	str	r3, [r7, #24]
 800767e:	e003      	b.n	8007688 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007684:	2300      	movs	r3, #0
 8007686:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007690:	e02d      	b.n	80076ee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	2200      	movs	r2, #0
 800769a:	2180      	movs	r1, #128	; 0x80
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 ffba 	bl	8008616 <UART_WaitOnFlagUntilTimeout>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e039      	b.n	8007720 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10b      	bne.n	80076ca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	881a      	ldrh	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076be:	b292      	uxth	r2, r2
 80076c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	3302      	adds	r3, #2
 80076c6:	61bb      	str	r3, [r7, #24]
 80076c8:	e008      	b.n	80076dc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	781a      	ldrb	r2, [r3, #0]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	b292      	uxth	r2, r2
 80076d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	3301      	adds	r3, #1
 80076da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	3b01      	subs	r3, #1
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1cb      	bne.n	8007692 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2200      	movs	r2, #0
 8007702:	2140      	movs	r1, #64	; 0x40
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 ff86 	bl	8008616 <UART_WaitOnFlagUntilTimeout>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e005      	b.n	8007720 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2220      	movs	r2, #32
 8007718:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	e000      	b.n	8007720 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800771e:	2302      	movs	r3, #2
  }
}
 8007720:	4618      	mov	r0, r3
 8007722:	3720      	adds	r7, #32
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b08a      	sub	sp, #40	; 0x28
 800772c:	af02      	add	r7, sp, #8
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	603b      	str	r3, [r7, #0]
 8007734:	4613      	mov	r3, r2
 8007736:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800773c:	2b20      	cmp	r3, #32
 800773e:	f040 80bf 	bne.w	80078c0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <HAL_UART_Receive+0x26>
 8007748:	88fb      	ldrh	r3, [r7, #6]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e0b7      	b.n	80078c2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007758:	2b01      	cmp	r3, #1
 800775a:	d101      	bne.n	8007760 <HAL_UART_Receive+0x38>
 800775c:	2302      	movs	r3, #2
 800775e:	e0b0      	b.n	80078c2 <HAL_UART_Receive+0x19a>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2222      	movs	r2, #34	; 0x22
 8007774:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800777c:	f7fb fd3c 	bl	80031f8 <HAL_GetTick>
 8007780:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	88fa      	ldrh	r2, [r7, #6]
 8007786:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	88fa      	ldrh	r2, [r7, #6]
 800778e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800779a:	d10e      	bne.n	80077ba <HAL_UART_Receive+0x92>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d105      	bne.n	80077b0 <HAL_UART_Receive+0x88>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80077aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077ae:	e02d      	b.n	800780c <HAL_UART_Receive+0xe4>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	22ff      	movs	r2, #255	; 0xff
 80077b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077b8:	e028      	b.n	800780c <HAL_UART_Receive+0xe4>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10d      	bne.n	80077de <HAL_UART_Receive+0xb6>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d104      	bne.n	80077d4 <HAL_UART_Receive+0xac>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	22ff      	movs	r2, #255	; 0xff
 80077ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077d2:	e01b      	b.n	800780c <HAL_UART_Receive+0xe4>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	227f      	movs	r2, #127	; 0x7f
 80077d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077dc:	e016      	b.n	800780c <HAL_UART_Receive+0xe4>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077e6:	d10d      	bne.n	8007804 <HAL_UART_Receive+0xdc>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d104      	bne.n	80077fa <HAL_UART_Receive+0xd2>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	227f      	movs	r2, #127	; 0x7f
 80077f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077f8:	e008      	b.n	800780c <HAL_UART_Receive+0xe4>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	223f      	movs	r2, #63	; 0x3f
 80077fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007802:	e003      	b.n	800780c <HAL_UART_Receive+0xe4>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007812:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800781c:	d108      	bne.n	8007830 <HAL_UART_Receive+0x108>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d104      	bne.n	8007830 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8007826:	2300      	movs	r3, #0
 8007828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	61bb      	str	r3, [r7, #24]
 800782e:	e003      	b.n	8007838 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007834:	2300      	movs	r3, #0
 8007836:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007840:	e033      	b.n	80078aa <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2200      	movs	r2, #0
 800784a:	2120      	movs	r1, #32
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 fee2 	bl	8008616 <UART_WaitOnFlagUntilTimeout>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e032      	b.n	80078c2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10c      	bne.n	800787c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007868:	b29a      	uxth	r2, r3
 800786a:	8a7b      	ldrh	r3, [r7, #18]
 800786c:	4013      	ands	r3, r2
 800786e:	b29a      	uxth	r2, r3
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	3302      	adds	r3, #2
 8007878:	61bb      	str	r3, [r7, #24]
 800787a:	e00d      	b.n	8007898 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007882:	b29b      	uxth	r3, r3
 8007884:	b2da      	uxtb	r2, r3
 8007886:	8a7b      	ldrh	r3, [r7, #18]
 8007888:	b2db      	uxtb	r3, r3
 800788a:	4013      	ands	r3, r2
 800788c:	b2da      	uxtb	r2, r3
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	3301      	adds	r3, #1
 8007896:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800789e:	b29b      	uxth	r3, r3
 80078a0:	3b01      	subs	r3, #1
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1c5      	bne.n	8007842 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2220      	movs	r2, #32
 80078ba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	e000      	b.n	80078c2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80078c0:	2302      	movs	r3, #2
  }
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3720      	adds	r7, #32
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b0ba      	sub	sp, #232	; 0xe8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80078f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80078fa:	4013      	ands	r3, r2
 80078fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007904:	2b00      	cmp	r3, #0
 8007906:	d115      	bne.n	8007934 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800790c:	f003 0320 	and.w	r3, r3, #32
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00f      	beq.n	8007934 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007918:	f003 0320 	and.w	r3, r3, #32
 800791c:	2b00      	cmp	r3, #0
 800791e:	d009      	beq.n	8007934 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 82a6 	beq.w	8007e76 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	4798      	blx	r3
      }
      return;
 8007932:	e2a0      	b.n	8007e76 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007934:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 8117 	beq.w	8007b6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800793e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	2b00      	cmp	r3, #0
 8007948:	d106      	bne.n	8007958 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800794a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800794e:	4b85      	ldr	r3, [pc, #532]	; (8007b64 <HAL_UART_IRQHandler+0x298>)
 8007950:	4013      	ands	r3, r2
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 810a 	beq.w	8007b6c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b00      	cmp	r3, #0
 8007962:	d011      	beq.n	8007988 <HAL_UART_IRQHandler+0xbc>
 8007964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00b      	beq.n	8007988 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2201      	movs	r2, #1
 8007976:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800797e:	f043 0201 	orr.w	r2, r3, #1
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d011      	beq.n	80079b8 <HAL_UART_IRQHandler+0xec>
 8007994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00b      	beq.n	80079b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2202      	movs	r2, #2
 80079a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079ae:	f043 0204 	orr.w	r2, r3, #4
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d011      	beq.n	80079e8 <HAL_UART_IRQHandler+0x11c>
 80079c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00b      	beq.n	80079e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2204      	movs	r2, #4
 80079d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079de:	f043 0202 	orr.w	r2, r3, #2
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ec:	f003 0308 	and.w	r3, r3, #8
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d017      	beq.n	8007a24 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079f8:	f003 0320 	and.w	r3, r3, #32
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d105      	bne.n	8007a0c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00b      	beq.n	8007a24 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2208      	movs	r2, #8
 8007a12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a1a:	f043 0208 	orr.w	r2, r3, #8
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d012      	beq.n	8007a56 <HAL_UART_IRQHandler+0x18a>
 8007a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00c      	beq.n	8007a56 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a4c:	f043 0220 	orr.w	r2, r3, #32
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 820c 	beq.w	8007e7a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a66:	f003 0320 	and.w	r3, r3, #32
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00d      	beq.n	8007a8a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d007      	beq.n	8007a8a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a9e:	2b40      	cmp	r3, #64	; 0x40
 8007aa0:	d005      	beq.n	8007aae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d04f      	beq.n	8007b4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fe75 	bl	800879e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007abe:	2b40      	cmp	r3, #64	; 0x40
 8007ac0:	d141      	bne.n	8007b46 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3308      	adds	r3, #8
 8007ac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3308      	adds	r3, #8
 8007aea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007aee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007af2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007afa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1d9      	bne.n	8007ac2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d013      	beq.n	8007b3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b1a:	4a13      	ldr	r2, [pc, #76]	; (8007b68 <HAL_UART_IRQHandler+0x29c>)
 8007b1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fb fcf5 	bl	8003512 <HAL_DMA_Abort_IT>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d017      	beq.n	8007b5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007b38:	4610      	mov	r0, r2
 8007b3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b3c:	e00f      	b.n	8007b5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f9b0 	bl	8007ea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b44:	e00b      	b.n	8007b5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f9ac 	bl	8007ea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b4c:	e007      	b.n	8007b5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f9a8 	bl	8007ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007b5c:	e18d      	b.n	8007e7a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b5e:	bf00      	nop
    return;
 8007b60:	e18b      	b.n	8007e7a <HAL_UART_IRQHandler+0x5ae>
 8007b62:	bf00      	nop
 8007b64:	04000120 	.word	0x04000120
 8007b68:	08008865 	.word	0x08008865

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	f040 8146 	bne.w	8007e02 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b7a:	f003 0310 	and.w	r3, r3, #16
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 813f 	beq.w	8007e02 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b88:	f003 0310 	and.w	r3, r3, #16
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 8138 	beq.w	8007e02 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2210      	movs	r2, #16
 8007b98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba4:	2b40      	cmp	r3, #64	; 0x40
 8007ba6:	f040 80b4 	bne.w	8007d12 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007bb6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 815f 	beq.w	8007e7e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007bc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	f080 8157 	bcs.w	8007e7e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0320 	and.w	r3, r3, #32
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f040 8085 	bne.w	8007cf6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bf8:	e853 3f00 	ldrex	r3, [r3]
 8007bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	461a      	mov	r2, r3
 8007c12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c1a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1da      	bne.n	8007bec <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	3308      	adds	r3, #8
 8007c3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c40:	e853 3f00 	ldrex	r3, [r3]
 8007c44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c48:	f023 0301 	bic.w	r3, r3, #1
 8007c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3308      	adds	r3, #8
 8007c56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c66:	e841 2300 	strex	r3, r2, [r1]
 8007c6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1e1      	bne.n	8007c36 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3308      	adds	r3, #8
 8007c78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c7c:	e853 3f00 	ldrex	r3, [r3]
 8007c80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3308      	adds	r3, #8
 8007c92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c9e:	e841 2300 	strex	r3, r2, [r1]
 8007ca2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1e3      	bne.n	8007c72 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2220      	movs	r2, #32
 8007cae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cbe:	e853 3f00 	ldrex	r3, [r3]
 8007cc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cc6:	f023 0310 	bic.w	r3, r3, #16
 8007cca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cda:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ce0:	e841 2300 	strex	r3, r2, [r1]
 8007ce4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1e4      	bne.n	8007cb6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fb fbd0 	bl	8003496 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f8d4 	bl	8007eb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d10:	e0b5      	b.n	8007e7e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 80a7 	beq.w	8007e82 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007d34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 80a2 	beq.w	8007e82 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d46:	e853 3f00 	ldrex	r3, [r3]
 8007d4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d60:	647b      	str	r3, [r7, #68]	; 0x44
 8007d62:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d68:	e841 2300 	strex	r3, r2, [r1]
 8007d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1e4      	bne.n	8007d3e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	3308      	adds	r3, #8
 8007d7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	e853 3f00 	ldrex	r3, [r3]
 8007d82:	623b      	str	r3, [r7, #32]
   return(result);
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	f023 0301 	bic.w	r3, r3, #1
 8007d8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3308      	adds	r3, #8
 8007d94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d98:	633a      	str	r2, [r7, #48]	; 0x30
 8007d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007da0:	e841 2300 	strex	r3, r2, [r1]
 8007da4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1e3      	bne.n	8007d74 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2220      	movs	r2, #32
 8007db0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	e853 3f00 	ldrex	r3, [r3]
 8007dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f023 0310 	bic.w	r3, r3, #16
 8007dd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007de0:	61fb      	str	r3, [r7, #28]
 8007de2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de4:	69b9      	ldr	r1, [r7, #24]
 8007de6:	69fa      	ldr	r2, [r7, #28]
 8007de8:	e841 2300 	strex	r3, r2, [r1]
 8007dec:	617b      	str	r3, [r7, #20]
   return(result);
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1e4      	bne.n	8007dbe <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007df4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f85c 	bl	8007eb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e00:	e03f      	b.n	8007e82 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00e      	beq.n	8007e2c <HAL_UART_IRQHandler+0x560>
 8007e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d008      	beq.n	8007e2c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fd5d 	bl	80088e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e2a:	e02d      	b.n	8007e88 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00e      	beq.n	8007e56 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d008      	beq.n	8007e56 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d01c      	beq.n	8007e86 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	4798      	blx	r3
    }
    return;
 8007e54:	e017      	b.n	8007e86 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d012      	beq.n	8007e88 <HAL_UART_IRQHandler+0x5bc>
 8007e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00c      	beq.n	8007e88 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fd0e 	bl	8008890 <UART_EndTransmit_IT>
    return;
 8007e74:	e008      	b.n	8007e88 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007e76:	bf00      	nop
 8007e78:	e006      	b.n	8007e88 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007e7a:	bf00      	nop
 8007e7c:	e004      	b.n	8007e88 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007e7e:	bf00      	nop
 8007e80:	e002      	b.n	8007e88 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007e82:	bf00      	nop
 8007e84:	e000      	b.n	8007e88 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007e86:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007e88:	37e8      	adds	r7, #232	; 0xe8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop

08007e90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ed4:	b08a      	sub	sp, #40	; 0x28
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	689a      	ldr	r2, [r3, #8]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	431a      	orrs	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	69db      	ldr	r3, [r3, #28]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	4ba4      	ldr	r3, [pc, #656]	; (8008190 <UART_SetConfig+0x2c0>)
 8007f00:	4013      	ands	r3, r2
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	6812      	ldr	r2, [r2, #0]
 8007f06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f08:	430b      	orrs	r3, r1
 8007f0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	68da      	ldr	r2, [r3, #12]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a99      	ldr	r2, [pc, #612]	; (8008194 <UART_SetConfig+0x2c4>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d004      	beq.n	8007f3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a90      	ldr	r2, [pc, #576]	; (8008198 <UART_SetConfig+0x2c8>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d126      	bne.n	8007fa8 <UART_SetConfig+0xd8>
 8007f5a:	4b90      	ldr	r3, [pc, #576]	; (800819c <UART_SetConfig+0x2cc>)
 8007f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f60:	f003 0303 	and.w	r3, r3, #3
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	d81b      	bhi.n	8007fa0 <UART_SetConfig+0xd0>
 8007f68:	a201      	add	r2, pc, #4	; (adr r2, 8007f70 <UART_SetConfig+0xa0>)
 8007f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6e:	bf00      	nop
 8007f70:	08007f81 	.word	0x08007f81
 8007f74:	08007f91 	.word	0x08007f91
 8007f78:	08007f89 	.word	0x08007f89
 8007f7c:	08007f99 	.word	0x08007f99
 8007f80:	2301      	movs	r3, #1
 8007f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f86:	e116      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8007f88:	2302      	movs	r3, #2
 8007f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f8e:	e112      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8007f90:	2304      	movs	r3, #4
 8007f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f96:	e10e      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8007f98:	2308      	movs	r3, #8
 8007f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f9e:	e10a      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8007fa0:	2310      	movs	r3, #16
 8007fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fa6:	e106      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a7c      	ldr	r2, [pc, #496]	; (80081a0 <UART_SetConfig+0x2d0>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d138      	bne.n	8008024 <UART_SetConfig+0x154>
 8007fb2:	4b7a      	ldr	r3, [pc, #488]	; (800819c <UART_SetConfig+0x2cc>)
 8007fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb8:	f003 030c 	and.w	r3, r3, #12
 8007fbc:	2b0c      	cmp	r3, #12
 8007fbe:	d82d      	bhi.n	800801c <UART_SetConfig+0x14c>
 8007fc0:	a201      	add	r2, pc, #4	; (adr r2, 8007fc8 <UART_SetConfig+0xf8>)
 8007fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc6:	bf00      	nop
 8007fc8:	08007ffd 	.word	0x08007ffd
 8007fcc:	0800801d 	.word	0x0800801d
 8007fd0:	0800801d 	.word	0x0800801d
 8007fd4:	0800801d 	.word	0x0800801d
 8007fd8:	0800800d 	.word	0x0800800d
 8007fdc:	0800801d 	.word	0x0800801d
 8007fe0:	0800801d 	.word	0x0800801d
 8007fe4:	0800801d 	.word	0x0800801d
 8007fe8:	08008005 	.word	0x08008005
 8007fec:	0800801d 	.word	0x0800801d
 8007ff0:	0800801d 	.word	0x0800801d
 8007ff4:	0800801d 	.word	0x0800801d
 8007ff8:	08008015 	.word	0x08008015
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008002:	e0d8      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008004:	2302      	movs	r3, #2
 8008006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800800a:	e0d4      	b.n	80081b6 <UART_SetConfig+0x2e6>
 800800c:	2304      	movs	r3, #4
 800800e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008012:	e0d0      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008014:	2308      	movs	r3, #8
 8008016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800801a:	e0cc      	b.n	80081b6 <UART_SetConfig+0x2e6>
 800801c:	2310      	movs	r3, #16
 800801e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008022:	e0c8      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a5e      	ldr	r2, [pc, #376]	; (80081a4 <UART_SetConfig+0x2d4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d125      	bne.n	800807a <UART_SetConfig+0x1aa>
 800802e:	4b5b      	ldr	r3, [pc, #364]	; (800819c <UART_SetConfig+0x2cc>)
 8008030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008034:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008038:	2b30      	cmp	r3, #48	; 0x30
 800803a:	d016      	beq.n	800806a <UART_SetConfig+0x19a>
 800803c:	2b30      	cmp	r3, #48	; 0x30
 800803e:	d818      	bhi.n	8008072 <UART_SetConfig+0x1a2>
 8008040:	2b20      	cmp	r3, #32
 8008042:	d00a      	beq.n	800805a <UART_SetConfig+0x18a>
 8008044:	2b20      	cmp	r3, #32
 8008046:	d814      	bhi.n	8008072 <UART_SetConfig+0x1a2>
 8008048:	2b00      	cmp	r3, #0
 800804a:	d002      	beq.n	8008052 <UART_SetConfig+0x182>
 800804c:	2b10      	cmp	r3, #16
 800804e:	d008      	beq.n	8008062 <UART_SetConfig+0x192>
 8008050:	e00f      	b.n	8008072 <UART_SetConfig+0x1a2>
 8008052:	2300      	movs	r3, #0
 8008054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008058:	e0ad      	b.n	80081b6 <UART_SetConfig+0x2e6>
 800805a:	2302      	movs	r3, #2
 800805c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008060:	e0a9      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008062:	2304      	movs	r3, #4
 8008064:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008068:	e0a5      	b.n	80081b6 <UART_SetConfig+0x2e6>
 800806a:	2308      	movs	r3, #8
 800806c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008070:	e0a1      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008072:	2310      	movs	r3, #16
 8008074:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008078:	e09d      	b.n	80081b6 <UART_SetConfig+0x2e6>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a4a      	ldr	r2, [pc, #296]	; (80081a8 <UART_SetConfig+0x2d8>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d125      	bne.n	80080d0 <UART_SetConfig+0x200>
 8008084:	4b45      	ldr	r3, [pc, #276]	; (800819c <UART_SetConfig+0x2cc>)
 8008086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800808a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800808e:	2bc0      	cmp	r3, #192	; 0xc0
 8008090:	d016      	beq.n	80080c0 <UART_SetConfig+0x1f0>
 8008092:	2bc0      	cmp	r3, #192	; 0xc0
 8008094:	d818      	bhi.n	80080c8 <UART_SetConfig+0x1f8>
 8008096:	2b80      	cmp	r3, #128	; 0x80
 8008098:	d00a      	beq.n	80080b0 <UART_SetConfig+0x1e0>
 800809a:	2b80      	cmp	r3, #128	; 0x80
 800809c:	d814      	bhi.n	80080c8 <UART_SetConfig+0x1f8>
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d002      	beq.n	80080a8 <UART_SetConfig+0x1d8>
 80080a2:	2b40      	cmp	r3, #64	; 0x40
 80080a4:	d008      	beq.n	80080b8 <UART_SetConfig+0x1e8>
 80080a6:	e00f      	b.n	80080c8 <UART_SetConfig+0x1f8>
 80080a8:	2300      	movs	r3, #0
 80080aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080ae:	e082      	b.n	80081b6 <UART_SetConfig+0x2e6>
 80080b0:	2302      	movs	r3, #2
 80080b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080b6:	e07e      	b.n	80081b6 <UART_SetConfig+0x2e6>
 80080b8:	2304      	movs	r3, #4
 80080ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080be:	e07a      	b.n	80081b6 <UART_SetConfig+0x2e6>
 80080c0:	2308      	movs	r3, #8
 80080c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080c6:	e076      	b.n	80081b6 <UART_SetConfig+0x2e6>
 80080c8:	2310      	movs	r3, #16
 80080ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080ce:	e072      	b.n	80081b6 <UART_SetConfig+0x2e6>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a35      	ldr	r2, [pc, #212]	; (80081ac <UART_SetConfig+0x2dc>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d12a      	bne.n	8008130 <UART_SetConfig+0x260>
 80080da:	4b30      	ldr	r3, [pc, #192]	; (800819c <UART_SetConfig+0x2cc>)
 80080dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080e8:	d01a      	beq.n	8008120 <UART_SetConfig+0x250>
 80080ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080ee:	d81b      	bhi.n	8008128 <UART_SetConfig+0x258>
 80080f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080f4:	d00c      	beq.n	8008110 <UART_SetConfig+0x240>
 80080f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080fa:	d815      	bhi.n	8008128 <UART_SetConfig+0x258>
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <UART_SetConfig+0x238>
 8008100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008104:	d008      	beq.n	8008118 <UART_SetConfig+0x248>
 8008106:	e00f      	b.n	8008128 <UART_SetConfig+0x258>
 8008108:	2300      	movs	r3, #0
 800810a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800810e:	e052      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008110:	2302      	movs	r3, #2
 8008112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008116:	e04e      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008118:	2304      	movs	r3, #4
 800811a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800811e:	e04a      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008120:	2308      	movs	r3, #8
 8008122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008126:	e046      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008128:	2310      	movs	r3, #16
 800812a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800812e:	e042      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a17      	ldr	r2, [pc, #92]	; (8008194 <UART_SetConfig+0x2c4>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d13a      	bne.n	80081b0 <UART_SetConfig+0x2e0>
 800813a:	4b18      	ldr	r3, [pc, #96]	; (800819c <UART_SetConfig+0x2cc>)
 800813c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008140:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008144:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008148:	d01a      	beq.n	8008180 <UART_SetConfig+0x2b0>
 800814a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800814e:	d81b      	bhi.n	8008188 <UART_SetConfig+0x2b8>
 8008150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008154:	d00c      	beq.n	8008170 <UART_SetConfig+0x2a0>
 8008156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800815a:	d815      	bhi.n	8008188 <UART_SetConfig+0x2b8>
 800815c:	2b00      	cmp	r3, #0
 800815e:	d003      	beq.n	8008168 <UART_SetConfig+0x298>
 8008160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008164:	d008      	beq.n	8008178 <UART_SetConfig+0x2a8>
 8008166:	e00f      	b.n	8008188 <UART_SetConfig+0x2b8>
 8008168:	2300      	movs	r3, #0
 800816a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800816e:	e022      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008170:	2302      	movs	r3, #2
 8008172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008176:	e01e      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008178:	2304      	movs	r3, #4
 800817a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800817e:	e01a      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008180:	2308      	movs	r3, #8
 8008182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008186:	e016      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008188:	2310      	movs	r3, #16
 800818a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800818e:	e012      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008190:	efff69f3 	.word	0xefff69f3
 8008194:	40008000 	.word	0x40008000
 8008198:	40013800 	.word	0x40013800
 800819c:	40021000 	.word	0x40021000
 80081a0:	40004400 	.word	0x40004400
 80081a4:	40004800 	.word	0x40004800
 80081a8:	40004c00 	.word	0x40004c00
 80081ac:	40005000 	.word	0x40005000
 80081b0:	2310      	movs	r3, #16
 80081b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a9f      	ldr	r2, [pc, #636]	; (8008438 <UART_SetConfig+0x568>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d17a      	bne.n	80082b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081c4:	2b08      	cmp	r3, #8
 80081c6:	d824      	bhi.n	8008212 <UART_SetConfig+0x342>
 80081c8:	a201      	add	r2, pc, #4	; (adr r2, 80081d0 <UART_SetConfig+0x300>)
 80081ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ce:	bf00      	nop
 80081d0:	080081f5 	.word	0x080081f5
 80081d4:	08008213 	.word	0x08008213
 80081d8:	080081fd 	.word	0x080081fd
 80081dc:	08008213 	.word	0x08008213
 80081e0:	08008203 	.word	0x08008203
 80081e4:	08008213 	.word	0x08008213
 80081e8:	08008213 	.word	0x08008213
 80081ec:	08008213 	.word	0x08008213
 80081f0:	0800820b 	.word	0x0800820b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081f4:	f7fd f9b6 	bl	8005564 <HAL_RCC_GetPCLK1Freq>
 80081f8:	61f8      	str	r0, [r7, #28]
        break;
 80081fa:	e010      	b.n	800821e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081fc:	4b8f      	ldr	r3, [pc, #572]	; (800843c <UART_SetConfig+0x56c>)
 80081fe:	61fb      	str	r3, [r7, #28]
        break;
 8008200:	e00d      	b.n	800821e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008202:	f7fd f917 	bl	8005434 <HAL_RCC_GetSysClockFreq>
 8008206:	61f8      	str	r0, [r7, #28]
        break;
 8008208:	e009      	b.n	800821e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800820a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800820e:	61fb      	str	r3, [r7, #28]
        break;
 8008210:	e005      	b.n	800821e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008212:	2300      	movs	r3, #0
 8008214:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800821c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 80fb 	beq.w	800841c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	4613      	mov	r3, r2
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	4413      	add	r3, r2
 8008230:	69fa      	ldr	r2, [r7, #28]
 8008232:	429a      	cmp	r2, r3
 8008234:	d305      	bcc.n	8008242 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800823c:	69fa      	ldr	r2, [r7, #28]
 800823e:	429a      	cmp	r2, r3
 8008240:	d903      	bls.n	800824a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008248:	e0e8      	b.n	800841c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	2200      	movs	r2, #0
 800824e:	461c      	mov	r4, r3
 8008250:	4615      	mov	r5, r2
 8008252:	f04f 0200 	mov.w	r2, #0
 8008256:	f04f 0300 	mov.w	r3, #0
 800825a:	022b      	lsls	r3, r5, #8
 800825c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008260:	0222      	lsls	r2, r4, #8
 8008262:	68f9      	ldr	r1, [r7, #12]
 8008264:	6849      	ldr	r1, [r1, #4]
 8008266:	0849      	lsrs	r1, r1, #1
 8008268:	2000      	movs	r0, #0
 800826a:	4688      	mov	r8, r1
 800826c:	4681      	mov	r9, r0
 800826e:	eb12 0a08 	adds.w	sl, r2, r8
 8008272:	eb43 0b09 	adc.w	fp, r3, r9
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	603b      	str	r3, [r7, #0]
 800827e:	607a      	str	r2, [r7, #4]
 8008280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008284:	4650      	mov	r0, sl
 8008286:	4659      	mov	r1, fp
 8008288:	f7f8 fc9e 	bl	8000bc8 <__aeabi_uldivmod>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	4613      	mov	r3, r2
 8008292:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800829a:	d308      	bcc.n	80082ae <UART_SetConfig+0x3de>
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082a2:	d204      	bcs.n	80082ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	69ba      	ldr	r2, [r7, #24]
 80082aa:	60da      	str	r2, [r3, #12]
 80082ac:	e0b6      	b.n	800841c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80082b4:	e0b2      	b.n	800841c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	69db      	ldr	r3, [r3, #28]
 80082ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082be:	d15e      	bne.n	800837e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80082c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082c4:	2b08      	cmp	r3, #8
 80082c6:	d828      	bhi.n	800831a <UART_SetConfig+0x44a>
 80082c8:	a201      	add	r2, pc, #4	; (adr r2, 80082d0 <UART_SetConfig+0x400>)
 80082ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ce:	bf00      	nop
 80082d0:	080082f5 	.word	0x080082f5
 80082d4:	080082fd 	.word	0x080082fd
 80082d8:	08008305 	.word	0x08008305
 80082dc:	0800831b 	.word	0x0800831b
 80082e0:	0800830b 	.word	0x0800830b
 80082e4:	0800831b 	.word	0x0800831b
 80082e8:	0800831b 	.word	0x0800831b
 80082ec:	0800831b 	.word	0x0800831b
 80082f0:	08008313 	.word	0x08008313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082f4:	f7fd f936 	bl	8005564 <HAL_RCC_GetPCLK1Freq>
 80082f8:	61f8      	str	r0, [r7, #28]
        break;
 80082fa:	e014      	b.n	8008326 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082fc:	f7fd f948 	bl	8005590 <HAL_RCC_GetPCLK2Freq>
 8008300:	61f8      	str	r0, [r7, #28]
        break;
 8008302:	e010      	b.n	8008326 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008304:	4b4d      	ldr	r3, [pc, #308]	; (800843c <UART_SetConfig+0x56c>)
 8008306:	61fb      	str	r3, [r7, #28]
        break;
 8008308:	e00d      	b.n	8008326 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800830a:	f7fd f893 	bl	8005434 <HAL_RCC_GetSysClockFreq>
 800830e:	61f8      	str	r0, [r7, #28]
        break;
 8008310:	e009      	b.n	8008326 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008316:	61fb      	str	r3, [r7, #28]
        break;
 8008318:	e005      	b.n	8008326 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800831a:	2300      	movs	r3, #0
 800831c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008324:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d077      	beq.n	800841c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	005a      	lsls	r2, r3, #1
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	085b      	lsrs	r3, r3, #1
 8008336:	441a      	add	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008340:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	2b0f      	cmp	r3, #15
 8008346:	d916      	bls.n	8008376 <UART_SetConfig+0x4a6>
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800834e:	d212      	bcs.n	8008376 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	b29b      	uxth	r3, r3
 8008354:	f023 030f 	bic.w	r3, r3, #15
 8008358:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	085b      	lsrs	r3, r3, #1
 800835e:	b29b      	uxth	r3, r3
 8008360:	f003 0307 	and.w	r3, r3, #7
 8008364:	b29a      	uxth	r2, r3
 8008366:	8afb      	ldrh	r3, [r7, #22]
 8008368:	4313      	orrs	r3, r2
 800836a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	8afa      	ldrh	r2, [r7, #22]
 8008372:	60da      	str	r2, [r3, #12]
 8008374:	e052      	b.n	800841c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800837c:	e04e      	b.n	800841c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800837e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008382:	2b08      	cmp	r3, #8
 8008384:	d827      	bhi.n	80083d6 <UART_SetConfig+0x506>
 8008386:	a201      	add	r2, pc, #4	; (adr r2, 800838c <UART_SetConfig+0x4bc>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	080083b1 	.word	0x080083b1
 8008390:	080083b9 	.word	0x080083b9
 8008394:	080083c1 	.word	0x080083c1
 8008398:	080083d7 	.word	0x080083d7
 800839c:	080083c7 	.word	0x080083c7
 80083a0:	080083d7 	.word	0x080083d7
 80083a4:	080083d7 	.word	0x080083d7
 80083a8:	080083d7 	.word	0x080083d7
 80083ac:	080083cf 	.word	0x080083cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083b0:	f7fd f8d8 	bl	8005564 <HAL_RCC_GetPCLK1Freq>
 80083b4:	61f8      	str	r0, [r7, #28]
        break;
 80083b6:	e014      	b.n	80083e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083b8:	f7fd f8ea 	bl	8005590 <HAL_RCC_GetPCLK2Freq>
 80083bc:	61f8      	str	r0, [r7, #28]
        break;
 80083be:	e010      	b.n	80083e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083c0:	4b1e      	ldr	r3, [pc, #120]	; (800843c <UART_SetConfig+0x56c>)
 80083c2:	61fb      	str	r3, [r7, #28]
        break;
 80083c4:	e00d      	b.n	80083e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083c6:	f7fd f835 	bl	8005434 <HAL_RCC_GetSysClockFreq>
 80083ca:	61f8      	str	r0, [r7, #28]
        break;
 80083cc:	e009      	b.n	80083e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083d2:	61fb      	str	r3, [r7, #28]
        break;
 80083d4:	e005      	b.n	80083e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80083d6:	2300      	movs	r3, #0
 80083d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80083e0:	bf00      	nop
    }

    if (pclk != 0U)
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d019      	beq.n	800841c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	085a      	lsrs	r2, r3, #1
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	441a      	add	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	2b0f      	cmp	r3, #15
 8008400:	d909      	bls.n	8008416 <UART_SetConfig+0x546>
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008408:	d205      	bcs.n	8008416 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	b29a      	uxth	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	60da      	str	r2, [r3, #12]
 8008414:	e002      	b.n	800841c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008428:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800842c:	4618      	mov	r0, r3
 800842e:	3728      	adds	r7, #40	; 0x28
 8008430:	46bd      	mov	sp, r7
 8008432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008436:	bf00      	nop
 8008438:	40008000 	.word	0x40008000
 800843c:	00f42400 	.word	0x00f42400

08008440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00a      	beq.n	800846a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00a      	beq.n	800848c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008490:	f003 0304 	and.w	r3, r3, #4
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00a      	beq.n	80084ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	430a      	orrs	r2, r1
 80084ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b2:	f003 0308 	and.w	r3, r3, #8
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00a      	beq.n	80084d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	430a      	orrs	r2, r1
 80084ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d4:	f003 0310 	and.w	r3, r3, #16
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00a      	beq.n	80084f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	430a      	orrs	r2, r1
 80084f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f6:	f003 0320 	and.w	r3, r3, #32
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00a      	beq.n	8008514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	430a      	orrs	r2, r1
 8008512:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800851c:	2b00      	cmp	r3, #0
 800851e:	d01a      	beq.n	8008556 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	430a      	orrs	r2, r1
 8008534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800853e:	d10a      	bne.n	8008556 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	430a      	orrs	r2, r1
 8008576:	605a      	str	r2, [r3, #4]
  }
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b086      	sub	sp, #24
 8008588:	af02      	add	r7, sp, #8
 800858a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008594:	f7fa fe30 	bl	80031f8 <HAL_GetTick>
 8008598:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0308 	and.w	r3, r3, #8
 80085a4:	2b08      	cmp	r3, #8
 80085a6:	d10e      	bne.n	80085c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f82d 	bl	8008616 <UART_WaitOnFlagUntilTimeout>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	e023      	b.n	800860e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b04      	cmp	r3, #4
 80085d2:	d10e      	bne.n	80085f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f817 	bl	8008616 <UART_WaitOnFlagUntilTimeout>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e00d      	b.n	800860e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2220      	movs	r2, #32
 80085f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2220      	movs	r2, #32
 80085fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b09c      	sub	sp, #112	; 0x70
 800861a:	af00      	add	r7, sp, #0
 800861c:	60f8      	str	r0, [r7, #12]
 800861e:	60b9      	str	r1, [r7, #8]
 8008620:	603b      	str	r3, [r7, #0]
 8008622:	4613      	mov	r3, r2
 8008624:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008626:	e0a5      	b.n	8008774 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800862a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800862e:	f000 80a1 	beq.w	8008774 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008632:	f7fa fde1 	bl	80031f8 <HAL_GetTick>
 8008636:	4602      	mov	r2, r0
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800863e:	429a      	cmp	r2, r3
 8008640:	d302      	bcc.n	8008648 <UART_WaitOnFlagUntilTimeout+0x32>
 8008642:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008644:	2b00      	cmp	r3, #0
 8008646:	d13e      	bne.n	80086c6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008650:	e853 3f00 	ldrex	r3, [r3]
 8008654:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008658:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800865c:	667b      	str	r3, [r7, #100]	; 0x64
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008666:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008668:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800866c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800866e:	e841 2300 	strex	r3, r2, [r1]
 8008672:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1e6      	bne.n	8008648 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3308      	adds	r3, #8
 8008680:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008684:	e853 3f00 	ldrex	r3, [r3]
 8008688:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800868a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868c:	f023 0301 	bic.w	r3, r3, #1
 8008690:	663b      	str	r3, [r7, #96]	; 0x60
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3308      	adds	r3, #8
 8008698:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800869a:	64ba      	str	r2, [r7, #72]	; 0x48
 800869c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086a2:	e841 2300 	strex	r3, r2, [r1]
 80086a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e5      	bne.n	800867a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2220      	movs	r2, #32
 80086b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2220      	movs	r2, #32
 80086b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e067      	b.n	8008796 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0304 	and.w	r3, r3, #4
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d04f      	beq.n	8008774 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	69db      	ldr	r3, [r3, #28]
 80086da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086e2:	d147      	bne.n	8008774 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086ec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	e853 3f00 	ldrex	r3, [r3]
 80086fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008702:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	461a      	mov	r2, r3
 800870a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800870c:	637b      	str	r3, [r7, #52]	; 0x34
 800870e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008710:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008714:	e841 2300 	strex	r3, r2, [r1]
 8008718:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800871a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1e6      	bne.n	80086ee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	3308      	adds	r3, #8
 8008726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	e853 3f00 	ldrex	r3, [r3]
 800872e:	613b      	str	r3, [r7, #16]
   return(result);
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	f023 0301 	bic.w	r3, r3, #1
 8008736:	66bb      	str	r3, [r7, #104]	; 0x68
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	3308      	adds	r3, #8
 800873e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008740:	623a      	str	r2, [r7, #32]
 8008742:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008744:	69f9      	ldr	r1, [r7, #28]
 8008746:	6a3a      	ldr	r2, [r7, #32]
 8008748:	e841 2300 	strex	r3, r2, [r1]
 800874c:	61bb      	str	r3, [r7, #24]
   return(result);
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1e5      	bne.n	8008720 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2220      	movs	r2, #32
 8008758:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2220      	movs	r2, #32
 800875e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2220      	movs	r2, #32
 8008764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e010      	b.n	8008796 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	69da      	ldr	r2, [r3, #28]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	4013      	ands	r3, r2
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	429a      	cmp	r2, r3
 8008782:	bf0c      	ite	eq
 8008784:	2301      	moveq	r3, #1
 8008786:	2300      	movne	r3, #0
 8008788:	b2db      	uxtb	r3, r3
 800878a:	461a      	mov	r2, r3
 800878c:	79fb      	ldrb	r3, [r7, #7]
 800878e:	429a      	cmp	r2, r3
 8008790:	f43f af4a 	beq.w	8008628 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3770      	adds	r7, #112	; 0x70
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800879e:	b480      	push	{r7}
 80087a0:	b095      	sub	sp, #84	; 0x54
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	461a      	mov	r2, r3
 80087c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087c4:	643b      	str	r3, [r7, #64]	; 0x40
 80087c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087cc:	e841 2300 	strex	r3, r2, [r1]
 80087d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e6      	bne.n	80087a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	3308      	adds	r3, #8
 80087de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	e853 3f00 	ldrex	r3, [r3]
 80087e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	f023 0301 	bic.w	r3, r3, #1
 80087ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3308      	adds	r3, #8
 80087f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008800:	e841 2300 	strex	r3, r2, [r1]
 8008804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e5      	bne.n	80087d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008810:	2b01      	cmp	r3, #1
 8008812:	d118      	bne.n	8008846 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	e853 3f00 	ldrex	r3, [r3]
 8008820:	60bb      	str	r3, [r7, #8]
   return(result);
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f023 0310 	bic.w	r3, r3, #16
 8008828:	647b      	str	r3, [r7, #68]	; 0x44
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	461a      	mov	r2, r3
 8008830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008832:	61bb      	str	r3, [r7, #24]
 8008834:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	6979      	ldr	r1, [r7, #20]
 8008838:	69ba      	ldr	r2, [r7, #24]
 800883a:	e841 2300 	strex	r3, r2, [r1]
 800883e:	613b      	str	r3, [r7, #16]
   return(result);
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1e6      	bne.n	8008814 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2220      	movs	r2, #32
 800884a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008858:	bf00      	nop
 800885a:	3754      	adds	r7, #84	; 0x54
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008870:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f7ff fb0e 	bl	8007ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008888:	bf00      	nop
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b088      	sub	sp, #32
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	e853 3f00 	ldrex	r3, [r3]
 80088a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088ac:	61fb      	str	r3, [r7, #28]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	461a      	mov	r2, r3
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	61bb      	str	r3, [r7, #24]
 80088b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ba:	6979      	ldr	r1, [r7, #20]
 80088bc:	69ba      	ldr	r2, [r7, #24]
 80088be:	e841 2300 	strex	r3, r2, [r1]
 80088c2:	613b      	str	r3, [r7, #16]
   return(result);
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1e6      	bne.n	8008898 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2220      	movs	r2, #32
 80088ce:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7ff fada 	bl	8007e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088dc:	bf00      	nop
 80088de:	3720      	adds	r7, #32
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <__NVIC_SetPriority>:
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	4603      	mov	r3, r0
 8008900:	6039      	str	r1, [r7, #0]
 8008902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008908:	2b00      	cmp	r3, #0
 800890a:	db0a      	blt.n	8008922 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	b2da      	uxtb	r2, r3
 8008910:	490c      	ldr	r1, [pc, #48]	; (8008944 <__NVIC_SetPriority+0x4c>)
 8008912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008916:	0112      	lsls	r2, r2, #4
 8008918:	b2d2      	uxtb	r2, r2
 800891a:	440b      	add	r3, r1
 800891c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008920:	e00a      	b.n	8008938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	b2da      	uxtb	r2, r3
 8008926:	4908      	ldr	r1, [pc, #32]	; (8008948 <__NVIC_SetPriority+0x50>)
 8008928:	79fb      	ldrb	r3, [r7, #7]
 800892a:	f003 030f 	and.w	r3, r3, #15
 800892e:	3b04      	subs	r3, #4
 8008930:	0112      	lsls	r2, r2, #4
 8008932:	b2d2      	uxtb	r2, r2
 8008934:	440b      	add	r3, r1
 8008936:	761a      	strb	r2, [r3, #24]
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	e000e100 	.word	0xe000e100
 8008948:	e000ed00 	.word	0xe000ed00

0800894c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800894c:	b580      	push	{r7, lr}
 800894e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008950:	2100      	movs	r1, #0
 8008952:	f06f 0004 	mvn.w	r0, #4
 8008956:	f7ff ffcf 	bl	80088f8 <__NVIC_SetPriority>
#endif
}
 800895a:	bf00      	nop
 800895c:	bd80      	pop	{r7, pc}
	...

08008960 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008966:	f3ef 8305 	mrs	r3, IPSR
 800896a:	603b      	str	r3, [r7, #0]
  return(result);
 800896c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800896e:	2b00      	cmp	r3, #0
 8008970:	d003      	beq.n	800897a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008972:	f06f 0305 	mvn.w	r3, #5
 8008976:	607b      	str	r3, [r7, #4]
 8008978:	e00c      	b.n	8008994 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800897a:	4b0a      	ldr	r3, [pc, #40]	; (80089a4 <osKernelInitialize+0x44>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d105      	bne.n	800898e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008982:	4b08      	ldr	r3, [pc, #32]	; (80089a4 <osKernelInitialize+0x44>)
 8008984:	2201      	movs	r2, #1
 8008986:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008988:	2300      	movs	r3, #0
 800898a:	607b      	str	r3, [r7, #4]
 800898c:	e002      	b.n	8008994 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800898e:	f04f 33ff 	mov.w	r3, #4294967295
 8008992:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008994:	687b      	ldr	r3, [r7, #4]
}
 8008996:	4618      	mov	r0, r3
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	2000053c 	.word	0x2000053c

080089a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089ae:	f3ef 8305 	mrs	r3, IPSR
 80089b2:	603b      	str	r3, [r7, #0]
  return(result);
 80089b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d003      	beq.n	80089c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80089ba:	f06f 0305 	mvn.w	r3, #5
 80089be:	607b      	str	r3, [r7, #4]
 80089c0:	e010      	b.n	80089e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80089c2:	4b0b      	ldr	r3, [pc, #44]	; (80089f0 <osKernelStart+0x48>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d109      	bne.n	80089de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80089ca:	f7ff ffbf 	bl	800894c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80089ce:	4b08      	ldr	r3, [pc, #32]	; (80089f0 <osKernelStart+0x48>)
 80089d0:	2202      	movs	r2, #2
 80089d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80089d4:	f001 f866 	bl	8009aa4 <vTaskStartScheduler>
      stat = osOK;
 80089d8:	2300      	movs	r3, #0
 80089da:	607b      	str	r3, [r7, #4]
 80089dc:	e002      	b.n	80089e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80089de:	f04f 33ff 	mov.w	r3, #4294967295
 80089e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80089e4:	687b      	ldr	r3, [r7, #4]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	2000053c 	.word	0x2000053c

080089f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b08e      	sub	sp, #56	; 0x38
 80089f8:	af04      	add	r7, sp, #16
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008a00:	2300      	movs	r3, #0
 8008a02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a04:	f3ef 8305 	mrs	r3, IPSR
 8008a08:	617b      	str	r3, [r7, #20]
  return(result);
 8008a0a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d17e      	bne.n	8008b0e <osThreadNew+0x11a>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d07b      	beq.n	8008b0e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008a16:	2380      	movs	r3, #128	; 0x80
 8008a18:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008a1a:	2318      	movs	r3, #24
 8008a1c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008a22:	f04f 33ff 	mov.w	r3, #4294967295
 8008a26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d045      	beq.n	8008aba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d002      	beq.n	8008a3c <osThreadNew+0x48>
        name = attr->name;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d008      	beq.n	8008a62 <osThreadNew+0x6e>
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	2b38      	cmp	r3, #56	; 0x38
 8008a54:	d805      	bhi.n	8008a62 <osThreadNew+0x6e>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <osThreadNew+0x72>
        return (NULL);
 8008a62:	2300      	movs	r3, #0
 8008a64:	e054      	b.n	8008b10 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	695b      	ldr	r3, [r3, #20]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d003      	beq.n	8008a76 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	089b      	lsrs	r3, r3, #2
 8008a74:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00e      	beq.n	8008a9c <osThreadNew+0xa8>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	2b5b      	cmp	r3, #91	; 0x5b
 8008a84:	d90a      	bls.n	8008a9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d006      	beq.n	8008a9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	695b      	ldr	r3, [r3, #20]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d002      	beq.n	8008a9c <osThreadNew+0xa8>
        mem = 1;
 8008a96:	2301      	movs	r3, #1
 8008a98:	61bb      	str	r3, [r7, #24]
 8008a9a:	e010      	b.n	8008abe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10c      	bne.n	8008abe <osThreadNew+0xca>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d108      	bne.n	8008abe <osThreadNew+0xca>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d104      	bne.n	8008abe <osThreadNew+0xca>
          mem = 0;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	61bb      	str	r3, [r7, #24]
 8008ab8:	e001      	b.n	8008abe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008aba:	2300      	movs	r3, #0
 8008abc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d110      	bne.n	8008ae6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008acc:	9202      	str	r2, [sp, #8]
 8008ace:	9301      	str	r3, [sp, #4]
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	6a3a      	ldr	r2, [r7, #32]
 8008ad8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f000 fe0c 	bl	80096f8 <xTaskCreateStatic>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	613b      	str	r3, [r7, #16]
 8008ae4:	e013      	b.n	8008b0e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d110      	bne.n	8008b0e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	f107 0310 	add.w	r3, r7, #16
 8008af4:	9301      	str	r3, [sp, #4]
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f000 fe57 	bl	80097b2 <xTaskCreate>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d001      	beq.n	8008b0e <osThreadNew+0x11a>
            hTask = NULL;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b0e:	693b      	ldr	r3, [r7, #16]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3728      	adds	r7, #40	; 0x28
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b20:	f3ef 8305 	mrs	r3, IPSR
 8008b24:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b26:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d003      	beq.n	8008b34 <osDelay+0x1c>
    stat = osErrorISR;
 8008b2c:	f06f 0305 	mvn.w	r3, #5
 8008b30:	60fb      	str	r3, [r7, #12]
 8008b32:	e007      	b.n	8008b44 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d002      	beq.n	8008b44 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 ff7c 	bl	8009a3c <vTaskDelay>
    }
  }

  return (stat);
 8008b44:	68fb      	ldr	r3, [r7, #12]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4a07      	ldr	r2, [pc, #28]	; (8008b7c <vApplicationGetIdleTaskMemory+0x2c>)
 8008b60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	4a06      	ldr	r2, [pc, #24]	; (8008b80 <vApplicationGetIdleTaskMemory+0x30>)
 8008b66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2280      	movs	r2, #128	; 0x80
 8008b6c:	601a      	str	r2, [r3, #0]
}
 8008b6e:	bf00      	nop
 8008b70:	3714      	adds	r7, #20
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	20000540 	.word	0x20000540
 8008b80:	2000059c 	.word	0x2000059c

08008b84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4a07      	ldr	r2, [pc, #28]	; (8008bb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008b94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	4a06      	ldr	r2, [pc, #24]	; (8008bb4 <vApplicationGetTimerTaskMemory+0x30>)
 8008b9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ba2:	601a      	str	r2, [r3, #0]
}
 8008ba4:	bf00      	nop
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	2000079c 	.word	0x2000079c
 8008bb4:	200007f8 	.word	0x200007f8

08008bb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f103 0208 	add.w	r2, r3, #8
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f103 0208 	add.w	r2, r3, #8
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f103 0208 	add.w	r2, r3, #8
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c06:	bf00      	nop
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c12:	b480      	push	{r7}
 8008c14:	b085      	sub	sp, #20
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	689a      	ldr	r2, [r3, #8]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	601a      	str	r2, [r3, #0]
}
 8008c4e:	bf00      	nop
 8008c50:	3714      	adds	r7, #20
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b085      	sub	sp, #20
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c70:	d103      	bne.n	8008c7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	60fb      	str	r3, [r7, #12]
 8008c78:	e00c      	b.n	8008c94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	3308      	adds	r3, #8
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	e002      	b.n	8008c88 <vListInsert+0x2e>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d2f6      	bcs.n	8008c82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	683a      	ldr	r2, [r7, #0]
 8008ca2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	1c5a      	adds	r2, r3, #1
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	601a      	str	r2, [r3, #0]
}
 8008cc0:	bf00      	nop
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	6892      	ldr	r2, [r2, #8]
 8008ce2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	6852      	ldr	r2, [r2, #4]
 8008cec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d103      	bne.n	8008d00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	689a      	ldr	r2, [r3, #8]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	1e5a      	subs	r2, r3, #1
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10a      	bne.n	8008d4a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008d46:	bf00      	nop
 8008d48:	e7fe      	b.n	8008d48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008d4a:	f002 f84b 	bl	800ade4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d56:	68f9      	ldr	r1, [r7, #12]
 8008d58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d5a:	fb01 f303 	mul.w	r3, r1, r3
 8008d5e:	441a      	add	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	68f9      	ldr	r1, [r7, #12]
 8008d7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d80:	fb01 f303 	mul.w	r3, r1, r3
 8008d84:	441a      	add	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	22ff      	movs	r2, #255	; 0xff
 8008d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	22ff      	movs	r2, #255	; 0xff
 8008d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d114      	bne.n	8008dca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d01a      	beq.n	8008dde <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	3310      	adds	r3, #16
 8008dac:	4618      	mov	r0, r3
 8008dae:	f001 f903 	bl	8009fb8 <xTaskRemoveFromEventList>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d012      	beq.n	8008dde <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008db8:	4b0c      	ldr	r3, [pc, #48]	; (8008dec <xQueueGenericReset+0xcc>)
 8008dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dbe:	601a      	str	r2, [r3, #0]
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	e009      	b.n	8008dde <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3310      	adds	r3, #16
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7ff fef2 	bl	8008bb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	3324      	adds	r3, #36	; 0x24
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7ff feed 	bl	8008bb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008dde:	f002 f831 	bl	800ae44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008de2:	2301      	movs	r3, #1
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	e000ed04 	.word	0xe000ed04

08008df0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b08e      	sub	sp, #56	; 0x38
 8008df4:	af02      	add	r7, sp, #8
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10a      	bne.n	8008e1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e16:	bf00      	nop
 8008e18:	e7fe      	b.n	8008e18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10a      	bne.n	8008e36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e32:	bf00      	nop
 8008e34:	e7fe      	b.n	8008e34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d002      	beq.n	8008e42 <xQueueGenericCreateStatic+0x52>
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <xQueueGenericCreateStatic+0x56>
 8008e42:	2301      	movs	r3, #1
 8008e44:	e000      	b.n	8008e48 <xQueueGenericCreateStatic+0x58>
 8008e46:	2300      	movs	r3, #0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10a      	bne.n	8008e62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	623b      	str	r3, [r7, #32]
}
 8008e5e:	bf00      	nop
 8008e60:	e7fe      	b.n	8008e60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d102      	bne.n	8008e6e <xQueueGenericCreateStatic+0x7e>
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <xQueueGenericCreateStatic+0x82>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e000      	b.n	8008e74 <xQueueGenericCreateStatic+0x84>
 8008e72:	2300      	movs	r3, #0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10a      	bne.n	8008e8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	61fb      	str	r3, [r7, #28]
}
 8008e8a:	bf00      	nop
 8008e8c:	e7fe      	b.n	8008e8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008e8e:	2350      	movs	r3, #80	; 0x50
 8008e90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2b50      	cmp	r3, #80	; 0x50
 8008e96:	d00a      	beq.n	8008eae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9c:	f383 8811 	msr	BASEPRI, r3
 8008ea0:	f3bf 8f6f 	isb	sy
 8008ea4:	f3bf 8f4f 	dsb	sy
 8008ea8:	61bb      	str	r3, [r7, #24]
}
 8008eaa:	bf00      	nop
 8008eac:	e7fe      	b.n	8008eac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008eae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00d      	beq.n	8008ed6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ec2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec8:	9300      	str	r3, [sp, #0]
 8008eca:	4613      	mov	r3, r2
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	68b9      	ldr	r1, [r7, #8]
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f000 f805 	bl	8008ee0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3730      	adds	r7, #48	; 0x30
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
 8008eec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d103      	bne.n	8008efc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	69ba      	ldr	r2, [r7, #24]
 8008ef8:	601a      	str	r2, [r3, #0]
 8008efa:	e002      	b.n	8008f02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f0e:	2101      	movs	r1, #1
 8008f10:	69b8      	ldr	r0, [r7, #24]
 8008f12:	f7ff ff05 	bl	8008d20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	78fa      	ldrb	r2, [r7, #3]
 8008f1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f1e:	bf00      	nop
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
	...

08008f28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b08e      	sub	sp, #56	; 0x38
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
 8008f34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f36:	2300      	movs	r3, #0
 8008f38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d10a      	bne.n	8008f5a <xQueueGenericSend+0x32>
	__asm volatile
 8008f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f48:	f383 8811 	msr	BASEPRI, r3
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f56:	bf00      	nop
 8008f58:	e7fe      	b.n	8008f58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d103      	bne.n	8008f68 <xQueueGenericSend+0x40>
 8008f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <xQueueGenericSend+0x44>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e000      	b.n	8008f6e <xQueueGenericSend+0x46>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10a      	bne.n	8008f88 <xQueueGenericSend+0x60>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f84:	bf00      	nop
 8008f86:	e7fe      	b.n	8008f86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d103      	bne.n	8008f96 <xQueueGenericSend+0x6e>
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d101      	bne.n	8008f9a <xQueueGenericSend+0x72>
 8008f96:	2301      	movs	r3, #1
 8008f98:	e000      	b.n	8008f9c <xQueueGenericSend+0x74>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10a      	bne.n	8008fb6 <xQueueGenericSend+0x8e>
	__asm volatile
 8008fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa4:	f383 8811 	msr	BASEPRI, r3
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	623b      	str	r3, [r7, #32]
}
 8008fb2:	bf00      	nop
 8008fb4:	e7fe      	b.n	8008fb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fb6:	f001 f9bd 	bl	800a334 <xTaskGetSchedulerState>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d102      	bne.n	8008fc6 <xQueueGenericSend+0x9e>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d101      	bne.n	8008fca <xQueueGenericSend+0xa2>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e000      	b.n	8008fcc <xQueueGenericSend+0xa4>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10a      	bne.n	8008fe6 <xQueueGenericSend+0xbe>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	61fb      	str	r3, [r7, #28]
}
 8008fe2:	bf00      	nop
 8008fe4:	e7fe      	b.n	8008fe4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fe6:	f001 fefd 	bl	800ade4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d302      	bcc.n	8008ffc <xQueueGenericSend+0xd4>
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d129      	bne.n	8009050 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ffc:	683a      	ldr	r2, [r7, #0]
 8008ffe:	68b9      	ldr	r1, [r7, #8]
 8009000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009002:	f000 fa0b 	bl	800941c <prvCopyDataToQueue>
 8009006:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900c:	2b00      	cmp	r3, #0
 800900e:	d010      	beq.n	8009032 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009012:	3324      	adds	r3, #36	; 0x24
 8009014:	4618      	mov	r0, r3
 8009016:	f000 ffcf 	bl	8009fb8 <xTaskRemoveFromEventList>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d013      	beq.n	8009048 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009020:	4b3f      	ldr	r3, [pc, #252]	; (8009120 <xQueueGenericSend+0x1f8>)
 8009022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009026:	601a      	str	r2, [r3, #0]
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	e00a      	b.n	8009048 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009034:	2b00      	cmp	r3, #0
 8009036:	d007      	beq.n	8009048 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009038:	4b39      	ldr	r3, [pc, #228]	; (8009120 <xQueueGenericSend+0x1f8>)
 800903a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800903e:	601a      	str	r2, [r3, #0]
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009048:	f001 fefc 	bl	800ae44 <vPortExitCritical>
				return pdPASS;
 800904c:	2301      	movs	r3, #1
 800904e:	e063      	b.n	8009118 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d103      	bne.n	800905e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009056:	f001 fef5 	bl	800ae44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800905a:	2300      	movs	r3, #0
 800905c:	e05c      	b.n	8009118 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800905e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009060:	2b00      	cmp	r3, #0
 8009062:	d106      	bne.n	8009072 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009064:	f107 0314 	add.w	r3, r7, #20
 8009068:	4618      	mov	r0, r3
 800906a:	f001 f809 	bl	800a080 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800906e:	2301      	movs	r3, #1
 8009070:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009072:	f001 fee7 	bl	800ae44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009076:	f000 fd7b 	bl	8009b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800907a:	f001 feb3 	bl	800ade4 <vPortEnterCritical>
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009084:	b25b      	sxtb	r3, r3
 8009086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800908a:	d103      	bne.n	8009094 <xQueueGenericSend+0x16c>
 800908c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908e:	2200      	movs	r2, #0
 8009090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009096:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800909a:	b25b      	sxtb	r3, r3
 800909c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a0:	d103      	bne.n	80090aa <xQueueGenericSend+0x182>
 80090a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a4:	2200      	movs	r2, #0
 80090a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090aa:	f001 fecb 	bl	800ae44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090ae:	1d3a      	adds	r2, r7, #4
 80090b0:	f107 0314 	add.w	r3, r7, #20
 80090b4:	4611      	mov	r1, r2
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 fff8 	bl	800a0ac <xTaskCheckForTimeOut>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d124      	bne.n	800910c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80090c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090c4:	f000 faa2 	bl	800960c <prvIsQueueFull>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d018      	beq.n	8009100 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80090ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d0:	3310      	adds	r3, #16
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	4611      	mov	r1, r2
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 ff1e 	bl	8009f18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80090dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090de:	f000 fa2d 	bl	800953c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80090e2:	f000 fd53 	bl	8009b8c <xTaskResumeAll>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f47f af7c 	bne.w	8008fe6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80090ee:	4b0c      	ldr	r3, [pc, #48]	; (8009120 <xQueueGenericSend+0x1f8>)
 80090f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090f4:	601a      	str	r2, [r3, #0]
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	e772      	b.n	8008fe6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009102:	f000 fa1b 	bl	800953c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009106:	f000 fd41 	bl	8009b8c <xTaskResumeAll>
 800910a:	e76c      	b.n	8008fe6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800910c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800910e:	f000 fa15 	bl	800953c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009112:	f000 fd3b 	bl	8009b8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009116:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009118:	4618      	mov	r0, r3
 800911a:	3738      	adds	r7, #56	; 0x38
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	e000ed04 	.word	0xe000ed04

08009124 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b090      	sub	sp, #64	; 0x40
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
 8009130:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009138:	2b00      	cmp	r3, #0
 800913a:	d10a      	bne.n	8009152 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800913c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009140:	f383 8811 	msr	BASEPRI, r3
 8009144:	f3bf 8f6f 	isb	sy
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800914e:	bf00      	nop
 8009150:	e7fe      	b.n	8009150 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d103      	bne.n	8009160 <xQueueGenericSendFromISR+0x3c>
 8009158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800915c:	2b00      	cmp	r3, #0
 800915e:	d101      	bne.n	8009164 <xQueueGenericSendFromISR+0x40>
 8009160:	2301      	movs	r3, #1
 8009162:	e000      	b.n	8009166 <xQueueGenericSendFromISR+0x42>
 8009164:	2300      	movs	r3, #0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10a      	bne.n	8009180 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800916a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916e:	f383 8811 	msr	BASEPRI, r3
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	f3bf 8f4f 	dsb	sy
 800917a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800917c:	bf00      	nop
 800917e:	e7fe      	b.n	800917e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	2b02      	cmp	r3, #2
 8009184:	d103      	bne.n	800918e <xQueueGenericSendFromISR+0x6a>
 8009186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800918a:	2b01      	cmp	r3, #1
 800918c:	d101      	bne.n	8009192 <xQueueGenericSendFromISR+0x6e>
 800918e:	2301      	movs	r3, #1
 8009190:	e000      	b.n	8009194 <xQueueGenericSendFromISR+0x70>
 8009192:	2300      	movs	r3, #0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10a      	bne.n	80091ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919c:	f383 8811 	msr	BASEPRI, r3
 80091a0:	f3bf 8f6f 	isb	sy
 80091a4:	f3bf 8f4f 	dsb	sy
 80091a8:	623b      	str	r3, [r7, #32]
}
 80091aa:	bf00      	nop
 80091ac:	e7fe      	b.n	80091ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091ae:	f001 fefb 	bl	800afa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80091b2:	f3ef 8211 	mrs	r2, BASEPRI
 80091b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	61fa      	str	r2, [r7, #28]
 80091c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80091ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80091ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d302      	bcc.n	80091e0 <xQueueGenericSendFromISR+0xbc>
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d12f      	bne.n	8009240 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80091e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	68b9      	ldr	r1, [r7, #8]
 80091f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091f6:	f000 f911 	bl	800941c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80091fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80091fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009202:	d112      	bne.n	800922a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009208:	2b00      	cmp	r3, #0
 800920a:	d016      	beq.n	800923a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800920c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920e:	3324      	adds	r3, #36	; 0x24
 8009210:	4618      	mov	r0, r3
 8009212:	f000 fed1 	bl	8009fb8 <xTaskRemoveFromEventList>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00e      	beq.n	800923a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00b      	beq.n	800923a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	601a      	str	r2, [r3, #0]
 8009228:	e007      	b.n	800923a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800922a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800922e:	3301      	adds	r3, #1
 8009230:	b2db      	uxtb	r3, r3
 8009232:	b25a      	sxtb	r2, r3
 8009234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800923a:	2301      	movs	r3, #1
 800923c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800923e:	e001      	b.n	8009244 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009240:	2300      	movs	r3, #0
 8009242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009246:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800924e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009252:	4618      	mov	r0, r3
 8009254:	3740      	adds	r7, #64	; 0x40
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
	...

0800925c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b08c      	sub	sp, #48	; 0x30
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009268:	2300      	movs	r3, #0
 800926a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10a      	bne.n	800928c <xQueueReceive+0x30>
	__asm volatile
 8009276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	623b      	str	r3, [r7, #32]
}
 8009288:	bf00      	nop
 800928a:	e7fe      	b.n	800928a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d103      	bne.n	800929a <xQueueReceive+0x3e>
 8009292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009296:	2b00      	cmp	r3, #0
 8009298:	d101      	bne.n	800929e <xQueueReceive+0x42>
 800929a:	2301      	movs	r3, #1
 800929c:	e000      	b.n	80092a0 <xQueueReceive+0x44>
 800929e:	2300      	movs	r3, #0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10a      	bne.n	80092ba <xQueueReceive+0x5e>
	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	61fb      	str	r3, [r7, #28]
}
 80092b6:	bf00      	nop
 80092b8:	e7fe      	b.n	80092b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092ba:	f001 f83b 	bl	800a334 <xTaskGetSchedulerState>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d102      	bne.n	80092ca <xQueueReceive+0x6e>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <xQueueReceive+0x72>
 80092ca:	2301      	movs	r3, #1
 80092cc:	e000      	b.n	80092d0 <xQueueReceive+0x74>
 80092ce:	2300      	movs	r3, #0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10a      	bne.n	80092ea <xQueueReceive+0x8e>
	__asm volatile
 80092d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	61bb      	str	r3, [r7, #24]
}
 80092e6:	bf00      	nop
 80092e8:	e7fe      	b.n	80092e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092ea:	f001 fd7b 	bl	800ade4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d01f      	beq.n	800933a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80092fa:	68b9      	ldr	r1, [r7, #8]
 80092fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092fe:	f000 f8f7 	bl	80094f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009304:	1e5a      	subs	r2, r3, #1
 8009306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009308:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800930a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00f      	beq.n	8009332 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009314:	3310      	adds	r3, #16
 8009316:	4618      	mov	r0, r3
 8009318:	f000 fe4e 	bl	8009fb8 <xTaskRemoveFromEventList>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d007      	beq.n	8009332 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009322:	4b3d      	ldr	r3, [pc, #244]	; (8009418 <xQueueReceive+0x1bc>)
 8009324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009328:	601a      	str	r2, [r3, #0]
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009332:	f001 fd87 	bl	800ae44 <vPortExitCritical>
				return pdPASS;
 8009336:	2301      	movs	r3, #1
 8009338:	e069      	b.n	800940e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d103      	bne.n	8009348 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009340:	f001 fd80 	bl	800ae44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009344:	2300      	movs	r3, #0
 8009346:	e062      	b.n	800940e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934a:	2b00      	cmp	r3, #0
 800934c:	d106      	bne.n	800935c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800934e:	f107 0310 	add.w	r3, r7, #16
 8009352:	4618      	mov	r0, r3
 8009354:	f000 fe94 	bl	800a080 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009358:	2301      	movs	r3, #1
 800935a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800935c:	f001 fd72 	bl	800ae44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009360:	f000 fc06 	bl	8009b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009364:	f001 fd3e 	bl	800ade4 <vPortEnterCritical>
 8009368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800936e:	b25b      	sxtb	r3, r3
 8009370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009374:	d103      	bne.n	800937e <xQueueReceive+0x122>
 8009376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009378:	2200      	movs	r2, #0
 800937a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800937e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009384:	b25b      	sxtb	r3, r3
 8009386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938a:	d103      	bne.n	8009394 <xQueueReceive+0x138>
 800938c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938e:	2200      	movs	r2, #0
 8009390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009394:	f001 fd56 	bl	800ae44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009398:	1d3a      	adds	r2, r7, #4
 800939a:	f107 0310 	add.w	r3, r7, #16
 800939e:	4611      	mov	r1, r2
 80093a0:	4618      	mov	r0, r3
 80093a2:	f000 fe83 	bl	800a0ac <xTaskCheckForTimeOut>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d123      	bne.n	80093f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093ae:	f000 f917 	bl	80095e0 <prvIsQueueEmpty>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d017      	beq.n	80093e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80093b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ba:	3324      	adds	r3, #36	; 0x24
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	4611      	mov	r1, r2
 80093c0:	4618      	mov	r0, r3
 80093c2:	f000 fda9 	bl	8009f18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093c8:	f000 f8b8 	bl	800953c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093cc:	f000 fbde 	bl	8009b8c <xTaskResumeAll>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d189      	bne.n	80092ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80093d6:	4b10      	ldr	r3, [pc, #64]	; (8009418 <xQueueReceive+0x1bc>)
 80093d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093dc:	601a      	str	r2, [r3, #0]
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	e780      	b.n	80092ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80093e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093ea:	f000 f8a7 	bl	800953c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093ee:	f000 fbcd 	bl	8009b8c <xTaskResumeAll>
 80093f2:	e77a      	b.n	80092ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80093f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093f6:	f000 f8a1 	bl	800953c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093fa:	f000 fbc7 	bl	8009b8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009400:	f000 f8ee 	bl	80095e0 <prvIsQueueEmpty>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	f43f af6f 	beq.w	80092ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800940c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800940e:	4618      	mov	r0, r3
 8009410:	3730      	adds	r7, #48	; 0x30
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	e000ed04 	.word	0xe000ed04

0800941c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009428:	2300      	movs	r3, #0
 800942a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009430:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10d      	bne.n	8009456 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d14d      	bne.n	80094de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	4618      	mov	r0, r3
 8009448:	f000 ff92 	bl	800a370 <xTaskPriorityDisinherit>
 800944c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2200      	movs	r2, #0
 8009452:	609a      	str	r2, [r3, #8]
 8009454:	e043      	b.n	80094de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d119      	bne.n	8009490 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6858      	ldr	r0, [r3, #4]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009464:	461a      	mov	r2, r3
 8009466:	68b9      	ldr	r1, [r7, #8]
 8009468:	f002 f840 	bl	800b4ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009474:	441a      	add	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	429a      	cmp	r2, r3
 8009484:	d32b      	bcc.n	80094de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	605a      	str	r2, [r3, #4]
 800948e:	e026      	b.n	80094de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	68d8      	ldr	r0, [r3, #12]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009498:	461a      	mov	r2, r3
 800949a:	68b9      	ldr	r1, [r7, #8]
 800949c:	f002 f826 	bl	800b4ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	68da      	ldr	r2, [r3, #12]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a8:	425b      	negs	r3, r3
 80094aa:	441a      	add	r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	68da      	ldr	r2, [r3, #12]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d207      	bcs.n	80094cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	689a      	ldr	r2, [r3, #8]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c4:	425b      	negs	r3, r3
 80094c6:	441a      	add	r2, r3
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d105      	bne.n	80094de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d002      	beq.n	80094de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	3b01      	subs	r3, #1
 80094dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	1c5a      	adds	r2, r3, #1
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80094e6:	697b      	ldr	r3, [r7, #20]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3718      	adds	r7, #24
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d018      	beq.n	8009534 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68da      	ldr	r2, [r3, #12]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950a:	441a      	add	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	68da      	ldr	r2, [r3, #12]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	429a      	cmp	r2, r3
 800951a:	d303      	bcc.n	8009524 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	68d9      	ldr	r1, [r3, #12]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952c:	461a      	mov	r2, r3
 800952e:	6838      	ldr	r0, [r7, #0]
 8009530:	f001 ffdc 	bl	800b4ec <memcpy>
	}
}
 8009534:	bf00      	nop
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009544:	f001 fc4e 	bl	800ade4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800954e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009550:	e011      	b.n	8009576 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009556:	2b00      	cmp	r3, #0
 8009558:	d012      	beq.n	8009580 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	3324      	adds	r3, #36	; 0x24
 800955e:	4618      	mov	r0, r3
 8009560:	f000 fd2a 	bl	8009fb8 <xTaskRemoveFromEventList>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800956a:	f000 fe01 	bl	800a170 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800956e:	7bfb      	ldrb	r3, [r7, #15]
 8009570:	3b01      	subs	r3, #1
 8009572:	b2db      	uxtb	r3, r3
 8009574:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800957a:	2b00      	cmp	r3, #0
 800957c:	dce9      	bgt.n	8009552 <prvUnlockQueue+0x16>
 800957e:	e000      	b.n	8009582 <prvUnlockQueue+0x46>
					break;
 8009580:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	22ff      	movs	r2, #255	; 0xff
 8009586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800958a:	f001 fc5b 	bl	800ae44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800958e:	f001 fc29 	bl	800ade4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009598:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800959a:	e011      	b.n	80095c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d012      	beq.n	80095ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3310      	adds	r3, #16
 80095a8:	4618      	mov	r0, r3
 80095aa:	f000 fd05 	bl	8009fb8 <xTaskRemoveFromEventList>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d001      	beq.n	80095b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80095b4:	f000 fddc 	bl	800a170 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80095b8:	7bbb      	ldrb	r3, [r7, #14]
 80095ba:	3b01      	subs	r3, #1
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	dce9      	bgt.n	800959c <prvUnlockQueue+0x60>
 80095c8:	e000      	b.n	80095cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80095ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	22ff      	movs	r2, #255	; 0xff
 80095d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80095d4:	f001 fc36 	bl	800ae44 <vPortExitCritical>
}
 80095d8:	bf00      	nop
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095e8:	f001 fbfc 	bl	800ade4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d102      	bne.n	80095fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80095f4:	2301      	movs	r3, #1
 80095f6:	60fb      	str	r3, [r7, #12]
 80095f8:	e001      	b.n	80095fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80095fa:	2300      	movs	r3, #0
 80095fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095fe:	f001 fc21 	bl	800ae44 <vPortExitCritical>

	return xReturn;
 8009602:	68fb      	ldr	r3, [r7, #12]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009614:	f001 fbe6 	bl	800ade4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009620:	429a      	cmp	r2, r3
 8009622:	d102      	bne.n	800962a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009624:	2301      	movs	r3, #1
 8009626:	60fb      	str	r3, [r7, #12]
 8009628:	e001      	b.n	800962e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800962a:	2300      	movs	r3, #0
 800962c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800962e:	f001 fc09 	bl	800ae44 <vPortExitCritical>

	return xReturn;
 8009632:	68fb      	ldr	r3, [r7, #12]
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009646:	2300      	movs	r3, #0
 8009648:	60fb      	str	r3, [r7, #12]
 800964a:	e014      	b.n	8009676 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800964c:	4a0f      	ldr	r2, [pc, #60]	; (800968c <vQueueAddToRegistry+0x50>)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10b      	bne.n	8009670 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009658:	490c      	ldr	r1, [pc, #48]	; (800968c <vQueueAddToRegistry+0x50>)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	683a      	ldr	r2, [r7, #0]
 800965e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009662:	4a0a      	ldr	r2, [pc, #40]	; (800968c <vQueueAddToRegistry+0x50>)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	4413      	add	r3, r2
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800966e:	e006      	b.n	800967e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	3301      	adds	r3, #1
 8009674:	60fb      	str	r3, [r7, #12]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2b07      	cmp	r3, #7
 800967a:	d9e7      	bls.n	800964c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800967c:	bf00      	nop
 800967e:	bf00      	nop
 8009680:	3714      	adds	r7, #20
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	20000bf8 	.word	0x20000bf8

08009690 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80096a0:	f001 fba0 	bl	800ade4 <vPortEnterCritical>
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096aa:	b25b      	sxtb	r3, r3
 80096ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b0:	d103      	bne.n	80096ba <vQueueWaitForMessageRestricted+0x2a>
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096c0:	b25b      	sxtb	r3, r3
 80096c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c6:	d103      	bne.n	80096d0 <vQueueWaitForMessageRestricted+0x40>
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096d0:	f001 fbb8 	bl	800ae44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d106      	bne.n	80096ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	3324      	adds	r3, #36	; 0x24
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	68b9      	ldr	r1, [r7, #8]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 fc3b 	bl	8009f60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80096ea:	6978      	ldr	r0, [r7, #20]
 80096ec:	f7ff ff26 	bl	800953c <prvUnlockQueue>
	}
 80096f0:	bf00      	nop
 80096f2:	3718      	adds	r7, #24
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b08e      	sub	sp, #56	; 0x38
 80096fc:	af04      	add	r7, sp, #16
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
 8009704:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10a      	bne.n	8009722 <xTaskCreateStatic+0x2a>
	__asm volatile
 800970c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	623b      	str	r3, [r7, #32]
}
 800971e:	bf00      	nop
 8009720:	e7fe      	b.n	8009720 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10a      	bne.n	800973e <xTaskCreateStatic+0x46>
	__asm volatile
 8009728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	61fb      	str	r3, [r7, #28]
}
 800973a:	bf00      	nop
 800973c:	e7fe      	b.n	800973c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800973e:	235c      	movs	r3, #92	; 0x5c
 8009740:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	2b5c      	cmp	r3, #92	; 0x5c
 8009746:	d00a      	beq.n	800975e <xTaskCreateStatic+0x66>
	__asm volatile
 8009748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974c:	f383 8811 	msr	BASEPRI, r3
 8009750:	f3bf 8f6f 	isb	sy
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	61bb      	str	r3, [r7, #24]
}
 800975a:	bf00      	nop
 800975c:	e7fe      	b.n	800975c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800975e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009762:	2b00      	cmp	r3, #0
 8009764:	d01e      	beq.n	80097a4 <xTaskCreateStatic+0xac>
 8009766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009768:	2b00      	cmp	r3, #0
 800976a:	d01b      	beq.n	80097a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800976c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009774:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009778:	2202      	movs	r2, #2
 800977a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800977e:	2300      	movs	r3, #0
 8009780:	9303      	str	r3, [sp, #12]
 8009782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009784:	9302      	str	r3, [sp, #8]
 8009786:	f107 0314 	add.w	r3, r7, #20
 800978a:	9301      	str	r3, [sp, #4]
 800978c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	68b9      	ldr	r1, [r7, #8]
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	f000 f850 	bl	800983c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800979c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800979e:	f000 f8dd 	bl	800995c <prvAddNewTaskToReadyList>
 80097a2:	e001      	b.n	80097a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80097a4:	2300      	movs	r3, #0
 80097a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80097a8:	697b      	ldr	r3, [r7, #20]
	}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3728      	adds	r7, #40	; 0x28
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b08c      	sub	sp, #48	; 0x30
 80097b6:	af04      	add	r7, sp, #16
 80097b8:	60f8      	str	r0, [r7, #12]
 80097ba:	60b9      	str	r1, [r7, #8]
 80097bc:	603b      	str	r3, [r7, #0]
 80097be:	4613      	mov	r3, r2
 80097c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80097c2:	88fb      	ldrh	r3, [r7, #6]
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	4618      	mov	r0, r3
 80097c8:	f001 fc2e 	bl	800b028 <pvPortMalloc>
 80097cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00e      	beq.n	80097f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80097d4:	205c      	movs	r0, #92	; 0x5c
 80097d6:	f001 fc27 	bl	800b028 <pvPortMalloc>
 80097da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d003      	beq.n	80097ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	631a      	str	r2, [r3, #48]	; 0x30
 80097e8:	e005      	b.n	80097f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80097ea:	6978      	ldr	r0, [r7, #20]
 80097ec:	f001 fce8 	bl	800b1c0 <vPortFree>
 80097f0:	e001      	b.n	80097f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80097f2:	2300      	movs	r3, #0
 80097f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d017      	beq.n	800982c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009804:	88fa      	ldrh	r2, [r7, #6]
 8009806:	2300      	movs	r3, #0
 8009808:	9303      	str	r3, [sp, #12]
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	9302      	str	r3, [sp, #8]
 800980e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009810:	9301      	str	r3, [sp, #4]
 8009812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	68b9      	ldr	r1, [r7, #8]
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f000 f80e 	bl	800983c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009820:	69f8      	ldr	r0, [r7, #28]
 8009822:	f000 f89b 	bl	800995c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009826:	2301      	movs	r3, #1
 8009828:	61bb      	str	r3, [r7, #24]
 800982a:	e002      	b.n	8009832 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800982c:	f04f 33ff 	mov.w	r3, #4294967295
 8009830:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009832:	69bb      	ldr	r3, [r7, #24]
	}
 8009834:	4618      	mov	r0, r3
 8009836:	3720      	adds	r7, #32
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b088      	sub	sp, #32
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
 8009848:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	461a      	mov	r2, r3
 8009854:	21a5      	movs	r1, #165	; 0xa5
 8009856:	f001 fe57 	bl	800b508 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009864:	3b01      	subs	r3, #1
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	f023 0307 	bic.w	r3, r3, #7
 8009872:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	f003 0307 	and.w	r3, r3, #7
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00a      	beq.n	8009894 <prvInitialiseNewTask+0x58>
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	617b      	str	r3, [r7, #20]
}
 8009890:	bf00      	nop
 8009892:	e7fe      	b.n	8009892 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d01f      	beq.n	80098da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800989a:	2300      	movs	r3, #0
 800989c:	61fb      	str	r3, [r7, #28]
 800989e:	e012      	b.n	80098c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098a0:	68ba      	ldr	r2, [r7, #8]
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	4413      	add	r3, r2
 80098a6:	7819      	ldrb	r1, [r3, #0]
 80098a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	4413      	add	r3, r2
 80098ae:	3334      	adds	r3, #52	; 0x34
 80098b0:	460a      	mov	r2, r1
 80098b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	4413      	add	r3, r2
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d006      	beq.n	80098ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	3301      	adds	r3, #1
 80098c4:	61fb      	str	r3, [r7, #28]
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	2b0f      	cmp	r3, #15
 80098ca:	d9e9      	bls.n	80098a0 <prvInitialiseNewTask+0x64>
 80098cc:	e000      	b.n	80098d0 <prvInitialiseNewTask+0x94>
			{
				break;
 80098ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80098d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098d8:	e003      	b.n	80098e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80098da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098dc:	2200      	movs	r2, #0
 80098de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80098e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e4:	2b37      	cmp	r3, #55	; 0x37
 80098e6:	d901      	bls.n	80098ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80098e8:	2337      	movs	r3, #55	; 0x37
 80098ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80098ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80098f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80098f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fa:	2200      	movs	r2, #0
 80098fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80098fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009900:	3304      	adds	r3, #4
 8009902:	4618      	mov	r0, r3
 8009904:	f7ff f978 	bl	8008bf8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990a:	3318      	adds	r3, #24
 800990c:	4618      	mov	r0, r3
 800990e:	f7ff f973 	bl	8008bf8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009916:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800991e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009920:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009926:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992a:	2200      	movs	r2, #0
 800992c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800992e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009930:	2200      	movs	r2, #0
 8009932:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009936:	683a      	ldr	r2, [r7, #0]
 8009938:	68f9      	ldr	r1, [r7, #12]
 800993a:	69b8      	ldr	r0, [r7, #24]
 800993c:	f001 f928 	bl	800ab90 <pxPortInitialiseStack>
 8009940:	4602      	mov	r2, r0
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009948:	2b00      	cmp	r3, #0
 800994a:	d002      	beq.n	8009952 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800994c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009950:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009952:	bf00      	nop
 8009954:	3720      	adds	r7, #32
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
	...

0800995c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009964:	f001 fa3e 	bl	800ade4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009968:	4b2d      	ldr	r3, [pc, #180]	; (8009a20 <prvAddNewTaskToReadyList+0xc4>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	3301      	adds	r3, #1
 800996e:	4a2c      	ldr	r2, [pc, #176]	; (8009a20 <prvAddNewTaskToReadyList+0xc4>)
 8009970:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009972:	4b2c      	ldr	r3, [pc, #176]	; (8009a24 <prvAddNewTaskToReadyList+0xc8>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d109      	bne.n	800998e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800997a:	4a2a      	ldr	r2, [pc, #168]	; (8009a24 <prvAddNewTaskToReadyList+0xc8>)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009980:	4b27      	ldr	r3, [pc, #156]	; (8009a20 <prvAddNewTaskToReadyList+0xc4>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d110      	bne.n	80099aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009988:	f000 fc16 	bl	800a1b8 <prvInitialiseTaskLists>
 800998c:	e00d      	b.n	80099aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800998e:	4b26      	ldr	r3, [pc, #152]	; (8009a28 <prvAddNewTaskToReadyList+0xcc>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d109      	bne.n	80099aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009996:	4b23      	ldr	r3, [pc, #140]	; (8009a24 <prvAddNewTaskToReadyList+0xc8>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d802      	bhi.n	80099aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80099a4:	4a1f      	ldr	r2, [pc, #124]	; (8009a24 <prvAddNewTaskToReadyList+0xc8>)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80099aa:	4b20      	ldr	r3, [pc, #128]	; (8009a2c <prvAddNewTaskToReadyList+0xd0>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3301      	adds	r3, #1
 80099b0:	4a1e      	ldr	r2, [pc, #120]	; (8009a2c <prvAddNewTaskToReadyList+0xd0>)
 80099b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80099b4:	4b1d      	ldr	r3, [pc, #116]	; (8009a2c <prvAddNewTaskToReadyList+0xd0>)
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c0:	4b1b      	ldr	r3, [pc, #108]	; (8009a30 <prvAddNewTaskToReadyList+0xd4>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d903      	bls.n	80099d0 <prvAddNewTaskToReadyList+0x74>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099cc:	4a18      	ldr	r2, [pc, #96]	; (8009a30 <prvAddNewTaskToReadyList+0xd4>)
 80099ce:	6013      	str	r3, [r2, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099d4:	4613      	mov	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	4413      	add	r3, r2
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	4a15      	ldr	r2, [pc, #84]	; (8009a34 <prvAddNewTaskToReadyList+0xd8>)
 80099de:	441a      	add	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3304      	adds	r3, #4
 80099e4:	4619      	mov	r1, r3
 80099e6:	4610      	mov	r0, r2
 80099e8:	f7ff f913 	bl	8008c12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80099ec:	f001 fa2a 	bl	800ae44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80099f0:	4b0d      	ldr	r3, [pc, #52]	; (8009a28 <prvAddNewTaskToReadyList+0xcc>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d00e      	beq.n	8009a16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80099f8:	4b0a      	ldr	r3, [pc, #40]	; (8009a24 <prvAddNewTaskToReadyList+0xc8>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d207      	bcs.n	8009a16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a06:	4b0c      	ldr	r3, [pc, #48]	; (8009a38 <prvAddNewTaskToReadyList+0xdc>)
 8009a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a16:	bf00      	nop
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	2000110c 	.word	0x2000110c
 8009a24:	20000c38 	.word	0x20000c38
 8009a28:	20001118 	.word	0x20001118
 8009a2c:	20001128 	.word	0x20001128
 8009a30:	20001114 	.word	0x20001114
 8009a34:	20000c3c 	.word	0x20000c3c
 8009a38:	e000ed04 	.word	0xe000ed04

08009a3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009a44:	2300      	movs	r3, #0
 8009a46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d017      	beq.n	8009a7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009a4e:	4b13      	ldr	r3, [pc, #76]	; (8009a9c <vTaskDelay+0x60>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00a      	beq.n	8009a6c <vTaskDelay+0x30>
	__asm volatile
 8009a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5a:	f383 8811 	msr	BASEPRI, r3
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f3bf 8f4f 	dsb	sy
 8009a66:	60bb      	str	r3, [r7, #8]
}
 8009a68:	bf00      	nop
 8009a6a:	e7fe      	b.n	8009a6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009a6c:	f000 f880 	bl	8009b70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a70:	2100      	movs	r1, #0
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 fcea 	bl	800a44c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009a78:	f000 f888 	bl	8009b8c <xTaskResumeAll>
 8009a7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d107      	bne.n	8009a94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009a84:	4b06      	ldr	r3, [pc, #24]	; (8009aa0 <vTaskDelay+0x64>)
 8009a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a8a:	601a      	str	r2, [r3, #0]
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a94:	bf00      	nop
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	20001134 	.word	0x20001134
 8009aa0:	e000ed04 	.word	0xe000ed04

08009aa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b08a      	sub	sp, #40	; 0x28
 8009aa8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009ab2:	463a      	mov	r2, r7
 8009ab4:	1d39      	adds	r1, r7, #4
 8009ab6:	f107 0308 	add.w	r3, r7, #8
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7ff f848 	bl	8008b50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009ac0:	6839      	ldr	r1, [r7, #0]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	9202      	str	r2, [sp, #8]
 8009ac8:	9301      	str	r3, [sp, #4]
 8009aca:	2300      	movs	r3, #0
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	2300      	movs	r3, #0
 8009ad0:	460a      	mov	r2, r1
 8009ad2:	4921      	ldr	r1, [pc, #132]	; (8009b58 <vTaskStartScheduler+0xb4>)
 8009ad4:	4821      	ldr	r0, [pc, #132]	; (8009b5c <vTaskStartScheduler+0xb8>)
 8009ad6:	f7ff fe0f 	bl	80096f8 <xTaskCreateStatic>
 8009ada:	4603      	mov	r3, r0
 8009adc:	4a20      	ldr	r2, [pc, #128]	; (8009b60 <vTaskStartScheduler+0xbc>)
 8009ade:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ae0:	4b1f      	ldr	r3, [pc, #124]	; (8009b60 <vTaskStartScheduler+0xbc>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d002      	beq.n	8009aee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	617b      	str	r3, [r7, #20]
 8009aec:	e001      	b.n	8009af2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009aee:	2300      	movs	r3, #0
 8009af0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d102      	bne.n	8009afe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009af8:	f000 fcfc 	bl	800a4f4 <xTimerCreateTimerTask>
 8009afc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d116      	bne.n	8009b32 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	613b      	str	r3, [r7, #16]
}
 8009b16:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009b18:	4b12      	ldr	r3, [pc, #72]	; (8009b64 <vTaskStartScheduler+0xc0>)
 8009b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009b20:	4b11      	ldr	r3, [pc, #68]	; (8009b68 <vTaskStartScheduler+0xc4>)
 8009b22:	2201      	movs	r2, #1
 8009b24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009b26:	4b11      	ldr	r3, [pc, #68]	; (8009b6c <vTaskStartScheduler+0xc8>)
 8009b28:	2200      	movs	r2, #0
 8009b2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009b2c:	f001 f8b8 	bl	800aca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b30:	e00e      	b.n	8009b50 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b38:	d10a      	bne.n	8009b50 <vTaskStartScheduler+0xac>
	__asm volatile
 8009b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3e:	f383 8811 	msr	BASEPRI, r3
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	60fb      	str	r3, [r7, #12]
}
 8009b4c:	bf00      	nop
 8009b4e:	e7fe      	b.n	8009b4e <vTaskStartScheduler+0xaa>
}
 8009b50:	bf00      	nop
 8009b52:	3718      	adds	r7, #24
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	0800eb30 	.word	0x0800eb30
 8009b5c:	0800a189 	.word	0x0800a189
 8009b60:	20001130 	.word	0x20001130
 8009b64:	2000112c 	.word	0x2000112c
 8009b68:	20001118 	.word	0x20001118
 8009b6c:	20001110 	.word	0x20001110

08009b70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b70:	b480      	push	{r7}
 8009b72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009b74:	4b04      	ldr	r3, [pc, #16]	; (8009b88 <vTaskSuspendAll+0x18>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	4a03      	ldr	r2, [pc, #12]	; (8009b88 <vTaskSuspendAll+0x18>)
 8009b7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009b7e:	bf00      	nop
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr
 8009b88:	20001134 	.word	0x20001134

08009b8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b92:	2300      	movs	r3, #0
 8009b94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b96:	2300      	movs	r3, #0
 8009b98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009b9a:	4b42      	ldr	r3, [pc, #264]	; (8009ca4 <xTaskResumeAll+0x118>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10a      	bne.n	8009bb8 <xTaskResumeAll+0x2c>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	603b      	str	r3, [r7, #0]
}
 8009bb4:	bf00      	nop
 8009bb6:	e7fe      	b.n	8009bb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009bb8:	f001 f914 	bl	800ade4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009bbc:	4b39      	ldr	r3, [pc, #228]	; (8009ca4 <xTaskResumeAll+0x118>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	4a38      	ldr	r2, [pc, #224]	; (8009ca4 <xTaskResumeAll+0x118>)
 8009bc4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bc6:	4b37      	ldr	r3, [pc, #220]	; (8009ca4 <xTaskResumeAll+0x118>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d162      	bne.n	8009c94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009bce:	4b36      	ldr	r3, [pc, #216]	; (8009ca8 <xTaskResumeAll+0x11c>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d05e      	beq.n	8009c94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bd6:	e02f      	b.n	8009c38 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bd8:	4b34      	ldr	r3, [pc, #208]	; (8009cac <xTaskResumeAll+0x120>)
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	3318      	adds	r3, #24
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7ff f871 	bl	8008ccc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	3304      	adds	r3, #4
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7ff f86c 	bl	8008ccc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf8:	4b2d      	ldr	r3, [pc, #180]	; (8009cb0 <xTaskResumeAll+0x124>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d903      	bls.n	8009c08 <xTaskResumeAll+0x7c>
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c04:	4a2a      	ldr	r2, [pc, #168]	; (8009cb0 <xTaskResumeAll+0x124>)
 8009c06:	6013      	str	r3, [r2, #0]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	4413      	add	r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	4a27      	ldr	r2, [pc, #156]	; (8009cb4 <xTaskResumeAll+0x128>)
 8009c16:	441a      	add	r2, r3
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	3304      	adds	r3, #4
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	4610      	mov	r0, r2
 8009c20:	f7fe fff7 	bl	8008c12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c28:	4b23      	ldr	r3, [pc, #140]	; (8009cb8 <xTaskResumeAll+0x12c>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d302      	bcc.n	8009c38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009c32:	4b22      	ldr	r3, [pc, #136]	; (8009cbc <xTaskResumeAll+0x130>)
 8009c34:	2201      	movs	r2, #1
 8009c36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c38:	4b1c      	ldr	r3, [pc, #112]	; (8009cac <xTaskResumeAll+0x120>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1cb      	bne.n	8009bd8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c46:	f000 fb55 	bl	800a2f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009c4a:	4b1d      	ldr	r3, [pc, #116]	; (8009cc0 <xTaskResumeAll+0x134>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d010      	beq.n	8009c78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c56:	f000 f847 	bl	8009ce8 <xTaskIncrementTick>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009c60:	4b16      	ldr	r3, [pc, #88]	; (8009cbc <xTaskResumeAll+0x130>)
 8009c62:	2201      	movs	r2, #1
 8009c64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1f1      	bne.n	8009c56 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009c72:	4b13      	ldr	r3, [pc, #76]	; (8009cc0 <xTaskResumeAll+0x134>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c78:	4b10      	ldr	r3, [pc, #64]	; (8009cbc <xTaskResumeAll+0x130>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d009      	beq.n	8009c94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c80:	2301      	movs	r3, #1
 8009c82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c84:	4b0f      	ldr	r3, [pc, #60]	; (8009cc4 <xTaskResumeAll+0x138>)
 8009c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c8a:	601a      	str	r2, [r3, #0]
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c94:	f001 f8d6 	bl	800ae44 <vPortExitCritical>

	return xAlreadyYielded;
 8009c98:	68bb      	ldr	r3, [r7, #8]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	20001134 	.word	0x20001134
 8009ca8:	2000110c 	.word	0x2000110c
 8009cac:	200010cc 	.word	0x200010cc
 8009cb0:	20001114 	.word	0x20001114
 8009cb4:	20000c3c 	.word	0x20000c3c
 8009cb8:	20000c38 	.word	0x20000c38
 8009cbc:	20001120 	.word	0x20001120
 8009cc0:	2000111c 	.word	0x2000111c
 8009cc4:	e000ed04 	.word	0xe000ed04

08009cc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009cce:	4b05      	ldr	r3, [pc, #20]	; (8009ce4 <xTaskGetTickCount+0x1c>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009cd4:	687b      	ldr	r3, [r7, #4]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	20001110 	.word	0x20001110

08009ce8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cf2:	4b4f      	ldr	r3, [pc, #316]	; (8009e30 <xTaskIncrementTick+0x148>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f040 808f 	bne.w	8009e1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009cfc:	4b4d      	ldr	r3, [pc, #308]	; (8009e34 <xTaskIncrementTick+0x14c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	3301      	adds	r3, #1
 8009d02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d04:	4a4b      	ldr	r2, [pc, #300]	; (8009e34 <xTaskIncrementTick+0x14c>)
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d120      	bne.n	8009d52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d10:	4b49      	ldr	r3, [pc, #292]	; (8009e38 <xTaskIncrementTick+0x150>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00a      	beq.n	8009d30 <xTaskIncrementTick+0x48>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	603b      	str	r3, [r7, #0]
}
 8009d2c:	bf00      	nop
 8009d2e:	e7fe      	b.n	8009d2e <xTaskIncrementTick+0x46>
 8009d30:	4b41      	ldr	r3, [pc, #260]	; (8009e38 <xTaskIncrementTick+0x150>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	60fb      	str	r3, [r7, #12]
 8009d36:	4b41      	ldr	r3, [pc, #260]	; (8009e3c <xTaskIncrementTick+0x154>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a3f      	ldr	r2, [pc, #252]	; (8009e38 <xTaskIncrementTick+0x150>)
 8009d3c:	6013      	str	r3, [r2, #0]
 8009d3e:	4a3f      	ldr	r2, [pc, #252]	; (8009e3c <xTaskIncrementTick+0x154>)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6013      	str	r3, [r2, #0]
 8009d44:	4b3e      	ldr	r3, [pc, #248]	; (8009e40 <xTaskIncrementTick+0x158>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	4a3d      	ldr	r2, [pc, #244]	; (8009e40 <xTaskIncrementTick+0x158>)
 8009d4c:	6013      	str	r3, [r2, #0]
 8009d4e:	f000 fad1 	bl	800a2f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d52:	4b3c      	ldr	r3, [pc, #240]	; (8009e44 <xTaskIncrementTick+0x15c>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	693a      	ldr	r2, [r7, #16]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d349      	bcc.n	8009df0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d5c:	4b36      	ldr	r3, [pc, #216]	; (8009e38 <xTaskIncrementTick+0x150>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d104      	bne.n	8009d70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d66:	4b37      	ldr	r3, [pc, #220]	; (8009e44 <xTaskIncrementTick+0x15c>)
 8009d68:	f04f 32ff 	mov.w	r2, #4294967295
 8009d6c:	601a      	str	r2, [r3, #0]
					break;
 8009d6e:	e03f      	b.n	8009df0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d70:	4b31      	ldr	r3, [pc, #196]	; (8009e38 <xTaskIncrementTick+0x150>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d203      	bcs.n	8009d90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009d88:	4a2e      	ldr	r2, [pc, #184]	; (8009e44 <xTaskIncrementTick+0x15c>)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009d8e:	e02f      	b.n	8009df0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	3304      	adds	r3, #4
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fe ff99 	bl	8008ccc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d004      	beq.n	8009dac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	3318      	adds	r3, #24
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fe ff90 	bl	8008ccc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db0:	4b25      	ldr	r3, [pc, #148]	; (8009e48 <xTaskIncrementTick+0x160>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d903      	bls.n	8009dc0 <xTaskIncrementTick+0xd8>
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbc:	4a22      	ldr	r2, [pc, #136]	; (8009e48 <xTaskIncrementTick+0x160>)
 8009dbe:	6013      	str	r3, [r2, #0]
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4413      	add	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4a1f      	ldr	r2, [pc, #124]	; (8009e4c <xTaskIncrementTick+0x164>)
 8009dce:	441a      	add	r2, r3
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	3304      	adds	r3, #4
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	4610      	mov	r0, r2
 8009dd8:	f7fe ff1b 	bl	8008c12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de0:	4b1b      	ldr	r3, [pc, #108]	; (8009e50 <xTaskIncrementTick+0x168>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d3b8      	bcc.n	8009d5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009dea:	2301      	movs	r3, #1
 8009dec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dee:	e7b5      	b.n	8009d5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009df0:	4b17      	ldr	r3, [pc, #92]	; (8009e50 <xTaskIncrementTick+0x168>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df6:	4915      	ldr	r1, [pc, #84]	; (8009e4c <xTaskIncrementTick+0x164>)
 8009df8:	4613      	mov	r3, r2
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4413      	add	r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	440b      	add	r3, r1
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d901      	bls.n	8009e0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009e0c:	4b11      	ldr	r3, [pc, #68]	; (8009e54 <xTaskIncrementTick+0x16c>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d007      	beq.n	8009e24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009e14:	2301      	movs	r3, #1
 8009e16:	617b      	str	r3, [r7, #20]
 8009e18:	e004      	b.n	8009e24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009e1a:	4b0f      	ldr	r3, [pc, #60]	; (8009e58 <xTaskIncrementTick+0x170>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	4a0d      	ldr	r2, [pc, #52]	; (8009e58 <xTaskIncrementTick+0x170>)
 8009e22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009e24:	697b      	ldr	r3, [r7, #20]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3718      	adds	r7, #24
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	20001134 	.word	0x20001134
 8009e34:	20001110 	.word	0x20001110
 8009e38:	200010c4 	.word	0x200010c4
 8009e3c:	200010c8 	.word	0x200010c8
 8009e40:	20001124 	.word	0x20001124
 8009e44:	2000112c 	.word	0x2000112c
 8009e48:	20001114 	.word	0x20001114
 8009e4c:	20000c3c 	.word	0x20000c3c
 8009e50:	20000c38 	.word	0x20000c38
 8009e54:	20001120 	.word	0x20001120
 8009e58:	2000111c 	.word	0x2000111c

08009e5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e62:	4b28      	ldr	r3, [pc, #160]	; (8009f04 <vTaskSwitchContext+0xa8>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d003      	beq.n	8009e72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e6a:	4b27      	ldr	r3, [pc, #156]	; (8009f08 <vTaskSwitchContext+0xac>)
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e70:	e041      	b.n	8009ef6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009e72:	4b25      	ldr	r3, [pc, #148]	; (8009f08 <vTaskSwitchContext+0xac>)
 8009e74:	2200      	movs	r2, #0
 8009e76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e78:	4b24      	ldr	r3, [pc, #144]	; (8009f0c <vTaskSwitchContext+0xb0>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	60fb      	str	r3, [r7, #12]
 8009e7e:	e010      	b.n	8009ea2 <vTaskSwitchContext+0x46>
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10a      	bne.n	8009e9c <vTaskSwitchContext+0x40>
	__asm volatile
 8009e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8a:	f383 8811 	msr	BASEPRI, r3
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	607b      	str	r3, [r7, #4]
}
 8009e98:	bf00      	nop
 8009e9a:	e7fe      	b.n	8009e9a <vTaskSwitchContext+0x3e>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	60fb      	str	r3, [r7, #12]
 8009ea2:	491b      	ldr	r1, [pc, #108]	; (8009f10 <vTaskSwitchContext+0xb4>)
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	4413      	add	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	440b      	add	r3, r1
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d0e4      	beq.n	8009e80 <vTaskSwitchContext+0x24>
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4413      	add	r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4a13      	ldr	r2, [pc, #76]	; (8009f10 <vTaskSwitchContext+0xb4>)
 8009ec2:	4413      	add	r3, r2
 8009ec4:	60bb      	str	r3, [r7, #8]
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	685a      	ldr	r2, [r3, #4]
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	605a      	str	r2, [r3, #4]
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	685a      	ldr	r2, [r3, #4]
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	3308      	adds	r3, #8
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d104      	bne.n	8009ee6 <vTaskSwitchContext+0x8a>
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	685a      	ldr	r2, [r3, #4]
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	605a      	str	r2, [r3, #4]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	4a09      	ldr	r2, [pc, #36]	; (8009f14 <vTaskSwitchContext+0xb8>)
 8009eee:	6013      	str	r3, [r2, #0]
 8009ef0:	4a06      	ldr	r2, [pc, #24]	; (8009f0c <vTaskSwitchContext+0xb0>)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6013      	str	r3, [r2, #0]
}
 8009ef6:	bf00      	nop
 8009ef8:	3714      	adds	r7, #20
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	20001134 	.word	0x20001134
 8009f08:	20001120 	.word	0x20001120
 8009f0c:	20001114 	.word	0x20001114
 8009f10:	20000c3c 	.word	0x20000c3c
 8009f14:	20000c38 	.word	0x20000c38

08009f18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10a      	bne.n	8009f3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	60fb      	str	r3, [r7, #12]
}
 8009f3a:	bf00      	nop
 8009f3c:	e7fe      	b.n	8009f3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f3e:	4b07      	ldr	r3, [pc, #28]	; (8009f5c <vTaskPlaceOnEventList+0x44>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3318      	adds	r3, #24
 8009f44:	4619      	mov	r1, r3
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f7fe fe87 	bl	8008c5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f4c:	2101      	movs	r1, #1
 8009f4e:	6838      	ldr	r0, [r7, #0]
 8009f50:	f000 fa7c 	bl	800a44c <prvAddCurrentTaskToDelayedList>
}
 8009f54:	bf00      	nop
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	20000c38 	.word	0x20000c38

08009f60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10a      	bne.n	8009f88 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f76:	f383 8811 	msr	BASEPRI, r3
 8009f7a:	f3bf 8f6f 	isb	sy
 8009f7e:	f3bf 8f4f 	dsb	sy
 8009f82:	617b      	str	r3, [r7, #20]
}
 8009f84:	bf00      	nop
 8009f86:	e7fe      	b.n	8009f86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f88:	4b0a      	ldr	r3, [pc, #40]	; (8009fb4 <vTaskPlaceOnEventListRestricted+0x54>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	3318      	adds	r3, #24
 8009f8e:	4619      	mov	r1, r3
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f7fe fe3e 	bl	8008c12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d002      	beq.n	8009fa2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009fa2:	6879      	ldr	r1, [r7, #4]
 8009fa4:	68b8      	ldr	r0, [r7, #8]
 8009fa6:	f000 fa51 	bl	800a44c <prvAddCurrentTaskToDelayedList>
	}
 8009faa:	bf00      	nop
 8009fac:	3718      	adds	r7, #24
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	20000c38 	.word	0x20000c38

08009fb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d10a      	bne.n	8009fe4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd2:	f383 8811 	msr	BASEPRI, r3
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	60fb      	str	r3, [r7, #12]
}
 8009fe0:	bf00      	nop
 8009fe2:	e7fe      	b.n	8009fe2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	3318      	adds	r3, #24
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7fe fe6f 	bl	8008ccc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fee:	4b1e      	ldr	r3, [pc, #120]	; (800a068 <xTaskRemoveFromEventList+0xb0>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d11d      	bne.n	800a032 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fe fe66 	bl	8008ccc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a004:	4b19      	ldr	r3, [pc, #100]	; (800a06c <xTaskRemoveFromEventList+0xb4>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d903      	bls.n	800a014 <xTaskRemoveFromEventList+0x5c>
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a010:	4a16      	ldr	r2, [pc, #88]	; (800a06c <xTaskRemoveFromEventList+0xb4>)
 800a012:	6013      	str	r3, [r2, #0]
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a018:	4613      	mov	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4413      	add	r3, r2
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	4a13      	ldr	r2, [pc, #76]	; (800a070 <xTaskRemoveFromEventList+0xb8>)
 800a022:	441a      	add	r2, r3
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	3304      	adds	r3, #4
 800a028:	4619      	mov	r1, r3
 800a02a:	4610      	mov	r0, r2
 800a02c:	f7fe fdf1 	bl	8008c12 <vListInsertEnd>
 800a030:	e005      	b.n	800a03e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	3318      	adds	r3, #24
 800a036:	4619      	mov	r1, r3
 800a038:	480e      	ldr	r0, [pc, #56]	; (800a074 <xTaskRemoveFromEventList+0xbc>)
 800a03a:	f7fe fdea 	bl	8008c12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a042:	4b0d      	ldr	r3, [pc, #52]	; (800a078 <xTaskRemoveFromEventList+0xc0>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	429a      	cmp	r2, r3
 800a04a:	d905      	bls.n	800a058 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a04c:	2301      	movs	r3, #1
 800a04e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a050:	4b0a      	ldr	r3, [pc, #40]	; (800a07c <xTaskRemoveFromEventList+0xc4>)
 800a052:	2201      	movs	r2, #1
 800a054:	601a      	str	r2, [r3, #0]
 800a056:	e001      	b.n	800a05c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a058:	2300      	movs	r3, #0
 800a05a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a05c:	697b      	ldr	r3, [r7, #20]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3718      	adds	r7, #24
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	20001134 	.word	0x20001134
 800a06c:	20001114 	.word	0x20001114
 800a070:	20000c3c 	.word	0x20000c3c
 800a074:	200010cc 	.word	0x200010cc
 800a078:	20000c38 	.word	0x20000c38
 800a07c:	20001120 	.word	0x20001120

0800a080 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a088:	4b06      	ldr	r3, [pc, #24]	; (800a0a4 <vTaskInternalSetTimeOutState+0x24>)
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a090:	4b05      	ldr	r3, [pc, #20]	; (800a0a8 <vTaskInternalSetTimeOutState+0x28>)
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	605a      	str	r2, [r3, #4]
}
 800a098:	bf00      	nop
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr
 800a0a4:	20001124 	.word	0x20001124
 800a0a8:	20001110 	.word	0x20001110

0800a0ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b088      	sub	sp, #32
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10a      	bne.n	800a0d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	613b      	str	r3, [r7, #16]
}
 800a0ce:	bf00      	nop
 800a0d0:	e7fe      	b.n	800a0d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d10a      	bne.n	800a0ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0dc:	f383 8811 	msr	BASEPRI, r3
 800a0e0:	f3bf 8f6f 	isb	sy
 800a0e4:	f3bf 8f4f 	dsb	sy
 800a0e8:	60fb      	str	r3, [r7, #12]
}
 800a0ea:	bf00      	nop
 800a0ec:	e7fe      	b.n	800a0ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a0ee:	f000 fe79 	bl	800ade4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a0f2:	4b1d      	ldr	r3, [pc, #116]	; (800a168 <xTaskCheckForTimeOut+0xbc>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	69ba      	ldr	r2, [r7, #24]
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a10a:	d102      	bne.n	800a112 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a10c:	2300      	movs	r3, #0
 800a10e:	61fb      	str	r3, [r7, #28]
 800a110:	e023      	b.n	800a15a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	4b15      	ldr	r3, [pc, #84]	; (800a16c <xTaskCheckForTimeOut+0xc0>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d007      	beq.n	800a12e <xTaskCheckForTimeOut+0x82>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	69ba      	ldr	r2, [r7, #24]
 800a124:	429a      	cmp	r2, r3
 800a126:	d302      	bcc.n	800a12e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a128:	2301      	movs	r3, #1
 800a12a:	61fb      	str	r3, [r7, #28]
 800a12c:	e015      	b.n	800a15a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	697a      	ldr	r2, [r7, #20]
 800a134:	429a      	cmp	r2, r3
 800a136:	d20b      	bcs.n	800a150 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	1ad2      	subs	r2, r2, r3
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f7ff ff9b 	bl	800a080 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a14a:	2300      	movs	r3, #0
 800a14c:	61fb      	str	r3, [r7, #28]
 800a14e:	e004      	b.n	800a15a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	2200      	movs	r2, #0
 800a154:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a156:	2301      	movs	r3, #1
 800a158:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a15a:	f000 fe73 	bl	800ae44 <vPortExitCritical>

	return xReturn;
 800a15e:	69fb      	ldr	r3, [r7, #28]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3720      	adds	r7, #32
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	20001110 	.word	0x20001110
 800a16c:	20001124 	.word	0x20001124

0800a170 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a170:	b480      	push	{r7}
 800a172:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a174:	4b03      	ldr	r3, [pc, #12]	; (800a184 <vTaskMissedYield+0x14>)
 800a176:	2201      	movs	r2, #1
 800a178:	601a      	str	r2, [r3, #0]
}
 800a17a:	bf00      	nop
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	20001120 	.word	0x20001120

0800a188 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a190:	f000 f852 	bl	800a238 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a194:	4b06      	ldr	r3, [pc, #24]	; (800a1b0 <prvIdleTask+0x28>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d9f9      	bls.n	800a190 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a19c:	4b05      	ldr	r3, [pc, #20]	; (800a1b4 <prvIdleTask+0x2c>)
 800a19e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1a2:	601a      	str	r2, [r3, #0]
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a1ac:	e7f0      	b.n	800a190 <prvIdleTask+0x8>
 800a1ae:	bf00      	nop
 800a1b0:	20000c3c 	.word	0x20000c3c
 800a1b4:	e000ed04 	.word	0xe000ed04

0800a1b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1be:	2300      	movs	r3, #0
 800a1c0:	607b      	str	r3, [r7, #4]
 800a1c2:	e00c      	b.n	800a1de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	4a12      	ldr	r2, [pc, #72]	; (800a218 <prvInitialiseTaskLists+0x60>)
 800a1d0:	4413      	add	r3, r2
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fe fcf0 	bl	8008bb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	607b      	str	r3, [r7, #4]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2b37      	cmp	r3, #55	; 0x37
 800a1e2:	d9ef      	bls.n	800a1c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a1e4:	480d      	ldr	r0, [pc, #52]	; (800a21c <prvInitialiseTaskLists+0x64>)
 800a1e6:	f7fe fce7 	bl	8008bb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a1ea:	480d      	ldr	r0, [pc, #52]	; (800a220 <prvInitialiseTaskLists+0x68>)
 800a1ec:	f7fe fce4 	bl	8008bb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a1f0:	480c      	ldr	r0, [pc, #48]	; (800a224 <prvInitialiseTaskLists+0x6c>)
 800a1f2:	f7fe fce1 	bl	8008bb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a1f6:	480c      	ldr	r0, [pc, #48]	; (800a228 <prvInitialiseTaskLists+0x70>)
 800a1f8:	f7fe fcde 	bl	8008bb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a1fc:	480b      	ldr	r0, [pc, #44]	; (800a22c <prvInitialiseTaskLists+0x74>)
 800a1fe:	f7fe fcdb 	bl	8008bb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a202:	4b0b      	ldr	r3, [pc, #44]	; (800a230 <prvInitialiseTaskLists+0x78>)
 800a204:	4a05      	ldr	r2, [pc, #20]	; (800a21c <prvInitialiseTaskLists+0x64>)
 800a206:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a208:	4b0a      	ldr	r3, [pc, #40]	; (800a234 <prvInitialiseTaskLists+0x7c>)
 800a20a:	4a05      	ldr	r2, [pc, #20]	; (800a220 <prvInitialiseTaskLists+0x68>)
 800a20c:	601a      	str	r2, [r3, #0]
}
 800a20e:	bf00      	nop
 800a210:	3708      	adds	r7, #8
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	20000c3c 	.word	0x20000c3c
 800a21c:	2000109c 	.word	0x2000109c
 800a220:	200010b0 	.word	0x200010b0
 800a224:	200010cc 	.word	0x200010cc
 800a228:	200010e0 	.word	0x200010e0
 800a22c:	200010f8 	.word	0x200010f8
 800a230:	200010c4 	.word	0x200010c4
 800a234:	200010c8 	.word	0x200010c8

0800a238 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a23e:	e019      	b.n	800a274 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a240:	f000 fdd0 	bl	800ade4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a244:	4b10      	ldr	r3, [pc, #64]	; (800a288 <prvCheckTasksWaitingTermination+0x50>)
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	3304      	adds	r3, #4
 800a250:	4618      	mov	r0, r3
 800a252:	f7fe fd3b 	bl	8008ccc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a256:	4b0d      	ldr	r3, [pc, #52]	; (800a28c <prvCheckTasksWaitingTermination+0x54>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3b01      	subs	r3, #1
 800a25c:	4a0b      	ldr	r2, [pc, #44]	; (800a28c <prvCheckTasksWaitingTermination+0x54>)
 800a25e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a260:	4b0b      	ldr	r3, [pc, #44]	; (800a290 <prvCheckTasksWaitingTermination+0x58>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3b01      	subs	r3, #1
 800a266:	4a0a      	ldr	r2, [pc, #40]	; (800a290 <prvCheckTasksWaitingTermination+0x58>)
 800a268:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a26a:	f000 fdeb 	bl	800ae44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f810 	bl	800a294 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a274:	4b06      	ldr	r3, [pc, #24]	; (800a290 <prvCheckTasksWaitingTermination+0x58>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1e1      	bne.n	800a240 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a27c:	bf00      	nop
 800a27e:	bf00      	nop
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	200010e0 	.word	0x200010e0
 800a28c:	2000110c 	.word	0x2000110c
 800a290:	200010f4 	.word	0x200010f4

0800a294 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d108      	bne.n	800a2b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f000 ff88 	bl	800b1c0 <vPortFree>
				vPortFree( pxTCB );
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 ff85 	bl	800b1c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a2b6:	e018      	b.n	800a2ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d103      	bne.n	800a2ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 ff7c 	bl	800b1c0 <vPortFree>
	}
 800a2c8:	e00f      	b.n	800a2ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d00a      	beq.n	800a2ea <prvDeleteTCB+0x56>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	60fb      	str	r3, [r7, #12]
}
 800a2e6:	bf00      	nop
 800a2e8:	e7fe      	b.n	800a2e8 <prvDeleteTCB+0x54>
	}
 800a2ea:	bf00      	nop
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
	...

0800a2f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2fa:	4b0c      	ldr	r3, [pc, #48]	; (800a32c <prvResetNextTaskUnblockTime+0x38>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d104      	bne.n	800a30e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a304:	4b0a      	ldr	r3, [pc, #40]	; (800a330 <prvResetNextTaskUnblockTime+0x3c>)
 800a306:	f04f 32ff 	mov.w	r2, #4294967295
 800a30a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a30c:	e008      	b.n	800a320 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a30e:	4b07      	ldr	r3, [pc, #28]	; (800a32c <prvResetNextTaskUnblockTime+0x38>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	4a04      	ldr	r2, [pc, #16]	; (800a330 <prvResetNextTaskUnblockTime+0x3c>)
 800a31e:	6013      	str	r3, [r2, #0]
}
 800a320:	bf00      	nop
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr
 800a32c:	200010c4 	.word	0x200010c4
 800a330:	2000112c 	.word	0x2000112c

0800a334 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a33a:	4b0b      	ldr	r3, [pc, #44]	; (800a368 <xTaskGetSchedulerState+0x34>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d102      	bne.n	800a348 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a342:	2301      	movs	r3, #1
 800a344:	607b      	str	r3, [r7, #4]
 800a346:	e008      	b.n	800a35a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a348:	4b08      	ldr	r3, [pc, #32]	; (800a36c <xTaskGetSchedulerState+0x38>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d102      	bne.n	800a356 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a350:	2302      	movs	r3, #2
 800a352:	607b      	str	r3, [r7, #4]
 800a354:	e001      	b.n	800a35a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a356:	2300      	movs	r3, #0
 800a358:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a35a:	687b      	ldr	r3, [r7, #4]
	}
 800a35c:	4618      	mov	r0, r3
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	20001118 	.word	0x20001118
 800a36c:	20001134 	.word	0x20001134

0800a370 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a370:	b580      	push	{r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a37c:	2300      	movs	r3, #0
 800a37e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d056      	beq.n	800a434 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a386:	4b2e      	ldr	r3, [pc, #184]	; (800a440 <xTaskPriorityDisinherit+0xd0>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	693a      	ldr	r2, [r7, #16]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d00a      	beq.n	800a3a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a394:	f383 8811 	msr	BASEPRI, r3
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	60fb      	str	r3, [r7, #12]
}
 800a3a2:	bf00      	nop
 800a3a4:	e7fe      	b.n	800a3a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d10a      	bne.n	800a3c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	60bb      	str	r3, [r7, #8]
}
 800a3c0:	bf00      	nop
 800a3c2:	e7fe      	b.n	800a3c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3c8:	1e5a      	subs	r2, r3, #1
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d02c      	beq.n	800a434 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d128      	bne.n	800a434 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	3304      	adds	r3, #4
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7fe fc70 	bl	8008ccc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a404:	4b0f      	ldr	r3, [pc, #60]	; (800a444 <xTaskPriorityDisinherit+0xd4>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d903      	bls.n	800a414 <xTaskPriorityDisinherit+0xa4>
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a410:	4a0c      	ldr	r2, [pc, #48]	; (800a444 <xTaskPriorityDisinherit+0xd4>)
 800a412:	6013      	str	r3, [r2, #0]
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a418:	4613      	mov	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4413      	add	r3, r2
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	4a09      	ldr	r2, [pc, #36]	; (800a448 <xTaskPriorityDisinherit+0xd8>)
 800a422:	441a      	add	r2, r3
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	3304      	adds	r3, #4
 800a428:	4619      	mov	r1, r3
 800a42a:	4610      	mov	r0, r2
 800a42c:	f7fe fbf1 	bl	8008c12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a430:	2301      	movs	r3, #1
 800a432:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a434:	697b      	ldr	r3, [r7, #20]
	}
 800a436:	4618      	mov	r0, r3
 800a438:	3718      	adds	r7, #24
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	20000c38 	.word	0x20000c38
 800a444:	20001114 	.word	0x20001114
 800a448:	20000c3c 	.word	0x20000c3c

0800a44c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a456:	4b21      	ldr	r3, [pc, #132]	; (800a4dc <prvAddCurrentTaskToDelayedList+0x90>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a45c:	4b20      	ldr	r3, [pc, #128]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	3304      	adds	r3, #4
 800a462:	4618      	mov	r0, r3
 800a464:	f7fe fc32 	bl	8008ccc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a46e:	d10a      	bne.n	800a486 <prvAddCurrentTaskToDelayedList+0x3a>
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d007      	beq.n	800a486 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a476:	4b1a      	ldr	r3, [pc, #104]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	3304      	adds	r3, #4
 800a47c:	4619      	mov	r1, r3
 800a47e:	4819      	ldr	r0, [pc, #100]	; (800a4e4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a480:	f7fe fbc7 	bl	8008c12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a484:	e026      	b.n	800a4d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4413      	add	r3, r2
 800a48c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a48e:	4b14      	ldr	r3, [pc, #80]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d209      	bcs.n	800a4b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a49e:	4b12      	ldr	r3, [pc, #72]	; (800a4e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	4b0f      	ldr	r3, [pc, #60]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	3304      	adds	r3, #4
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	4610      	mov	r0, r2
 800a4ac:	f7fe fbd5 	bl	8008c5a <vListInsert>
}
 800a4b0:	e010      	b.n	800a4d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4b2:	4b0e      	ldr	r3, [pc, #56]	; (800a4ec <prvAddCurrentTaskToDelayedList+0xa0>)
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	4b0a      	ldr	r3, [pc, #40]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	3304      	adds	r3, #4
 800a4bc:	4619      	mov	r1, r3
 800a4be:	4610      	mov	r0, r2
 800a4c0:	f7fe fbcb 	bl	8008c5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a4c4:	4b0a      	ldr	r3, [pc, #40]	; (800a4f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d202      	bcs.n	800a4d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a4ce:	4a08      	ldr	r2, [pc, #32]	; (800a4f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	6013      	str	r3, [r2, #0]
}
 800a4d4:	bf00      	nop
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	20001110 	.word	0x20001110
 800a4e0:	20000c38 	.word	0x20000c38
 800a4e4:	200010f8 	.word	0x200010f8
 800a4e8:	200010c8 	.word	0x200010c8
 800a4ec:	200010c4 	.word	0x200010c4
 800a4f0:	2000112c 	.word	0x2000112c

0800a4f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08a      	sub	sp, #40	; 0x28
 800a4f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a4fe:	f000 fb07 	bl	800ab10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a502:	4b1c      	ldr	r3, [pc, #112]	; (800a574 <xTimerCreateTimerTask+0x80>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d021      	beq.n	800a54e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a50a:	2300      	movs	r3, #0
 800a50c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a50e:	2300      	movs	r3, #0
 800a510:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a512:	1d3a      	adds	r2, r7, #4
 800a514:	f107 0108 	add.w	r1, r7, #8
 800a518:	f107 030c 	add.w	r3, r7, #12
 800a51c:	4618      	mov	r0, r3
 800a51e:	f7fe fb31 	bl	8008b84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a522:	6879      	ldr	r1, [r7, #4]
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	9202      	str	r2, [sp, #8]
 800a52a:	9301      	str	r3, [sp, #4]
 800a52c:	2302      	movs	r3, #2
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	2300      	movs	r3, #0
 800a532:	460a      	mov	r2, r1
 800a534:	4910      	ldr	r1, [pc, #64]	; (800a578 <xTimerCreateTimerTask+0x84>)
 800a536:	4811      	ldr	r0, [pc, #68]	; (800a57c <xTimerCreateTimerTask+0x88>)
 800a538:	f7ff f8de 	bl	80096f8 <xTaskCreateStatic>
 800a53c:	4603      	mov	r3, r0
 800a53e:	4a10      	ldr	r2, [pc, #64]	; (800a580 <xTimerCreateTimerTask+0x8c>)
 800a540:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a542:	4b0f      	ldr	r3, [pc, #60]	; (800a580 <xTimerCreateTimerTask+0x8c>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a54a:	2301      	movs	r3, #1
 800a54c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d10a      	bne.n	800a56a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a558:	f383 8811 	msr	BASEPRI, r3
 800a55c:	f3bf 8f6f 	isb	sy
 800a560:	f3bf 8f4f 	dsb	sy
 800a564:	613b      	str	r3, [r7, #16]
}
 800a566:	bf00      	nop
 800a568:	e7fe      	b.n	800a568 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a56a:	697b      	ldr	r3, [r7, #20]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3718      	adds	r7, #24
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	20001168 	.word	0x20001168
 800a578:	0800eb38 	.word	0x0800eb38
 800a57c:	0800a6b9 	.word	0x0800a6b9
 800a580:	2000116c 	.word	0x2000116c

0800a584 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b08a      	sub	sp, #40	; 0x28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
 800a590:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a592:	2300      	movs	r3, #0
 800a594:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10a      	bne.n	800a5b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	623b      	str	r3, [r7, #32]
}
 800a5ae:	bf00      	nop
 800a5b0:	e7fe      	b.n	800a5b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a5b2:	4b1a      	ldr	r3, [pc, #104]	; (800a61c <xTimerGenericCommand+0x98>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d02a      	beq.n	800a610 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	2b05      	cmp	r3, #5
 800a5ca:	dc18      	bgt.n	800a5fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a5cc:	f7ff feb2 	bl	800a334 <xTaskGetSchedulerState>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d109      	bne.n	800a5ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a5d6:	4b11      	ldr	r3, [pc, #68]	; (800a61c <xTimerGenericCommand+0x98>)
 800a5d8:	6818      	ldr	r0, [r3, #0]
 800a5da:	f107 0110 	add.w	r1, r7, #16
 800a5de:	2300      	movs	r3, #0
 800a5e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5e2:	f7fe fca1 	bl	8008f28 <xQueueGenericSend>
 800a5e6:	6278      	str	r0, [r7, #36]	; 0x24
 800a5e8:	e012      	b.n	800a610 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a5ea:	4b0c      	ldr	r3, [pc, #48]	; (800a61c <xTimerGenericCommand+0x98>)
 800a5ec:	6818      	ldr	r0, [r3, #0]
 800a5ee:	f107 0110 	add.w	r1, r7, #16
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f7fe fc97 	bl	8008f28 <xQueueGenericSend>
 800a5fa:	6278      	str	r0, [r7, #36]	; 0x24
 800a5fc:	e008      	b.n	800a610 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a5fe:	4b07      	ldr	r3, [pc, #28]	; (800a61c <xTimerGenericCommand+0x98>)
 800a600:	6818      	ldr	r0, [r3, #0]
 800a602:	f107 0110 	add.w	r1, r7, #16
 800a606:	2300      	movs	r3, #0
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	f7fe fd8b 	bl	8009124 <xQueueGenericSendFromISR>
 800a60e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a612:	4618      	mov	r0, r3
 800a614:	3728      	adds	r7, #40	; 0x28
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	20001168 	.word	0x20001168

0800a620 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b088      	sub	sp, #32
 800a624:	af02      	add	r7, sp, #8
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a62a:	4b22      	ldr	r3, [pc, #136]	; (800a6b4 <prvProcessExpiredTimer+0x94>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	3304      	adds	r3, #4
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fe fb47 	bl	8008ccc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a644:	f003 0304 	and.w	r3, r3, #4
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d022      	beq.n	800a692 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	699a      	ldr	r2, [r3, #24]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	18d1      	adds	r1, r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	683a      	ldr	r2, [r7, #0]
 800a658:	6978      	ldr	r0, [r7, #20]
 800a65a:	f000 f8d1 	bl	800a800 <prvInsertTimerInActiveList>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d01f      	beq.n	800a6a4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a664:	2300      	movs	r3, #0
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	2300      	movs	r3, #0
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	2100      	movs	r1, #0
 800a66e:	6978      	ldr	r0, [r7, #20]
 800a670:	f7ff ff88 	bl	800a584 <xTimerGenericCommand>
 800a674:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d113      	bne.n	800a6a4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a680:	f383 8811 	msr	BASEPRI, r3
 800a684:	f3bf 8f6f 	isb	sy
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	60fb      	str	r3, [r7, #12]
}
 800a68e:	bf00      	nop
 800a690:	e7fe      	b.n	800a690 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a698:	f023 0301 	bic.w	r3, r3, #1
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	6a1b      	ldr	r3, [r3, #32]
 800a6a8:	6978      	ldr	r0, [r7, #20]
 800a6aa:	4798      	blx	r3
}
 800a6ac:	bf00      	nop
 800a6ae:	3718      	adds	r7, #24
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	20001160 	.word	0x20001160

0800a6b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a6c0:	f107 0308 	add.w	r3, r7, #8
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f000 f857 	bl	800a778 <prvGetNextExpireTime>
 800a6ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f000 f803 	bl	800a6dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a6d6:	f000 f8d5 	bl	800a884 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a6da:	e7f1      	b.n	800a6c0 <prvTimerTask+0x8>

0800a6dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a6e6:	f7ff fa43 	bl	8009b70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6ea:	f107 0308 	add.w	r3, r7, #8
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 f866 	bl	800a7c0 <prvSampleTimeNow>
 800a6f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d130      	bne.n	800a75e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d10a      	bne.n	800a718 <prvProcessTimerOrBlockTask+0x3c>
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	429a      	cmp	r2, r3
 800a708:	d806      	bhi.n	800a718 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a70a:	f7ff fa3f 	bl	8009b8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a70e:	68f9      	ldr	r1, [r7, #12]
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f7ff ff85 	bl	800a620 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a716:	e024      	b.n	800a762 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d008      	beq.n	800a730 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a71e:	4b13      	ldr	r3, [pc, #76]	; (800a76c <prvProcessTimerOrBlockTask+0x90>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d101      	bne.n	800a72c <prvProcessTimerOrBlockTask+0x50>
 800a728:	2301      	movs	r3, #1
 800a72a:	e000      	b.n	800a72e <prvProcessTimerOrBlockTask+0x52>
 800a72c:	2300      	movs	r3, #0
 800a72e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a730:	4b0f      	ldr	r3, [pc, #60]	; (800a770 <prvProcessTimerOrBlockTask+0x94>)
 800a732:	6818      	ldr	r0, [r3, #0]
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	683a      	ldr	r2, [r7, #0]
 800a73c:	4619      	mov	r1, r3
 800a73e:	f7fe ffa7 	bl	8009690 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a742:	f7ff fa23 	bl	8009b8c <xTaskResumeAll>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d10a      	bne.n	800a762 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a74c:	4b09      	ldr	r3, [pc, #36]	; (800a774 <prvProcessTimerOrBlockTask+0x98>)
 800a74e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a752:	601a      	str	r2, [r3, #0]
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	f3bf 8f6f 	isb	sy
}
 800a75c:	e001      	b.n	800a762 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a75e:	f7ff fa15 	bl	8009b8c <xTaskResumeAll>
}
 800a762:	bf00      	nop
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	20001164 	.word	0x20001164
 800a770:	20001168 	.word	0x20001168
 800a774:	e000ed04 	.word	0xe000ed04

0800a778 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a780:	4b0e      	ldr	r3, [pc, #56]	; (800a7bc <prvGetNextExpireTime+0x44>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d101      	bne.n	800a78e <prvGetNextExpireTime+0x16>
 800a78a:	2201      	movs	r2, #1
 800a78c:	e000      	b.n	800a790 <prvGetNextExpireTime+0x18>
 800a78e:	2200      	movs	r2, #0
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d105      	bne.n	800a7a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a79c:	4b07      	ldr	r3, [pc, #28]	; (800a7bc <prvGetNextExpireTime+0x44>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	60fb      	str	r3, [r7, #12]
 800a7a6:	e001      	b.n	800a7ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3714      	adds	r7, #20
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	20001160 	.word	0x20001160

0800a7c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a7c8:	f7ff fa7e 	bl	8009cc8 <xTaskGetTickCount>
 800a7cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a7ce:	4b0b      	ldr	r3, [pc, #44]	; (800a7fc <prvSampleTimeNow+0x3c>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d205      	bcs.n	800a7e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a7d8:	f000 f936 	bl	800aa48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	601a      	str	r2, [r3, #0]
 800a7e2:	e002      	b.n	800a7ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a7ea:	4a04      	ldr	r2, [pc, #16]	; (800a7fc <prvSampleTimeNow+0x3c>)
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	20001170 	.word	0x20001170

0800a800 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b086      	sub	sp, #24
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]
 800a80c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a80e:	2300      	movs	r3, #0
 800a810:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	429a      	cmp	r2, r3
 800a824:	d812      	bhi.n	800a84c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	1ad2      	subs	r2, r2, r3
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	699b      	ldr	r3, [r3, #24]
 800a830:	429a      	cmp	r2, r3
 800a832:	d302      	bcc.n	800a83a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a834:	2301      	movs	r3, #1
 800a836:	617b      	str	r3, [r7, #20]
 800a838:	e01b      	b.n	800a872 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a83a:	4b10      	ldr	r3, [pc, #64]	; (800a87c <prvInsertTimerInActiveList+0x7c>)
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	3304      	adds	r3, #4
 800a842:	4619      	mov	r1, r3
 800a844:	4610      	mov	r0, r2
 800a846:	f7fe fa08 	bl	8008c5a <vListInsert>
 800a84a:	e012      	b.n	800a872 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	429a      	cmp	r2, r3
 800a852:	d206      	bcs.n	800a862 <prvInsertTimerInActiveList+0x62>
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d302      	bcc.n	800a862 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a85c:	2301      	movs	r3, #1
 800a85e:	617b      	str	r3, [r7, #20]
 800a860:	e007      	b.n	800a872 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a862:	4b07      	ldr	r3, [pc, #28]	; (800a880 <prvInsertTimerInActiveList+0x80>)
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3304      	adds	r3, #4
 800a86a:	4619      	mov	r1, r3
 800a86c:	4610      	mov	r0, r2
 800a86e:	f7fe f9f4 	bl	8008c5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a872:	697b      	ldr	r3, [r7, #20]
}
 800a874:	4618      	mov	r0, r3
 800a876:	3718      	adds	r7, #24
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	20001164 	.word	0x20001164
 800a880:	20001160 	.word	0x20001160

0800a884 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b08e      	sub	sp, #56	; 0x38
 800a888:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a88a:	e0ca      	b.n	800aa22 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	da18      	bge.n	800a8c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a892:	1d3b      	adds	r3, r7, #4
 800a894:	3304      	adds	r3, #4
 800a896:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d10a      	bne.n	800a8b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a2:	f383 8811 	msr	BASEPRI, r3
 800a8a6:	f3bf 8f6f 	isb	sy
 800a8aa:	f3bf 8f4f 	dsb	sy
 800a8ae:	61fb      	str	r3, [r7, #28]
}
 800a8b0:	bf00      	nop
 800a8b2:	e7fe      	b.n	800a8b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8ba:	6850      	ldr	r0, [r2, #4]
 800a8bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8be:	6892      	ldr	r2, [r2, #8]
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f2c0 80aa 	blt.w	800aa20 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d2:	695b      	ldr	r3, [r3, #20]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d004      	beq.n	800a8e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8da:	3304      	adds	r3, #4
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7fe f9f5 	bl	8008ccc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8e2:	463b      	mov	r3, r7
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7ff ff6b 	bl	800a7c0 <prvSampleTimeNow>
 800a8ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b09      	cmp	r3, #9
 800a8f0:	f200 8097 	bhi.w	800aa22 <prvProcessReceivedCommands+0x19e>
 800a8f4:	a201      	add	r2, pc, #4	; (adr r2, 800a8fc <prvProcessReceivedCommands+0x78>)
 800a8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8fa:	bf00      	nop
 800a8fc:	0800a925 	.word	0x0800a925
 800a900:	0800a925 	.word	0x0800a925
 800a904:	0800a925 	.word	0x0800a925
 800a908:	0800a999 	.word	0x0800a999
 800a90c:	0800a9ad 	.word	0x0800a9ad
 800a910:	0800a9f7 	.word	0x0800a9f7
 800a914:	0800a925 	.word	0x0800a925
 800a918:	0800a925 	.word	0x0800a925
 800a91c:	0800a999 	.word	0x0800a999
 800a920:	0800a9ad 	.word	0x0800a9ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a92a:	f043 0301 	orr.w	r3, r3, #1
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	18d1      	adds	r1, r2, r3
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a944:	f7ff ff5c 	bl	800a800 <prvInsertTimerInActiveList>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d069      	beq.n	800aa22 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a950:	6a1b      	ldr	r3, [r3, #32]
 800a952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a954:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a95c:	f003 0304 	and.w	r3, r3, #4
 800a960:	2b00      	cmp	r3, #0
 800a962:	d05e      	beq.n	800aa22 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a968:	699b      	ldr	r3, [r3, #24]
 800a96a:	441a      	add	r2, r3
 800a96c:	2300      	movs	r3, #0
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	2300      	movs	r3, #0
 800a972:	2100      	movs	r1, #0
 800a974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a976:	f7ff fe05 	bl	800a584 <xTimerGenericCommand>
 800a97a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a97c:	6a3b      	ldr	r3, [r7, #32]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d14f      	bne.n	800aa22 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a986:	f383 8811 	msr	BASEPRI, r3
 800a98a:	f3bf 8f6f 	isb	sy
 800a98e:	f3bf 8f4f 	dsb	sy
 800a992:	61bb      	str	r3, [r7, #24]
}
 800a994:	bf00      	nop
 800a996:	e7fe      	b.n	800a996 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a99e:	f023 0301 	bic.w	r3, r3, #1
 800a9a2:	b2da      	uxtb	r2, r3
 800a9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a9aa:	e03a      	b.n	800aa22 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9b2:	f043 0301 	orr.w	r3, r3, #1
 800a9b6:	b2da      	uxtb	r2, r3
 800a9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c6:	699b      	ldr	r3, [r3, #24]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10a      	bne.n	800a9e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d0:	f383 8811 	msr	BASEPRI, r3
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	617b      	str	r3, [r7, #20]
}
 800a9de:	bf00      	nop
 800a9e0:	e7fe      	b.n	800a9e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e4:	699a      	ldr	r2, [r3, #24]
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e8:	18d1      	adds	r1, r2, r3
 800a9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9f0:	f7ff ff06 	bl	800a800 <prvInsertTimerInActiveList>
					break;
 800a9f4:	e015      	b.n	800aa22 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9fc:	f003 0302 	and.w	r3, r3, #2
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d103      	bne.n	800aa0c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aa04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa06:	f000 fbdb 	bl	800b1c0 <vPortFree>
 800aa0a:	e00a      	b.n	800aa22 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa12:	f023 0301 	bic.w	r3, r3, #1
 800aa16:	b2da      	uxtb	r2, r3
 800aa18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aa1e:	e000      	b.n	800aa22 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aa20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa22:	4b08      	ldr	r3, [pc, #32]	; (800aa44 <prvProcessReceivedCommands+0x1c0>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	1d39      	adds	r1, r7, #4
 800aa28:	2200      	movs	r2, #0
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7fe fc16 	bl	800925c <xQueueReceive>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f47f af2a 	bne.w	800a88c <prvProcessReceivedCommands+0x8>
	}
}
 800aa38:	bf00      	nop
 800aa3a:	bf00      	nop
 800aa3c:	3730      	adds	r7, #48	; 0x30
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	20001168 	.word	0x20001168

0800aa48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b088      	sub	sp, #32
 800aa4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa4e:	e048      	b.n	800aae2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa50:	4b2d      	ldr	r3, [pc, #180]	; (800ab08 <prvSwitchTimerLists+0xc0>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa5a:	4b2b      	ldr	r3, [pc, #172]	; (800ab08 <prvSwitchTimerLists+0xc0>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	3304      	adds	r3, #4
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7fe f92f 	bl	8008ccc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6a1b      	ldr	r3, [r3, #32]
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa7c:	f003 0304 	and.w	r3, r3, #4
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d02e      	beq.n	800aae2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	699b      	ldr	r3, [r3, #24]
 800aa88:	693a      	ldr	r2, [r7, #16]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aa8e:	68ba      	ldr	r2, [r7, #8]
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d90e      	bls.n	800aab4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aaa2:	4b19      	ldr	r3, [pc, #100]	; (800ab08 <prvSwitchTimerLists+0xc0>)
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	3304      	adds	r3, #4
 800aaaa:	4619      	mov	r1, r3
 800aaac:	4610      	mov	r0, r2
 800aaae:	f7fe f8d4 	bl	8008c5a <vListInsert>
 800aab2:	e016      	b.n	800aae2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aab4:	2300      	movs	r3, #0
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	2300      	movs	r3, #0
 800aaba:	693a      	ldr	r2, [r7, #16]
 800aabc:	2100      	movs	r1, #0
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	f7ff fd60 	bl	800a584 <xTimerGenericCommand>
 800aac4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d10a      	bne.n	800aae2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad0:	f383 8811 	msr	BASEPRI, r3
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	f3bf 8f4f 	dsb	sy
 800aadc:	603b      	str	r3, [r7, #0]
}
 800aade:	bf00      	nop
 800aae0:	e7fe      	b.n	800aae0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aae2:	4b09      	ldr	r3, [pc, #36]	; (800ab08 <prvSwitchTimerLists+0xc0>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1b1      	bne.n	800aa50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aaec:	4b06      	ldr	r3, [pc, #24]	; (800ab08 <prvSwitchTimerLists+0xc0>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aaf2:	4b06      	ldr	r3, [pc, #24]	; (800ab0c <prvSwitchTimerLists+0xc4>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a04      	ldr	r2, [pc, #16]	; (800ab08 <prvSwitchTimerLists+0xc0>)
 800aaf8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aafa:	4a04      	ldr	r2, [pc, #16]	; (800ab0c <prvSwitchTimerLists+0xc4>)
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	6013      	str	r3, [r2, #0]
}
 800ab00:	bf00      	nop
 800ab02:	3718      	adds	r7, #24
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	20001160 	.word	0x20001160
 800ab0c:	20001164 	.word	0x20001164

0800ab10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ab16:	f000 f965 	bl	800ade4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ab1a:	4b15      	ldr	r3, [pc, #84]	; (800ab70 <prvCheckForValidListAndQueue+0x60>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d120      	bne.n	800ab64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ab22:	4814      	ldr	r0, [pc, #80]	; (800ab74 <prvCheckForValidListAndQueue+0x64>)
 800ab24:	f7fe f848 	bl	8008bb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ab28:	4813      	ldr	r0, [pc, #76]	; (800ab78 <prvCheckForValidListAndQueue+0x68>)
 800ab2a:	f7fe f845 	bl	8008bb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab2e:	4b13      	ldr	r3, [pc, #76]	; (800ab7c <prvCheckForValidListAndQueue+0x6c>)
 800ab30:	4a10      	ldr	r2, [pc, #64]	; (800ab74 <prvCheckForValidListAndQueue+0x64>)
 800ab32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab34:	4b12      	ldr	r3, [pc, #72]	; (800ab80 <prvCheckForValidListAndQueue+0x70>)
 800ab36:	4a10      	ldr	r2, [pc, #64]	; (800ab78 <prvCheckForValidListAndQueue+0x68>)
 800ab38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	9300      	str	r3, [sp, #0]
 800ab3e:	4b11      	ldr	r3, [pc, #68]	; (800ab84 <prvCheckForValidListAndQueue+0x74>)
 800ab40:	4a11      	ldr	r2, [pc, #68]	; (800ab88 <prvCheckForValidListAndQueue+0x78>)
 800ab42:	2110      	movs	r1, #16
 800ab44:	200a      	movs	r0, #10
 800ab46:	f7fe f953 	bl	8008df0 <xQueueGenericCreateStatic>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	4a08      	ldr	r2, [pc, #32]	; (800ab70 <prvCheckForValidListAndQueue+0x60>)
 800ab4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ab50:	4b07      	ldr	r3, [pc, #28]	; (800ab70 <prvCheckForValidListAndQueue+0x60>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d005      	beq.n	800ab64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ab58:	4b05      	ldr	r3, [pc, #20]	; (800ab70 <prvCheckForValidListAndQueue+0x60>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	490b      	ldr	r1, [pc, #44]	; (800ab8c <prvCheckForValidListAndQueue+0x7c>)
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fe fd6c 	bl	800963c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab64:	f000 f96e 	bl	800ae44 <vPortExitCritical>
}
 800ab68:	bf00      	nop
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	20001168 	.word	0x20001168
 800ab74:	20001138 	.word	0x20001138
 800ab78:	2000114c 	.word	0x2000114c
 800ab7c:	20001160 	.word	0x20001160
 800ab80:	20001164 	.word	0x20001164
 800ab84:	20001214 	.word	0x20001214
 800ab88:	20001174 	.word	0x20001174
 800ab8c:	0800eb40 	.word	0x0800eb40

0800ab90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	3b04      	subs	r3, #4
 800aba0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	3b04      	subs	r3, #4
 800abae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	f023 0201 	bic.w	r2, r3, #1
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	3b04      	subs	r3, #4
 800abbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800abc0:	4a0c      	ldr	r2, [pc, #48]	; (800abf4 <pxPortInitialiseStack+0x64>)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	3b14      	subs	r3, #20
 800abca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	3b04      	subs	r3, #4
 800abd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f06f 0202 	mvn.w	r2, #2
 800abde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	3b20      	subs	r3, #32
 800abe4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800abe6:	68fb      	ldr	r3, [r7, #12]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3714      	adds	r7, #20
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr
 800abf4:	0800abf9 	.word	0x0800abf9

0800abf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800abf8:	b480      	push	{r7}
 800abfa:	b085      	sub	sp, #20
 800abfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800abfe:	2300      	movs	r3, #0
 800ac00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac02:	4b12      	ldr	r3, [pc, #72]	; (800ac4c <prvTaskExitError+0x54>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac0a:	d00a      	beq.n	800ac22 <prvTaskExitError+0x2a>
	__asm volatile
 800ac0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac10:	f383 8811 	msr	BASEPRI, r3
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	60fb      	str	r3, [r7, #12]
}
 800ac1e:	bf00      	nop
 800ac20:	e7fe      	b.n	800ac20 <prvTaskExitError+0x28>
	__asm volatile
 800ac22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	60bb      	str	r3, [r7, #8]
}
 800ac34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac36:	bf00      	nop
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d0fc      	beq.n	800ac38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac3e:	bf00      	nop
 800ac40:	bf00      	nop
 800ac42:	3714      	adds	r7, #20
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr
 800ac4c:	20000034 	.word	0x20000034

0800ac50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac50:	4b07      	ldr	r3, [pc, #28]	; (800ac70 <pxCurrentTCBConst2>)
 800ac52:	6819      	ldr	r1, [r3, #0]
 800ac54:	6808      	ldr	r0, [r1, #0]
 800ac56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5a:	f380 8809 	msr	PSP, r0
 800ac5e:	f3bf 8f6f 	isb	sy
 800ac62:	f04f 0000 	mov.w	r0, #0
 800ac66:	f380 8811 	msr	BASEPRI, r0
 800ac6a:	4770      	bx	lr
 800ac6c:	f3af 8000 	nop.w

0800ac70 <pxCurrentTCBConst2>:
 800ac70:	20000c38 	.word	0x20000c38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac74:	bf00      	nop
 800ac76:	bf00      	nop

0800ac78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac78:	4808      	ldr	r0, [pc, #32]	; (800ac9c <prvPortStartFirstTask+0x24>)
 800ac7a:	6800      	ldr	r0, [r0, #0]
 800ac7c:	6800      	ldr	r0, [r0, #0]
 800ac7e:	f380 8808 	msr	MSP, r0
 800ac82:	f04f 0000 	mov.w	r0, #0
 800ac86:	f380 8814 	msr	CONTROL, r0
 800ac8a:	b662      	cpsie	i
 800ac8c:	b661      	cpsie	f
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	df00      	svc	0
 800ac98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ac9a:	bf00      	nop
 800ac9c:	e000ed08 	.word	0xe000ed08

0800aca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aca6:	4b46      	ldr	r3, [pc, #280]	; (800adc0 <xPortStartScheduler+0x120>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a46      	ldr	r2, [pc, #280]	; (800adc4 <xPortStartScheduler+0x124>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d10a      	bne.n	800acc6 <xPortStartScheduler+0x26>
	__asm volatile
 800acb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb4:	f383 8811 	msr	BASEPRI, r3
 800acb8:	f3bf 8f6f 	isb	sy
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	613b      	str	r3, [r7, #16]
}
 800acc2:	bf00      	nop
 800acc4:	e7fe      	b.n	800acc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800acc6:	4b3e      	ldr	r3, [pc, #248]	; (800adc0 <xPortStartScheduler+0x120>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a3f      	ldr	r2, [pc, #252]	; (800adc8 <xPortStartScheduler+0x128>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d10a      	bne.n	800ace6 <xPortStartScheduler+0x46>
	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	60fb      	str	r3, [r7, #12]
}
 800ace2:	bf00      	nop
 800ace4:	e7fe      	b.n	800ace4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ace6:	4b39      	ldr	r3, [pc, #228]	; (800adcc <xPortStartScheduler+0x12c>)
 800ace8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	22ff      	movs	r2, #255	; 0xff
 800acf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad00:	78fb      	ldrb	r3, [r7, #3]
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad08:	b2da      	uxtb	r2, r3
 800ad0a:	4b31      	ldr	r3, [pc, #196]	; (800add0 <xPortStartScheduler+0x130>)
 800ad0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad0e:	4b31      	ldr	r3, [pc, #196]	; (800add4 <xPortStartScheduler+0x134>)
 800ad10:	2207      	movs	r2, #7
 800ad12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad14:	e009      	b.n	800ad2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ad16:	4b2f      	ldr	r3, [pc, #188]	; (800add4 <xPortStartScheduler+0x134>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	4a2d      	ldr	r2, [pc, #180]	; (800add4 <xPortStartScheduler+0x134>)
 800ad1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad20:	78fb      	ldrb	r3, [r7, #3]
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	005b      	lsls	r3, r3, #1
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad2a:	78fb      	ldrb	r3, [r7, #3]
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad32:	2b80      	cmp	r3, #128	; 0x80
 800ad34:	d0ef      	beq.n	800ad16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad36:	4b27      	ldr	r3, [pc, #156]	; (800add4 <xPortStartScheduler+0x134>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f1c3 0307 	rsb	r3, r3, #7
 800ad3e:	2b04      	cmp	r3, #4
 800ad40:	d00a      	beq.n	800ad58 <xPortStartScheduler+0xb8>
	__asm volatile
 800ad42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad46:	f383 8811 	msr	BASEPRI, r3
 800ad4a:	f3bf 8f6f 	isb	sy
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	60bb      	str	r3, [r7, #8]
}
 800ad54:	bf00      	nop
 800ad56:	e7fe      	b.n	800ad56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad58:	4b1e      	ldr	r3, [pc, #120]	; (800add4 <xPortStartScheduler+0x134>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	021b      	lsls	r3, r3, #8
 800ad5e:	4a1d      	ldr	r2, [pc, #116]	; (800add4 <xPortStartScheduler+0x134>)
 800ad60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad62:	4b1c      	ldr	r3, [pc, #112]	; (800add4 <xPortStartScheduler+0x134>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad6a:	4a1a      	ldr	r2, [pc, #104]	; (800add4 <xPortStartScheduler+0x134>)
 800ad6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad76:	4b18      	ldr	r3, [pc, #96]	; (800add8 <xPortStartScheduler+0x138>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a17      	ldr	r2, [pc, #92]	; (800add8 <xPortStartScheduler+0x138>)
 800ad7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad82:	4b15      	ldr	r3, [pc, #84]	; (800add8 <xPortStartScheduler+0x138>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a14      	ldr	r2, [pc, #80]	; (800add8 <xPortStartScheduler+0x138>)
 800ad88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ad8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad8e:	f000 f8dd 	bl	800af4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ad92:	4b12      	ldr	r3, [pc, #72]	; (800addc <xPortStartScheduler+0x13c>)
 800ad94:	2200      	movs	r2, #0
 800ad96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ad98:	f000 f8fc 	bl	800af94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ad9c:	4b10      	ldr	r3, [pc, #64]	; (800ade0 <xPortStartScheduler+0x140>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a0f      	ldr	r2, [pc, #60]	; (800ade0 <xPortStartScheduler+0x140>)
 800ada2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ada6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ada8:	f7ff ff66 	bl	800ac78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800adac:	f7ff f856 	bl	8009e5c <vTaskSwitchContext>
	prvTaskExitError();
 800adb0:	f7ff ff22 	bl	800abf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3718      	adds	r7, #24
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	e000ed00 	.word	0xe000ed00
 800adc4:	410fc271 	.word	0x410fc271
 800adc8:	410fc270 	.word	0x410fc270
 800adcc:	e000e400 	.word	0xe000e400
 800add0:	20001264 	.word	0x20001264
 800add4:	20001268 	.word	0x20001268
 800add8:	e000ed20 	.word	0xe000ed20
 800addc:	20000034 	.word	0x20000034
 800ade0:	e000ef34 	.word	0xe000ef34

0800ade4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
	__asm volatile
 800adea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adee:	f383 8811 	msr	BASEPRI, r3
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	f3bf 8f4f 	dsb	sy
 800adfa:	607b      	str	r3, [r7, #4]
}
 800adfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800adfe:	4b0f      	ldr	r3, [pc, #60]	; (800ae3c <vPortEnterCritical+0x58>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	3301      	adds	r3, #1
 800ae04:	4a0d      	ldr	r2, [pc, #52]	; (800ae3c <vPortEnterCritical+0x58>)
 800ae06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae08:	4b0c      	ldr	r3, [pc, #48]	; (800ae3c <vPortEnterCritical+0x58>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d10f      	bne.n	800ae30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae10:	4b0b      	ldr	r3, [pc, #44]	; (800ae40 <vPortEnterCritical+0x5c>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00a      	beq.n	800ae30 <vPortEnterCritical+0x4c>
	__asm volatile
 800ae1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1e:	f383 8811 	msr	BASEPRI, r3
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	f3bf 8f4f 	dsb	sy
 800ae2a:	603b      	str	r3, [r7, #0]
}
 800ae2c:	bf00      	nop
 800ae2e:	e7fe      	b.n	800ae2e <vPortEnterCritical+0x4a>
	}
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr
 800ae3c:	20000034 	.word	0x20000034
 800ae40:	e000ed04 	.word	0xe000ed04

0800ae44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae4a:	4b12      	ldr	r3, [pc, #72]	; (800ae94 <vPortExitCritical+0x50>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d10a      	bne.n	800ae68 <vPortExitCritical+0x24>
	__asm volatile
 800ae52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae56:	f383 8811 	msr	BASEPRI, r3
 800ae5a:	f3bf 8f6f 	isb	sy
 800ae5e:	f3bf 8f4f 	dsb	sy
 800ae62:	607b      	str	r3, [r7, #4]
}
 800ae64:	bf00      	nop
 800ae66:	e7fe      	b.n	800ae66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae68:	4b0a      	ldr	r3, [pc, #40]	; (800ae94 <vPortExitCritical+0x50>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	4a09      	ldr	r2, [pc, #36]	; (800ae94 <vPortExitCritical+0x50>)
 800ae70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae72:	4b08      	ldr	r3, [pc, #32]	; (800ae94 <vPortExitCritical+0x50>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d105      	bne.n	800ae86 <vPortExitCritical+0x42>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	f383 8811 	msr	BASEPRI, r3
}
 800ae84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae86:	bf00      	nop
 800ae88:	370c      	adds	r7, #12
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	20000034 	.word	0x20000034
	...

0800aea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aea0:	f3ef 8009 	mrs	r0, PSP
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	4b15      	ldr	r3, [pc, #84]	; (800af00 <pxCurrentTCBConst>)
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	f01e 0f10 	tst.w	lr, #16
 800aeb0:	bf08      	it	eq
 800aeb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aeb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeba:	6010      	str	r0, [r2, #0]
 800aebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aec4:	f380 8811 	msr	BASEPRI, r0
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	f3bf 8f6f 	isb	sy
 800aed0:	f7fe ffc4 	bl	8009e5c <vTaskSwitchContext>
 800aed4:	f04f 0000 	mov.w	r0, #0
 800aed8:	f380 8811 	msr	BASEPRI, r0
 800aedc:	bc09      	pop	{r0, r3}
 800aede:	6819      	ldr	r1, [r3, #0]
 800aee0:	6808      	ldr	r0, [r1, #0]
 800aee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee6:	f01e 0f10 	tst.w	lr, #16
 800aeea:	bf08      	it	eq
 800aeec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aef0:	f380 8809 	msr	PSP, r0
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	f3af 8000 	nop.w

0800af00 <pxCurrentTCBConst>:
 800af00:	20000c38 	.word	0x20000c38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af04:	bf00      	nop
 800af06:	bf00      	nop

0800af08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
	__asm volatile
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	607b      	str	r3, [r7, #4]
}
 800af20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af22:	f7fe fee1 	bl	8009ce8 <xTaskIncrementTick>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d003      	beq.n	800af34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af2c:	4b06      	ldr	r3, [pc, #24]	; (800af48 <xPortSysTickHandler+0x40>)
 800af2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af32:	601a      	str	r2, [r3, #0]
 800af34:	2300      	movs	r3, #0
 800af36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	f383 8811 	msr	BASEPRI, r3
}
 800af3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af40:	bf00      	nop
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	e000ed04 	.word	0xe000ed04

0800af4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af4c:	b480      	push	{r7}
 800af4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af50:	4b0b      	ldr	r3, [pc, #44]	; (800af80 <vPortSetupTimerInterrupt+0x34>)
 800af52:	2200      	movs	r2, #0
 800af54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af56:	4b0b      	ldr	r3, [pc, #44]	; (800af84 <vPortSetupTimerInterrupt+0x38>)
 800af58:	2200      	movs	r2, #0
 800af5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af5c:	4b0a      	ldr	r3, [pc, #40]	; (800af88 <vPortSetupTimerInterrupt+0x3c>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a0a      	ldr	r2, [pc, #40]	; (800af8c <vPortSetupTimerInterrupt+0x40>)
 800af62:	fba2 2303 	umull	r2, r3, r2, r3
 800af66:	099b      	lsrs	r3, r3, #6
 800af68:	4a09      	ldr	r2, [pc, #36]	; (800af90 <vPortSetupTimerInterrupt+0x44>)
 800af6a:	3b01      	subs	r3, #1
 800af6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af6e:	4b04      	ldr	r3, [pc, #16]	; (800af80 <vPortSetupTimerInterrupt+0x34>)
 800af70:	2207      	movs	r2, #7
 800af72:	601a      	str	r2, [r3, #0]
}
 800af74:	bf00      	nop
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	e000e010 	.word	0xe000e010
 800af84:	e000e018 	.word	0xe000e018
 800af88:	20000008 	.word	0x20000008
 800af8c:	10624dd3 	.word	0x10624dd3
 800af90:	e000e014 	.word	0xe000e014

0800af94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800af94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800afa4 <vPortEnableVFP+0x10>
 800af98:	6801      	ldr	r1, [r0, #0]
 800af9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800af9e:	6001      	str	r1, [r0, #0]
 800afa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800afa2:	bf00      	nop
 800afa4:	e000ed88 	.word	0xe000ed88

0800afa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800afae:	f3ef 8305 	mrs	r3, IPSR
 800afb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2b0f      	cmp	r3, #15
 800afb8:	d914      	bls.n	800afe4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800afba:	4a17      	ldr	r2, [pc, #92]	; (800b018 <vPortValidateInterruptPriority+0x70>)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	4413      	add	r3, r2
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800afc4:	4b15      	ldr	r3, [pc, #84]	; (800b01c <vPortValidateInterruptPriority+0x74>)
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	7afa      	ldrb	r2, [r7, #11]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d20a      	bcs.n	800afe4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800afce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd2:	f383 8811 	msr	BASEPRI, r3
 800afd6:	f3bf 8f6f 	isb	sy
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	607b      	str	r3, [r7, #4]
}
 800afe0:	bf00      	nop
 800afe2:	e7fe      	b.n	800afe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800afe4:	4b0e      	ldr	r3, [pc, #56]	; (800b020 <vPortValidateInterruptPriority+0x78>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800afec:	4b0d      	ldr	r3, [pc, #52]	; (800b024 <vPortValidateInterruptPriority+0x7c>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d90a      	bls.n	800b00a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff8:	f383 8811 	msr	BASEPRI, r3
 800affc:	f3bf 8f6f 	isb	sy
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	603b      	str	r3, [r7, #0]
}
 800b006:	bf00      	nop
 800b008:	e7fe      	b.n	800b008 <vPortValidateInterruptPriority+0x60>
	}
 800b00a:	bf00      	nop
 800b00c:	3714      	adds	r7, #20
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	e000e3f0 	.word	0xe000e3f0
 800b01c:	20001264 	.word	0x20001264
 800b020:	e000ed0c 	.word	0xe000ed0c
 800b024:	20001268 	.word	0x20001268

0800b028 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b08a      	sub	sp, #40	; 0x28
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b030:	2300      	movs	r3, #0
 800b032:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b034:	f7fe fd9c 	bl	8009b70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b038:	4b5b      	ldr	r3, [pc, #364]	; (800b1a8 <pvPortMalloc+0x180>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d101      	bne.n	800b044 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b040:	f000 f920 	bl	800b284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b044:	4b59      	ldr	r3, [pc, #356]	; (800b1ac <pvPortMalloc+0x184>)
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4013      	ands	r3, r2
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	f040 8093 	bne.w	800b178 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d01d      	beq.n	800b094 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b058:	2208      	movs	r2, #8
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4413      	add	r3, r2
 800b05e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f003 0307 	and.w	r3, r3, #7
 800b066:	2b00      	cmp	r3, #0
 800b068:	d014      	beq.n	800b094 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f023 0307 	bic.w	r3, r3, #7
 800b070:	3308      	adds	r3, #8
 800b072:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f003 0307 	and.w	r3, r3, #7
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d00a      	beq.n	800b094 <pvPortMalloc+0x6c>
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	617b      	str	r3, [r7, #20]
}
 800b090:	bf00      	nop
 800b092:	e7fe      	b.n	800b092 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d06e      	beq.n	800b178 <pvPortMalloc+0x150>
 800b09a:	4b45      	ldr	r3, [pc, #276]	; (800b1b0 <pvPortMalloc+0x188>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d869      	bhi.n	800b178 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b0a4:	4b43      	ldr	r3, [pc, #268]	; (800b1b4 <pvPortMalloc+0x18c>)
 800b0a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b0a8:	4b42      	ldr	r3, [pc, #264]	; (800b1b4 <pvPortMalloc+0x18c>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0ae:	e004      	b.n	800b0ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d903      	bls.n	800b0cc <pvPortMalloc+0xa4>
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d1f1      	bne.n	800b0b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b0cc:	4b36      	ldr	r3, [pc, #216]	; (800b1a8 <pvPortMalloc+0x180>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d050      	beq.n	800b178 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b0d6:	6a3b      	ldr	r3, [r7, #32]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2208      	movs	r2, #8
 800b0dc:	4413      	add	r3, r2
 800b0de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	6a3b      	ldr	r3, [r7, #32]
 800b0e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ea:	685a      	ldr	r2, [r3, #4]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	1ad2      	subs	r2, r2, r3
 800b0f0:	2308      	movs	r3, #8
 800b0f2:	005b      	lsls	r3, r3, #1
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d91f      	bls.n	800b138 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b0f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	f003 0307 	and.w	r3, r3, #7
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00a      	beq.n	800b120 <pvPortMalloc+0xf8>
	__asm volatile
 800b10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10e:	f383 8811 	msr	BASEPRI, r3
 800b112:	f3bf 8f6f 	isb	sy
 800b116:	f3bf 8f4f 	dsb	sy
 800b11a:	613b      	str	r3, [r7, #16]
}
 800b11c:	bf00      	nop
 800b11e:	e7fe      	b.n	800b11e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	685a      	ldr	r2, [r3, #4]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	1ad2      	subs	r2, r2, r3
 800b128:	69bb      	ldr	r3, [r7, #24]
 800b12a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b132:	69b8      	ldr	r0, [r7, #24]
 800b134:	f000 f908 	bl	800b348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b138:	4b1d      	ldr	r3, [pc, #116]	; (800b1b0 <pvPortMalloc+0x188>)
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	1ad3      	subs	r3, r2, r3
 800b142:	4a1b      	ldr	r2, [pc, #108]	; (800b1b0 <pvPortMalloc+0x188>)
 800b144:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b146:	4b1a      	ldr	r3, [pc, #104]	; (800b1b0 <pvPortMalloc+0x188>)
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	4b1b      	ldr	r3, [pc, #108]	; (800b1b8 <pvPortMalloc+0x190>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d203      	bcs.n	800b15a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b152:	4b17      	ldr	r3, [pc, #92]	; (800b1b0 <pvPortMalloc+0x188>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a18      	ldr	r2, [pc, #96]	; (800b1b8 <pvPortMalloc+0x190>)
 800b158:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15c:	685a      	ldr	r2, [r3, #4]
 800b15e:	4b13      	ldr	r3, [pc, #76]	; (800b1ac <pvPortMalloc+0x184>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	431a      	orrs	r2, r3
 800b164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b166:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16a:	2200      	movs	r2, #0
 800b16c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b16e:	4b13      	ldr	r3, [pc, #76]	; (800b1bc <pvPortMalloc+0x194>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	3301      	adds	r3, #1
 800b174:	4a11      	ldr	r2, [pc, #68]	; (800b1bc <pvPortMalloc+0x194>)
 800b176:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b178:	f7fe fd08 	bl	8009b8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	f003 0307 	and.w	r3, r3, #7
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00a      	beq.n	800b19c <pvPortMalloc+0x174>
	__asm volatile
 800b186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18a:	f383 8811 	msr	BASEPRI, r3
 800b18e:	f3bf 8f6f 	isb	sy
 800b192:	f3bf 8f4f 	dsb	sy
 800b196:	60fb      	str	r3, [r7, #12]
}
 800b198:	bf00      	nop
 800b19a:	e7fe      	b.n	800b19a <pvPortMalloc+0x172>
	return pvReturn;
 800b19c:	69fb      	ldr	r3, [r7, #28]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3728      	adds	r7, #40	; 0x28
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	200025fc 	.word	0x200025fc
 800b1ac:	20002610 	.word	0x20002610
 800b1b0:	20002600 	.word	0x20002600
 800b1b4:	200025f4 	.word	0x200025f4
 800b1b8:	20002604 	.word	0x20002604
 800b1bc:	20002608 	.word	0x20002608

0800b1c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b086      	sub	sp, #24
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d04d      	beq.n	800b26e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b1d2:	2308      	movs	r3, #8
 800b1d4:	425b      	negs	r3, r3
 800b1d6:	697a      	ldr	r2, [r7, #20]
 800b1d8:	4413      	add	r3, r2
 800b1da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	685a      	ldr	r2, [r3, #4]
 800b1e4:	4b24      	ldr	r3, [pc, #144]	; (800b278 <vPortFree+0xb8>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10a      	bne.n	800b204 <vPortFree+0x44>
	__asm volatile
 800b1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f2:	f383 8811 	msr	BASEPRI, r3
 800b1f6:	f3bf 8f6f 	isb	sy
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	60fb      	str	r3, [r7, #12]
}
 800b200:	bf00      	nop
 800b202:	e7fe      	b.n	800b202 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00a      	beq.n	800b222 <vPortFree+0x62>
	__asm volatile
 800b20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b210:	f383 8811 	msr	BASEPRI, r3
 800b214:	f3bf 8f6f 	isb	sy
 800b218:	f3bf 8f4f 	dsb	sy
 800b21c:	60bb      	str	r3, [r7, #8]
}
 800b21e:	bf00      	nop
 800b220:	e7fe      	b.n	800b220 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	685a      	ldr	r2, [r3, #4]
 800b226:	4b14      	ldr	r3, [pc, #80]	; (800b278 <vPortFree+0xb8>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4013      	ands	r3, r2
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d01e      	beq.n	800b26e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d11a      	bne.n	800b26e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	685a      	ldr	r2, [r3, #4]
 800b23c:	4b0e      	ldr	r3, [pc, #56]	; (800b278 <vPortFree+0xb8>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	43db      	mvns	r3, r3
 800b242:	401a      	ands	r2, r3
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b248:	f7fe fc92 	bl	8009b70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	685a      	ldr	r2, [r3, #4]
 800b250:	4b0a      	ldr	r3, [pc, #40]	; (800b27c <vPortFree+0xbc>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4413      	add	r3, r2
 800b256:	4a09      	ldr	r2, [pc, #36]	; (800b27c <vPortFree+0xbc>)
 800b258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b25a:	6938      	ldr	r0, [r7, #16]
 800b25c:	f000 f874 	bl	800b348 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b260:	4b07      	ldr	r3, [pc, #28]	; (800b280 <vPortFree+0xc0>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	3301      	adds	r3, #1
 800b266:	4a06      	ldr	r2, [pc, #24]	; (800b280 <vPortFree+0xc0>)
 800b268:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b26a:	f7fe fc8f 	bl	8009b8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b26e:	bf00      	nop
 800b270:	3718      	adds	r7, #24
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	20002610 	.word	0x20002610
 800b27c:	20002600 	.word	0x20002600
 800b280:	2000260c 	.word	0x2000260c

0800b284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b28a:	f241 3388 	movw	r3, #5000	; 0x1388
 800b28e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b290:	4b27      	ldr	r3, [pc, #156]	; (800b330 <prvHeapInit+0xac>)
 800b292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f003 0307 	and.w	r3, r3, #7
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d00c      	beq.n	800b2b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	3307      	adds	r3, #7
 800b2a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f023 0307 	bic.w	r3, r3, #7
 800b2aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	1ad3      	subs	r3, r2, r3
 800b2b2:	4a1f      	ldr	r2, [pc, #124]	; (800b330 <prvHeapInit+0xac>)
 800b2b4:	4413      	add	r3, r2
 800b2b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b2bc:	4a1d      	ldr	r2, [pc, #116]	; (800b334 <prvHeapInit+0xb0>)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b2c2:	4b1c      	ldr	r3, [pc, #112]	; (800b334 <prvHeapInit+0xb0>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b2d0:	2208      	movs	r2, #8
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	1a9b      	subs	r3, r3, r2
 800b2d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f023 0307 	bic.w	r3, r3, #7
 800b2de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	4a15      	ldr	r2, [pc, #84]	; (800b338 <prvHeapInit+0xb4>)
 800b2e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b2e6:	4b14      	ldr	r3, [pc, #80]	; (800b338 <prvHeapInit+0xb4>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b2ee:	4b12      	ldr	r3, [pc, #72]	; (800b338 <prvHeapInit+0xb4>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	1ad2      	subs	r2, r2, r3
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b304:	4b0c      	ldr	r3, [pc, #48]	; (800b338 <prvHeapInit+0xb4>)
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	4a0a      	ldr	r2, [pc, #40]	; (800b33c <prvHeapInit+0xb8>)
 800b312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	4a09      	ldr	r2, [pc, #36]	; (800b340 <prvHeapInit+0xbc>)
 800b31a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b31c:	4b09      	ldr	r3, [pc, #36]	; (800b344 <prvHeapInit+0xc0>)
 800b31e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b322:	601a      	str	r2, [r3, #0]
}
 800b324:	bf00      	nop
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr
 800b330:	2000126c 	.word	0x2000126c
 800b334:	200025f4 	.word	0x200025f4
 800b338:	200025fc 	.word	0x200025fc
 800b33c:	20002604 	.word	0x20002604
 800b340:	20002600 	.word	0x20002600
 800b344:	20002610 	.word	0x20002610

0800b348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b350:	4b28      	ldr	r3, [pc, #160]	; (800b3f4 <prvInsertBlockIntoFreeList+0xac>)
 800b352:	60fb      	str	r3, [r7, #12]
 800b354:	e002      	b.n	800b35c <prvInsertBlockIntoFreeList+0x14>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	60fb      	str	r3, [r7, #12]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	429a      	cmp	r2, r3
 800b364:	d8f7      	bhi.n	800b356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	4413      	add	r3, r2
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	429a      	cmp	r2, r3
 800b376:	d108      	bne.n	800b38a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	685a      	ldr	r2, [r3, #4]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	441a      	add	r2, r3
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	441a      	add	r2, r3
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d118      	bne.n	800b3d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	4b15      	ldr	r3, [pc, #84]	; (800b3f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d00d      	beq.n	800b3c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	685a      	ldr	r2, [r3, #4]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	441a      	add	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	e008      	b.n	800b3d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b3c6:	4b0c      	ldr	r3, [pc, #48]	; (800b3f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	601a      	str	r2, [r3, #0]
 800b3ce:	e003      	b.n	800b3d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d002      	beq.n	800b3e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3e6:	bf00      	nop
 800b3e8:	3714      	adds	r7, #20
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	200025f4 	.word	0x200025f4
 800b3f8:	200025fc 	.word	0x200025fc

0800b3fc <_ZdlPvj>:
 800b3fc:	f000 b814 	b.w	800b428 <_ZdlPv>

0800b400 <_Znwj>:
 800b400:	2801      	cmp	r0, #1
 800b402:	bf38      	it	cc
 800b404:	2001      	movcc	r0, #1
 800b406:	b510      	push	{r4, lr}
 800b408:	4604      	mov	r4, r0
 800b40a:	4620      	mov	r0, r4
 800b40c:	f000 f85e 	bl	800b4cc <malloc>
 800b410:	b930      	cbnz	r0, 800b420 <_Znwj+0x20>
 800b412:	f000 f81d 	bl	800b450 <_ZSt15get_new_handlerv>
 800b416:	b908      	cbnz	r0, 800b41c <_Znwj+0x1c>
 800b418:	f000 f822 	bl	800b460 <abort>
 800b41c:	4780      	blx	r0
 800b41e:	e7f4      	b.n	800b40a <_Znwj+0xa>
 800b420:	bd10      	pop	{r4, pc}

0800b422 <__cxa_pure_virtual>:
 800b422:	b508      	push	{r3, lr}
 800b424:	f000 f80e 	bl	800b444 <_ZSt9terminatev>

0800b428 <_ZdlPv>:
 800b428:	f000 b858 	b.w	800b4dc <free>

0800b42c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b42c:	b508      	push	{r3, lr}
 800b42e:	4780      	blx	r0
 800b430:	f000 f816 	bl	800b460 <abort>

0800b434 <_ZSt13get_terminatev>:
 800b434:	4b02      	ldr	r3, [pc, #8]	; (800b440 <_ZSt13get_terminatev+0xc>)
 800b436:	6818      	ldr	r0, [r3, #0]
 800b438:	f3bf 8f5b 	dmb	ish
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	20000038 	.word	0x20000038

0800b444 <_ZSt9terminatev>:
 800b444:	b508      	push	{r3, lr}
 800b446:	f7ff fff5 	bl	800b434 <_ZSt13get_terminatev>
 800b44a:	f7ff ffef 	bl	800b42c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800b450 <_ZSt15get_new_handlerv>:
 800b450:	4b02      	ldr	r3, [pc, #8]	; (800b45c <_ZSt15get_new_handlerv+0xc>)
 800b452:	6818      	ldr	r0, [r3, #0]
 800b454:	f3bf 8f5b 	dmb	ish
 800b458:	4770      	bx	lr
 800b45a:	bf00      	nop
 800b45c:	20002614 	.word	0x20002614

0800b460 <abort>:
 800b460:	b508      	push	{r3, lr}
 800b462:	2006      	movs	r0, #6
 800b464:	f000 fe68 	bl	800c138 <raise>
 800b468:	2001      	movs	r0, #1
 800b46a:	f7f7 fd87 	bl	8002f7c <_exit>

0800b46e <atoi>:
 800b46e:	220a      	movs	r2, #10
 800b470:	2100      	movs	r1, #0
 800b472:	f000 bf7b 	b.w	800c36c <strtol>
	...

0800b478 <__errno>:
 800b478:	4b01      	ldr	r3, [pc, #4]	; (800b480 <__errno+0x8>)
 800b47a:	6818      	ldr	r0, [r3, #0]
 800b47c:	4770      	bx	lr
 800b47e:	bf00      	nop
 800b480:	2000003c 	.word	0x2000003c

0800b484 <__libc_init_array>:
 800b484:	b570      	push	{r4, r5, r6, lr}
 800b486:	4d0d      	ldr	r5, [pc, #52]	; (800b4bc <__libc_init_array+0x38>)
 800b488:	4c0d      	ldr	r4, [pc, #52]	; (800b4c0 <__libc_init_array+0x3c>)
 800b48a:	1b64      	subs	r4, r4, r5
 800b48c:	10a4      	asrs	r4, r4, #2
 800b48e:	2600      	movs	r6, #0
 800b490:	42a6      	cmp	r6, r4
 800b492:	d109      	bne.n	800b4a8 <__libc_init_array+0x24>
 800b494:	4d0b      	ldr	r5, [pc, #44]	; (800b4c4 <__libc_init_array+0x40>)
 800b496:	4c0c      	ldr	r4, [pc, #48]	; (800b4c8 <__libc_init_array+0x44>)
 800b498:	f003 facc 	bl	800ea34 <_init>
 800b49c:	1b64      	subs	r4, r4, r5
 800b49e:	10a4      	asrs	r4, r4, #2
 800b4a0:	2600      	movs	r6, #0
 800b4a2:	42a6      	cmp	r6, r4
 800b4a4:	d105      	bne.n	800b4b2 <__libc_init_array+0x2e>
 800b4a6:	bd70      	pop	{r4, r5, r6, pc}
 800b4a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4ac:	4798      	blx	r3
 800b4ae:	3601      	adds	r6, #1
 800b4b0:	e7ee      	b.n	800b490 <__libc_init_array+0xc>
 800b4b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4b6:	4798      	blx	r3
 800b4b8:	3601      	adds	r6, #1
 800b4ba:	e7f2      	b.n	800b4a2 <__libc_init_array+0x1e>
 800b4bc:	0800f150 	.word	0x0800f150
 800b4c0:	0800f150 	.word	0x0800f150
 800b4c4:	0800f150 	.word	0x0800f150
 800b4c8:	0800f160 	.word	0x0800f160

0800b4cc <malloc>:
 800b4cc:	4b02      	ldr	r3, [pc, #8]	; (800b4d8 <malloc+0xc>)
 800b4ce:	4601      	mov	r1, r0
 800b4d0:	6818      	ldr	r0, [r3, #0]
 800b4d2:	f000 b88d 	b.w	800b5f0 <_malloc_r>
 800b4d6:	bf00      	nop
 800b4d8:	2000003c 	.word	0x2000003c

0800b4dc <free>:
 800b4dc:	4b02      	ldr	r3, [pc, #8]	; (800b4e8 <free+0xc>)
 800b4de:	4601      	mov	r1, r0
 800b4e0:	6818      	ldr	r0, [r3, #0]
 800b4e2:	f000 b819 	b.w	800b518 <_free_r>
 800b4e6:	bf00      	nop
 800b4e8:	2000003c 	.word	0x2000003c

0800b4ec <memcpy>:
 800b4ec:	440a      	add	r2, r1
 800b4ee:	4291      	cmp	r1, r2
 800b4f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4f4:	d100      	bne.n	800b4f8 <memcpy+0xc>
 800b4f6:	4770      	bx	lr
 800b4f8:	b510      	push	{r4, lr}
 800b4fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b502:	4291      	cmp	r1, r2
 800b504:	d1f9      	bne.n	800b4fa <memcpy+0xe>
 800b506:	bd10      	pop	{r4, pc}

0800b508 <memset>:
 800b508:	4402      	add	r2, r0
 800b50a:	4603      	mov	r3, r0
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d100      	bne.n	800b512 <memset+0xa>
 800b510:	4770      	bx	lr
 800b512:	f803 1b01 	strb.w	r1, [r3], #1
 800b516:	e7f9      	b.n	800b50c <memset+0x4>

0800b518 <_free_r>:
 800b518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b51a:	2900      	cmp	r1, #0
 800b51c:	d044      	beq.n	800b5a8 <_free_r+0x90>
 800b51e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b522:	9001      	str	r0, [sp, #4]
 800b524:	2b00      	cmp	r3, #0
 800b526:	f1a1 0404 	sub.w	r4, r1, #4
 800b52a:	bfb8      	it	lt
 800b52c:	18e4      	addlt	r4, r4, r3
 800b52e:	f002 f8bd 	bl	800d6ac <__malloc_lock>
 800b532:	4a1e      	ldr	r2, [pc, #120]	; (800b5ac <_free_r+0x94>)
 800b534:	9801      	ldr	r0, [sp, #4]
 800b536:	6813      	ldr	r3, [r2, #0]
 800b538:	b933      	cbnz	r3, 800b548 <_free_r+0x30>
 800b53a:	6063      	str	r3, [r4, #4]
 800b53c:	6014      	str	r4, [r2, #0]
 800b53e:	b003      	add	sp, #12
 800b540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b544:	f002 b8b8 	b.w	800d6b8 <__malloc_unlock>
 800b548:	42a3      	cmp	r3, r4
 800b54a:	d908      	bls.n	800b55e <_free_r+0x46>
 800b54c:	6825      	ldr	r5, [r4, #0]
 800b54e:	1961      	adds	r1, r4, r5
 800b550:	428b      	cmp	r3, r1
 800b552:	bf01      	itttt	eq
 800b554:	6819      	ldreq	r1, [r3, #0]
 800b556:	685b      	ldreq	r3, [r3, #4]
 800b558:	1949      	addeq	r1, r1, r5
 800b55a:	6021      	streq	r1, [r4, #0]
 800b55c:	e7ed      	b.n	800b53a <_free_r+0x22>
 800b55e:	461a      	mov	r2, r3
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	b10b      	cbz	r3, 800b568 <_free_r+0x50>
 800b564:	42a3      	cmp	r3, r4
 800b566:	d9fa      	bls.n	800b55e <_free_r+0x46>
 800b568:	6811      	ldr	r1, [r2, #0]
 800b56a:	1855      	adds	r5, r2, r1
 800b56c:	42a5      	cmp	r5, r4
 800b56e:	d10b      	bne.n	800b588 <_free_r+0x70>
 800b570:	6824      	ldr	r4, [r4, #0]
 800b572:	4421      	add	r1, r4
 800b574:	1854      	adds	r4, r2, r1
 800b576:	42a3      	cmp	r3, r4
 800b578:	6011      	str	r1, [r2, #0]
 800b57a:	d1e0      	bne.n	800b53e <_free_r+0x26>
 800b57c:	681c      	ldr	r4, [r3, #0]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	6053      	str	r3, [r2, #4]
 800b582:	4421      	add	r1, r4
 800b584:	6011      	str	r1, [r2, #0]
 800b586:	e7da      	b.n	800b53e <_free_r+0x26>
 800b588:	d902      	bls.n	800b590 <_free_r+0x78>
 800b58a:	230c      	movs	r3, #12
 800b58c:	6003      	str	r3, [r0, #0]
 800b58e:	e7d6      	b.n	800b53e <_free_r+0x26>
 800b590:	6825      	ldr	r5, [r4, #0]
 800b592:	1961      	adds	r1, r4, r5
 800b594:	428b      	cmp	r3, r1
 800b596:	bf04      	itt	eq
 800b598:	6819      	ldreq	r1, [r3, #0]
 800b59a:	685b      	ldreq	r3, [r3, #4]
 800b59c:	6063      	str	r3, [r4, #4]
 800b59e:	bf04      	itt	eq
 800b5a0:	1949      	addeq	r1, r1, r5
 800b5a2:	6021      	streq	r1, [r4, #0]
 800b5a4:	6054      	str	r4, [r2, #4]
 800b5a6:	e7ca      	b.n	800b53e <_free_r+0x26>
 800b5a8:	b003      	add	sp, #12
 800b5aa:	bd30      	pop	{r4, r5, pc}
 800b5ac:	20002618 	.word	0x20002618

0800b5b0 <sbrk_aligned>:
 800b5b0:	b570      	push	{r4, r5, r6, lr}
 800b5b2:	4e0e      	ldr	r6, [pc, #56]	; (800b5ec <sbrk_aligned+0x3c>)
 800b5b4:	460c      	mov	r4, r1
 800b5b6:	6831      	ldr	r1, [r6, #0]
 800b5b8:	4605      	mov	r5, r0
 800b5ba:	b911      	cbnz	r1, 800b5c2 <sbrk_aligned+0x12>
 800b5bc:	f000 fd84 	bl	800c0c8 <_sbrk_r>
 800b5c0:	6030      	str	r0, [r6, #0]
 800b5c2:	4621      	mov	r1, r4
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	f000 fd7f 	bl	800c0c8 <_sbrk_r>
 800b5ca:	1c43      	adds	r3, r0, #1
 800b5cc:	d00a      	beq.n	800b5e4 <sbrk_aligned+0x34>
 800b5ce:	1cc4      	adds	r4, r0, #3
 800b5d0:	f024 0403 	bic.w	r4, r4, #3
 800b5d4:	42a0      	cmp	r0, r4
 800b5d6:	d007      	beq.n	800b5e8 <sbrk_aligned+0x38>
 800b5d8:	1a21      	subs	r1, r4, r0
 800b5da:	4628      	mov	r0, r5
 800b5dc:	f000 fd74 	bl	800c0c8 <_sbrk_r>
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	d101      	bne.n	800b5e8 <sbrk_aligned+0x38>
 800b5e4:	f04f 34ff 	mov.w	r4, #4294967295
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	bd70      	pop	{r4, r5, r6, pc}
 800b5ec:	2000261c 	.word	0x2000261c

0800b5f0 <_malloc_r>:
 800b5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f4:	1ccd      	adds	r5, r1, #3
 800b5f6:	f025 0503 	bic.w	r5, r5, #3
 800b5fa:	3508      	adds	r5, #8
 800b5fc:	2d0c      	cmp	r5, #12
 800b5fe:	bf38      	it	cc
 800b600:	250c      	movcc	r5, #12
 800b602:	2d00      	cmp	r5, #0
 800b604:	4607      	mov	r7, r0
 800b606:	db01      	blt.n	800b60c <_malloc_r+0x1c>
 800b608:	42a9      	cmp	r1, r5
 800b60a:	d905      	bls.n	800b618 <_malloc_r+0x28>
 800b60c:	230c      	movs	r3, #12
 800b60e:	603b      	str	r3, [r7, #0]
 800b610:	2600      	movs	r6, #0
 800b612:	4630      	mov	r0, r6
 800b614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b618:	4e2e      	ldr	r6, [pc, #184]	; (800b6d4 <_malloc_r+0xe4>)
 800b61a:	f002 f847 	bl	800d6ac <__malloc_lock>
 800b61e:	6833      	ldr	r3, [r6, #0]
 800b620:	461c      	mov	r4, r3
 800b622:	bb34      	cbnz	r4, 800b672 <_malloc_r+0x82>
 800b624:	4629      	mov	r1, r5
 800b626:	4638      	mov	r0, r7
 800b628:	f7ff ffc2 	bl	800b5b0 <sbrk_aligned>
 800b62c:	1c43      	adds	r3, r0, #1
 800b62e:	4604      	mov	r4, r0
 800b630:	d14d      	bne.n	800b6ce <_malloc_r+0xde>
 800b632:	6834      	ldr	r4, [r6, #0]
 800b634:	4626      	mov	r6, r4
 800b636:	2e00      	cmp	r6, #0
 800b638:	d140      	bne.n	800b6bc <_malloc_r+0xcc>
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	4631      	mov	r1, r6
 800b63e:	4638      	mov	r0, r7
 800b640:	eb04 0803 	add.w	r8, r4, r3
 800b644:	f000 fd40 	bl	800c0c8 <_sbrk_r>
 800b648:	4580      	cmp	r8, r0
 800b64a:	d13a      	bne.n	800b6c2 <_malloc_r+0xd2>
 800b64c:	6821      	ldr	r1, [r4, #0]
 800b64e:	3503      	adds	r5, #3
 800b650:	1a6d      	subs	r5, r5, r1
 800b652:	f025 0503 	bic.w	r5, r5, #3
 800b656:	3508      	adds	r5, #8
 800b658:	2d0c      	cmp	r5, #12
 800b65a:	bf38      	it	cc
 800b65c:	250c      	movcc	r5, #12
 800b65e:	4629      	mov	r1, r5
 800b660:	4638      	mov	r0, r7
 800b662:	f7ff ffa5 	bl	800b5b0 <sbrk_aligned>
 800b666:	3001      	adds	r0, #1
 800b668:	d02b      	beq.n	800b6c2 <_malloc_r+0xd2>
 800b66a:	6823      	ldr	r3, [r4, #0]
 800b66c:	442b      	add	r3, r5
 800b66e:	6023      	str	r3, [r4, #0]
 800b670:	e00e      	b.n	800b690 <_malloc_r+0xa0>
 800b672:	6822      	ldr	r2, [r4, #0]
 800b674:	1b52      	subs	r2, r2, r5
 800b676:	d41e      	bmi.n	800b6b6 <_malloc_r+0xc6>
 800b678:	2a0b      	cmp	r2, #11
 800b67a:	d916      	bls.n	800b6aa <_malloc_r+0xba>
 800b67c:	1961      	adds	r1, r4, r5
 800b67e:	42a3      	cmp	r3, r4
 800b680:	6025      	str	r5, [r4, #0]
 800b682:	bf18      	it	ne
 800b684:	6059      	strne	r1, [r3, #4]
 800b686:	6863      	ldr	r3, [r4, #4]
 800b688:	bf08      	it	eq
 800b68a:	6031      	streq	r1, [r6, #0]
 800b68c:	5162      	str	r2, [r4, r5]
 800b68e:	604b      	str	r3, [r1, #4]
 800b690:	4638      	mov	r0, r7
 800b692:	f104 060b 	add.w	r6, r4, #11
 800b696:	f002 f80f 	bl	800d6b8 <__malloc_unlock>
 800b69a:	f026 0607 	bic.w	r6, r6, #7
 800b69e:	1d23      	adds	r3, r4, #4
 800b6a0:	1af2      	subs	r2, r6, r3
 800b6a2:	d0b6      	beq.n	800b612 <_malloc_r+0x22>
 800b6a4:	1b9b      	subs	r3, r3, r6
 800b6a6:	50a3      	str	r3, [r4, r2]
 800b6a8:	e7b3      	b.n	800b612 <_malloc_r+0x22>
 800b6aa:	6862      	ldr	r2, [r4, #4]
 800b6ac:	42a3      	cmp	r3, r4
 800b6ae:	bf0c      	ite	eq
 800b6b0:	6032      	streq	r2, [r6, #0]
 800b6b2:	605a      	strne	r2, [r3, #4]
 800b6b4:	e7ec      	b.n	800b690 <_malloc_r+0xa0>
 800b6b6:	4623      	mov	r3, r4
 800b6b8:	6864      	ldr	r4, [r4, #4]
 800b6ba:	e7b2      	b.n	800b622 <_malloc_r+0x32>
 800b6bc:	4634      	mov	r4, r6
 800b6be:	6876      	ldr	r6, [r6, #4]
 800b6c0:	e7b9      	b.n	800b636 <_malloc_r+0x46>
 800b6c2:	230c      	movs	r3, #12
 800b6c4:	603b      	str	r3, [r7, #0]
 800b6c6:	4638      	mov	r0, r7
 800b6c8:	f001 fff6 	bl	800d6b8 <__malloc_unlock>
 800b6cc:	e7a1      	b.n	800b612 <_malloc_r+0x22>
 800b6ce:	6025      	str	r5, [r4, #0]
 800b6d0:	e7de      	b.n	800b690 <_malloc_r+0xa0>
 800b6d2:	bf00      	nop
 800b6d4:	20002618 	.word	0x20002618

0800b6d8 <__cvt>:
 800b6d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6dc:	ec55 4b10 	vmov	r4, r5, d0
 800b6e0:	2d00      	cmp	r5, #0
 800b6e2:	460e      	mov	r6, r1
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	462b      	mov	r3, r5
 800b6e8:	bfbb      	ittet	lt
 800b6ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b6ee:	461d      	movlt	r5, r3
 800b6f0:	2300      	movge	r3, #0
 800b6f2:	232d      	movlt	r3, #45	; 0x2d
 800b6f4:	700b      	strb	r3, [r1, #0]
 800b6f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b6fc:	4691      	mov	r9, r2
 800b6fe:	f023 0820 	bic.w	r8, r3, #32
 800b702:	bfbc      	itt	lt
 800b704:	4622      	movlt	r2, r4
 800b706:	4614      	movlt	r4, r2
 800b708:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b70c:	d005      	beq.n	800b71a <__cvt+0x42>
 800b70e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b712:	d100      	bne.n	800b716 <__cvt+0x3e>
 800b714:	3601      	adds	r6, #1
 800b716:	2102      	movs	r1, #2
 800b718:	e000      	b.n	800b71c <__cvt+0x44>
 800b71a:	2103      	movs	r1, #3
 800b71c:	ab03      	add	r3, sp, #12
 800b71e:	9301      	str	r3, [sp, #4]
 800b720:	ab02      	add	r3, sp, #8
 800b722:	9300      	str	r3, [sp, #0]
 800b724:	ec45 4b10 	vmov	d0, r4, r5
 800b728:	4653      	mov	r3, sl
 800b72a:	4632      	mov	r2, r6
 800b72c:	f000 ff98 	bl	800c660 <_dtoa_r>
 800b730:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b734:	4607      	mov	r7, r0
 800b736:	d102      	bne.n	800b73e <__cvt+0x66>
 800b738:	f019 0f01 	tst.w	r9, #1
 800b73c:	d022      	beq.n	800b784 <__cvt+0xac>
 800b73e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b742:	eb07 0906 	add.w	r9, r7, r6
 800b746:	d110      	bne.n	800b76a <__cvt+0x92>
 800b748:	783b      	ldrb	r3, [r7, #0]
 800b74a:	2b30      	cmp	r3, #48	; 0x30
 800b74c:	d10a      	bne.n	800b764 <__cvt+0x8c>
 800b74e:	2200      	movs	r2, #0
 800b750:	2300      	movs	r3, #0
 800b752:	4620      	mov	r0, r4
 800b754:	4629      	mov	r1, r5
 800b756:	f7f5 f9c7 	bl	8000ae8 <__aeabi_dcmpeq>
 800b75a:	b918      	cbnz	r0, 800b764 <__cvt+0x8c>
 800b75c:	f1c6 0601 	rsb	r6, r6, #1
 800b760:	f8ca 6000 	str.w	r6, [sl]
 800b764:	f8da 3000 	ldr.w	r3, [sl]
 800b768:	4499      	add	r9, r3
 800b76a:	2200      	movs	r2, #0
 800b76c:	2300      	movs	r3, #0
 800b76e:	4620      	mov	r0, r4
 800b770:	4629      	mov	r1, r5
 800b772:	f7f5 f9b9 	bl	8000ae8 <__aeabi_dcmpeq>
 800b776:	b108      	cbz	r0, 800b77c <__cvt+0xa4>
 800b778:	f8cd 900c 	str.w	r9, [sp, #12]
 800b77c:	2230      	movs	r2, #48	; 0x30
 800b77e:	9b03      	ldr	r3, [sp, #12]
 800b780:	454b      	cmp	r3, r9
 800b782:	d307      	bcc.n	800b794 <__cvt+0xbc>
 800b784:	9b03      	ldr	r3, [sp, #12]
 800b786:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b788:	1bdb      	subs	r3, r3, r7
 800b78a:	4638      	mov	r0, r7
 800b78c:	6013      	str	r3, [r2, #0]
 800b78e:	b004      	add	sp, #16
 800b790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b794:	1c59      	adds	r1, r3, #1
 800b796:	9103      	str	r1, [sp, #12]
 800b798:	701a      	strb	r2, [r3, #0]
 800b79a:	e7f0      	b.n	800b77e <__cvt+0xa6>

0800b79c <__exponent>:
 800b79c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2900      	cmp	r1, #0
 800b7a2:	bfb8      	it	lt
 800b7a4:	4249      	neglt	r1, r1
 800b7a6:	f803 2b02 	strb.w	r2, [r3], #2
 800b7aa:	bfb4      	ite	lt
 800b7ac:	222d      	movlt	r2, #45	; 0x2d
 800b7ae:	222b      	movge	r2, #43	; 0x2b
 800b7b0:	2909      	cmp	r1, #9
 800b7b2:	7042      	strb	r2, [r0, #1]
 800b7b4:	dd2a      	ble.n	800b80c <__exponent+0x70>
 800b7b6:	f10d 0407 	add.w	r4, sp, #7
 800b7ba:	46a4      	mov	ip, r4
 800b7bc:	270a      	movs	r7, #10
 800b7be:	46a6      	mov	lr, r4
 800b7c0:	460a      	mov	r2, r1
 800b7c2:	fb91 f6f7 	sdiv	r6, r1, r7
 800b7c6:	fb07 1516 	mls	r5, r7, r6, r1
 800b7ca:	3530      	adds	r5, #48	; 0x30
 800b7cc:	2a63      	cmp	r2, #99	; 0x63
 800b7ce:	f104 34ff 	add.w	r4, r4, #4294967295
 800b7d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b7d6:	4631      	mov	r1, r6
 800b7d8:	dcf1      	bgt.n	800b7be <__exponent+0x22>
 800b7da:	3130      	adds	r1, #48	; 0x30
 800b7dc:	f1ae 0502 	sub.w	r5, lr, #2
 800b7e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b7e4:	1c44      	adds	r4, r0, #1
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	4561      	cmp	r1, ip
 800b7ea:	d30a      	bcc.n	800b802 <__exponent+0x66>
 800b7ec:	f10d 0209 	add.w	r2, sp, #9
 800b7f0:	eba2 020e 	sub.w	r2, r2, lr
 800b7f4:	4565      	cmp	r5, ip
 800b7f6:	bf88      	it	hi
 800b7f8:	2200      	movhi	r2, #0
 800b7fa:	4413      	add	r3, r2
 800b7fc:	1a18      	subs	r0, r3, r0
 800b7fe:	b003      	add	sp, #12
 800b800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b802:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b806:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b80a:	e7ed      	b.n	800b7e8 <__exponent+0x4c>
 800b80c:	2330      	movs	r3, #48	; 0x30
 800b80e:	3130      	adds	r1, #48	; 0x30
 800b810:	7083      	strb	r3, [r0, #2]
 800b812:	70c1      	strb	r1, [r0, #3]
 800b814:	1d03      	adds	r3, r0, #4
 800b816:	e7f1      	b.n	800b7fc <__exponent+0x60>

0800b818 <_printf_float>:
 800b818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81c:	ed2d 8b02 	vpush	{d8}
 800b820:	b08d      	sub	sp, #52	; 0x34
 800b822:	460c      	mov	r4, r1
 800b824:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b828:	4616      	mov	r6, r2
 800b82a:	461f      	mov	r7, r3
 800b82c:	4605      	mov	r5, r0
 800b82e:	f001 febd 	bl	800d5ac <_localeconv_r>
 800b832:	f8d0 a000 	ldr.w	sl, [r0]
 800b836:	4650      	mov	r0, sl
 800b838:	f7f4 fcd4 	bl	80001e4 <strlen>
 800b83c:	2300      	movs	r3, #0
 800b83e:	930a      	str	r3, [sp, #40]	; 0x28
 800b840:	6823      	ldr	r3, [r4, #0]
 800b842:	9305      	str	r3, [sp, #20]
 800b844:	f8d8 3000 	ldr.w	r3, [r8]
 800b848:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b84c:	3307      	adds	r3, #7
 800b84e:	f023 0307 	bic.w	r3, r3, #7
 800b852:	f103 0208 	add.w	r2, r3, #8
 800b856:	f8c8 2000 	str.w	r2, [r8]
 800b85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b862:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b866:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b86a:	9307      	str	r3, [sp, #28]
 800b86c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b870:	ee08 0a10 	vmov	s16, r0
 800b874:	4b9f      	ldr	r3, [pc, #636]	; (800baf4 <_printf_float+0x2dc>)
 800b876:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b87a:	f04f 32ff 	mov.w	r2, #4294967295
 800b87e:	f7f5 f965 	bl	8000b4c <__aeabi_dcmpun>
 800b882:	bb88      	cbnz	r0, 800b8e8 <_printf_float+0xd0>
 800b884:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b888:	4b9a      	ldr	r3, [pc, #616]	; (800baf4 <_printf_float+0x2dc>)
 800b88a:	f04f 32ff 	mov.w	r2, #4294967295
 800b88e:	f7f5 f93f 	bl	8000b10 <__aeabi_dcmple>
 800b892:	bb48      	cbnz	r0, 800b8e8 <_printf_float+0xd0>
 800b894:	2200      	movs	r2, #0
 800b896:	2300      	movs	r3, #0
 800b898:	4640      	mov	r0, r8
 800b89a:	4649      	mov	r1, r9
 800b89c:	f7f5 f92e 	bl	8000afc <__aeabi_dcmplt>
 800b8a0:	b110      	cbz	r0, 800b8a8 <_printf_float+0x90>
 800b8a2:	232d      	movs	r3, #45	; 0x2d
 800b8a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8a8:	4b93      	ldr	r3, [pc, #588]	; (800baf8 <_printf_float+0x2e0>)
 800b8aa:	4894      	ldr	r0, [pc, #592]	; (800bafc <_printf_float+0x2e4>)
 800b8ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b8b0:	bf94      	ite	ls
 800b8b2:	4698      	movls	r8, r3
 800b8b4:	4680      	movhi	r8, r0
 800b8b6:	2303      	movs	r3, #3
 800b8b8:	6123      	str	r3, [r4, #16]
 800b8ba:	9b05      	ldr	r3, [sp, #20]
 800b8bc:	f023 0204 	bic.w	r2, r3, #4
 800b8c0:	6022      	str	r2, [r4, #0]
 800b8c2:	f04f 0900 	mov.w	r9, #0
 800b8c6:	9700      	str	r7, [sp, #0]
 800b8c8:	4633      	mov	r3, r6
 800b8ca:	aa0b      	add	r2, sp, #44	; 0x2c
 800b8cc:	4621      	mov	r1, r4
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	f000 f9d8 	bl	800bc84 <_printf_common>
 800b8d4:	3001      	adds	r0, #1
 800b8d6:	f040 8090 	bne.w	800b9fa <_printf_float+0x1e2>
 800b8da:	f04f 30ff 	mov.w	r0, #4294967295
 800b8de:	b00d      	add	sp, #52	; 0x34
 800b8e0:	ecbd 8b02 	vpop	{d8}
 800b8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e8:	4642      	mov	r2, r8
 800b8ea:	464b      	mov	r3, r9
 800b8ec:	4640      	mov	r0, r8
 800b8ee:	4649      	mov	r1, r9
 800b8f0:	f7f5 f92c 	bl	8000b4c <__aeabi_dcmpun>
 800b8f4:	b140      	cbz	r0, 800b908 <_printf_float+0xf0>
 800b8f6:	464b      	mov	r3, r9
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	bfbc      	itt	lt
 800b8fc:	232d      	movlt	r3, #45	; 0x2d
 800b8fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b902:	487f      	ldr	r0, [pc, #508]	; (800bb00 <_printf_float+0x2e8>)
 800b904:	4b7f      	ldr	r3, [pc, #508]	; (800bb04 <_printf_float+0x2ec>)
 800b906:	e7d1      	b.n	800b8ac <_printf_float+0x94>
 800b908:	6863      	ldr	r3, [r4, #4]
 800b90a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b90e:	9206      	str	r2, [sp, #24]
 800b910:	1c5a      	adds	r2, r3, #1
 800b912:	d13f      	bne.n	800b994 <_printf_float+0x17c>
 800b914:	2306      	movs	r3, #6
 800b916:	6063      	str	r3, [r4, #4]
 800b918:	9b05      	ldr	r3, [sp, #20]
 800b91a:	6861      	ldr	r1, [r4, #4]
 800b91c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b920:	2300      	movs	r3, #0
 800b922:	9303      	str	r3, [sp, #12]
 800b924:	ab0a      	add	r3, sp, #40	; 0x28
 800b926:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b92a:	ab09      	add	r3, sp, #36	; 0x24
 800b92c:	ec49 8b10 	vmov	d0, r8, r9
 800b930:	9300      	str	r3, [sp, #0]
 800b932:	6022      	str	r2, [r4, #0]
 800b934:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b938:	4628      	mov	r0, r5
 800b93a:	f7ff fecd 	bl	800b6d8 <__cvt>
 800b93e:	9b06      	ldr	r3, [sp, #24]
 800b940:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b942:	2b47      	cmp	r3, #71	; 0x47
 800b944:	4680      	mov	r8, r0
 800b946:	d108      	bne.n	800b95a <_printf_float+0x142>
 800b948:	1cc8      	adds	r0, r1, #3
 800b94a:	db02      	blt.n	800b952 <_printf_float+0x13a>
 800b94c:	6863      	ldr	r3, [r4, #4]
 800b94e:	4299      	cmp	r1, r3
 800b950:	dd41      	ble.n	800b9d6 <_printf_float+0x1be>
 800b952:	f1ab 0b02 	sub.w	fp, fp, #2
 800b956:	fa5f fb8b 	uxtb.w	fp, fp
 800b95a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b95e:	d820      	bhi.n	800b9a2 <_printf_float+0x18a>
 800b960:	3901      	subs	r1, #1
 800b962:	465a      	mov	r2, fp
 800b964:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b968:	9109      	str	r1, [sp, #36]	; 0x24
 800b96a:	f7ff ff17 	bl	800b79c <__exponent>
 800b96e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b970:	1813      	adds	r3, r2, r0
 800b972:	2a01      	cmp	r2, #1
 800b974:	4681      	mov	r9, r0
 800b976:	6123      	str	r3, [r4, #16]
 800b978:	dc02      	bgt.n	800b980 <_printf_float+0x168>
 800b97a:	6822      	ldr	r2, [r4, #0]
 800b97c:	07d2      	lsls	r2, r2, #31
 800b97e:	d501      	bpl.n	800b984 <_printf_float+0x16c>
 800b980:	3301      	adds	r3, #1
 800b982:	6123      	str	r3, [r4, #16]
 800b984:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d09c      	beq.n	800b8c6 <_printf_float+0xae>
 800b98c:	232d      	movs	r3, #45	; 0x2d
 800b98e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b992:	e798      	b.n	800b8c6 <_printf_float+0xae>
 800b994:	9a06      	ldr	r2, [sp, #24]
 800b996:	2a47      	cmp	r2, #71	; 0x47
 800b998:	d1be      	bne.n	800b918 <_printf_float+0x100>
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d1bc      	bne.n	800b918 <_printf_float+0x100>
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e7b9      	b.n	800b916 <_printf_float+0xfe>
 800b9a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b9a6:	d118      	bne.n	800b9da <_printf_float+0x1c2>
 800b9a8:	2900      	cmp	r1, #0
 800b9aa:	6863      	ldr	r3, [r4, #4]
 800b9ac:	dd0b      	ble.n	800b9c6 <_printf_float+0x1ae>
 800b9ae:	6121      	str	r1, [r4, #16]
 800b9b0:	b913      	cbnz	r3, 800b9b8 <_printf_float+0x1a0>
 800b9b2:	6822      	ldr	r2, [r4, #0]
 800b9b4:	07d0      	lsls	r0, r2, #31
 800b9b6:	d502      	bpl.n	800b9be <_printf_float+0x1a6>
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	440b      	add	r3, r1
 800b9bc:	6123      	str	r3, [r4, #16]
 800b9be:	65a1      	str	r1, [r4, #88]	; 0x58
 800b9c0:	f04f 0900 	mov.w	r9, #0
 800b9c4:	e7de      	b.n	800b984 <_printf_float+0x16c>
 800b9c6:	b913      	cbnz	r3, 800b9ce <_printf_float+0x1b6>
 800b9c8:	6822      	ldr	r2, [r4, #0]
 800b9ca:	07d2      	lsls	r2, r2, #31
 800b9cc:	d501      	bpl.n	800b9d2 <_printf_float+0x1ba>
 800b9ce:	3302      	adds	r3, #2
 800b9d0:	e7f4      	b.n	800b9bc <_printf_float+0x1a4>
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	e7f2      	b.n	800b9bc <_printf_float+0x1a4>
 800b9d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b9da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9dc:	4299      	cmp	r1, r3
 800b9de:	db05      	blt.n	800b9ec <_printf_float+0x1d4>
 800b9e0:	6823      	ldr	r3, [r4, #0]
 800b9e2:	6121      	str	r1, [r4, #16]
 800b9e4:	07d8      	lsls	r0, r3, #31
 800b9e6:	d5ea      	bpl.n	800b9be <_printf_float+0x1a6>
 800b9e8:	1c4b      	adds	r3, r1, #1
 800b9ea:	e7e7      	b.n	800b9bc <_printf_float+0x1a4>
 800b9ec:	2900      	cmp	r1, #0
 800b9ee:	bfd4      	ite	le
 800b9f0:	f1c1 0202 	rsble	r2, r1, #2
 800b9f4:	2201      	movgt	r2, #1
 800b9f6:	4413      	add	r3, r2
 800b9f8:	e7e0      	b.n	800b9bc <_printf_float+0x1a4>
 800b9fa:	6823      	ldr	r3, [r4, #0]
 800b9fc:	055a      	lsls	r2, r3, #21
 800b9fe:	d407      	bmi.n	800ba10 <_printf_float+0x1f8>
 800ba00:	6923      	ldr	r3, [r4, #16]
 800ba02:	4642      	mov	r2, r8
 800ba04:	4631      	mov	r1, r6
 800ba06:	4628      	mov	r0, r5
 800ba08:	47b8      	blx	r7
 800ba0a:	3001      	adds	r0, #1
 800ba0c:	d12c      	bne.n	800ba68 <_printf_float+0x250>
 800ba0e:	e764      	b.n	800b8da <_printf_float+0xc2>
 800ba10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ba14:	f240 80e0 	bls.w	800bbd8 <_printf_float+0x3c0>
 800ba18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	2300      	movs	r3, #0
 800ba20:	f7f5 f862 	bl	8000ae8 <__aeabi_dcmpeq>
 800ba24:	2800      	cmp	r0, #0
 800ba26:	d034      	beq.n	800ba92 <_printf_float+0x27a>
 800ba28:	4a37      	ldr	r2, [pc, #220]	; (800bb08 <_printf_float+0x2f0>)
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	4631      	mov	r1, r6
 800ba2e:	4628      	mov	r0, r5
 800ba30:	47b8      	blx	r7
 800ba32:	3001      	adds	r0, #1
 800ba34:	f43f af51 	beq.w	800b8da <_printf_float+0xc2>
 800ba38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	db02      	blt.n	800ba46 <_printf_float+0x22e>
 800ba40:	6823      	ldr	r3, [r4, #0]
 800ba42:	07d8      	lsls	r0, r3, #31
 800ba44:	d510      	bpl.n	800ba68 <_printf_float+0x250>
 800ba46:	ee18 3a10 	vmov	r3, s16
 800ba4a:	4652      	mov	r2, sl
 800ba4c:	4631      	mov	r1, r6
 800ba4e:	4628      	mov	r0, r5
 800ba50:	47b8      	blx	r7
 800ba52:	3001      	adds	r0, #1
 800ba54:	f43f af41 	beq.w	800b8da <_printf_float+0xc2>
 800ba58:	f04f 0800 	mov.w	r8, #0
 800ba5c:	f104 091a 	add.w	r9, r4, #26
 800ba60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba62:	3b01      	subs	r3, #1
 800ba64:	4543      	cmp	r3, r8
 800ba66:	dc09      	bgt.n	800ba7c <_printf_float+0x264>
 800ba68:	6823      	ldr	r3, [r4, #0]
 800ba6a:	079b      	lsls	r3, r3, #30
 800ba6c:	f100 8105 	bmi.w	800bc7a <_printf_float+0x462>
 800ba70:	68e0      	ldr	r0, [r4, #12]
 800ba72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba74:	4298      	cmp	r0, r3
 800ba76:	bfb8      	it	lt
 800ba78:	4618      	movlt	r0, r3
 800ba7a:	e730      	b.n	800b8de <_printf_float+0xc6>
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	464a      	mov	r2, r9
 800ba80:	4631      	mov	r1, r6
 800ba82:	4628      	mov	r0, r5
 800ba84:	47b8      	blx	r7
 800ba86:	3001      	adds	r0, #1
 800ba88:	f43f af27 	beq.w	800b8da <_printf_float+0xc2>
 800ba8c:	f108 0801 	add.w	r8, r8, #1
 800ba90:	e7e6      	b.n	800ba60 <_printf_float+0x248>
 800ba92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	dc39      	bgt.n	800bb0c <_printf_float+0x2f4>
 800ba98:	4a1b      	ldr	r2, [pc, #108]	; (800bb08 <_printf_float+0x2f0>)
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	4631      	mov	r1, r6
 800ba9e:	4628      	mov	r0, r5
 800baa0:	47b8      	blx	r7
 800baa2:	3001      	adds	r0, #1
 800baa4:	f43f af19 	beq.w	800b8da <_printf_float+0xc2>
 800baa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800baac:	4313      	orrs	r3, r2
 800baae:	d102      	bne.n	800bab6 <_printf_float+0x29e>
 800bab0:	6823      	ldr	r3, [r4, #0]
 800bab2:	07d9      	lsls	r1, r3, #31
 800bab4:	d5d8      	bpl.n	800ba68 <_printf_float+0x250>
 800bab6:	ee18 3a10 	vmov	r3, s16
 800baba:	4652      	mov	r2, sl
 800babc:	4631      	mov	r1, r6
 800babe:	4628      	mov	r0, r5
 800bac0:	47b8      	blx	r7
 800bac2:	3001      	adds	r0, #1
 800bac4:	f43f af09 	beq.w	800b8da <_printf_float+0xc2>
 800bac8:	f04f 0900 	mov.w	r9, #0
 800bacc:	f104 0a1a 	add.w	sl, r4, #26
 800bad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bad2:	425b      	negs	r3, r3
 800bad4:	454b      	cmp	r3, r9
 800bad6:	dc01      	bgt.n	800badc <_printf_float+0x2c4>
 800bad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bada:	e792      	b.n	800ba02 <_printf_float+0x1ea>
 800badc:	2301      	movs	r3, #1
 800bade:	4652      	mov	r2, sl
 800bae0:	4631      	mov	r1, r6
 800bae2:	4628      	mov	r0, r5
 800bae4:	47b8      	blx	r7
 800bae6:	3001      	adds	r0, #1
 800bae8:	f43f aef7 	beq.w	800b8da <_printf_float+0xc2>
 800baec:	f109 0901 	add.w	r9, r9, #1
 800baf0:	e7ee      	b.n	800bad0 <_printf_float+0x2b8>
 800baf2:	bf00      	nop
 800baf4:	7fefffff 	.word	0x7fefffff
 800baf8:	0800ed54 	.word	0x0800ed54
 800bafc:	0800ed58 	.word	0x0800ed58
 800bb00:	0800ed60 	.word	0x0800ed60
 800bb04:	0800ed5c 	.word	0x0800ed5c
 800bb08:	0800f0e9 	.word	0x0800f0e9
 800bb0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb10:	429a      	cmp	r2, r3
 800bb12:	bfa8      	it	ge
 800bb14:	461a      	movge	r2, r3
 800bb16:	2a00      	cmp	r2, #0
 800bb18:	4691      	mov	r9, r2
 800bb1a:	dc37      	bgt.n	800bb8c <_printf_float+0x374>
 800bb1c:	f04f 0b00 	mov.w	fp, #0
 800bb20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb24:	f104 021a 	add.w	r2, r4, #26
 800bb28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb2a:	9305      	str	r3, [sp, #20]
 800bb2c:	eba3 0309 	sub.w	r3, r3, r9
 800bb30:	455b      	cmp	r3, fp
 800bb32:	dc33      	bgt.n	800bb9c <_printf_float+0x384>
 800bb34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	db3b      	blt.n	800bbb4 <_printf_float+0x39c>
 800bb3c:	6823      	ldr	r3, [r4, #0]
 800bb3e:	07da      	lsls	r2, r3, #31
 800bb40:	d438      	bmi.n	800bbb4 <_printf_float+0x39c>
 800bb42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb44:	9a05      	ldr	r2, [sp, #20]
 800bb46:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb48:	1a9a      	subs	r2, r3, r2
 800bb4a:	eba3 0901 	sub.w	r9, r3, r1
 800bb4e:	4591      	cmp	r9, r2
 800bb50:	bfa8      	it	ge
 800bb52:	4691      	movge	r9, r2
 800bb54:	f1b9 0f00 	cmp.w	r9, #0
 800bb58:	dc35      	bgt.n	800bbc6 <_printf_float+0x3ae>
 800bb5a:	f04f 0800 	mov.w	r8, #0
 800bb5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb62:	f104 0a1a 	add.w	sl, r4, #26
 800bb66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb6a:	1a9b      	subs	r3, r3, r2
 800bb6c:	eba3 0309 	sub.w	r3, r3, r9
 800bb70:	4543      	cmp	r3, r8
 800bb72:	f77f af79 	ble.w	800ba68 <_printf_float+0x250>
 800bb76:	2301      	movs	r3, #1
 800bb78:	4652      	mov	r2, sl
 800bb7a:	4631      	mov	r1, r6
 800bb7c:	4628      	mov	r0, r5
 800bb7e:	47b8      	blx	r7
 800bb80:	3001      	adds	r0, #1
 800bb82:	f43f aeaa 	beq.w	800b8da <_printf_float+0xc2>
 800bb86:	f108 0801 	add.w	r8, r8, #1
 800bb8a:	e7ec      	b.n	800bb66 <_printf_float+0x34e>
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	4631      	mov	r1, r6
 800bb90:	4642      	mov	r2, r8
 800bb92:	4628      	mov	r0, r5
 800bb94:	47b8      	blx	r7
 800bb96:	3001      	adds	r0, #1
 800bb98:	d1c0      	bne.n	800bb1c <_printf_float+0x304>
 800bb9a:	e69e      	b.n	800b8da <_printf_float+0xc2>
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	4631      	mov	r1, r6
 800bba0:	4628      	mov	r0, r5
 800bba2:	9205      	str	r2, [sp, #20]
 800bba4:	47b8      	blx	r7
 800bba6:	3001      	adds	r0, #1
 800bba8:	f43f ae97 	beq.w	800b8da <_printf_float+0xc2>
 800bbac:	9a05      	ldr	r2, [sp, #20]
 800bbae:	f10b 0b01 	add.w	fp, fp, #1
 800bbb2:	e7b9      	b.n	800bb28 <_printf_float+0x310>
 800bbb4:	ee18 3a10 	vmov	r3, s16
 800bbb8:	4652      	mov	r2, sl
 800bbba:	4631      	mov	r1, r6
 800bbbc:	4628      	mov	r0, r5
 800bbbe:	47b8      	blx	r7
 800bbc0:	3001      	adds	r0, #1
 800bbc2:	d1be      	bne.n	800bb42 <_printf_float+0x32a>
 800bbc4:	e689      	b.n	800b8da <_printf_float+0xc2>
 800bbc6:	9a05      	ldr	r2, [sp, #20]
 800bbc8:	464b      	mov	r3, r9
 800bbca:	4442      	add	r2, r8
 800bbcc:	4631      	mov	r1, r6
 800bbce:	4628      	mov	r0, r5
 800bbd0:	47b8      	blx	r7
 800bbd2:	3001      	adds	r0, #1
 800bbd4:	d1c1      	bne.n	800bb5a <_printf_float+0x342>
 800bbd6:	e680      	b.n	800b8da <_printf_float+0xc2>
 800bbd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbda:	2a01      	cmp	r2, #1
 800bbdc:	dc01      	bgt.n	800bbe2 <_printf_float+0x3ca>
 800bbde:	07db      	lsls	r3, r3, #31
 800bbe0:	d538      	bpl.n	800bc54 <_printf_float+0x43c>
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	4642      	mov	r2, r8
 800bbe6:	4631      	mov	r1, r6
 800bbe8:	4628      	mov	r0, r5
 800bbea:	47b8      	blx	r7
 800bbec:	3001      	adds	r0, #1
 800bbee:	f43f ae74 	beq.w	800b8da <_printf_float+0xc2>
 800bbf2:	ee18 3a10 	vmov	r3, s16
 800bbf6:	4652      	mov	r2, sl
 800bbf8:	4631      	mov	r1, r6
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	47b8      	blx	r7
 800bbfe:	3001      	adds	r0, #1
 800bc00:	f43f ae6b 	beq.w	800b8da <_printf_float+0xc2>
 800bc04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc08:	2200      	movs	r2, #0
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	f7f4 ff6c 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc10:	b9d8      	cbnz	r0, 800bc4a <_printf_float+0x432>
 800bc12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc14:	f108 0201 	add.w	r2, r8, #1
 800bc18:	3b01      	subs	r3, #1
 800bc1a:	4631      	mov	r1, r6
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	47b8      	blx	r7
 800bc20:	3001      	adds	r0, #1
 800bc22:	d10e      	bne.n	800bc42 <_printf_float+0x42a>
 800bc24:	e659      	b.n	800b8da <_printf_float+0xc2>
 800bc26:	2301      	movs	r3, #1
 800bc28:	4652      	mov	r2, sl
 800bc2a:	4631      	mov	r1, r6
 800bc2c:	4628      	mov	r0, r5
 800bc2e:	47b8      	blx	r7
 800bc30:	3001      	adds	r0, #1
 800bc32:	f43f ae52 	beq.w	800b8da <_printf_float+0xc2>
 800bc36:	f108 0801 	add.w	r8, r8, #1
 800bc3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc3c:	3b01      	subs	r3, #1
 800bc3e:	4543      	cmp	r3, r8
 800bc40:	dcf1      	bgt.n	800bc26 <_printf_float+0x40e>
 800bc42:	464b      	mov	r3, r9
 800bc44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bc48:	e6dc      	b.n	800ba04 <_printf_float+0x1ec>
 800bc4a:	f04f 0800 	mov.w	r8, #0
 800bc4e:	f104 0a1a 	add.w	sl, r4, #26
 800bc52:	e7f2      	b.n	800bc3a <_printf_float+0x422>
 800bc54:	2301      	movs	r3, #1
 800bc56:	4642      	mov	r2, r8
 800bc58:	e7df      	b.n	800bc1a <_printf_float+0x402>
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	464a      	mov	r2, r9
 800bc5e:	4631      	mov	r1, r6
 800bc60:	4628      	mov	r0, r5
 800bc62:	47b8      	blx	r7
 800bc64:	3001      	adds	r0, #1
 800bc66:	f43f ae38 	beq.w	800b8da <_printf_float+0xc2>
 800bc6a:	f108 0801 	add.w	r8, r8, #1
 800bc6e:	68e3      	ldr	r3, [r4, #12]
 800bc70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc72:	1a5b      	subs	r3, r3, r1
 800bc74:	4543      	cmp	r3, r8
 800bc76:	dcf0      	bgt.n	800bc5a <_printf_float+0x442>
 800bc78:	e6fa      	b.n	800ba70 <_printf_float+0x258>
 800bc7a:	f04f 0800 	mov.w	r8, #0
 800bc7e:	f104 0919 	add.w	r9, r4, #25
 800bc82:	e7f4      	b.n	800bc6e <_printf_float+0x456>

0800bc84 <_printf_common>:
 800bc84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc88:	4616      	mov	r6, r2
 800bc8a:	4699      	mov	r9, r3
 800bc8c:	688a      	ldr	r2, [r1, #8]
 800bc8e:	690b      	ldr	r3, [r1, #16]
 800bc90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc94:	4293      	cmp	r3, r2
 800bc96:	bfb8      	it	lt
 800bc98:	4613      	movlt	r3, r2
 800bc9a:	6033      	str	r3, [r6, #0]
 800bc9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bca0:	4607      	mov	r7, r0
 800bca2:	460c      	mov	r4, r1
 800bca4:	b10a      	cbz	r2, 800bcaa <_printf_common+0x26>
 800bca6:	3301      	adds	r3, #1
 800bca8:	6033      	str	r3, [r6, #0]
 800bcaa:	6823      	ldr	r3, [r4, #0]
 800bcac:	0699      	lsls	r1, r3, #26
 800bcae:	bf42      	ittt	mi
 800bcb0:	6833      	ldrmi	r3, [r6, #0]
 800bcb2:	3302      	addmi	r3, #2
 800bcb4:	6033      	strmi	r3, [r6, #0]
 800bcb6:	6825      	ldr	r5, [r4, #0]
 800bcb8:	f015 0506 	ands.w	r5, r5, #6
 800bcbc:	d106      	bne.n	800bccc <_printf_common+0x48>
 800bcbe:	f104 0a19 	add.w	sl, r4, #25
 800bcc2:	68e3      	ldr	r3, [r4, #12]
 800bcc4:	6832      	ldr	r2, [r6, #0]
 800bcc6:	1a9b      	subs	r3, r3, r2
 800bcc8:	42ab      	cmp	r3, r5
 800bcca:	dc26      	bgt.n	800bd1a <_printf_common+0x96>
 800bccc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bcd0:	1e13      	subs	r3, r2, #0
 800bcd2:	6822      	ldr	r2, [r4, #0]
 800bcd4:	bf18      	it	ne
 800bcd6:	2301      	movne	r3, #1
 800bcd8:	0692      	lsls	r2, r2, #26
 800bcda:	d42b      	bmi.n	800bd34 <_printf_common+0xb0>
 800bcdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bce0:	4649      	mov	r1, r9
 800bce2:	4638      	mov	r0, r7
 800bce4:	47c0      	blx	r8
 800bce6:	3001      	adds	r0, #1
 800bce8:	d01e      	beq.n	800bd28 <_printf_common+0xa4>
 800bcea:	6823      	ldr	r3, [r4, #0]
 800bcec:	68e5      	ldr	r5, [r4, #12]
 800bcee:	6832      	ldr	r2, [r6, #0]
 800bcf0:	f003 0306 	and.w	r3, r3, #6
 800bcf4:	2b04      	cmp	r3, #4
 800bcf6:	bf08      	it	eq
 800bcf8:	1aad      	subeq	r5, r5, r2
 800bcfa:	68a3      	ldr	r3, [r4, #8]
 800bcfc:	6922      	ldr	r2, [r4, #16]
 800bcfe:	bf0c      	ite	eq
 800bd00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd04:	2500      	movne	r5, #0
 800bd06:	4293      	cmp	r3, r2
 800bd08:	bfc4      	itt	gt
 800bd0a:	1a9b      	subgt	r3, r3, r2
 800bd0c:	18ed      	addgt	r5, r5, r3
 800bd0e:	2600      	movs	r6, #0
 800bd10:	341a      	adds	r4, #26
 800bd12:	42b5      	cmp	r5, r6
 800bd14:	d11a      	bne.n	800bd4c <_printf_common+0xc8>
 800bd16:	2000      	movs	r0, #0
 800bd18:	e008      	b.n	800bd2c <_printf_common+0xa8>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	4652      	mov	r2, sl
 800bd1e:	4649      	mov	r1, r9
 800bd20:	4638      	mov	r0, r7
 800bd22:	47c0      	blx	r8
 800bd24:	3001      	adds	r0, #1
 800bd26:	d103      	bne.n	800bd30 <_printf_common+0xac>
 800bd28:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd30:	3501      	adds	r5, #1
 800bd32:	e7c6      	b.n	800bcc2 <_printf_common+0x3e>
 800bd34:	18e1      	adds	r1, r4, r3
 800bd36:	1c5a      	adds	r2, r3, #1
 800bd38:	2030      	movs	r0, #48	; 0x30
 800bd3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd3e:	4422      	add	r2, r4
 800bd40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd48:	3302      	adds	r3, #2
 800bd4a:	e7c7      	b.n	800bcdc <_printf_common+0x58>
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	4622      	mov	r2, r4
 800bd50:	4649      	mov	r1, r9
 800bd52:	4638      	mov	r0, r7
 800bd54:	47c0      	blx	r8
 800bd56:	3001      	adds	r0, #1
 800bd58:	d0e6      	beq.n	800bd28 <_printf_common+0xa4>
 800bd5a:	3601      	adds	r6, #1
 800bd5c:	e7d9      	b.n	800bd12 <_printf_common+0x8e>
	...

0800bd60 <_printf_i>:
 800bd60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd64:	7e0f      	ldrb	r7, [r1, #24]
 800bd66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd68:	2f78      	cmp	r7, #120	; 0x78
 800bd6a:	4691      	mov	r9, r2
 800bd6c:	4680      	mov	r8, r0
 800bd6e:	460c      	mov	r4, r1
 800bd70:	469a      	mov	sl, r3
 800bd72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd76:	d807      	bhi.n	800bd88 <_printf_i+0x28>
 800bd78:	2f62      	cmp	r7, #98	; 0x62
 800bd7a:	d80a      	bhi.n	800bd92 <_printf_i+0x32>
 800bd7c:	2f00      	cmp	r7, #0
 800bd7e:	f000 80d8 	beq.w	800bf32 <_printf_i+0x1d2>
 800bd82:	2f58      	cmp	r7, #88	; 0x58
 800bd84:	f000 80a3 	beq.w	800bece <_printf_i+0x16e>
 800bd88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd90:	e03a      	b.n	800be08 <_printf_i+0xa8>
 800bd92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd96:	2b15      	cmp	r3, #21
 800bd98:	d8f6      	bhi.n	800bd88 <_printf_i+0x28>
 800bd9a:	a101      	add	r1, pc, #4	; (adr r1, 800bda0 <_printf_i+0x40>)
 800bd9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bda0:	0800bdf9 	.word	0x0800bdf9
 800bda4:	0800be0d 	.word	0x0800be0d
 800bda8:	0800bd89 	.word	0x0800bd89
 800bdac:	0800bd89 	.word	0x0800bd89
 800bdb0:	0800bd89 	.word	0x0800bd89
 800bdb4:	0800bd89 	.word	0x0800bd89
 800bdb8:	0800be0d 	.word	0x0800be0d
 800bdbc:	0800bd89 	.word	0x0800bd89
 800bdc0:	0800bd89 	.word	0x0800bd89
 800bdc4:	0800bd89 	.word	0x0800bd89
 800bdc8:	0800bd89 	.word	0x0800bd89
 800bdcc:	0800bf19 	.word	0x0800bf19
 800bdd0:	0800be3d 	.word	0x0800be3d
 800bdd4:	0800befb 	.word	0x0800befb
 800bdd8:	0800bd89 	.word	0x0800bd89
 800bddc:	0800bd89 	.word	0x0800bd89
 800bde0:	0800bf3b 	.word	0x0800bf3b
 800bde4:	0800bd89 	.word	0x0800bd89
 800bde8:	0800be3d 	.word	0x0800be3d
 800bdec:	0800bd89 	.word	0x0800bd89
 800bdf0:	0800bd89 	.word	0x0800bd89
 800bdf4:	0800bf03 	.word	0x0800bf03
 800bdf8:	682b      	ldr	r3, [r5, #0]
 800bdfa:	1d1a      	adds	r2, r3, #4
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	602a      	str	r2, [r5, #0]
 800be00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be08:	2301      	movs	r3, #1
 800be0a:	e0a3      	b.n	800bf54 <_printf_i+0x1f4>
 800be0c:	6820      	ldr	r0, [r4, #0]
 800be0e:	6829      	ldr	r1, [r5, #0]
 800be10:	0606      	lsls	r6, r0, #24
 800be12:	f101 0304 	add.w	r3, r1, #4
 800be16:	d50a      	bpl.n	800be2e <_printf_i+0xce>
 800be18:	680e      	ldr	r6, [r1, #0]
 800be1a:	602b      	str	r3, [r5, #0]
 800be1c:	2e00      	cmp	r6, #0
 800be1e:	da03      	bge.n	800be28 <_printf_i+0xc8>
 800be20:	232d      	movs	r3, #45	; 0x2d
 800be22:	4276      	negs	r6, r6
 800be24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be28:	485e      	ldr	r0, [pc, #376]	; (800bfa4 <_printf_i+0x244>)
 800be2a:	230a      	movs	r3, #10
 800be2c:	e019      	b.n	800be62 <_printf_i+0x102>
 800be2e:	680e      	ldr	r6, [r1, #0]
 800be30:	602b      	str	r3, [r5, #0]
 800be32:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be36:	bf18      	it	ne
 800be38:	b236      	sxthne	r6, r6
 800be3a:	e7ef      	b.n	800be1c <_printf_i+0xbc>
 800be3c:	682b      	ldr	r3, [r5, #0]
 800be3e:	6820      	ldr	r0, [r4, #0]
 800be40:	1d19      	adds	r1, r3, #4
 800be42:	6029      	str	r1, [r5, #0]
 800be44:	0601      	lsls	r1, r0, #24
 800be46:	d501      	bpl.n	800be4c <_printf_i+0xec>
 800be48:	681e      	ldr	r6, [r3, #0]
 800be4a:	e002      	b.n	800be52 <_printf_i+0xf2>
 800be4c:	0646      	lsls	r6, r0, #25
 800be4e:	d5fb      	bpl.n	800be48 <_printf_i+0xe8>
 800be50:	881e      	ldrh	r6, [r3, #0]
 800be52:	4854      	ldr	r0, [pc, #336]	; (800bfa4 <_printf_i+0x244>)
 800be54:	2f6f      	cmp	r7, #111	; 0x6f
 800be56:	bf0c      	ite	eq
 800be58:	2308      	moveq	r3, #8
 800be5a:	230a      	movne	r3, #10
 800be5c:	2100      	movs	r1, #0
 800be5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be62:	6865      	ldr	r5, [r4, #4]
 800be64:	60a5      	str	r5, [r4, #8]
 800be66:	2d00      	cmp	r5, #0
 800be68:	bfa2      	ittt	ge
 800be6a:	6821      	ldrge	r1, [r4, #0]
 800be6c:	f021 0104 	bicge.w	r1, r1, #4
 800be70:	6021      	strge	r1, [r4, #0]
 800be72:	b90e      	cbnz	r6, 800be78 <_printf_i+0x118>
 800be74:	2d00      	cmp	r5, #0
 800be76:	d04d      	beq.n	800bf14 <_printf_i+0x1b4>
 800be78:	4615      	mov	r5, r2
 800be7a:	fbb6 f1f3 	udiv	r1, r6, r3
 800be7e:	fb03 6711 	mls	r7, r3, r1, r6
 800be82:	5dc7      	ldrb	r7, [r0, r7]
 800be84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be88:	4637      	mov	r7, r6
 800be8a:	42bb      	cmp	r3, r7
 800be8c:	460e      	mov	r6, r1
 800be8e:	d9f4      	bls.n	800be7a <_printf_i+0x11a>
 800be90:	2b08      	cmp	r3, #8
 800be92:	d10b      	bne.n	800beac <_printf_i+0x14c>
 800be94:	6823      	ldr	r3, [r4, #0]
 800be96:	07de      	lsls	r6, r3, #31
 800be98:	d508      	bpl.n	800beac <_printf_i+0x14c>
 800be9a:	6923      	ldr	r3, [r4, #16]
 800be9c:	6861      	ldr	r1, [r4, #4]
 800be9e:	4299      	cmp	r1, r3
 800bea0:	bfde      	ittt	le
 800bea2:	2330      	movle	r3, #48	; 0x30
 800bea4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bea8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800beac:	1b52      	subs	r2, r2, r5
 800beae:	6122      	str	r2, [r4, #16]
 800beb0:	f8cd a000 	str.w	sl, [sp]
 800beb4:	464b      	mov	r3, r9
 800beb6:	aa03      	add	r2, sp, #12
 800beb8:	4621      	mov	r1, r4
 800beba:	4640      	mov	r0, r8
 800bebc:	f7ff fee2 	bl	800bc84 <_printf_common>
 800bec0:	3001      	adds	r0, #1
 800bec2:	d14c      	bne.n	800bf5e <_printf_i+0x1fe>
 800bec4:	f04f 30ff 	mov.w	r0, #4294967295
 800bec8:	b004      	add	sp, #16
 800beca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bece:	4835      	ldr	r0, [pc, #212]	; (800bfa4 <_printf_i+0x244>)
 800bed0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bed4:	6829      	ldr	r1, [r5, #0]
 800bed6:	6823      	ldr	r3, [r4, #0]
 800bed8:	f851 6b04 	ldr.w	r6, [r1], #4
 800bedc:	6029      	str	r1, [r5, #0]
 800bede:	061d      	lsls	r5, r3, #24
 800bee0:	d514      	bpl.n	800bf0c <_printf_i+0x1ac>
 800bee2:	07df      	lsls	r7, r3, #31
 800bee4:	bf44      	itt	mi
 800bee6:	f043 0320 	orrmi.w	r3, r3, #32
 800beea:	6023      	strmi	r3, [r4, #0]
 800beec:	b91e      	cbnz	r6, 800bef6 <_printf_i+0x196>
 800beee:	6823      	ldr	r3, [r4, #0]
 800bef0:	f023 0320 	bic.w	r3, r3, #32
 800bef4:	6023      	str	r3, [r4, #0]
 800bef6:	2310      	movs	r3, #16
 800bef8:	e7b0      	b.n	800be5c <_printf_i+0xfc>
 800befa:	6823      	ldr	r3, [r4, #0]
 800befc:	f043 0320 	orr.w	r3, r3, #32
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	2378      	movs	r3, #120	; 0x78
 800bf04:	4828      	ldr	r0, [pc, #160]	; (800bfa8 <_printf_i+0x248>)
 800bf06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf0a:	e7e3      	b.n	800bed4 <_printf_i+0x174>
 800bf0c:	0659      	lsls	r1, r3, #25
 800bf0e:	bf48      	it	mi
 800bf10:	b2b6      	uxthmi	r6, r6
 800bf12:	e7e6      	b.n	800bee2 <_printf_i+0x182>
 800bf14:	4615      	mov	r5, r2
 800bf16:	e7bb      	b.n	800be90 <_printf_i+0x130>
 800bf18:	682b      	ldr	r3, [r5, #0]
 800bf1a:	6826      	ldr	r6, [r4, #0]
 800bf1c:	6961      	ldr	r1, [r4, #20]
 800bf1e:	1d18      	adds	r0, r3, #4
 800bf20:	6028      	str	r0, [r5, #0]
 800bf22:	0635      	lsls	r5, r6, #24
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	d501      	bpl.n	800bf2c <_printf_i+0x1cc>
 800bf28:	6019      	str	r1, [r3, #0]
 800bf2a:	e002      	b.n	800bf32 <_printf_i+0x1d2>
 800bf2c:	0670      	lsls	r0, r6, #25
 800bf2e:	d5fb      	bpl.n	800bf28 <_printf_i+0x1c8>
 800bf30:	8019      	strh	r1, [r3, #0]
 800bf32:	2300      	movs	r3, #0
 800bf34:	6123      	str	r3, [r4, #16]
 800bf36:	4615      	mov	r5, r2
 800bf38:	e7ba      	b.n	800beb0 <_printf_i+0x150>
 800bf3a:	682b      	ldr	r3, [r5, #0]
 800bf3c:	1d1a      	adds	r2, r3, #4
 800bf3e:	602a      	str	r2, [r5, #0]
 800bf40:	681d      	ldr	r5, [r3, #0]
 800bf42:	6862      	ldr	r2, [r4, #4]
 800bf44:	2100      	movs	r1, #0
 800bf46:	4628      	mov	r0, r5
 800bf48:	f7f4 f95a 	bl	8000200 <memchr>
 800bf4c:	b108      	cbz	r0, 800bf52 <_printf_i+0x1f2>
 800bf4e:	1b40      	subs	r0, r0, r5
 800bf50:	6060      	str	r0, [r4, #4]
 800bf52:	6863      	ldr	r3, [r4, #4]
 800bf54:	6123      	str	r3, [r4, #16]
 800bf56:	2300      	movs	r3, #0
 800bf58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf5c:	e7a8      	b.n	800beb0 <_printf_i+0x150>
 800bf5e:	6923      	ldr	r3, [r4, #16]
 800bf60:	462a      	mov	r2, r5
 800bf62:	4649      	mov	r1, r9
 800bf64:	4640      	mov	r0, r8
 800bf66:	47d0      	blx	sl
 800bf68:	3001      	adds	r0, #1
 800bf6a:	d0ab      	beq.n	800bec4 <_printf_i+0x164>
 800bf6c:	6823      	ldr	r3, [r4, #0]
 800bf6e:	079b      	lsls	r3, r3, #30
 800bf70:	d413      	bmi.n	800bf9a <_printf_i+0x23a>
 800bf72:	68e0      	ldr	r0, [r4, #12]
 800bf74:	9b03      	ldr	r3, [sp, #12]
 800bf76:	4298      	cmp	r0, r3
 800bf78:	bfb8      	it	lt
 800bf7a:	4618      	movlt	r0, r3
 800bf7c:	e7a4      	b.n	800bec8 <_printf_i+0x168>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	4632      	mov	r2, r6
 800bf82:	4649      	mov	r1, r9
 800bf84:	4640      	mov	r0, r8
 800bf86:	47d0      	blx	sl
 800bf88:	3001      	adds	r0, #1
 800bf8a:	d09b      	beq.n	800bec4 <_printf_i+0x164>
 800bf8c:	3501      	adds	r5, #1
 800bf8e:	68e3      	ldr	r3, [r4, #12]
 800bf90:	9903      	ldr	r1, [sp, #12]
 800bf92:	1a5b      	subs	r3, r3, r1
 800bf94:	42ab      	cmp	r3, r5
 800bf96:	dcf2      	bgt.n	800bf7e <_printf_i+0x21e>
 800bf98:	e7eb      	b.n	800bf72 <_printf_i+0x212>
 800bf9a:	2500      	movs	r5, #0
 800bf9c:	f104 0619 	add.w	r6, r4, #25
 800bfa0:	e7f5      	b.n	800bf8e <_printf_i+0x22e>
 800bfa2:	bf00      	nop
 800bfa4:	0800ed64 	.word	0x0800ed64
 800bfa8:	0800ed75 	.word	0x0800ed75

0800bfac <iprintf>:
 800bfac:	b40f      	push	{r0, r1, r2, r3}
 800bfae:	4b0a      	ldr	r3, [pc, #40]	; (800bfd8 <iprintf+0x2c>)
 800bfb0:	b513      	push	{r0, r1, r4, lr}
 800bfb2:	681c      	ldr	r4, [r3, #0]
 800bfb4:	b124      	cbz	r4, 800bfc0 <iprintf+0x14>
 800bfb6:	69a3      	ldr	r3, [r4, #24]
 800bfb8:	b913      	cbnz	r3, 800bfc0 <iprintf+0x14>
 800bfba:	4620      	mov	r0, r4
 800bfbc:	f001 fa58 	bl	800d470 <__sinit>
 800bfc0:	ab05      	add	r3, sp, #20
 800bfc2:	9a04      	ldr	r2, [sp, #16]
 800bfc4:	68a1      	ldr	r1, [r4, #8]
 800bfc6:	9301      	str	r3, [sp, #4]
 800bfc8:	4620      	mov	r0, r4
 800bfca:	f002 f911 	bl	800e1f0 <_vfiprintf_r>
 800bfce:	b002      	add	sp, #8
 800bfd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfd4:	b004      	add	sp, #16
 800bfd6:	4770      	bx	lr
 800bfd8:	2000003c 	.word	0x2000003c

0800bfdc <_puts_r>:
 800bfdc:	b570      	push	{r4, r5, r6, lr}
 800bfde:	460e      	mov	r6, r1
 800bfe0:	4605      	mov	r5, r0
 800bfe2:	b118      	cbz	r0, 800bfec <_puts_r+0x10>
 800bfe4:	6983      	ldr	r3, [r0, #24]
 800bfe6:	b90b      	cbnz	r3, 800bfec <_puts_r+0x10>
 800bfe8:	f001 fa42 	bl	800d470 <__sinit>
 800bfec:	69ab      	ldr	r3, [r5, #24]
 800bfee:	68ac      	ldr	r4, [r5, #8]
 800bff0:	b913      	cbnz	r3, 800bff8 <_puts_r+0x1c>
 800bff2:	4628      	mov	r0, r5
 800bff4:	f001 fa3c 	bl	800d470 <__sinit>
 800bff8:	4b2c      	ldr	r3, [pc, #176]	; (800c0ac <_puts_r+0xd0>)
 800bffa:	429c      	cmp	r4, r3
 800bffc:	d120      	bne.n	800c040 <_puts_r+0x64>
 800bffe:	686c      	ldr	r4, [r5, #4]
 800c000:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c002:	07db      	lsls	r3, r3, #31
 800c004:	d405      	bmi.n	800c012 <_puts_r+0x36>
 800c006:	89a3      	ldrh	r3, [r4, #12]
 800c008:	0598      	lsls	r0, r3, #22
 800c00a:	d402      	bmi.n	800c012 <_puts_r+0x36>
 800c00c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c00e:	f001 fad2 	bl	800d5b6 <__retarget_lock_acquire_recursive>
 800c012:	89a3      	ldrh	r3, [r4, #12]
 800c014:	0719      	lsls	r1, r3, #28
 800c016:	d51d      	bpl.n	800c054 <_puts_r+0x78>
 800c018:	6923      	ldr	r3, [r4, #16]
 800c01a:	b1db      	cbz	r3, 800c054 <_puts_r+0x78>
 800c01c:	3e01      	subs	r6, #1
 800c01e:	68a3      	ldr	r3, [r4, #8]
 800c020:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c024:	3b01      	subs	r3, #1
 800c026:	60a3      	str	r3, [r4, #8]
 800c028:	bb39      	cbnz	r1, 800c07a <_puts_r+0x9e>
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	da38      	bge.n	800c0a0 <_puts_r+0xc4>
 800c02e:	4622      	mov	r2, r4
 800c030:	210a      	movs	r1, #10
 800c032:	4628      	mov	r0, r5
 800c034:	f000 f9a4 	bl	800c380 <__swbuf_r>
 800c038:	3001      	adds	r0, #1
 800c03a:	d011      	beq.n	800c060 <_puts_r+0x84>
 800c03c:	250a      	movs	r5, #10
 800c03e:	e011      	b.n	800c064 <_puts_r+0x88>
 800c040:	4b1b      	ldr	r3, [pc, #108]	; (800c0b0 <_puts_r+0xd4>)
 800c042:	429c      	cmp	r4, r3
 800c044:	d101      	bne.n	800c04a <_puts_r+0x6e>
 800c046:	68ac      	ldr	r4, [r5, #8]
 800c048:	e7da      	b.n	800c000 <_puts_r+0x24>
 800c04a:	4b1a      	ldr	r3, [pc, #104]	; (800c0b4 <_puts_r+0xd8>)
 800c04c:	429c      	cmp	r4, r3
 800c04e:	bf08      	it	eq
 800c050:	68ec      	ldreq	r4, [r5, #12]
 800c052:	e7d5      	b.n	800c000 <_puts_r+0x24>
 800c054:	4621      	mov	r1, r4
 800c056:	4628      	mov	r0, r5
 800c058:	f000 f9f6 	bl	800c448 <__swsetup_r>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d0dd      	beq.n	800c01c <_puts_r+0x40>
 800c060:	f04f 35ff 	mov.w	r5, #4294967295
 800c064:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c066:	07da      	lsls	r2, r3, #31
 800c068:	d405      	bmi.n	800c076 <_puts_r+0x9a>
 800c06a:	89a3      	ldrh	r3, [r4, #12]
 800c06c:	059b      	lsls	r3, r3, #22
 800c06e:	d402      	bmi.n	800c076 <_puts_r+0x9a>
 800c070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c072:	f001 faa1 	bl	800d5b8 <__retarget_lock_release_recursive>
 800c076:	4628      	mov	r0, r5
 800c078:	bd70      	pop	{r4, r5, r6, pc}
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	da04      	bge.n	800c088 <_puts_r+0xac>
 800c07e:	69a2      	ldr	r2, [r4, #24]
 800c080:	429a      	cmp	r2, r3
 800c082:	dc06      	bgt.n	800c092 <_puts_r+0xb6>
 800c084:	290a      	cmp	r1, #10
 800c086:	d004      	beq.n	800c092 <_puts_r+0xb6>
 800c088:	6823      	ldr	r3, [r4, #0]
 800c08a:	1c5a      	adds	r2, r3, #1
 800c08c:	6022      	str	r2, [r4, #0]
 800c08e:	7019      	strb	r1, [r3, #0]
 800c090:	e7c5      	b.n	800c01e <_puts_r+0x42>
 800c092:	4622      	mov	r2, r4
 800c094:	4628      	mov	r0, r5
 800c096:	f000 f973 	bl	800c380 <__swbuf_r>
 800c09a:	3001      	adds	r0, #1
 800c09c:	d1bf      	bne.n	800c01e <_puts_r+0x42>
 800c09e:	e7df      	b.n	800c060 <_puts_r+0x84>
 800c0a0:	6823      	ldr	r3, [r4, #0]
 800c0a2:	250a      	movs	r5, #10
 800c0a4:	1c5a      	adds	r2, r3, #1
 800c0a6:	6022      	str	r2, [r4, #0]
 800c0a8:	701d      	strb	r5, [r3, #0]
 800c0aa:	e7db      	b.n	800c064 <_puts_r+0x88>
 800c0ac:	0800ef38 	.word	0x0800ef38
 800c0b0:	0800ef58 	.word	0x0800ef58
 800c0b4:	0800ef18 	.word	0x0800ef18

0800c0b8 <puts>:
 800c0b8:	4b02      	ldr	r3, [pc, #8]	; (800c0c4 <puts+0xc>)
 800c0ba:	4601      	mov	r1, r0
 800c0bc:	6818      	ldr	r0, [r3, #0]
 800c0be:	f7ff bf8d 	b.w	800bfdc <_puts_r>
 800c0c2:	bf00      	nop
 800c0c4:	2000003c 	.word	0x2000003c

0800c0c8 <_sbrk_r>:
 800c0c8:	b538      	push	{r3, r4, r5, lr}
 800c0ca:	4d06      	ldr	r5, [pc, #24]	; (800c0e4 <_sbrk_r+0x1c>)
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	4608      	mov	r0, r1
 800c0d2:	602b      	str	r3, [r5, #0]
 800c0d4:	f7f6 ffae 	bl	8003034 <_sbrk>
 800c0d8:	1c43      	adds	r3, r0, #1
 800c0da:	d102      	bne.n	800c0e2 <_sbrk_r+0x1a>
 800c0dc:	682b      	ldr	r3, [r5, #0]
 800c0de:	b103      	cbz	r3, 800c0e2 <_sbrk_r+0x1a>
 800c0e0:	6023      	str	r3, [r4, #0]
 800c0e2:	bd38      	pop	{r3, r4, r5, pc}
 800c0e4:	20002624 	.word	0x20002624

0800c0e8 <_raise_r>:
 800c0e8:	291f      	cmp	r1, #31
 800c0ea:	b538      	push	{r3, r4, r5, lr}
 800c0ec:	4604      	mov	r4, r0
 800c0ee:	460d      	mov	r5, r1
 800c0f0:	d904      	bls.n	800c0fc <_raise_r+0x14>
 800c0f2:	2316      	movs	r3, #22
 800c0f4:	6003      	str	r3, [r0, #0]
 800c0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0fa:	bd38      	pop	{r3, r4, r5, pc}
 800c0fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c0fe:	b112      	cbz	r2, 800c106 <_raise_r+0x1e>
 800c100:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c104:	b94b      	cbnz	r3, 800c11a <_raise_r+0x32>
 800c106:	4620      	mov	r0, r4
 800c108:	f000 f830 	bl	800c16c <_getpid_r>
 800c10c:	462a      	mov	r2, r5
 800c10e:	4601      	mov	r1, r0
 800c110:	4620      	mov	r0, r4
 800c112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c116:	f000 b817 	b.w	800c148 <_kill_r>
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d00a      	beq.n	800c134 <_raise_r+0x4c>
 800c11e:	1c59      	adds	r1, r3, #1
 800c120:	d103      	bne.n	800c12a <_raise_r+0x42>
 800c122:	2316      	movs	r3, #22
 800c124:	6003      	str	r3, [r0, #0]
 800c126:	2001      	movs	r0, #1
 800c128:	e7e7      	b.n	800c0fa <_raise_r+0x12>
 800c12a:	2400      	movs	r4, #0
 800c12c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c130:	4628      	mov	r0, r5
 800c132:	4798      	blx	r3
 800c134:	2000      	movs	r0, #0
 800c136:	e7e0      	b.n	800c0fa <_raise_r+0x12>

0800c138 <raise>:
 800c138:	4b02      	ldr	r3, [pc, #8]	; (800c144 <raise+0xc>)
 800c13a:	4601      	mov	r1, r0
 800c13c:	6818      	ldr	r0, [r3, #0]
 800c13e:	f7ff bfd3 	b.w	800c0e8 <_raise_r>
 800c142:	bf00      	nop
 800c144:	2000003c 	.word	0x2000003c

0800c148 <_kill_r>:
 800c148:	b538      	push	{r3, r4, r5, lr}
 800c14a:	4d07      	ldr	r5, [pc, #28]	; (800c168 <_kill_r+0x20>)
 800c14c:	2300      	movs	r3, #0
 800c14e:	4604      	mov	r4, r0
 800c150:	4608      	mov	r0, r1
 800c152:	4611      	mov	r1, r2
 800c154:	602b      	str	r3, [r5, #0]
 800c156:	f7f6 ff01 	bl	8002f5c <_kill>
 800c15a:	1c43      	adds	r3, r0, #1
 800c15c:	d102      	bne.n	800c164 <_kill_r+0x1c>
 800c15e:	682b      	ldr	r3, [r5, #0]
 800c160:	b103      	cbz	r3, 800c164 <_kill_r+0x1c>
 800c162:	6023      	str	r3, [r4, #0]
 800c164:	bd38      	pop	{r3, r4, r5, pc}
 800c166:	bf00      	nop
 800c168:	20002624 	.word	0x20002624

0800c16c <_getpid_r>:
 800c16c:	f7f6 beee 	b.w	8002f4c <_getpid>

0800c170 <siscanf>:
 800c170:	b40e      	push	{r1, r2, r3}
 800c172:	b510      	push	{r4, lr}
 800c174:	b09f      	sub	sp, #124	; 0x7c
 800c176:	ac21      	add	r4, sp, #132	; 0x84
 800c178:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c17c:	f854 2b04 	ldr.w	r2, [r4], #4
 800c180:	9201      	str	r2, [sp, #4]
 800c182:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c186:	9004      	str	r0, [sp, #16]
 800c188:	9008      	str	r0, [sp, #32]
 800c18a:	f7f4 f82b 	bl	80001e4 <strlen>
 800c18e:	4b0c      	ldr	r3, [pc, #48]	; (800c1c0 <siscanf+0x50>)
 800c190:	9005      	str	r0, [sp, #20]
 800c192:	9009      	str	r0, [sp, #36]	; 0x24
 800c194:	930d      	str	r3, [sp, #52]	; 0x34
 800c196:	480b      	ldr	r0, [pc, #44]	; (800c1c4 <siscanf+0x54>)
 800c198:	9a01      	ldr	r2, [sp, #4]
 800c19a:	6800      	ldr	r0, [r0, #0]
 800c19c:	9403      	str	r4, [sp, #12]
 800c19e:	2300      	movs	r3, #0
 800c1a0:	9311      	str	r3, [sp, #68]	; 0x44
 800c1a2:	9316      	str	r3, [sp, #88]	; 0x58
 800c1a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c1a8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c1ac:	a904      	add	r1, sp, #16
 800c1ae:	4623      	mov	r3, r4
 800c1b0:	f001 fe7c 	bl	800deac <__ssvfiscanf_r>
 800c1b4:	b01f      	add	sp, #124	; 0x7c
 800c1b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1ba:	b003      	add	sp, #12
 800c1bc:	4770      	bx	lr
 800c1be:	bf00      	nop
 800c1c0:	0800c1eb 	.word	0x0800c1eb
 800c1c4:	2000003c 	.word	0x2000003c

0800c1c8 <__sread>:
 800c1c8:	b510      	push	{r4, lr}
 800c1ca:	460c      	mov	r4, r1
 800c1cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1d0:	f002 fa90 	bl	800e6f4 <_read_r>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	bfab      	itete	ge
 800c1d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1da:	89a3      	ldrhlt	r3, [r4, #12]
 800c1dc:	181b      	addge	r3, r3, r0
 800c1de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1e2:	bfac      	ite	ge
 800c1e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1e6:	81a3      	strhlt	r3, [r4, #12]
 800c1e8:	bd10      	pop	{r4, pc}

0800c1ea <__seofread>:
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	4770      	bx	lr

0800c1ee <__swrite>:
 800c1ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f2:	461f      	mov	r7, r3
 800c1f4:	898b      	ldrh	r3, [r1, #12]
 800c1f6:	05db      	lsls	r3, r3, #23
 800c1f8:	4605      	mov	r5, r0
 800c1fa:	460c      	mov	r4, r1
 800c1fc:	4616      	mov	r6, r2
 800c1fe:	d505      	bpl.n	800c20c <__swrite+0x1e>
 800c200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c204:	2302      	movs	r3, #2
 800c206:	2200      	movs	r2, #0
 800c208:	f001 f9d8 	bl	800d5bc <_lseek_r>
 800c20c:	89a3      	ldrh	r3, [r4, #12]
 800c20e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c212:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c216:	81a3      	strh	r3, [r4, #12]
 800c218:	4632      	mov	r2, r6
 800c21a:	463b      	mov	r3, r7
 800c21c:	4628      	mov	r0, r5
 800c21e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c222:	f000 b8ff 	b.w	800c424 <_write_r>

0800c226 <__sseek>:
 800c226:	b510      	push	{r4, lr}
 800c228:	460c      	mov	r4, r1
 800c22a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c22e:	f001 f9c5 	bl	800d5bc <_lseek_r>
 800c232:	1c43      	adds	r3, r0, #1
 800c234:	89a3      	ldrh	r3, [r4, #12]
 800c236:	bf15      	itete	ne
 800c238:	6560      	strne	r0, [r4, #84]	; 0x54
 800c23a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c23e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c242:	81a3      	strheq	r3, [r4, #12]
 800c244:	bf18      	it	ne
 800c246:	81a3      	strhne	r3, [r4, #12]
 800c248:	bd10      	pop	{r4, pc}

0800c24a <__sclose>:
 800c24a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c24e:	f000 b969 	b.w	800c524 <_close_r>

0800c252 <strcpy>:
 800c252:	4603      	mov	r3, r0
 800c254:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c258:	f803 2b01 	strb.w	r2, [r3], #1
 800c25c:	2a00      	cmp	r2, #0
 800c25e:	d1f9      	bne.n	800c254 <strcpy+0x2>
 800c260:	4770      	bx	lr
	...

0800c264 <_strtol_l.constprop.0>:
 800c264:	2b01      	cmp	r3, #1
 800c266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c26a:	d001      	beq.n	800c270 <_strtol_l.constprop.0+0xc>
 800c26c:	2b24      	cmp	r3, #36	; 0x24
 800c26e:	d906      	bls.n	800c27e <_strtol_l.constprop.0+0x1a>
 800c270:	f7ff f902 	bl	800b478 <__errno>
 800c274:	2316      	movs	r3, #22
 800c276:	6003      	str	r3, [r0, #0]
 800c278:	2000      	movs	r0, #0
 800c27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c27e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c364 <_strtol_l.constprop.0+0x100>
 800c282:	460d      	mov	r5, r1
 800c284:	462e      	mov	r6, r5
 800c286:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c28a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c28e:	f017 0708 	ands.w	r7, r7, #8
 800c292:	d1f7      	bne.n	800c284 <_strtol_l.constprop.0+0x20>
 800c294:	2c2d      	cmp	r4, #45	; 0x2d
 800c296:	d132      	bne.n	800c2fe <_strtol_l.constprop.0+0x9a>
 800c298:	782c      	ldrb	r4, [r5, #0]
 800c29a:	2701      	movs	r7, #1
 800c29c:	1cb5      	adds	r5, r6, #2
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d05b      	beq.n	800c35a <_strtol_l.constprop.0+0xf6>
 800c2a2:	2b10      	cmp	r3, #16
 800c2a4:	d109      	bne.n	800c2ba <_strtol_l.constprop.0+0x56>
 800c2a6:	2c30      	cmp	r4, #48	; 0x30
 800c2a8:	d107      	bne.n	800c2ba <_strtol_l.constprop.0+0x56>
 800c2aa:	782c      	ldrb	r4, [r5, #0]
 800c2ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c2b0:	2c58      	cmp	r4, #88	; 0x58
 800c2b2:	d14d      	bne.n	800c350 <_strtol_l.constprop.0+0xec>
 800c2b4:	786c      	ldrb	r4, [r5, #1]
 800c2b6:	2310      	movs	r3, #16
 800c2b8:	3502      	adds	r5, #2
 800c2ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c2be:	f108 38ff 	add.w	r8, r8, #4294967295
 800c2c2:	f04f 0c00 	mov.w	ip, #0
 800c2c6:	fbb8 f9f3 	udiv	r9, r8, r3
 800c2ca:	4666      	mov	r6, ip
 800c2cc:	fb03 8a19 	mls	sl, r3, r9, r8
 800c2d0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c2d4:	f1be 0f09 	cmp.w	lr, #9
 800c2d8:	d816      	bhi.n	800c308 <_strtol_l.constprop.0+0xa4>
 800c2da:	4674      	mov	r4, lr
 800c2dc:	42a3      	cmp	r3, r4
 800c2de:	dd24      	ble.n	800c32a <_strtol_l.constprop.0+0xc6>
 800c2e0:	f1bc 0f00 	cmp.w	ip, #0
 800c2e4:	db1e      	blt.n	800c324 <_strtol_l.constprop.0+0xc0>
 800c2e6:	45b1      	cmp	r9, r6
 800c2e8:	d31c      	bcc.n	800c324 <_strtol_l.constprop.0+0xc0>
 800c2ea:	d101      	bne.n	800c2f0 <_strtol_l.constprop.0+0x8c>
 800c2ec:	45a2      	cmp	sl, r4
 800c2ee:	db19      	blt.n	800c324 <_strtol_l.constprop.0+0xc0>
 800c2f0:	fb06 4603 	mla	r6, r6, r3, r4
 800c2f4:	f04f 0c01 	mov.w	ip, #1
 800c2f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2fc:	e7e8      	b.n	800c2d0 <_strtol_l.constprop.0+0x6c>
 800c2fe:	2c2b      	cmp	r4, #43	; 0x2b
 800c300:	bf04      	itt	eq
 800c302:	782c      	ldrbeq	r4, [r5, #0]
 800c304:	1cb5      	addeq	r5, r6, #2
 800c306:	e7ca      	b.n	800c29e <_strtol_l.constprop.0+0x3a>
 800c308:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c30c:	f1be 0f19 	cmp.w	lr, #25
 800c310:	d801      	bhi.n	800c316 <_strtol_l.constprop.0+0xb2>
 800c312:	3c37      	subs	r4, #55	; 0x37
 800c314:	e7e2      	b.n	800c2dc <_strtol_l.constprop.0+0x78>
 800c316:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c31a:	f1be 0f19 	cmp.w	lr, #25
 800c31e:	d804      	bhi.n	800c32a <_strtol_l.constprop.0+0xc6>
 800c320:	3c57      	subs	r4, #87	; 0x57
 800c322:	e7db      	b.n	800c2dc <_strtol_l.constprop.0+0x78>
 800c324:	f04f 3cff 	mov.w	ip, #4294967295
 800c328:	e7e6      	b.n	800c2f8 <_strtol_l.constprop.0+0x94>
 800c32a:	f1bc 0f00 	cmp.w	ip, #0
 800c32e:	da05      	bge.n	800c33c <_strtol_l.constprop.0+0xd8>
 800c330:	2322      	movs	r3, #34	; 0x22
 800c332:	6003      	str	r3, [r0, #0]
 800c334:	4646      	mov	r6, r8
 800c336:	b942      	cbnz	r2, 800c34a <_strtol_l.constprop.0+0xe6>
 800c338:	4630      	mov	r0, r6
 800c33a:	e79e      	b.n	800c27a <_strtol_l.constprop.0+0x16>
 800c33c:	b107      	cbz	r7, 800c340 <_strtol_l.constprop.0+0xdc>
 800c33e:	4276      	negs	r6, r6
 800c340:	2a00      	cmp	r2, #0
 800c342:	d0f9      	beq.n	800c338 <_strtol_l.constprop.0+0xd4>
 800c344:	f1bc 0f00 	cmp.w	ip, #0
 800c348:	d000      	beq.n	800c34c <_strtol_l.constprop.0+0xe8>
 800c34a:	1e69      	subs	r1, r5, #1
 800c34c:	6011      	str	r1, [r2, #0]
 800c34e:	e7f3      	b.n	800c338 <_strtol_l.constprop.0+0xd4>
 800c350:	2430      	movs	r4, #48	; 0x30
 800c352:	2b00      	cmp	r3, #0
 800c354:	d1b1      	bne.n	800c2ba <_strtol_l.constprop.0+0x56>
 800c356:	2308      	movs	r3, #8
 800c358:	e7af      	b.n	800c2ba <_strtol_l.constprop.0+0x56>
 800c35a:	2c30      	cmp	r4, #48	; 0x30
 800c35c:	d0a5      	beq.n	800c2aa <_strtol_l.constprop.0+0x46>
 800c35e:	230a      	movs	r3, #10
 800c360:	e7ab      	b.n	800c2ba <_strtol_l.constprop.0+0x56>
 800c362:	bf00      	nop
 800c364:	0800ed87 	.word	0x0800ed87

0800c368 <_strtol_r>:
 800c368:	f7ff bf7c 	b.w	800c264 <_strtol_l.constprop.0>

0800c36c <strtol>:
 800c36c:	4613      	mov	r3, r2
 800c36e:	460a      	mov	r2, r1
 800c370:	4601      	mov	r1, r0
 800c372:	4802      	ldr	r0, [pc, #8]	; (800c37c <strtol+0x10>)
 800c374:	6800      	ldr	r0, [r0, #0]
 800c376:	f7ff bf75 	b.w	800c264 <_strtol_l.constprop.0>
 800c37a:	bf00      	nop
 800c37c:	2000003c 	.word	0x2000003c

0800c380 <__swbuf_r>:
 800c380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c382:	460e      	mov	r6, r1
 800c384:	4614      	mov	r4, r2
 800c386:	4605      	mov	r5, r0
 800c388:	b118      	cbz	r0, 800c392 <__swbuf_r+0x12>
 800c38a:	6983      	ldr	r3, [r0, #24]
 800c38c:	b90b      	cbnz	r3, 800c392 <__swbuf_r+0x12>
 800c38e:	f001 f86f 	bl	800d470 <__sinit>
 800c392:	4b21      	ldr	r3, [pc, #132]	; (800c418 <__swbuf_r+0x98>)
 800c394:	429c      	cmp	r4, r3
 800c396:	d12b      	bne.n	800c3f0 <__swbuf_r+0x70>
 800c398:	686c      	ldr	r4, [r5, #4]
 800c39a:	69a3      	ldr	r3, [r4, #24]
 800c39c:	60a3      	str	r3, [r4, #8]
 800c39e:	89a3      	ldrh	r3, [r4, #12]
 800c3a0:	071a      	lsls	r2, r3, #28
 800c3a2:	d52f      	bpl.n	800c404 <__swbuf_r+0x84>
 800c3a4:	6923      	ldr	r3, [r4, #16]
 800c3a6:	b36b      	cbz	r3, 800c404 <__swbuf_r+0x84>
 800c3a8:	6923      	ldr	r3, [r4, #16]
 800c3aa:	6820      	ldr	r0, [r4, #0]
 800c3ac:	1ac0      	subs	r0, r0, r3
 800c3ae:	6963      	ldr	r3, [r4, #20]
 800c3b0:	b2f6      	uxtb	r6, r6
 800c3b2:	4283      	cmp	r3, r0
 800c3b4:	4637      	mov	r7, r6
 800c3b6:	dc04      	bgt.n	800c3c2 <__swbuf_r+0x42>
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	f000 ffc4 	bl	800d348 <_fflush_r>
 800c3c0:	bb30      	cbnz	r0, 800c410 <__swbuf_r+0x90>
 800c3c2:	68a3      	ldr	r3, [r4, #8]
 800c3c4:	3b01      	subs	r3, #1
 800c3c6:	60a3      	str	r3, [r4, #8]
 800c3c8:	6823      	ldr	r3, [r4, #0]
 800c3ca:	1c5a      	adds	r2, r3, #1
 800c3cc:	6022      	str	r2, [r4, #0]
 800c3ce:	701e      	strb	r6, [r3, #0]
 800c3d0:	6963      	ldr	r3, [r4, #20]
 800c3d2:	3001      	adds	r0, #1
 800c3d4:	4283      	cmp	r3, r0
 800c3d6:	d004      	beq.n	800c3e2 <__swbuf_r+0x62>
 800c3d8:	89a3      	ldrh	r3, [r4, #12]
 800c3da:	07db      	lsls	r3, r3, #31
 800c3dc:	d506      	bpl.n	800c3ec <__swbuf_r+0x6c>
 800c3de:	2e0a      	cmp	r6, #10
 800c3e0:	d104      	bne.n	800c3ec <__swbuf_r+0x6c>
 800c3e2:	4621      	mov	r1, r4
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	f000 ffaf 	bl	800d348 <_fflush_r>
 800c3ea:	b988      	cbnz	r0, 800c410 <__swbuf_r+0x90>
 800c3ec:	4638      	mov	r0, r7
 800c3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3f0:	4b0a      	ldr	r3, [pc, #40]	; (800c41c <__swbuf_r+0x9c>)
 800c3f2:	429c      	cmp	r4, r3
 800c3f4:	d101      	bne.n	800c3fa <__swbuf_r+0x7a>
 800c3f6:	68ac      	ldr	r4, [r5, #8]
 800c3f8:	e7cf      	b.n	800c39a <__swbuf_r+0x1a>
 800c3fa:	4b09      	ldr	r3, [pc, #36]	; (800c420 <__swbuf_r+0xa0>)
 800c3fc:	429c      	cmp	r4, r3
 800c3fe:	bf08      	it	eq
 800c400:	68ec      	ldreq	r4, [r5, #12]
 800c402:	e7ca      	b.n	800c39a <__swbuf_r+0x1a>
 800c404:	4621      	mov	r1, r4
 800c406:	4628      	mov	r0, r5
 800c408:	f000 f81e 	bl	800c448 <__swsetup_r>
 800c40c:	2800      	cmp	r0, #0
 800c40e:	d0cb      	beq.n	800c3a8 <__swbuf_r+0x28>
 800c410:	f04f 37ff 	mov.w	r7, #4294967295
 800c414:	e7ea      	b.n	800c3ec <__swbuf_r+0x6c>
 800c416:	bf00      	nop
 800c418:	0800ef38 	.word	0x0800ef38
 800c41c:	0800ef58 	.word	0x0800ef58
 800c420:	0800ef18 	.word	0x0800ef18

0800c424 <_write_r>:
 800c424:	b538      	push	{r3, r4, r5, lr}
 800c426:	4d07      	ldr	r5, [pc, #28]	; (800c444 <_write_r+0x20>)
 800c428:	4604      	mov	r4, r0
 800c42a:	4608      	mov	r0, r1
 800c42c:	4611      	mov	r1, r2
 800c42e:	2200      	movs	r2, #0
 800c430:	602a      	str	r2, [r5, #0]
 800c432:	461a      	mov	r2, r3
 800c434:	f7f5 ff42 	bl	80022bc <_write>
 800c438:	1c43      	adds	r3, r0, #1
 800c43a:	d102      	bne.n	800c442 <_write_r+0x1e>
 800c43c:	682b      	ldr	r3, [r5, #0]
 800c43e:	b103      	cbz	r3, 800c442 <_write_r+0x1e>
 800c440:	6023      	str	r3, [r4, #0]
 800c442:	bd38      	pop	{r3, r4, r5, pc}
 800c444:	20002624 	.word	0x20002624

0800c448 <__swsetup_r>:
 800c448:	4b32      	ldr	r3, [pc, #200]	; (800c514 <__swsetup_r+0xcc>)
 800c44a:	b570      	push	{r4, r5, r6, lr}
 800c44c:	681d      	ldr	r5, [r3, #0]
 800c44e:	4606      	mov	r6, r0
 800c450:	460c      	mov	r4, r1
 800c452:	b125      	cbz	r5, 800c45e <__swsetup_r+0x16>
 800c454:	69ab      	ldr	r3, [r5, #24]
 800c456:	b913      	cbnz	r3, 800c45e <__swsetup_r+0x16>
 800c458:	4628      	mov	r0, r5
 800c45a:	f001 f809 	bl	800d470 <__sinit>
 800c45e:	4b2e      	ldr	r3, [pc, #184]	; (800c518 <__swsetup_r+0xd0>)
 800c460:	429c      	cmp	r4, r3
 800c462:	d10f      	bne.n	800c484 <__swsetup_r+0x3c>
 800c464:	686c      	ldr	r4, [r5, #4]
 800c466:	89a3      	ldrh	r3, [r4, #12]
 800c468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c46c:	0719      	lsls	r1, r3, #28
 800c46e:	d42c      	bmi.n	800c4ca <__swsetup_r+0x82>
 800c470:	06dd      	lsls	r5, r3, #27
 800c472:	d411      	bmi.n	800c498 <__swsetup_r+0x50>
 800c474:	2309      	movs	r3, #9
 800c476:	6033      	str	r3, [r6, #0]
 800c478:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c47c:	81a3      	strh	r3, [r4, #12]
 800c47e:	f04f 30ff 	mov.w	r0, #4294967295
 800c482:	e03e      	b.n	800c502 <__swsetup_r+0xba>
 800c484:	4b25      	ldr	r3, [pc, #148]	; (800c51c <__swsetup_r+0xd4>)
 800c486:	429c      	cmp	r4, r3
 800c488:	d101      	bne.n	800c48e <__swsetup_r+0x46>
 800c48a:	68ac      	ldr	r4, [r5, #8]
 800c48c:	e7eb      	b.n	800c466 <__swsetup_r+0x1e>
 800c48e:	4b24      	ldr	r3, [pc, #144]	; (800c520 <__swsetup_r+0xd8>)
 800c490:	429c      	cmp	r4, r3
 800c492:	bf08      	it	eq
 800c494:	68ec      	ldreq	r4, [r5, #12]
 800c496:	e7e6      	b.n	800c466 <__swsetup_r+0x1e>
 800c498:	0758      	lsls	r0, r3, #29
 800c49a:	d512      	bpl.n	800c4c2 <__swsetup_r+0x7a>
 800c49c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c49e:	b141      	cbz	r1, 800c4b2 <__swsetup_r+0x6a>
 800c4a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4a4:	4299      	cmp	r1, r3
 800c4a6:	d002      	beq.n	800c4ae <__swsetup_r+0x66>
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	f7ff f835 	bl	800b518 <_free_r>
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	6363      	str	r3, [r4, #52]	; 0x34
 800c4b2:	89a3      	ldrh	r3, [r4, #12]
 800c4b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c4b8:	81a3      	strh	r3, [r4, #12]
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	6063      	str	r3, [r4, #4]
 800c4be:	6923      	ldr	r3, [r4, #16]
 800c4c0:	6023      	str	r3, [r4, #0]
 800c4c2:	89a3      	ldrh	r3, [r4, #12]
 800c4c4:	f043 0308 	orr.w	r3, r3, #8
 800c4c8:	81a3      	strh	r3, [r4, #12]
 800c4ca:	6923      	ldr	r3, [r4, #16]
 800c4cc:	b94b      	cbnz	r3, 800c4e2 <__swsetup_r+0x9a>
 800c4ce:	89a3      	ldrh	r3, [r4, #12]
 800c4d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c4d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4d8:	d003      	beq.n	800c4e2 <__swsetup_r+0x9a>
 800c4da:	4621      	mov	r1, r4
 800c4dc:	4630      	mov	r0, r6
 800c4de:	f001 f8a5 	bl	800d62c <__smakebuf_r>
 800c4e2:	89a0      	ldrh	r0, [r4, #12]
 800c4e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4e8:	f010 0301 	ands.w	r3, r0, #1
 800c4ec:	d00a      	beq.n	800c504 <__swsetup_r+0xbc>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	60a3      	str	r3, [r4, #8]
 800c4f2:	6963      	ldr	r3, [r4, #20]
 800c4f4:	425b      	negs	r3, r3
 800c4f6:	61a3      	str	r3, [r4, #24]
 800c4f8:	6923      	ldr	r3, [r4, #16]
 800c4fa:	b943      	cbnz	r3, 800c50e <__swsetup_r+0xc6>
 800c4fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c500:	d1ba      	bne.n	800c478 <__swsetup_r+0x30>
 800c502:	bd70      	pop	{r4, r5, r6, pc}
 800c504:	0781      	lsls	r1, r0, #30
 800c506:	bf58      	it	pl
 800c508:	6963      	ldrpl	r3, [r4, #20]
 800c50a:	60a3      	str	r3, [r4, #8]
 800c50c:	e7f4      	b.n	800c4f8 <__swsetup_r+0xb0>
 800c50e:	2000      	movs	r0, #0
 800c510:	e7f7      	b.n	800c502 <__swsetup_r+0xba>
 800c512:	bf00      	nop
 800c514:	2000003c 	.word	0x2000003c
 800c518:	0800ef38 	.word	0x0800ef38
 800c51c:	0800ef58 	.word	0x0800ef58
 800c520:	0800ef18 	.word	0x0800ef18

0800c524 <_close_r>:
 800c524:	b538      	push	{r3, r4, r5, lr}
 800c526:	4d06      	ldr	r5, [pc, #24]	; (800c540 <_close_r+0x1c>)
 800c528:	2300      	movs	r3, #0
 800c52a:	4604      	mov	r4, r0
 800c52c:	4608      	mov	r0, r1
 800c52e:	602b      	str	r3, [r5, #0]
 800c530:	f7f6 fd4b 	bl	8002fca <_close>
 800c534:	1c43      	adds	r3, r0, #1
 800c536:	d102      	bne.n	800c53e <_close_r+0x1a>
 800c538:	682b      	ldr	r3, [r5, #0]
 800c53a:	b103      	cbz	r3, 800c53e <_close_r+0x1a>
 800c53c:	6023      	str	r3, [r4, #0]
 800c53e:	bd38      	pop	{r3, r4, r5, pc}
 800c540:	20002624 	.word	0x20002624

0800c544 <quorem>:
 800c544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c548:	6903      	ldr	r3, [r0, #16]
 800c54a:	690c      	ldr	r4, [r1, #16]
 800c54c:	42a3      	cmp	r3, r4
 800c54e:	4607      	mov	r7, r0
 800c550:	f2c0 8081 	blt.w	800c656 <quorem+0x112>
 800c554:	3c01      	subs	r4, #1
 800c556:	f101 0814 	add.w	r8, r1, #20
 800c55a:	f100 0514 	add.w	r5, r0, #20
 800c55e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c562:	9301      	str	r3, [sp, #4]
 800c564:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c568:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c56c:	3301      	adds	r3, #1
 800c56e:	429a      	cmp	r2, r3
 800c570:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c574:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c578:	fbb2 f6f3 	udiv	r6, r2, r3
 800c57c:	d331      	bcc.n	800c5e2 <quorem+0x9e>
 800c57e:	f04f 0e00 	mov.w	lr, #0
 800c582:	4640      	mov	r0, r8
 800c584:	46ac      	mov	ip, r5
 800c586:	46f2      	mov	sl, lr
 800c588:	f850 2b04 	ldr.w	r2, [r0], #4
 800c58c:	b293      	uxth	r3, r2
 800c58e:	fb06 e303 	mla	r3, r6, r3, lr
 800c592:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c596:	b29b      	uxth	r3, r3
 800c598:	ebaa 0303 	sub.w	r3, sl, r3
 800c59c:	f8dc a000 	ldr.w	sl, [ip]
 800c5a0:	0c12      	lsrs	r2, r2, #16
 800c5a2:	fa13 f38a 	uxtah	r3, r3, sl
 800c5a6:	fb06 e202 	mla	r2, r6, r2, lr
 800c5aa:	9300      	str	r3, [sp, #0]
 800c5ac:	9b00      	ldr	r3, [sp, #0]
 800c5ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c5b2:	b292      	uxth	r2, r2
 800c5b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c5b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5bc:	f8bd 3000 	ldrh.w	r3, [sp]
 800c5c0:	4581      	cmp	r9, r0
 800c5c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5c6:	f84c 3b04 	str.w	r3, [ip], #4
 800c5ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c5ce:	d2db      	bcs.n	800c588 <quorem+0x44>
 800c5d0:	f855 300b 	ldr.w	r3, [r5, fp]
 800c5d4:	b92b      	cbnz	r3, 800c5e2 <quorem+0x9e>
 800c5d6:	9b01      	ldr	r3, [sp, #4]
 800c5d8:	3b04      	subs	r3, #4
 800c5da:	429d      	cmp	r5, r3
 800c5dc:	461a      	mov	r2, r3
 800c5de:	d32e      	bcc.n	800c63e <quorem+0xfa>
 800c5e0:	613c      	str	r4, [r7, #16]
 800c5e2:	4638      	mov	r0, r7
 800c5e4:	f001 faf0 	bl	800dbc8 <__mcmp>
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	db24      	blt.n	800c636 <quorem+0xf2>
 800c5ec:	3601      	adds	r6, #1
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	f04f 0c00 	mov.w	ip, #0
 800c5f4:	f858 2b04 	ldr.w	r2, [r8], #4
 800c5f8:	f8d0 e000 	ldr.w	lr, [r0]
 800c5fc:	b293      	uxth	r3, r2
 800c5fe:	ebac 0303 	sub.w	r3, ip, r3
 800c602:	0c12      	lsrs	r2, r2, #16
 800c604:	fa13 f38e 	uxtah	r3, r3, lr
 800c608:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c60c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c610:	b29b      	uxth	r3, r3
 800c612:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c616:	45c1      	cmp	r9, r8
 800c618:	f840 3b04 	str.w	r3, [r0], #4
 800c61c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c620:	d2e8      	bcs.n	800c5f4 <quorem+0xb0>
 800c622:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c626:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c62a:	b922      	cbnz	r2, 800c636 <quorem+0xf2>
 800c62c:	3b04      	subs	r3, #4
 800c62e:	429d      	cmp	r5, r3
 800c630:	461a      	mov	r2, r3
 800c632:	d30a      	bcc.n	800c64a <quorem+0x106>
 800c634:	613c      	str	r4, [r7, #16]
 800c636:	4630      	mov	r0, r6
 800c638:	b003      	add	sp, #12
 800c63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c63e:	6812      	ldr	r2, [r2, #0]
 800c640:	3b04      	subs	r3, #4
 800c642:	2a00      	cmp	r2, #0
 800c644:	d1cc      	bne.n	800c5e0 <quorem+0x9c>
 800c646:	3c01      	subs	r4, #1
 800c648:	e7c7      	b.n	800c5da <quorem+0x96>
 800c64a:	6812      	ldr	r2, [r2, #0]
 800c64c:	3b04      	subs	r3, #4
 800c64e:	2a00      	cmp	r2, #0
 800c650:	d1f0      	bne.n	800c634 <quorem+0xf0>
 800c652:	3c01      	subs	r4, #1
 800c654:	e7eb      	b.n	800c62e <quorem+0xea>
 800c656:	2000      	movs	r0, #0
 800c658:	e7ee      	b.n	800c638 <quorem+0xf4>
 800c65a:	0000      	movs	r0, r0
 800c65c:	0000      	movs	r0, r0
	...

0800c660 <_dtoa_r>:
 800c660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c664:	ed2d 8b04 	vpush	{d8-d9}
 800c668:	ec57 6b10 	vmov	r6, r7, d0
 800c66c:	b093      	sub	sp, #76	; 0x4c
 800c66e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c670:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c674:	9106      	str	r1, [sp, #24]
 800c676:	ee10 aa10 	vmov	sl, s0
 800c67a:	4604      	mov	r4, r0
 800c67c:	9209      	str	r2, [sp, #36]	; 0x24
 800c67e:	930c      	str	r3, [sp, #48]	; 0x30
 800c680:	46bb      	mov	fp, r7
 800c682:	b975      	cbnz	r5, 800c6a2 <_dtoa_r+0x42>
 800c684:	2010      	movs	r0, #16
 800c686:	f7fe ff21 	bl	800b4cc <malloc>
 800c68a:	4602      	mov	r2, r0
 800c68c:	6260      	str	r0, [r4, #36]	; 0x24
 800c68e:	b920      	cbnz	r0, 800c69a <_dtoa_r+0x3a>
 800c690:	4ba7      	ldr	r3, [pc, #668]	; (800c930 <_dtoa_r+0x2d0>)
 800c692:	21ea      	movs	r1, #234	; 0xea
 800c694:	48a7      	ldr	r0, [pc, #668]	; (800c934 <_dtoa_r+0x2d4>)
 800c696:	f002 f925 	bl	800e8e4 <__assert_func>
 800c69a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c69e:	6005      	str	r5, [r0, #0]
 800c6a0:	60c5      	str	r5, [r0, #12]
 800c6a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6a4:	6819      	ldr	r1, [r3, #0]
 800c6a6:	b151      	cbz	r1, 800c6be <_dtoa_r+0x5e>
 800c6a8:	685a      	ldr	r2, [r3, #4]
 800c6aa:	604a      	str	r2, [r1, #4]
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	4093      	lsls	r3, r2
 800c6b0:	608b      	str	r3, [r1, #8]
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f001 f846 	bl	800d744 <_Bfree>
 800c6b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	601a      	str	r2, [r3, #0]
 800c6be:	1e3b      	subs	r3, r7, #0
 800c6c0:	bfaa      	itet	ge
 800c6c2:	2300      	movge	r3, #0
 800c6c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c6c8:	f8c8 3000 	strge.w	r3, [r8]
 800c6cc:	4b9a      	ldr	r3, [pc, #616]	; (800c938 <_dtoa_r+0x2d8>)
 800c6ce:	bfbc      	itt	lt
 800c6d0:	2201      	movlt	r2, #1
 800c6d2:	f8c8 2000 	strlt.w	r2, [r8]
 800c6d6:	ea33 030b 	bics.w	r3, r3, fp
 800c6da:	d11b      	bne.n	800c714 <_dtoa_r+0xb4>
 800c6dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6de:	f242 730f 	movw	r3, #9999	; 0x270f
 800c6e2:	6013      	str	r3, [r2, #0]
 800c6e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c6e8:	4333      	orrs	r3, r6
 800c6ea:	f000 8592 	beq.w	800d212 <_dtoa_r+0xbb2>
 800c6ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6f0:	b963      	cbnz	r3, 800c70c <_dtoa_r+0xac>
 800c6f2:	4b92      	ldr	r3, [pc, #584]	; (800c93c <_dtoa_r+0x2dc>)
 800c6f4:	e022      	b.n	800c73c <_dtoa_r+0xdc>
 800c6f6:	4b92      	ldr	r3, [pc, #584]	; (800c940 <_dtoa_r+0x2e0>)
 800c6f8:	9301      	str	r3, [sp, #4]
 800c6fa:	3308      	adds	r3, #8
 800c6fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c6fe:	6013      	str	r3, [r2, #0]
 800c700:	9801      	ldr	r0, [sp, #4]
 800c702:	b013      	add	sp, #76	; 0x4c
 800c704:	ecbd 8b04 	vpop	{d8-d9}
 800c708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c70c:	4b8b      	ldr	r3, [pc, #556]	; (800c93c <_dtoa_r+0x2dc>)
 800c70e:	9301      	str	r3, [sp, #4]
 800c710:	3303      	adds	r3, #3
 800c712:	e7f3      	b.n	800c6fc <_dtoa_r+0x9c>
 800c714:	2200      	movs	r2, #0
 800c716:	2300      	movs	r3, #0
 800c718:	4650      	mov	r0, sl
 800c71a:	4659      	mov	r1, fp
 800c71c:	f7f4 f9e4 	bl	8000ae8 <__aeabi_dcmpeq>
 800c720:	ec4b ab19 	vmov	d9, sl, fp
 800c724:	4680      	mov	r8, r0
 800c726:	b158      	cbz	r0, 800c740 <_dtoa_r+0xe0>
 800c728:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c72a:	2301      	movs	r3, #1
 800c72c:	6013      	str	r3, [r2, #0]
 800c72e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c730:	2b00      	cmp	r3, #0
 800c732:	f000 856b 	beq.w	800d20c <_dtoa_r+0xbac>
 800c736:	4883      	ldr	r0, [pc, #524]	; (800c944 <_dtoa_r+0x2e4>)
 800c738:	6018      	str	r0, [r3, #0]
 800c73a:	1e43      	subs	r3, r0, #1
 800c73c:	9301      	str	r3, [sp, #4]
 800c73e:	e7df      	b.n	800c700 <_dtoa_r+0xa0>
 800c740:	ec4b ab10 	vmov	d0, sl, fp
 800c744:	aa10      	add	r2, sp, #64	; 0x40
 800c746:	a911      	add	r1, sp, #68	; 0x44
 800c748:	4620      	mov	r0, r4
 800c74a:	f001 fae3 	bl	800dd14 <__d2b>
 800c74e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c752:	ee08 0a10 	vmov	s16, r0
 800c756:	2d00      	cmp	r5, #0
 800c758:	f000 8084 	beq.w	800c864 <_dtoa_r+0x204>
 800c75c:	ee19 3a90 	vmov	r3, s19
 800c760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c764:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c768:	4656      	mov	r6, sl
 800c76a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c76e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c772:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c776:	4b74      	ldr	r3, [pc, #464]	; (800c948 <_dtoa_r+0x2e8>)
 800c778:	2200      	movs	r2, #0
 800c77a:	4630      	mov	r0, r6
 800c77c:	4639      	mov	r1, r7
 800c77e:	f7f3 fd93 	bl	80002a8 <__aeabi_dsub>
 800c782:	a365      	add	r3, pc, #404	; (adr r3, 800c918 <_dtoa_r+0x2b8>)
 800c784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c788:	f7f3 ff46 	bl	8000618 <__aeabi_dmul>
 800c78c:	a364      	add	r3, pc, #400	; (adr r3, 800c920 <_dtoa_r+0x2c0>)
 800c78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c792:	f7f3 fd8b 	bl	80002ac <__adddf3>
 800c796:	4606      	mov	r6, r0
 800c798:	4628      	mov	r0, r5
 800c79a:	460f      	mov	r7, r1
 800c79c:	f7f3 fed2 	bl	8000544 <__aeabi_i2d>
 800c7a0:	a361      	add	r3, pc, #388	; (adr r3, 800c928 <_dtoa_r+0x2c8>)
 800c7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a6:	f7f3 ff37 	bl	8000618 <__aeabi_dmul>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	4630      	mov	r0, r6
 800c7b0:	4639      	mov	r1, r7
 800c7b2:	f7f3 fd7b 	bl	80002ac <__adddf3>
 800c7b6:	4606      	mov	r6, r0
 800c7b8:	460f      	mov	r7, r1
 800c7ba:	f7f4 f9dd 	bl	8000b78 <__aeabi_d2iz>
 800c7be:	2200      	movs	r2, #0
 800c7c0:	9000      	str	r0, [sp, #0]
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	4630      	mov	r0, r6
 800c7c6:	4639      	mov	r1, r7
 800c7c8:	f7f4 f998 	bl	8000afc <__aeabi_dcmplt>
 800c7cc:	b150      	cbz	r0, 800c7e4 <_dtoa_r+0x184>
 800c7ce:	9800      	ldr	r0, [sp, #0]
 800c7d0:	f7f3 feb8 	bl	8000544 <__aeabi_i2d>
 800c7d4:	4632      	mov	r2, r6
 800c7d6:	463b      	mov	r3, r7
 800c7d8:	f7f4 f986 	bl	8000ae8 <__aeabi_dcmpeq>
 800c7dc:	b910      	cbnz	r0, 800c7e4 <_dtoa_r+0x184>
 800c7de:	9b00      	ldr	r3, [sp, #0]
 800c7e0:	3b01      	subs	r3, #1
 800c7e2:	9300      	str	r3, [sp, #0]
 800c7e4:	9b00      	ldr	r3, [sp, #0]
 800c7e6:	2b16      	cmp	r3, #22
 800c7e8:	d85a      	bhi.n	800c8a0 <_dtoa_r+0x240>
 800c7ea:	9a00      	ldr	r2, [sp, #0]
 800c7ec:	4b57      	ldr	r3, [pc, #348]	; (800c94c <_dtoa_r+0x2ec>)
 800c7ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f6:	ec51 0b19 	vmov	r0, r1, d9
 800c7fa:	f7f4 f97f 	bl	8000afc <__aeabi_dcmplt>
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d050      	beq.n	800c8a4 <_dtoa_r+0x244>
 800c802:	9b00      	ldr	r3, [sp, #0]
 800c804:	3b01      	subs	r3, #1
 800c806:	9300      	str	r3, [sp, #0]
 800c808:	2300      	movs	r3, #0
 800c80a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c80c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c80e:	1b5d      	subs	r5, r3, r5
 800c810:	1e6b      	subs	r3, r5, #1
 800c812:	9305      	str	r3, [sp, #20]
 800c814:	bf45      	ittet	mi
 800c816:	f1c5 0301 	rsbmi	r3, r5, #1
 800c81a:	9304      	strmi	r3, [sp, #16]
 800c81c:	2300      	movpl	r3, #0
 800c81e:	2300      	movmi	r3, #0
 800c820:	bf4c      	ite	mi
 800c822:	9305      	strmi	r3, [sp, #20]
 800c824:	9304      	strpl	r3, [sp, #16]
 800c826:	9b00      	ldr	r3, [sp, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	db3d      	blt.n	800c8a8 <_dtoa_r+0x248>
 800c82c:	9b05      	ldr	r3, [sp, #20]
 800c82e:	9a00      	ldr	r2, [sp, #0]
 800c830:	920a      	str	r2, [sp, #40]	; 0x28
 800c832:	4413      	add	r3, r2
 800c834:	9305      	str	r3, [sp, #20]
 800c836:	2300      	movs	r3, #0
 800c838:	9307      	str	r3, [sp, #28]
 800c83a:	9b06      	ldr	r3, [sp, #24]
 800c83c:	2b09      	cmp	r3, #9
 800c83e:	f200 8089 	bhi.w	800c954 <_dtoa_r+0x2f4>
 800c842:	2b05      	cmp	r3, #5
 800c844:	bfc4      	itt	gt
 800c846:	3b04      	subgt	r3, #4
 800c848:	9306      	strgt	r3, [sp, #24]
 800c84a:	9b06      	ldr	r3, [sp, #24]
 800c84c:	f1a3 0302 	sub.w	r3, r3, #2
 800c850:	bfcc      	ite	gt
 800c852:	2500      	movgt	r5, #0
 800c854:	2501      	movle	r5, #1
 800c856:	2b03      	cmp	r3, #3
 800c858:	f200 8087 	bhi.w	800c96a <_dtoa_r+0x30a>
 800c85c:	e8df f003 	tbb	[pc, r3]
 800c860:	59383a2d 	.word	0x59383a2d
 800c864:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c868:	441d      	add	r5, r3
 800c86a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c86e:	2b20      	cmp	r3, #32
 800c870:	bfc1      	itttt	gt
 800c872:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c876:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c87a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c87e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c882:	bfda      	itte	le
 800c884:	f1c3 0320 	rsble	r3, r3, #32
 800c888:	fa06 f003 	lslle.w	r0, r6, r3
 800c88c:	4318      	orrgt	r0, r3
 800c88e:	f7f3 fe49 	bl	8000524 <__aeabi_ui2d>
 800c892:	2301      	movs	r3, #1
 800c894:	4606      	mov	r6, r0
 800c896:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c89a:	3d01      	subs	r5, #1
 800c89c:	930e      	str	r3, [sp, #56]	; 0x38
 800c89e:	e76a      	b.n	800c776 <_dtoa_r+0x116>
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	e7b2      	b.n	800c80a <_dtoa_r+0x1aa>
 800c8a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c8a6:	e7b1      	b.n	800c80c <_dtoa_r+0x1ac>
 800c8a8:	9b04      	ldr	r3, [sp, #16]
 800c8aa:	9a00      	ldr	r2, [sp, #0]
 800c8ac:	1a9b      	subs	r3, r3, r2
 800c8ae:	9304      	str	r3, [sp, #16]
 800c8b0:	4253      	negs	r3, r2
 800c8b2:	9307      	str	r3, [sp, #28]
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	930a      	str	r3, [sp, #40]	; 0x28
 800c8b8:	e7bf      	b.n	800c83a <_dtoa_r+0x1da>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	9308      	str	r3, [sp, #32]
 800c8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	dc55      	bgt.n	800c970 <_dtoa_r+0x310>
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	9209      	str	r2, [sp, #36]	; 0x24
 800c8ce:	e00c      	b.n	800c8ea <_dtoa_r+0x28a>
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	e7f3      	b.n	800c8bc <_dtoa_r+0x25c>
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8d8:	9308      	str	r3, [sp, #32]
 800c8da:	9b00      	ldr	r3, [sp, #0]
 800c8dc:	4413      	add	r3, r2
 800c8de:	9302      	str	r3, [sp, #8]
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	9303      	str	r3, [sp, #12]
 800c8e6:	bfb8      	it	lt
 800c8e8:	2301      	movlt	r3, #1
 800c8ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	6042      	str	r2, [r0, #4]
 800c8f0:	2204      	movs	r2, #4
 800c8f2:	f102 0614 	add.w	r6, r2, #20
 800c8f6:	429e      	cmp	r6, r3
 800c8f8:	6841      	ldr	r1, [r0, #4]
 800c8fa:	d93d      	bls.n	800c978 <_dtoa_r+0x318>
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	f000 fee1 	bl	800d6c4 <_Balloc>
 800c902:	9001      	str	r0, [sp, #4]
 800c904:	2800      	cmp	r0, #0
 800c906:	d13b      	bne.n	800c980 <_dtoa_r+0x320>
 800c908:	4b11      	ldr	r3, [pc, #68]	; (800c950 <_dtoa_r+0x2f0>)
 800c90a:	4602      	mov	r2, r0
 800c90c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c910:	e6c0      	b.n	800c694 <_dtoa_r+0x34>
 800c912:	2301      	movs	r3, #1
 800c914:	e7df      	b.n	800c8d6 <_dtoa_r+0x276>
 800c916:	bf00      	nop
 800c918:	636f4361 	.word	0x636f4361
 800c91c:	3fd287a7 	.word	0x3fd287a7
 800c920:	8b60c8b3 	.word	0x8b60c8b3
 800c924:	3fc68a28 	.word	0x3fc68a28
 800c928:	509f79fb 	.word	0x509f79fb
 800c92c:	3fd34413 	.word	0x3fd34413
 800c930:	0800ee94 	.word	0x0800ee94
 800c934:	0800eeab 	.word	0x0800eeab
 800c938:	7ff00000 	.word	0x7ff00000
 800c93c:	0800ee90 	.word	0x0800ee90
 800c940:	0800ee87 	.word	0x0800ee87
 800c944:	0800f0ea 	.word	0x0800f0ea
 800c948:	3ff80000 	.word	0x3ff80000
 800c94c:	0800f000 	.word	0x0800f000
 800c950:	0800ef06 	.word	0x0800ef06
 800c954:	2501      	movs	r5, #1
 800c956:	2300      	movs	r3, #0
 800c958:	9306      	str	r3, [sp, #24]
 800c95a:	9508      	str	r5, [sp, #32]
 800c95c:	f04f 33ff 	mov.w	r3, #4294967295
 800c960:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c964:	2200      	movs	r2, #0
 800c966:	2312      	movs	r3, #18
 800c968:	e7b0      	b.n	800c8cc <_dtoa_r+0x26c>
 800c96a:	2301      	movs	r3, #1
 800c96c:	9308      	str	r3, [sp, #32]
 800c96e:	e7f5      	b.n	800c95c <_dtoa_r+0x2fc>
 800c970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c972:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c976:	e7b8      	b.n	800c8ea <_dtoa_r+0x28a>
 800c978:	3101      	adds	r1, #1
 800c97a:	6041      	str	r1, [r0, #4]
 800c97c:	0052      	lsls	r2, r2, #1
 800c97e:	e7b8      	b.n	800c8f2 <_dtoa_r+0x292>
 800c980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c982:	9a01      	ldr	r2, [sp, #4]
 800c984:	601a      	str	r2, [r3, #0]
 800c986:	9b03      	ldr	r3, [sp, #12]
 800c988:	2b0e      	cmp	r3, #14
 800c98a:	f200 809d 	bhi.w	800cac8 <_dtoa_r+0x468>
 800c98e:	2d00      	cmp	r5, #0
 800c990:	f000 809a 	beq.w	800cac8 <_dtoa_r+0x468>
 800c994:	9b00      	ldr	r3, [sp, #0]
 800c996:	2b00      	cmp	r3, #0
 800c998:	dd32      	ble.n	800ca00 <_dtoa_r+0x3a0>
 800c99a:	4ab7      	ldr	r2, [pc, #732]	; (800cc78 <_dtoa_r+0x618>)
 800c99c:	f003 030f 	and.w	r3, r3, #15
 800c9a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c9a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9a8:	9b00      	ldr	r3, [sp, #0]
 800c9aa:	05d8      	lsls	r0, r3, #23
 800c9ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c9b0:	d516      	bpl.n	800c9e0 <_dtoa_r+0x380>
 800c9b2:	4bb2      	ldr	r3, [pc, #712]	; (800cc7c <_dtoa_r+0x61c>)
 800c9b4:	ec51 0b19 	vmov	r0, r1, d9
 800c9b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c9bc:	f7f3 ff56 	bl	800086c <__aeabi_ddiv>
 800c9c0:	f007 070f 	and.w	r7, r7, #15
 800c9c4:	4682      	mov	sl, r0
 800c9c6:	468b      	mov	fp, r1
 800c9c8:	2503      	movs	r5, #3
 800c9ca:	4eac      	ldr	r6, [pc, #688]	; (800cc7c <_dtoa_r+0x61c>)
 800c9cc:	b957      	cbnz	r7, 800c9e4 <_dtoa_r+0x384>
 800c9ce:	4642      	mov	r2, r8
 800c9d0:	464b      	mov	r3, r9
 800c9d2:	4650      	mov	r0, sl
 800c9d4:	4659      	mov	r1, fp
 800c9d6:	f7f3 ff49 	bl	800086c <__aeabi_ddiv>
 800c9da:	4682      	mov	sl, r0
 800c9dc:	468b      	mov	fp, r1
 800c9de:	e028      	b.n	800ca32 <_dtoa_r+0x3d2>
 800c9e0:	2502      	movs	r5, #2
 800c9e2:	e7f2      	b.n	800c9ca <_dtoa_r+0x36a>
 800c9e4:	07f9      	lsls	r1, r7, #31
 800c9e6:	d508      	bpl.n	800c9fa <_dtoa_r+0x39a>
 800c9e8:	4640      	mov	r0, r8
 800c9ea:	4649      	mov	r1, r9
 800c9ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c9f0:	f7f3 fe12 	bl	8000618 <__aeabi_dmul>
 800c9f4:	3501      	adds	r5, #1
 800c9f6:	4680      	mov	r8, r0
 800c9f8:	4689      	mov	r9, r1
 800c9fa:	107f      	asrs	r7, r7, #1
 800c9fc:	3608      	adds	r6, #8
 800c9fe:	e7e5      	b.n	800c9cc <_dtoa_r+0x36c>
 800ca00:	f000 809b 	beq.w	800cb3a <_dtoa_r+0x4da>
 800ca04:	9b00      	ldr	r3, [sp, #0]
 800ca06:	4f9d      	ldr	r7, [pc, #628]	; (800cc7c <_dtoa_r+0x61c>)
 800ca08:	425e      	negs	r6, r3
 800ca0a:	4b9b      	ldr	r3, [pc, #620]	; (800cc78 <_dtoa_r+0x618>)
 800ca0c:	f006 020f 	and.w	r2, r6, #15
 800ca10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca18:	ec51 0b19 	vmov	r0, r1, d9
 800ca1c:	f7f3 fdfc 	bl	8000618 <__aeabi_dmul>
 800ca20:	1136      	asrs	r6, r6, #4
 800ca22:	4682      	mov	sl, r0
 800ca24:	468b      	mov	fp, r1
 800ca26:	2300      	movs	r3, #0
 800ca28:	2502      	movs	r5, #2
 800ca2a:	2e00      	cmp	r6, #0
 800ca2c:	d17a      	bne.n	800cb24 <_dtoa_r+0x4c4>
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d1d3      	bne.n	800c9da <_dtoa_r+0x37a>
 800ca32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	f000 8082 	beq.w	800cb3e <_dtoa_r+0x4de>
 800ca3a:	4b91      	ldr	r3, [pc, #580]	; (800cc80 <_dtoa_r+0x620>)
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	4650      	mov	r0, sl
 800ca40:	4659      	mov	r1, fp
 800ca42:	f7f4 f85b 	bl	8000afc <__aeabi_dcmplt>
 800ca46:	2800      	cmp	r0, #0
 800ca48:	d079      	beq.n	800cb3e <_dtoa_r+0x4de>
 800ca4a:	9b03      	ldr	r3, [sp, #12]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d076      	beq.n	800cb3e <_dtoa_r+0x4de>
 800ca50:	9b02      	ldr	r3, [sp, #8]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	dd36      	ble.n	800cac4 <_dtoa_r+0x464>
 800ca56:	9b00      	ldr	r3, [sp, #0]
 800ca58:	4650      	mov	r0, sl
 800ca5a:	4659      	mov	r1, fp
 800ca5c:	1e5f      	subs	r7, r3, #1
 800ca5e:	2200      	movs	r2, #0
 800ca60:	4b88      	ldr	r3, [pc, #544]	; (800cc84 <_dtoa_r+0x624>)
 800ca62:	f7f3 fdd9 	bl	8000618 <__aeabi_dmul>
 800ca66:	9e02      	ldr	r6, [sp, #8]
 800ca68:	4682      	mov	sl, r0
 800ca6a:	468b      	mov	fp, r1
 800ca6c:	3501      	adds	r5, #1
 800ca6e:	4628      	mov	r0, r5
 800ca70:	f7f3 fd68 	bl	8000544 <__aeabi_i2d>
 800ca74:	4652      	mov	r2, sl
 800ca76:	465b      	mov	r3, fp
 800ca78:	f7f3 fdce 	bl	8000618 <__aeabi_dmul>
 800ca7c:	4b82      	ldr	r3, [pc, #520]	; (800cc88 <_dtoa_r+0x628>)
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f7f3 fc14 	bl	80002ac <__adddf3>
 800ca84:	46d0      	mov	r8, sl
 800ca86:	46d9      	mov	r9, fp
 800ca88:	4682      	mov	sl, r0
 800ca8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ca8e:	2e00      	cmp	r6, #0
 800ca90:	d158      	bne.n	800cb44 <_dtoa_r+0x4e4>
 800ca92:	4b7e      	ldr	r3, [pc, #504]	; (800cc8c <_dtoa_r+0x62c>)
 800ca94:	2200      	movs	r2, #0
 800ca96:	4640      	mov	r0, r8
 800ca98:	4649      	mov	r1, r9
 800ca9a:	f7f3 fc05 	bl	80002a8 <__aeabi_dsub>
 800ca9e:	4652      	mov	r2, sl
 800caa0:	465b      	mov	r3, fp
 800caa2:	4680      	mov	r8, r0
 800caa4:	4689      	mov	r9, r1
 800caa6:	f7f4 f847 	bl	8000b38 <__aeabi_dcmpgt>
 800caaa:	2800      	cmp	r0, #0
 800caac:	f040 8295 	bne.w	800cfda <_dtoa_r+0x97a>
 800cab0:	4652      	mov	r2, sl
 800cab2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cab6:	4640      	mov	r0, r8
 800cab8:	4649      	mov	r1, r9
 800caba:	f7f4 f81f 	bl	8000afc <__aeabi_dcmplt>
 800cabe:	2800      	cmp	r0, #0
 800cac0:	f040 8289 	bne.w	800cfd6 <_dtoa_r+0x976>
 800cac4:	ec5b ab19 	vmov	sl, fp, d9
 800cac8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800caca:	2b00      	cmp	r3, #0
 800cacc:	f2c0 8148 	blt.w	800cd60 <_dtoa_r+0x700>
 800cad0:	9a00      	ldr	r2, [sp, #0]
 800cad2:	2a0e      	cmp	r2, #14
 800cad4:	f300 8144 	bgt.w	800cd60 <_dtoa_r+0x700>
 800cad8:	4b67      	ldr	r3, [pc, #412]	; (800cc78 <_dtoa_r+0x618>)
 800cada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cade:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	f280 80d5 	bge.w	800cc94 <_dtoa_r+0x634>
 800caea:	9b03      	ldr	r3, [sp, #12]
 800caec:	2b00      	cmp	r3, #0
 800caee:	f300 80d1 	bgt.w	800cc94 <_dtoa_r+0x634>
 800caf2:	f040 826f 	bne.w	800cfd4 <_dtoa_r+0x974>
 800caf6:	4b65      	ldr	r3, [pc, #404]	; (800cc8c <_dtoa_r+0x62c>)
 800caf8:	2200      	movs	r2, #0
 800cafa:	4640      	mov	r0, r8
 800cafc:	4649      	mov	r1, r9
 800cafe:	f7f3 fd8b 	bl	8000618 <__aeabi_dmul>
 800cb02:	4652      	mov	r2, sl
 800cb04:	465b      	mov	r3, fp
 800cb06:	f7f4 f80d 	bl	8000b24 <__aeabi_dcmpge>
 800cb0a:	9e03      	ldr	r6, [sp, #12]
 800cb0c:	4637      	mov	r7, r6
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	f040 8245 	bne.w	800cf9e <_dtoa_r+0x93e>
 800cb14:	9d01      	ldr	r5, [sp, #4]
 800cb16:	2331      	movs	r3, #49	; 0x31
 800cb18:	f805 3b01 	strb.w	r3, [r5], #1
 800cb1c:	9b00      	ldr	r3, [sp, #0]
 800cb1e:	3301      	adds	r3, #1
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	e240      	b.n	800cfa6 <_dtoa_r+0x946>
 800cb24:	07f2      	lsls	r2, r6, #31
 800cb26:	d505      	bpl.n	800cb34 <_dtoa_r+0x4d4>
 800cb28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb2c:	f7f3 fd74 	bl	8000618 <__aeabi_dmul>
 800cb30:	3501      	adds	r5, #1
 800cb32:	2301      	movs	r3, #1
 800cb34:	1076      	asrs	r6, r6, #1
 800cb36:	3708      	adds	r7, #8
 800cb38:	e777      	b.n	800ca2a <_dtoa_r+0x3ca>
 800cb3a:	2502      	movs	r5, #2
 800cb3c:	e779      	b.n	800ca32 <_dtoa_r+0x3d2>
 800cb3e:	9f00      	ldr	r7, [sp, #0]
 800cb40:	9e03      	ldr	r6, [sp, #12]
 800cb42:	e794      	b.n	800ca6e <_dtoa_r+0x40e>
 800cb44:	9901      	ldr	r1, [sp, #4]
 800cb46:	4b4c      	ldr	r3, [pc, #304]	; (800cc78 <_dtoa_r+0x618>)
 800cb48:	4431      	add	r1, r6
 800cb4a:	910d      	str	r1, [sp, #52]	; 0x34
 800cb4c:	9908      	ldr	r1, [sp, #32]
 800cb4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cb52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb56:	2900      	cmp	r1, #0
 800cb58:	d043      	beq.n	800cbe2 <_dtoa_r+0x582>
 800cb5a:	494d      	ldr	r1, [pc, #308]	; (800cc90 <_dtoa_r+0x630>)
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	f7f3 fe85 	bl	800086c <__aeabi_ddiv>
 800cb62:	4652      	mov	r2, sl
 800cb64:	465b      	mov	r3, fp
 800cb66:	f7f3 fb9f 	bl	80002a8 <__aeabi_dsub>
 800cb6a:	9d01      	ldr	r5, [sp, #4]
 800cb6c:	4682      	mov	sl, r0
 800cb6e:	468b      	mov	fp, r1
 800cb70:	4649      	mov	r1, r9
 800cb72:	4640      	mov	r0, r8
 800cb74:	f7f4 f800 	bl	8000b78 <__aeabi_d2iz>
 800cb78:	4606      	mov	r6, r0
 800cb7a:	f7f3 fce3 	bl	8000544 <__aeabi_i2d>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	460b      	mov	r3, r1
 800cb82:	4640      	mov	r0, r8
 800cb84:	4649      	mov	r1, r9
 800cb86:	f7f3 fb8f 	bl	80002a8 <__aeabi_dsub>
 800cb8a:	3630      	adds	r6, #48	; 0x30
 800cb8c:	f805 6b01 	strb.w	r6, [r5], #1
 800cb90:	4652      	mov	r2, sl
 800cb92:	465b      	mov	r3, fp
 800cb94:	4680      	mov	r8, r0
 800cb96:	4689      	mov	r9, r1
 800cb98:	f7f3 ffb0 	bl	8000afc <__aeabi_dcmplt>
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	d163      	bne.n	800cc68 <_dtoa_r+0x608>
 800cba0:	4642      	mov	r2, r8
 800cba2:	464b      	mov	r3, r9
 800cba4:	4936      	ldr	r1, [pc, #216]	; (800cc80 <_dtoa_r+0x620>)
 800cba6:	2000      	movs	r0, #0
 800cba8:	f7f3 fb7e 	bl	80002a8 <__aeabi_dsub>
 800cbac:	4652      	mov	r2, sl
 800cbae:	465b      	mov	r3, fp
 800cbb0:	f7f3 ffa4 	bl	8000afc <__aeabi_dcmplt>
 800cbb4:	2800      	cmp	r0, #0
 800cbb6:	f040 80b5 	bne.w	800cd24 <_dtoa_r+0x6c4>
 800cbba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbbc:	429d      	cmp	r5, r3
 800cbbe:	d081      	beq.n	800cac4 <_dtoa_r+0x464>
 800cbc0:	4b30      	ldr	r3, [pc, #192]	; (800cc84 <_dtoa_r+0x624>)
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	4650      	mov	r0, sl
 800cbc6:	4659      	mov	r1, fp
 800cbc8:	f7f3 fd26 	bl	8000618 <__aeabi_dmul>
 800cbcc:	4b2d      	ldr	r3, [pc, #180]	; (800cc84 <_dtoa_r+0x624>)
 800cbce:	4682      	mov	sl, r0
 800cbd0:	468b      	mov	fp, r1
 800cbd2:	4640      	mov	r0, r8
 800cbd4:	4649      	mov	r1, r9
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	f7f3 fd1e 	bl	8000618 <__aeabi_dmul>
 800cbdc:	4680      	mov	r8, r0
 800cbde:	4689      	mov	r9, r1
 800cbe0:	e7c6      	b.n	800cb70 <_dtoa_r+0x510>
 800cbe2:	4650      	mov	r0, sl
 800cbe4:	4659      	mov	r1, fp
 800cbe6:	f7f3 fd17 	bl	8000618 <__aeabi_dmul>
 800cbea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbec:	9d01      	ldr	r5, [sp, #4]
 800cbee:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbf0:	4682      	mov	sl, r0
 800cbf2:	468b      	mov	fp, r1
 800cbf4:	4649      	mov	r1, r9
 800cbf6:	4640      	mov	r0, r8
 800cbf8:	f7f3 ffbe 	bl	8000b78 <__aeabi_d2iz>
 800cbfc:	4606      	mov	r6, r0
 800cbfe:	f7f3 fca1 	bl	8000544 <__aeabi_i2d>
 800cc02:	3630      	adds	r6, #48	; 0x30
 800cc04:	4602      	mov	r2, r0
 800cc06:	460b      	mov	r3, r1
 800cc08:	4640      	mov	r0, r8
 800cc0a:	4649      	mov	r1, r9
 800cc0c:	f7f3 fb4c 	bl	80002a8 <__aeabi_dsub>
 800cc10:	f805 6b01 	strb.w	r6, [r5], #1
 800cc14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc16:	429d      	cmp	r5, r3
 800cc18:	4680      	mov	r8, r0
 800cc1a:	4689      	mov	r9, r1
 800cc1c:	f04f 0200 	mov.w	r2, #0
 800cc20:	d124      	bne.n	800cc6c <_dtoa_r+0x60c>
 800cc22:	4b1b      	ldr	r3, [pc, #108]	; (800cc90 <_dtoa_r+0x630>)
 800cc24:	4650      	mov	r0, sl
 800cc26:	4659      	mov	r1, fp
 800cc28:	f7f3 fb40 	bl	80002ac <__adddf3>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	460b      	mov	r3, r1
 800cc30:	4640      	mov	r0, r8
 800cc32:	4649      	mov	r1, r9
 800cc34:	f7f3 ff80 	bl	8000b38 <__aeabi_dcmpgt>
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	d173      	bne.n	800cd24 <_dtoa_r+0x6c4>
 800cc3c:	4652      	mov	r2, sl
 800cc3e:	465b      	mov	r3, fp
 800cc40:	4913      	ldr	r1, [pc, #76]	; (800cc90 <_dtoa_r+0x630>)
 800cc42:	2000      	movs	r0, #0
 800cc44:	f7f3 fb30 	bl	80002a8 <__aeabi_dsub>
 800cc48:	4602      	mov	r2, r0
 800cc4a:	460b      	mov	r3, r1
 800cc4c:	4640      	mov	r0, r8
 800cc4e:	4649      	mov	r1, r9
 800cc50:	f7f3 ff54 	bl	8000afc <__aeabi_dcmplt>
 800cc54:	2800      	cmp	r0, #0
 800cc56:	f43f af35 	beq.w	800cac4 <_dtoa_r+0x464>
 800cc5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cc5c:	1e6b      	subs	r3, r5, #1
 800cc5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc64:	2b30      	cmp	r3, #48	; 0x30
 800cc66:	d0f8      	beq.n	800cc5a <_dtoa_r+0x5fa>
 800cc68:	9700      	str	r7, [sp, #0]
 800cc6a:	e049      	b.n	800cd00 <_dtoa_r+0x6a0>
 800cc6c:	4b05      	ldr	r3, [pc, #20]	; (800cc84 <_dtoa_r+0x624>)
 800cc6e:	f7f3 fcd3 	bl	8000618 <__aeabi_dmul>
 800cc72:	4680      	mov	r8, r0
 800cc74:	4689      	mov	r9, r1
 800cc76:	e7bd      	b.n	800cbf4 <_dtoa_r+0x594>
 800cc78:	0800f000 	.word	0x0800f000
 800cc7c:	0800efd8 	.word	0x0800efd8
 800cc80:	3ff00000 	.word	0x3ff00000
 800cc84:	40240000 	.word	0x40240000
 800cc88:	401c0000 	.word	0x401c0000
 800cc8c:	40140000 	.word	0x40140000
 800cc90:	3fe00000 	.word	0x3fe00000
 800cc94:	9d01      	ldr	r5, [sp, #4]
 800cc96:	4656      	mov	r6, sl
 800cc98:	465f      	mov	r7, fp
 800cc9a:	4642      	mov	r2, r8
 800cc9c:	464b      	mov	r3, r9
 800cc9e:	4630      	mov	r0, r6
 800cca0:	4639      	mov	r1, r7
 800cca2:	f7f3 fde3 	bl	800086c <__aeabi_ddiv>
 800cca6:	f7f3 ff67 	bl	8000b78 <__aeabi_d2iz>
 800ccaa:	4682      	mov	sl, r0
 800ccac:	f7f3 fc4a 	bl	8000544 <__aeabi_i2d>
 800ccb0:	4642      	mov	r2, r8
 800ccb2:	464b      	mov	r3, r9
 800ccb4:	f7f3 fcb0 	bl	8000618 <__aeabi_dmul>
 800ccb8:	4602      	mov	r2, r0
 800ccba:	460b      	mov	r3, r1
 800ccbc:	4630      	mov	r0, r6
 800ccbe:	4639      	mov	r1, r7
 800ccc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ccc4:	f7f3 faf0 	bl	80002a8 <__aeabi_dsub>
 800ccc8:	f805 6b01 	strb.w	r6, [r5], #1
 800cccc:	9e01      	ldr	r6, [sp, #4]
 800ccce:	9f03      	ldr	r7, [sp, #12]
 800ccd0:	1bae      	subs	r6, r5, r6
 800ccd2:	42b7      	cmp	r7, r6
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	d135      	bne.n	800cd46 <_dtoa_r+0x6e6>
 800ccda:	f7f3 fae7 	bl	80002ac <__adddf3>
 800ccde:	4642      	mov	r2, r8
 800cce0:	464b      	mov	r3, r9
 800cce2:	4606      	mov	r6, r0
 800cce4:	460f      	mov	r7, r1
 800cce6:	f7f3 ff27 	bl	8000b38 <__aeabi_dcmpgt>
 800ccea:	b9d0      	cbnz	r0, 800cd22 <_dtoa_r+0x6c2>
 800ccec:	4642      	mov	r2, r8
 800ccee:	464b      	mov	r3, r9
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	4639      	mov	r1, r7
 800ccf4:	f7f3 fef8 	bl	8000ae8 <__aeabi_dcmpeq>
 800ccf8:	b110      	cbz	r0, 800cd00 <_dtoa_r+0x6a0>
 800ccfa:	f01a 0f01 	tst.w	sl, #1
 800ccfe:	d110      	bne.n	800cd22 <_dtoa_r+0x6c2>
 800cd00:	4620      	mov	r0, r4
 800cd02:	ee18 1a10 	vmov	r1, s16
 800cd06:	f000 fd1d 	bl	800d744 <_Bfree>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	9800      	ldr	r0, [sp, #0]
 800cd0e:	702b      	strb	r3, [r5, #0]
 800cd10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd12:	3001      	adds	r0, #1
 800cd14:	6018      	str	r0, [r3, #0]
 800cd16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	f43f acf1 	beq.w	800c700 <_dtoa_r+0xa0>
 800cd1e:	601d      	str	r5, [r3, #0]
 800cd20:	e4ee      	b.n	800c700 <_dtoa_r+0xa0>
 800cd22:	9f00      	ldr	r7, [sp, #0]
 800cd24:	462b      	mov	r3, r5
 800cd26:	461d      	mov	r5, r3
 800cd28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd2c:	2a39      	cmp	r2, #57	; 0x39
 800cd2e:	d106      	bne.n	800cd3e <_dtoa_r+0x6de>
 800cd30:	9a01      	ldr	r2, [sp, #4]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d1f7      	bne.n	800cd26 <_dtoa_r+0x6c6>
 800cd36:	9901      	ldr	r1, [sp, #4]
 800cd38:	2230      	movs	r2, #48	; 0x30
 800cd3a:	3701      	adds	r7, #1
 800cd3c:	700a      	strb	r2, [r1, #0]
 800cd3e:	781a      	ldrb	r2, [r3, #0]
 800cd40:	3201      	adds	r2, #1
 800cd42:	701a      	strb	r2, [r3, #0]
 800cd44:	e790      	b.n	800cc68 <_dtoa_r+0x608>
 800cd46:	4ba6      	ldr	r3, [pc, #664]	; (800cfe0 <_dtoa_r+0x980>)
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f7f3 fc65 	bl	8000618 <__aeabi_dmul>
 800cd4e:	2200      	movs	r2, #0
 800cd50:	2300      	movs	r3, #0
 800cd52:	4606      	mov	r6, r0
 800cd54:	460f      	mov	r7, r1
 800cd56:	f7f3 fec7 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd5a:	2800      	cmp	r0, #0
 800cd5c:	d09d      	beq.n	800cc9a <_dtoa_r+0x63a>
 800cd5e:	e7cf      	b.n	800cd00 <_dtoa_r+0x6a0>
 800cd60:	9a08      	ldr	r2, [sp, #32]
 800cd62:	2a00      	cmp	r2, #0
 800cd64:	f000 80d7 	beq.w	800cf16 <_dtoa_r+0x8b6>
 800cd68:	9a06      	ldr	r2, [sp, #24]
 800cd6a:	2a01      	cmp	r2, #1
 800cd6c:	f300 80ba 	bgt.w	800cee4 <_dtoa_r+0x884>
 800cd70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd72:	2a00      	cmp	r2, #0
 800cd74:	f000 80b2 	beq.w	800cedc <_dtoa_r+0x87c>
 800cd78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cd7c:	9e07      	ldr	r6, [sp, #28]
 800cd7e:	9d04      	ldr	r5, [sp, #16]
 800cd80:	9a04      	ldr	r2, [sp, #16]
 800cd82:	441a      	add	r2, r3
 800cd84:	9204      	str	r2, [sp, #16]
 800cd86:	9a05      	ldr	r2, [sp, #20]
 800cd88:	2101      	movs	r1, #1
 800cd8a:	441a      	add	r2, r3
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	9205      	str	r2, [sp, #20]
 800cd90:	f000 fd90 	bl	800d8b4 <__i2b>
 800cd94:	4607      	mov	r7, r0
 800cd96:	2d00      	cmp	r5, #0
 800cd98:	dd0c      	ble.n	800cdb4 <_dtoa_r+0x754>
 800cd9a:	9b05      	ldr	r3, [sp, #20]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	dd09      	ble.n	800cdb4 <_dtoa_r+0x754>
 800cda0:	42ab      	cmp	r3, r5
 800cda2:	9a04      	ldr	r2, [sp, #16]
 800cda4:	bfa8      	it	ge
 800cda6:	462b      	movge	r3, r5
 800cda8:	1ad2      	subs	r2, r2, r3
 800cdaa:	9204      	str	r2, [sp, #16]
 800cdac:	9a05      	ldr	r2, [sp, #20]
 800cdae:	1aed      	subs	r5, r5, r3
 800cdb0:	1ad3      	subs	r3, r2, r3
 800cdb2:	9305      	str	r3, [sp, #20]
 800cdb4:	9b07      	ldr	r3, [sp, #28]
 800cdb6:	b31b      	cbz	r3, 800ce00 <_dtoa_r+0x7a0>
 800cdb8:	9b08      	ldr	r3, [sp, #32]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	f000 80af 	beq.w	800cf1e <_dtoa_r+0x8be>
 800cdc0:	2e00      	cmp	r6, #0
 800cdc2:	dd13      	ble.n	800cdec <_dtoa_r+0x78c>
 800cdc4:	4639      	mov	r1, r7
 800cdc6:	4632      	mov	r2, r6
 800cdc8:	4620      	mov	r0, r4
 800cdca:	f000 fe33 	bl	800da34 <__pow5mult>
 800cdce:	ee18 2a10 	vmov	r2, s16
 800cdd2:	4601      	mov	r1, r0
 800cdd4:	4607      	mov	r7, r0
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	f000 fd82 	bl	800d8e0 <__multiply>
 800cddc:	ee18 1a10 	vmov	r1, s16
 800cde0:	4680      	mov	r8, r0
 800cde2:	4620      	mov	r0, r4
 800cde4:	f000 fcae 	bl	800d744 <_Bfree>
 800cde8:	ee08 8a10 	vmov	s16, r8
 800cdec:	9b07      	ldr	r3, [sp, #28]
 800cdee:	1b9a      	subs	r2, r3, r6
 800cdf0:	d006      	beq.n	800ce00 <_dtoa_r+0x7a0>
 800cdf2:	ee18 1a10 	vmov	r1, s16
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	f000 fe1c 	bl	800da34 <__pow5mult>
 800cdfc:	ee08 0a10 	vmov	s16, r0
 800ce00:	2101      	movs	r1, #1
 800ce02:	4620      	mov	r0, r4
 800ce04:	f000 fd56 	bl	800d8b4 <__i2b>
 800ce08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	4606      	mov	r6, r0
 800ce0e:	f340 8088 	ble.w	800cf22 <_dtoa_r+0x8c2>
 800ce12:	461a      	mov	r2, r3
 800ce14:	4601      	mov	r1, r0
 800ce16:	4620      	mov	r0, r4
 800ce18:	f000 fe0c 	bl	800da34 <__pow5mult>
 800ce1c:	9b06      	ldr	r3, [sp, #24]
 800ce1e:	2b01      	cmp	r3, #1
 800ce20:	4606      	mov	r6, r0
 800ce22:	f340 8081 	ble.w	800cf28 <_dtoa_r+0x8c8>
 800ce26:	f04f 0800 	mov.w	r8, #0
 800ce2a:	6933      	ldr	r3, [r6, #16]
 800ce2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ce30:	6918      	ldr	r0, [r3, #16]
 800ce32:	f000 fcef 	bl	800d814 <__hi0bits>
 800ce36:	f1c0 0020 	rsb	r0, r0, #32
 800ce3a:	9b05      	ldr	r3, [sp, #20]
 800ce3c:	4418      	add	r0, r3
 800ce3e:	f010 001f 	ands.w	r0, r0, #31
 800ce42:	f000 8092 	beq.w	800cf6a <_dtoa_r+0x90a>
 800ce46:	f1c0 0320 	rsb	r3, r0, #32
 800ce4a:	2b04      	cmp	r3, #4
 800ce4c:	f340 808a 	ble.w	800cf64 <_dtoa_r+0x904>
 800ce50:	f1c0 001c 	rsb	r0, r0, #28
 800ce54:	9b04      	ldr	r3, [sp, #16]
 800ce56:	4403      	add	r3, r0
 800ce58:	9304      	str	r3, [sp, #16]
 800ce5a:	9b05      	ldr	r3, [sp, #20]
 800ce5c:	4403      	add	r3, r0
 800ce5e:	4405      	add	r5, r0
 800ce60:	9305      	str	r3, [sp, #20]
 800ce62:	9b04      	ldr	r3, [sp, #16]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	dd07      	ble.n	800ce78 <_dtoa_r+0x818>
 800ce68:	ee18 1a10 	vmov	r1, s16
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	4620      	mov	r0, r4
 800ce70:	f000 fe3a 	bl	800dae8 <__lshift>
 800ce74:	ee08 0a10 	vmov	s16, r0
 800ce78:	9b05      	ldr	r3, [sp, #20]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	dd05      	ble.n	800ce8a <_dtoa_r+0x82a>
 800ce7e:	4631      	mov	r1, r6
 800ce80:	461a      	mov	r2, r3
 800ce82:	4620      	mov	r0, r4
 800ce84:	f000 fe30 	bl	800dae8 <__lshift>
 800ce88:	4606      	mov	r6, r0
 800ce8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d06e      	beq.n	800cf6e <_dtoa_r+0x90e>
 800ce90:	ee18 0a10 	vmov	r0, s16
 800ce94:	4631      	mov	r1, r6
 800ce96:	f000 fe97 	bl	800dbc8 <__mcmp>
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	da67      	bge.n	800cf6e <_dtoa_r+0x90e>
 800ce9e:	9b00      	ldr	r3, [sp, #0]
 800cea0:	3b01      	subs	r3, #1
 800cea2:	ee18 1a10 	vmov	r1, s16
 800cea6:	9300      	str	r3, [sp, #0]
 800cea8:	220a      	movs	r2, #10
 800ceaa:	2300      	movs	r3, #0
 800ceac:	4620      	mov	r0, r4
 800ceae:	f000 fc6b 	bl	800d788 <__multadd>
 800ceb2:	9b08      	ldr	r3, [sp, #32]
 800ceb4:	ee08 0a10 	vmov	s16, r0
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	f000 81b1 	beq.w	800d220 <_dtoa_r+0xbc0>
 800cebe:	2300      	movs	r3, #0
 800cec0:	4639      	mov	r1, r7
 800cec2:	220a      	movs	r2, #10
 800cec4:	4620      	mov	r0, r4
 800cec6:	f000 fc5f 	bl	800d788 <__multadd>
 800ceca:	9b02      	ldr	r3, [sp, #8]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	4607      	mov	r7, r0
 800ced0:	f300 808e 	bgt.w	800cff0 <_dtoa_r+0x990>
 800ced4:	9b06      	ldr	r3, [sp, #24]
 800ced6:	2b02      	cmp	r3, #2
 800ced8:	dc51      	bgt.n	800cf7e <_dtoa_r+0x91e>
 800ceda:	e089      	b.n	800cff0 <_dtoa_r+0x990>
 800cedc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cede:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cee2:	e74b      	b.n	800cd7c <_dtoa_r+0x71c>
 800cee4:	9b03      	ldr	r3, [sp, #12]
 800cee6:	1e5e      	subs	r6, r3, #1
 800cee8:	9b07      	ldr	r3, [sp, #28]
 800ceea:	42b3      	cmp	r3, r6
 800ceec:	bfbf      	itttt	lt
 800ceee:	9b07      	ldrlt	r3, [sp, #28]
 800cef0:	9607      	strlt	r6, [sp, #28]
 800cef2:	1af2      	sublt	r2, r6, r3
 800cef4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cef6:	bfb6      	itet	lt
 800cef8:	189b      	addlt	r3, r3, r2
 800cefa:	1b9e      	subge	r6, r3, r6
 800cefc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cefe:	9b03      	ldr	r3, [sp, #12]
 800cf00:	bfb8      	it	lt
 800cf02:	2600      	movlt	r6, #0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	bfb7      	itett	lt
 800cf08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cf0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cf10:	1a9d      	sublt	r5, r3, r2
 800cf12:	2300      	movlt	r3, #0
 800cf14:	e734      	b.n	800cd80 <_dtoa_r+0x720>
 800cf16:	9e07      	ldr	r6, [sp, #28]
 800cf18:	9d04      	ldr	r5, [sp, #16]
 800cf1a:	9f08      	ldr	r7, [sp, #32]
 800cf1c:	e73b      	b.n	800cd96 <_dtoa_r+0x736>
 800cf1e:	9a07      	ldr	r2, [sp, #28]
 800cf20:	e767      	b.n	800cdf2 <_dtoa_r+0x792>
 800cf22:	9b06      	ldr	r3, [sp, #24]
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	dc18      	bgt.n	800cf5a <_dtoa_r+0x8fa>
 800cf28:	f1ba 0f00 	cmp.w	sl, #0
 800cf2c:	d115      	bne.n	800cf5a <_dtoa_r+0x8fa>
 800cf2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf32:	b993      	cbnz	r3, 800cf5a <_dtoa_r+0x8fa>
 800cf34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cf38:	0d1b      	lsrs	r3, r3, #20
 800cf3a:	051b      	lsls	r3, r3, #20
 800cf3c:	b183      	cbz	r3, 800cf60 <_dtoa_r+0x900>
 800cf3e:	9b04      	ldr	r3, [sp, #16]
 800cf40:	3301      	adds	r3, #1
 800cf42:	9304      	str	r3, [sp, #16]
 800cf44:	9b05      	ldr	r3, [sp, #20]
 800cf46:	3301      	adds	r3, #1
 800cf48:	9305      	str	r3, [sp, #20]
 800cf4a:	f04f 0801 	mov.w	r8, #1
 800cf4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	f47f af6a 	bne.w	800ce2a <_dtoa_r+0x7ca>
 800cf56:	2001      	movs	r0, #1
 800cf58:	e76f      	b.n	800ce3a <_dtoa_r+0x7da>
 800cf5a:	f04f 0800 	mov.w	r8, #0
 800cf5e:	e7f6      	b.n	800cf4e <_dtoa_r+0x8ee>
 800cf60:	4698      	mov	r8, r3
 800cf62:	e7f4      	b.n	800cf4e <_dtoa_r+0x8ee>
 800cf64:	f43f af7d 	beq.w	800ce62 <_dtoa_r+0x802>
 800cf68:	4618      	mov	r0, r3
 800cf6a:	301c      	adds	r0, #28
 800cf6c:	e772      	b.n	800ce54 <_dtoa_r+0x7f4>
 800cf6e:	9b03      	ldr	r3, [sp, #12]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	dc37      	bgt.n	800cfe4 <_dtoa_r+0x984>
 800cf74:	9b06      	ldr	r3, [sp, #24]
 800cf76:	2b02      	cmp	r3, #2
 800cf78:	dd34      	ble.n	800cfe4 <_dtoa_r+0x984>
 800cf7a:	9b03      	ldr	r3, [sp, #12]
 800cf7c:	9302      	str	r3, [sp, #8]
 800cf7e:	9b02      	ldr	r3, [sp, #8]
 800cf80:	b96b      	cbnz	r3, 800cf9e <_dtoa_r+0x93e>
 800cf82:	4631      	mov	r1, r6
 800cf84:	2205      	movs	r2, #5
 800cf86:	4620      	mov	r0, r4
 800cf88:	f000 fbfe 	bl	800d788 <__multadd>
 800cf8c:	4601      	mov	r1, r0
 800cf8e:	4606      	mov	r6, r0
 800cf90:	ee18 0a10 	vmov	r0, s16
 800cf94:	f000 fe18 	bl	800dbc8 <__mcmp>
 800cf98:	2800      	cmp	r0, #0
 800cf9a:	f73f adbb 	bgt.w	800cb14 <_dtoa_r+0x4b4>
 800cf9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfa0:	9d01      	ldr	r5, [sp, #4]
 800cfa2:	43db      	mvns	r3, r3
 800cfa4:	9300      	str	r3, [sp, #0]
 800cfa6:	f04f 0800 	mov.w	r8, #0
 800cfaa:	4631      	mov	r1, r6
 800cfac:	4620      	mov	r0, r4
 800cfae:	f000 fbc9 	bl	800d744 <_Bfree>
 800cfb2:	2f00      	cmp	r7, #0
 800cfb4:	f43f aea4 	beq.w	800cd00 <_dtoa_r+0x6a0>
 800cfb8:	f1b8 0f00 	cmp.w	r8, #0
 800cfbc:	d005      	beq.n	800cfca <_dtoa_r+0x96a>
 800cfbe:	45b8      	cmp	r8, r7
 800cfc0:	d003      	beq.n	800cfca <_dtoa_r+0x96a>
 800cfc2:	4641      	mov	r1, r8
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	f000 fbbd 	bl	800d744 <_Bfree>
 800cfca:	4639      	mov	r1, r7
 800cfcc:	4620      	mov	r0, r4
 800cfce:	f000 fbb9 	bl	800d744 <_Bfree>
 800cfd2:	e695      	b.n	800cd00 <_dtoa_r+0x6a0>
 800cfd4:	2600      	movs	r6, #0
 800cfd6:	4637      	mov	r7, r6
 800cfd8:	e7e1      	b.n	800cf9e <_dtoa_r+0x93e>
 800cfda:	9700      	str	r7, [sp, #0]
 800cfdc:	4637      	mov	r7, r6
 800cfde:	e599      	b.n	800cb14 <_dtoa_r+0x4b4>
 800cfe0:	40240000 	.word	0x40240000
 800cfe4:	9b08      	ldr	r3, [sp, #32]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	f000 80ca 	beq.w	800d180 <_dtoa_r+0xb20>
 800cfec:	9b03      	ldr	r3, [sp, #12]
 800cfee:	9302      	str	r3, [sp, #8]
 800cff0:	2d00      	cmp	r5, #0
 800cff2:	dd05      	ble.n	800d000 <_dtoa_r+0x9a0>
 800cff4:	4639      	mov	r1, r7
 800cff6:	462a      	mov	r2, r5
 800cff8:	4620      	mov	r0, r4
 800cffa:	f000 fd75 	bl	800dae8 <__lshift>
 800cffe:	4607      	mov	r7, r0
 800d000:	f1b8 0f00 	cmp.w	r8, #0
 800d004:	d05b      	beq.n	800d0be <_dtoa_r+0xa5e>
 800d006:	6879      	ldr	r1, [r7, #4]
 800d008:	4620      	mov	r0, r4
 800d00a:	f000 fb5b 	bl	800d6c4 <_Balloc>
 800d00e:	4605      	mov	r5, r0
 800d010:	b928      	cbnz	r0, 800d01e <_dtoa_r+0x9be>
 800d012:	4b87      	ldr	r3, [pc, #540]	; (800d230 <_dtoa_r+0xbd0>)
 800d014:	4602      	mov	r2, r0
 800d016:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d01a:	f7ff bb3b 	b.w	800c694 <_dtoa_r+0x34>
 800d01e:	693a      	ldr	r2, [r7, #16]
 800d020:	3202      	adds	r2, #2
 800d022:	0092      	lsls	r2, r2, #2
 800d024:	f107 010c 	add.w	r1, r7, #12
 800d028:	300c      	adds	r0, #12
 800d02a:	f7fe fa5f 	bl	800b4ec <memcpy>
 800d02e:	2201      	movs	r2, #1
 800d030:	4629      	mov	r1, r5
 800d032:	4620      	mov	r0, r4
 800d034:	f000 fd58 	bl	800dae8 <__lshift>
 800d038:	9b01      	ldr	r3, [sp, #4]
 800d03a:	f103 0901 	add.w	r9, r3, #1
 800d03e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d042:	4413      	add	r3, r2
 800d044:	9305      	str	r3, [sp, #20]
 800d046:	f00a 0301 	and.w	r3, sl, #1
 800d04a:	46b8      	mov	r8, r7
 800d04c:	9304      	str	r3, [sp, #16]
 800d04e:	4607      	mov	r7, r0
 800d050:	4631      	mov	r1, r6
 800d052:	ee18 0a10 	vmov	r0, s16
 800d056:	f7ff fa75 	bl	800c544 <quorem>
 800d05a:	4641      	mov	r1, r8
 800d05c:	9002      	str	r0, [sp, #8]
 800d05e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d062:	ee18 0a10 	vmov	r0, s16
 800d066:	f000 fdaf 	bl	800dbc8 <__mcmp>
 800d06a:	463a      	mov	r2, r7
 800d06c:	9003      	str	r0, [sp, #12]
 800d06e:	4631      	mov	r1, r6
 800d070:	4620      	mov	r0, r4
 800d072:	f000 fdc5 	bl	800dc00 <__mdiff>
 800d076:	68c2      	ldr	r2, [r0, #12]
 800d078:	f109 3bff 	add.w	fp, r9, #4294967295
 800d07c:	4605      	mov	r5, r0
 800d07e:	bb02      	cbnz	r2, 800d0c2 <_dtoa_r+0xa62>
 800d080:	4601      	mov	r1, r0
 800d082:	ee18 0a10 	vmov	r0, s16
 800d086:	f000 fd9f 	bl	800dbc8 <__mcmp>
 800d08a:	4602      	mov	r2, r0
 800d08c:	4629      	mov	r1, r5
 800d08e:	4620      	mov	r0, r4
 800d090:	9207      	str	r2, [sp, #28]
 800d092:	f000 fb57 	bl	800d744 <_Bfree>
 800d096:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d09a:	ea43 0102 	orr.w	r1, r3, r2
 800d09e:	9b04      	ldr	r3, [sp, #16]
 800d0a0:	430b      	orrs	r3, r1
 800d0a2:	464d      	mov	r5, r9
 800d0a4:	d10f      	bne.n	800d0c6 <_dtoa_r+0xa66>
 800d0a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d0aa:	d02a      	beq.n	800d102 <_dtoa_r+0xaa2>
 800d0ac:	9b03      	ldr	r3, [sp, #12]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	dd02      	ble.n	800d0b8 <_dtoa_r+0xa58>
 800d0b2:	9b02      	ldr	r3, [sp, #8]
 800d0b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d0b8:	f88b a000 	strb.w	sl, [fp]
 800d0bc:	e775      	b.n	800cfaa <_dtoa_r+0x94a>
 800d0be:	4638      	mov	r0, r7
 800d0c0:	e7ba      	b.n	800d038 <_dtoa_r+0x9d8>
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	e7e2      	b.n	800d08c <_dtoa_r+0xa2c>
 800d0c6:	9b03      	ldr	r3, [sp, #12]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	db04      	blt.n	800d0d6 <_dtoa_r+0xa76>
 800d0cc:	9906      	ldr	r1, [sp, #24]
 800d0ce:	430b      	orrs	r3, r1
 800d0d0:	9904      	ldr	r1, [sp, #16]
 800d0d2:	430b      	orrs	r3, r1
 800d0d4:	d122      	bne.n	800d11c <_dtoa_r+0xabc>
 800d0d6:	2a00      	cmp	r2, #0
 800d0d8:	ddee      	ble.n	800d0b8 <_dtoa_r+0xa58>
 800d0da:	ee18 1a10 	vmov	r1, s16
 800d0de:	2201      	movs	r2, #1
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	f000 fd01 	bl	800dae8 <__lshift>
 800d0e6:	4631      	mov	r1, r6
 800d0e8:	ee08 0a10 	vmov	s16, r0
 800d0ec:	f000 fd6c 	bl	800dbc8 <__mcmp>
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	dc03      	bgt.n	800d0fc <_dtoa_r+0xa9c>
 800d0f4:	d1e0      	bne.n	800d0b8 <_dtoa_r+0xa58>
 800d0f6:	f01a 0f01 	tst.w	sl, #1
 800d0fa:	d0dd      	beq.n	800d0b8 <_dtoa_r+0xa58>
 800d0fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d100:	d1d7      	bne.n	800d0b2 <_dtoa_r+0xa52>
 800d102:	2339      	movs	r3, #57	; 0x39
 800d104:	f88b 3000 	strb.w	r3, [fp]
 800d108:	462b      	mov	r3, r5
 800d10a:	461d      	mov	r5, r3
 800d10c:	3b01      	subs	r3, #1
 800d10e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d112:	2a39      	cmp	r2, #57	; 0x39
 800d114:	d071      	beq.n	800d1fa <_dtoa_r+0xb9a>
 800d116:	3201      	adds	r2, #1
 800d118:	701a      	strb	r2, [r3, #0]
 800d11a:	e746      	b.n	800cfaa <_dtoa_r+0x94a>
 800d11c:	2a00      	cmp	r2, #0
 800d11e:	dd07      	ble.n	800d130 <_dtoa_r+0xad0>
 800d120:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d124:	d0ed      	beq.n	800d102 <_dtoa_r+0xaa2>
 800d126:	f10a 0301 	add.w	r3, sl, #1
 800d12a:	f88b 3000 	strb.w	r3, [fp]
 800d12e:	e73c      	b.n	800cfaa <_dtoa_r+0x94a>
 800d130:	9b05      	ldr	r3, [sp, #20]
 800d132:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d136:	4599      	cmp	r9, r3
 800d138:	d047      	beq.n	800d1ca <_dtoa_r+0xb6a>
 800d13a:	ee18 1a10 	vmov	r1, s16
 800d13e:	2300      	movs	r3, #0
 800d140:	220a      	movs	r2, #10
 800d142:	4620      	mov	r0, r4
 800d144:	f000 fb20 	bl	800d788 <__multadd>
 800d148:	45b8      	cmp	r8, r7
 800d14a:	ee08 0a10 	vmov	s16, r0
 800d14e:	f04f 0300 	mov.w	r3, #0
 800d152:	f04f 020a 	mov.w	r2, #10
 800d156:	4641      	mov	r1, r8
 800d158:	4620      	mov	r0, r4
 800d15a:	d106      	bne.n	800d16a <_dtoa_r+0xb0a>
 800d15c:	f000 fb14 	bl	800d788 <__multadd>
 800d160:	4680      	mov	r8, r0
 800d162:	4607      	mov	r7, r0
 800d164:	f109 0901 	add.w	r9, r9, #1
 800d168:	e772      	b.n	800d050 <_dtoa_r+0x9f0>
 800d16a:	f000 fb0d 	bl	800d788 <__multadd>
 800d16e:	4639      	mov	r1, r7
 800d170:	4680      	mov	r8, r0
 800d172:	2300      	movs	r3, #0
 800d174:	220a      	movs	r2, #10
 800d176:	4620      	mov	r0, r4
 800d178:	f000 fb06 	bl	800d788 <__multadd>
 800d17c:	4607      	mov	r7, r0
 800d17e:	e7f1      	b.n	800d164 <_dtoa_r+0xb04>
 800d180:	9b03      	ldr	r3, [sp, #12]
 800d182:	9302      	str	r3, [sp, #8]
 800d184:	9d01      	ldr	r5, [sp, #4]
 800d186:	ee18 0a10 	vmov	r0, s16
 800d18a:	4631      	mov	r1, r6
 800d18c:	f7ff f9da 	bl	800c544 <quorem>
 800d190:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d194:	9b01      	ldr	r3, [sp, #4]
 800d196:	f805 ab01 	strb.w	sl, [r5], #1
 800d19a:	1aea      	subs	r2, r5, r3
 800d19c:	9b02      	ldr	r3, [sp, #8]
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	dd09      	ble.n	800d1b6 <_dtoa_r+0xb56>
 800d1a2:	ee18 1a10 	vmov	r1, s16
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	220a      	movs	r2, #10
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	f000 faec 	bl	800d788 <__multadd>
 800d1b0:	ee08 0a10 	vmov	s16, r0
 800d1b4:	e7e7      	b.n	800d186 <_dtoa_r+0xb26>
 800d1b6:	9b02      	ldr	r3, [sp, #8]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	bfc8      	it	gt
 800d1bc:	461d      	movgt	r5, r3
 800d1be:	9b01      	ldr	r3, [sp, #4]
 800d1c0:	bfd8      	it	le
 800d1c2:	2501      	movle	r5, #1
 800d1c4:	441d      	add	r5, r3
 800d1c6:	f04f 0800 	mov.w	r8, #0
 800d1ca:	ee18 1a10 	vmov	r1, s16
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f000 fc89 	bl	800dae8 <__lshift>
 800d1d6:	4631      	mov	r1, r6
 800d1d8:	ee08 0a10 	vmov	s16, r0
 800d1dc:	f000 fcf4 	bl	800dbc8 <__mcmp>
 800d1e0:	2800      	cmp	r0, #0
 800d1e2:	dc91      	bgt.n	800d108 <_dtoa_r+0xaa8>
 800d1e4:	d102      	bne.n	800d1ec <_dtoa_r+0xb8c>
 800d1e6:	f01a 0f01 	tst.w	sl, #1
 800d1ea:	d18d      	bne.n	800d108 <_dtoa_r+0xaa8>
 800d1ec:	462b      	mov	r3, r5
 800d1ee:	461d      	mov	r5, r3
 800d1f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1f4:	2a30      	cmp	r2, #48	; 0x30
 800d1f6:	d0fa      	beq.n	800d1ee <_dtoa_r+0xb8e>
 800d1f8:	e6d7      	b.n	800cfaa <_dtoa_r+0x94a>
 800d1fa:	9a01      	ldr	r2, [sp, #4]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d184      	bne.n	800d10a <_dtoa_r+0xaaa>
 800d200:	9b00      	ldr	r3, [sp, #0]
 800d202:	3301      	adds	r3, #1
 800d204:	9300      	str	r3, [sp, #0]
 800d206:	2331      	movs	r3, #49	; 0x31
 800d208:	7013      	strb	r3, [r2, #0]
 800d20a:	e6ce      	b.n	800cfaa <_dtoa_r+0x94a>
 800d20c:	4b09      	ldr	r3, [pc, #36]	; (800d234 <_dtoa_r+0xbd4>)
 800d20e:	f7ff ba95 	b.w	800c73c <_dtoa_r+0xdc>
 800d212:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d214:	2b00      	cmp	r3, #0
 800d216:	f47f aa6e 	bne.w	800c6f6 <_dtoa_r+0x96>
 800d21a:	4b07      	ldr	r3, [pc, #28]	; (800d238 <_dtoa_r+0xbd8>)
 800d21c:	f7ff ba8e 	b.w	800c73c <_dtoa_r+0xdc>
 800d220:	9b02      	ldr	r3, [sp, #8]
 800d222:	2b00      	cmp	r3, #0
 800d224:	dcae      	bgt.n	800d184 <_dtoa_r+0xb24>
 800d226:	9b06      	ldr	r3, [sp, #24]
 800d228:	2b02      	cmp	r3, #2
 800d22a:	f73f aea8 	bgt.w	800cf7e <_dtoa_r+0x91e>
 800d22e:	e7a9      	b.n	800d184 <_dtoa_r+0xb24>
 800d230:	0800ef06 	.word	0x0800ef06
 800d234:	0800f0e9 	.word	0x0800f0e9
 800d238:	0800ee87 	.word	0x0800ee87

0800d23c <__sflush_r>:
 800d23c:	898a      	ldrh	r2, [r1, #12]
 800d23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d242:	4605      	mov	r5, r0
 800d244:	0710      	lsls	r0, r2, #28
 800d246:	460c      	mov	r4, r1
 800d248:	d458      	bmi.n	800d2fc <__sflush_r+0xc0>
 800d24a:	684b      	ldr	r3, [r1, #4]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	dc05      	bgt.n	800d25c <__sflush_r+0x20>
 800d250:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d252:	2b00      	cmp	r3, #0
 800d254:	dc02      	bgt.n	800d25c <__sflush_r+0x20>
 800d256:	2000      	movs	r0, #0
 800d258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d25c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d25e:	2e00      	cmp	r6, #0
 800d260:	d0f9      	beq.n	800d256 <__sflush_r+0x1a>
 800d262:	2300      	movs	r3, #0
 800d264:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d268:	682f      	ldr	r7, [r5, #0]
 800d26a:	602b      	str	r3, [r5, #0]
 800d26c:	d032      	beq.n	800d2d4 <__sflush_r+0x98>
 800d26e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d270:	89a3      	ldrh	r3, [r4, #12]
 800d272:	075a      	lsls	r2, r3, #29
 800d274:	d505      	bpl.n	800d282 <__sflush_r+0x46>
 800d276:	6863      	ldr	r3, [r4, #4]
 800d278:	1ac0      	subs	r0, r0, r3
 800d27a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d27c:	b10b      	cbz	r3, 800d282 <__sflush_r+0x46>
 800d27e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d280:	1ac0      	subs	r0, r0, r3
 800d282:	2300      	movs	r3, #0
 800d284:	4602      	mov	r2, r0
 800d286:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d288:	6a21      	ldr	r1, [r4, #32]
 800d28a:	4628      	mov	r0, r5
 800d28c:	47b0      	blx	r6
 800d28e:	1c43      	adds	r3, r0, #1
 800d290:	89a3      	ldrh	r3, [r4, #12]
 800d292:	d106      	bne.n	800d2a2 <__sflush_r+0x66>
 800d294:	6829      	ldr	r1, [r5, #0]
 800d296:	291d      	cmp	r1, #29
 800d298:	d82c      	bhi.n	800d2f4 <__sflush_r+0xb8>
 800d29a:	4a2a      	ldr	r2, [pc, #168]	; (800d344 <__sflush_r+0x108>)
 800d29c:	40ca      	lsrs	r2, r1
 800d29e:	07d6      	lsls	r6, r2, #31
 800d2a0:	d528      	bpl.n	800d2f4 <__sflush_r+0xb8>
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	6062      	str	r2, [r4, #4]
 800d2a6:	04d9      	lsls	r1, r3, #19
 800d2a8:	6922      	ldr	r2, [r4, #16]
 800d2aa:	6022      	str	r2, [r4, #0]
 800d2ac:	d504      	bpl.n	800d2b8 <__sflush_r+0x7c>
 800d2ae:	1c42      	adds	r2, r0, #1
 800d2b0:	d101      	bne.n	800d2b6 <__sflush_r+0x7a>
 800d2b2:	682b      	ldr	r3, [r5, #0]
 800d2b4:	b903      	cbnz	r3, 800d2b8 <__sflush_r+0x7c>
 800d2b6:	6560      	str	r0, [r4, #84]	; 0x54
 800d2b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2ba:	602f      	str	r7, [r5, #0]
 800d2bc:	2900      	cmp	r1, #0
 800d2be:	d0ca      	beq.n	800d256 <__sflush_r+0x1a>
 800d2c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2c4:	4299      	cmp	r1, r3
 800d2c6:	d002      	beq.n	800d2ce <__sflush_r+0x92>
 800d2c8:	4628      	mov	r0, r5
 800d2ca:	f7fe f925 	bl	800b518 <_free_r>
 800d2ce:	2000      	movs	r0, #0
 800d2d0:	6360      	str	r0, [r4, #52]	; 0x34
 800d2d2:	e7c1      	b.n	800d258 <__sflush_r+0x1c>
 800d2d4:	6a21      	ldr	r1, [r4, #32]
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	4628      	mov	r0, r5
 800d2da:	47b0      	blx	r6
 800d2dc:	1c41      	adds	r1, r0, #1
 800d2de:	d1c7      	bne.n	800d270 <__sflush_r+0x34>
 800d2e0:	682b      	ldr	r3, [r5, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d0c4      	beq.n	800d270 <__sflush_r+0x34>
 800d2e6:	2b1d      	cmp	r3, #29
 800d2e8:	d001      	beq.n	800d2ee <__sflush_r+0xb2>
 800d2ea:	2b16      	cmp	r3, #22
 800d2ec:	d101      	bne.n	800d2f2 <__sflush_r+0xb6>
 800d2ee:	602f      	str	r7, [r5, #0]
 800d2f0:	e7b1      	b.n	800d256 <__sflush_r+0x1a>
 800d2f2:	89a3      	ldrh	r3, [r4, #12]
 800d2f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2f8:	81a3      	strh	r3, [r4, #12]
 800d2fa:	e7ad      	b.n	800d258 <__sflush_r+0x1c>
 800d2fc:	690f      	ldr	r7, [r1, #16]
 800d2fe:	2f00      	cmp	r7, #0
 800d300:	d0a9      	beq.n	800d256 <__sflush_r+0x1a>
 800d302:	0793      	lsls	r3, r2, #30
 800d304:	680e      	ldr	r6, [r1, #0]
 800d306:	bf08      	it	eq
 800d308:	694b      	ldreq	r3, [r1, #20]
 800d30a:	600f      	str	r7, [r1, #0]
 800d30c:	bf18      	it	ne
 800d30e:	2300      	movne	r3, #0
 800d310:	eba6 0807 	sub.w	r8, r6, r7
 800d314:	608b      	str	r3, [r1, #8]
 800d316:	f1b8 0f00 	cmp.w	r8, #0
 800d31a:	dd9c      	ble.n	800d256 <__sflush_r+0x1a>
 800d31c:	6a21      	ldr	r1, [r4, #32]
 800d31e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d320:	4643      	mov	r3, r8
 800d322:	463a      	mov	r2, r7
 800d324:	4628      	mov	r0, r5
 800d326:	47b0      	blx	r6
 800d328:	2800      	cmp	r0, #0
 800d32a:	dc06      	bgt.n	800d33a <__sflush_r+0xfe>
 800d32c:	89a3      	ldrh	r3, [r4, #12]
 800d32e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d332:	81a3      	strh	r3, [r4, #12]
 800d334:	f04f 30ff 	mov.w	r0, #4294967295
 800d338:	e78e      	b.n	800d258 <__sflush_r+0x1c>
 800d33a:	4407      	add	r7, r0
 800d33c:	eba8 0800 	sub.w	r8, r8, r0
 800d340:	e7e9      	b.n	800d316 <__sflush_r+0xda>
 800d342:	bf00      	nop
 800d344:	20400001 	.word	0x20400001

0800d348 <_fflush_r>:
 800d348:	b538      	push	{r3, r4, r5, lr}
 800d34a:	690b      	ldr	r3, [r1, #16]
 800d34c:	4605      	mov	r5, r0
 800d34e:	460c      	mov	r4, r1
 800d350:	b913      	cbnz	r3, 800d358 <_fflush_r+0x10>
 800d352:	2500      	movs	r5, #0
 800d354:	4628      	mov	r0, r5
 800d356:	bd38      	pop	{r3, r4, r5, pc}
 800d358:	b118      	cbz	r0, 800d362 <_fflush_r+0x1a>
 800d35a:	6983      	ldr	r3, [r0, #24]
 800d35c:	b90b      	cbnz	r3, 800d362 <_fflush_r+0x1a>
 800d35e:	f000 f887 	bl	800d470 <__sinit>
 800d362:	4b14      	ldr	r3, [pc, #80]	; (800d3b4 <_fflush_r+0x6c>)
 800d364:	429c      	cmp	r4, r3
 800d366:	d11b      	bne.n	800d3a0 <_fflush_r+0x58>
 800d368:	686c      	ldr	r4, [r5, #4]
 800d36a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d0ef      	beq.n	800d352 <_fflush_r+0xa>
 800d372:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d374:	07d0      	lsls	r0, r2, #31
 800d376:	d404      	bmi.n	800d382 <_fflush_r+0x3a>
 800d378:	0599      	lsls	r1, r3, #22
 800d37a:	d402      	bmi.n	800d382 <_fflush_r+0x3a>
 800d37c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d37e:	f000 f91a 	bl	800d5b6 <__retarget_lock_acquire_recursive>
 800d382:	4628      	mov	r0, r5
 800d384:	4621      	mov	r1, r4
 800d386:	f7ff ff59 	bl	800d23c <__sflush_r>
 800d38a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d38c:	07da      	lsls	r2, r3, #31
 800d38e:	4605      	mov	r5, r0
 800d390:	d4e0      	bmi.n	800d354 <_fflush_r+0xc>
 800d392:	89a3      	ldrh	r3, [r4, #12]
 800d394:	059b      	lsls	r3, r3, #22
 800d396:	d4dd      	bmi.n	800d354 <_fflush_r+0xc>
 800d398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d39a:	f000 f90d 	bl	800d5b8 <__retarget_lock_release_recursive>
 800d39e:	e7d9      	b.n	800d354 <_fflush_r+0xc>
 800d3a0:	4b05      	ldr	r3, [pc, #20]	; (800d3b8 <_fflush_r+0x70>)
 800d3a2:	429c      	cmp	r4, r3
 800d3a4:	d101      	bne.n	800d3aa <_fflush_r+0x62>
 800d3a6:	68ac      	ldr	r4, [r5, #8]
 800d3a8:	e7df      	b.n	800d36a <_fflush_r+0x22>
 800d3aa:	4b04      	ldr	r3, [pc, #16]	; (800d3bc <_fflush_r+0x74>)
 800d3ac:	429c      	cmp	r4, r3
 800d3ae:	bf08      	it	eq
 800d3b0:	68ec      	ldreq	r4, [r5, #12]
 800d3b2:	e7da      	b.n	800d36a <_fflush_r+0x22>
 800d3b4:	0800ef38 	.word	0x0800ef38
 800d3b8:	0800ef58 	.word	0x0800ef58
 800d3bc:	0800ef18 	.word	0x0800ef18

0800d3c0 <std>:
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	b510      	push	{r4, lr}
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	e9c0 3300 	strd	r3, r3, [r0]
 800d3ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3ce:	6083      	str	r3, [r0, #8]
 800d3d0:	8181      	strh	r1, [r0, #12]
 800d3d2:	6643      	str	r3, [r0, #100]	; 0x64
 800d3d4:	81c2      	strh	r2, [r0, #14]
 800d3d6:	6183      	str	r3, [r0, #24]
 800d3d8:	4619      	mov	r1, r3
 800d3da:	2208      	movs	r2, #8
 800d3dc:	305c      	adds	r0, #92	; 0x5c
 800d3de:	f7fe f893 	bl	800b508 <memset>
 800d3e2:	4b05      	ldr	r3, [pc, #20]	; (800d3f8 <std+0x38>)
 800d3e4:	6263      	str	r3, [r4, #36]	; 0x24
 800d3e6:	4b05      	ldr	r3, [pc, #20]	; (800d3fc <std+0x3c>)
 800d3e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d3ea:	4b05      	ldr	r3, [pc, #20]	; (800d400 <std+0x40>)
 800d3ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d3ee:	4b05      	ldr	r3, [pc, #20]	; (800d404 <std+0x44>)
 800d3f0:	6224      	str	r4, [r4, #32]
 800d3f2:	6323      	str	r3, [r4, #48]	; 0x30
 800d3f4:	bd10      	pop	{r4, pc}
 800d3f6:	bf00      	nop
 800d3f8:	0800c1c9 	.word	0x0800c1c9
 800d3fc:	0800c1ef 	.word	0x0800c1ef
 800d400:	0800c227 	.word	0x0800c227
 800d404:	0800c24b 	.word	0x0800c24b

0800d408 <_cleanup_r>:
 800d408:	4901      	ldr	r1, [pc, #4]	; (800d410 <_cleanup_r+0x8>)
 800d40a:	f000 b8af 	b.w	800d56c <_fwalk_reent>
 800d40e:	bf00      	nop
 800d410:	0800d349 	.word	0x0800d349

0800d414 <__sfmoreglue>:
 800d414:	b570      	push	{r4, r5, r6, lr}
 800d416:	2268      	movs	r2, #104	; 0x68
 800d418:	1e4d      	subs	r5, r1, #1
 800d41a:	4355      	muls	r5, r2
 800d41c:	460e      	mov	r6, r1
 800d41e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d422:	f7fe f8e5 	bl	800b5f0 <_malloc_r>
 800d426:	4604      	mov	r4, r0
 800d428:	b140      	cbz	r0, 800d43c <__sfmoreglue+0x28>
 800d42a:	2100      	movs	r1, #0
 800d42c:	e9c0 1600 	strd	r1, r6, [r0]
 800d430:	300c      	adds	r0, #12
 800d432:	60a0      	str	r0, [r4, #8]
 800d434:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d438:	f7fe f866 	bl	800b508 <memset>
 800d43c:	4620      	mov	r0, r4
 800d43e:	bd70      	pop	{r4, r5, r6, pc}

0800d440 <__sfp_lock_acquire>:
 800d440:	4801      	ldr	r0, [pc, #4]	; (800d448 <__sfp_lock_acquire+0x8>)
 800d442:	f000 b8b8 	b.w	800d5b6 <__retarget_lock_acquire_recursive>
 800d446:	bf00      	nop
 800d448:	20002621 	.word	0x20002621

0800d44c <__sfp_lock_release>:
 800d44c:	4801      	ldr	r0, [pc, #4]	; (800d454 <__sfp_lock_release+0x8>)
 800d44e:	f000 b8b3 	b.w	800d5b8 <__retarget_lock_release_recursive>
 800d452:	bf00      	nop
 800d454:	20002621 	.word	0x20002621

0800d458 <__sinit_lock_acquire>:
 800d458:	4801      	ldr	r0, [pc, #4]	; (800d460 <__sinit_lock_acquire+0x8>)
 800d45a:	f000 b8ac 	b.w	800d5b6 <__retarget_lock_acquire_recursive>
 800d45e:	bf00      	nop
 800d460:	20002622 	.word	0x20002622

0800d464 <__sinit_lock_release>:
 800d464:	4801      	ldr	r0, [pc, #4]	; (800d46c <__sinit_lock_release+0x8>)
 800d466:	f000 b8a7 	b.w	800d5b8 <__retarget_lock_release_recursive>
 800d46a:	bf00      	nop
 800d46c:	20002622 	.word	0x20002622

0800d470 <__sinit>:
 800d470:	b510      	push	{r4, lr}
 800d472:	4604      	mov	r4, r0
 800d474:	f7ff fff0 	bl	800d458 <__sinit_lock_acquire>
 800d478:	69a3      	ldr	r3, [r4, #24]
 800d47a:	b11b      	cbz	r3, 800d484 <__sinit+0x14>
 800d47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d480:	f7ff bff0 	b.w	800d464 <__sinit_lock_release>
 800d484:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d488:	6523      	str	r3, [r4, #80]	; 0x50
 800d48a:	4b13      	ldr	r3, [pc, #76]	; (800d4d8 <__sinit+0x68>)
 800d48c:	4a13      	ldr	r2, [pc, #76]	; (800d4dc <__sinit+0x6c>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	62a2      	str	r2, [r4, #40]	; 0x28
 800d492:	42a3      	cmp	r3, r4
 800d494:	bf04      	itt	eq
 800d496:	2301      	moveq	r3, #1
 800d498:	61a3      	streq	r3, [r4, #24]
 800d49a:	4620      	mov	r0, r4
 800d49c:	f000 f820 	bl	800d4e0 <__sfp>
 800d4a0:	6060      	str	r0, [r4, #4]
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	f000 f81c 	bl	800d4e0 <__sfp>
 800d4a8:	60a0      	str	r0, [r4, #8]
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	f000 f818 	bl	800d4e0 <__sfp>
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	60e0      	str	r0, [r4, #12]
 800d4b4:	2104      	movs	r1, #4
 800d4b6:	6860      	ldr	r0, [r4, #4]
 800d4b8:	f7ff ff82 	bl	800d3c0 <std>
 800d4bc:	68a0      	ldr	r0, [r4, #8]
 800d4be:	2201      	movs	r2, #1
 800d4c0:	2109      	movs	r1, #9
 800d4c2:	f7ff ff7d 	bl	800d3c0 <std>
 800d4c6:	68e0      	ldr	r0, [r4, #12]
 800d4c8:	2202      	movs	r2, #2
 800d4ca:	2112      	movs	r1, #18
 800d4cc:	f7ff ff78 	bl	800d3c0 <std>
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	61a3      	str	r3, [r4, #24]
 800d4d4:	e7d2      	b.n	800d47c <__sinit+0xc>
 800d4d6:	bf00      	nop
 800d4d8:	0800ed50 	.word	0x0800ed50
 800d4dc:	0800d409 	.word	0x0800d409

0800d4e0 <__sfp>:
 800d4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4e2:	4607      	mov	r7, r0
 800d4e4:	f7ff ffac 	bl	800d440 <__sfp_lock_acquire>
 800d4e8:	4b1e      	ldr	r3, [pc, #120]	; (800d564 <__sfp+0x84>)
 800d4ea:	681e      	ldr	r6, [r3, #0]
 800d4ec:	69b3      	ldr	r3, [r6, #24]
 800d4ee:	b913      	cbnz	r3, 800d4f6 <__sfp+0x16>
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	f7ff ffbd 	bl	800d470 <__sinit>
 800d4f6:	3648      	adds	r6, #72	; 0x48
 800d4f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d4fc:	3b01      	subs	r3, #1
 800d4fe:	d503      	bpl.n	800d508 <__sfp+0x28>
 800d500:	6833      	ldr	r3, [r6, #0]
 800d502:	b30b      	cbz	r3, 800d548 <__sfp+0x68>
 800d504:	6836      	ldr	r6, [r6, #0]
 800d506:	e7f7      	b.n	800d4f8 <__sfp+0x18>
 800d508:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d50c:	b9d5      	cbnz	r5, 800d544 <__sfp+0x64>
 800d50e:	4b16      	ldr	r3, [pc, #88]	; (800d568 <__sfp+0x88>)
 800d510:	60e3      	str	r3, [r4, #12]
 800d512:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d516:	6665      	str	r5, [r4, #100]	; 0x64
 800d518:	f000 f84c 	bl	800d5b4 <__retarget_lock_init_recursive>
 800d51c:	f7ff ff96 	bl	800d44c <__sfp_lock_release>
 800d520:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d524:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d528:	6025      	str	r5, [r4, #0]
 800d52a:	61a5      	str	r5, [r4, #24]
 800d52c:	2208      	movs	r2, #8
 800d52e:	4629      	mov	r1, r5
 800d530:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d534:	f7fd ffe8 	bl	800b508 <memset>
 800d538:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d53c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d540:	4620      	mov	r0, r4
 800d542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d544:	3468      	adds	r4, #104	; 0x68
 800d546:	e7d9      	b.n	800d4fc <__sfp+0x1c>
 800d548:	2104      	movs	r1, #4
 800d54a:	4638      	mov	r0, r7
 800d54c:	f7ff ff62 	bl	800d414 <__sfmoreglue>
 800d550:	4604      	mov	r4, r0
 800d552:	6030      	str	r0, [r6, #0]
 800d554:	2800      	cmp	r0, #0
 800d556:	d1d5      	bne.n	800d504 <__sfp+0x24>
 800d558:	f7ff ff78 	bl	800d44c <__sfp_lock_release>
 800d55c:	230c      	movs	r3, #12
 800d55e:	603b      	str	r3, [r7, #0]
 800d560:	e7ee      	b.n	800d540 <__sfp+0x60>
 800d562:	bf00      	nop
 800d564:	0800ed50 	.word	0x0800ed50
 800d568:	ffff0001 	.word	0xffff0001

0800d56c <_fwalk_reent>:
 800d56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d570:	4606      	mov	r6, r0
 800d572:	4688      	mov	r8, r1
 800d574:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d578:	2700      	movs	r7, #0
 800d57a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d57e:	f1b9 0901 	subs.w	r9, r9, #1
 800d582:	d505      	bpl.n	800d590 <_fwalk_reent+0x24>
 800d584:	6824      	ldr	r4, [r4, #0]
 800d586:	2c00      	cmp	r4, #0
 800d588:	d1f7      	bne.n	800d57a <_fwalk_reent+0xe>
 800d58a:	4638      	mov	r0, r7
 800d58c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d590:	89ab      	ldrh	r3, [r5, #12]
 800d592:	2b01      	cmp	r3, #1
 800d594:	d907      	bls.n	800d5a6 <_fwalk_reent+0x3a>
 800d596:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d59a:	3301      	adds	r3, #1
 800d59c:	d003      	beq.n	800d5a6 <_fwalk_reent+0x3a>
 800d59e:	4629      	mov	r1, r5
 800d5a0:	4630      	mov	r0, r6
 800d5a2:	47c0      	blx	r8
 800d5a4:	4307      	orrs	r7, r0
 800d5a6:	3568      	adds	r5, #104	; 0x68
 800d5a8:	e7e9      	b.n	800d57e <_fwalk_reent+0x12>
	...

0800d5ac <_localeconv_r>:
 800d5ac:	4800      	ldr	r0, [pc, #0]	; (800d5b0 <_localeconv_r+0x4>)
 800d5ae:	4770      	bx	lr
 800d5b0:	20000190 	.word	0x20000190

0800d5b4 <__retarget_lock_init_recursive>:
 800d5b4:	4770      	bx	lr

0800d5b6 <__retarget_lock_acquire_recursive>:
 800d5b6:	4770      	bx	lr

0800d5b8 <__retarget_lock_release_recursive>:
 800d5b8:	4770      	bx	lr
	...

0800d5bc <_lseek_r>:
 800d5bc:	b538      	push	{r3, r4, r5, lr}
 800d5be:	4d07      	ldr	r5, [pc, #28]	; (800d5dc <_lseek_r+0x20>)
 800d5c0:	4604      	mov	r4, r0
 800d5c2:	4608      	mov	r0, r1
 800d5c4:	4611      	mov	r1, r2
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	602a      	str	r2, [r5, #0]
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	f7f5 fd24 	bl	8003018 <_lseek>
 800d5d0:	1c43      	adds	r3, r0, #1
 800d5d2:	d102      	bne.n	800d5da <_lseek_r+0x1e>
 800d5d4:	682b      	ldr	r3, [r5, #0]
 800d5d6:	b103      	cbz	r3, 800d5da <_lseek_r+0x1e>
 800d5d8:	6023      	str	r3, [r4, #0]
 800d5da:	bd38      	pop	{r3, r4, r5, pc}
 800d5dc:	20002624 	.word	0x20002624

0800d5e0 <__swhatbuf_r>:
 800d5e0:	b570      	push	{r4, r5, r6, lr}
 800d5e2:	460e      	mov	r6, r1
 800d5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5e8:	2900      	cmp	r1, #0
 800d5ea:	b096      	sub	sp, #88	; 0x58
 800d5ec:	4614      	mov	r4, r2
 800d5ee:	461d      	mov	r5, r3
 800d5f0:	da08      	bge.n	800d604 <__swhatbuf_r+0x24>
 800d5f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	602a      	str	r2, [r5, #0]
 800d5fa:	061a      	lsls	r2, r3, #24
 800d5fc:	d410      	bmi.n	800d620 <__swhatbuf_r+0x40>
 800d5fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d602:	e00e      	b.n	800d622 <__swhatbuf_r+0x42>
 800d604:	466a      	mov	r2, sp
 800d606:	f001 f99d 	bl	800e944 <_fstat_r>
 800d60a:	2800      	cmp	r0, #0
 800d60c:	dbf1      	blt.n	800d5f2 <__swhatbuf_r+0x12>
 800d60e:	9a01      	ldr	r2, [sp, #4]
 800d610:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d614:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d618:	425a      	negs	r2, r3
 800d61a:	415a      	adcs	r2, r3
 800d61c:	602a      	str	r2, [r5, #0]
 800d61e:	e7ee      	b.n	800d5fe <__swhatbuf_r+0x1e>
 800d620:	2340      	movs	r3, #64	; 0x40
 800d622:	2000      	movs	r0, #0
 800d624:	6023      	str	r3, [r4, #0]
 800d626:	b016      	add	sp, #88	; 0x58
 800d628:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d62c <__smakebuf_r>:
 800d62c:	898b      	ldrh	r3, [r1, #12]
 800d62e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d630:	079d      	lsls	r5, r3, #30
 800d632:	4606      	mov	r6, r0
 800d634:	460c      	mov	r4, r1
 800d636:	d507      	bpl.n	800d648 <__smakebuf_r+0x1c>
 800d638:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d63c:	6023      	str	r3, [r4, #0]
 800d63e:	6123      	str	r3, [r4, #16]
 800d640:	2301      	movs	r3, #1
 800d642:	6163      	str	r3, [r4, #20]
 800d644:	b002      	add	sp, #8
 800d646:	bd70      	pop	{r4, r5, r6, pc}
 800d648:	ab01      	add	r3, sp, #4
 800d64a:	466a      	mov	r2, sp
 800d64c:	f7ff ffc8 	bl	800d5e0 <__swhatbuf_r>
 800d650:	9900      	ldr	r1, [sp, #0]
 800d652:	4605      	mov	r5, r0
 800d654:	4630      	mov	r0, r6
 800d656:	f7fd ffcb 	bl	800b5f0 <_malloc_r>
 800d65a:	b948      	cbnz	r0, 800d670 <__smakebuf_r+0x44>
 800d65c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d660:	059a      	lsls	r2, r3, #22
 800d662:	d4ef      	bmi.n	800d644 <__smakebuf_r+0x18>
 800d664:	f023 0303 	bic.w	r3, r3, #3
 800d668:	f043 0302 	orr.w	r3, r3, #2
 800d66c:	81a3      	strh	r3, [r4, #12]
 800d66e:	e7e3      	b.n	800d638 <__smakebuf_r+0xc>
 800d670:	4b0d      	ldr	r3, [pc, #52]	; (800d6a8 <__smakebuf_r+0x7c>)
 800d672:	62b3      	str	r3, [r6, #40]	; 0x28
 800d674:	89a3      	ldrh	r3, [r4, #12]
 800d676:	6020      	str	r0, [r4, #0]
 800d678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d67c:	81a3      	strh	r3, [r4, #12]
 800d67e:	9b00      	ldr	r3, [sp, #0]
 800d680:	6163      	str	r3, [r4, #20]
 800d682:	9b01      	ldr	r3, [sp, #4]
 800d684:	6120      	str	r0, [r4, #16]
 800d686:	b15b      	cbz	r3, 800d6a0 <__smakebuf_r+0x74>
 800d688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d68c:	4630      	mov	r0, r6
 800d68e:	f001 f96b 	bl	800e968 <_isatty_r>
 800d692:	b128      	cbz	r0, 800d6a0 <__smakebuf_r+0x74>
 800d694:	89a3      	ldrh	r3, [r4, #12]
 800d696:	f023 0303 	bic.w	r3, r3, #3
 800d69a:	f043 0301 	orr.w	r3, r3, #1
 800d69e:	81a3      	strh	r3, [r4, #12]
 800d6a0:	89a0      	ldrh	r0, [r4, #12]
 800d6a2:	4305      	orrs	r5, r0
 800d6a4:	81a5      	strh	r5, [r4, #12]
 800d6a6:	e7cd      	b.n	800d644 <__smakebuf_r+0x18>
 800d6a8:	0800d409 	.word	0x0800d409

0800d6ac <__malloc_lock>:
 800d6ac:	4801      	ldr	r0, [pc, #4]	; (800d6b4 <__malloc_lock+0x8>)
 800d6ae:	f7ff bf82 	b.w	800d5b6 <__retarget_lock_acquire_recursive>
 800d6b2:	bf00      	nop
 800d6b4:	20002620 	.word	0x20002620

0800d6b8 <__malloc_unlock>:
 800d6b8:	4801      	ldr	r0, [pc, #4]	; (800d6c0 <__malloc_unlock+0x8>)
 800d6ba:	f7ff bf7d 	b.w	800d5b8 <__retarget_lock_release_recursive>
 800d6be:	bf00      	nop
 800d6c0:	20002620 	.word	0x20002620

0800d6c4 <_Balloc>:
 800d6c4:	b570      	push	{r4, r5, r6, lr}
 800d6c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d6c8:	4604      	mov	r4, r0
 800d6ca:	460d      	mov	r5, r1
 800d6cc:	b976      	cbnz	r6, 800d6ec <_Balloc+0x28>
 800d6ce:	2010      	movs	r0, #16
 800d6d0:	f7fd fefc 	bl	800b4cc <malloc>
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	6260      	str	r0, [r4, #36]	; 0x24
 800d6d8:	b920      	cbnz	r0, 800d6e4 <_Balloc+0x20>
 800d6da:	4b18      	ldr	r3, [pc, #96]	; (800d73c <_Balloc+0x78>)
 800d6dc:	4818      	ldr	r0, [pc, #96]	; (800d740 <_Balloc+0x7c>)
 800d6de:	2166      	movs	r1, #102	; 0x66
 800d6e0:	f001 f900 	bl	800e8e4 <__assert_func>
 800d6e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6e8:	6006      	str	r6, [r0, #0]
 800d6ea:	60c6      	str	r6, [r0, #12]
 800d6ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d6ee:	68f3      	ldr	r3, [r6, #12]
 800d6f0:	b183      	cbz	r3, 800d714 <_Balloc+0x50>
 800d6f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6f4:	68db      	ldr	r3, [r3, #12]
 800d6f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6fa:	b9b8      	cbnz	r0, 800d72c <_Balloc+0x68>
 800d6fc:	2101      	movs	r1, #1
 800d6fe:	fa01 f605 	lsl.w	r6, r1, r5
 800d702:	1d72      	adds	r2, r6, #5
 800d704:	0092      	lsls	r2, r2, #2
 800d706:	4620      	mov	r0, r4
 800d708:	f000 fb60 	bl	800ddcc <_calloc_r>
 800d70c:	b160      	cbz	r0, 800d728 <_Balloc+0x64>
 800d70e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d712:	e00e      	b.n	800d732 <_Balloc+0x6e>
 800d714:	2221      	movs	r2, #33	; 0x21
 800d716:	2104      	movs	r1, #4
 800d718:	4620      	mov	r0, r4
 800d71a:	f000 fb57 	bl	800ddcc <_calloc_r>
 800d71e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d720:	60f0      	str	r0, [r6, #12]
 800d722:	68db      	ldr	r3, [r3, #12]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d1e4      	bne.n	800d6f2 <_Balloc+0x2e>
 800d728:	2000      	movs	r0, #0
 800d72a:	bd70      	pop	{r4, r5, r6, pc}
 800d72c:	6802      	ldr	r2, [r0, #0]
 800d72e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d732:	2300      	movs	r3, #0
 800d734:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d738:	e7f7      	b.n	800d72a <_Balloc+0x66>
 800d73a:	bf00      	nop
 800d73c:	0800ee94 	.word	0x0800ee94
 800d740:	0800ef78 	.word	0x0800ef78

0800d744 <_Bfree>:
 800d744:	b570      	push	{r4, r5, r6, lr}
 800d746:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d748:	4605      	mov	r5, r0
 800d74a:	460c      	mov	r4, r1
 800d74c:	b976      	cbnz	r6, 800d76c <_Bfree+0x28>
 800d74e:	2010      	movs	r0, #16
 800d750:	f7fd febc 	bl	800b4cc <malloc>
 800d754:	4602      	mov	r2, r0
 800d756:	6268      	str	r0, [r5, #36]	; 0x24
 800d758:	b920      	cbnz	r0, 800d764 <_Bfree+0x20>
 800d75a:	4b09      	ldr	r3, [pc, #36]	; (800d780 <_Bfree+0x3c>)
 800d75c:	4809      	ldr	r0, [pc, #36]	; (800d784 <_Bfree+0x40>)
 800d75e:	218a      	movs	r1, #138	; 0x8a
 800d760:	f001 f8c0 	bl	800e8e4 <__assert_func>
 800d764:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d768:	6006      	str	r6, [r0, #0]
 800d76a:	60c6      	str	r6, [r0, #12]
 800d76c:	b13c      	cbz	r4, 800d77e <_Bfree+0x3a>
 800d76e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d770:	6862      	ldr	r2, [r4, #4]
 800d772:	68db      	ldr	r3, [r3, #12]
 800d774:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d778:	6021      	str	r1, [r4, #0]
 800d77a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d77e:	bd70      	pop	{r4, r5, r6, pc}
 800d780:	0800ee94 	.word	0x0800ee94
 800d784:	0800ef78 	.word	0x0800ef78

0800d788 <__multadd>:
 800d788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d78c:	690d      	ldr	r5, [r1, #16]
 800d78e:	4607      	mov	r7, r0
 800d790:	460c      	mov	r4, r1
 800d792:	461e      	mov	r6, r3
 800d794:	f101 0c14 	add.w	ip, r1, #20
 800d798:	2000      	movs	r0, #0
 800d79a:	f8dc 3000 	ldr.w	r3, [ip]
 800d79e:	b299      	uxth	r1, r3
 800d7a0:	fb02 6101 	mla	r1, r2, r1, r6
 800d7a4:	0c1e      	lsrs	r6, r3, #16
 800d7a6:	0c0b      	lsrs	r3, r1, #16
 800d7a8:	fb02 3306 	mla	r3, r2, r6, r3
 800d7ac:	b289      	uxth	r1, r1
 800d7ae:	3001      	adds	r0, #1
 800d7b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7b4:	4285      	cmp	r5, r0
 800d7b6:	f84c 1b04 	str.w	r1, [ip], #4
 800d7ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7be:	dcec      	bgt.n	800d79a <__multadd+0x12>
 800d7c0:	b30e      	cbz	r6, 800d806 <__multadd+0x7e>
 800d7c2:	68a3      	ldr	r3, [r4, #8]
 800d7c4:	42ab      	cmp	r3, r5
 800d7c6:	dc19      	bgt.n	800d7fc <__multadd+0x74>
 800d7c8:	6861      	ldr	r1, [r4, #4]
 800d7ca:	4638      	mov	r0, r7
 800d7cc:	3101      	adds	r1, #1
 800d7ce:	f7ff ff79 	bl	800d6c4 <_Balloc>
 800d7d2:	4680      	mov	r8, r0
 800d7d4:	b928      	cbnz	r0, 800d7e2 <__multadd+0x5a>
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	4b0c      	ldr	r3, [pc, #48]	; (800d80c <__multadd+0x84>)
 800d7da:	480d      	ldr	r0, [pc, #52]	; (800d810 <__multadd+0x88>)
 800d7dc:	21b5      	movs	r1, #181	; 0xb5
 800d7de:	f001 f881 	bl	800e8e4 <__assert_func>
 800d7e2:	6922      	ldr	r2, [r4, #16]
 800d7e4:	3202      	adds	r2, #2
 800d7e6:	f104 010c 	add.w	r1, r4, #12
 800d7ea:	0092      	lsls	r2, r2, #2
 800d7ec:	300c      	adds	r0, #12
 800d7ee:	f7fd fe7d 	bl	800b4ec <memcpy>
 800d7f2:	4621      	mov	r1, r4
 800d7f4:	4638      	mov	r0, r7
 800d7f6:	f7ff ffa5 	bl	800d744 <_Bfree>
 800d7fa:	4644      	mov	r4, r8
 800d7fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d800:	3501      	adds	r5, #1
 800d802:	615e      	str	r6, [r3, #20]
 800d804:	6125      	str	r5, [r4, #16]
 800d806:	4620      	mov	r0, r4
 800d808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d80c:	0800ef06 	.word	0x0800ef06
 800d810:	0800ef78 	.word	0x0800ef78

0800d814 <__hi0bits>:
 800d814:	0c03      	lsrs	r3, r0, #16
 800d816:	041b      	lsls	r3, r3, #16
 800d818:	b9d3      	cbnz	r3, 800d850 <__hi0bits+0x3c>
 800d81a:	0400      	lsls	r0, r0, #16
 800d81c:	2310      	movs	r3, #16
 800d81e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d822:	bf04      	itt	eq
 800d824:	0200      	lsleq	r0, r0, #8
 800d826:	3308      	addeq	r3, #8
 800d828:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d82c:	bf04      	itt	eq
 800d82e:	0100      	lsleq	r0, r0, #4
 800d830:	3304      	addeq	r3, #4
 800d832:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d836:	bf04      	itt	eq
 800d838:	0080      	lsleq	r0, r0, #2
 800d83a:	3302      	addeq	r3, #2
 800d83c:	2800      	cmp	r0, #0
 800d83e:	db05      	blt.n	800d84c <__hi0bits+0x38>
 800d840:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d844:	f103 0301 	add.w	r3, r3, #1
 800d848:	bf08      	it	eq
 800d84a:	2320      	moveq	r3, #32
 800d84c:	4618      	mov	r0, r3
 800d84e:	4770      	bx	lr
 800d850:	2300      	movs	r3, #0
 800d852:	e7e4      	b.n	800d81e <__hi0bits+0xa>

0800d854 <__lo0bits>:
 800d854:	6803      	ldr	r3, [r0, #0]
 800d856:	f013 0207 	ands.w	r2, r3, #7
 800d85a:	4601      	mov	r1, r0
 800d85c:	d00b      	beq.n	800d876 <__lo0bits+0x22>
 800d85e:	07da      	lsls	r2, r3, #31
 800d860:	d423      	bmi.n	800d8aa <__lo0bits+0x56>
 800d862:	0798      	lsls	r0, r3, #30
 800d864:	bf49      	itett	mi
 800d866:	085b      	lsrmi	r3, r3, #1
 800d868:	089b      	lsrpl	r3, r3, #2
 800d86a:	2001      	movmi	r0, #1
 800d86c:	600b      	strmi	r3, [r1, #0]
 800d86e:	bf5c      	itt	pl
 800d870:	600b      	strpl	r3, [r1, #0]
 800d872:	2002      	movpl	r0, #2
 800d874:	4770      	bx	lr
 800d876:	b298      	uxth	r0, r3
 800d878:	b9a8      	cbnz	r0, 800d8a6 <__lo0bits+0x52>
 800d87a:	0c1b      	lsrs	r3, r3, #16
 800d87c:	2010      	movs	r0, #16
 800d87e:	b2da      	uxtb	r2, r3
 800d880:	b90a      	cbnz	r2, 800d886 <__lo0bits+0x32>
 800d882:	3008      	adds	r0, #8
 800d884:	0a1b      	lsrs	r3, r3, #8
 800d886:	071a      	lsls	r2, r3, #28
 800d888:	bf04      	itt	eq
 800d88a:	091b      	lsreq	r3, r3, #4
 800d88c:	3004      	addeq	r0, #4
 800d88e:	079a      	lsls	r2, r3, #30
 800d890:	bf04      	itt	eq
 800d892:	089b      	lsreq	r3, r3, #2
 800d894:	3002      	addeq	r0, #2
 800d896:	07da      	lsls	r2, r3, #31
 800d898:	d403      	bmi.n	800d8a2 <__lo0bits+0x4e>
 800d89a:	085b      	lsrs	r3, r3, #1
 800d89c:	f100 0001 	add.w	r0, r0, #1
 800d8a0:	d005      	beq.n	800d8ae <__lo0bits+0x5a>
 800d8a2:	600b      	str	r3, [r1, #0]
 800d8a4:	4770      	bx	lr
 800d8a6:	4610      	mov	r0, r2
 800d8a8:	e7e9      	b.n	800d87e <__lo0bits+0x2a>
 800d8aa:	2000      	movs	r0, #0
 800d8ac:	4770      	bx	lr
 800d8ae:	2020      	movs	r0, #32
 800d8b0:	4770      	bx	lr
	...

0800d8b4 <__i2b>:
 800d8b4:	b510      	push	{r4, lr}
 800d8b6:	460c      	mov	r4, r1
 800d8b8:	2101      	movs	r1, #1
 800d8ba:	f7ff ff03 	bl	800d6c4 <_Balloc>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	b928      	cbnz	r0, 800d8ce <__i2b+0x1a>
 800d8c2:	4b05      	ldr	r3, [pc, #20]	; (800d8d8 <__i2b+0x24>)
 800d8c4:	4805      	ldr	r0, [pc, #20]	; (800d8dc <__i2b+0x28>)
 800d8c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d8ca:	f001 f80b 	bl	800e8e4 <__assert_func>
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	6144      	str	r4, [r0, #20]
 800d8d2:	6103      	str	r3, [r0, #16]
 800d8d4:	bd10      	pop	{r4, pc}
 800d8d6:	bf00      	nop
 800d8d8:	0800ef06 	.word	0x0800ef06
 800d8dc:	0800ef78 	.word	0x0800ef78

0800d8e0 <__multiply>:
 800d8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e4:	4691      	mov	r9, r2
 800d8e6:	690a      	ldr	r2, [r1, #16]
 800d8e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	bfb8      	it	lt
 800d8f0:	460b      	movlt	r3, r1
 800d8f2:	460c      	mov	r4, r1
 800d8f4:	bfbc      	itt	lt
 800d8f6:	464c      	movlt	r4, r9
 800d8f8:	4699      	movlt	r9, r3
 800d8fa:	6927      	ldr	r7, [r4, #16]
 800d8fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d900:	68a3      	ldr	r3, [r4, #8]
 800d902:	6861      	ldr	r1, [r4, #4]
 800d904:	eb07 060a 	add.w	r6, r7, sl
 800d908:	42b3      	cmp	r3, r6
 800d90a:	b085      	sub	sp, #20
 800d90c:	bfb8      	it	lt
 800d90e:	3101      	addlt	r1, #1
 800d910:	f7ff fed8 	bl	800d6c4 <_Balloc>
 800d914:	b930      	cbnz	r0, 800d924 <__multiply+0x44>
 800d916:	4602      	mov	r2, r0
 800d918:	4b44      	ldr	r3, [pc, #272]	; (800da2c <__multiply+0x14c>)
 800d91a:	4845      	ldr	r0, [pc, #276]	; (800da30 <__multiply+0x150>)
 800d91c:	f240 115d 	movw	r1, #349	; 0x15d
 800d920:	f000 ffe0 	bl	800e8e4 <__assert_func>
 800d924:	f100 0514 	add.w	r5, r0, #20
 800d928:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d92c:	462b      	mov	r3, r5
 800d92e:	2200      	movs	r2, #0
 800d930:	4543      	cmp	r3, r8
 800d932:	d321      	bcc.n	800d978 <__multiply+0x98>
 800d934:	f104 0314 	add.w	r3, r4, #20
 800d938:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d93c:	f109 0314 	add.w	r3, r9, #20
 800d940:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d944:	9202      	str	r2, [sp, #8]
 800d946:	1b3a      	subs	r2, r7, r4
 800d948:	3a15      	subs	r2, #21
 800d94a:	f022 0203 	bic.w	r2, r2, #3
 800d94e:	3204      	adds	r2, #4
 800d950:	f104 0115 	add.w	r1, r4, #21
 800d954:	428f      	cmp	r7, r1
 800d956:	bf38      	it	cc
 800d958:	2204      	movcc	r2, #4
 800d95a:	9201      	str	r2, [sp, #4]
 800d95c:	9a02      	ldr	r2, [sp, #8]
 800d95e:	9303      	str	r3, [sp, #12]
 800d960:	429a      	cmp	r2, r3
 800d962:	d80c      	bhi.n	800d97e <__multiply+0x9e>
 800d964:	2e00      	cmp	r6, #0
 800d966:	dd03      	ble.n	800d970 <__multiply+0x90>
 800d968:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d05a      	beq.n	800da26 <__multiply+0x146>
 800d970:	6106      	str	r6, [r0, #16]
 800d972:	b005      	add	sp, #20
 800d974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d978:	f843 2b04 	str.w	r2, [r3], #4
 800d97c:	e7d8      	b.n	800d930 <__multiply+0x50>
 800d97e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d982:	f1ba 0f00 	cmp.w	sl, #0
 800d986:	d024      	beq.n	800d9d2 <__multiply+0xf2>
 800d988:	f104 0e14 	add.w	lr, r4, #20
 800d98c:	46a9      	mov	r9, r5
 800d98e:	f04f 0c00 	mov.w	ip, #0
 800d992:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d996:	f8d9 1000 	ldr.w	r1, [r9]
 800d99a:	fa1f fb82 	uxth.w	fp, r2
 800d99e:	b289      	uxth	r1, r1
 800d9a0:	fb0a 110b 	mla	r1, sl, fp, r1
 800d9a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d9a8:	f8d9 2000 	ldr.w	r2, [r9]
 800d9ac:	4461      	add	r1, ip
 800d9ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d9b2:	fb0a c20b 	mla	r2, sl, fp, ip
 800d9b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d9ba:	b289      	uxth	r1, r1
 800d9bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d9c0:	4577      	cmp	r7, lr
 800d9c2:	f849 1b04 	str.w	r1, [r9], #4
 800d9c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d9ca:	d8e2      	bhi.n	800d992 <__multiply+0xb2>
 800d9cc:	9a01      	ldr	r2, [sp, #4]
 800d9ce:	f845 c002 	str.w	ip, [r5, r2]
 800d9d2:	9a03      	ldr	r2, [sp, #12]
 800d9d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d9d8:	3304      	adds	r3, #4
 800d9da:	f1b9 0f00 	cmp.w	r9, #0
 800d9de:	d020      	beq.n	800da22 <__multiply+0x142>
 800d9e0:	6829      	ldr	r1, [r5, #0]
 800d9e2:	f104 0c14 	add.w	ip, r4, #20
 800d9e6:	46ae      	mov	lr, r5
 800d9e8:	f04f 0a00 	mov.w	sl, #0
 800d9ec:	f8bc b000 	ldrh.w	fp, [ip]
 800d9f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d9f4:	fb09 220b 	mla	r2, r9, fp, r2
 800d9f8:	4492      	add	sl, r2
 800d9fa:	b289      	uxth	r1, r1
 800d9fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800da00:	f84e 1b04 	str.w	r1, [lr], #4
 800da04:	f85c 2b04 	ldr.w	r2, [ip], #4
 800da08:	f8be 1000 	ldrh.w	r1, [lr]
 800da0c:	0c12      	lsrs	r2, r2, #16
 800da0e:	fb09 1102 	mla	r1, r9, r2, r1
 800da12:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800da16:	4567      	cmp	r7, ip
 800da18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800da1c:	d8e6      	bhi.n	800d9ec <__multiply+0x10c>
 800da1e:	9a01      	ldr	r2, [sp, #4]
 800da20:	50a9      	str	r1, [r5, r2]
 800da22:	3504      	adds	r5, #4
 800da24:	e79a      	b.n	800d95c <__multiply+0x7c>
 800da26:	3e01      	subs	r6, #1
 800da28:	e79c      	b.n	800d964 <__multiply+0x84>
 800da2a:	bf00      	nop
 800da2c:	0800ef06 	.word	0x0800ef06
 800da30:	0800ef78 	.word	0x0800ef78

0800da34 <__pow5mult>:
 800da34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da38:	4615      	mov	r5, r2
 800da3a:	f012 0203 	ands.w	r2, r2, #3
 800da3e:	4606      	mov	r6, r0
 800da40:	460f      	mov	r7, r1
 800da42:	d007      	beq.n	800da54 <__pow5mult+0x20>
 800da44:	4c25      	ldr	r4, [pc, #148]	; (800dadc <__pow5mult+0xa8>)
 800da46:	3a01      	subs	r2, #1
 800da48:	2300      	movs	r3, #0
 800da4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da4e:	f7ff fe9b 	bl	800d788 <__multadd>
 800da52:	4607      	mov	r7, r0
 800da54:	10ad      	asrs	r5, r5, #2
 800da56:	d03d      	beq.n	800dad4 <__pow5mult+0xa0>
 800da58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800da5a:	b97c      	cbnz	r4, 800da7c <__pow5mult+0x48>
 800da5c:	2010      	movs	r0, #16
 800da5e:	f7fd fd35 	bl	800b4cc <malloc>
 800da62:	4602      	mov	r2, r0
 800da64:	6270      	str	r0, [r6, #36]	; 0x24
 800da66:	b928      	cbnz	r0, 800da74 <__pow5mult+0x40>
 800da68:	4b1d      	ldr	r3, [pc, #116]	; (800dae0 <__pow5mult+0xac>)
 800da6a:	481e      	ldr	r0, [pc, #120]	; (800dae4 <__pow5mult+0xb0>)
 800da6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800da70:	f000 ff38 	bl	800e8e4 <__assert_func>
 800da74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da78:	6004      	str	r4, [r0, #0]
 800da7a:	60c4      	str	r4, [r0, #12]
 800da7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800da80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da84:	b94c      	cbnz	r4, 800da9a <__pow5mult+0x66>
 800da86:	f240 2171 	movw	r1, #625	; 0x271
 800da8a:	4630      	mov	r0, r6
 800da8c:	f7ff ff12 	bl	800d8b4 <__i2b>
 800da90:	2300      	movs	r3, #0
 800da92:	f8c8 0008 	str.w	r0, [r8, #8]
 800da96:	4604      	mov	r4, r0
 800da98:	6003      	str	r3, [r0, #0]
 800da9a:	f04f 0900 	mov.w	r9, #0
 800da9e:	07eb      	lsls	r3, r5, #31
 800daa0:	d50a      	bpl.n	800dab8 <__pow5mult+0x84>
 800daa2:	4639      	mov	r1, r7
 800daa4:	4622      	mov	r2, r4
 800daa6:	4630      	mov	r0, r6
 800daa8:	f7ff ff1a 	bl	800d8e0 <__multiply>
 800daac:	4639      	mov	r1, r7
 800daae:	4680      	mov	r8, r0
 800dab0:	4630      	mov	r0, r6
 800dab2:	f7ff fe47 	bl	800d744 <_Bfree>
 800dab6:	4647      	mov	r7, r8
 800dab8:	106d      	asrs	r5, r5, #1
 800daba:	d00b      	beq.n	800dad4 <__pow5mult+0xa0>
 800dabc:	6820      	ldr	r0, [r4, #0]
 800dabe:	b938      	cbnz	r0, 800dad0 <__pow5mult+0x9c>
 800dac0:	4622      	mov	r2, r4
 800dac2:	4621      	mov	r1, r4
 800dac4:	4630      	mov	r0, r6
 800dac6:	f7ff ff0b 	bl	800d8e0 <__multiply>
 800daca:	6020      	str	r0, [r4, #0]
 800dacc:	f8c0 9000 	str.w	r9, [r0]
 800dad0:	4604      	mov	r4, r0
 800dad2:	e7e4      	b.n	800da9e <__pow5mult+0x6a>
 800dad4:	4638      	mov	r0, r7
 800dad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dada:	bf00      	nop
 800dadc:	0800f0c8 	.word	0x0800f0c8
 800dae0:	0800ee94 	.word	0x0800ee94
 800dae4:	0800ef78 	.word	0x0800ef78

0800dae8 <__lshift>:
 800dae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daec:	460c      	mov	r4, r1
 800daee:	6849      	ldr	r1, [r1, #4]
 800daf0:	6923      	ldr	r3, [r4, #16]
 800daf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800daf6:	68a3      	ldr	r3, [r4, #8]
 800daf8:	4607      	mov	r7, r0
 800dafa:	4691      	mov	r9, r2
 800dafc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db00:	f108 0601 	add.w	r6, r8, #1
 800db04:	42b3      	cmp	r3, r6
 800db06:	db0b      	blt.n	800db20 <__lshift+0x38>
 800db08:	4638      	mov	r0, r7
 800db0a:	f7ff fddb 	bl	800d6c4 <_Balloc>
 800db0e:	4605      	mov	r5, r0
 800db10:	b948      	cbnz	r0, 800db26 <__lshift+0x3e>
 800db12:	4602      	mov	r2, r0
 800db14:	4b2a      	ldr	r3, [pc, #168]	; (800dbc0 <__lshift+0xd8>)
 800db16:	482b      	ldr	r0, [pc, #172]	; (800dbc4 <__lshift+0xdc>)
 800db18:	f240 11d9 	movw	r1, #473	; 0x1d9
 800db1c:	f000 fee2 	bl	800e8e4 <__assert_func>
 800db20:	3101      	adds	r1, #1
 800db22:	005b      	lsls	r3, r3, #1
 800db24:	e7ee      	b.n	800db04 <__lshift+0x1c>
 800db26:	2300      	movs	r3, #0
 800db28:	f100 0114 	add.w	r1, r0, #20
 800db2c:	f100 0210 	add.w	r2, r0, #16
 800db30:	4618      	mov	r0, r3
 800db32:	4553      	cmp	r3, sl
 800db34:	db37      	blt.n	800dba6 <__lshift+0xbe>
 800db36:	6920      	ldr	r0, [r4, #16]
 800db38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db3c:	f104 0314 	add.w	r3, r4, #20
 800db40:	f019 091f 	ands.w	r9, r9, #31
 800db44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800db4c:	d02f      	beq.n	800dbae <__lshift+0xc6>
 800db4e:	f1c9 0e20 	rsb	lr, r9, #32
 800db52:	468a      	mov	sl, r1
 800db54:	f04f 0c00 	mov.w	ip, #0
 800db58:	681a      	ldr	r2, [r3, #0]
 800db5a:	fa02 f209 	lsl.w	r2, r2, r9
 800db5e:	ea42 020c 	orr.w	r2, r2, ip
 800db62:	f84a 2b04 	str.w	r2, [sl], #4
 800db66:	f853 2b04 	ldr.w	r2, [r3], #4
 800db6a:	4298      	cmp	r0, r3
 800db6c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800db70:	d8f2      	bhi.n	800db58 <__lshift+0x70>
 800db72:	1b03      	subs	r3, r0, r4
 800db74:	3b15      	subs	r3, #21
 800db76:	f023 0303 	bic.w	r3, r3, #3
 800db7a:	3304      	adds	r3, #4
 800db7c:	f104 0215 	add.w	r2, r4, #21
 800db80:	4290      	cmp	r0, r2
 800db82:	bf38      	it	cc
 800db84:	2304      	movcc	r3, #4
 800db86:	f841 c003 	str.w	ip, [r1, r3]
 800db8a:	f1bc 0f00 	cmp.w	ip, #0
 800db8e:	d001      	beq.n	800db94 <__lshift+0xac>
 800db90:	f108 0602 	add.w	r6, r8, #2
 800db94:	3e01      	subs	r6, #1
 800db96:	4638      	mov	r0, r7
 800db98:	612e      	str	r6, [r5, #16]
 800db9a:	4621      	mov	r1, r4
 800db9c:	f7ff fdd2 	bl	800d744 <_Bfree>
 800dba0:	4628      	mov	r0, r5
 800dba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dba6:	f842 0f04 	str.w	r0, [r2, #4]!
 800dbaa:	3301      	adds	r3, #1
 800dbac:	e7c1      	b.n	800db32 <__lshift+0x4a>
 800dbae:	3904      	subs	r1, #4
 800dbb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbb4:	f841 2f04 	str.w	r2, [r1, #4]!
 800dbb8:	4298      	cmp	r0, r3
 800dbba:	d8f9      	bhi.n	800dbb0 <__lshift+0xc8>
 800dbbc:	e7ea      	b.n	800db94 <__lshift+0xac>
 800dbbe:	bf00      	nop
 800dbc0:	0800ef06 	.word	0x0800ef06
 800dbc4:	0800ef78 	.word	0x0800ef78

0800dbc8 <__mcmp>:
 800dbc8:	b530      	push	{r4, r5, lr}
 800dbca:	6902      	ldr	r2, [r0, #16]
 800dbcc:	690c      	ldr	r4, [r1, #16]
 800dbce:	1b12      	subs	r2, r2, r4
 800dbd0:	d10e      	bne.n	800dbf0 <__mcmp+0x28>
 800dbd2:	f100 0314 	add.w	r3, r0, #20
 800dbd6:	3114      	adds	r1, #20
 800dbd8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dbdc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dbe0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dbe4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dbe8:	42a5      	cmp	r5, r4
 800dbea:	d003      	beq.n	800dbf4 <__mcmp+0x2c>
 800dbec:	d305      	bcc.n	800dbfa <__mcmp+0x32>
 800dbee:	2201      	movs	r2, #1
 800dbf0:	4610      	mov	r0, r2
 800dbf2:	bd30      	pop	{r4, r5, pc}
 800dbf4:	4283      	cmp	r3, r0
 800dbf6:	d3f3      	bcc.n	800dbe0 <__mcmp+0x18>
 800dbf8:	e7fa      	b.n	800dbf0 <__mcmp+0x28>
 800dbfa:	f04f 32ff 	mov.w	r2, #4294967295
 800dbfe:	e7f7      	b.n	800dbf0 <__mcmp+0x28>

0800dc00 <__mdiff>:
 800dc00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc04:	460c      	mov	r4, r1
 800dc06:	4606      	mov	r6, r0
 800dc08:	4611      	mov	r1, r2
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	4690      	mov	r8, r2
 800dc0e:	f7ff ffdb 	bl	800dbc8 <__mcmp>
 800dc12:	1e05      	subs	r5, r0, #0
 800dc14:	d110      	bne.n	800dc38 <__mdiff+0x38>
 800dc16:	4629      	mov	r1, r5
 800dc18:	4630      	mov	r0, r6
 800dc1a:	f7ff fd53 	bl	800d6c4 <_Balloc>
 800dc1e:	b930      	cbnz	r0, 800dc2e <__mdiff+0x2e>
 800dc20:	4b3a      	ldr	r3, [pc, #232]	; (800dd0c <__mdiff+0x10c>)
 800dc22:	4602      	mov	r2, r0
 800dc24:	f240 2132 	movw	r1, #562	; 0x232
 800dc28:	4839      	ldr	r0, [pc, #228]	; (800dd10 <__mdiff+0x110>)
 800dc2a:	f000 fe5b 	bl	800e8e4 <__assert_func>
 800dc2e:	2301      	movs	r3, #1
 800dc30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc38:	bfa4      	itt	ge
 800dc3a:	4643      	movge	r3, r8
 800dc3c:	46a0      	movge	r8, r4
 800dc3e:	4630      	mov	r0, r6
 800dc40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dc44:	bfa6      	itte	ge
 800dc46:	461c      	movge	r4, r3
 800dc48:	2500      	movge	r5, #0
 800dc4a:	2501      	movlt	r5, #1
 800dc4c:	f7ff fd3a 	bl	800d6c4 <_Balloc>
 800dc50:	b920      	cbnz	r0, 800dc5c <__mdiff+0x5c>
 800dc52:	4b2e      	ldr	r3, [pc, #184]	; (800dd0c <__mdiff+0x10c>)
 800dc54:	4602      	mov	r2, r0
 800dc56:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dc5a:	e7e5      	b.n	800dc28 <__mdiff+0x28>
 800dc5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dc60:	6926      	ldr	r6, [r4, #16]
 800dc62:	60c5      	str	r5, [r0, #12]
 800dc64:	f104 0914 	add.w	r9, r4, #20
 800dc68:	f108 0514 	add.w	r5, r8, #20
 800dc6c:	f100 0e14 	add.w	lr, r0, #20
 800dc70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dc74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dc78:	f108 0210 	add.w	r2, r8, #16
 800dc7c:	46f2      	mov	sl, lr
 800dc7e:	2100      	movs	r1, #0
 800dc80:	f859 3b04 	ldr.w	r3, [r9], #4
 800dc84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dc88:	fa1f f883 	uxth.w	r8, r3
 800dc8c:	fa11 f18b 	uxtah	r1, r1, fp
 800dc90:	0c1b      	lsrs	r3, r3, #16
 800dc92:	eba1 0808 	sub.w	r8, r1, r8
 800dc96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dc9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dc9e:	fa1f f888 	uxth.w	r8, r8
 800dca2:	1419      	asrs	r1, r3, #16
 800dca4:	454e      	cmp	r6, r9
 800dca6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dcaa:	f84a 3b04 	str.w	r3, [sl], #4
 800dcae:	d8e7      	bhi.n	800dc80 <__mdiff+0x80>
 800dcb0:	1b33      	subs	r3, r6, r4
 800dcb2:	3b15      	subs	r3, #21
 800dcb4:	f023 0303 	bic.w	r3, r3, #3
 800dcb8:	3304      	adds	r3, #4
 800dcba:	3415      	adds	r4, #21
 800dcbc:	42a6      	cmp	r6, r4
 800dcbe:	bf38      	it	cc
 800dcc0:	2304      	movcc	r3, #4
 800dcc2:	441d      	add	r5, r3
 800dcc4:	4473      	add	r3, lr
 800dcc6:	469e      	mov	lr, r3
 800dcc8:	462e      	mov	r6, r5
 800dcca:	4566      	cmp	r6, ip
 800dccc:	d30e      	bcc.n	800dcec <__mdiff+0xec>
 800dcce:	f10c 0203 	add.w	r2, ip, #3
 800dcd2:	1b52      	subs	r2, r2, r5
 800dcd4:	f022 0203 	bic.w	r2, r2, #3
 800dcd8:	3d03      	subs	r5, #3
 800dcda:	45ac      	cmp	ip, r5
 800dcdc:	bf38      	it	cc
 800dcde:	2200      	movcc	r2, #0
 800dce0:	441a      	add	r2, r3
 800dce2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dce6:	b17b      	cbz	r3, 800dd08 <__mdiff+0x108>
 800dce8:	6107      	str	r7, [r0, #16]
 800dcea:	e7a3      	b.n	800dc34 <__mdiff+0x34>
 800dcec:	f856 8b04 	ldr.w	r8, [r6], #4
 800dcf0:	fa11 f288 	uxtah	r2, r1, r8
 800dcf4:	1414      	asrs	r4, r2, #16
 800dcf6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dcfa:	b292      	uxth	r2, r2
 800dcfc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dd00:	f84e 2b04 	str.w	r2, [lr], #4
 800dd04:	1421      	asrs	r1, r4, #16
 800dd06:	e7e0      	b.n	800dcca <__mdiff+0xca>
 800dd08:	3f01      	subs	r7, #1
 800dd0a:	e7ea      	b.n	800dce2 <__mdiff+0xe2>
 800dd0c:	0800ef06 	.word	0x0800ef06
 800dd10:	0800ef78 	.word	0x0800ef78

0800dd14 <__d2b>:
 800dd14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd18:	4689      	mov	r9, r1
 800dd1a:	2101      	movs	r1, #1
 800dd1c:	ec57 6b10 	vmov	r6, r7, d0
 800dd20:	4690      	mov	r8, r2
 800dd22:	f7ff fccf 	bl	800d6c4 <_Balloc>
 800dd26:	4604      	mov	r4, r0
 800dd28:	b930      	cbnz	r0, 800dd38 <__d2b+0x24>
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	4b25      	ldr	r3, [pc, #148]	; (800ddc4 <__d2b+0xb0>)
 800dd2e:	4826      	ldr	r0, [pc, #152]	; (800ddc8 <__d2b+0xb4>)
 800dd30:	f240 310a 	movw	r1, #778	; 0x30a
 800dd34:	f000 fdd6 	bl	800e8e4 <__assert_func>
 800dd38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dd3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd40:	bb35      	cbnz	r5, 800dd90 <__d2b+0x7c>
 800dd42:	2e00      	cmp	r6, #0
 800dd44:	9301      	str	r3, [sp, #4]
 800dd46:	d028      	beq.n	800dd9a <__d2b+0x86>
 800dd48:	4668      	mov	r0, sp
 800dd4a:	9600      	str	r6, [sp, #0]
 800dd4c:	f7ff fd82 	bl	800d854 <__lo0bits>
 800dd50:	9900      	ldr	r1, [sp, #0]
 800dd52:	b300      	cbz	r0, 800dd96 <__d2b+0x82>
 800dd54:	9a01      	ldr	r2, [sp, #4]
 800dd56:	f1c0 0320 	rsb	r3, r0, #32
 800dd5a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd5e:	430b      	orrs	r3, r1
 800dd60:	40c2      	lsrs	r2, r0
 800dd62:	6163      	str	r3, [r4, #20]
 800dd64:	9201      	str	r2, [sp, #4]
 800dd66:	9b01      	ldr	r3, [sp, #4]
 800dd68:	61a3      	str	r3, [r4, #24]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	bf14      	ite	ne
 800dd6e:	2202      	movne	r2, #2
 800dd70:	2201      	moveq	r2, #1
 800dd72:	6122      	str	r2, [r4, #16]
 800dd74:	b1d5      	cbz	r5, 800ddac <__d2b+0x98>
 800dd76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dd7a:	4405      	add	r5, r0
 800dd7c:	f8c9 5000 	str.w	r5, [r9]
 800dd80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dd84:	f8c8 0000 	str.w	r0, [r8]
 800dd88:	4620      	mov	r0, r4
 800dd8a:	b003      	add	sp, #12
 800dd8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd94:	e7d5      	b.n	800dd42 <__d2b+0x2e>
 800dd96:	6161      	str	r1, [r4, #20]
 800dd98:	e7e5      	b.n	800dd66 <__d2b+0x52>
 800dd9a:	a801      	add	r0, sp, #4
 800dd9c:	f7ff fd5a 	bl	800d854 <__lo0bits>
 800dda0:	9b01      	ldr	r3, [sp, #4]
 800dda2:	6163      	str	r3, [r4, #20]
 800dda4:	2201      	movs	r2, #1
 800dda6:	6122      	str	r2, [r4, #16]
 800dda8:	3020      	adds	r0, #32
 800ddaa:	e7e3      	b.n	800dd74 <__d2b+0x60>
 800ddac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ddb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ddb4:	f8c9 0000 	str.w	r0, [r9]
 800ddb8:	6918      	ldr	r0, [r3, #16]
 800ddba:	f7ff fd2b 	bl	800d814 <__hi0bits>
 800ddbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ddc2:	e7df      	b.n	800dd84 <__d2b+0x70>
 800ddc4:	0800ef06 	.word	0x0800ef06
 800ddc8:	0800ef78 	.word	0x0800ef78

0800ddcc <_calloc_r>:
 800ddcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddce:	fba1 2402 	umull	r2, r4, r1, r2
 800ddd2:	b94c      	cbnz	r4, 800dde8 <_calloc_r+0x1c>
 800ddd4:	4611      	mov	r1, r2
 800ddd6:	9201      	str	r2, [sp, #4]
 800ddd8:	f7fd fc0a 	bl	800b5f0 <_malloc_r>
 800dddc:	9a01      	ldr	r2, [sp, #4]
 800ddde:	4605      	mov	r5, r0
 800dde0:	b930      	cbnz	r0, 800ddf0 <_calloc_r+0x24>
 800dde2:	4628      	mov	r0, r5
 800dde4:	b003      	add	sp, #12
 800dde6:	bd30      	pop	{r4, r5, pc}
 800dde8:	220c      	movs	r2, #12
 800ddea:	6002      	str	r2, [r0, #0]
 800ddec:	2500      	movs	r5, #0
 800ddee:	e7f8      	b.n	800dde2 <_calloc_r+0x16>
 800ddf0:	4621      	mov	r1, r4
 800ddf2:	f7fd fb89 	bl	800b508 <memset>
 800ddf6:	e7f4      	b.n	800dde2 <_calloc_r+0x16>

0800ddf8 <_sungetc_r>:
 800ddf8:	b538      	push	{r3, r4, r5, lr}
 800ddfa:	1c4b      	adds	r3, r1, #1
 800ddfc:	4614      	mov	r4, r2
 800ddfe:	d103      	bne.n	800de08 <_sungetc_r+0x10>
 800de00:	f04f 35ff 	mov.w	r5, #4294967295
 800de04:	4628      	mov	r0, r5
 800de06:	bd38      	pop	{r3, r4, r5, pc}
 800de08:	8993      	ldrh	r3, [r2, #12]
 800de0a:	f023 0320 	bic.w	r3, r3, #32
 800de0e:	8193      	strh	r3, [r2, #12]
 800de10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de12:	6852      	ldr	r2, [r2, #4]
 800de14:	b2cd      	uxtb	r5, r1
 800de16:	b18b      	cbz	r3, 800de3c <_sungetc_r+0x44>
 800de18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de1a:	4293      	cmp	r3, r2
 800de1c:	dd08      	ble.n	800de30 <_sungetc_r+0x38>
 800de1e:	6823      	ldr	r3, [r4, #0]
 800de20:	1e5a      	subs	r2, r3, #1
 800de22:	6022      	str	r2, [r4, #0]
 800de24:	f803 5c01 	strb.w	r5, [r3, #-1]
 800de28:	6863      	ldr	r3, [r4, #4]
 800de2a:	3301      	adds	r3, #1
 800de2c:	6063      	str	r3, [r4, #4]
 800de2e:	e7e9      	b.n	800de04 <_sungetc_r+0xc>
 800de30:	4621      	mov	r1, r4
 800de32:	f000 fd1d 	bl	800e870 <__submore>
 800de36:	2800      	cmp	r0, #0
 800de38:	d0f1      	beq.n	800de1e <_sungetc_r+0x26>
 800de3a:	e7e1      	b.n	800de00 <_sungetc_r+0x8>
 800de3c:	6921      	ldr	r1, [r4, #16]
 800de3e:	6823      	ldr	r3, [r4, #0]
 800de40:	b151      	cbz	r1, 800de58 <_sungetc_r+0x60>
 800de42:	4299      	cmp	r1, r3
 800de44:	d208      	bcs.n	800de58 <_sungetc_r+0x60>
 800de46:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800de4a:	42a9      	cmp	r1, r5
 800de4c:	d104      	bne.n	800de58 <_sungetc_r+0x60>
 800de4e:	3b01      	subs	r3, #1
 800de50:	3201      	adds	r2, #1
 800de52:	6023      	str	r3, [r4, #0]
 800de54:	6062      	str	r2, [r4, #4]
 800de56:	e7d5      	b.n	800de04 <_sungetc_r+0xc>
 800de58:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800de5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de60:	6363      	str	r3, [r4, #52]	; 0x34
 800de62:	2303      	movs	r3, #3
 800de64:	63a3      	str	r3, [r4, #56]	; 0x38
 800de66:	4623      	mov	r3, r4
 800de68:	f803 5f46 	strb.w	r5, [r3, #70]!
 800de6c:	6023      	str	r3, [r4, #0]
 800de6e:	2301      	movs	r3, #1
 800de70:	e7dc      	b.n	800de2c <_sungetc_r+0x34>

0800de72 <__ssrefill_r>:
 800de72:	b510      	push	{r4, lr}
 800de74:	460c      	mov	r4, r1
 800de76:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800de78:	b169      	cbz	r1, 800de96 <__ssrefill_r+0x24>
 800de7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de7e:	4299      	cmp	r1, r3
 800de80:	d001      	beq.n	800de86 <__ssrefill_r+0x14>
 800de82:	f7fd fb49 	bl	800b518 <_free_r>
 800de86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de88:	6063      	str	r3, [r4, #4]
 800de8a:	2000      	movs	r0, #0
 800de8c:	6360      	str	r0, [r4, #52]	; 0x34
 800de8e:	b113      	cbz	r3, 800de96 <__ssrefill_r+0x24>
 800de90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800de92:	6023      	str	r3, [r4, #0]
 800de94:	bd10      	pop	{r4, pc}
 800de96:	6923      	ldr	r3, [r4, #16]
 800de98:	6023      	str	r3, [r4, #0]
 800de9a:	2300      	movs	r3, #0
 800de9c:	6063      	str	r3, [r4, #4]
 800de9e:	89a3      	ldrh	r3, [r4, #12]
 800dea0:	f043 0320 	orr.w	r3, r3, #32
 800dea4:	81a3      	strh	r3, [r4, #12]
 800dea6:	f04f 30ff 	mov.w	r0, #4294967295
 800deaa:	e7f3      	b.n	800de94 <__ssrefill_r+0x22>

0800deac <__ssvfiscanf_r>:
 800deac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800deb0:	460c      	mov	r4, r1
 800deb2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800deb6:	2100      	movs	r1, #0
 800deb8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800debc:	49a6      	ldr	r1, [pc, #664]	; (800e158 <__ssvfiscanf_r+0x2ac>)
 800debe:	91a0      	str	r1, [sp, #640]	; 0x280
 800dec0:	f10d 0804 	add.w	r8, sp, #4
 800dec4:	49a5      	ldr	r1, [pc, #660]	; (800e15c <__ssvfiscanf_r+0x2b0>)
 800dec6:	4fa6      	ldr	r7, [pc, #664]	; (800e160 <__ssvfiscanf_r+0x2b4>)
 800dec8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e164 <__ssvfiscanf_r+0x2b8>
 800decc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ded0:	4606      	mov	r6, r0
 800ded2:	91a1      	str	r1, [sp, #644]	; 0x284
 800ded4:	9300      	str	r3, [sp, #0]
 800ded6:	7813      	ldrb	r3, [r2, #0]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	f000 815a 	beq.w	800e192 <__ssvfiscanf_r+0x2e6>
 800dede:	5dd9      	ldrb	r1, [r3, r7]
 800dee0:	f011 0108 	ands.w	r1, r1, #8
 800dee4:	f102 0501 	add.w	r5, r2, #1
 800dee8:	d019      	beq.n	800df1e <__ssvfiscanf_r+0x72>
 800deea:	6863      	ldr	r3, [r4, #4]
 800deec:	2b00      	cmp	r3, #0
 800deee:	dd0f      	ble.n	800df10 <__ssvfiscanf_r+0x64>
 800def0:	6823      	ldr	r3, [r4, #0]
 800def2:	781a      	ldrb	r2, [r3, #0]
 800def4:	5cba      	ldrb	r2, [r7, r2]
 800def6:	0712      	lsls	r2, r2, #28
 800def8:	d401      	bmi.n	800defe <__ssvfiscanf_r+0x52>
 800defa:	462a      	mov	r2, r5
 800defc:	e7eb      	b.n	800ded6 <__ssvfiscanf_r+0x2a>
 800defe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800df00:	3201      	adds	r2, #1
 800df02:	9245      	str	r2, [sp, #276]	; 0x114
 800df04:	6862      	ldr	r2, [r4, #4]
 800df06:	3301      	adds	r3, #1
 800df08:	3a01      	subs	r2, #1
 800df0a:	6062      	str	r2, [r4, #4]
 800df0c:	6023      	str	r3, [r4, #0]
 800df0e:	e7ec      	b.n	800deea <__ssvfiscanf_r+0x3e>
 800df10:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800df12:	4621      	mov	r1, r4
 800df14:	4630      	mov	r0, r6
 800df16:	4798      	blx	r3
 800df18:	2800      	cmp	r0, #0
 800df1a:	d0e9      	beq.n	800def0 <__ssvfiscanf_r+0x44>
 800df1c:	e7ed      	b.n	800defa <__ssvfiscanf_r+0x4e>
 800df1e:	2b25      	cmp	r3, #37	; 0x25
 800df20:	d012      	beq.n	800df48 <__ssvfiscanf_r+0x9c>
 800df22:	469a      	mov	sl, r3
 800df24:	6863      	ldr	r3, [r4, #4]
 800df26:	2b00      	cmp	r3, #0
 800df28:	f340 8091 	ble.w	800e04e <__ssvfiscanf_r+0x1a2>
 800df2c:	6822      	ldr	r2, [r4, #0]
 800df2e:	7813      	ldrb	r3, [r2, #0]
 800df30:	4553      	cmp	r3, sl
 800df32:	f040 812e 	bne.w	800e192 <__ssvfiscanf_r+0x2e6>
 800df36:	6863      	ldr	r3, [r4, #4]
 800df38:	3b01      	subs	r3, #1
 800df3a:	6063      	str	r3, [r4, #4]
 800df3c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800df3e:	3201      	adds	r2, #1
 800df40:	3301      	adds	r3, #1
 800df42:	6022      	str	r2, [r4, #0]
 800df44:	9345      	str	r3, [sp, #276]	; 0x114
 800df46:	e7d8      	b.n	800defa <__ssvfiscanf_r+0x4e>
 800df48:	9141      	str	r1, [sp, #260]	; 0x104
 800df4a:	9143      	str	r1, [sp, #268]	; 0x10c
 800df4c:	7853      	ldrb	r3, [r2, #1]
 800df4e:	2b2a      	cmp	r3, #42	; 0x2a
 800df50:	bf02      	ittt	eq
 800df52:	2310      	moveq	r3, #16
 800df54:	1c95      	addeq	r5, r2, #2
 800df56:	9341      	streq	r3, [sp, #260]	; 0x104
 800df58:	220a      	movs	r2, #10
 800df5a:	46aa      	mov	sl, r5
 800df5c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800df60:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800df64:	2b09      	cmp	r3, #9
 800df66:	d91d      	bls.n	800dfa4 <__ssvfiscanf_r+0xf8>
 800df68:	487e      	ldr	r0, [pc, #504]	; (800e164 <__ssvfiscanf_r+0x2b8>)
 800df6a:	2203      	movs	r2, #3
 800df6c:	f7f2 f948 	bl	8000200 <memchr>
 800df70:	b140      	cbz	r0, 800df84 <__ssvfiscanf_r+0xd8>
 800df72:	2301      	movs	r3, #1
 800df74:	eba0 0009 	sub.w	r0, r0, r9
 800df78:	fa03 f000 	lsl.w	r0, r3, r0
 800df7c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800df7e:	4318      	orrs	r0, r3
 800df80:	9041      	str	r0, [sp, #260]	; 0x104
 800df82:	4655      	mov	r5, sl
 800df84:	f815 3b01 	ldrb.w	r3, [r5], #1
 800df88:	2b78      	cmp	r3, #120	; 0x78
 800df8a:	d806      	bhi.n	800df9a <__ssvfiscanf_r+0xee>
 800df8c:	2b57      	cmp	r3, #87	; 0x57
 800df8e:	d810      	bhi.n	800dfb2 <__ssvfiscanf_r+0x106>
 800df90:	2b25      	cmp	r3, #37	; 0x25
 800df92:	d0c6      	beq.n	800df22 <__ssvfiscanf_r+0x76>
 800df94:	d856      	bhi.n	800e044 <__ssvfiscanf_r+0x198>
 800df96:	2b00      	cmp	r3, #0
 800df98:	d064      	beq.n	800e064 <__ssvfiscanf_r+0x1b8>
 800df9a:	2303      	movs	r3, #3
 800df9c:	9347      	str	r3, [sp, #284]	; 0x11c
 800df9e:	230a      	movs	r3, #10
 800dfa0:	9342      	str	r3, [sp, #264]	; 0x108
 800dfa2:	e071      	b.n	800e088 <__ssvfiscanf_r+0x1dc>
 800dfa4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800dfa6:	fb02 1103 	mla	r1, r2, r3, r1
 800dfaa:	3930      	subs	r1, #48	; 0x30
 800dfac:	9143      	str	r1, [sp, #268]	; 0x10c
 800dfae:	4655      	mov	r5, sl
 800dfb0:	e7d3      	b.n	800df5a <__ssvfiscanf_r+0xae>
 800dfb2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800dfb6:	2a20      	cmp	r2, #32
 800dfb8:	d8ef      	bhi.n	800df9a <__ssvfiscanf_r+0xee>
 800dfba:	a101      	add	r1, pc, #4	; (adr r1, 800dfc0 <__ssvfiscanf_r+0x114>)
 800dfbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dfc0:	0800e073 	.word	0x0800e073
 800dfc4:	0800df9b 	.word	0x0800df9b
 800dfc8:	0800df9b 	.word	0x0800df9b
 800dfcc:	0800e0d1 	.word	0x0800e0d1
 800dfd0:	0800df9b 	.word	0x0800df9b
 800dfd4:	0800df9b 	.word	0x0800df9b
 800dfd8:	0800df9b 	.word	0x0800df9b
 800dfdc:	0800df9b 	.word	0x0800df9b
 800dfe0:	0800df9b 	.word	0x0800df9b
 800dfe4:	0800df9b 	.word	0x0800df9b
 800dfe8:	0800df9b 	.word	0x0800df9b
 800dfec:	0800e0e7 	.word	0x0800e0e7
 800dff0:	0800e0bd 	.word	0x0800e0bd
 800dff4:	0800e04b 	.word	0x0800e04b
 800dff8:	0800e04b 	.word	0x0800e04b
 800dffc:	0800e04b 	.word	0x0800e04b
 800e000:	0800df9b 	.word	0x0800df9b
 800e004:	0800e0c1 	.word	0x0800e0c1
 800e008:	0800df9b 	.word	0x0800df9b
 800e00c:	0800df9b 	.word	0x0800df9b
 800e010:	0800df9b 	.word	0x0800df9b
 800e014:	0800df9b 	.word	0x0800df9b
 800e018:	0800e0f7 	.word	0x0800e0f7
 800e01c:	0800e0c9 	.word	0x0800e0c9
 800e020:	0800e06b 	.word	0x0800e06b
 800e024:	0800df9b 	.word	0x0800df9b
 800e028:	0800df9b 	.word	0x0800df9b
 800e02c:	0800e0f3 	.word	0x0800e0f3
 800e030:	0800df9b 	.word	0x0800df9b
 800e034:	0800e0bd 	.word	0x0800e0bd
 800e038:	0800df9b 	.word	0x0800df9b
 800e03c:	0800df9b 	.word	0x0800df9b
 800e040:	0800e073 	.word	0x0800e073
 800e044:	3b45      	subs	r3, #69	; 0x45
 800e046:	2b02      	cmp	r3, #2
 800e048:	d8a7      	bhi.n	800df9a <__ssvfiscanf_r+0xee>
 800e04a:	2305      	movs	r3, #5
 800e04c:	e01b      	b.n	800e086 <__ssvfiscanf_r+0x1da>
 800e04e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e050:	4621      	mov	r1, r4
 800e052:	4630      	mov	r0, r6
 800e054:	4798      	blx	r3
 800e056:	2800      	cmp	r0, #0
 800e058:	f43f af68 	beq.w	800df2c <__ssvfiscanf_r+0x80>
 800e05c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e05e:	2800      	cmp	r0, #0
 800e060:	f040 808d 	bne.w	800e17e <__ssvfiscanf_r+0x2d2>
 800e064:	f04f 30ff 	mov.w	r0, #4294967295
 800e068:	e08f      	b.n	800e18a <__ssvfiscanf_r+0x2de>
 800e06a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e06c:	f042 0220 	orr.w	r2, r2, #32
 800e070:	9241      	str	r2, [sp, #260]	; 0x104
 800e072:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e078:	9241      	str	r2, [sp, #260]	; 0x104
 800e07a:	2210      	movs	r2, #16
 800e07c:	2b6f      	cmp	r3, #111	; 0x6f
 800e07e:	9242      	str	r2, [sp, #264]	; 0x108
 800e080:	bf34      	ite	cc
 800e082:	2303      	movcc	r3, #3
 800e084:	2304      	movcs	r3, #4
 800e086:	9347      	str	r3, [sp, #284]	; 0x11c
 800e088:	6863      	ldr	r3, [r4, #4]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	dd42      	ble.n	800e114 <__ssvfiscanf_r+0x268>
 800e08e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e090:	0659      	lsls	r1, r3, #25
 800e092:	d404      	bmi.n	800e09e <__ssvfiscanf_r+0x1f2>
 800e094:	6823      	ldr	r3, [r4, #0]
 800e096:	781a      	ldrb	r2, [r3, #0]
 800e098:	5cba      	ldrb	r2, [r7, r2]
 800e09a:	0712      	lsls	r2, r2, #28
 800e09c:	d441      	bmi.n	800e122 <__ssvfiscanf_r+0x276>
 800e09e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e0a0:	2b02      	cmp	r3, #2
 800e0a2:	dc50      	bgt.n	800e146 <__ssvfiscanf_r+0x29a>
 800e0a4:	466b      	mov	r3, sp
 800e0a6:	4622      	mov	r2, r4
 800e0a8:	a941      	add	r1, sp, #260	; 0x104
 800e0aa:	4630      	mov	r0, r6
 800e0ac:	f000 f9d0 	bl	800e450 <_scanf_chars>
 800e0b0:	2801      	cmp	r0, #1
 800e0b2:	d06e      	beq.n	800e192 <__ssvfiscanf_r+0x2e6>
 800e0b4:	2802      	cmp	r0, #2
 800e0b6:	f47f af20 	bne.w	800defa <__ssvfiscanf_r+0x4e>
 800e0ba:	e7cf      	b.n	800e05c <__ssvfiscanf_r+0x1b0>
 800e0bc:	220a      	movs	r2, #10
 800e0be:	e7dd      	b.n	800e07c <__ssvfiscanf_r+0x1d0>
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	9342      	str	r3, [sp, #264]	; 0x108
 800e0c4:	2303      	movs	r3, #3
 800e0c6:	e7de      	b.n	800e086 <__ssvfiscanf_r+0x1da>
 800e0c8:	2308      	movs	r3, #8
 800e0ca:	9342      	str	r3, [sp, #264]	; 0x108
 800e0cc:	2304      	movs	r3, #4
 800e0ce:	e7da      	b.n	800e086 <__ssvfiscanf_r+0x1da>
 800e0d0:	4629      	mov	r1, r5
 800e0d2:	4640      	mov	r0, r8
 800e0d4:	f000 fb20 	bl	800e718 <__sccl>
 800e0d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e0da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0de:	9341      	str	r3, [sp, #260]	; 0x104
 800e0e0:	4605      	mov	r5, r0
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	e7cf      	b.n	800e086 <__ssvfiscanf_r+0x1da>
 800e0e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e0e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0ec:	9341      	str	r3, [sp, #260]	; 0x104
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	e7c9      	b.n	800e086 <__ssvfiscanf_r+0x1da>
 800e0f2:	2302      	movs	r3, #2
 800e0f4:	e7c7      	b.n	800e086 <__ssvfiscanf_r+0x1da>
 800e0f6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e0f8:	06c3      	lsls	r3, r0, #27
 800e0fa:	f53f aefe 	bmi.w	800defa <__ssvfiscanf_r+0x4e>
 800e0fe:	9b00      	ldr	r3, [sp, #0]
 800e100:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e102:	1d19      	adds	r1, r3, #4
 800e104:	9100      	str	r1, [sp, #0]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f010 0f01 	tst.w	r0, #1
 800e10c:	bf14      	ite	ne
 800e10e:	801a      	strhne	r2, [r3, #0]
 800e110:	601a      	streq	r2, [r3, #0]
 800e112:	e6f2      	b.n	800defa <__ssvfiscanf_r+0x4e>
 800e114:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e116:	4621      	mov	r1, r4
 800e118:	4630      	mov	r0, r6
 800e11a:	4798      	blx	r3
 800e11c:	2800      	cmp	r0, #0
 800e11e:	d0b6      	beq.n	800e08e <__ssvfiscanf_r+0x1e2>
 800e120:	e79c      	b.n	800e05c <__ssvfiscanf_r+0x1b0>
 800e122:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e124:	3201      	adds	r2, #1
 800e126:	9245      	str	r2, [sp, #276]	; 0x114
 800e128:	6862      	ldr	r2, [r4, #4]
 800e12a:	3a01      	subs	r2, #1
 800e12c:	2a00      	cmp	r2, #0
 800e12e:	6062      	str	r2, [r4, #4]
 800e130:	dd02      	ble.n	800e138 <__ssvfiscanf_r+0x28c>
 800e132:	3301      	adds	r3, #1
 800e134:	6023      	str	r3, [r4, #0]
 800e136:	e7ad      	b.n	800e094 <__ssvfiscanf_r+0x1e8>
 800e138:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e13a:	4621      	mov	r1, r4
 800e13c:	4630      	mov	r0, r6
 800e13e:	4798      	blx	r3
 800e140:	2800      	cmp	r0, #0
 800e142:	d0a7      	beq.n	800e094 <__ssvfiscanf_r+0x1e8>
 800e144:	e78a      	b.n	800e05c <__ssvfiscanf_r+0x1b0>
 800e146:	2b04      	cmp	r3, #4
 800e148:	dc0e      	bgt.n	800e168 <__ssvfiscanf_r+0x2bc>
 800e14a:	466b      	mov	r3, sp
 800e14c:	4622      	mov	r2, r4
 800e14e:	a941      	add	r1, sp, #260	; 0x104
 800e150:	4630      	mov	r0, r6
 800e152:	f000 f9d7 	bl	800e504 <_scanf_i>
 800e156:	e7ab      	b.n	800e0b0 <__ssvfiscanf_r+0x204>
 800e158:	0800ddf9 	.word	0x0800ddf9
 800e15c:	0800de73 	.word	0x0800de73
 800e160:	0800ed87 	.word	0x0800ed87
 800e164:	0800f0d4 	.word	0x0800f0d4
 800e168:	4b0b      	ldr	r3, [pc, #44]	; (800e198 <__ssvfiscanf_r+0x2ec>)
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	f43f aec5 	beq.w	800defa <__ssvfiscanf_r+0x4e>
 800e170:	466b      	mov	r3, sp
 800e172:	4622      	mov	r2, r4
 800e174:	a941      	add	r1, sp, #260	; 0x104
 800e176:	4630      	mov	r0, r6
 800e178:	f3af 8000 	nop.w
 800e17c:	e798      	b.n	800e0b0 <__ssvfiscanf_r+0x204>
 800e17e:	89a3      	ldrh	r3, [r4, #12]
 800e180:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e184:	bf18      	it	ne
 800e186:	f04f 30ff 	movne.w	r0, #4294967295
 800e18a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e192:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e194:	e7f9      	b.n	800e18a <__ssvfiscanf_r+0x2de>
 800e196:	bf00      	nop
 800e198:	00000000 	.word	0x00000000

0800e19c <__sfputc_r>:
 800e19c:	6893      	ldr	r3, [r2, #8]
 800e19e:	3b01      	subs	r3, #1
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	b410      	push	{r4}
 800e1a4:	6093      	str	r3, [r2, #8]
 800e1a6:	da08      	bge.n	800e1ba <__sfputc_r+0x1e>
 800e1a8:	6994      	ldr	r4, [r2, #24]
 800e1aa:	42a3      	cmp	r3, r4
 800e1ac:	db01      	blt.n	800e1b2 <__sfputc_r+0x16>
 800e1ae:	290a      	cmp	r1, #10
 800e1b0:	d103      	bne.n	800e1ba <__sfputc_r+0x1e>
 800e1b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1b6:	f7fe b8e3 	b.w	800c380 <__swbuf_r>
 800e1ba:	6813      	ldr	r3, [r2, #0]
 800e1bc:	1c58      	adds	r0, r3, #1
 800e1be:	6010      	str	r0, [r2, #0]
 800e1c0:	7019      	strb	r1, [r3, #0]
 800e1c2:	4608      	mov	r0, r1
 800e1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1c8:	4770      	bx	lr

0800e1ca <__sfputs_r>:
 800e1ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1cc:	4606      	mov	r6, r0
 800e1ce:	460f      	mov	r7, r1
 800e1d0:	4614      	mov	r4, r2
 800e1d2:	18d5      	adds	r5, r2, r3
 800e1d4:	42ac      	cmp	r4, r5
 800e1d6:	d101      	bne.n	800e1dc <__sfputs_r+0x12>
 800e1d8:	2000      	movs	r0, #0
 800e1da:	e007      	b.n	800e1ec <__sfputs_r+0x22>
 800e1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1e0:	463a      	mov	r2, r7
 800e1e2:	4630      	mov	r0, r6
 800e1e4:	f7ff ffda 	bl	800e19c <__sfputc_r>
 800e1e8:	1c43      	adds	r3, r0, #1
 800e1ea:	d1f3      	bne.n	800e1d4 <__sfputs_r+0xa>
 800e1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e1f0 <_vfiprintf_r>:
 800e1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f4:	460d      	mov	r5, r1
 800e1f6:	b09d      	sub	sp, #116	; 0x74
 800e1f8:	4614      	mov	r4, r2
 800e1fa:	4698      	mov	r8, r3
 800e1fc:	4606      	mov	r6, r0
 800e1fe:	b118      	cbz	r0, 800e208 <_vfiprintf_r+0x18>
 800e200:	6983      	ldr	r3, [r0, #24]
 800e202:	b90b      	cbnz	r3, 800e208 <_vfiprintf_r+0x18>
 800e204:	f7ff f934 	bl	800d470 <__sinit>
 800e208:	4b89      	ldr	r3, [pc, #548]	; (800e430 <_vfiprintf_r+0x240>)
 800e20a:	429d      	cmp	r5, r3
 800e20c:	d11b      	bne.n	800e246 <_vfiprintf_r+0x56>
 800e20e:	6875      	ldr	r5, [r6, #4]
 800e210:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e212:	07d9      	lsls	r1, r3, #31
 800e214:	d405      	bmi.n	800e222 <_vfiprintf_r+0x32>
 800e216:	89ab      	ldrh	r3, [r5, #12]
 800e218:	059a      	lsls	r2, r3, #22
 800e21a:	d402      	bmi.n	800e222 <_vfiprintf_r+0x32>
 800e21c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e21e:	f7ff f9ca 	bl	800d5b6 <__retarget_lock_acquire_recursive>
 800e222:	89ab      	ldrh	r3, [r5, #12]
 800e224:	071b      	lsls	r3, r3, #28
 800e226:	d501      	bpl.n	800e22c <_vfiprintf_r+0x3c>
 800e228:	692b      	ldr	r3, [r5, #16]
 800e22a:	b9eb      	cbnz	r3, 800e268 <_vfiprintf_r+0x78>
 800e22c:	4629      	mov	r1, r5
 800e22e:	4630      	mov	r0, r6
 800e230:	f7fe f90a 	bl	800c448 <__swsetup_r>
 800e234:	b1c0      	cbz	r0, 800e268 <_vfiprintf_r+0x78>
 800e236:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e238:	07dc      	lsls	r4, r3, #31
 800e23a:	d50e      	bpl.n	800e25a <_vfiprintf_r+0x6a>
 800e23c:	f04f 30ff 	mov.w	r0, #4294967295
 800e240:	b01d      	add	sp, #116	; 0x74
 800e242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e246:	4b7b      	ldr	r3, [pc, #492]	; (800e434 <_vfiprintf_r+0x244>)
 800e248:	429d      	cmp	r5, r3
 800e24a:	d101      	bne.n	800e250 <_vfiprintf_r+0x60>
 800e24c:	68b5      	ldr	r5, [r6, #8]
 800e24e:	e7df      	b.n	800e210 <_vfiprintf_r+0x20>
 800e250:	4b79      	ldr	r3, [pc, #484]	; (800e438 <_vfiprintf_r+0x248>)
 800e252:	429d      	cmp	r5, r3
 800e254:	bf08      	it	eq
 800e256:	68f5      	ldreq	r5, [r6, #12]
 800e258:	e7da      	b.n	800e210 <_vfiprintf_r+0x20>
 800e25a:	89ab      	ldrh	r3, [r5, #12]
 800e25c:	0598      	lsls	r0, r3, #22
 800e25e:	d4ed      	bmi.n	800e23c <_vfiprintf_r+0x4c>
 800e260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e262:	f7ff f9a9 	bl	800d5b8 <__retarget_lock_release_recursive>
 800e266:	e7e9      	b.n	800e23c <_vfiprintf_r+0x4c>
 800e268:	2300      	movs	r3, #0
 800e26a:	9309      	str	r3, [sp, #36]	; 0x24
 800e26c:	2320      	movs	r3, #32
 800e26e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e272:	f8cd 800c 	str.w	r8, [sp, #12]
 800e276:	2330      	movs	r3, #48	; 0x30
 800e278:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e43c <_vfiprintf_r+0x24c>
 800e27c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e280:	f04f 0901 	mov.w	r9, #1
 800e284:	4623      	mov	r3, r4
 800e286:	469a      	mov	sl, r3
 800e288:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e28c:	b10a      	cbz	r2, 800e292 <_vfiprintf_r+0xa2>
 800e28e:	2a25      	cmp	r2, #37	; 0x25
 800e290:	d1f9      	bne.n	800e286 <_vfiprintf_r+0x96>
 800e292:	ebba 0b04 	subs.w	fp, sl, r4
 800e296:	d00b      	beq.n	800e2b0 <_vfiprintf_r+0xc0>
 800e298:	465b      	mov	r3, fp
 800e29a:	4622      	mov	r2, r4
 800e29c:	4629      	mov	r1, r5
 800e29e:	4630      	mov	r0, r6
 800e2a0:	f7ff ff93 	bl	800e1ca <__sfputs_r>
 800e2a4:	3001      	adds	r0, #1
 800e2a6:	f000 80aa 	beq.w	800e3fe <_vfiprintf_r+0x20e>
 800e2aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2ac:	445a      	add	r2, fp
 800e2ae:	9209      	str	r2, [sp, #36]	; 0x24
 800e2b0:	f89a 3000 	ldrb.w	r3, [sl]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	f000 80a2 	beq.w	800e3fe <_vfiprintf_r+0x20e>
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e2c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2c4:	f10a 0a01 	add.w	sl, sl, #1
 800e2c8:	9304      	str	r3, [sp, #16]
 800e2ca:	9307      	str	r3, [sp, #28]
 800e2cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e2d0:	931a      	str	r3, [sp, #104]	; 0x68
 800e2d2:	4654      	mov	r4, sl
 800e2d4:	2205      	movs	r2, #5
 800e2d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2da:	4858      	ldr	r0, [pc, #352]	; (800e43c <_vfiprintf_r+0x24c>)
 800e2dc:	f7f1 ff90 	bl	8000200 <memchr>
 800e2e0:	9a04      	ldr	r2, [sp, #16]
 800e2e2:	b9d8      	cbnz	r0, 800e31c <_vfiprintf_r+0x12c>
 800e2e4:	06d1      	lsls	r1, r2, #27
 800e2e6:	bf44      	itt	mi
 800e2e8:	2320      	movmi	r3, #32
 800e2ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2ee:	0713      	lsls	r3, r2, #28
 800e2f0:	bf44      	itt	mi
 800e2f2:	232b      	movmi	r3, #43	; 0x2b
 800e2f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2f8:	f89a 3000 	ldrb.w	r3, [sl]
 800e2fc:	2b2a      	cmp	r3, #42	; 0x2a
 800e2fe:	d015      	beq.n	800e32c <_vfiprintf_r+0x13c>
 800e300:	9a07      	ldr	r2, [sp, #28]
 800e302:	4654      	mov	r4, sl
 800e304:	2000      	movs	r0, #0
 800e306:	f04f 0c0a 	mov.w	ip, #10
 800e30a:	4621      	mov	r1, r4
 800e30c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e310:	3b30      	subs	r3, #48	; 0x30
 800e312:	2b09      	cmp	r3, #9
 800e314:	d94e      	bls.n	800e3b4 <_vfiprintf_r+0x1c4>
 800e316:	b1b0      	cbz	r0, 800e346 <_vfiprintf_r+0x156>
 800e318:	9207      	str	r2, [sp, #28]
 800e31a:	e014      	b.n	800e346 <_vfiprintf_r+0x156>
 800e31c:	eba0 0308 	sub.w	r3, r0, r8
 800e320:	fa09 f303 	lsl.w	r3, r9, r3
 800e324:	4313      	orrs	r3, r2
 800e326:	9304      	str	r3, [sp, #16]
 800e328:	46a2      	mov	sl, r4
 800e32a:	e7d2      	b.n	800e2d2 <_vfiprintf_r+0xe2>
 800e32c:	9b03      	ldr	r3, [sp, #12]
 800e32e:	1d19      	adds	r1, r3, #4
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	9103      	str	r1, [sp, #12]
 800e334:	2b00      	cmp	r3, #0
 800e336:	bfbb      	ittet	lt
 800e338:	425b      	neglt	r3, r3
 800e33a:	f042 0202 	orrlt.w	r2, r2, #2
 800e33e:	9307      	strge	r3, [sp, #28]
 800e340:	9307      	strlt	r3, [sp, #28]
 800e342:	bfb8      	it	lt
 800e344:	9204      	strlt	r2, [sp, #16]
 800e346:	7823      	ldrb	r3, [r4, #0]
 800e348:	2b2e      	cmp	r3, #46	; 0x2e
 800e34a:	d10c      	bne.n	800e366 <_vfiprintf_r+0x176>
 800e34c:	7863      	ldrb	r3, [r4, #1]
 800e34e:	2b2a      	cmp	r3, #42	; 0x2a
 800e350:	d135      	bne.n	800e3be <_vfiprintf_r+0x1ce>
 800e352:	9b03      	ldr	r3, [sp, #12]
 800e354:	1d1a      	adds	r2, r3, #4
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	9203      	str	r2, [sp, #12]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	bfb8      	it	lt
 800e35e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e362:	3402      	adds	r4, #2
 800e364:	9305      	str	r3, [sp, #20]
 800e366:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e44c <_vfiprintf_r+0x25c>
 800e36a:	7821      	ldrb	r1, [r4, #0]
 800e36c:	2203      	movs	r2, #3
 800e36e:	4650      	mov	r0, sl
 800e370:	f7f1 ff46 	bl	8000200 <memchr>
 800e374:	b140      	cbz	r0, 800e388 <_vfiprintf_r+0x198>
 800e376:	2340      	movs	r3, #64	; 0x40
 800e378:	eba0 000a 	sub.w	r0, r0, sl
 800e37c:	fa03 f000 	lsl.w	r0, r3, r0
 800e380:	9b04      	ldr	r3, [sp, #16]
 800e382:	4303      	orrs	r3, r0
 800e384:	3401      	adds	r4, #1
 800e386:	9304      	str	r3, [sp, #16]
 800e388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e38c:	482c      	ldr	r0, [pc, #176]	; (800e440 <_vfiprintf_r+0x250>)
 800e38e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e392:	2206      	movs	r2, #6
 800e394:	f7f1 ff34 	bl	8000200 <memchr>
 800e398:	2800      	cmp	r0, #0
 800e39a:	d03f      	beq.n	800e41c <_vfiprintf_r+0x22c>
 800e39c:	4b29      	ldr	r3, [pc, #164]	; (800e444 <_vfiprintf_r+0x254>)
 800e39e:	bb1b      	cbnz	r3, 800e3e8 <_vfiprintf_r+0x1f8>
 800e3a0:	9b03      	ldr	r3, [sp, #12]
 800e3a2:	3307      	adds	r3, #7
 800e3a4:	f023 0307 	bic.w	r3, r3, #7
 800e3a8:	3308      	adds	r3, #8
 800e3aa:	9303      	str	r3, [sp, #12]
 800e3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3ae:	443b      	add	r3, r7
 800e3b0:	9309      	str	r3, [sp, #36]	; 0x24
 800e3b2:	e767      	b.n	800e284 <_vfiprintf_r+0x94>
 800e3b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3b8:	460c      	mov	r4, r1
 800e3ba:	2001      	movs	r0, #1
 800e3bc:	e7a5      	b.n	800e30a <_vfiprintf_r+0x11a>
 800e3be:	2300      	movs	r3, #0
 800e3c0:	3401      	adds	r4, #1
 800e3c2:	9305      	str	r3, [sp, #20]
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	f04f 0c0a 	mov.w	ip, #10
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3d0:	3a30      	subs	r2, #48	; 0x30
 800e3d2:	2a09      	cmp	r2, #9
 800e3d4:	d903      	bls.n	800e3de <_vfiprintf_r+0x1ee>
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d0c5      	beq.n	800e366 <_vfiprintf_r+0x176>
 800e3da:	9105      	str	r1, [sp, #20]
 800e3dc:	e7c3      	b.n	800e366 <_vfiprintf_r+0x176>
 800e3de:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3e2:	4604      	mov	r4, r0
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	e7f0      	b.n	800e3ca <_vfiprintf_r+0x1da>
 800e3e8:	ab03      	add	r3, sp, #12
 800e3ea:	9300      	str	r3, [sp, #0]
 800e3ec:	462a      	mov	r2, r5
 800e3ee:	4b16      	ldr	r3, [pc, #88]	; (800e448 <_vfiprintf_r+0x258>)
 800e3f0:	a904      	add	r1, sp, #16
 800e3f2:	4630      	mov	r0, r6
 800e3f4:	f7fd fa10 	bl	800b818 <_printf_float>
 800e3f8:	4607      	mov	r7, r0
 800e3fa:	1c78      	adds	r0, r7, #1
 800e3fc:	d1d6      	bne.n	800e3ac <_vfiprintf_r+0x1bc>
 800e3fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e400:	07d9      	lsls	r1, r3, #31
 800e402:	d405      	bmi.n	800e410 <_vfiprintf_r+0x220>
 800e404:	89ab      	ldrh	r3, [r5, #12]
 800e406:	059a      	lsls	r2, r3, #22
 800e408:	d402      	bmi.n	800e410 <_vfiprintf_r+0x220>
 800e40a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e40c:	f7ff f8d4 	bl	800d5b8 <__retarget_lock_release_recursive>
 800e410:	89ab      	ldrh	r3, [r5, #12]
 800e412:	065b      	lsls	r3, r3, #25
 800e414:	f53f af12 	bmi.w	800e23c <_vfiprintf_r+0x4c>
 800e418:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e41a:	e711      	b.n	800e240 <_vfiprintf_r+0x50>
 800e41c:	ab03      	add	r3, sp, #12
 800e41e:	9300      	str	r3, [sp, #0]
 800e420:	462a      	mov	r2, r5
 800e422:	4b09      	ldr	r3, [pc, #36]	; (800e448 <_vfiprintf_r+0x258>)
 800e424:	a904      	add	r1, sp, #16
 800e426:	4630      	mov	r0, r6
 800e428:	f7fd fc9a 	bl	800bd60 <_printf_i>
 800e42c:	e7e4      	b.n	800e3f8 <_vfiprintf_r+0x208>
 800e42e:	bf00      	nop
 800e430:	0800ef38 	.word	0x0800ef38
 800e434:	0800ef58 	.word	0x0800ef58
 800e438:	0800ef18 	.word	0x0800ef18
 800e43c:	0800f0d8 	.word	0x0800f0d8
 800e440:	0800f0de 	.word	0x0800f0de
 800e444:	0800b819 	.word	0x0800b819
 800e448:	0800e1cb 	.word	0x0800e1cb
 800e44c:	0800f0d4 	.word	0x0800f0d4

0800e450 <_scanf_chars>:
 800e450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e454:	4615      	mov	r5, r2
 800e456:	688a      	ldr	r2, [r1, #8]
 800e458:	4680      	mov	r8, r0
 800e45a:	460c      	mov	r4, r1
 800e45c:	b932      	cbnz	r2, 800e46c <_scanf_chars+0x1c>
 800e45e:	698a      	ldr	r2, [r1, #24]
 800e460:	2a00      	cmp	r2, #0
 800e462:	bf0c      	ite	eq
 800e464:	2201      	moveq	r2, #1
 800e466:	f04f 32ff 	movne.w	r2, #4294967295
 800e46a:	608a      	str	r2, [r1, #8]
 800e46c:	6822      	ldr	r2, [r4, #0]
 800e46e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e500 <_scanf_chars+0xb0>
 800e472:	06d1      	lsls	r1, r2, #27
 800e474:	bf5f      	itttt	pl
 800e476:	681a      	ldrpl	r2, [r3, #0]
 800e478:	1d11      	addpl	r1, r2, #4
 800e47a:	6019      	strpl	r1, [r3, #0]
 800e47c:	6816      	ldrpl	r6, [r2, #0]
 800e47e:	2700      	movs	r7, #0
 800e480:	69a0      	ldr	r0, [r4, #24]
 800e482:	b188      	cbz	r0, 800e4a8 <_scanf_chars+0x58>
 800e484:	2801      	cmp	r0, #1
 800e486:	d107      	bne.n	800e498 <_scanf_chars+0x48>
 800e488:	682a      	ldr	r2, [r5, #0]
 800e48a:	7811      	ldrb	r1, [r2, #0]
 800e48c:	6962      	ldr	r2, [r4, #20]
 800e48e:	5c52      	ldrb	r2, [r2, r1]
 800e490:	b952      	cbnz	r2, 800e4a8 <_scanf_chars+0x58>
 800e492:	2f00      	cmp	r7, #0
 800e494:	d031      	beq.n	800e4fa <_scanf_chars+0xaa>
 800e496:	e022      	b.n	800e4de <_scanf_chars+0x8e>
 800e498:	2802      	cmp	r0, #2
 800e49a:	d120      	bne.n	800e4de <_scanf_chars+0x8e>
 800e49c:	682b      	ldr	r3, [r5, #0]
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e4a4:	071b      	lsls	r3, r3, #28
 800e4a6:	d41a      	bmi.n	800e4de <_scanf_chars+0x8e>
 800e4a8:	6823      	ldr	r3, [r4, #0]
 800e4aa:	06da      	lsls	r2, r3, #27
 800e4ac:	bf5e      	ittt	pl
 800e4ae:	682b      	ldrpl	r3, [r5, #0]
 800e4b0:	781b      	ldrbpl	r3, [r3, #0]
 800e4b2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e4b6:	682a      	ldr	r2, [r5, #0]
 800e4b8:	686b      	ldr	r3, [r5, #4]
 800e4ba:	3201      	adds	r2, #1
 800e4bc:	602a      	str	r2, [r5, #0]
 800e4be:	68a2      	ldr	r2, [r4, #8]
 800e4c0:	3b01      	subs	r3, #1
 800e4c2:	3a01      	subs	r2, #1
 800e4c4:	606b      	str	r3, [r5, #4]
 800e4c6:	3701      	adds	r7, #1
 800e4c8:	60a2      	str	r2, [r4, #8]
 800e4ca:	b142      	cbz	r2, 800e4de <_scanf_chars+0x8e>
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	dcd7      	bgt.n	800e480 <_scanf_chars+0x30>
 800e4d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e4d4:	4629      	mov	r1, r5
 800e4d6:	4640      	mov	r0, r8
 800e4d8:	4798      	blx	r3
 800e4da:	2800      	cmp	r0, #0
 800e4dc:	d0d0      	beq.n	800e480 <_scanf_chars+0x30>
 800e4de:	6823      	ldr	r3, [r4, #0]
 800e4e0:	f013 0310 	ands.w	r3, r3, #16
 800e4e4:	d105      	bne.n	800e4f2 <_scanf_chars+0xa2>
 800e4e6:	68e2      	ldr	r2, [r4, #12]
 800e4e8:	3201      	adds	r2, #1
 800e4ea:	60e2      	str	r2, [r4, #12]
 800e4ec:	69a2      	ldr	r2, [r4, #24]
 800e4ee:	b102      	cbz	r2, 800e4f2 <_scanf_chars+0xa2>
 800e4f0:	7033      	strb	r3, [r6, #0]
 800e4f2:	6923      	ldr	r3, [r4, #16]
 800e4f4:	443b      	add	r3, r7
 800e4f6:	6123      	str	r3, [r4, #16]
 800e4f8:	2000      	movs	r0, #0
 800e4fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4fe:	bf00      	nop
 800e500:	0800ed87 	.word	0x0800ed87

0800e504 <_scanf_i>:
 800e504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e508:	4698      	mov	r8, r3
 800e50a:	4b76      	ldr	r3, [pc, #472]	; (800e6e4 <_scanf_i+0x1e0>)
 800e50c:	460c      	mov	r4, r1
 800e50e:	4682      	mov	sl, r0
 800e510:	4616      	mov	r6, r2
 800e512:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e516:	b087      	sub	sp, #28
 800e518:	ab03      	add	r3, sp, #12
 800e51a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e51e:	4b72      	ldr	r3, [pc, #456]	; (800e6e8 <_scanf_i+0x1e4>)
 800e520:	69a1      	ldr	r1, [r4, #24]
 800e522:	4a72      	ldr	r2, [pc, #456]	; (800e6ec <_scanf_i+0x1e8>)
 800e524:	2903      	cmp	r1, #3
 800e526:	bf18      	it	ne
 800e528:	461a      	movne	r2, r3
 800e52a:	68a3      	ldr	r3, [r4, #8]
 800e52c:	9201      	str	r2, [sp, #4]
 800e52e:	1e5a      	subs	r2, r3, #1
 800e530:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e534:	bf88      	it	hi
 800e536:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e53a:	4627      	mov	r7, r4
 800e53c:	bf82      	ittt	hi
 800e53e:	eb03 0905 	addhi.w	r9, r3, r5
 800e542:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e546:	60a3      	strhi	r3, [r4, #8]
 800e548:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e54c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e550:	bf98      	it	ls
 800e552:	f04f 0900 	movls.w	r9, #0
 800e556:	6023      	str	r3, [r4, #0]
 800e558:	463d      	mov	r5, r7
 800e55a:	f04f 0b00 	mov.w	fp, #0
 800e55e:	6831      	ldr	r1, [r6, #0]
 800e560:	ab03      	add	r3, sp, #12
 800e562:	7809      	ldrb	r1, [r1, #0]
 800e564:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e568:	2202      	movs	r2, #2
 800e56a:	f7f1 fe49 	bl	8000200 <memchr>
 800e56e:	b328      	cbz	r0, 800e5bc <_scanf_i+0xb8>
 800e570:	f1bb 0f01 	cmp.w	fp, #1
 800e574:	d159      	bne.n	800e62a <_scanf_i+0x126>
 800e576:	6862      	ldr	r2, [r4, #4]
 800e578:	b92a      	cbnz	r2, 800e586 <_scanf_i+0x82>
 800e57a:	6822      	ldr	r2, [r4, #0]
 800e57c:	2308      	movs	r3, #8
 800e57e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e582:	6063      	str	r3, [r4, #4]
 800e584:	6022      	str	r2, [r4, #0]
 800e586:	6822      	ldr	r2, [r4, #0]
 800e588:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e58c:	6022      	str	r2, [r4, #0]
 800e58e:	68a2      	ldr	r2, [r4, #8]
 800e590:	1e51      	subs	r1, r2, #1
 800e592:	60a1      	str	r1, [r4, #8]
 800e594:	b192      	cbz	r2, 800e5bc <_scanf_i+0xb8>
 800e596:	6832      	ldr	r2, [r6, #0]
 800e598:	1c51      	adds	r1, r2, #1
 800e59a:	6031      	str	r1, [r6, #0]
 800e59c:	7812      	ldrb	r2, [r2, #0]
 800e59e:	f805 2b01 	strb.w	r2, [r5], #1
 800e5a2:	6872      	ldr	r2, [r6, #4]
 800e5a4:	3a01      	subs	r2, #1
 800e5a6:	2a00      	cmp	r2, #0
 800e5a8:	6072      	str	r2, [r6, #4]
 800e5aa:	dc07      	bgt.n	800e5bc <_scanf_i+0xb8>
 800e5ac:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e5b0:	4631      	mov	r1, r6
 800e5b2:	4650      	mov	r0, sl
 800e5b4:	4790      	blx	r2
 800e5b6:	2800      	cmp	r0, #0
 800e5b8:	f040 8085 	bne.w	800e6c6 <_scanf_i+0x1c2>
 800e5bc:	f10b 0b01 	add.w	fp, fp, #1
 800e5c0:	f1bb 0f03 	cmp.w	fp, #3
 800e5c4:	d1cb      	bne.n	800e55e <_scanf_i+0x5a>
 800e5c6:	6863      	ldr	r3, [r4, #4]
 800e5c8:	b90b      	cbnz	r3, 800e5ce <_scanf_i+0xca>
 800e5ca:	230a      	movs	r3, #10
 800e5cc:	6063      	str	r3, [r4, #4]
 800e5ce:	6863      	ldr	r3, [r4, #4]
 800e5d0:	4947      	ldr	r1, [pc, #284]	; (800e6f0 <_scanf_i+0x1ec>)
 800e5d2:	6960      	ldr	r0, [r4, #20]
 800e5d4:	1ac9      	subs	r1, r1, r3
 800e5d6:	f000 f89f 	bl	800e718 <__sccl>
 800e5da:	f04f 0b00 	mov.w	fp, #0
 800e5de:	68a3      	ldr	r3, [r4, #8]
 800e5e0:	6822      	ldr	r2, [r4, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d03d      	beq.n	800e662 <_scanf_i+0x15e>
 800e5e6:	6831      	ldr	r1, [r6, #0]
 800e5e8:	6960      	ldr	r0, [r4, #20]
 800e5ea:	f891 c000 	ldrb.w	ip, [r1]
 800e5ee:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	d035      	beq.n	800e662 <_scanf_i+0x15e>
 800e5f6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e5fa:	d124      	bne.n	800e646 <_scanf_i+0x142>
 800e5fc:	0510      	lsls	r0, r2, #20
 800e5fe:	d522      	bpl.n	800e646 <_scanf_i+0x142>
 800e600:	f10b 0b01 	add.w	fp, fp, #1
 800e604:	f1b9 0f00 	cmp.w	r9, #0
 800e608:	d003      	beq.n	800e612 <_scanf_i+0x10e>
 800e60a:	3301      	adds	r3, #1
 800e60c:	f109 39ff 	add.w	r9, r9, #4294967295
 800e610:	60a3      	str	r3, [r4, #8]
 800e612:	6873      	ldr	r3, [r6, #4]
 800e614:	3b01      	subs	r3, #1
 800e616:	2b00      	cmp	r3, #0
 800e618:	6073      	str	r3, [r6, #4]
 800e61a:	dd1b      	ble.n	800e654 <_scanf_i+0x150>
 800e61c:	6833      	ldr	r3, [r6, #0]
 800e61e:	3301      	adds	r3, #1
 800e620:	6033      	str	r3, [r6, #0]
 800e622:	68a3      	ldr	r3, [r4, #8]
 800e624:	3b01      	subs	r3, #1
 800e626:	60a3      	str	r3, [r4, #8]
 800e628:	e7d9      	b.n	800e5de <_scanf_i+0xda>
 800e62a:	f1bb 0f02 	cmp.w	fp, #2
 800e62e:	d1ae      	bne.n	800e58e <_scanf_i+0x8a>
 800e630:	6822      	ldr	r2, [r4, #0]
 800e632:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e636:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e63a:	d1bf      	bne.n	800e5bc <_scanf_i+0xb8>
 800e63c:	2310      	movs	r3, #16
 800e63e:	6063      	str	r3, [r4, #4]
 800e640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e644:	e7a2      	b.n	800e58c <_scanf_i+0x88>
 800e646:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e64a:	6022      	str	r2, [r4, #0]
 800e64c:	780b      	ldrb	r3, [r1, #0]
 800e64e:	f805 3b01 	strb.w	r3, [r5], #1
 800e652:	e7de      	b.n	800e612 <_scanf_i+0x10e>
 800e654:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e658:	4631      	mov	r1, r6
 800e65a:	4650      	mov	r0, sl
 800e65c:	4798      	blx	r3
 800e65e:	2800      	cmp	r0, #0
 800e660:	d0df      	beq.n	800e622 <_scanf_i+0x11e>
 800e662:	6823      	ldr	r3, [r4, #0]
 800e664:	05db      	lsls	r3, r3, #23
 800e666:	d50d      	bpl.n	800e684 <_scanf_i+0x180>
 800e668:	42bd      	cmp	r5, r7
 800e66a:	d909      	bls.n	800e680 <_scanf_i+0x17c>
 800e66c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e670:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e674:	4632      	mov	r2, r6
 800e676:	4650      	mov	r0, sl
 800e678:	4798      	blx	r3
 800e67a:	f105 39ff 	add.w	r9, r5, #4294967295
 800e67e:	464d      	mov	r5, r9
 800e680:	42bd      	cmp	r5, r7
 800e682:	d02d      	beq.n	800e6e0 <_scanf_i+0x1dc>
 800e684:	6822      	ldr	r2, [r4, #0]
 800e686:	f012 0210 	ands.w	r2, r2, #16
 800e68a:	d113      	bne.n	800e6b4 <_scanf_i+0x1b0>
 800e68c:	702a      	strb	r2, [r5, #0]
 800e68e:	6863      	ldr	r3, [r4, #4]
 800e690:	9e01      	ldr	r6, [sp, #4]
 800e692:	4639      	mov	r1, r7
 800e694:	4650      	mov	r0, sl
 800e696:	47b0      	blx	r6
 800e698:	6821      	ldr	r1, [r4, #0]
 800e69a:	f8d8 3000 	ldr.w	r3, [r8]
 800e69e:	f011 0f20 	tst.w	r1, #32
 800e6a2:	d013      	beq.n	800e6cc <_scanf_i+0x1c8>
 800e6a4:	1d1a      	adds	r2, r3, #4
 800e6a6:	f8c8 2000 	str.w	r2, [r8]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	6018      	str	r0, [r3, #0]
 800e6ae:	68e3      	ldr	r3, [r4, #12]
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	60e3      	str	r3, [r4, #12]
 800e6b4:	1bed      	subs	r5, r5, r7
 800e6b6:	44ab      	add	fp, r5
 800e6b8:	6925      	ldr	r5, [r4, #16]
 800e6ba:	445d      	add	r5, fp
 800e6bc:	6125      	str	r5, [r4, #16]
 800e6be:	2000      	movs	r0, #0
 800e6c0:	b007      	add	sp, #28
 800e6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6c6:	f04f 0b00 	mov.w	fp, #0
 800e6ca:	e7ca      	b.n	800e662 <_scanf_i+0x15e>
 800e6cc:	1d1a      	adds	r2, r3, #4
 800e6ce:	f8c8 2000 	str.w	r2, [r8]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f011 0f01 	tst.w	r1, #1
 800e6d8:	bf14      	ite	ne
 800e6da:	8018      	strhne	r0, [r3, #0]
 800e6dc:	6018      	streq	r0, [r3, #0]
 800e6de:	e7e6      	b.n	800e6ae <_scanf_i+0x1aa>
 800e6e0:	2001      	movs	r0, #1
 800e6e2:	e7ed      	b.n	800e6c0 <_scanf_i+0x1bc>
 800e6e4:	0800eb48 	.word	0x0800eb48
 800e6e8:	0800e86d 	.word	0x0800e86d
 800e6ec:	0800c369 	.word	0x0800c369
 800e6f0:	0800f0fe 	.word	0x0800f0fe

0800e6f4 <_read_r>:
 800e6f4:	b538      	push	{r3, r4, r5, lr}
 800e6f6:	4d07      	ldr	r5, [pc, #28]	; (800e714 <_read_r+0x20>)
 800e6f8:	4604      	mov	r4, r0
 800e6fa:	4608      	mov	r0, r1
 800e6fc:	4611      	mov	r1, r2
 800e6fe:	2200      	movs	r2, #0
 800e700:	602a      	str	r2, [r5, #0]
 800e702:	461a      	mov	r2, r3
 800e704:	f7f4 fc44 	bl	8002f90 <_read>
 800e708:	1c43      	adds	r3, r0, #1
 800e70a:	d102      	bne.n	800e712 <_read_r+0x1e>
 800e70c:	682b      	ldr	r3, [r5, #0]
 800e70e:	b103      	cbz	r3, 800e712 <_read_r+0x1e>
 800e710:	6023      	str	r3, [r4, #0]
 800e712:	bd38      	pop	{r3, r4, r5, pc}
 800e714:	20002624 	.word	0x20002624

0800e718 <__sccl>:
 800e718:	b570      	push	{r4, r5, r6, lr}
 800e71a:	780b      	ldrb	r3, [r1, #0]
 800e71c:	4604      	mov	r4, r0
 800e71e:	2b5e      	cmp	r3, #94	; 0x5e
 800e720:	bf0b      	itete	eq
 800e722:	784b      	ldrbeq	r3, [r1, #1]
 800e724:	1c48      	addne	r0, r1, #1
 800e726:	1c88      	addeq	r0, r1, #2
 800e728:	2200      	movne	r2, #0
 800e72a:	bf08      	it	eq
 800e72c:	2201      	moveq	r2, #1
 800e72e:	1e61      	subs	r1, r4, #1
 800e730:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e734:	f801 2f01 	strb.w	r2, [r1, #1]!
 800e738:	42a9      	cmp	r1, r5
 800e73a:	d1fb      	bne.n	800e734 <__sccl+0x1c>
 800e73c:	b90b      	cbnz	r3, 800e742 <__sccl+0x2a>
 800e73e:	3801      	subs	r0, #1
 800e740:	bd70      	pop	{r4, r5, r6, pc}
 800e742:	f082 0201 	eor.w	r2, r2, #1
 800e746:	54e2      	strb	r2, [r4, r3]
 800e748:	4605      	mov	r5, r0
 800e74a:	4628      	mov	r0, r5
 800e74c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800e750:	292d      	cmp	r1, #45	; 0x2d
 800e752:	d006      	beq.n	800e762 <__sccl+0x4a>
 800e754:	295d      	cmp	r1, #93	; 0x5d
 800e756:	d0f3      	beq.n	800e740 <__sccl+0x28>
 800e758:	b909      	cbnz	r1, 800e75e <__sccl+0x46>
 800e75a:	4628      	mov	r0, r5
 800e75c:	e7f0      	b.n	800e740 <__sccl+0x28>
 800e75e:	460b      	mov	r3, r1
 800e760:	e7f1      	b.n	800e746 <__sccl+0x2e>
 800e762:	786e      	ldrb	r6, [r5, #1]
 800e764:	2e5d      	cmp	r6, #93	; 0x5d
 800e766:	d0fa      	beq.n	800e75e <__sccl+0x46>
 800e768:	42b3      	cmp	r3, r6
 800e76a:	dcf8      	bgt.n	800e75e <__sccl+0x46>
 800e76c:	3502      	adds	r5, #2
 800e76e:	4619      	mov	r1, r3
 800e770:	3101      	adds	r1, #1
 800e772:	428e      	cmp	r6, r1
 800e774:	5462      	strb	r2, [r4, r1]
 800e776:	dcfb      	bgt.n	800e770 <__sccl+0x58>
 800e778:	1af1      	subs	r1, r6, r3
 800e77a:	3901      	subs	r1, #1
 800e77c:	1c58      	adds	r0, r3, #1
 800e77e:	42b3      	cmp	r3, r6
 800e780:	bfa8      	it	ge
 800e782:	2100      	movge	r1, #0
 800e784:	1843      	adds	r3, r0, r1
 800e786:	e7e0      	b.n	800e74a <__sccl+0x32>

0800e788 <_strtoul_l.constprop.0>:
 800e788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e78c:	4f36      	ldr	r7, [pc, #216]	; (800e868 <_strtoul_l.constprop.0+0xe0>)
 800e78e:	4686      	mov	lr, r0
 800e790:	460d      	mov	r5, r1
 800e792:	4628      	mov	r0, r5
 800e794:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e798:	5de6      	ldrb	r6, [r4, r7]
 800e79a:	f016 0608 	ands.w	r6, r6, #8
 800e79e:	d1f8      	bne.n	800e792 <_strtoul_l.constprop.0+0xa>
 800e7a0:	2c2d      	cmp	r4, #45	; 0x2d
 800e7a2:	d12f      	bne.n	800e804 <_strtoul_l.constprop.0+0x7c>
 800e7a4:	782c      	ldrb	r4, [r5, #0]
 800e7a6:	2601      	movs	r6, #1
 800e7a8:	1c85      	adds	r5, r0, #2
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d057      	beq.n	800e85e <_strtoul_l.constprop.0+0xd6>
 800e7ae:	2b10      	cmp	r3, #16
 800e7b0:	d109      	bne.n	800e7c6 <_strtoul_l.constprop.0+0x3e>
 800e7b2:	2c30      	cmp	r4, #48	; 0x30
 800e7b4:	d107      	bne.n	800e7c6 <_strtoul_l.constprop.0+0x3e>
 800e7b6:	7828      	ldrb	r0, [r5, #0]
 800e7b8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e7bc:	2858      	cmp	r0, #88	; 0x58
 800e7be:	d149      	bne.n	800e854 <_strtoul_l.constprop.0+0xcc>
 800e7c0:	786c      	ldrb	r4, [r5, #1]
 800e7c2:	2310      	movs	r3, #16
 800e7c4:	3502      	adds	r5, #2
 800e7c6:	f04f 38ff 	mov.w	r8, #4294967295
 800e7ca:	2700      	movs	r7, #0
 800e7cc:	fbb8 f8f3 	udiv	r8, r8, r3
 800e7d0:	fb03 f908 	mul.w	r9, r3, r8
 800e7d4:	ea6f 0909 	mvn.w	r9, r9
 800e7d8:	4638      	mov	r0, r7
 800e7da:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e7de:	f1bc 0f09 	cmp.w	ip, #9
 800e7e2:	d814      	bhi.n	800e80e <_strtoul_l.constprop.0+0x86>
 800e7e4:	4664      	mov	r4, ip
 800e7e6:	42a3      	cmp	r3, r4
 800e7e8:	dd22      	ble.n	800e830 <_strtoul_l.constprop.0+0xa8>
 800e7ea:	2f00      	cmp	r7, #0
 800e7ec:	db1d      	blt.n	800e82a <_strtoul_l.constprop.0+0xa2>
 800e7ee:	4580      	cmp	r8, r0
 800e7f0:	d31b      	bcc.n	800e82a <_strtoul_l.constprop.0+0xa2>
 800e7f2:	d101      	bne.n	800e7f8 <_strtoul_l.constprop.0+0x70>
 800e7f4:	45a1      	cmp	r9, r4
 800e7f6:	db18      	blt.n	800e82a <_strtoul_l.constprop.0+0xa2>
 800e7f8:	fb00 4003 	mla	r0, r0, r3, r4
 800e7fc:	2701      	movs	r7, #1
 800e7fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e802:	e7ea      	b.n	800e7da <_strtoul_l.constprop.0+0x52>
 800e804:	2c2b      	cmp	r4, #43	; 0x2b
 800e806:	bf04      	itt	eq
 800e808:	782c      	ldrbeq	r4, [r5, #0]
 800e80a:	1c85      	addeq	r5, r0, #2
 800e80c:	e7cd      	b.n	800e7aa <_strtoul_l.constprop.0+0x22>
 800e80e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e812:	f1bc 0f19 	cmp.w	ip, #25
 800e816:	d801      	bhi.n	800e81c <_strtoul_l.constprop.0+0x94>
 800e818:	3c37      	subs	r4, #55	; 0x37
 800e81a:	e7e4      	b.n	800e7e6 <_strtoul_l.constprop.0+0x5e>
 800e81c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e820:	f1bc 0f19 	cmp.w	ip, #25
 800e824:	d804      	bhi.n	800e830 <_strtoul_l.constprop.0+0xa8>
 800e826:	3c57      	subs	r4, #87	; 0x57
 800e828:	e7dd      	b.n	800e7e6 <_strtoul_l.constprop.0+0x5e>
 800e82a:	f04f 37ff 	mov.w	r7, #4294967295
 800e82e:	e7e6      	b.n	800e7fe <_strtoul_l.constprop.0+0x76>
 800e830:	2f00      	cmp	r7, #0
 800e832:	da07      	bge.n	800e844 <_strtoul_l.constprop.0+0xbc>
 800e834:	2322      	movs	r3, #34	; 0x22
 800e836:	f8ce 3000 	str.w	r3, [lr]
 800e83a:	f04f 30ff 	mov.w	r0, #4294967295
 800e83e:	b932      	cbnz	r2, 800e84e <_strtoul_l.constprop.0+0xc6>
 800e840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e844:	b106      	cbz	r6, 800e848 <_strtoul_l.constprop.0+0xc0>
 800e846:	4240      	negs	r0, r0
 800e848:	2a00      	cmp	r2, #0
 800e84a:	d0f9      	beq.n	800e840 <_strtoul_l.constprop.0+0xb8>
 800e84c:	b107      	cbz	r7, 800e850 <_strtoul_l.constprop.0+0xc8>
 800e84e:	1e69      	subs	r1, r5, #1
 800e850:	6011      	str	r1, [r2, #0]
 800e852:	e7f5      	b.n	800e840 <_strtoul_l.constprop.0+0xb8>
 800e854:	2430      	movs	r4, #48	; 0x30
 800e856:	2b00      	cmp	r3, #0
 800e858:	d1b5      	bne.n	800e7c6 <_strtoul_l.constprop.0+0x3e>
 800e85a:	2308      	movs	r3, #8
 800e85c:	e7b3      	b.n	800e7c6 <_strtoul_l.constprop.0+0x3e>
 800e85e:	2c30      	cmp	r4, #48	; 0x30
 800e860:	d0a9      	beq.n	800e7b6 <_strtoul_l.constprop.0+0x2e>
 800e862:	230a      	movs	r3, #10
 800e864:	e7af      	b.n	800e7c6 <_strtoul_l.constprop.0+0x3e>
 800e866:	bf00      	nop
 800e868:	0800ed87 	.word	0x0800ed87

0800e86c <_strtoul_r>:
 800e86c:	f7ff bf8c 	b.w	800e788 <_strtoul_l.constprop.0>

0800e870 <__submore>:
 800e870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e874:	460c      	mov	r4, r1
 800e876:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e87c:	4299      	cmp	r1, r3
 800e87e:	d11d      	bne.n	800e8bc <__submore+0x4c>
 800e880:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e884:	f7fc feb4 	bl	800b5f0 <_malloc_r>
 800e888:	b918      	cbnz	r0, 800e892 <__submore+0x22>
 800e88a:	f04f 30ff 	mov.w	r0, #4294967295
 800e88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e896:	63a3      	str	r3, [r4, #56]	; 0x38
 800e898:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e89c:	6360      	str	r0, [r4, #52]	; 0x34
 800e89e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e8a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e8a6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800e8aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e8ae:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800e8b2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e8b6:	6020      	str	r0, [r4, #0]
 800e8b8:	2000      	movs	r0, #0
 800e8ba:	e7e8      	b.n	800e88e <__submore+0x1e>
 800e8bc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e8be:	0077      	lsls	r7, r6, #1
 800e8c0:	463a      	mov	r2, r7
 800e8c2:	f000 f873 	bl	800e9ac <_realloc_r>
 800e8c6:	4605      	mov	r5, r0
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	d0de      	beq.n	800e88a <__submore+0x1a>
 800e8cc:	eb00 0806 	add.w	r8, r0, r6
 800e8d0:	4601      	mov	r1, r0
 800e8d2:	4632      	mov	r2, r6
 800e8d4:	4640      	mov	r0, r8
 800e8d6:	f7fc fe09 	bl	800b4ec <memcpy>
 800e8da:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e8de:	f8c4 8000 	str.w	r8, [r4]
 800e8e2:	e7e9      	b.n	800e8b8 <__submore+0x48>

0800e8e4 <__assert_func>:
 800e8e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8e6:	4614      	mov	r4, r2
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	4b09      	ldr	r3, [pc, #36]	; (800e910 <__assert_func+0x2c>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	4605      	mov	r5, r0
 800e8f0:	68d8      	ldr	r0, [r3, #12]
 800e8f2:	b14c      	cbz	r4, 800e908 <__assert_func+0x24>
 800e8f4:	4b07      	ldr	r3, [pc, #28]	; (800e914 <__assert_func+0x30>)
 800e8f6:	9100      	str	r1, [sp, #0]
 800e8f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e8fc:	4906      	ldr	r1, [pc, #24]	; (800e918 <__assert_func+0x34>)
 800e8fe:	462b      	mov	r3, r5
 800e900:	f000 f80e 	bl	800e920 <fiprintf>
 800e904:	f7fc fdac 	bl	800b460 <abort>
 800e908:	4b04      	ldr	r3, [pc, #16]	; (800e91c <__assert_func+0x38>)
 800e90a:	461c      	mov	r4, r3
 800e90c:	e7f3      	b.n	800e8f6 <__assert_func+0x12>
 800e90e:	bf00      	nop
 800e910:	2000003c 	.word	0x2000003c
 800e914:	0800f100 	.word	0x0800f100
 800e918:	0800f10d 	.word	0x0800f10d
 800e91c:	0800f13b 	.word	0x0800f13b

0800e920 <fiprintf>:
 800e920:	b40e      	push	{r1, r2, r3}
 800e922:	b503      	push	{r0, r1, lr}
 800e924:	4601      	mov	r1, r0
 800e926:	ab03      	add	r3, sp, #12
 800e928:	4805      	ldr	r0, [pc, #20]	; (800e940 <fiprintf+0x20>)
 800e92a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e92e:	6800      	ldr	r0, [r0, #0]
 800e930:	9301      	str	r3, [sp, #4]
 800e932:	f7ff fc5d 	bl	800e1f0 <_vfiprintf_r>
 800e936:	b002      	add	sp, #8
 800e938:	f85d eb04 	ldr.w	lr, [sp], #4
 800e93c:	b003      	add	sp, #12
 800e93e:	4770      	bx	lr
 800e940:	2000003c 	.word	0x2000003c

0800e944 <_fstat_r>:
 800e944:	b538      	push	{r3, r4, r5, lr}
 800e946:	4d07      	ldr	r5, [pc, #28]	; (800e964 <_fstat_r+0x20>)
 800e948:	2300      	movs	r3, #0
 800e94a:	4604      	mov	r4, r0
 800e94c:	4608      	mov	r0, r1
 800e94e:	4611      	mov	r1, r2
 800e950:	602b      	str	r3, [r5, #0]
 800e952:	f7f4 fb46 	bl	8002fe2 <_fstat>
 800e956:	1c43      	adds	r3, r0, #1
 800e958:	d102      	bne.n	800e960 <_fstat_r+0x1c>
 800e95a:	682b      	ldr	r3, [r5, #0]
 800e95c:	b103      	cbz	r3, 800e960 <_fstat_r+0x1c>
 800e95e:	6023      	str	r3, [r4, #0]
 800e960:	bd38      	pop	{r3, r4, r5, pc}
 800e962:	bf00      	nop
 800e964:	20002624 	.word	0x20002624

0800e968 <_isatty_r>:
 800e968:	b538      	push	{r3, r4, r5, lr}
 800e96a:	4d06      	ldr	r5, [pc, #24]	; (800e984 <_isatty_r+0x1c>)
 800e96c:	2300      	movs	r3, #0
 800e96e:	4604      	mov	r4, r0
 800e970:	4608      	mov	r0, r1
 800e972:	602b      	str	r3, [r5, #0]
 800e974:	f7f4 fb45 	bl	8003002 <_isatty>
 800e978:	1c43      	adds	r3, r0, #1
 800e97a:	d102      	bne.n	800e982 <_isatty_r+0x1a>
 800e97c:	682b      	ldr	r3, [r5, #0]
 800e97e:	b103      	cbz	r3, 800e982 <_isatty_r+0x1a>
 800e980:	6023      	str	r3, [r4, #0]
 800e982:	bd38      	pop	{r3, r4, r5, pc}
 800e984:	20002624 	.word	0x20002624

0800e988 <__ascii_mbtowc>:
 800e988:	b082      	sub	sp, #8
 800e98a:	b901      	cbnz	r1, 800e98e <__ascii_mbtowc+0x6>
 800e98c:	a901      	add	r1, sp, #4
 800e98e:	b142      	cbz	r2, 800e9a2 <__ascii_mbtowc+0x1a>
 800e990:	b14b      	cbz	r3, 800e9a6 <__ascii_mbtowc+0x1e>
 800e992:	7813      	ldrb	r3, [r2, #0]
 800e994:	600b      	str	r3, [r1, #0]
 800e996:	7812      	ldrb	r2, [r2, #0]
 800e998:	1e10      	subs	r0, r2, #0
 800e99a:	bf18      	it	ne
 800e99c:	2001      	movne	r0, #1
 800e99e:	b002      	add	sp, #8
 800e9a0:	4770      	bx	lr
 800e9a2:	4610      	mov	r0, r2
 800e9a4:	e7fb      	b.n	800e99e <__ascii_mbtowc+0x16>
 800e9a6:	f06f 0001 	mvn.w	r0, #1
 800e9aa:	e7f8      	b.n	800e99e <__ascii_mbtowc+0x16>

0800e9ac <_realloc_r>:
 800e9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9b0:	4680      	mov	r8, r0
 800e9b2:	4614      	mov	r4, r2
 800e9b4:	460e      	mov	r6, r1
 800e9b6:	b921      	cbnz	r1, 800e9c2 <_realloc_r+0x16>
 800e9b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9bc:	4611      	mov	r1, r2
 800e9be:	f7fc be17 	b.w	800b5f0 <_malloc_r>
 800e9c2:	b92a      	cbnz	r2, 800e9d0 <_realloc_r+0x24>
 800e9c4:	f7fc fda8 	bl	800b518 <_free_r>
 800e9c8:	4625      	mov	r5, r4
 800e9ca:	4628      	mov	r0, r5
 800e9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9d0:	f000 f828 	bl	800ea24 <_malloc_usable_size_r>
 800e9d4:	4284      	cmp	r4, r0
 800e9d6:	4607      	mov	r7, r0
 800e9d8:	d802      	bhi.n	800e9e0 <_realloc_r+0x34>
 800e9da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e9de:	d812      	bhi.n	800ea06 <_realloc_r+0x5a>
 800e9e0:	4621      	mov	r1, r4
 800e9e2:	4640      	mov	r0, r8
 800e9e4:	f7fc fe04 	bl	800b5f0 <_malloc_r>
 800e9e8:	4605      	mov	r5, r0
 800e9ea:	2800      	cmp	r0, #0
 800e9ec:	d0ed      	beq.n	800e9ca <_realloc_r+0x1e>
 800e9ee:	42bc      	cmp	r4, r7
 800e9f0:	4622      	mov	r2, r4
 800e9f2:	4631      	mov	r1, r6
 800e9f4:	bf28      	it	cs
 800e9f6:	463a      	movcs	r2, r7
 800e9f8:	f7fc fd78 	bl	800b4ec <memcpy>
 800e9fc:	4631      	mov	r1, r6
 800e9fe:	4640      	mov	r0, r8
 800ea00:	f7fc fd8a 	bl	800b518 <_free_r>
 800ea04:	e7e1      	b.n	800e9ca <_realloc_r+0x1e>
 800ea06:	4635      	mov	r5, r6
 800ea08:	e7df      	b.n	800e9ca <_realloc_r+0x1e>

0800ea0a <__ascii_wctomb>:
 800ea0a:	b149      	cbz	r1, 800ea20 <__ascii_wctomb+0x16>
 800ea0c:	2aff      	cmp	r2, #255	; 0xff
 800ea0e:	bf85      	ittet	hi
 800ea10:	238a      	movhi	r3, #138	; 0x8a
 800ea12:	6003      	strhi	r3, [r0, #0]
 800ea14:	700a      	strbls	r2, [r1, #0]
 800ea16:	f04f 30ff 	movhi.w	r0, #4294967295
 800ea1a:	bf98      	it	ls
 800ea1c:	2001      	movls	r0, #1
 800ea1e:	4770      	bx	lr
 800ea20:	4608      	mov	r0, r1
 800ea22:	4770      	bx	lr

0800ea24 <_malloc_usable_size_r>:
 800ea24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea28:	1f18      	subs	r0, r3, #4
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	bfbc      	itt	lt
 800ea2e:	580b      	ldrlt	r3, [r1, r0]
 800ea30:	18c0      	addlt	r0, r0, r3
 800ea32:	4770      	bx	lr

0800ea34 <_init>:
 800ea34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea36:	bf00      	nop
 800ea38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea3a:	bc08      	pop	{r3}
 800ea3c:	469e      	mov	lr, r3
 800ea3e:	4770      	bx	lr

0800ea40 <_fini>:
 800ea40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea42:	bf00      	nop
 800ea44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea46:	bc08      	pop	{r3}
 800ea48:	469e      	mov	lr, r3
 800ea4a:	4770      	bx	lr
