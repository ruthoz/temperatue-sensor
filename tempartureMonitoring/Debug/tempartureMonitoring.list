
tempartureMonitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800ea80  0800ea80  0001ea80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f178  0800f178  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800f178  0800f178  0001f178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f180  0800f180  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  0800f180  0800f180  0001f180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000020  0800f1a0  0800f1a0  0001f1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800f1c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002420  20000208  0800f3c4  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002628  0800f3c4  00022628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b892  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006592  00000000  00000000  0004bac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002100  00000000  00000000  00052058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ec8  00000000  00000000  00054158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dc0c  00000000  00000000  00056020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027abf  00000000  00000000  00083c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105865  00000000  00000000  000ab6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b0f50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f64  00000000  00000000  001b0fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ea64 	.word	0x0800ea64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800ea64 	.word	0x0800ea64

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <_ZN6ButtonD1Ev>:
	uint32_t _counter;
public:


	Button(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin);
    ~Button(){};
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <_ZN6ButtonC1EP12GPIO_TypeDeft>:
#include "Button.h"
#include "cmsis_os.h"

Button button(B2_GPIO_Port ,  B2_Pin);

Button::Button(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
 8000ee2:	b480      	push	{r7}
 8000ee4:	b085      	sub	sp, #20
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	4613      	mov	r3, r2
 8000eee:	80fb      	strh	r3, [r7, #6]
{
	_GPIOx = GPIOx;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
	_GPIO_Pin = GPIO_Pin;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	88fa      	ldrh	r2, [r7, #6]
 8000efa:	821a      	strh	r2, [r3, #16]
	_counter = 0;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
	_state = BUTTON_STATE_NONE;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
}
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <_ZN6Button9interruptEv>:

void Button::interrupt()
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b084      	sub	sp, #16
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
	uint32_t delayTick = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]

	if(HAL_GPIO_ReadPin(_GPIOx, _GPIO_Pin) == 0){
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68da      	ldr	r2, [r3, #12]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	8a1b      	ldrh	r3, [r3, #16]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	f003 f863 	bl	8003ff8 <HAL_GPIO_ReadPin>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	bf0c      	ite	eq
 8000f38:	2301      	moveq	r3, #1
 8000f3a:	2300      	movne	r3, #0
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d005      	beq.n	8000f4e <_ZN6Button9interruptEv+0x38>
		_timeTickOn = HAL_GetTick();
 8000f42:	f002 f971 	bl	8003228 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	605a      	str	r2, [r3, #4]
		}
		else{
			_state = BUTTON_STATE_WAITH;
		}
	}
}
 8000f4c:	e030      	b.n	8000fb0 <_ZN6Button9interruptEv+0x9a>
	else if(HAL_GPIO_ReadPin(_GPIOx, _GPIO_Pin) == 1){
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	8a1b      	ldrh	r3, [r3, #16]
 8000f56:	4619      	mov	r1, r3
 8000f58:	4610      	mov	r0, r2
 8000f5a:	f003 f84d 	bl	8003ff8 <HAL_GPIO_ReadPin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	bf0c      	ite	eq
 8000f64:	2301      	moveq	r3, #1
 8000f66:	2300      	movne	r3, #0
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d020      	beq.n	8000fb0 <_ZN6Button9interruptEv+0x9a>
		_timeTickOff = HAL_GetTick();
 8000f6e:	f002 f95b 	bl	8003228 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	609a      	str	r2, [r3, #8]
		delayTick = _timeTickOff - _timeTickOn;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	60fb      	str	r3, [r7, #12]
		if(delayTick > 500){
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f8a:	d903      	bls.n	8000f94 <_ZN6Button9interruptEv+0x7e>
			_state = BUTTON_LONG_PRESS;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2203      	movs	r2, #3
 8000f90:	701a      	strb	r2, [r3, #0]
}
 8000f92:	e00d      	b.n	8000fb0 <_ZN6Button9interruptEv+0x9a>
		else if (_state == BUTTON_STATE_WAITH) {
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d106      	bne.n	8000faa <_ZN6Button9interruptEv+0x94>
			_state = BUTTON_DOUBLE_PRESS;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	701a      	strb	r2, [r3, #0]
			_counter = 0;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
}
 8000fa8:	e002      	b.n	8000fb0 <_ZN6Button9interruptEv+0x9a>
			_state = BUTTON_STATE_WAITH;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <_ZN6Button8getStateEv>:

StateButton Button::getState(){
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	return _state;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <_ZN6Button10getCounterEv>:

uint32_t Button::getCounter(){
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	return _counter;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	695b      	ldr	r3, [r3, #20]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <_ZN6Button8setStateE11StateButon_>:

void Button::setState(StateButton state){
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	70fb      	strb	r3, [r7, #3]
	_state = state;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	78fa      	ldrb	r2, [r7, #3]
 8000ff8:	701a      	strb	r2, [r3, #0]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <_ZN6Button12resetCounterEv>:

void Button::resetCounter(){
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
	_counter = 0;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	615a      	str	r2, [r3, #20]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <_ZN6Button11plusCounterEv>:

void Button::plusCounter(){
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	_counter++;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	615a      	str	r2, [r3, #20]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <StartbuttonTak>:

extern "C" void StartbuttonTak()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StartbuttonTak */
  /* Infinite loop */
  while(1)
  {
	if (button.getState() == BUTTON_STATE_WAITH) {
 8001044:	4811      	ldr	r0, [pc, #68]	; (800108c <StartbuttonTak+0x4c>)
 8001046:	f7ff ffb7 	bl	8000fb8 <_ZN6Button8getStateEv>
 800104a:	4603      	mov	r3, r0
 800104c:	2b01      	cmp	r3, #1
 800104e:	bf0c      	ite	eq
 8001050:	2301      	moveq	r3, #1
 8001052:	2300      	movne	r3, #0
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d014      	beq.n	8001084 <StartbuttonTak+0x44>
		button.plusCounter();
 800105a:	480c      	ldr	r0, [pc, #48]	; (800108c <StartbuttonTak+0x4c>)
 800105c:	f7ff ffe0 	bl	8001020 <_ZN6Button11plusCounterEv>
	  	if(button.getCounter() > 200 ){
 8001060:	480a      	ldr	r0, [pc, #40]	; (800108c <StartbuttonTak+0x4c>)
 8001062:	f7ff ffb5 	bl	8000fd0 <_ZN6Button10getCounterEv>
 8001066:	4603      	mov	r3, r0
 8001068:	2bc8      	cmp	r3, #200	; 0xc8
 800106a:	bf8c      	ite	hi
 800106c:	2301      	movhi	r3, #1
 800106e:	2300      	movls	r3, #0
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d006      	beq.n	8001084 <StartbuttonTak+0x44>
	  		button.setState(BUTTON_STATE_PRESS);
 8001076:	2102      	movs	r1, #2
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <StartbuttonTak+0x4c>)
 800107a:	f7ff ffb5 	bl	8000fe8 <_ZN6Button8setStateE11StateButon_>
   	  	    button.resetCounter();
 800107e:	4803      	ldr	r0, [pc, #12]	; (800108c <StartbuttonTak+0x4c>)
 8001080:	f7ff ffc1 	bl	8001006 <_ZN6Button12resetCounterEv>
		    //printf("One \n\r");
	  	}
	}
    osDelay(1);
 8001084:	2001      	movs	r0, #1
 8001086:	f007 fd5f 	bl	8008b48 <osDelay>
	if (button.getState() == BUTTON_STATE_WAITH) {
 800108a:	e7db      	b.n	8001044 <StartbuttonTak+0x4>
 800108c:	20000224 	.word	0x20000224

08001090 <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END StartbuttonTak */
}
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d10b      	bne.n	80010b8 <_Z41__static_initialization_and_destruction_0ii+0x28>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d106      	bne.n	80010b8 <_Z41__static_initialization_and_destruction_0ii+0x28>
Button button(B2_GPIO_Port ,  B2_Pin);
 80010aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ae:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80010b2:	4809      	ldr	r0, [pc, #36]	; (80010d8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80010b4:	f7ff ff15 	bl	8000ee2 <_ZN6ButtonC1EP12GPIO_TypeDeft>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d107      	bne.n	80010ce <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d102      	bne.n	80010ce <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80010ca:	f7ff feff 	bl	8000ecc <_ZN6ButtonD1Ev>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000224 	.word	0x20000224

080010dc <_GLOBAL__sub_I_button>:
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
 80010e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff ffd3 	bl	8001090 <_Z41__static_initialization_and_destruction_0ii>
 80010ea:	bd80      	pop	{r7, pc}

080010ec <_GLOBAL__sub_D_button>:
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff ffcb 	bl	8001090 <_Z41__static_initialization_and_destruction_0ii>
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_ZN6BuzzerC1EP17TIM_HandleTypeDef>:


public:


	Buzzer(TIM_HandleTypeDef * timer){
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	_timer = timer;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	601a      	str	r2, [r3, #0]
	_noteBuzzer [0] = 390;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8001112:	609a      	str	r2, [r3, #8]
	_noteBuzzer [1] = 100;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2264      	movs	r2, #100	; 0x64
 8001118:	60da      	str	r2, [r3, #12]
	_state = MUSIC_OFF;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	711a      	strb	r2, [r3, #4]
	_sizeOfMusic = (sizeof(_noteBuzzer) / sizeof(_noteBuzzer[0]));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2202      	movs	r2, #2
 8001124:	611a      	str	r2, [r3, #16]
	_currentNote= 0;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	751a      	strb	r2, [r3, #20]
	}
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <_ZN6BuzzerD1Ev>:
	~Buzzer(){};
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_ZN6Buzzer8playNoteEv>:
	}
	playNote();
}

void Buzzer::playNote()
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(_timer,0);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(_timer, _noteBuzzer[_currentNote]);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7d1b      	ldrb	r3, [r3, #20]
 8001166:	461a      	mov	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3202      	adds	r2, #2
 800116c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7d1b      	ldrb	r3, [r3, #20]
 800117c:	461a      	mov	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3202      	adds	r2, #2
 8001182:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(_timer, TIM_CHANNEL_1, (_noteBuzzer[_currentNote]/2));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7d1b      	ldrb	r3, [r3, #20]
 8001190:	461a      	mov	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3202      	adds	r2, #2
 8001196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119a:	0fda      	lsrs	r2, r3, #31
 800119c:	4413      	add	r3, r2
 800119e:	105b      	asrs	r3, r3, #1
 80011a0:	461a      	mov	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <_ZN6Buzzer2onEv>:


void Buzzer::on(){
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
	_state = MUSIC_ON;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	711a      	strb	r2, [r3, #4]
	HAL_TIM_Base_Start_IT(_timer);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f005 f813 	bl	80061f4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(_timer, TIM_CHANNEL_1);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f005 f903 	bl	80063e0 <HAL_TIM_PWM_Start_IT>
	playNote();
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ffb8 	bl	8001150 <_ZN6Buzzer8playNoteEv>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_ZN6Buzzer3offEv>:

void Buzzer::off(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	_state = MUSIC_OFF;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	711a      	strb	r2, [r3, #4]
	HAL_TIM_Base_Stop_IT(_timer);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f005 f86a 	bl	80062d4 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(_timer, TIM_CHANNEL_1);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f005 fa3e 	bl	8006688 <HAL_TIM_PWM_Stop_IT>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <_Z41__static_initialization_and_destruction_0ii>:
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d108      	bne.n	8001236 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800122a:	4293      	cmp	r3, r2
 800122c:	d103      	bne.n	8001236 <_Z41__static_initialization_and_destruction_0ii+0x22>
Buzzer buzzer(&htim3);
 800122e:	4909      	ldr	r1, [pc, #36]	; (8001254 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001232:	f7ff ff63 	bl	80010fc <_ZN6BuzzerC1EP17TIM_HandleTypeDef>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <_Z41__static_initialization_and_destruction_0ii+0x38>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001242:	4293      	cmp	r3, r2
 8001244:	d102      	bne.n	800124c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001246:	4804      	ldr	r0, [pc, #16]	; (8001258 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001248:	f7ff ff77 	bl	800113a <_ZN6BuzzerD1Ev>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200003b4 	.word	0x200003b4
 8001258:	2000023c 	.word	0x2000023c

0800125c <_GLOBAL__sub_I_buzzer>:
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
 8001260:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff ffd5 	bl	8001214 <_Z41__static_initialization_and_destruction_0ii>
 800126a:	bd80      	pop	{r7, pc}

0800126c <_GLOBAL__sub_D_buzzer>:
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
 8001270:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff ffcd 	bl	8001214 <_Z41__static_initialization_and_destruction_0ii>
 800127a:	bd80      	pop	{r7, pc}

0800127c <_ZN10CliCommandC1EPKc>:
class CliCommand {
private:
	char _name[MAX_NAME_LEN];
public:
	CliCommand(){}
	CliCommand(const char* name){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <_ZN10CliCommandC1EPKc+0x28>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	601a      	str	r2, [r3, #0]
		strcpy(_name, name);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3304      	adds	r3, #4
 8001290:	6839      	ldr	r1, [r7, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f00a fff5 	bl	800c282 <strcpy>
	}
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	0800ec54 	.word	0x0800ec54

080012a8 <_ZN10CliCommandD1Ev>:
	virtual void doCommand(const char* param) = 0;
	virtual ~CliCommand(){}
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <_ZN10CliCommandD1Ev+0x1c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	0800ec54 	.word	0x0800ec54

080012c8 <_ZN10CliCommandD0Ev>:
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ffe9 	bl	80012a8 <_ZN10CliCommandD1Ev>
 80012d6:	2118      	movs	r1, #24
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f00a f8a7 	bl	800b42c <_ZdlPvj>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_ZN8LedOnCmdC1EPKcP3Led>:
extern CliContainer CliContainer;

class LedOnCmd : public CliCommand {
	Led *_led;
public:
	LedOnCmd (const char * name, Led * led) : CliCommand(name), _led(led) {}
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	68b9      	ldr	r1, [r7, #8]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ffbf 	bl	800127c <_ZN10CliCommandC1EPKc>
 80012fe:	4a05      	ldr	r2, [pc, #20]	; (8001314 <_ZN8LedOnCmdC1EPKcP3Led+0x2c>)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	619a      	str	r2, [r3, #24]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	0800ec40 	.word	0x0800ec40

08001318 <_ZN8LedOnCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
		_led->on();
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	4618      	mov	r0, r3
 8001328:	f001 f832 	bl	8002390 <_ZN3Led2onEv>
	}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <_ZN9LedOffCmdC1EPKcP3Led>:
};

class LedOffCmd : public CliCommand {
	Led *_led;
public:
	LedOffCmd (const char * name, Led * led) : CliCommand(name), _led(led) {}
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	68b9      	ldr	r1, [r7, #8]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff99 	bl	800127c <_ZN10CliCommandC1EPKc>
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <_ZN9LedOffCmdC1EPKcP3Led+0x2c>)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	619a      	str	r2, [r3, #24]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	0800ec2c 	.word	0x0800ec2c

08001364 <_ZN9LedOffCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
		_led->off();
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	4618      	mov	r0, r3
 8001374:	f001 f81f 	bl	80023b6 <_ZN3Led3offEv>
	}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_ZN11LedBlinkCmdC1EPKcP3Led>:
};

class LedBlinkCmd : public CliCommand {
	Led *_led;
public:
	LedBlinkCmd (const char * name, Led * led) : CliCommand(name), _led(led) {}
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	68b9      	ldr	r1, [r7, #8]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff73 	bl	800127c <_ZN10CliCommandC1EPKc>
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <_ZN11LedBlinkCmdC1EPKcP3Led+0x2c>)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	619a      	str	r2, [r3, #24]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	0800ec18 	.word	0x0800ec18

080013b0 <_ZN11LedBlinkCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
		_led->blink();
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	4618      	mov	r0, r3
 80013c0:	f001 f80c 	bl	80023dc <_ZN3Led5blinkEv>
	}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <_ZN11BuzzerOnCmdC1EPKcP6Buzzer>:
};

class BuzzerOnCmd : public CliCommand {
	Buzzer *_buzzer;
public:
	BuzzerOnCmd (const char * name, Buzzer* buzzer) : CliCommand(name), _buzzer(buzzer) {}
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	68b9      	ldr	r1, [r7, #8]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff4d 	bl	800127c <_ZN10CliCommandC1EPKc>
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <_ZN11BuzzerOnCmdC1EPKcP6Buzzer+0x2c>)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	619a      	str	r2, [r3, #24]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	0800ec04 	.word	0x0800ec04

080013fc <_ZN11BuzzerOnCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
		_buzzer->on();
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fed3 	bl	80011b6 <_ZN6Buzzer2onEv>
	}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_ZN12BuzzerOffCmdC1EPKcP6Buzzer>:
};

class BuzzerOffCmd : public CliCommand {
	Buzzer *_buzzer;
public:
	BuzzerOffCmd (const char * name, Buzzer* buzzer) : CliCommand(name), _buzzer(buzzer) {}
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	68b9      	ldr	r1, [r7, #8]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff27 	bl	800127c <_ZN10CliCommandC1EPKc>
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <_ZN12BuzzerOffCmdC1EPKcP6Buzzer+0x2c>)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	619a      	str	r2, [r3, #24]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	0800ebf0 	.word	0x0800ebf0

08001448 <_ZN12BuzzerOffCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
		_buzzer->off();
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fec6 	bl	80011e8 <_ZN6Buzzer3offEv>
	}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <_ZN14getDataTimeCmdC1EPKcP3Rtc>:
};

class getDataTimeCmd : public CliCommand {
	Rtc *_rtc;
public:
	getDataTimeCmd (const char * name, Rtc* rtc) : CliCommand(name), _rtc(rtc) {}
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	68b9      	ldr	r1, [r7, #8]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff01 	bl	800127c <_ZN10CliCommandC1EPKc>
 800147a:	4a05      	ldr	r2, [pc, #20]	; (8001490 <_ZN14getDataTimeCmdC1EPKcP3Rtc+0x2c>)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	619a      	str	r2, [r3, #24]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	0800ebdc 	.word	0x0800ebdc

08001494 <_ZN14getDataTimeCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	b08f      	sub	sp, #60	; 0x3c
 8001498:	af04      	add	r7, sp, #16
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
		DateTime dateTime;
		_rtc->getTime(&dateTime);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	f107 020c 	add.w	r2, r7, #12
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 f88f 	bl	80025cc <_ZN3Rtc7getTimeEP9DateTime_>
		printf("%02d:%02d:%02d-%d-%02d/%02d/%02d\r\n",
 80014ae:	697c      	ldr	r4, [r7, #20]
 80014b0:	693d      	ldr	r5, [r7, #16]
 80014b2:	68fe      	ldr	r6, [r7, #12]
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	69fa      	ldr	r2, [r7, #28]
 80014b8:	6a39      	ldr	r1, [r7, #32]
 80014ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014bc:	9003      	str	r0, [sp, #12]
 80014be:	9102      	str	r1, [sp, #8]
 80014c0:	9201      	str	r2, [sp, #4]
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	4633      	mov	r3, r6
 80014c6:	462a      	mov	r2, r5
 80014c8:	4621      	mov	r1, r4
 80014ca:	4803      	ldr	r0, [pc, #12]	; (80014d8 <_ZN14getDataTimeCmd9doCommandEPKc+0x44>)
 80014cc:	f00a fd86 	bl	800bfdc <iprintf>
						dateTime.hours, dateTime.min, dateTime.sec,
						dateTime.weekDay,
						dateTime.day, dateTime.month, dateTime.year);
	}
 80014d0:	bf00      	nop
 80014d2:	372c      	adds	r7, #44	; 0x2c
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d8:	0800ea80 	.word	0x0800ea80

080014dc <_ZN14setDataTimeCmdC1EPKcP3Rtc>:
};

class setDataTimeCmd : public CliCommand {
	Rtc *_rtc;
public:
	setDataTimeCmd (const char * name, Rtc* rtc) : CliCommand(name), _rtc(rtc) {}
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	68b9      	ldr	r1, [r7, #8]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fec5 	bl	800127c <_ZN10CliCommandC1EPKc>
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <_ZN14setDataTimeCmdC1EPKcP3Rtc+0x2c>)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	619a      	str	r2, [r3, #24]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	0800ebc8 	.word	0x0800ebc8

0800150c <_ZN14setDataTimeCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
		//DateTime dateTime;
	}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <_ZN18setCriticalTempCmdC1EPKcP5Flash>:

class setCriticalTempCmd : public CliCommand {
	Flash* _flash;

public:
	setCriticalTempCmd (const char * name, Flash* flash) : CliCommand(name), _flash(flash) {}
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fea1 	bl	800127c <_ZN10CliCommandC1EPKc>
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <_ZN18setCriticalTempCmdC1EPKcP5Flash+0x2c>)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	619a      	str	r2, [r3, #24]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	0800ebb4 	.word	0x0800ebb4

08001554 <_ZN18setCriticalTempCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
		uint16_t val;
		val = atoi(param);
 800155e:	6838      	ldr	r0, [r7, #0]
 8001560:	f009 ff9d 	bl	800b49e <atoi>
 8001564:	4603      	mov	r3, r0
 8001566:	81fb      	strh	r3, [r7, #14]
		Temprature.criticalTemp = val;
 8001568:	4a06      	ldr	r2, [pc, #24]	; (8001584 <_ZN18setCriticalTempCmd9doCommandEPKc+0x30>)
 800156a:	89fb      	ldrh	r3, [r7, #14]
 800156c:	8013      	strh	r3, [r2, #0]
		_flash->writh(&Temprature);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	4904      	ldr	r1, [pc, #16]	; (8001584 <_ZN18setCriticalTempCmd9doCommandEPKc+0x30>)
 8001574:	4618      	mov	r0, r3
 8001576:	f000 fe5d 	bl	8002234 <_ZN5Flash5writhEPv>
	}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000354 	.word	0x20000354

08001588 <_ZN17setWarningTempCmdC1EPKcP5Flash>:

class setWarningTempCmd : public CliCommand {
	Flash* _flash;

public:
	setWarningTempCmd (const char * name, Flash* flash) : CliCommand(name), _flash(flash) {}
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	68b9      	ldr	r1, [r7, #8]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fe6f 	bl	800127c <_ZN10CliCommandC1EPKc>
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <_ZN17setWarningTempCmdC1EPKcP5Flash+0x2c>)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	619a      	str	r2, [r3, #24]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	0800eba0 	.word	0x0800eba0

080015b8 <_ZN17setWarningTempCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
		uint16_t val;
		val = atoi(param);
 80015c2:	6838      	ldr	r0, [r7, #0]
 80015c4:	f009 ff6b 	bl	800b49e <atoi>
 80015c8:	4603      	mov	r3, r0
 80015ca:	81fb      	strh	r3, [r7, #14]
		Temprature.warningTemp = val;
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <_ZN17setWarningTempCmd9doCommandEPKc+0x30>)
 80015ce:	89fb      	ldrh	r3, [r7, #14]
 80015d0:	8053      	strh	r3, [r2, #2]
		_flash->writh(&Temprature);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	4904      	ldr	r1, [pc, #16]	; (80015e8 <_ZN17setWarningTempCmd9doCommandEPKc+0x30>)
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fe2b 	bl	8002234 <_ZN5Flash5writhEPv>
	}
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000354 	.word	0x20000354

080015ec <_ZN18getCriticalTempCmdC1EPKcP5Flash>:

class getCriticalTempCmd : public CliCommand {
	Flash* _flash;

public:
	getCriticalTempCmd (const char * name, Flash* flash) : CliCommand(name), _flash(flash) {}
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	68b9      	ldr	r1, [r7, #8]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fe3d 	bl	800127c <_ZN10CliCommandC1EPKc>
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <_ZN18getCriticalTempCmdC1EPKcP5Flash+0x2c>)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	619a      	str	r2, [r3, #24]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	0800eb8c 	.word	0x0800eb8c

0800161c <_ZN18getCriticalTempCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
		_flash->read(&Temprature);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	4904      	ldr	r1, [pc, #16]	; (800163c <_ZN18getCriticalTempCmd9doCommandEPKc+0x20>)
 800162c:	4618      	mov	r0, r3
 800162e:	f000 fe29 	bl	8002284 <_ZN5Flash4readEP14_thresholdTemp>
	}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000354 	.word	0x20000354

08001640 <_Z7CliInitv>:
};


void CliInit()
{
 8001640:	b598      	push	{r3, r4, r7, lr}
 8001642:	af00      	add	r7, sp, #0
	//////////////////ledB//////////////////////////////
	CliContainer.add (new LedOnCmd("ledOn", &ledB));
 8001644:	201c      	movs	r0, #28
 8001646:	f009 fef3 	bl	800b430 <_Znwj>
 800164a:	4603      	mov	r3, r0
 800164c:	461c      	mov	r4, r3
 800164e:	4a44      	ldr	r2, [pc, #272]	; (8001760 <_Z7CliInitv+0x120>)
 8001650:	4944      	ldr	r1, [pc, #272]	; (8001764 <_Z7CliInitv+0x124>)
 8001652:	4620      	mov	r0, r4
 8001654:	f7ff fe48 	bl	80012e8 <_ZN8LedOnCmdC1EPKcP3Led>
 8001658:	4621      	mov	r1, r4
 800165a:	4843      	ldr	r0, [pc, #268]	; (8001768 <_Z7CliInitv+0x128>)
 800165c:	f000 fa33 	bl	8001ac6 <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new LedOffCmd("ledOff", &ledB));
 8001660:	201c      	movs	r0, #28
 8001662:	f009 fee5 	bl	800b430 <_Znwj>
 8001666:	4603      	mov	r3, r0
 8001668:	461c      	mov	r4, r3
 800166a:	4a3d      	ldr	r2, [pc, #244]	; (8001760 <_Z7CliInitv+0x120>)
 800166c:	493f      	ldr	r1, [pc, #252]	; (800176c <_Z7CliInitv+0x12c>)
 800166e:	4620      	mov	r0, r4
 8001670:	f7ff fe60 	bl	8001334 <_ZN9LedOffCmdC1EPKcP3Led>
 8001674:	4621      	mov	r1, r4
 8001676:	483c      	ldr	r0, [pc, #240]	; (8001768 <_Z7CliInitv+0x128>)
 8001678:	f000 fa25 	bl	8001ac6 <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new LedBlinkCmd("ledBlink", &ledB));
 800167c:	201c      	movs	r0, #28
 800167e:	f009 fed7 	bl	800b430 <_Znwj>
 8001682:	4603      	mov	r3, r0
 8001684:	461c      	mov	r4, r3
 8001686:	4a36      	ldr	r2, [pc, #216]	; (8001760 <_Z7CliInitv+0x120>)
 8001688:	4939      	ldr	r1, [pc, #228]	; (8001770 <_Z7CliInitv+0x130>)
 800168a:	4620      	mov	r0, r4
 800168c:	f7ff fe78 	bl	8001380 <_ZN11LedBlinkCmdC1EPKcP3Led>
 8001690:	4621      	mov	r1, r4
 8001692:	4835      	ldr	r0, [pc, #212]	; (8001768 <_Z7CliInitv+0x128>)
 8001694:	f000 fa17 	bl	8001ac6 <_ZN12CliContainer3addEP10CliCommand>
	////////////////////buzzer///////////////////////////
	CliContainer.add (new BuzzerOnCmd("BOn", &buzzer));
 8001698:	201c      	movs	r0, #28
 800169a:	f009 fec9 	bl	800b430 <_Znwj>
 800169e:	4603      	mov	r3, r0
 80016a0:	461c      	mov	r4, r3
 80016a2:	4a34      	ldr	r2, [pc, #208]	; (8001774 <_Z7CliInitv+0x134>)
 80016a4:	4934      	ldr	r1, [pc, #208]	; (8001778 <_Z7CliInitv+0x138>)
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7ff fe90 	bl	80013cc <_ZN11BuzzerOnCmdC1EPKcP6Buzzer>
 80016ac:	4621      	mov	r1, r4
 80016ae:	482e      	ldr	r0, [pc, #184]	; (8001768 <_Z7CliInitv+0x128>)
 80016b0:	f000 fa09 	bl	8001ac6 <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new BuzzerOffCmd("BOff", &buzzer));
 80016b4:	201c      	movs	r0, #28
 80016b6:	f009 febb 	bl	800b430 <_Znwj>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461c      	mov	r4, r3
 80016be:	4a2d      	ldr	r2, [pc, #180]	; (8001774 <_Z7CliInitv+0x134>)
 80016c0:	492e      	ldr	r1, [pc, #184]	; (800177c <_Z7CliInitv+0x13c>)
 80016c2:	4620      	mov	r0, r4
 80016c4:	f7ff fea8 	bl	8001418 <_ZN12BuzzerOffCmdC1EPKcP6Buzzer>
 80016c8:	4621      	mov	r1, r4
 80016ca:	4827      	ldr	r0, [pc, #156]	; (8001768 <_Z7CliInitv+0x128>)
 80016cc:	f000 f9fb 	bl	8001ac6 <_ZN12CliContainer3addEP10CliCommand>

	/////////////////////RTC//////////////////////////
	CliContainer.add (new getDataTimeCmd("getTime", &rtc));
 80016d0:	201c      	movs	r0, #28
 80016d2:	f009 fead 	bl	800b430 <_Znwj>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461c      	mov	r4, r3
 80016da:	4a29      	ldr	r2, [pc, #164]	; (8001780 <_Z7CliInitv+0x140>)
 80016dc:	4929      	ldr	r1, [pc, #164]	; (8001784 <_Z7CliInitv+0x144>)
 80016de:	4620      	mov	r0, r4
 80016e0:	f7ff fec0 	bl	8001464 <_ZN14getDataTimeCmdC1EPKcP3Rtc>
 80016e4:	4621      	mov	r1, r4
 80016e6:	4820      	ldr	r0, [pc, #128]	; (8001768 <_Z7CliInitv+0x128>)
 80016e8:	f000 f9ed 	bl	8001ac6 <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new setDataTimeCmd("setTime", &rtc));
 80016ec:	201c      	movs	r0, #28
 80016ee:	f009 fe9f 	bl	800b430 <_Znwj>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461c      	mov	r4, r3
 80016f6:	4a22      	ldr	r2, [pc, #136]	; (8001780 <_Z7CliInitv+0x140>)
 80016f8:	4923      	ldr	r1, [pc, #140]	; (8001788 <_Z7CliInitv+0x148>)
 80016fa:	4620      	mov	r0, r4
 80016fc:	f7ff feee 	bl	80014dc <_ZN14setDataTimeCmdC1EPKcP3Rtc>
 8001700:	4621      	mov	r1, r4
 8001702:	4819      	ldr	r0, [pc, #100]	; (8001768 <_Z7CliInitv+0x128>)
 8001704:	f000 f9df 	bl	8001ac6 <_ZN12CliContainer3addEP10CliCommand>

	////////////////////flash/////////////////////////
	CliContainer.add (new setCriticalTempCmd("setCritical", &flash));
 8001708:	201c      	movs	r0, #28
 800170a:	f009 fe91 	bl	800b430 <_Znwj>
 800170e:	4603      	mov	r3, r0
 8001710:	461c      	mov	r4, r3
 8001712:	4a1e      	ldr	r2, [pc, #120]	; (800178c <_Z7CliInitv+0x14c>)
 8001714:	491e      	ldr	r1, [pc, #120]	; (8001790 <_Z7CliInitv+0x150>)
 8001716:	4620      	mov	r0, r4
 8001718:	f7ff ff04 	bl	8001524 <_ZN18setCriticalTempCmdC1EPKcP5Flash>
 800171c:	4621      	mov	r1, r4
 800171e:	4812      	ldr	r0, [pc, #72]	; (8001768 <_Z7CliInitv+0x128>)
 8001720:	f000 f9d1 	bl	8001ac6 <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new setWarningTempCmd("setWarning", &flash));
 8001724:	201c      	movs	r0, #28
 8001726:	f009 fe83 	bl	800b430 <_Znwj>
 800172a:	4603      	mov	r3, r0
 800172c:	461c      	mov	r4, r3
 800172e:	4a17      	ldr	r2, [pc, #92]	; (800178c <_Z7CliInitv+0x14c>)
 8001730:	4918      	ldr	r1, [pc, #96]	; (8001794 <_Z7CliInitv+0x154>)
 8001732:	4620      	mov	r0, r4
 8001734:	f7ff ff28 	bl	8001588 <_ZN17setWarningTempCmdC1EPKcP5Flash>
 8001738:	4621      	mov	r1, r4
 800173a:	480b      	ldr	r0, [pc, #44]	; (8001768 <_Z7CliInitv+0x128>)
 800173c:	f000 f9c3 	bl	8001ac6 <_ZN12CliContainer3addEP10CliCommand>

	CliContainer.add (new getCriticalTempCmd("getCritical", &flash));
 8001740:	201c      	movs	r0, #28
 8001742:	f009 fe75 	bl	800b430 <_Znwj>
 8001746:	4603      	mov	r3, r0
 8001748:	461c      	mov	r4, r3
 800174a:	4a10      	ldr	r2, [pc, #64]	; (800178c <_Z7CliInitv+0x14c>)
 800174c:	4912      	ldr	r1, [pc, #72]	; (8001798 <_Z7CliInitv+0x158>)
 800174e:	4620      	mov	r0, r4
 8001750:	f7ff ff4c 	bl	80015ec <_ZN18getCriticalTempCmdC1EPKcP5Flash>
 8001754:	4621      	mov	r1, r4
 8001756:	4804      	ldr	r0, [pc, #16]	; (8001768 <_Z7CliInitv+0x128>)
 8001758:	f000 f9b5 	bl	8001ac6 <_ZN12CliContainer3addEP10CliCommand>

}
 800175c:	bf00      	nop
 800175e:	bd98      	pop	{r3, r4, r7, pc}
 8001760:	20000348 	.word	0x20000348
 8001764:	0800eaa4 	.word	0x0800eaa4
 8001768:	20000254 	.word	0x20000254
 800176c:	0800eaac 	.word	0x0800eaac
 8001770:	0800eab4 	.word	0x0800eab4
 8001774:	2000023c 	.word	0x2000023c
 8001778:	0800eac0 	.word	0x0800eac0
 800177c:	0800eac4 	.word	0x0800eac4
 8001780:	20000358 	.word	0x20000358
 8001784:	0800eacc 	.word	0x0800eacc
 8001788:	0800ead4 	.word	0x0800ead4
 800178c:	20000340 	.word	0x20000340
 8001790:	0800eadc 	.word	0x0800eadc
 8001794:	0800eae8 	.word	0x0800eae8
 8001798:	0800eaf4 	.word	0x0800eaf4

0800179c <_ZN18getCriticalTempCmdD1Ev>:
class getCriticalTempCmd : public CliCommand {
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	4a05      	ldr	r2, [pc, #20]	; (80017bc <_ZN18getCriticalTempCmdD1Ev+0x20>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fd7b 	bl	80012a8 <_ZN10CliCommandD1Ev>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	0800eb8c 	.word	0x0800eb8c

080017c0 <_ZN18getCriticalTempCmdD0Ev>:
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ffe7 	bl	800179c <_ZN18getCriticalTempCmdD1Ev>
 80017ce:	211c      	movs	r1, #28
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f009 fe2b 	bl	800b42c <_ZdlPvj>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_ZN17setWarningTempCmdD1Ev>:
class setWarningTempCmd : public CliCommand {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	4a05      	ldr	r2, [pc, #20]	; (8001800 <_ZN17setWarningTempCmdD1Ev+0x20>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fd59 	bl	80012a8 <_ZN10CliCommandD1Ev>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	0800eba0 	.word	0x0800eba0

08001804 <_ZN17setWarningTempCmdD0Ev>:
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ffe7 	bl	80017e0 <_ZN17setWarningTempCmdD1Ev>
 8001812:	211c      	movs	r1, #28
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f009 fe09 	bl	800b42c <_ZdlPvj>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_ZN18setCriticalTempCmdD1Ev>:
class setCriticalTempCmd : public CliCommand {
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	4a05      	ldr	r2, [pc, #20]	; (8001844 <_ZN18setCriticalTempCmdD1Ev+0x20>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fd37 	bl	80012a8 <_ZN10CliCommandD1Ev>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	0800ebb4 	.word	0x0800ebb4

08001848 <_ZN18setCriticalTempCmdD0Ev>:
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ffe7 	bl	8001824 <_ZN18setCriticalTempCmdD1Ev>
 8001856:	211c      	movs	r1, #28
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f009 fde7 	bl	800b42c <_ZdlPvj>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_ZN14setDataTimeCmdD1Ev>:
class setDataTimeCmd : public CliCommand {
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	4a05      	ldr	r2, [pc, #20]	; (8001888 <_ZN14setDataTimeCmdD1Ev+0x20>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fd15 	bl	80012a8 <_ZN10CliCommandD1Ev>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	0800ebc8 	.word	0x0800ebc8

0800188c <_ZN14setDataTimeCmdD0Ev>:
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ffe7 	bl	8001868 <_ZN14setDataTimeCmdD1Ev>
 800189a:	211c      	movs	r1, #28
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f009 fdc5 	bl	800b42c <_ZdlPvj>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_ZN14getDataTimeCmdD1Ev>:
class getDataTimeCmd : public CliCommand {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	4a05      	ldr	r2, [pc, #20]	; (80018cc <_ZN14getDataTimeCmdD1Ev+0x20>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fcf3 	bl	80012a8 <_ZN10CliCommandD1Ev>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	0800ebdc 	.word	0x0800ebdc

080018d0 <_ZN14getDataTimeCmdD0Ev>:
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ffe7 	bl	80018ac <_ZN14getDataTimeCmdD1Ev>
 80018de:	211c      	movs	r1, #28
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f009 fda3 	bl	800b42c <_ZdlPvj>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <_ZN12BuzzerOffCmdD1Ev>:
class BuzzerOffCmd : public CliCommand {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	4a05      	ldr	r2, [pc, #20]	; (8001910 <_ZN12BuzzerOffCmdD1Ev+0x20>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fcd1 	bl	80012a8 <_ZN10CliCommandD1Ev>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	0800ebf0 	.word	0x0800ebf0

08001914 <_ZN12BuzzerOffCmdD0Ev>:
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ffe7 	bl	80018f0 <_ZN12BuzzerOffCmdD1Ev>
 8001922:	211c      	movs	r1, #28
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f009 fd81 	bl	800b42c <_ZdlPvj>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <_ZN11BuzzerOnCmdD1Ev>:
class BuzzerOnCmd : public CliCommand {
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	4a05      	ldr	r2, [pc, #20]	; (8001954 <_ZN11BuzzerOnCmdD1Ev+0x20>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fcaf 	bl	80012a8 <_ZN10CliCommandD1Ev>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	0800ec04 	.word	0x0800ec04

08001958 <_ZN11BuzzerOnCmdD0Ev>:
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ffe7 	bl	8001934 <_ZN11BuzzerOnCmdD1Ev>
 8001966:	211c      	movs	r1, #28
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f009 fd5f 	bl	800b42c <_ZdlPvj>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <_ZN11LedBlinkCmdD1Ev>:
class LedBlinkCmd : public CliCommand {
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	4a05      	ldr	r2, [pc, #20]	; (8001998 <_ZN11LedBlinkCmdD1Ev+0x20>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fc8d 	bl	80012a8 <_ZN10CliCommandD1Ev>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	0800ec18 	.word	0x0800ec18

0800199c <_ZN11LedBlinkCmdD0Ev>:
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ffe7 	bl	8001978 <_ZN11LedBlinkCmdD1Ev>
 80019aa:	211c      	movs	r1, #28
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f009 fd3d 	bl	800b42c <_ZdlPvj>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_ZN9LedOffCmdD1Ev>:
class LedOffCmd : public CliCommand {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	4a05      	ldr	r2, [pc, #20]	; (80019dc <_ZN9LedOffCmdD1Ev+0x20>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fc6b 	bl	80012a8 <_ZN10CliCommandD1Ev>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	0800ec2c 	.word	0x0800ec2c

080019e0 <_ZN9LedOffCmdD0Ev>:
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ffe7 	bl	80019bc <_ZN9LedOffCmdD1Ev>
 80019ee:	211c      	movs	r1, #28
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f009 fd1b 	bl	800b42c <_ZdlPvj>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <_ZN8LedOnCmdD1Ev>:
class LedOnCmd : public CliCommand {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	4a05      	ldr	r2, [pc, #20]	; (8001a20 <_ZN8LedOnCmdD1Ev+0x20>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fc49 	bl	80012a8 <_ZN10CliCommandD1Ev>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	0800ec40 	.word	0x0800ec40

08001a24 <_ZN8LedOnCmdD0Ev>:
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ffe7 	bl	8001a00 <_ZN8LedOnCmdD1Ev>
 8001a32:	211c      	movs	r1, #28
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f009 fcf9 	bl	800b42c <_ZdlPvj>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_ZNK10CliCommand7getNameEv>:
	const char* getName ()const {
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
		return _name;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3304      	adds	r3, #4
	}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_ZN12CliContainerC1Ev>:

#include "CliContainer.h"

CliContainer CliContainer;

CliContainer::CliContainer()
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
{
	_counter = 0;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	651a      	str	r2, [r3, #80]	; 0x50
	memset(_CliCommand, 0, sizeof(CliCommand*) * MAX_CLI);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2250      	movs	r2, #80	; 0x50
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f009 fd61 	bl	800b538 <memset>
}
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_ZN12CliContainerD1Ev>:

CliContainer::~CliContainer()
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
{
	for (int i = 0; i < MAX_CLI; i++) {
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b13      	cmp	r3, #19
 8001a90:	dc14      	bgt.n	8001abc <_ZN12CliContainerD1Ev+0x3c>
		if (_CliCommand[i] != NULL) {
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00a      	beq.n	8001ab4 <_ZN12CliContainerD1Ev+0x34>
			delete _CliCommand[i];
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d004      	beq.n	8001ab4 <_ZN12CliContainerD1Ev+0x34>
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	3208      	adds	r2, #8
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	4790      	blx	r2
	for (int i = 0; i < MAX_CLI; i++) {
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	e7e7      	b.n	8001a8c <_ZN12CliContainerD1Ev+0xc>
		}
	}
}
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_ZN12CliContainer3addEP10CliCommand>:

void CliContainer::add(CliCommand* pCliCommand)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	6039      	str	r1, [r7, #0]
	if (_counter < MAX_CLI) {
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ad4:	2b13      	cmp	r3, #19
 8001ad6:	dc0a      	bgt.n	8001aee <_ZN12CliContainer3addEP10CliCommand+0x28>
		_CliCommand[_counter] = pCliCommand;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6839      	ldr	r1, [r7, #0]
 8001ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		_counter++;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	651a      	str	r2, [r3, #80]	; 0x50
	}
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <_ZN12CliContainer4CallEPcS0_>:

int CliContainer::getCounter(){
	return _counter;
}

int CliContainer::Call (char* cmdname, char* param ){
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b086      	sub	sp, #24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < _counter; i++){
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	da25      	bge.n	8001b60 <_ZN12CliContainer4CallEPcS0_+0x66>
		if(strcmp(cmdname, _CliCommand[i]->getName())==0){
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff91 	bl	8001a44 <_ZNK10CliCommand7getNameEv>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4619      	mov	r1, r3
 8001b26:	68b8      	ldr	r0, [r7, #8]
 8001b28:	f7fe fb52 	bl	80001d0 <strcmp>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	bf0c      	ite	eq
 8001b32:	2301      	moveq	r3, #1
 8001b34:	2300      	movne	r3, #0
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00d      	beq.n	8001b58 <_ZN12CliContainer4CallEPcS0_+0x5e>
			_CliCommand[i]->doCommand(param);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4798      	blx	r3
			return 1;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e004      	b.n	8001b62 <_ZN12CliContainer4CallEPcS0_+0x68>
	for (int i = 0; i < _counter; i++){
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	e7d4      	b.n	8001b0a <_ZN12CliContainer4CallEPcS0_+0x10>
		}
	}
	return 0;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <_Z41__static_initialization_and_destruction_0ii>:
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d107      	bne.n	8001b8c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d102      	bne.n	8001b8c <_Z41__static_initialization_and_destruction_0ii+0x20>
CliContainer CliContainer;
 8001b86:	4809      	ldr	r0, [pc, #36]	; (8001bac <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001b88:	f7ff ff68 	bl	8001a5c <_ZN12CliContainerC1Ev>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d107      	bne.n	8001ba2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d102      	bne.n	8001ba2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001b9c:	4803      	ldr	r0, [pc, #12]	; (8001bac <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001b9e:	f7ff ff6f 	bl	8001a80 <_ZN12CliContainerD1Ev>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000254 	.word	0x20000254

08001bb0 <_GLOBAL__sub_I_CliContainer>:
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f7ff ffd7 	bl	8001b6c <_Z41__static_initialization_and_destruction_0ii>
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_GLOBAL__sub_D_CliContainer>:
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f7ff ffcf 	bl	8001b6c <_Z41__static_initialization_and_destruction_0ii>
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_Z22Communication_commTaskv>:
static uint8_t cmdbuffer[MAX_BUFFER_LENGTH];
static int cmdcount = 0;
static int cmdprint = 0;

int Communication_commTask()
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8001bd6:	1db9      	adds	r1, r7, #6
 8001bd8:	230a      	movs	r3, #10
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4839      	ldr	r0, [pc, #228]	; (8001cc4 <_Z22Communication_commTaskv+0xf4>)
 8001bde:	f005 fdbb 	bl	8007758 <HAL_UART_Receive>
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d025      	beq.n	8001c38 <_Z22Communication_commTaskv+0x68>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 8001bec:	4b35      	ldr	r3, [pc, #212]	; (8001cc4 <_Z22Communication_commTaskv+0xf4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	bf14      	ite	ne
 8001bfa:	2301      	movne	r3, #1
 8001bfc:	2300      	moveq	r3, #0
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <_Z22Communication_commTaskv+0x3c>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8001c04:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <_Z22Communication_commTaskv+0xf4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2208      	movs	r2, #8
 8001c0a:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 8001c0c:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <_Z22Communication_commTaskv+0xf8>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b2e      	ldr	r3, [pc, #184]	; (8001ccc <_Z22Communication_commTaskv+0xfc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	da0d      	bge.n	8001c34 <_Z22Communication_commTaskv+0x64>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8001c18:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <_Z22Communication_commTaskv+0xf8>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	492a      	ldr	r1, [pc, #168]	; (8001cc8 <_Z22Communication_commTaskv+0xf8>)
 8001c20:	600a      	str	r2, [r1, #0]
 8001c22:	4a2b      	ldr	r2, [pc, #172]	; (8001cd0 <_Z22Communication_commTaskv+0x100>)
 8001c24:	1899      	adds	r1, r3, r2
 8001c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4825      	ldr	r0, [pc, #148]	; (8001cc4 <_Z22Communication_commTaskv+0xf4>)
 8001c2e:	f005 fcff 	bl	8007630 <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 8001c32:	e7eb      	b.n	8001c0c <_Z22Communication_commTaskv+0x3c>
		}

		return 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	e040      	b.n	8001cba <_Z22Communication_commTaskv+0xea>
	}

	if (ch != '\r' && ch != '\n')
 8001c38:	79bb      	ldrb	r3, [r7, #6]
 8001c3a:	2b0d      	cmp	r3, #13
 8001c3c:	d016      	beq.n	8001c6c <_Z22Communication_commTaskv+0x9c>
 8001c3e:	79bb      	ldrb	r3, [r7, #6]
 8001c40:	2b0a      	cmp	r3, #10
 8001c42:	d013      	beq.n	8001c6c <_Z22Communication_commTaskv+0x9c>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 8001c44:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <_Z22Communication_commTaskv+0xfc>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b63      	cmp	r3, #99	; 0x63
 8001c4a:	dd05      	ble.n	8001c58 <_Z22Communication_commTaskv+0x88>
		{
			cmdcount = 0;
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <_Z22Communication_commTaskv+0xfc>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <_Z22Communication_commTaskv+0xf8>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8001c58:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <_Z22Communication_commTaskv+0xfc>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	491b      	ldr	r1, [pc, #108]	; (8001ccc <_Z22Communication_commTaskv+0xfc>)
 8001c60:	600a      	str	r2, [r1, #0]
 8001c62:	79b9      	ldrb	r1, [r7, #6]
 8001c64:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <_Z22Communication_commTaskv+0x100>)
 8001c66:	54d1      	strb	r1, [r2, r3]
		return 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e026      	b.n	8001cba <_Z22Communication_commTaskv+0xea>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount)
 8001c6c:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <_Z22Communication_commTaskv+0xf8>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <_Z22Communication_commTaskv+0xfc>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	da0d      	bge.n	8001c94 <_Z22Communication_commTaskv+0xc4>
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <_Z22Communication_commTaskv+0xf8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	4912      	ldr	r1, [pc, #72]	; (8001cc8 <_Z22Communication_commTaskv+0xf8>)
 8001c80:	600a      	str	r2, [r1, #0]
 8001c82:	4a13      	ldr	r2, [pc, #76]	; (8001cd0 <_Z22Communication_commTaskv+0x100>)
 8001c84:	1899      	adds	r1, r3, r2
 8001c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	480d      	ldr	r0, [pc, #52]	; (8001cc4 <_Z22Communication_commTaskv+0xf4>)
 8001c8e:	f005 fccf 	bl	8007630 <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 8001c92:	e7eb      	b.n	8001c6c <_Z22Communication_commTaskv+0x9c>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8001c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c98:	2202      	movs	r2, #2
 8001c9a:	490e      	ldr	r1, [pc, #56]	; (8001cd4 <_Z22Communication_commTaskv+0x104>)
 8001c9c:	4809      	ldr	r0, [pc, #36]	; (8001cc4 <_Z22Communication_commTaskv+0xf4>)
 8001c9e:	f005 fcc7 	bl	8007630 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <_Z22Communication_commTaskv+0xfc>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <_Z22Communication_commTaskv+0x100>)
 8001ca8:	2100      	movs	r1, #0
 8001caa:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <_Z22Communication_commTaskv+0xfc>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <_Z22Communication_commTaskv+0xf8>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
	return 1;
 8001cb8:	2301      	movs	r3, #1
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000498 	.word	0x20000498
 8001cc8:	20000310 	.word	0x20000310
 8001ccc:	2000030c 	.word	0x2000030c
 8001cd0:	200002a8 	.word	0x200002a8
 8001cd4:	0800eb00 	.word	0x0800eb00

08001cd8 <_Z27Communication_handleCommandv>:


void Communication_handleCommand()
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08c      	sub	sp, #48	; 0x30
 8001cdc:	af00      	add	r7, sp, #0
	char cmd[20];
	char param [20];

    int params = sscanf((const char*)cmdbuffer,"%s %s", cmd, param );
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	f107 0218 	add.w	r2, r7, #24
 8001ce4:	490f      	ldr	r1, [pc, #60]	; (8001d24 <_Z27Communication_handleCommandv+0x4c>)
 8001ce6:	4810      	ldr	r0, [pc, #64]	; (8001d28 <_Z27Communication_handleCommandv+0x50>)
 8001ce8:	f00a fa5a 	bl	800c1a0 <siscanf>
 8001cec:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (params == 0){
 8001cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d012      	beq.n	8001d1a <_Z27Communication_handleCommandv+0x42>
	   return;
    }

    if(CliContainer.Call(cmd, param) == 0){
 8001cf4:	1d3a      	adds	r2, r7, #4
 8001cf6:	f107 0318 	add.w	r3, r7, #24
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480b      	ldr	r0, [pc, #44]	; (8001d2c <_Z27Communication_handleCommandv+0x54>)
 8001cfe:	f7ff fefc 	bl	8001afa <_ZN12CliContainer4CallEPcS0_>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d004      	beq.n	8001d1c <_Z27Communication_handleCommandv+0x44>
    printf("Invalid command\r\n");
 8001d12:	4807      	ldr	r0, [pc, #28]	; (8001d30 <_Z27Communication_handleCommandv+0x58>)
 8001d14:	f00a f9e8 	bl	800c0e8 <puts>
 8001d18:	e000      	b.n	8001d1c <_Z27Communication_handleCommandv+0x44>
	   return;
 8001d1a:	bf00      	nop
    }
}
 8001d1c:	3730      	adds	r7, #48	; 0x30
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	0800eb04 	.word	0x0800eb04
 8001d28:	200002a8 	.word	0x200002a8
 8001d2c:	20000254 	.word	0x20000254
 8001d30:	0800eb0c 	.word	0x0800eb0c

08001d34 <StartComTask>:

extern "C" void StartComTask()
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Entry_comTask */
  /* Infinite loop */
  CliInit();
 8001d38:	f7ff fc82 	bl	8001640 <_Z7CliInitv>
  while(1)
  {
	  if (Communication_commTask()){
 8001d3c:	f7ff ff48 	bl	8001bd0 <_Z22Communication_commTaskv>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	bf14      	ite	ne
 8001d46:	2301      	movne	r3, #1
 8001d48:	2300      	moveq	r3, #0
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <StartComTask+0x20>
		  Communication_handleCommand();
 8001d50:	f7ff ffc2 	bl	8001cd8 <_Z27Communication_handleCommandv>
	  }
    osDelay(1);
 8001d54:	2001      	movs	r0, #1
 8001d56:	f006 fef7 	bl	8008b48 <osDelay>
	  if (Communication_commTask()){
 8001d5a:	e7ef      	b.n	8001d3c <StartComTask+0x8>

08001d5c <_ZN3DhtC1EP12GPIO_TypeDeftP17TIM_HandleTypeDef>:

	int waitWhileEqual(int value, int expectedTime);
	void setGpioOutput();
	void setGpioInput();
public:
	Dht( GPIO_TypeDef* gpioPort, uint16_t gpioPin, TIM_HandleTypeDef * timer){
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	80fb      	strh	r3, [r7, #6]
		_gpioPort = gpioPort;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	601a      	str	r2, [r3, #0]
		_gpioPin = gpioPin;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	88fa      	ldrh	r2, [r7, #6]
 8001d76:	809a      	strh	r2, [r3, #4]
		_timer = timer;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	609a      	str	r2, [r3, #8]
//		_counter = 0;
//		_maxCounter = 0;
//		_state = DHT_STATE_NO_DATA;
		_temperature = 0.0;
 8001d7e:	68f9      	ldr	r1, [r7, #12]
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	e9c1 2306 	strd	r2, r3, [r1, #24]
		_humidity = 0.0;
 8001d8c:	68f9      	ldr	r1, [r7, #12]
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	e9c1 2308 	strd	r2, r3, [r1, #32]
	}
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <_ZN3DhtD1Ev>:
	~Dht(){};
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <_ZN3Dht14waitWhileEqualEii>:
extern TIM_HandleTypeDef htim16;

Dht dht( DHT11_GPIO_Port , DHT11_Pin, &htim16);

int Dht::waitWhileEqual(int value, int expectedTime)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
	// set a timeout 20% bigger than the expected time
	uint32_t timeout = expectedTime + (expectedTime) / 5;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a19      	ldr	r2, [pc, #100]	; (8001e34 <_ZN3Dht14waitWhileEqualEii+0x74>)
 8001dd0:	fb82 1203 	smull	r1, r2, r2, r3
 8001dd4:	1052      	asrs	r2, r2, #1
 8001dd6:	17db      	asrs	r3, r3, #31
 8001dd8:	1ad2      	subs	r2, r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]

	__HAL_TIM_SET_COUNTER(_timer, 0);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
	while (HAL_GPIO_ReadPin(_gpioPort, _gpioPin) == value) {
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	889b      	ldrh	r3, [r3, #4]
 8001df2:	4619      	mov	r1, r3
 8001df4:	4610      	mov	r0, r2
 8001df6:	f002 f8ff 	bl	8003ff8 <HAL_GPIO_ReadPin>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	4293      	cmp	r3, r2
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00d      	beq.n	8001e2a <_ZN3Dht14waitWhileEqualEii+0x6a>
		if (__HAL_TIM_GET_COUNTER(_timer) > timeout) {
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	bf34      	ite	cc
 8001e1c:	2301      	movcc	r3, #1
 8001e1e:	2300      	movcs	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0e1      	beq.n	8001dea <_ZN3Dht14waitWhileEqualEii+0x2a>
			// too much time in the state
			return false;
 8001e26:	2300      	movs	r3, #0
 8001e28:	e000      	b.n	8001e2c <_ZN3Dht14waitWhileEqualEii+0x6c>
		}
	}

	return true;
 8001e2a:	2301      	movs	r3, #1
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	66666667 	.word	0x66666667

08001e38 <_ZN3Dht13setGpioOutputEv>:

void Dht::setGpioOutput()
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct = {0};
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]

	gpioStruct.Pin = _gpioPin;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	889b      	ldrh	r3, [r3, #4]
 8001e54:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e56:	2301      	movs	r3, #1
 8001e58:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
	gpioStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(_gpioPort, &gpioStruct);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f107 020c 	add.w	r2, r7, #12
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f001 ff19 	bl	8003ca4 <HAL_GPIO_Init>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001e72:	2017      	movs	r0, #23
 8001e74:	f001 fb0d 	bl	8003492 <HAL_NVIC_DisableIRQ>
}
 8001e78:	bf00      	nop
 8001e7a:	3720      	adds	r7, #32
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <_ZN3Dht12setGpioInputEv>:

void Dht::setGpioInput()
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct = {0};
 8001e88:	f107 030c 	add.w	r3, r7, #12
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]

	gpioStruct.Pin = _gpioPin;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	889b      	ldrh	r3, [r3, #4]
 8001e9c:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_INPUT;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
	gpioStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(_gpioPort, &gpioStruct);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f107 020c 	add.w	r2, r7, #12
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f001 fef5 	bl	8003ca4 <HAL_GPIO_Init>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001eba:	2017      	movs	r0, #23
 8001ebc:	f001 fae9 	bl	8003492 <HAL_NVIC_DisableIRQ>
}
 8001ec0:	bf00      	nop
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_ZN3Dht4readEv>:

int Dht::read()
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	setGpioOutput();
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ffb1 	bl	8001e38 <_ZN3Dht13setGpioOutputEv>

	HAL_TIM_Base_Start(_timer);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f004 f8fa 	bl	80060d4 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(_timer, 0);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24

	// switch the sensor on by putting the line in '0'
	HAL_GPIO_WritePin(_gpioPort,_gpioPin, GPIO_PIN_RESET);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	889b      	ldrh	r3, [r3, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f002 f897 	bl	8004028 <HAL_GPIO_WritePin>
	while (__HAL_TIM_GET_COUNTER(_timer) < 19000);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	f644 2237 	movw	r2, #18999	; 0x4a37
 8001f06:	4293      	cmp	r3, r2
 8001f08:	bf94      	ite	ls
 8001f0a:	2301      	movls	r3, #1
 8001f0c:	2300      	movhi	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d000      	beq.n	8001f16 <_ZN3Dht4readEv+0x4e>
 8001f14:	e7f1      	b.n	8001efa <_ZN3Dht4readEv+0x32>

	HAL_GPIO_WritePin(_gpioPort,_gpioPin, GPIO_PIN_SET);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	889b      	ldrh	r3, [r3, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	4619      	mov	r1, r3
 8001f22:	f002 f881 	bl	8004028 <HAL_GPIO_WritePin>

	// start listening
	setGpioInput();
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ffaa 	bl	8001e80 <_ZN3Dht12setGpioInputEv>

	// wait for response 20-40us
	if (!waitWhileEqual( 1, 40)) {
 8001f2c:	2228      	movs	r2, #40	; 0x28
 8001f2e:	2101      	movs	r1, #1
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ff45 	bl	8001dc0 <_ZN3Dht14waitWhileEqualEii>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <_ZN3Dht4readEv+0x82>
		return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e021      	b.n	8001f8e <_ZN3Dht4readEv+0xc6>
	}

	// DHT should keep in low for 80us
	if (!waitWhileEqual(0, 80)) {
 8001f4a:	2250      	movs	r2, #80	; 0x50
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ff36 	bl	8001dc0 <_ZN3Dht14waitWhileEqualEii>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	bf0c      	ite	eq
 8001f5a:	2301      	moveq	r3, #1
 8001f5c:	2300      	movne	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <_ZN3Dht4readEv+0xa0>
		return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e012      	b.n	8001f8e <_ZN3Dht4readEv+0xc6>
	}

	// DHT should keep in high for 80us
	if (!waitWhileEqual(1, 80)) {
 8001f68:	2250      	movs	r2, #80	; 0x50
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff27 	bl	8001dc0 <_ZN3Dht14waitWhileEqualEii>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf0c      	ite	eq
 8001f78:	2301      	moveq	r3, #1
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <_ZN3Dht4readEv+0xbe>
		return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e003      	b.n	8001f8e <_ZN3Dht4readEv+0xc6>
	}
	reciveData();
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f806 	bl	8001f98 <_ZN3Dht10reciveDataEv>
	return 1;
 8001f8c:	2301      	movs	r3, #1

}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <_ZN3Dht10reciveDataEv>:

int Dht::reciveData()
{
 8001f98:	b5b0      	push	{r4, r5, r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
	// DHT start send data bits

	uint8_t data[5] = { 0 };
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	733b      	strb	r3, [r7, #12]
	for (int i = 0; i < 5; i++) {
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	dc50      	bgt.n	8002054 <_ZN3Dht10reciveDataEv+0xbc>
		for (int j = 0; j < 8; j++) {
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b07      	cmp	r3, #7
 8001fba:	dc47      	bgt.n	800204c <_ZN3Dht10reciveDataEv+0xb4>

			// DHT keeps in low for 50us before each bit
			if (!waitWhileEqual( 0, 60)) {
 8001fbc:	223c      	movs	r2, #60	; 0x3c
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff fefd 	bl	8001dc0 <_ZN3Dht14waitWhileEqualEii>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bf0c      	ite	eq
 8001fcc:	2301      	moveq	r3, #1
 8001fce:	2300      	movne	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <_ZN3Dht10reciveDataEv+0x42>
				return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e095      	b.n	8002106 <_ZN3Dht10reciveDataEv+0x16e>
			}

			// DHT sends bit keeping line in high maximum 70us
			if (!waitWhileEqual( 1, 70)) {
 8001fda:	2246      	movs	r2, #70	; 0x46
 8001fdc:	2101      	movs	r1, #1
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff feee 	bl	8001dc0 <_ZN3Dht14waitWhileEqualEii>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	bf0c      	ite	eq
 8001fea:	2301      	moveq	r3, #1
 8001fec:	2300      	movne	r3, #0
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <_ZN3Dht10reciveDataEv+0x60>
				return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e086      	b.n	8002106 <_ZN3Dht10reciveDataEv+0x16e>
			}

			data[i] <<= 1;
 8001ff8:	f107 0208 	add.w	r2, r7, #8
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	4413      	add	r3, r2
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	b2d9      	uxtb	r1, r3
 8002006:	f107 0208 	add.w	r2, r7, #8
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	4413      	add	r3, r2
 800200e:	460a      	mov	r2, r1
 8002010:	701a      	strb	r2, [r3, #0]

			// 26-28us for '0' and 70us for '1', so 50us is a good split time
			if (__HAL_TIM_GET_COUNTER(_timer) > 50) {
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	2b32      	cmp	r3, #50	; 0x32
 800201c:	bf8c      	ite	hi
 800201e:	2301      	movhi	r3, #1
 8002020:	2300      	movls	r3, #0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00d      	beq.n	8002044 <_ZN3Dht10reciveDataEv+0xac>
				data[i] |= 1;
 8002028:	f107 0208 	add.w	r2, r7, #8
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	4413      	add	r3, r2
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	b2d9      	uxtb	r1, r3
 8002038:	f107 0208 	add.w	r2, r7, #8
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	4413      	add	r3, r2
 8002040:	460a      	mov	r2, r1
 8002042:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	3301      	adds	r3, #1
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	e7b4      	b.n	8001fb6 <_ZN3Dht10reciveDataEv+0x1e>
	for (int i = 0; i < 5; i++) {
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	3301      	adds	r3, #1
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e7ab      	b.n	8001fac <_ZN3Dht10reciveDataEv+0x14>
			}
		}
	}

	uint8_t checksum = data[0] + data[1] + data[2] + data[3];
 8002054:	7a3a      	ldrb	r2, [r7, #8]
 8002056:	7a7b      	ldrb	r3, [r7, #9]
 8002058:	4413      	add	r3, r2
 800205a:	b2da      	uxtb	r2, r3
 800205c:	7abb      	ldrb	r3, [r7, #10]
 800205e:	4413      	add	r3, r2
 8002060:	b2da      	uxtb	r2, r3
 8002062:	7afb      	ldrb	r3, [r7, #11]
 8002064:	4413      	add	r3, r2
 8002066:	73fb      	strb	r3, [r7, #15]
	if (checksum != data[4]) {
 8002068:	7b3b      	ldrb	r3, [r7, #12]
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <_ZN3Dht10reciveDataEv+0xdc>
		return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e048      	b.n	8002106 <_ZN3Dht10reciveDataEv+0x16e>
	}

	_humidity = (double)data[0] + ((double)data[1]) / 10;
 8002074:	7a3b      	ldrb	r3, [r7, #8]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fa54 	bl	8000524 <__aeabi_ui2d>
 800207c:	4604      	mov	r4, r0
 800207e:	460d      	mov	r5, r1
 8002080:	7a7b      	ldrb	r3, [r7, #9]
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fa4e 	bl	8000524 <__aeabi_ui2d>
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	4b20      	ldr	r3, [pc, #128]	; (8002110 <_ZN3Dht10reciveDataEv+0x178>)
 800208e:	f7fe fbed 	bl	800086c <__aeabi_ddiv>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4620      	mov	r0, r4
 8002098:	4629      	mov	r1, r5
 800209a:	f7fe f907 	bl	80002ac <__adddf3>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	_temperature = (double)data[2] + ((double)data[3]) / 10;
 80020a8:	7abb      	ldrb	r3, [r7, #10]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fa3a 	bl	8000524 <__aeabi_ui2d>
 80020b0:	4604      	mov	r4, r0
 80020b2:	460d      	mov	r5, r1
 80020b4:	7afb      	ldrb	r3, [r7, #11]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa34 	bl	8000524 <__aeabi_ui2d>
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	4b13      	ldr	r3, [pc, #76]	; (8002110 <_ZN3Dht10reciveDataEv+0x178>)
 80020c2:	f7fe fbd3 	bl	800086c <__aeabi_ddiv>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4620      	mov	r0, r4
 80020cc:	4629      	mov	r1, r5
 80020ce:	f7fe f8ed 	bl	80002ac <__adddf3>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	e9c1 2306 	strd	r2, r3, [r1, #24]

	//printf("Humidity: %d.%d, temp: %d.%d\r\n", (int)data[0], (int)data[1], (int)data[2], (int)data[3]);

	// wait while DHT return to high
	if (!waitWhileEqual( 0, 100)) {
 80020dc:	2264      	movs	r2, #100	; 0x64
 80020de:	2100      	movs	r1, #0
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff fe6d 	bl	8001dc0 <_ZN3Dht14waitWhileEqualEii>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <_ZN3Dht10reciveDataEv+0x162>
		return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e005      	b.n	8002106 <_ZN3Dht10reciveDataEv+0x16e>
	}

	HAL_TIM_Base_Stop(_timer);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	4618      	mov	r0, r3
 8002100:	f004 f850 	bl	80061a4 <HAL_TIM_Base_Stop>

	return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bdb0      	pop	{r4, r5, r7, pc}
 800210e:	bf00      	nop
 8002110:	40240000 	.word	0x40240000

08002114 <_ZN3Dht15getTempperatureEv>:
{
	return _humidity;
}

double Dht::getTempperature()
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	return _temperature;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002122:	ec43 2b17 	vmov	d7, r2, r3
}
 8002126:	eeb0 0a47 	vmov.f32	s0, s14
 800212a:	eef0 0a67 	vmov.f32	s1, s15
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <StartDhtTask>:


/* USER CODE END Header_StartDhtTask */
extern "C" void StartDhtTask()
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StartDhtTask */
  /* Infinite loop */
  while(1)
  {
	dht.read();
 800213c:	4803      	ldr	r0, [pc, #12]	; (800214c <StartDhtTask+0x14>)
 800213e:	f7ff fec3 	bl	8001ec8 <_ZN3Dht4readEv>
    osDelay(1000);
 8002142:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002146:	f006 fcff 	bl	8008b48 <osDelay>
	dht.read();
 800214a:	e7f7      	b.n	800213c <StartDhtTask+0x4>
 800214c:	20000318 	.word	0x20000318

08002150 <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END StartDhtTask */
}
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d10a      	bne.n	8002176 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002166:	4293      	cmp	r3, r2
 8002168:	d105      	bne.n	8002176 <_Z41__static_initialization_and_destruction_0ii+0x26>
Dht dht( DHT11_GPIO_Port , DHT11_Pin, &htim16);
 800216a:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800216c:	2220      	movs	r2, #32
 800216e:	490a      	ldr	r1, [pc, #40]	; (8002198 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002170:	480a      	ldr	r0, [pc, #40]	; (800219c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002172:	f7ff fdf3 	bl	8001d5c <_ZN3DhtC1EP12GPIO_TypeDeftP17TIM_HandleTypeDef>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d107      	bne.n	800218c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002182:	4293      	cmp	r3, r2
 8002184:	d102      	bne.n	800218c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8002186:	4805      	ldr	r0, [pc, #20]	; (800219c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002188:	f7ff fe0e 	bl	8001da8 <_ZN3DhtD1Ev>
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	2000044c 	.word	0x2000044c
 8002198:	48000400 	.word	0x48000400
 800219c:	20000318 	.word	0x20000318

080021a0 <_GLOBAL__sub_I_dht>:
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80021a8:	2001      	movs	r0, #1
 80021aa:	f7ff ffd1 	bl	8002150 <_Z41__static_initialization_and_destruction_0ii>
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <_GLOBAL__sub_D_dht>:
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80021b8:	2000      	movs	r0, #0
 80021ba:	f7ff ffc9 	bl	8002150 <_Z41__static_initialization_and_destruction_0ii>
 80021be:	bd80      	pop	{r7, pc}

080021c0 <_ZN5FlashC1Ev>:
	uint32_t _flashAdd;
	uint32_t _page;

public:

	Flash(){
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
		_page = 256;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ce:	605a      	str	r2, [r3, #4]
		_flashAdd = 0x08080000;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <_ZN5FlashC1Ev+0x24>)
 80021d4:	601a      	str	r2, [r3, #0]
	}
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	08080000 	.word	0x08080000

080021e8 <_ZN5FlashD1Ev>:
	~Flash(){};
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <_ZN5Flash5eraseEv>:
#include "Flash.h"


Flash flash;
void Flash::erase()
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b088      	sub	sp, #32
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
	uint32_t pageError;
	FLASH_EraseInitTypeDef basicFlash;

	basicFlash.TypeErase = FLASH_TYPEERASE_PAGES;
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
	basicFlash.Banks = FLASH_BANK_2;
 800220a:	2302      	movs	r3, #2
 800220c:	613b      	str	r3, [r7, #16]
	basicFlash.Page = _page;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	617b      	str	r3, [r7, #20]
	basicFlash.NbPages = 1;
 8002214:	2301      	movs	r3, #1
 8002216:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock();
 8002218:	f001 fb2c 	bl	8003874 <HAL_FLASH_Unlock>

	HAL_FLASHEx_Erase(&basicFlash, &pageError);
 800221c:	f107 021c 	add.w	r2, r7, #28
 8002220:	f107 030c 	add.w	r3, r7, #12
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f001 fbf8 	bl	8003a1c <HAL_FLASHEx_Erase>
}
 800222c:	bf00      	nop
 800222e:	3720      	adds	r7, #32
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <_ZN5Flash5writhEPv>:

void Flash::writh(void* data)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
	erase();
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ffdd 	bl	80021fe <_ZN5Flash5eraseEv>

	int size = sizeof(data);
 8002244:	2304      	movs	r3, #4
 8002246:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < size; i += sizeof(uint64_t)){
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	429a      	cmp	r2, r3
 8002252:	da13      	bge.n	800227c <_ZN5Flash5writhEPv+0x48>
			uint64_t Data = *(uint64_t *)(data+i);
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	4413      	add	r3, r2
 800225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225e:	e9c7 2302 	strd	r2, r3, [r7, #8]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)_flashAdd+i, Data);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	18d1      	adds	r1, r2, r3
 800226a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800226e:	2000      	movs	r0, #0
 8002270:	f001 f9a8 	bl	80035c4 <HAL_FLASH_Program>
	for(int i = 0; i < size; i += sizeof(uint64_t)){
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	3308      	adds	r3, #8
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	e7e7      	b.n	800224c <_ZN5Flash5writhEPv+0x18>
	}
}
 800227c:	bf00      	nop
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <_ZN5Flash4readEP14_thresholdTemp>:

void Flash::read( thresholdTemp* buffer)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
	buffer = (thresholdTemp *)(_flashAdd);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	603b      	str	r3, [r7, #0]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <_Z41__static_initialization_and_destruction_0ii>:
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d107      	bne.n	80022c0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d102      	bne.n	80022c0 <_Z41__static_initialization_and_destruction_0ii+0x20>
Flash flash;
 80022ba:	4809      	ldr	r0, [pc, #36]	; (80022e0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80022bc:	f7ff ff80 	bl	80021c0 <_ZN5FlashC1Ev>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d107      	bne.n	80022d6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d102      	bne.n	80022d6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80022d0:	4803      	ldr	r0, [pc, #12]	; (80022e0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80022d2:	f7ff ff89 	bl	80021e8 <_ZN5FlashD1Ev>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000340 	.word	0x20000340

080022e4 <_GLOBAL__sub_I_flash>:
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022ec:	2001      	movs	r0, #1
 80022ee:	f7ff ffd7 	bl	80022a0 <_Z41__static_initialization_and_destruction_0ii>
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <_GLOBAL__sub_D_flash>:
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022fc:	2000      	movs	r0, #0
 80022fe:	f7ff ffcf 	bl	80022a0 <_Z41__static_initialization_and_destruction_0ii>
 8002302:	bd80      	pop	{r7, pc}

08002304 <_ZN3LedD1Ev>:
	uint16_t _GPIO_Pin;

public:
	Led(){};
    Led(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin);
    ~Led(){};
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <_ZN3Led8getGPIOxEv>:

    void on();
    void off();
    void blink();

    GPIO_TypeDef* getGPIOx(){
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
    	return _GPIOx;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
   }
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <_ZN3Led11getGPIO_PinEv>:

    uint16_t getGPIO_Pin(){
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
        return _GPIO_Pin;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	891b      	ldrh	r3, [r3, #8]
   }
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <_ZN3Led8getStateEv>:

    LedState getState(){
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
    	return _state;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	781b      	ldrb	r3, [r3, #0]
   }
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <_ZN3LedC1EP12GPIO_TypeDeft>:
#include <stdio.h>
#include "cmsis_os.h"

Led ledB(LD2_GPIO_Port , LD2_Pin );

Led::Led(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
 8002362:	b480      	push	{r7}
 8002364:	b085      	sub	sp, #20
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	4613      	mov	r3, r2
 800236e:	80fb      	strh	r3, [r7, #6]
{
	_GPIOx = GPIOx;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	605a      	str	r2, [r3, #4]
	_GPIO_Pin = GPIO_Pin;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	88fa      	ldrh	r2, [r7, #6]
 800237a:	811a      	strh	r2, [r3, #8]
	_state = STATE_OFF;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
}
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <_ZN3Led2onEv>:

void Led::on()
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	_state = STATE_ON,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_GPIOx, _GPIO_Pin, GPIO_PIN_SET);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6858      	ldr	r0, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	891b      	ldrh	r3, [r3, #8]
 80023a6:	2201      	movs	r2, #1
 80023a8:	4619      	mov	r1, r3
 80023aa:	f001 fe3d 	bl	8004028 <HAL_GPIO_WritePin>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <_ZN3Led3offEv>:

void Led::off()
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
	_state = STATE_OFF,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_GPIOx, _GPIO_Pin, GPIO_PIN_RESET);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6858      	ldr	r0, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	891b      	ldrh	r3, [r3, #8]
 80023cc:	2200      	movs	r2, #0
 80023ce:	4619      	mov	r1, r3
 80023d0:	f001 fe2a 	bl	8004028 <HAL_GPIO_WritePin>
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_ZN3Led5blinkEv>:
void Led::blink()
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
	_state = STATE_BLINKING;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	701a      	strb	r2, [r3, #0]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <startBlinkTask>:


extern "C" void startBlinkTask()
{
 80023f8:	b598      	push	{r3, r4, r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN startBlinkTask */

  /* Infinite loop */
  while(1)
  {
	if(ledB.getState() == STATE_BLINKING){
 80023fc:	480f      	ldr	r0, [pc, #60]	; (800243c <startBlinkTask+0x44>)
 80023fe:	f7ff ffa4 	bl	800234a <_ZN3Led8getStateEv>
 8002402:	4603      	mov	r3, r0
 8002404:	2b02      	cmp	r3, #2
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00f      	beq.n	8002432 <startBlinkTask+0x3a>
	HAL_GPIO_TogglePin(ledB.getGPIOx(), ledB.getGPIO_Pin());
 8002412:	480a      	ldr	r0, [pc, #40]	; (800243c <startBlinkTask+0x44>)
 8002414:	f7ff ff81 	bl	800231a <_ZN3Led8getGPIOxEv>
 8002418:	4604      	mov	r4, r0
 800241a:	4808      	ldr	r0, [pc, #32]	; (800243c <startBlinkTask+0x44>)
 800241c:	f7ff ff89 	bl	8002332 <_ZN3Led11getGPIO_PinEv>
 8002420:	4603      	mov	r3, r0
 8002422:	4619      	mov	r1, r3
 8002424:	4620      	mov	r0, r4
 8002426:	f001 fe17 	bl	8004058 <HAL_GPIO_TogglePin>
	osDelay(600);
 800242a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800242e:	f006 fb8b 	bl	8008b48 <osDelay>
	}
	osDelay(1);
 8002432:	2001      	movs	r0, #1
 8002434:	f006 fb88 	bl	8008b48 <osDelay>
	if(ledB.getState() == STATE_BLINKING){
 8002438:	e7e0      	b.n	80023fc <startBlinkTask+0x4>
 800243a:	bf00      	nop
 800243c:	20000348 	.word	0x20000348

08002440 <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END startBlinkTask */
}
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d10a      	bne.n	8002466 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002456:	4293      	cmp	r3, r2
 8002458:	d105      	bne.n	8002466 <_Z41__static_initialization_and_destruction_0ii+0x26>
Led ledB(LD2_GPIO_Port , LD2_Pin );
 800245a:	2220      	movs	r2, #32
 800245c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002460:	4808      	ldr	r0, [pc, #32]	; (8002484 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002462:	f7ff ff7e 	bl	8002362 <_ZN3LedC1EP12GPIO_TypeDeft>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d107      	bne.n	800247c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002472:	4293      	cmp	r3, r2
 8002474:	d102      	bne.n	800247c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8002476:	4803      	ldr	r0, [pc, #12]	; (8002484 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002478:	f7ff ff44 	bl	8002304 <_ZN3LedD1Ev>
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000348 	.word	0x20000348

08002488 <_GLOBAL__sub_I_ledB>:
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
 800248c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002490:	2001      	movs	r0, #1
 8002492:	f7ff ffd5 	bl	8002440 <_Z41__static_initialization_and_destruction_0ii>
 8002496:	bd80      	pop	{r7, pc}

08002498 <_GLOBAL__sub_D_ledB>:
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
 800249c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7ff ffcd 	bl	8002440 <_Z41__static_initialization_and_destruction_0ii>
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <_write>:
extern Flash flash;
extern UART_HandleTypeDef huart2;

//////////////////////////////////////////////////////////////
extern "C" int _write(int fd, char* ptr, int len)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	f04f 33ff 	mov.w	r3, #4294967295
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	4804      	ldr	r0, [pc, #16]	; (80024d0 <_write+0x28>)
 80024c0:	f005 f8b6 	bl	8007630 <HAL_UART_Transmit>
	return len;
 80024c4:	687b      	ldr	r3, [r7, #4]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000498 	.word	0x20000498

080024d4 <HAL_GPIO_EXTI_Callback>:
//////////////////////////////////////////////////////////////


extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	80fb      	strh	r3, [r7, #6]
	button.interrupt();
 80024de:	4803      	ldr	r0, [pc, #12]	; (80024ec <HAL_GPIO_EXTI_Callback+0x18>)
 80024e0:	f7fe fd19 	bl	8000f16 <_ZN6Button9interruptEv>
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000224 	.word	0x20000224

080024f0 <StartManagerTask>:


thresholdTemp Temprature;
/* USER CODE END Header_StartManagerTask */
extern "C" void StartManagerTask(void *argument)
{
 80024f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManagerTask */

	flash.read(&Temprature);
 80024f8:	4914      	ldr	r1, [pc, #80]	; (800254c <StartManagerTask+0x5c>)
 80024fa:	4815      	ldr	r0, [pc, #84]	; (8002550 <StartManagerTask+0x60>)
 80024fc:	f7ff fec2 	bl	8002284 <_ZN5Flash4readEP14_thresholdTemp>
  /* Infinite loop */
	while(1)
	{
	if(dht.getTempperature() > Temprature.criticalTemp){
 8002500:	4814      	ldr	r0, [pc, #80]	; (8002554 <StartManagerTask+0x64>)
 8002502:	f7ff fe07 	bl	8002114 <_ZN3Dht15getTempperatureEv>
 8002506:	ec55 4b10 	vmov	r4, r5, d0
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <StartManagerTask+0x5c>)
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f818 	bl	8000544 <__aeabi_i2d>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	2101      	movs	r1, #1
 800251a:	460e      	mov	r6, r1
 800251c:	4620      	mov	r0, r4
 800251e:	4629      	mov	r1, r5
 8002520:	f7fe fb0a 	bl	8000b38 <__aeabi_dcmpgt>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <StartManagerTask+0x3e>
 800252a:	2300      	movs	r3, #0
 800252c:	461e      	mov	r6, r3
 800252e:	b2f3      	uxtb	r3, r6
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <StartManagerTask+0x4c>
		ledB.blink();
 8002534:	4808      	ldr	r0, [pc, #32]	; (8002558 <StartManagerTask+0x68>)
 8002536:	f7ff ff51 	bl	80023dc <_ZN3Led5blinkEv>
 800253a:	e002      	b.n	8002542 <StartManagerTask+0x52>
	}
	else{
		ledB.off();
 800253c:	4806      	ldr	r0, [pc, #24]	; (8002558 <StartManagerTask+0x68>)
 800253e:	f7ff ff3a 	bl	80023b6 <_ZN3Led3offEv>
	}
	osDelay(1000);
 8002542:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002546:	f006 faff 	bl	8008b48 <osDelay>
	if(dht.getTempperature() > Temprature.criticalTemp){
 800254a:	e7d9      	b.n	8002500 <StartManagerTask+0x10>
 800254c:	20000354 	.word	0x20000354
 8002550:	20000340 	.word	0x20000340
 8002554:	20000318 	.word	0x20000318
 8002558:	20000348 	.word	0x20000348

0800255c <_ZN3RtcC1EP19__I2C_HandleTypeDefm>:

	int bcdToInt(uint8_t bcd);
	uint8_t intToBcd(int value, int minVal, int maxVal);

public:
	Rtc(I2C_HandleTypeDef * hi2c, uint32_t devAddr){
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
		_hi2c = hi2c;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	601a      	str	r2, [r3, #0]
		_devAddr = devAddr;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	711a      	strb	r2, [r3, #4]
	};
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <_ZN3RtcD1Ev>:
	~Rtc(){};
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <_ZN3Rtc8bcdToIntEh>:

extern I2C_HandleTypeDef hi2c1;
Rtc rtc(&hi2c1, 0xD0);

int Rtc::bcdToInt(uint8_t bcd)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	460b      	mov	r3, r1
 80025a4:	70fb      	strb	r3, [r7, #3]
	return (bcd >> 4) * 10 + (bcd & 0x0F);
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	461a      	mov	r2, r3
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	4413      	add	r3, r2
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <_ZN3Rtc7getTimeEP9DateTime_>:
	return ((value / 10) << 4) | (value % 10);
}


void Rtc::getTime(DateTime* dateTime)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af04      	add	r7, sp, #16
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
	uint8_t buffer[RTC_DATE_TIME_SIZE];
	HAL_I2C_Mem_Read(_hi2c, _devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	791b      	ldrb	r3, [r3, #4]
 80025de:	b299      	uxth	r1, r3
 80025e0:	23ff      	movs	r3, #255	; 0xff
 80025e2:	9302      	str	r3, [sp, #8]
 80025e4:	2307      	movs	r3, #7
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	f107 0308 	add.w	r3, r7, #8
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	2301      	movs	r3, #1
 80025f0:	2200      	movs	r2, #0
 80025f2:	f001 fdf3 	bl	80041dc <HAL_I2C_Mem_Read>

	// remove stop bit if set
	buffer[0] &= ~RTC_START_STOP;
 80025f6:	7a3b      	ldrb	r3, [r7, #8]
 80025f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	723b      	strb	r3, [r7, #8]
	dateTime->sec = bcdToInt(buffer[0]);
 8002600:	7a3b      	ldrb	r3, [r7, #8]
 8002602:	4619      	mov	r1, r3
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ffc8 	bl	800259a <_ZN3Rtc8bcdToIntEh>
 800260a:	4602      	mov	r2, r0
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	601a      	str	r2, [r3, #0]
	dateTime->min = bcdToInt(buffer[1]);
 8002610:	7a7b      	ldrb	r3, [r7, #9]
 8002612:	4619      	mov	r1, r3
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ffc0 	bl	800259a <_ZN3Rtc8bcdToIntEh>
 800261a:	4602      	mov	r2, r0
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	605a      	str	r2, [r3, #4]
	dateTime->hours = bcdToInt(buffer[2]);
 8002620:	7abb      	ldrb	r3, [r7, #10]
 8002622:	4619      	mov	r1, r3
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff ffb8 	bl	800259a <_ZN3Rtc8bcdToIntEh>
 800262a:	4602      	mov	r2, r0
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	609a      	str	r2, [r3, #8]
	dateTime->weekDay = buffer[3] & 0x07;
 8002630:	7afb      	ldrb	r3, [r7, #11]
 8002632:	f003 0207 	and.w	r2, r3, #7
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	60da      	str	r2, [r3, #12]
	dateTime->day = bcdToInt(buffer[4]);
 800263a:	7b3b      	ldrb	r3, [r7, #12]
 800263c:	4619      	mov	r1, r3
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ffab 	bl	800259a <_ZN3Rtc8bcdToIntEh>
 8002644:	4602      	mov	r2, r0
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	611a      	str	r2, [r3, #16]
	dateTime->month = bcdToInt(buffer[5]);
 800264a:	7b7b      	ldrb	r3, [r7, #13]
 800264c:	4619      	mov	r1, r3
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff ffa3 	bl	800259a <_ZN3Rtc8bcdToIntEh>
 8002654:	4602      	mov	r2, r0
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	615a      	str	r2, [r3, #20]
	dateTime->year = bcdToInt(buffer[6]);
 800265a:	7bbb      	ldrb	r3, [r7, #14]
 800265c:	4619      	mov	r1, r3
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff ff9b 	bl	800259a <_ZN3Rtc8bcdToIntEh>
 8002664:	4602      	mov	r2, r0
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	619a      	str	r2, [r3, #24]
}
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <_Z41__static_initialization_and_destruction_0ii>:
	buffer[4] = intToBcd(dateTime->day, 1, 31);
	buffer[5] = intToBcd(dateTime->month, 1, 12);
	buffer[6] = intToBcd(dateTime->year, 1, 99);

	HAL_I2C_Mem_Write(_hi2c, _devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF);
}
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d109      	bne.n	8002698 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800268a:	4293      	cmp	r3, r2
 800268c:	d104      	bne.n	8002698 <_Z41__static_initialization_and_destruction_0ii+0x24>
Rtc rtc(&hi2c1, 0xD0);
 800268e:	22d0      	movs	r2, #208	; 0xd0
 8002690:	4909      	ldr	r1, [pc, #36]	; (80026b8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002692:	480a      	ldr	r0, [pc, #40]	; (80026bc <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002694:	f7ff ff62 	bl	800255c <_ZN3RtcC1EP19__I2C_HandleTypeDefm>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d107      	bne.n	80026ae <_Z41__static_initialization_and_destruction_0ii+0x3a>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d102      	bne.n	80026ae <_Z41__static_initialization_and_destruction_0ii+0x3a>
 80026a8:	4804      	ldr	r0, [pc, #16]	; (80026bc <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80026aa:	f7ff ff6b 	bl	8002584 <_ZN3RtcD1Ev>
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000360 	.word	0x20000360
 80026bc:	20000358 	.word	0x20000358

080026c0 <_GLOBAL__sub_I_rtc>:
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026c8:	2001      	movs	r0, #1
 80026ca:	f7ff ffd3 	bl	8002674 <_Z41__static_initialization_and_destruction_0ii>
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <_GLOBAL__sub_D_rtc>:
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026d8:	2000      	movs	r0, #0
 80026da:	f7ff ffcb 	bl	8002674 <_Z41__static_initialization_and_destruction_0ii>
 80026de:	bd80      	pop	{r7, pc}

080026e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026e4:	f000 fd30 	bl	8003148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026e8:	f000 f866 	bl	80027b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026ec:	f000 f9de 	bl	8002aac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80026f0:	f000 f9ac 	bl	8002a4c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80026f4:	f000 f8b2 	bl	800285c <MX_I2C1_Init>
  MX_TIM3_Init();
 80026f8:	f000 f8f0 	bl	80028dc <MX_TIM3_Init>
  MX_TIM6_Init();
 80026fc:	f000 f948 	bl	8002990 <MX_TIM6_Init>
  MX_TIM16_Init();
 8002700:	f000 f97e 	bl	8002a00 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002704:	f006 f944 	bl	8008990 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002708:	4a19      	ldr	r2, [pc, #100]	; (8002770 <main+0x90>)
 800270a:	2100      	movs	r1, #0
 800270c:	4819      	ldr	r0, [pc, #100]	; (8002774 <main+0x94>)
 800270e:	f006 f989 	bl	8008a24 <osThreadNew>
 8002712:	4603      	mov	r3, r0
 8002714:	4a18      	ldr	r2, [pc, #96]	; (8002778 <main+0x98>)
 8002716:	6013      	str	r3, [r2, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(startBlinkTask, NULL, &blinkTask_attributes);
 8002718:	4a18      	ldr	r2, [pc, #96]	; (800277c <main+0x9c>)
 800271a:	2100      	movs	r1, #0
 800271c:	4818      	ldr	r0, [pc, #96]	; (8002780 <main+0xa0>)
 800271e:	f006 f981 	bl	8008a24 <osThreadNew>
 8002722:	4603      	mov	r3, r0
 8002724:	4a17      	ldr	r2, [pc, #92]	; (8002784 <main+0xa4>)
 8002726:	6013      	str	r3, [r2, #0]

  /* creation of comTask */
  comTaskHandle = osThreadNew(StartComTask, NULL, &comTask_attributes);
 8002728:	4a17      	ldr	r2, [pc, #92]	; (8002788 <main+0xa8>)
 800272a:	2100      	movs	r1, #0
 800272c:	4817      	ldr	r0, [pc, #92]	; (800278c <main+0xac>)
 800272e:	f006 f979 	bl	8008a24 <osThreadNew>
 8002732:	4603      	mov	r3, r0
 8002734:	4a16      	ldr	r2, [pc, #88]	; (8002790 <main+0xb0>)
 8002736:	6013      	str	r3, [r2, #0]

  /* creation of buttonTak */
  buttonTakHandle = osThreadNew(StartbuttonTak, NULL, &buttonTak_attributes);
 8002738:	4a16      	ldr	r2, [pc, #88]	; (8002794 <main+0xb4>)
 800273a:	2100      	movs	r1, #0
 800273c:	4816      	ldr	r0, [pc, #88]	; (8002798 <main+0xb8>)
 800273e:	f006 f971 	bl	8008a24 <osThreadNew>
 8002742:	4603      	mov	r3, r0
 8002744:	4a15      	ldr	r2, [pc, #84]	; (800279c <main+0xbc>)
 8002746:	6013      	str	r3, [r2, #0]

  /* creation of DhtTask */
  DhtTaskHandle = osThreadNew(StartDhtTask, NULL, &DhtTask_attributes);
 8002748:	4a15      	ldr	r2, [pc, #84]	; (80027a0 <main+0xc0>)
 800274a:	2100      	movs	r1, #0
 800274c:	4815      	ldr	r0, [pc, #84]	; (80027a4 <main+0xc4>)
 800274e:	f006 f969 	bl	8008a24 <osThreadNew>
 8002752:	4603      	mov	r3, r0
 8002754:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <main+0xc8>)
 8002756:	6013      	str	r3, [r2, #0]

  /* creation of ManagerTask */
  ManagerTaskHandle = osThreadNew(StartManagerTask, NULL, &ManagerTask_attributes);
 8002758:	4a14      	ldr	r2, [pc, #80]	; (80027ac <main+0xcc>)
 800275a:	2100      	movs	r1, #0
 800275c:	4814      	ldr	r0, [pc, #80]	; (80027b0 <main+0xd0>)
 800275e:	f006 f961 	bl	8008a24 <osThreadNew>
 8002762:	4603      	mov	r3, r0
 8002764:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <main+0xd4>)
 8002766:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002768:	f006 f936 	bl	80089d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800276c:	e7fe      	b.n	800276c <main+0x8c>
 800276e:	bf00      	nop
 8002770:	0800ec60 	.word	0x0800ec60
 8002774:	08002bc5 	.word	0x08002bc5
 8002778:	2000051c 	.word	0x2000051c
 800277c:	0800ec84 	.word	0x0800ec84
 8002780:	080023f9 	.word	0x080023f9
 8002784:	20000520 	.word	0x20000520
 8002788:	0800eca8 	.word	0x0800eca8
 800278c:	08001d35 	.word	0x08001d35
 8002790:	20000524 	.word	0x20000524
 8002794:	0800eccc 	.word	0x0800eccc
 8002798:	08001041 	.word	0x08001041
 800279c:	20000528 	.word	0x20000528
 80027a0:	0800ecf0 	.word	0x0800ecf0
 80027a4:	08002139 	.word	0x08002139
 80027a8:	2000052c 	.word	0x2000052c
 80027ac:	0800ed14 	.word	0x0800ed14
 80027b0:	080024f1 	.word	0x080024f1
 80027b4:	20000530 	.word	0x20000530

080027b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b096      	sub	sp, #88	; 0x58
 80027bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	2244      	movs	r2, #68	; 0x44
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f008 feb6 	bl	800b538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027cc:	463b      	mov	r3, r7
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	60da      	str	r2, [r3, #12]
 80027d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80027da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80027de:	f002 f90f 	bl	8004a00 <HAL_PWREx_ControlVoltageScaling>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80027e8:	f000 f9f4 	bl	8002bd4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027ec:	2302      	movs	r3, #2
 80027ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027f6:	2310      	movs	r3, #16
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027fa:	2302      	movs	r3, #2
 80027fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027fe:	2302      	movs	r3, #2
 8002800:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002802:	2301      	movs	r3, #1
 8002804:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002806:	230a      	movs	r3, #10
 8002808:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800280a:	2307      	movs	r3, #7
 800280c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800280e:	2302      	movs	r3, #2
 8002810:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002812:	2302      	movs	r3, #2
 8002814:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002816:	f107 0314 	add.w	r3, r7, #20
 800281a:	4618      	mov	r0, r3
 800281c:	f002 f946 	bl	8004aac <HAL_RCC_OscConfig>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002826:	f000 f9d5 	bl	8002bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800282a:	230f      	movs	r3, #15
 800282c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800282e:	2303      	movs	r3, #3
 8002830:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800283e:	463b      	mov	r3, r7
 8002840:	2104      	movs	r1, #4
 8002842:	4618      	mov	r0, r3
 8002844:	f002 fd0e 	bl	8005264 <HAL_RCC_ClockConfig>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800284e:	f000 f9c1 	bl	8002bd4 <Error_Handler>
  }
}
 8002852:	bf00      	nop
 8002854:	3758      	adds	r7, #88	; 0x58
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002860:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <MX_I2C1_Init+0x74>)
 8002862:	4a1c      	ldr	r2, [pc, #112]	; (80028d4 <MX_I2C1_Init+0x78>)
 8002864:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8002866:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <MX_I2C1_Init+0x74>)
 8002868:	4a1b      	ldr	r2, [pc, #108]	; (80028d8 <MX_I2C1_Init+0x7c>)
 800286a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800286c:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <MX_I2C1_Init+0x74>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002872:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <MX_I2C1_Init+0x74>)
 8002874:	2201      	movs	r2, #1
 8002876:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002878:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <MX_I2C1_Init+0x74>)
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <MX_I2C1_Init+0x74>)
 8002880:	2200      	movs	r2, #0
 8002882:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002884:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <MX_I2C1_Init+0x74>)
 8002886:	2200      	movs	r2, #0
 8002888:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800288a:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <MX_I2C1_Init+0x74>)
 800288c:	2200      	movs	r2, #0
 800288e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002890:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <MX_I2C1_Init+0x74>)
 8002892:	2200      	movs	r2, #0
 8002894:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002896:	480e      	ldr	r0, [pc, #56]	; (80028d0 <MX_I2C1_Init+0x74>)
 8002898:	f001 fc10 	bl	80040bc <HAL_I2C_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80028a2:	f000 f997 	bl	8002bd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028a6:	2100      	movs	r1, #0
 80028a8:	4809      	ldr	r0, [pc, #36]	; (80028d0 <MX_I2C1_Init+0x74>)
 80028aa:	f002 f803 	bl	80048b4 <HAL_I2CEx_ConfigAnalogFilter>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80028b4:	f000 f98e 	bl	8002bd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80028b8:	2100      	movs	r1, #0
 80028ba:	4805      	ldr	r0, [pc, #20]	; (80028d0 <MX_I2C1_Init+0x74>)
 80028bc:	f002 f845 	bl	800494a <HAL_I2CEx_ConfigDigitalFilter>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80028c6:	f000 f985 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000360 	.word	0x20000360
 80028d4:	40005400 	.word	0x40005400
 80028d8:	10909cec 	.word	0x10909cec

080028dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028e2:	f107 031c 	add.w	r3, r7, #28
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	605a      	str	r2, [r3, #4]
 80028ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028ee:	463b      	mov	r3, r7
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
 80028fc:	615a      	str	r2, [r3, #20]
 80028fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002900:	4b21      	ldr	r3, [pc, #132]	; (8002988 <MX_TIM3_Init+0xac>)
 8002902:	4a22      	ldr	r2, [pc, #136]	; (800298c <MX_TIM3_Init+0xb0>)
 8002904:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8002906:	4b20      	ldr	r3, [pc, #128]	; (8002988 <MX_TIM3_Init+0xac>)
 8002908:	f240 321f 	movw	r2, #799	; 0x31f
 800290c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800290e:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <MX_TIM3_Init+0xac>)
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002914:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <MX_TIM3_Init+0xac>)
 8002916:	2264      	movs	r2, #100	; 0x64
 8002918:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800291a:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <MX_TIM3_Init+0xac>)
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002920:	4b19      	ldr	r3, [pc, #100]	; (8002988 <MX_TIM3_Init+0xac>)
 8002922:	2200      	movs	r2, #0
 8002924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002926:	4818      	ldr	r0, [pc, #96]	; (8002988 <MX_TIM3_Init+0xac>)
 8002928:	f003 fd03 	bl	8006332 <HAL_TIM_PWM_Init>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002932:	f000 f94f 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800293e:	f107 031c 	add.w	r3, r7, #28
 8002942:	4619      	mov	r1, r3
 8002944:	4810      	ldr	r0, [pc, #64]	; (8002988 <MX_TIM3_Init+0xac>)
 8002946:	f004 fd7f 	bl	8007448 <HAL_TIMEx_MasterConfigSynchronization>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002950:	f000 f940 	bl	8002bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002954:	2360      	movs	r3, #96	; 0x60
 8002956:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8002958:	2332      	movs	r3, #50	; 0x32
 800295a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800295c:	2300      	movs	r3, #0
 800295e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002964:	463b      	mov	r3, r7
 8002966:	2200      	movs	r2, #0
 8002968:	4619      	mov	r1, r3
 800296a:	4807      	ldr	r0, [pc, #28]	; (8002988 <MX_TIM3_Init+0xac>)
 800296c:	f004 f890 	bl	8006a90 <HAL_TIM_PWM_ConfigChannel>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002976:	f000 f92d 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800297a:	4803      	ldr	r0, [pc, #12]	; (8002988 <MX_TIM3_Init+0xac>)
 800297c:	f000 fa18 	bl	8002db0 <HAL_TIM_MspPostInit>

}
 8002980:	bf00      	nop
 8002982:	3728      	adds	r7, #40	; 0x28
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	200003b4 	.word	0x200003b4
 800298c:	40000400 	.word	0x40000400

08002990 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002996:	1d3b      	adds	r3, r7, #4
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80029a0:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <MX_TIM6_Init+0x68>)
 80029a2:	4a16      	ldr	r2, [pc, #88]	; (80029fc <MX_TIM6_Init+0x6c>)
 80029a4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 80029a6:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <MX_TIM6_Init+0x68>)
 80029a8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80029ac:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ae:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <MX_TIM6_Init+0x68>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80029b4:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <MX_TIM6_Init+0x68>)
 80029b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029ba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029bc:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <MX_TIM6_Init+0x68>)
 80029be:	2200      	movs	r2, #0
 80029c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80029c2:	480d      	ldr	r0, [pc, #52]	; (80029f8 <MX_TIM6_Init+0x68>)
 80029c4:	f003 fb2e 	bl	8006024 <HAL_TIM_Base_Init>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80029ce:	f000 f901 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80029da:	1d3b      	adds	r3, r7, #4
 80029dc:	4619      	mov	r1, r3
 80029de:	4806      	ldr	r0, [pc, #24]	; (80029f8 <MX_TIM6_Init+0x68>)
 80029e0:	f004 fd32 	bl	8007448 <HAL_TIMEx_MasterConfigSynchronization>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80029ea:	f000 f8f3 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000400 	.word	0x20000400
 80029fc:	40001000 	.word	0x40001000

08002a00 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002a04:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <MX_TIM16_Init+0x44>)
 8002a06:	4a10      	ldr	r2, [pc, #64]	; (8002a48 <MX_TIM16_Init+0x48>)
 8002a08:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80;
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <MX_TIM16_Init+0x44>)
 8002a0c:	2250      	movs	r2, #80	; 0x50
 8002a0e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <MX_TIM16_Init+0x44>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <MX_TIM16_Init+0x44>)
 8002a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a1c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <MX_TIM16_Init+0x44>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002a24:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <MX_TIM16_Init+0x44>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <MX_TIM16_Init+0x44>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002a30:	4804      	ldr	r0, [pc, #16]	; (8002a44 <MX_TIM16_Init+0x44>)
 8002a32:	f003 faf7 	bl	8006024 <HAL_TIM_Base_Init>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002a3c:	f000 f8ca 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002a40:	bf00      	nop
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	2000044c 	.word	0x2000044c
 8002a48:	40014400 	.word	0x40014400

08002a4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a50:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a52:	4a15      	ldr	r2, [pc, #84]	; (8002aa8 <MX_USART2_UART_Init+0x5c>)
 8002a54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5e:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a6a:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a72:	220c      	movs	r2, #12
 8002a74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a76:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a82:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a8e:	4805      	ldr	r0, [pc, #20]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a90:	f004 fd80 	bl	8007594 <HAL_UART_Init>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a9a:	f000 f89b 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000498 	.word	0x20000498
 8002aa8:	40004400 	.word	0x40004400

08002aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	; 0x28
 8002ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab2:	f107 0314 	add.w	r3, r7, #20
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	60da      	str	r2, [r3, #12]
 8002ac0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac2:	4b3d      	ldr	r3, [pc, #244]	; (8002bb8 <MX_GPIO_Init+0x10c>)
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac6:	4a3c      	ldr	r2, [pc, #240]	; (8002bb8 <MX_GPIO_Init+0x10c>)
 8002ac8:	f043 0304 	orr.w	r3, r3, #4
 8002acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ace:	4b3a      	ldr	r3, [pc, #232]	; (8002bb8 <MX_GPIO_Init+0x10c>)
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ada:	4b37      	ldr	r3, [pc, #220]	; (8002bb8 <MX_GPIO_Init+0x10c>)
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	4a36      	ldr	r2, [pc, #216]	; (8002bb8 <MX_GPIO_Init+0x10c>)
 8002ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ae6:	4b34      	ldr	r3, [pc, #208]	; (8002bb8 <MX_GPIO_Init+0x10c>)
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af2:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <MX_GPIO_Init+0x10c>)
 8002af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af6:	4a30      	ldr	r2, [pc, #192]	; (8002bb8 <MX_GPIO_Init+0x10c>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002afe:	4b2e      	ldr	r3, [pc, #184]	; (8002bb8 <MX_GPIO_Init+0x10c>)
 8002b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0a:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <MX_GPIO_Init+0x10c>)
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	4a2a      	ldr	r2, [pc, #168]	; (8002bb8 <MX_GPIO_Init+0x10c>)
 8002b10:	f043 0302 	orr.w	r3, r3, #2
 8002b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b16:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <MX_GPIO_Init+0x10c>)
 8002b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	607b      	str	r3, [r7, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2120      	movs	r1, #32
 8002b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b2a:	f001 fa7d 	bl	8004028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b34:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b3e:	f107 0314 	add.w	r3, r7, #20
 8002b42:	4619      	mov	r1, r3
 8002b44:	481d      	ldr	r0, [pc, #116]	; (8002bbc <MX_GPIO_Init+0x110>)
 8002b46:	f001 f8ad 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002b4a:	2320      	movs	r3, #32
 8002b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	2300      	movs	r3, #0
 8002b58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002b5a:	f107 0314 	add.w	r3, r7, #20
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b64:	f001 f89e 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8002b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8002b78:	f107 0314 	add.w	r3, r7, #20
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b82:	f001 f88f 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8002b86:	2320      	movs	r3, #32
 8002b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4809      	ldr	r0, [pc, #36]	; (8002bc0 <MX_GPIO_Init+0x114>)
 8002b9c:	f001 f882 	bl	8003ca4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2105      	movs	r1, #5
 8002ba4:	2028      	movs	r0, #40	; 0x28
 8002ba6:	f000 fc4a 	bl	800343e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002baa:	2028      	movs	r0, #40	; 0x28
 8002bac:	f000 fc63 	bl	8003476 <HAL_NVIC_EnableIRQ>

}
 8002bb0:	bf00      	nop
 8002bb2:	3728      	adds	r7, #40	; 0x28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	48000800 	.word	0x48000800
 8002bc0:	48000400 	.word	0x48000400

08002bc4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002bcc:	2001      	movs	r0, #1
 8002bce:	f005 ffbb 	bl	8008b48 <osDelay>
 8002bd2:	e7fb      	b.n	8002bcc <StartDefaultTask+0x8>

08002bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd8:	b672      	cpsid	i
}
 8002bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bdc:	e7fe      	b.n	8002bdc <Error_Handler+0x8>
	...

08002be0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <HAL_MspInit+0x5c>)
 8002be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bea:	4a14      	ldr	r2, [pc, #80]	; (8002c3c <HAL_MspInit+0x5c>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8002bf2:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <HAL_MspInit+0x5c>)
 8002bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	607b      	str	r3, [r7, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <HAL_MspInit+0x5c>)
 8002c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c02:	4a0e      	ldr	r2, [pc, #56]	; (8002c3c <HAL_MspInit+0x5c>)
 8002c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c08:	6593      	str	r3, [r2, #88]	; 0x58
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <HAL_MspInit+0x5c>)
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	210f      	movs	r1, #15
 8002c1a:	f06f 0001 	mvn.w	r0, #1
 8002c1e:	f000 fc0e 	bl	800343e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2105      	movs	r1, #5
 8002c26:	2004      	movs	r0, #4
 8002c28:	f000 fc09 	bl	800343e <HAL_NVIC_SetPriority>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8002c2c:	2004      	movs	r0, #4
 8002c2e:	f000 fc22 	bl	8003476 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000

08002c40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b0ac      	sub	sp, #176	; 0xb0
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	2288      	movs	r2, #136	; 0x88
 8002c5e:	2100      	movs	r1, #0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f008 fc69 	bl	800b538 <memset>
  if(hi2c->Instance==I2C1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a21      	ldr	r2, [pc, #132]	; (8002cf0 <HAL_I2C_MspInit+0xb0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d13b      	bne.n	8002ce8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c70:	2340      	movs	r3, #64	; 0x40
 8002c72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c74:	2300      	movs	r3, #0
 8002c76:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f002 fd15 	bl	80056ac <HAL_RCCEx_PeriphCLKConfig>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002c88:	f7ff ffa4 	bl	8002bd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c8c:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <HAL_I2C_MspInit+0xb4>)
 8002c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c90:	4a18      	ldr	r2, [pc, #96]	; (8002cf4 <HAL_I2C_MspInit+0xb4>)
 8002c92:	f043 0302 	orr.w	r3, r3, #2
 8002c96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c98:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <HAL_I2C_MspInit+0xb4>)
 8002c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ca4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ca8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cac:	2312      	movs	r3, #18
 8002cae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cbe:	2304      	movs	r3, #4
 8002cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cc8:	4619      	mov	r1, r3
 8002cca:	480b      	ldr	r0, [pc, #44]	; (8002cf8 <HAL_I2C_MspInit+0xb8>)
 8002ccc:	f000 ffea 	bl	8003ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cd0:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <HAL_I2C_MspInit+0xb4>)
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd4:	4a07      	ldr	r2, [pc, #28]	; (8002cf4 <HAL_I2C_MspInit+0xb4>)
 8002cd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cda:	6593      	str	r3, [r2, #88]	; 0x58
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_I2C_MspInit+0xb4>)
 8002cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ce8:	bf00      	nop
 8002cea:	37b0      	adds	r7, #176	; 0xb0
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40005400 	.word	0x40005400
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	48000400 	.word	0x48000400

08002cfc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <HAL_TIM_PWM_MspInit+0x38>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d10b      	bne.n	8002d26 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d14:	f043 0302 	orr.w	r3, r3, #2
 8002d18:	6593      	str	r3, [r2, #88]	; 0x58
 8002d1a:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40000400 	.word	0x40000400
 8002d38:	40021000 	.word	0x40021000

08002d3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a16      	ldr	r2, [pc, #88]	; (8002da4 <HAL_TIM_Base_MspInit+0x68>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d114      	bne.n	8002d78 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d4e:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <HAL_TIM_Base_MspInit+0x6c>)
 8002d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d52:	4a15      	ldr	r2, [pc, #84]	; (8002da8 <HAL_TIM_Base_MspInit+0x6c>)
 8002d54:	f043 0310 	orr.w	r3, r3, #16
 8002d58:	6593      	str	r3, [r2, #88]	; 0x58
 8002d5a:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <HAL_TIM_Base_MspInit+0x6c>)
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2105      	movs	r1, #5
 8002d6a:	2036      	movs	r0, #54	; 0x36
 8002d6c:	f000 fb67 	bl	800343e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d70:	2036      	movs	r0, #54	; 0x36
 8002d72:	f000 fb80 	bl	8003476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002d76:	e010      	b.n	8002d9a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0b      	ldr	r2, [pc, #44]	; (8002dac <HAL_TIM_Base_MspInit+0x70>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d10b      	bne.n	8002d9a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <HAL_TIM_Base_MspInit+0x6c>)
 8002d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d86:	4a08      	ldr	r2, [pc, #32]	; (8002da8 <HAL_TIM_Base_MspInit+0x6c>)
 8002d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_TIM_Base_MspInit+0x6c>)
 8002d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40001000 	.word	0x40001000
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40014400 	.word	0x40014400

08002db0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 030c 	add.w	r3, r7, #12
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a11      	ldr	r2, [pc, #68]	; (8002e14 <HAL_TIM_MspPostInit+0x64>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d11b      	bne.n	8002e0a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd2:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <HAL_TIM_MspPostInit+0x68>)
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd6:	4a10      	ldr	r2, [pc, #64]	; (8002e18 <HAL_TIM_MspPostInit+0x68>)
 8002dd8:	f043 0302 	orr.w	r3, r3, #2
 8002ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dde:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <HAL_TIM_MspPostInit+0x68>)
 8002de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002dea:	2310      	movs	r3, #16
 8002dec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dee:	2302      	movs	r3, #2
 8002df0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dfe:	f107 030c 	add.w	r3, r7, #12
 8002e02:	4619      	mov	r1, r3
 8002e04:	4805      	ldr	r0, [pc, #20]	; (8002e1c <HAL_TIM_MspPostInit+0x6c>)
 8002e06:	f000 ff4d 	bl	8003ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e0a:	bf00      	nop
 8002e0c:	3720      	adds	r7, #32
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40000400 	.word	0x40000400
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	48000400 	.word	0x48000400

08002e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b0ac      	sub	sp, #176	; 0xb0
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	2288      	movs	r2, #136	; 0x88
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4618      	mov	r0, r3
 8002e42:	f008 fb79 	bl	800b538 <memset>
  if(huart->Instance==USART2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a25      	ldr	r2, [pc, #148]	; (8002ee0 <HAL_UART_MspInit+0xc0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d143      	bne.n	8002ed8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e50:	2302      	movs	r3, #2
 8002e52:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e54:	2300      	movs	r3, #0
 8002e56:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f002 fc25 	bl	80056ac <HAL_RCCEx_PeriphCLKConfig>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e68:	f7ff feb4 	bl	8002bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <HAL_UART_MspInit+0xc4>)
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <HAL_UART_MspInit+0xc4>)
 8002e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e76:	6593      	str	r3, [r2, #88]	; 0x58
 8002e78:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <HAL_UART_MspInit+0xc4>)
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e84:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <HAL_UART_MspInit+0xc4>)
 8002e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e88:	4a16      	ldr	r2, [pc, #88]	; (8002ee4 <HAL_UART_MspInit+0xc4>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e90:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <HAL_UART_MspInit+0xc4>)
 8002e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e9c:	230c      	movs	r3, #12
 8002e9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002eb4:	2307      	movs	r3, #7
 8002eb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ec4:	f000 feee 	bl	8003ca4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2105      	movs	r1, #5
 8002ecc:	2026      	movs	r0, #38	; 0x26
 8002ece:	f000 fab6 	bl	800343e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ed2:	2026      	movs	r0, #38	; 0x26
 8002ed4:	f000 facf 	bl	8003476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ed8:	bf00      	nop
 8002eda:	37b0      	adds	r7, #176	; 0xb0
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40004400 	.word	0x40004400
 8002ee4:	40021000 	.word	0x40021000

08002ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002eec:	e7fe      	b.n	8002eec <NMI_Handler+0x4>

08002eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ef2:	e7fe      	b.n	8002ef2 <HardFault_Handler+0x4>

08002ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ef8:	e7fe      	b.n	8002ef8 <MemManage_Handler+0x4>

08002efa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002efa:	b480      	push	{r7}
 8002efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002efe:	e7fe      	b.n	8002efe <BusFault_Handler+0x4>

08002f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f04:	e7fe      	b.n	8002f04 <UsageFault_Handler+0x4>

08002f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f06:	b480      	push	{r7}
 8002f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f18:	f000 f972 	bl	8003200 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002f1c:	f007 fa22 	bl	800a364 <xTaskGetSchedulerState>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d001      	beq.n	8002f2a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002f26:	f008 f807 	bl	800af38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002f32:	f000 fbb3 	bl	800369c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f40:	4802      	ldr	r0, [pc, #8]	; (8002f4c <USART2_IRQHandler+0x10>)
 8002f42:	f004 fcdb 	bl	80078fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000498 	.word	0x20000498

08002f50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8002f54:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f58:	f001 f898 	bl	800408c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002f5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002f60:	f001 f894 	bl	800408c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f64:	bf00      	nop
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f6c:	4802      	ldr	r0, [pc, #8]	; (8002f78 <TIM6_DAC_IRQHandler+0x10>)
 8002f6e:	f003 fc6f 	bl	8006850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000400 	.word	0x20000400

08002f7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
	return 1;
 8002f80:	2301      	movs	r3, #1
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <_kill>:

int _kill(int pid, int sig)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f96:	f008 fa87 	bl	800b4a8 <__errno>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2216      	movs	r2, #22
 8002f9e:	601a      	str	r2, [r3, #0]
	return -1;
 8002fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <_exit>:

void _exit (int status)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff ffe7 	bl	8002f8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002fbe:	e7fe      	b.n	8002fbe <_exit+0x12>

08002fc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	e00a      	b.n	8002fe8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002fd2:	f3af 8000 	nop.w
 8002fd6:	4601      	mov	r1, r0
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	60ba      	str	r2, [r7, #8]
 8002fde:	b2ca      	uxtb	r2, r1
 8002fe0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	dbf0      	blt.n	8002fd2 <_read+0x12>
	}

return len;
 8002ff0:	687b      	ldr	r3, [r7, #4]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <_close>:
	}
	return len;
}

int _close(int file)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
	return -1;
 8003002:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003006:	4618      	mov	r0, r3
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003022:	605a      	str	r2, [r3, #4]
	return 0;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <_isatty>:

int _isatty(int file)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
	return 1;
 800303a:	2301      	movs	r3, #1
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
	return 0;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800306c:	4a14      	ldr	r2, [pc, #80]	; (80030c0 <_sbrk+0x5c>)
 800306e:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <_sbrk+0x60>)
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003078:	4b13      	ldr	r3, [pc, #76]	; (80030c8 <_sbrk+0x64>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d102      	bne.n	8003086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003080:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <_sbrk+0x64>)
 8003082:	4a12      	ldr	r2, [pc, #72]	; (80030cc <_sbrk+0x68>)
 8003084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003086:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <_sbrk+0x64>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	429a      	cmp	r2, r3
 8003092:	d207      	bcs.n	80030a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003094:	f008 fa08 	bl	800b4a8 <__errno>
 8003098:	4603      	mov	r3, r0
 800309a:	220c      	movs	r2, #12
 800309c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800309e:	f04f 33ff 	mov.w	r3, #4294967295
 80030a2:	e009      	b.n	80030b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030a4:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <_sbrk+0x64>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030aa:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <_sbrk+0x64>)
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4413      	add	r3, r2
 80030b2:	4a05      	ldr	r2, [pc, #20]	; (80030c8 <_sbrk+0x64>)
 80030b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030b6:	68fb      	ldr	r3, [r7, #12]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	20018000 	.word	0x20018000
 80030c4:	00000400 	.word	0x00000400
 80030c8:	20000534 	.word	0x20000534
 80030cc:	20002628 	.word	0x20002628

080030d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <SystemInit+0x20>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	4a05      	ldr	r2, [pc, #20]	; (80030f0 <SystemInit+0x20>)
 80030dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80030e4:	bf00      	nop
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80030f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800312c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030f8:	f7ff ffea 	bl	80030d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030fc:	480c      	ldr	r0, [pc, #48]	; (8003130 <LoopForever+0x6>)
  ldr r1, =_edata
 80030fe:	490d      	ldr	r1, [pc, #52]	; (8003134 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003100:	4a0d      	ldr	r2, [pc, #52]	; (8003138 <LoopForever+0xe>)
  movs r3, #0
 8003102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003104:	e002      	b.n	800310c <LoopCopyDataInit>

08003106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800310a:	3304      	adds	r3, #4

0800310c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800310c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800310e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003110:	d3f9      	bcc.n	8003106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003112:	4a0a      	ldr	r2, [pc, #40]	; (800313c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003114:	4c0a      	ldr	r4, [pc, #40]	; (8003140 <LoopForever+0x16>)
  movs r3, #0
 8003116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003118:	e001      	b.n	800311e <LoopFillZerobss>

0800311a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800311a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800311c:	3204      	adds	r2, #4

0800311e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800311e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003120:	d3fb      	bcc.n	800311a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003122:	f008 f9c7 	bl	800b4b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003126:	f7ff fadb 	bl	80026e0 <main>

0800312a <LoopForever>:

LoopForever:
    b LoopForever
 800312a:	e7fe      	b.n	800312a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800312c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003134:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8003138:	0800f1c0 	.word	0x0800f1c0
  ldr r2, =_sbss
 800313c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003140:	20002628 	.word	0x20002628

08003144 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003144:	e7fe      	b.n	8003144 <ADC1_2_IRQHandler>
	...

08003148 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003152:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <HAL_Init+0x3c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a0b      	ldr	r2, [pc, #44]	; (8003184 <HAL_Init+0x3c>)
 8003158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800315e:	2003      	movs	r0, #3
 8003160:	f000 f962 	bl	8003428 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003164:	200f      	movs	r0, #15
 8003166:	f000 f80f 	bl	8003188 <HAL_InitTick>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	71fb      	strb	r3, [r7, #7]
 8003174:	e001      	b.n	800317a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003176:	f7ff fd33 	bl	8002be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800317a:	79fb      	ldrb	r3, [r7, #7]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40022000 	.word	0x40022000

08003188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003194:	4b17      	ldr	r3, [pc, #92]	; (80031f4 <HAL_InitTick+0x6c>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d023      	beq.n	80031e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800319c:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <HAL_InitTick+0x70>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <HAL_InitTick+0x6c>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	4619      	mov	r1, r3
 80031a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80031ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 f97b 	bl	80034ae <HAL_SYSTICK_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10f      	bne.n	80031de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b0f      	cmp	r3, #15
 80031c2:	d809      	bhi.n	80031d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031c4:	2200      	movs	r2, #0
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	f04f 30ff 	mov.w	r0, #4294967295
 80031cc:	f000 f937 	bl	800343e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031d0:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <HAL_InitTick+0x74>)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e007      	b.n	80031e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	73fb      	strb	r3, [r7, #15]
 80031dc:	e004      	b.n	80031e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	73fb      	strb	r3, [r7, #15]
 80031e2:	e001      	b.n	80031e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000008 	.word	0x20000008
 80031f8:	20000000 	.word	0x20000000
 80031fc:	20000004 	.word	0x20000004

08003200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_IncTick+0x20>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	4b06      	ldr	r3, [pc, #24]	; (8003224 <HAL_IncTick+0x24>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4413      	add	r3, r2
 8003210:	4a04      	ldr	r2, [pc, #16]	; (8003224 <HAL_IncTick+0x24>)
 8003212:	6013      	str	r3, [r2, #0]
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	20000008 	.word	0x20000008
 8003224:	20000538 	.word	0x20000538

08003228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return uwTick;
 800322c:	4b03      	ldr	r3, [pc, #12]	; (800323c <HAL_GetTick+0x14>)
 800322e:	681b      	ldr	r3, [r3, #0]
}
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000538 	.word	0x20000538

08003240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003250:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <__NVIC_SetPriorityGrouping+0x44>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800325c:	4013      	ands	r3, r2
 800325e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800326c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003272:	4a04      	ldr	r2, [pc, #16]	; (8003284 <__NVIC_SetPriorityGrouping+0x44>)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	60d3      	str	r3, [r2, #12]
}
 8003278:	bf00      	nop
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	e000ed00 	.word	0xe000ed00

08003288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <__NVIC_GetPriorityGrouping+0x18>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	0a1b      	lsrs	r3, r3, #8
 8003292:	f003 0307 	and.w	r3, r3, #7
}
 8003296:	4618      	mov	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	db0b      	blt.n	80032ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032b6:	79fb      	ldrb	r3, [r7, #7]
 80032b8:	f003 021f 	and.w	r2, r3, #31
 80032bc:	4907      	ldr	r1, [pc, #28]	; (80032dc <__NVIC_EnableIRQ+0x38>)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	2001      	movs	r0, #1
 80032c6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	e000e100 	.word	0xe000e100

080032e0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	db12      	blt.n	8003318 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	f003 021f 	and.w	r2, r3, #31
 80032f8:	490a      	ldr	r1, [pc, #40]	; (8003324 <__NVIC_DisableIRQ+0x44>)
 80032fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	2001      	movs	r0, #1
 8003302:	fa00 f202 	lsl.w	r2, r0, r2
 8003306:	3320      	adds	r3, #32
 8003308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800330c:	f3bf 8f4f 	dsb	sy
}
 8003310:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003312:	f3bf 8f6f 	isb	sy
}
 8003316:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	e000e100 	.word	0xe000e100

08003328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	6039      	str	r1, [r7, #0]
 8003332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003338:	2b00      	cmp	r3, #0
 800333a:	db0a      	blt.n	8003352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	b2da      	uxtb	r2, r3
 8003340:	490c      	ldr	r1, [pc, #48]	; (8003374 <__NVIC_SetPriority+0x4c>)
 8003342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003346:	0112      	lsls	r2, r2, #4
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	440b      	add	r3, r1
 800334c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003350:	e00a      	b.n	8003368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	4908      	ldr	r1, [pc, #32]	; (8003378 <__NVIC_SetPriority+0x50>)
 8003358:	79fb      	ldrb	r3, [r7, #7]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	3b04      	subs	r3, #4
 8003360:	0112      	lsls	r2, r2, #4
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	440b      	add	r3, r1
 8003366:	761a      	strb	r2, [r3, #24]
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000e100 	.word	0xe000e100
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800337c:	b480      	push	{r7}
 800337e:	b089      	sub	sp, #36	; 0x24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f1c3 0307 	rsb	r3, r3, #7
 8003396:	2b04      	cmp	r3, #4
 8003398:	bf28      	it	cs
 800339a:	2304      	movcs	r3, #4
 800339c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	3304      	adds	r3, #4
 80033a2:	2b06      	cmp	r3, #6
 80033a4:	d902      	bls.n	80033ac <NVIC_EncodePriority+0x30>
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3b03      	subs	r3, #3
 80033aa:	e000      	b.n	80033ae <NVIC_EncodePriority+0x32>
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b0:	f04f 32ff 	mov.w	r2, #4294967295
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43da      	mvns	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	401a      	ands	r2, r3
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033c4:	f04f 31ff 	mov.w	r1, #4294967295
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	fa01 f303 	lsl.w	r3, r1, r3
 80033ce:	43d9      	mvns	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d4:	4313      	orrs	r3, r2
         );
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3724      	adds	r7, #36	; 0x24
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
	...

080033e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033f4:	d301      	bcc.n	80033fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033f6:	2301      	movs	r3, #1
 80033f8:	e00f      	b.n	800341a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033fa:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <SysTick_Config+0x40>)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3b01      	subs	r3, #1
 8003400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003402:	210f      	movs	r1, #15
 8003404:	f04f 30ff 	mov.w	r0, #4294967295
 8003408:	f7ff ff8e 	bl	8003328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800340c:	4b05      	ldr	r3, [pc, #20]	; (8003424 <SysTick_Config+0x40>)
 800340e:	2200      	movs	r2, #0
 8003410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003412:	4b04      	ldr	r3, [pc, #16]	; (8003424 <SysTick_Config+0x40>)
 8003414:	2207      	movs	r2, #7
 8003416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	e000e010 	.word	0xe000e010

08003428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff ff05 	bl	8003240 <__NVIC_SetPriorityGrouping>
}
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b086      	sub	sp, #24
 8003442:	af00      	add	r7, sp, #0
 8003444:	4603      	mov	r3, r0
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003450:	f7ff ff1a 	bl	8003288 <__NVIC_GetPriorityGrouping>
 8003454:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	68b9      	ldr	r1, [r7, #8]
 800345a:	6978      	ldr	r0, [r7, #20]
 800345c:	f7ff ff8e 	bl	800337c <NVIC_EncodePriority>
 8003460:	4602      	mov	r2, r0
 8003462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003466:	4611      	mov	r1, r2
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff ff5d 	bl	8003328 <__NVIC_SetPriority>
}
 800346e:	bf00      	nop
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	4603      	mov	r3, r0
 800347e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff ff0d 	bl	80032a4 <__NVIC_EnableIRQ>
}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	4603      	mov	r3, r0
 800349a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800349c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff1d 	bl	80032e0 <__NVIC_DisableIRQ>
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff ff94 	bl	80033e4 <SysTick_Config>
 80034bc:	4603      	mov	r3, r0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b085      	sub	sp, #20
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d008      	beq.n	80034f0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2204      	movs	r2, #4
 80034e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e022      	b.n	8003536 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 020e 	bic.w	r2, r2, #14
 80034fe:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0201 	bic.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003514:	f003 021c 	and.w	r2, r3, #28
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	2101      	movs	r1, #1
 800351e:	fa01 f202 	lsl.w	r2, r1, r2
 8003522:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003534:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d005      	beq.n	8003566 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2204      	movs	r2, #4
 800355e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
 8003564:	e029      	b.n	80035ba <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 020e 	bic.w	r2, r2, #14
 8003574:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0201 	bic.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	f003 021c 	and.w	r2, r3, #28
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	2101      	movs	r1, #1
 8003594:	fa01 f202 	lsl.w	r2, r1, r2
 8003598:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	4798      	blx	r3
    }
  }
  return status;
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80035d6:	4b2f      	ldr	r3, [pc, #188]	; (8003694 <HAL_FLASH_Program+0xd0>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_FLASH_Program+0x1e>
 80035de:	2302      	movs	r3, #2
 80035e0:	e053      	b.n	800368a <HAL_FLASH_Program+0xc6>
 80035e2:	4b2c      	ldr	r3, [pc, #176]	; (8003694 <HAL_FLASH_Program+0xd0>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035ec:	f000 f964 	bl	80038b8 <FLASH_WaitForLastOperation>
 80035f0:	4603      	mov	r3, r0
 80035f2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80035f4:	7dfb      	ldrb	r3, [r7, #23]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d143      	bne.n	8003682 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80035fa:	4b26      	ldr	r3, [pc, #152]	; (8003694 <HAL_FLASH_Program+0xd0>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003600:	4b25      	ldr	r3, [pc, #148]	; (8003698 <HAL_FLASH_Program+0xd4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003608:	2b00      	cmp	r3, #0
 800360a:	d009      	beq.n	8003620 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800360c:	4b22      	ldr	r3, [pc, #136]	; (8003698 <HAL_FLASH_Program+0xd4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a21      	ldr	r2, [pc, #132]	; (8003698 <HAL_FLASH_Program+0xd4>)
 8003612:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003616:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003618:	4b1e      	ldr	r3, [pc, #120]	; (8003694 <HAL_FLASH_Program+0xd0>)
 800361a:	2202      	movs	r2, #2
 800361c:	771a      	strb	r2, [r3, #28]
 800361e:	e002      	b.n	8003626 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003620:	4b1c      	ldr	r3, [pc, #112]	; (8003694 <HAL_FLASH_Program+0xd0>)
 8003622:	2200      	movs	r2, #0
 8003624:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d107      	bne.n	800363c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800362c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003630:	68b8      	ldr	r0, [r7, #8]
 8003632:	f000 f997 	bl	8003964 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003636:	2301      	movs	r3, #1
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	e010      	b.n	800365e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d002      	beq.n	8003648 <HAL_FLASH_Program+0x84>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d10a      	bne.n	800365e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	4619      	mov	r1, r3
 800364c:	68b8      	ldr	r0, [r7, #8]
 800364e:	f000 f9af 	bl	80039b0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d102      	bne.n	800365e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003658:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800365c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800365e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003662:	f000 f929 	bl	80038b8 <FLASH_WaitForLastOperation>
 8003666:	4603      	mov	r3, r0
 8003668:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d006      	beq.n	800367e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003670:	4b09      	ldr	r3, [pc, #36]	; (8003698 <HAL_FLASH_Program+0xd4>)
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	43db      	mvns	r3, r3
 8003678:	4907      	ldr	r1, [pc, #28]	; (8003698 <HAL_FLASH_Program+0xd4>)
 800367a:	4013      	ands	r3, r2
 800367c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800367e:	f000 fac7 	bl	8003c10 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003682:	4b04      	ldr	r3, [pc, #16]	; (8003694 <HAL_FLASH_Program+0xd0>)
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]

  return status;
 8003688:	7dfb      	ldrb	r3, [r7, #23]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	2000000c 	.word	0x2000000c
 8003698:	40022000 	.word	0x40022000

0800369c <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 80036a2:	4b68      	ldr	r3, [pc, #416]	; (8003844 <HAL_FLASH_IRQHandler+0x1a8>)
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	4a67      	ldr	r2, [pc, #412]	; (8003844 <HAL_FLASH_IRQHandler+0x1a8>)
 80036a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80036ac:	f023 0307 	bic.w	r3, r3, #7
 80036b0:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 80036b2:	4b64      	ldr	r3, [pc, #400]	; (8003844 <HAL_FLASH_IRQHandler+0x1a8>)
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	4a63      	ldr	r2, [pc, #396]	; (8003844 <HAL_FLASH_IRQHandler+0x1a8>)
 80036b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036bc:	6153      	str	r3, [r2, #20]
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 80036be:	4b62      	ldr	r3, [pc, #392]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 80036c0:	7a1b      	ldrb	r3, [r3, #8]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d105      	bne.n	80036d4 <HAL_FLASH_IRQHandler+0x38>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80036c8:	4b5e      	ldr	r3, [pc, #376]	; (8003844 <HAL_FLASH_IRQHandler+0x1a8>)
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	4a5d      	ldr	r2, [pc, #372]	; (8003844 <HAL_FLASH_IRQHandler+0x1a8>)
 80036ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d2:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80036d4:	4b5b      	ldr	r3, [pc, #364]	; (8003844 <HAL_FLASH_IRQHandler+0x1a8>)
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80036dc:	4013      	ands	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]

  if (error !=0U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d045      	beq.n	8003772 <HAL_FLASH_IRQHandler+0xd6>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80036e6:	4b58      	ldr	r3, [pc, #352]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	4a56      	ldr	r2, [pc, #344]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 80036f0:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d007      	beq.n	800370c <HAL_FLASH_IRQHandler+0x70>
 80036fc:	4b51      	ldr	r3, [pc, #324]	; (8003844 <HAL_FLASH_IRQHandler+0x1a8>)
 80036fe:	699a      	ldr	r2, [r3, #24]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003706:	494f      	ldr	r1, [pc, #316]	; (8003844 <HAL_FLASH_IRQHandler+0x1a8>)
 8003708:	4313      	orrs	r3, r2
 800370a:	618b      	str	r3, [r1, #24]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d004      	beq.n	8003720 <HAL_FLASH_IRQHandler+0x84>
 8003716:	4a4b      	ldr	r2, [pc, #300]	; (8003844 <HAL_FLASH_IRQHandler+0x1a8>)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800371e:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches() ;
 8003720:	f000 fa76 	bl	8003c10 <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 8003724:	4b48      	ldr	r3, [pc, #288]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 8003726:	7a1b      	ldrb	r3, [r3, #8]
 8003728:	72fb      	strb	r3, [r7, #11]
    if(procedure == FLASH_PROC_PAGE_ERASE)
 800372a:	7afb      	ldrb	r3, [r7, #11]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d105      	bne.n	800373c <HAL_FLASH_IRQHandler+0xa0>
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Page);
 8003730:	4b45      	ldr	r3, [pc, #276]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	4618      	mov	r0, r3
 8003736:	f000 f893 	bl	8003860 <HAL_FLASH_OperationErrorCallback>
 800373a:	e017      	b.n	800376c <HAL_FLASH_IRQHandler+0xd0>
    }
    else if(procedure == FLASH_PROC_MASS_ERASE)
 800373c:	7afb      	ldrb	r3, [r7, #11]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d105      	bne.n	800374e <HAL_FLASH_IRQHandler+0xb2>
    {
        HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 8003742:	4b41      	ldr	r3, [pc, #260]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	4618      	mov	r0, r3
 8003748:	f000 f88a 	bl	8003860 <HAL_FLASH_OperationErrorCallback>
 800374c:	e00e      	b.n	800376c <HAL_FLASH_IRQHandler+0xd0>
    }
    else if((procedure == FLASH_PROC_PROGRAM) ||
 800374e:	7afb      	ldrb	r3, [r7, #11]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d002      	beq.n	800375a <HAL_FLASH_IRQHandler+0xbe>
 8003754:	7afb      	ldrb	r3, [r7, #11]
 8003756:	2b04      	cmp	r3, #4
 8003758:	d105      	bne.n	8003766 <HAL_FLASH_IRQHandler+0xca>
            (procedure == FLASH_PROC_PROGRAM_LAST))
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Address);
 800375a:	4b3b      	ldr	r3, [pc, #236]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f87e 	bl	8003860 <HAL_FLASH_OperationErrorCallback>
 8003764:	e002      	b.n	800376c <HAL_FLASH_IRQHandler+0xd0>
    }
    else
    {
       HAL_FLASH_OperationErrorCallback(0U);
 8003766:	2000      	movs	r0, #0
 8003768:	f000 f87a 	bl	8003860 <HAL_FLASH_OperationErrorCallback>
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800376c:	4b36      	ldr	r3, [pc, #216]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 800376e:	2200      	movs	r2, #0
 8003770:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
 8003772:	4b34      	ldr	r3, [pc, #208]	; (8003844 <HAL_FLASH_IRQHandler+0x1a8>)
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d04f      	beq.n	800381e <HAL_FLASH_IRQHandler+0x182>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800377e:	4b31      	ldr	r3, [pc, #196]	; (8003844 <HAL_FLASH_IRQHandler+0x1a8>)
 8003780:	2201      	movs	r2, #1
 8003782:	611a      	str	r2, [r3, #16]

    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 8003784:	4b30      	ldr	r3, [pc, #192]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 8003786:	7a1b      	ldrb	r3, [r3, #8]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b01      	cmp	r3, #1
 800378c:	d12b      	bne.n	80037e6 <HAL_FLASH_IRQHandler+0x14a>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 800378e:	4b2e      	ldr	r3, [pc, #184]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	3b01      	subs	r3, #1
 8003794:	4a2c      	ldr	r2, [pc, #176]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 8003796:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if(pFlash.NbPagesToErase != 0U)
 8003798:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d013      	beq.n	80037c8 <HAL_FLASH_IRQHandler+0x12c>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 80037a0:	4b29      	ldr	r3, [pc, #164]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 f851 	bl	800384c <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 80037aa:	4b27      	ldr	r3, [pc, #156]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	3301      	adds	r3, #1
 80037b0:	4a25      	ldr	r2, [pc, #148]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 80037b2:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 80037b4:	4b24      	ldr	r3, [pc, #144]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 80037ba:	4b23      	ldr	r3, [pc, #140]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	4619      	mov	r1, r3
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f9ef 	bl	8003ba4 <FLASH_PageErase>
 80037c6:	e02a      	b.n	800381e <HAL_FLASH_IRQHandler+0x182>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 80037c8:	4b1f      	ldr	r3, [pc, #124]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 80037ca:	f04f 32ff 	mov.w	r2, #4294967295
 80037ce:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80037d0:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80037d6:	f000 fa1b 	bl	8003c10 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 80037da:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 f834 	bl	800384c <HAL_FLASH_EndOfOperationCallback>
 80037e4:	e01b      	b.n	800381e <HAL_FLASH_IRQHandler+0x182>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches() ;
 80037e6:	f000 fa13 	bl	8003c10 <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 80037ea:	4b17      	ldr	r3, [pc, #92]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 80037ec:	7a1b      	ldrb	r3, [r3, #8]
 80037ee:	72fb      	strb	r3, [r7, #11]
      if(procedure == FLASH_PROC_MASS_ERASE)
 80037f0:	7afb      	ldrb	r3, [r7, #11]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d105      	bne.n	8003802 <HAL_FLASH_IRQHandler+0x166>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80037f6:	4b14      	ldr	r3, [pc, #80]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f826 	bl	800384c <HAL_FLASH_EndOfOperationCallback>
 8003800:	e00a      	b.n	8003818 <HAL_FLASH_IRQHandler+0x17c>
      }
      else if((procedure == FLASH_PROC_PROGRAM) ||
 8003802:	7afb      	ldrb	r3, [r7, #11]
 8003804:	2b03      	cmp	r3, #3
 8003806:	d002      	beq.n	800380e <HAL_FLASH_IRQHandler+0x172>
 8003808:	7afb      	ldrb	r3, [r7, #11]
 800380a:	2b04      	cmp	r3, #4
 800380c:	d104      	bne.n	8003818 <HAL_FLASH_IRQHandler+0x17c>
              (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800380e:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	4618      	mov	r0, r3
 8003814:	f000 f81a 	bl	800384c <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 800381a:	2200      	movs	r2, #0
 800381c:	721a      	strb	r2, [r3, #8]
    }
  }

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 8003820:	7a1b      	ldrb	r3, [r3, #8]
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d108      	bne.n	800383a <HAL_FLASH_IRQHandler+0x19e>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_FLASH_IRQHandler+0x1a8>)
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	4a05      	ldr	r2, [pc, #20]	; (8003844 <HAL_FLASH_IRQHandler+0x1a8>)
 800382e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003832:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <HAL_FLASH_IRQHandler+0x1ac>)
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
  }
}
 800383a:	bf00      	nop
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40022000 	.word	0x40022000
 8003848:	2000000c 	.word	0x2000000c

0800384c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800387e:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_FLASH_Unlock+0x38>)
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	2b00      	cmp	r3, #0
 8003884:	da0b      	bge.n	800389e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003886:	4b09      	ldr	r3, [pc, #36]	; (80038ac <HAL_FLASH_Unlock+0x38>)
 8003888:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <HAL_FLASH_Unlock+0x3c>)
 800388a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800388c:	4b07      	ldr	r3, [pc, #28]	; (80038ac <HAL_FLASH_Unlock+0x38>)
 800388e:	4a09      	ldr	r2, [pc, #36]	; (80038b4 <HAL_FLASH_Unlock+0x40>)
 8003890:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003892:	4b06      	ldr	r3, [pc, #24]	; (80038ac <HAL_FLASH_Unlock+0x38>)
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	2b00      	cmp	r3, #0
 8003898:	da01      	bge.n	800389e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800389e:	79fb      	ldrb	r3, [r7, #7]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	40022000 	.word	0x40022000
 80038b0:	45670123 	.word	0x45670123
 80038b4:	cdef89ab 	.word	0xcdef89ab

080038b8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80038c0:	f7ff fcb2 	bl	8003228 <HAL_GetTick>
 80038c4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80038c6:	e00d      	b.n	80038e4 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ce:	d009      	beq.n	80038e4 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80038d0:	f7ff fcaa 	bl	8003228 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d801      	bhi.n	80038e4 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e037      	b.n	8003954 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80038e4:	4b1d      	ldr	r3, [pc, #116]	; (800395c <FLASH_WaitForLastOperation+0xa4>)
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1eb      	bne.n	80038c8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80038f0:	4b1a      	ldr	r3, [pc, #104]	; (800395c <FLASH_WaitForLastOperation+0xa4>)
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80038f8:	4013      	ands	r3, r2
 80038fa:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d01e      	beq.n	8003940 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003902:	4b17      	ldr	r3, [pc, #92]	; (8003960 <FLASH_WaitForLastOperation+0xa8>)
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	4313      	orrs	r3, r2
 800390a:	4a15      	ldr	r2, [pc, #84]	; (8003960 <FLASH_WaitForLastOperation+0xa8>)
 800390c:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <FLASH_WaitForLastOperation+0x70>
 8003918:	4b10      	ldr	r3, [pc, #64]	; (800395c <FLASH_WaitForLastOperation+0xa4>)
 800391a:	699a      	ldr	r2, [r3, #24]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003922:	490e      	ldr	r1, [pc, #56]	; (800395c <FLASH_WaitForLastOperation+0xa4>)
 8003924:	4313      	orrs	r3, r2
 8003926:	618b      	str	r3, [r1, #24]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d004      	beq.n	800393c <FLASH_WaitForLastOperation+0x84>
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <FLASH_WaitForLastOperation+0xa4>)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800393a:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e009      	b.n	8003954 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003940:	4b06      	ldr	r3, [pc, #24]	; (800395c <FLASH_WaitForLastOperation+0xa4>)
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800394c:	4b03      	ldr	r3, [pc, #12]	; (800395c <FLASH_WaitForLastOperation+0xa4>)
 800394e:	2201      	movs	r2, #1
 8003950:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40022000 	.word	0x40022000
 8003960:	2000000c 	.word	0x2000000c

08003964 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003970:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <FLASH_Program_DoubleWord+0x48>)
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	4a0d      	ldr	r2, [pc, #52]	; (80039ac <FLASH_Program_DoubleWord+0x48>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003982:	f3bf 8f6f 	isb	sy
}
 8003986:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	000a      	movs	r2, r1
 8003996:	2300      	movs	r3, #0
 8003998:	68f9      	ldr	r1, [r7, #12]
 800399a:	3104      	adds	r1, #4
 800399c:	4613      	mov	r3, r2
 800399e:	600b      	str	r3, [r1, #0]
}
 80039a0:	bf00      	nop
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	40022000 	.word	0x40022000

080039b0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	; 0x24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80039ba:	2340      	movs	r3, #64	; 0x40
 80039bc:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80039c6:	4b14      	ldr	r3, [pc, #80]	; (8003a18 <FLASH_Program_Fast+0x68>)
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	4a13      	ldr	r2, [pc, #76]	; (8003a18 <FLASH_Program_Fast+0x68>)
 80039cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039d0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d2:	f3ef 8310 	mrs	r3, PRIMASK
 80039d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80039d8:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80039da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80039dc:	b672      	cpsid	i
}
 80039de:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	3304      	adds	r3, #4
 80039ec:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	3304      	adds	r3, #4
 80039f2:	617b      	str	r3, [r7, #20]
    row_index--;
 80039f4:	7ffb      	ldrb	r3, [r7, #31]
 80039f6:	3b01      	subs	r3, #1
 80039f8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80039fa:	7ffb      	ldrb	r3, [r7, #31]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1ef      	bne.n	80039e0 <FLASH_Program_Fast+0x30>
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f383 8810 	msr	PRIMASK, r3
}
 8003a0a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003a0c:	bf00      	nop
 8003a0e:	3724      	adds	r7, #36	; 0x24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	40022000 	.word	0x40022000

08003a1c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003a26:	4b49      	ldr	r3, [pc, #292]	; (8003b4c <HAL_FLASHEx_Erase+0x130>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_FLASHEx_Erase+0x16>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e087      	b.n	8003b42 <HAL_FLASHEx_Erase+0x126>
 8003a32:	4b46      	ldr	r3, [pc, #280]	; (8003b4c <HAL_FLASHEx_Erase+0x130>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a3c:	f7ff ff3c 	bl	80038b8 <FLASH_WaitForLastOperation>
 8003a40:	4603      	mov	r3, r0
 8003a42:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d177      	bne.n	8003b3a <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a4a:	4b40      	ldr	r3, [pc, #256]	; (8003b4c <HAL_FLASHEx_Erase+0x130>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003a50:	4b3f      	ldr	r3, [pc, #252]	; (8003b50 <HAL_FLASHEx_Erase+0x134>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d013      	beq.n	8003a84 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003a5c:	4b3c      	ldr	r3, [pc, #240]	; (8003b50 <HAL_FLASHEx_Erase+0x134>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d009      	beq.n	8003a7c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003a68:	4b39      	ldr	r3, [pc, #228]	; (8003b50 <HAL_FLASHEx_Erase+0x134>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a38      	ldr	r2, [pc, #224]	; (8003b50 <HAL_FLASHEx_Erase+0x134>)
 8003a6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a72:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003a74:	4b35      	ldr	r3, [pc, #212]	; (8003b4c <HAL_FLASHEx_Erase+0x130>)
 8003a76:	2203      	movs	r2, #3
 8003a78:	771a      	strb	r2, [r3, #28]
 8003a7a:	e016      	b.n	8003aaa <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003a7c:	4b33      	ldr	r3, [pc, #204]	; (8003b4c <HAL_FLASHEx_Erase+0x130>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	771a      	strb	r2, [r3, #28]
 8003a82:	e012      	b.n	8003aaa <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003a84:	4b32      	ldr	r3, [pc, #200]	; (8003b50 <HAL_FLASHEx_Erase+0x134>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d009      	beq.n	8003aa4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003a90:	4b2f      	ldr	r3, [pc, #188]	; (8003b50 <HAL_FLASHEx_Erase+0x134>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a2e      	ldr	r2, [pc, #184]	; (8003b50 <HAL_FLASHEx_Erase+0x134>)
 8003a96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a9a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <HAL_FLASHEx_Erase+0x130>)
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	771a      	strb	r2, [r3, #28]
 8003aa2:	e002      	b.n	8003aaa <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003aa4:	4b29      	ldr	r3, [pc, #164]	; (8003b4c <HAL_FLASHEx_Erase+0x130>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d113      	bne.n	8003ada <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 f84c 	bl	8003b54 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003abc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ac0:	f7ff fefa 	bl	80038b8 <FLASH_WaitForLastOperation>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8003ac8:	4b21      	ldr	r3, [pc, #132]	; (8003b50 <HAL_FLASHEx_Erase+0x134>)
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	4a20      	ldr	r2, [pc, #128]	; (8003b50 <HAL_FLASHEx_Erase+0x134>)
 8003ace:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ad2:	f023 0304 	bic.w	r3, r3, #4
 8003ad6:	6153      	str	r3, [r2, #20]
 8003ad8:	e02d      	b.n	8003b36 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae0:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	e01d      	b.n	8003b26 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	4619      	mov	r1, r3
 8003af0:	68b8      	ldr	r0, [r7, #8]
 8003af2:	f000 f857 	bl	8003ba4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003af6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003afa:	f7ff fedd 	bl	80038b8 <FLASH_WaitForLastOperation>
 8003afe:	4603      	mov	r3, r0
 8003b00:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003b02:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <HAL_FLASHEx_Erase+0x134>)
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	4a12      	ldr	r2, [pc, #72]	; (8003b50 <HAL_FLASHEx_Erase+0x134>)
 8003b08:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b0c:	f023 0302 	bic.w	r3, r3, #2
 8003b10:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	601a      	str	r2, [r3, #0]
          break;
 8003b1e:	e00a      	b.n	8003b36 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	3301      	adds	r3, #1
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d3d9      	bcc.n	8003aea <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003b36:	f000 f86b 	bl	8003c10 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003b3a:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <HAL_FLASHEx_Erase+0x130>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	701a      	strb	r2, [r3, #0]

  return status;
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	2000000c 	.word	0x2000000c
 8003b50:	40022000 	.word	0x40022000

08003b54 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8003b66:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <FLASH_MassErase+0x4c>)
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	4a0d      	ldr	r2, [pc, #52]	; (8003ba0 <FLASH_MassErase+0x4c>)
 8003b6c:	f043 0304 	orr.w	r3, r3, #4
 8003b70:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8003b7c:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <FLASH_MassErase+0x4c>)
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	4a07      	ldr	r2, [pc, #28]	; (8003ba0 <FLASH_MassErase+0x4c>)
 8003b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b86:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003b88:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <FLASH_MassErase+0x4c>)
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <FLASH_MassErase+0x4c>)
 8003b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b92:	6153      	str	r3, [r2, #20]
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	40022000 	.word	0x40022000

08003ba4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d006      	beq.n	8003bc6 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8003bb8:	4b14      	ldr	r3, [pc, #80]	; (8003c0c <FLASH_PageErase+0x68>)
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	4a13      	ldr	r2, [pc, #76]	; (8003c0c <FLASH_PageErase+0x68>)
 8003bbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bc2:	6153      	str	r3, [r2, #20]
 8003bc4:	e005      	b.n	8003bd2 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8003bc6:	4b11      	ldr	r3, [pc, #68]	; (8003c0c <FLASH_PageErase+0x68>)
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	4a10      	ldr	r2, [pc, #64]	; (8003c0c <FLASH_PageErase+0x68>)
 8003bcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bd0:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003bd2:	4b0e      	ldr	r3, [pc, #56]	; (8003c0c <FLASH_PageErase+0x68>)
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8003be2:	490a      	ldr	r1, [pc, #40]	; (8003c0c <FLASH_PageErase+0x68>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003be8:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <FLASH_PageErase+0x68>)
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	4a07      	ldr	r2, [pc, #28]	; (8003c0c <FLASH_PageErase+0x68>)
 8003bee:	f043 0302 	orr.w	r3, r3, #2
 8003bf2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <FLASH_PageErase+0x68>)
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <FLASH_PageErase+0x68>)
 8003bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bfe:	6153      	str	r3, [r2, #20]
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	40022000 	.word	0x40022000

08003c10 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003c16:	4b21      	ldr	r3, [pc, #132]	; (8003c9c <FLASH_FlushCaches+0x8c>)
 8003c18:	7f1b      	ldrb	r3, [r3, #28]
 8003c1a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003c1c:	79fb      	ldrb	r3, [r7, #7]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d002      	beq.n	8003c28 <FLASH_FlushCaches+0x18>
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d117      	bne.n	8003c58 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003c28:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <FLASH_FlushCaches+0x90>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ca0 <FLASH_FlushCaches+0x90>)
 8003c2e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c32:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003c34:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <FLASH_FlushCaches+0x90>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a19      	ldr	r2, [pc, #100]	; (8003ca0 <FLASH_FlushCaches+0x90>)
 8003c3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	4b17      	ldr	r3, [pc, #92]	; (8003ca0 <FLASH_FlushCaches+0x90>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a16      	ldr	r2, [pc, #88]	; (8003ca0 <FLASH_FlushCaches+0x90>)
 8003c46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c4a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c4c:	4b14      	ldr	r3, [pc, #80]	; (8003ca0 <FLASH_FlushCaches+0x90>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <FLASH_FlushCaches+0x90>)
 8003c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c56:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d002      	beq.n	8003c64 <FLASH_FlushCaches+0x54>
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d111      	bne.n	8003c88 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003c64:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <FLASH_FlushCaches+0x90>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a0d      	ldr	r2, [pc, #52]	; (8003ca0 <FLASH_FlushCaches+0x90>)
 8003c6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <FLASH_FlushCaches+0x90>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <FLASH_FlushCaches+0x90>)
 8003c76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c7a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c7c:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <FLASH_FlushCaches+0x90>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a07      	ldr	r2, [pc, #28]	; (8003ca0 <FLASH_FlushCaches+0x90>)
 8003c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c86:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003c88:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <FLASH_FlushCaches+0x8c>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	771a      	strb	r2, [r3, #28]
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	2000000c 	.word	0x2000000c
 8003ca0:	40022000 	.word	0x40022000

08003ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cb2:	e17f      	b.n	8003fb4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	2101      	movs	r1, #1
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 8171 	beq.w	8003fae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d005      	beq.n	8003ce4 <HAL_GPIO_Init+0x40>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d130      	bne.n	8003d46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	2203      	movs	r2, #3
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	43db      	mvns	r3, r3
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4013      	ands	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	f003 0201 	and.w	r2, r3, #1
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d118      	bne.n	8003d84 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003d58:	2201      	movs	r2, #1
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4013      	ands	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	08db      	lsrs	r3, r3, #3
 8003d6e:	f003 0201 	and.w	r2, r3, #1
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d017      	beq.n	8003dc0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	2203      	movs	r2, #3
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d123      	bne.n	8003e14 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	08da      	lsrs	r2, r3, #3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3208      	adds	r2, #8
 8003dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	220f      	movs	r2, #15
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	43db      	mvns	r3, r3
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4013      	ands	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	08da      	lsrs	r2, r3, #3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3208      	adds	r2, #8
 8003e0e:	6939      	ldr	r1, [r7, #16]
 8003e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	2203      	movs	r2, #3
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 0203 	and.w	r2, r3, #3
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 80ac 	beq.w	8003fae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e56:	4b5f      	ldr	r3, [pc, #380]	; (8003fd4 <HAL_GPIO_Init+0x330>)
 8003e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5a:	4a5e      	ldr	r2, [pc, #376]	; (8003fd4 <HAL_GPIO_Init+0x330>)
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	6613      	str	r3, [r2, #96]	; 0x60
 8003e62:	4b5c      	ldr	r3, [pc, #368]	; (8003fd4 <HAL_GPIO_Init+0x330>)
 8003e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	60bb      	str	r3, [r7, #8]
 8003e6c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e6e:	4a5a      	ldr	r2, [pc, #360]	; (8003fd8 <HAL_GPIO_Init+0x334>)
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	089b      	lsrs	r3, r3, #2
 8003e74:	3302      	adds	r3, #2
 8003e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	220f      	movs	r2, #15
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e98:	d025      	beq.n	8003ee6 <HAL_GPIO_Init+0x242>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a4f      	ldr	r2, [pc, #316]	; (8003fdc <HAL_GPIO_Init+0x338>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d01f      	beq.n	8003ee2 <HAL_GPIO_Init+0x23e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a4e      	ldr	r2, [pc, #312]	; (8003fe0 <HAL_GPIO_Init+0x33c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d019      	beq.n	8003ede <HAL_GPIO_Init+0x23a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a4d      	ldr	r2, [pc, #308]	; (8003fe4 <HAL_GPIO_Init+0x340>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d013      	beq.n	8003eda <HAL_GPIO_Init+0x236>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a4c      	ldr	r2, [pc, #304]	; (8003fe8 <HAL_GPIO_Init+0x344>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00d      	beq.n	8003ed6 <HAL_GPIO_Init+0x232>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a4b      	ldr	r2, [pc, #300]	; (8003fec <HAL_GPIO_Init+0x348>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d007      	beq.n	8003ed2 <HAL_GPIO_Init+0x22e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a4a      	ldr	r2, [pc, #296]	; (8003ff0 <HAL_GPIO_Init+0x34c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d101      	bne.n	8003ece <HAL_GPIO_Init+0x22a>
 8003eca:	2306      	movs	r3, #6
 8003ecc:	e00c      	b.n	8003ee8 <HAL_GPIO_Init+0x244>
 8003ece:	2307      	movs	r3, #7
 8003ed0:	e00a      	b.n	8003ee8 <HAL_GPIO_Init+0x244>
 8003ed2:	2305      	movs	r3, #5
 8003ed4:	e008      	b.n	8003ee8 <HAL_GPIO_Init+0x244>
 8003ed6:	2304      	movs	r3, #4
 8003ed8:	e006      	b.n	8003ee8 <HAL_GPIO_Init+0x244>
 8003eda:	2303      	movs	r3, #3
 8003edc:	e004      	b.n	8003ee8 <HAL_GPIO_Init+0x244>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e002      	b.n	8003ee8 <HAL_GPIO_Init+0x244>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <HAL_GPIO_Init+0x244>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	f002 0203 	and.w	r2, r2, #3
 8003eee:	0092      	lsls	r2, r2, #2
 8003ef0:	4093      	lsls	r3, r2
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ef8:	4937      	ldr	r1, [pc, #220]	; (8003fd8 <HAL_GPIO_Init+0x334>)
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	089b      	lsrs	r3, r3, #2
 8003efe:	3302      	adds	r3, #2
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f06:	4b3b      	ldr	r3, [pc, #236]	; (8003ff4 <HAL_GPIO_Init+0x350>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4013      	ands	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f2a:	4a32      	ldr	r2, [pc, #200]	; (8003ff4 <HAL_GPIO_Init+0x350>)
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f30:	4b30      	ldr	r3, [pc, #192]	; (8003ff4 <HAL_GPIO_Init+0x350>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f54:	4a27      	ldr	r2, [pc, #156]	; (8003ff4 <HAL_GPIO_Init+0x350>)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f5a:	4b26      	ldr	r3, [pc, #152]	; (8003ff4 <HAL_GPIO_Init+0x350>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	43db      	mvns	r3, r3
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4013      	ands	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f7e:	4a1d      	ldr	r2, [pc, #116]	; (8003ff4 <HAL_GPIO_Init+0x350>)
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f84:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <HAL_GPIO_Init+0x350>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4013      	ands	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fa8:	4a12      	ldr	r2, [pc, #72]	; (8003ff4 <HAL_GPIO_Init+0x350>)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	fa22 f303 	lsr.w	r3, r2, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f47f ae78 	bne.w	8003cb4 <HAL_GPIO_Init+0x10>
  }
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40010000 	.word	0x40010000
 8003fdc:	48000400 	.word	0x48000400
 8003fe0:	48000800 	.word	0x48000800
 8003fe4:	48000c00 	.word	0x48000c00
 8003fe8:	48001000 	.word	0x48001000
 8003fec:	48001400 	.word	0x48001400
 8003ff0:	48001800 	.word	0x48001800
 8003ff4:	40010400 	.word	0x40010400

08003ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	887b      	ldrh	r3, [r7, #2]
 800400a:	4013      	ands	r3, r2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004010:	2301      	movs	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
 8004014:	e001      	b.n	800401a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004016:	2300      	movs	r3, #0
 8004018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800401a:	7bfb      	ldrb	r3, [r7, #15]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	807b      	strh	r3, [r7, #2]
 8004034:	4613      	mov	r3, r2
 8004036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004038:	787b      	ldrb	r3, [r7, #1]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800403e:	887a      	ldrh	r2, [r7, #2]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004044:	e002      	b.n	800404c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004046:	887a      	ldrh	r2, [r7, #2]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800406a:	887a      	ldrh	r2, [r7, #2]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4013      	ands	r3, r2
 8004070:	041a      	lsls	r2, r3, #16
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	43d9      	mvns	r1, r3
 8004076:	887b      	ldrh	r3, [r7, #2]
 8004078:	400b      	ands	r3, r1
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	619a      	str	r2, [r3, #24]
}
 8004080:	bf00      	nop
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	4603      	mov	r3, r0
 8004094:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004096:	4b08      	ldr	r3, [pc, #32]	; (80040b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	4013      	ands	r3, r2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d006      	beq.n	80040b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040a2:	4a05      	ldr	r2, [pc, #20]	; (80040b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040a4:	88fb      	ldrh	r3, [r7, #6]
 80040a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040a8:	88fb      	ldrh	r3, [r7, #6]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fe fa12 	bl	80024d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80040b0:	bf00      	nop
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40010400 	.word	0x40010400

080040bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e081      	b.n	80041d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fe fdac 	bl	8002c40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2224      	movs	r2, #36	; 0x24
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0201 	bic.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800410c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800411c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d107      	bne.n	8004136 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004132:	609a      	str	r2, [r3, #8]
 8004134:	e006      	b.n	8004144 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004142:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	2b02      	cmp	r3, #2
 800414a:	d104      	bne.n	8004156 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004154:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004168:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004178:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69d9      	ldr	r1, [r3, #28]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1a      	ldr	r2, [r3, #32]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	4608      	mov	r0, r1
 80041e6:	4611      	mov	r1, r2
 80041e8:	461a      	mov	r2, r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	817b      	strh	r3, [r7, #10]
 80041ee:	460b      	mov	r3, r1
 80041f0:	813b      	strh	r3, [r7, #8]
 80041f2:	4613      	mov	r3, r2
 80041f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b20      	cmp	r3, #32
 8004200:	f040 80fd 	bne.w	80043fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <HAL_I2C_Mem_Read+0x34>
 800420a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800420c:	2b00      	cmp	r3, #0
 800420e:	d105      	bne.n	800421c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004216:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0f1      	b.n	8004400 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <HAL_I2C_Mem_Read+0x4e>
 8004226:	2302      	movs	r3, #2
 8004228:	e0ea      	b.n	8004400 <HAL_I2C_Mem_Read+0x224>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004232:	f7fe fff9 	bl	8003228 <HAL_GetTick>
 8004236:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	2319      	movs	r3, #25
 800423e:	2201      	movs	r2, #1
 8004240:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f95b 	bl	8004500 <I2C_WaitOnFlagUntilTimeout>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0d5      	b.n	8004400 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2222      	movs	r2, #34	; 0x22
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2240      	movs	r2, #64	; 0x40
 8004260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a3a      	ldr	r2, [r7, #32]
 800426e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004274:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800427c:	88f8      	ldrh	r0, [r7, #6]
 800427e:	893a      	ldrh	r2, [r7, #8]
 8004280:	8979      	ldrh	r1, [r7, #10]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	9301      	str	r3, [sp, #4]
 8004286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	4603      	mov	r3, r0
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f8bf 	bl	8004410 <I2C_RequestMemoryRead>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0ad      	b.n	8004400 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2bff      	cmp	r3, #255	; 0xff
 80042ac:	d90e      	bls.n	80042cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	22ff      	movs	r2, #255	; 0xff
 80042b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	8979      	ldrh	r1, [r7, #10]
 80042bc:	4b52      	ldr	r3, [pc, #328]	; (8004408 <HAL_I2C_Mem_Read+0x22c>)
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 fac3 	bl	8004850 <I2C_TransferConfig>
 80042ca:	e00f      	b.n	80042ec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	8979      	ldrh	r1, [r7, #10]
 80042de:	4b4a      	ldr	r3, [pc, #296]	; (8004408 <HAL_I2C_Mem_Read+0x22c>)
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 fab2 	bl	8004850 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f2:	2200      	movs	r2, #0
 80042f4:	2104      	movs	r1, #4
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f902 	bl	8004500 <I2C_WaitOnFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e07c      	b.n	8004400 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d034      	beq.n	80043ac <HAL_I2C_Mem_Read+0x1d0>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004346:	2b00      	cmp	r3, #0
 8004348:	d130      	bne.n	80043ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	2200      	movs	r2, #0
 8004352:	2180      	movs	r1, #128	; 0x80
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 f8d3 	bl	8004500 <I2C_WaitOnFlagUntilTimeout>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e04d      	b.n	8004400 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004368:	b29b      	uxth	r3, r3
 800436a:	2bff      	cmp	r3, #255	; 0xff
 800436c:	d90e      	bls.n	800438c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	22ff      	movs	r2, #255	; 0xff
 8004372:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004378:	b2da      	uxtb	r2, r3
 800437a:	8979      	ldrh	r1, [r7, #10]
 800437c:	2300      	movs	r3, #0
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 fa63 	bl	8004850 <I2C_TransferConfig>
 800438a:	e00f      	b.n	80043ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439a:	b2da      	uxtb	r2, r3
 800439c:	8979      	ldrh	r1, [r7, #10]
 800439e:	2300      	movs	r3, #0
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 fa52 	bl	8004850 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d19a      	bne.n	80042ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f920 	bl	8004600 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e01a      	b.n	8004400 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2220      	movs	r2, #32
 80043d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6859      	ldr	r1, [r3, #4]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4b0b      	ldr	r3, [pc, #44]	; (800440c <HAL_I2C_Mem_Read+0x230>)
 80043de:	400b      	ands	r3, r1
 80043e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e000      	b.n	8004400 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80043fe:	2302      	movs	r3, #2
  }
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	80002400 	.word	0x80002400
 800440c:	fe00e800 	.word	0xfe00e800

08004410 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af02      	add	r7, sp, #8
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	4608      	mov	r0, r1
 800441a:	4611      	mov	r1, r2
 800441c:	461a      	mov	r2, r3
 800441e:	4603      	mov	r3, r0
 8004420:	817b      	strh	r3, [r7, #10]
 8004422:	460b      	mov	r3, r1
 8004424:	813b      	strh	r3, [r7, #8]
 8004426:	4613      	mov	r3, r2
 8004428:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	b2da      	uxtb	r2, r3
 800442e:	8979      	ldrh	r1, [r7, #10]
 8004430:	4b20      	ldr	r3, [pc, #128]	; (80044b4 <I2C_RequestMemoryRead+0xa4>)
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	2300      	movs	r3, #0
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 fa0a 	bl	8004850 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	69b9      	ldr	r1, [r7, #24]
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 f89d 	bl	8004580 <I2C_WaitOnTXISFlagUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e02c      	b.n	80044aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004450:	88fb      	ldrh	r3, [r7, #6]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d105      	bne.n	8004462 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004456:	893b      	ldrh	r3, [r7, #8]
 8004458:	b2da      	uxtb	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	629a      	str	r2, [r3, #40]	; 0x28
 8004460:	e015      	b.n	800448e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004462:	893b      	ldrh	r3, [r7, #8]
 8004464:	0a1b      	lsrs	r3, r3, #8
 8004466:	b29b      	uxth	r3, r3
 8004468:	b2da      	uxtb	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004470:	69fa      	ldr	r2, [r7, #28]
 8004472:	69b9      	ldr	r1, [r7, #24]
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f883 	bl	8004580 <I2C_WaitOnTXISFlagUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e012      	b.n	80044aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004484:	893b      	ldrh	r3, [r7, #8]
 8004486:	b2da      	uxtb	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2200      	movs	r2, #0
 8004496:	2140      	movs	r1, #64	; 0x40
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f831 	bl	8004500 <I2C_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	80002000 	.word	0x80002000

080044b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d103      	bne.n	80044d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2200      	movs	r2, #0
 80044d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d007      	beq.n	80044f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699a      	ldr	r2, [r3, #24]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0201 	orr.w	r2, r2, #1
 80044f2:	619a      	str	r2, [r3, #24]
  }
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	4613      	mov	r3, r2
 800450e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004510:	e022      	b.n	8004558 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d01e      	beq.n	8004558 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451a:	f7fe fe85 	bl	8003228 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d302      	bcc.n	8004530 <I2C_WaitOnFlagUntilTimeout+0x30>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d113      	bne.n	8004558 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004534:	f043 0220 	orr.w	r2, r3, #32
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e00f      	b.n	8004578 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	4013      	ands	r3, r2
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	429a      	cmp	r2, r3
 8004566:	bf0c      	ite	eq
 8004568:	2301      	moveq	r3, #1
 800456a:	2300      	movne	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	429a      	cmp	r2, r3
 8004574:	d0cd      	beq.n	8004512 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800458c:	e02c      	b.n	80045e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f870 	bl	8004678 <I2C_IsErrorOccurred>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e02a      	b.n	80045f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a8:	d01e      	beq.n	80045e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045aa:	f7fe fe3d 	bl	8003228 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d302      	bcc.n	80045c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d113      	bne.n	80045e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c4:	f043 0220 	orr.w	r2, r3, #32
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e007      	b.n	80045f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d1cb      	bne.n	800458e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800460c:	e028      	b.n	8004660 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f830 	bl	8004678 <I2C_IsErrorOccurred>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e026      	b.n	8004670 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004622:	f7fe fe01 	bl	8003228 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	429a      	cmp	r2, r3
 8004630:	d302      	bcc.n	8004638 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d113      	bne.n	8004660 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463c:	f043 0220 	orr.w	r2, r3, #32
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e007      	b.n	8004670 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	f003 0320 	and.w	r3, r3, #32
 800466a:	2b20      	cmp	r3, #32
 800466c:	d1cf      	bne.n	800460e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08a      	sub	sp, #40	; 0x28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004692:	2300      	movs	r3, #0
 8004694:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d075      	beq.n	8004790 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2210      	movs	r2, #16
 80046aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046ac:	e056      	b.n	800475c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b4:	d052      	beq.n	800475c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046b6:	f7fe fdb7 	bl	8003228 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d302      	bcc.n	80046cc <I2C_IsErrorOccurred+0x54>
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d147      	bne.n	800475c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ee:	d12e      	bne.n	800474e <I2C_IsErrorOccurred+0xd6>
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046f6:	d02a      	beq.n	800474e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80046f8:	7cfb      	ldrb	r3, [r7, #19]
 80046fa:	2b20      	cmp	r3, #32
 80046fc:	d027      	beq.n	800474e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800470c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800470e:	f7fe fd8b 	bl	8003228 <HAL_GetTick>
 8004712:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004714:	e01b      	b.n	800474e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004716:	f7fe fd87 	bl	8003228 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b19      	cmp	r3, #25
 8004722:	d914      	bls.n	800474e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004728:	f043 0220 	orr.w	r2, r3, #32
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b20      	cmp	r3, #32
 800475a:	d1dc      	bne.n	8004716 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b20      	cmp	r3, #32
 8004768:	d003      	beq.n	8004772 <I2C_IsErrorOccurred+0xfa>
 800476a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800476e:	2b00      	cmp	r3, #0
 8004770:	d09d      	beq.n	80046ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004776:	2b00      	cmp	r3, #0
 8004778:	d103      	bne.n	8004782 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2220      	movs	r2, #32
 8004780:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	f043 0304 	orr.w	r3, r3, #4
 8004788:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00b      	beq.n	80047ba <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00b      	beq.n	80047dc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	f043 0308 	orr.w	r3, r3, #8
 80047ca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00b      	beq.n	80047fe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	f043 0302 	orr.w	r3, r3, #2
 80047ec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80047fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004802:	2b00      	cmp	r3, #0
 8004804:	d01c      	beq.n	8004840 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f7ff fe56 	bl	80044b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6859      	ldr	r1, [r3, #4]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4b0d      	ldr	r3, [pc, #52]	; (800484c <I2C_IsErrorOccurred+0x1d4>)
 8004818:	400b      	ands	r3, r1
 800481a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	431a      	orrs	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004844:	4618      	mov	r0, r3
 8004846:	3728      	adds	r7, #40	; 0x28
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	fe00e800 	.word	0xfe00e800

08004850 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	607b      	str	r3, [r7, #4]
 800485a:	460b      	mov	r3, r1
 800485c:	817b      	strh	r3, [r7, #10]
 800485e:	4613      	mov	r3, r2
 8004860:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004862:	897b      	ldrh	r3, [r7, #10]
 8004864:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004868:	7a7b      	ldrb	r3, [r7, #9]
 800486a:	041b      	lsls	r3, r3, #16
 800486c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004870:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	4313      	orrs	r3, r2
 800487a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800487e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	0d5b      	lsrs	r3, r3, #21
 800488a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800488e:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <I2C_TransferConfig+0x60>)
 8004890:	430b      	orrs	r3, r1
 8004892:	43db      	mvns	r3, r3
 8004894:	ea02 0103 	and.w	r1, r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	430a      	orrs	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80048a2:	bf00      	nop
 80048a4:	371c      	adds	r7, #28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	03ff63ff 	.word	0x03ff63ff

080048b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b20      	cmp	r3, #32
 80048c8:	d138      	bne.n	800493c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e032      	b.n	800493e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2224      	movs	r2, #36	; 0x24
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004906:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6819      	ldr	r1, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004938:	2300      	movs	r3, #0
 800493a:	e000      	b.n	800493e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800493c:	2302      	movs	r3, #2
  }
}
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800494a:	b480      	push	{r7}
 800494c:	b085      	sub	sp, #20
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b20      	cmp	r3, #32
 800495e:	d139      	bne.n	80049d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004966:	2b01      	cmp	r3, #1
 8004968:	d101      	bne.n	800496e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800496a:	2302      	movs	r3, #2
 800496c:	e033      	b.n	80049d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2224      	movs	r2, #36	; 0x24
 800497a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0201 	bic.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800499c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0201 	orr.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	e000      	b.n	80049d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049d4:	2302      	movs	r3, #2
  }
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
	...

080049e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80049e8:	4b04      	ldr	r3, [pc, #16]	; (80049fc <HAL_PWREx_GetVoltageRange+0x18>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40007000 	.word	0x40007000

08004a00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a0e:	d130      	bne.n	8004a72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a10:	4b23      	ldr	r3, [pc, #140]	; (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a1c:	d038      	beq.n	8004a90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a1e:	4b20      	ldr	r3, [pc, #128]	; (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a26:	4a1e      	ldr	r2, [pc, #120]	; (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a2e:	4b1d      	ldr	r3, [pc, #116]	; (8004aa4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2232      	movs	r2, #50	; 0x32
 8004a34:	fb02 f303 	mul.w	r3, r2, r3
 8004a38:	4a1b      	ldr	r2, [pc, #108]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3e:	0c9b      	lsrs	r3, r3, #18
 8004a40:	3301      	adds	r3, #1
 8004a42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a44:	e002      	b.n	8004a4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a4c:	4b14      	ldr	r3, [pc, #80]	; (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a58:	d102      	bne.n	8004a60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1f2      	bne.n	8004a46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a60:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a6c:	d110      	bne.n	8004a90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e00f      	b.n	8004a92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a72:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7e:	d007      	beq.n	8004a90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a80:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a88:	4a05      	ldr	r2, [pc, #20]	; (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40007000 	.word	0x40007000
 8004aa4:	20000000 	.word	0x20000000
 8004aa8:	431bde83 	.word	0x431bde83

08004aac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e3ca      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004abe:	4b97      	ldr	r3, [pc, #604]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 030c 	and.w	r3, r3, #12
 8004ac6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ac8:	4b94      	ldr	r3, [pc, #592]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f003 0303 	and.w	r3, r3, #3
 8004ad0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0310 	and.w	r3, r3, #16
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 80e4 	beq.w	8004ca8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d007      	beq.n	8004af6 <HAL_RCC_OscConfig+0x4a>
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	2b0c      	cmp	r3, #12
 8004aea:	f040 808b 	bne.w	8004c04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	f040 8087 	bne.w	8004c04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004af6:	4b89      	ldr	r3, [pc, #548]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d005      	beq.n	8004b0e <HAL_RCC_OscConfig+0x62>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e3a2      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1a      	ldr	r2, [r3, #32]
 8004b12:	4b82      	ldr	r3, [pc, #520]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d004      	beq.n	8004b28 <HAL_RCC_OscConfig+0x7c>
 8004b1e:	4b7f      	ldr	r3, [pc, #508]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b26:	e005      	b.n	8004b34 <HAL_RCC_OscConfig+0x88>
 8004b28:	4b7c      	ldr	r3, [pc, #496]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b2e:	091b      	lsrs	r3, r3, #4
 8004b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d223      	bcs.n	8004b80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fd55 	bl	80055ec <RCC_SetFlashLatencyFromMSIRange>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e383      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b4c:	4b73      	ldr	r3, [pc, #460]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a72      	ldr	r2, [pc, #456]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004b52:	f043 0308 	orr.w	r3, r3, #8
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	4b70      	ldr	r3, [pc, #448]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	496d      	ldr	r1, [pc, #436]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b6a:	4b6c      	ldr	r3, [pc, #432]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	4968      	ldr	r1, [pc, #416]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	604b      	str	r3, [r1, #4]
 8004b7e:	e025      	b.n	8004bcc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b80:	4b66      	ldr	r3, [pc, #408]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a65      	ldr	r2, [pc, #404]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004b86:	f043 0308 	orr.w	r3, r3, #8
 8004b8a:	6013      	str	r3, [r2, #0]
 8004b8c:	4b63      	ldr	r3, [pc, #396]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	4960      	ldr	r1, [pc, #384]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b9e:	4b5f      	ldr	r3, [pc, #380]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	021b      	lsls	r3, r3, #8
 8004bac:	495b      	ldr	r1, [pc, #364]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d109      	bne.n	8004bcc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fd15 	bl	80055ec <RCC_SetFlashLatencyFromMSIRange>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e343      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bcc:	f000 fc4a 	bl	8005464 <HAL_RCC_GetSysClockFreq>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	4b52      	ldr	r3, [pc, #328]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	091b      	lsrs	r3, r3, #4
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	4950      	ldr	r1, [pc, #320]	; (8004d20 <HAL_RCC_OscConfig+0x274>)
 8004bde:	5ccb      	ldrb	r3, [r1, r3]
 8004be0:	f003 031f 	and.w	r3, r3, #31
 8004be4:	fa22 f303 	lsr.w	r3, r2, r3
 8004be8:	4a4e      	ldr	r2, [pc, #312]	; (8004d24 <HAL_RCC_OscConfig+0x278>)
 8004bea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004bec:	4b4e      	ldr	r3, [pc, #312]	; (8004d28 <HAL_RCC_OscConfig+0x27c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fe fac9 	bl	8003188 <HAL_InitTick>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d052      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
 8004c02:	e327      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d032      	beq.n	8004c72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c0c:	4b43      	ldr	r3, [pc, #268]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a42      	ldr	r2, [pc, #264]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004c12:	f043 0301 	orr.w	r3, r3, #1
 8004c16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c18:	f7fe fb06 	bl	8003228 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c20:	f7fe fb02 	bl	8003228 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e310      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c32:	4b3a      	ldr	r3, [pc, #232]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c3e:	4b37      	ldr	r3, [pc, #220]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a36      	ldr	r2, [pc, #216]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004c44:	f043 0308 	orr.w	r3, r3, #8
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	4b34      	ldr	r3, [pc, #208]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	4931      	ldr	r1, [pc, #196]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c5c:	4b2f      	ldr	r3, [pc, #188]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	021b      	lsls	r3, r3, #8
 8004c6a:	492c      	ldr	r1, [pc, #176]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	604b      	str	r3, [r1, #4]
 8004c70:	e01a      	b.n	8004ca8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c72:	4b2a      	ldr	r3, [pc, #168]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a29      	ldr	r2, [pc, #164]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004c78:	f023 0301 	bic.w	r3, r3, #1
 8004c7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c7e:	f7fe fad3 	bl	8003228 <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c86:	f7fe facf 	bl	8003228 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e2dd      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c98:	4b20      	ldr	r3, [pc, #128]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1f0      	bne.n	8004c86 <HAL_RCC_OscConfig+0x1da>
 8004ca4:	e000      	b.n	8004ca8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ca6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d074      	beq.n	8004d9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d005      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x21a>
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	2b0c      	cmp	r3, #12
 8004cbe:	d10e      	bne.n	8004cde <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d10b      	bne.n	8004cde <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc6:	4b15      	ldr	r3, [pc, #84]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d064      	beq.n	8004d9c <HAL_RCC_OscConfig+0x2f0>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d160      	bne.n	8004d9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e2ba      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce6:	d106      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x24a>
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a0b      	ldr	r2, [pc, #44]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	e026      	b.n	8004d44 <HAL_RCC_OscConfig+0x298>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cfe:	d115      	bne.n	8004d2c <HAL_RCC_OscConfig+0x280>
 8004d00:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a05      	ldr	r2, [pc, #20]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004d06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	4b03      	ldr	r3, [pc, #12]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a02      	ldr	r2, [pc, #8]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d16:	6013      	str	r3, [r2, #0]
 8004d18:	e014      	b.n	8004d44 <HAL_RCC_OscConfig+0x298>
 8004d1a:	bf00      	nop
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	0800ed38 	.word	0x0800ed38
 8004d24:	20000000 	.word	0x20000000
 8004d28:	20000004 	.word	0x20000004
 8004d2c:	4ba0      	ldr	r3, [pc, #640]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a9f      	ldr	r2, [pc, #636]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	4b9d      	ldr	r3, [pc, #628]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a9c      	ldr	r2, [pc, #624]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d013      	beq.n	8004d74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4c:	f7fe fa6c 	bl	8003228 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d54:	f7fe fa68 	bl	8003228 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b64      	cmp	r3, #100	; 0x64
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e276      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d66:	4b92      	ldr	r3, [pc, #584]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0f0      	beq.n	8004d54 <HAL_RCC_OscConfig+0x2a8>
 8004d72:	e014      	b.n	8004d9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fe fa58 	bl	8003228 <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d7c:	f7fe fa54 	bl	8003228 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b64      	cmp	r3, #100	; 0x64
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e262      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d8e:	4b88      	ldr	r3, [pc, #544]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x2d0>
 8004d9a:	e000      	b.n	8004d9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d060      	beq.n	8004e6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d005      	beq.n	8004dbc <HAL_RCC_OscConfig+0x310>
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	2b0c      	cmp	r3, #12
 8004db4:	d119      	bne.n	8004dea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d116      	bne.n	8004dea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dbc:	4b7c      	ldr	r3, [pc, #496]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x328>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e23f      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd4:	4b76      	ldr	r3, [pc, #472]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	061b      	lsls	r3, r3, #24
 8004de2:	4973      	ldr	r1, [pc, #460]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004de8:	e040      	b.n	8004e6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d023      	beq.n	8004e3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004df2:	4b6f      	ldr	r3, [pc, #444]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a6e      	ldr	r2, [pc, #440]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfe:	f7fe fa13 	bl	8003228 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e06:	f7fe fa0f 	bl	8003228 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e21d      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e18:	4b65      	ldr	r3, [pc, #404]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0f0      	beq.n	8004e06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e24:	4b62      	ldr	r3, [pc, #392]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	061b      	lsls	r3, r3, #24
 8004e32:	495f      	ldr	r1, [pc, #380]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	604b      	str	r3, [r1, #4]
 8004e38:	e018      	b.n	8004e6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3a:	4b5d      	ldr	r3, [pc, #372]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a5c      	ldr	r2, [pc, #368]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e46:	f7fe f9ef 	bl	8003228 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e4e:	f7fe f9eb 	bl	8003228 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e1f9      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e60:	4b53      	ldr	r3, [pc, #332]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1f0      	bne.n	8004e4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d03c      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01c      	beq.n	8004eba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e80:	4b4b      	ldr	r3, [pc, #300]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e86:	4a4a      	ldr	r2, [pc, #296]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004e88:	f043 0301 	orr.w	r3, r3, #1
 8004e8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e90:	f7fe f9ca 	bl	8003228 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e98:	f7fe f9c6 	bl	8003228 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e1d4      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004eaa:	4b41      	ldr	r3, [pc, #260]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0ef      	beq.n	8004e98 <HAL_RCC_OscConfig+0x3ec>
 8004eb8:	e01b      	b.n	8004ef2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eba:	4b3d      	ldr	r3, [pc, #244]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec0:	4a3b      	ldr	r2, [pc, #236]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eca:	f7fe f9ad 	bl	8003228 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed2:	f7fe f9a9 	bl	8003228 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e1b7      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ee4:	4b32      	ldr	r3, [pc, #200]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1ef      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0304 	and.w	r3, r3, #4
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 80a6 	beq.w	800504c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f00:	2300      	movs	r3, #0
 8004f02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f04:	4b2a      	ldr	r3, [pc, #168]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10d      	bne.n	8004f2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f10:	4b27      	ldr	r3, [pc, #156]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f14:	4a26      	ldr	r2, [pc, #152]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	6593      	str	r3, [r2, #88]	; 0x58
 8004f1c:	4b24      	ldr	r3, [pc, #144]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f24:	60bb      	str	r3, [r7, #8]
 8004f26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f2c:	4b21      	ldr	r3, [pc, #132]	; (8004fb4 <HAL_RCC_OscConfig+0x508>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d118      	bne.n	8004f6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f38:	4b1e      	ldr	r3, [pc, #120]	; (8004fb4 <HAL_RCC_OscConfig+0x508>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a1d      	ldr	r2, [pc, #116]	; (8004fb4 <HAL_RCC_OscConfig+0x508>)
 8004f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f44:	f7fe f970 	bl	8003228 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f4c:	f7fe f96c 	bl	8003228 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e17a      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f5e:	4b15      	ldr	r3, [pc, #84]	; (8004fb4 <HAL_RCC_OscConfig+0x508>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d108      	bne.n	8004f84 <HAL_RCC_OscConfig+0x4d8>
 8004f72:	4b0f      	ldr	r3, [pc, #60]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f78:	4a0d      	ldr	r2, [pc, #52]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004f7a:	f043 0301 	orr.w	r3, r3, #1
 8004f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f82:	e029      	b.n	8004fd8 <HAL_RCC_OscConfig+0x52c>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	2b05      	cmp	r3, #5
 8004f8a:	d115      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x50c>
 8004f8c:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f92:	4a07      	ldr	r2, [pc, #28]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004f94:	f043 0304 	orr.w	r3, r3, #4
 8004f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f9c:	4b04      	ldr	r3, [pc, #16]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa2:	4a03      	ldr	r2, [pc, #12]	; (8004fb0 <HAL_RCC_OscConfig+0x504>)
 8004fa4:	f043 0301 	orr.w	r3, r3, #1
 8004fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fac:	e014      	b.n	8004fd8 <HAL_RCC_OscConfig+0x52c>
 8004fae:	bf00      	nop
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	40007000 	.word	0x40007000
 8004fb8:	4b9c      	ldr	r3, [pc, #624]	; (800522c <HAL_RCC_OscConfig+0x780>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	4a9b      	ldr	r2, [pc, #620]	; (800522c <HAL_RCC_OscConfig+0x780>)
 8004fc0:	f023 0301 	bic.w	r3, r3, #1
 8004fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fc8:	4b98      	ldr	r3, [pc, #608]	; (800522c <HAL_RCC_OscConfig+0x780>)
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fce:	4a97      	ldr	r2, [pc, #604]	; (800522c <HAL_RCC_OscConfig+0x780>)
 8004fd0:	f023 0304 	bic.w	r3, r3, #4
 8004fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d016      	beq.n	800500e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe0:	f7fe f922 	bl	8003228 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fe6:	e00a      	b.n	8004ffe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe8:	f7fe f91e 	bl	8003228 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e12a      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ffe:	4b8b      	ldr	r3, [pc, #556]	; (800522c <HAL_RCC_OscConfig+0x780>)
 8005000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0ed      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x53c>
 800500c:	e015      	b.n	800503a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500e:	f7fe f90b 	bl	8003228 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005014:	e00a      	b.n	800502c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005016:	f7fe f907 	bl	8003228 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	f241 3288 	movw	r2, #5000	; 0x1388
 8005024:	4293      	cmp	r3, r2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e113      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800502c:	4b7f      	ldr	r3, [pc, #508]	; (800522c <HAL_RCC_OscConfig+0x780>)
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1ed      	bne.n	8005016 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800503a:	7ffb      	ldrb	r3, [r7, #31]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d105      	bne.n	800504c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005040:	4b7a      	ldr	r3, [pc, #488]	; (800522c <HAL_RCC_OscConfig+0x780>)
 8005042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005044:	4a79      	ldr	r2, [pc, #484]	; (800522c <HAL_RCC_OscConfig+0x780>)
 8005046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800504a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 80fe 	beq.w	8005252 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505a:	2b02      	cmp	r3, #2
 800505c:	f040 80d0 	bne.w	8005200 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005060:	4b72      	ldr	r3, [pc, #456]	; (800522c <HAL_RCC_OscConfig+0x780>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f003 0203 	and.w	r2, r3, #3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	429a      	cmp	r2, r3
 8005072:	d130      	bne.n	80050d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	3b01      	subs	r3, #1
 8005080:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005082:	429a      	cmp	r2, r3
 8005084:	d127      	bne.n	80050d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005090:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005092:	429a      	cmp	r2, r3
 8005094:	d11f      	bne.n	80050d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050a0:	2a07      	cmp	r2, #7
 80050a2:	bf14      	ite	ne
 80050a4:	2201      	movne	r2, #1
 80050a6:	2200      	moveq	r2, #0
 80050a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d113      	bne.n	80050d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b8:	085b      	lsrs	r3, r3, #1
 80050ba:	3b01      	subs	r3, #1
 80050bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80050be:	429a      	cmp	r2, r3
 80050c0:	d109      	bne.n	80050d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	085b      	lsrs	r3, r3, #1
 80050ce:	3b01      	subs	r3, #1
 80050d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d06e      	beq.n	80051b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	2b0c      	cmp	r3, #12
 80050da:	d069      	beq.n	80051b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050dc:	4b53      	ldr	r3, [pc, #332]	; (800522c <HAL_RCC_OscConfig+0x780>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d105      	bne.n	80050f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80050e8:	4b50      	ldr	r3, [pc, #320]	; (800522c <HAL_RCC_OscConfig+0x780>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e0ad      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80050f8:	4b4c      	ldr	r3, [pc, #304]	; (800522c <HAL_RCC_OscConfig+0x780>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a4b      	ldr	r2, [pc, #300]	; (800522c <HAL_RCC_OscConfig+0x780>)
 80050fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005102:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005104:	f7fe f890 	bl	8003228 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800510c:	f7fe f88c 	bl	8003228 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e09a      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800511e:	4b43      	ldr	r3, [pc, #268]	; (800522c <HAL_RCC_OscConfig+0x780>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f0      	bne.n	800510c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800512a:	4b40      	ldr	r3, [pc, #256]	; (800522c <HAL_RCC_OscConfig+0x780>)
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	4b40      	ldr	r3, [pc, #256]	; (8005230 <HAL_RCC_OscConfig+0x784>)
 8005130:	4013      	ands	r3, r2
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800513a:	3a01      	subs	r2, #1
 800513c:	0112      	lsls	r2, r2, #4
 800513e:	4311      	orrs	r1, r2
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005144:	0212      	lsls	r2, r2, #8
 8005146:	4311      	orrs	r1, r2
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800514c:	0852      	lsrs	r2, r2, #1
 800514e:	3a01      	subs	r2, #1
 8005150:	0552      	lsls	r2, r2, #21
 8005152:	4311      	orrs	r1, r2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005158:	0852      	lsrs	r2, r2, #1
 800515a:	3a01      	subs	r2, #1
 800515c:	0652      	lsls	r2, r2, #25
 800515e:	4311      	orrs	r1, r2
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005164:	0912      	lsrs	r2, r2, #4
 8005166:	0452      	lsls	r2, r2, #17
 8005168:	430a      	orrs	r2, r1
 800516a:	4930      	ldr	r1, [pc, #192]	; (800522c <HAL_RCC_OscConfig+0x780>)
 800516c:	4313      	orrs	r3, r2
 800516e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005170:	4b2e      	ldr	r3, [pc, #184]	; (800522c <HAL_RCC_OscConfig+0x780>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a2d      	ldr	r2, [pc, #180]	; (800522c <HAL_RCC_OscConfig+0x780>)
 8005176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800517a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800517c:	4b2b      	ldr	r3, [pc, #172]	; (800522c <HAL_RCC_OscConfig+0x780>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	4a2a      	ldr	r2, [pc, #168]	; (800522c <HAL_RCC_OscConfig+0x780>)
 8005182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005186:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005188:	f7fe f84e 	bl	8003228 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005190:	f7fe f84a 	bl	8003228 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e058      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051a2:	4b22      	ldr	r3, [pc, #136]	; (800522c <HAL_RCC_OscConfig+0x780>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0f0      	beq.n	8005190 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051ae:	e050      	b.n	8005252 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e04f      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051b4:	4b1d      	ldr	r3, [pc, #116]	; (800522c <HAL_RCC_OscConfig+0x780>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d148      	bne.n	8005252 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80051c0:	4b1a      	ldr	r3, [pc, #104]	; (800522c <HAL_RCC_OscConfig+0x780>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a19      	ldr	r2, [pc, #100]	; (800522c <HAL_RCC_OscConfig+0x780>)
 80051c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051cc:	4b17      	ldr	r3, [pc, #92]	; (800522c <HAL_RCC_OscConfig+0x780>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	4a16      	ldr	r2, [pc, #88]	; (800522c <HAL_RCC_OscConfig+0x780>)
 80051d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051d8:	f7fe f826 	bl	8003228 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e0:	f7fe f822 	bl	8003228 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e030      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051f2:	4b0e      	ldr	r3, [pc, #56]	; (800522c <HAL_RCC_OscConfig+0x780>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCC_OscConfig+0x734>
 80051fe:	e028      	b.n	8005252 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	2b0c      	cmp	r3, #12
 8005204:	d023      	beq.n	800524e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005206:	4b09      	ldr	r3, [pc, #36]	; (800522c <HAL_RCC_OscConfig+0x780>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a08      	ldr	r2, [pc, #32]	; (800522c <HAL_RCC_OscConfig+0x780>)
 800520c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005212:	f7fe f809 	bl	8003228 <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005218:	e00c      	b.n	8005234 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800521a:	f7fe f805 	bl	8003228 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d905      	bls.n	8005234 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e013      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
 800522c:	40021000 	.word	0x40021000
 8005230:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005234:	4b09      	ldr	r3, [pc, #36]	; (800525c <HAL_RCC_OscConfig+0x7b0>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1ec      	bne.n	800521a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005240:	4b06      	ldr	r3, [pc, #24]	; (800525c <HAL_RCC_OscConfig+0x7b0>)
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	4905      	ldr	r1, [pc, #20]	; (800525c <HAL_RCC_OscConfig+0x7b0>)
 8005246:	4b06      	ldr	r3, [pc, #24]	; (8005260 <HAL_RCC_OscConfig+0x7b4>)
 8005248:	4013      	ands	r3, r2
 800524a:	60cb      	str	r3, [r1, #12]
 800524c:	e001      	b.n	8005252 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e000      	b.n	8005254 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3720      	adds	r7, #32
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40021000 	.word	0x40021000
 8005260:	feeefffc 	.word	0xfeeefffc

08005264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0e7      	b.n	8005448 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005278:	4b75      	ldr	r3, [pc, #468]	; (8005450 <HAL_RCC_ClockConfig+0x1ec>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d910      	bls.n	80052a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005286:	4b72      	ldr	r3, [pc, #456]	; (8005450 <HAL_RCC_ClockConfig+0x1ec>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f023 0207 	bic.w	r2, r3, #7
 800528e:	4970      	ldr	r1, [pc, #448]	; (8005450 <HAL_RCC_ClockConfig+0x1ec>)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	4313      	orrs	r3, r2
 8005294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005296:	4b6e      	ldr	r3, [pc, #440]	; (8005450 <HAL_RCC_ClockConfig+0x1ec>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d001      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0cf      	b.n	8005448 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d010      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	4b66      	ldr	r3, [pc, #408]	; (8005454 <HAL_RCC_ClockConfig+0x1f0>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d908      	bls.n	80052d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052c4:	4b63      	ldr	r3, [pc, #396]	; (8005454 <HAL_RCC_ClockConfig+0x1f0>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	4960      	ldr	r1, [pc, #384]	; (8005454 <HAL_RCC_ClockConfig+0x1f0>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d04c      	beq.n	800537c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b03      	cmp	r3, #3
 80052e8:	d107      	bne.n	80052fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ea:	4b5a      	ldr	r3, [pc, #360]	; (8005454 <HAL_RCC_ClockConfig+0x1f0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d121      	bne.n	800533a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e0a6      	b.n	8005448 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d107      	bne.n	8005312 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005302:	4b54      	ldr	r3, [pc, #336]	; (8005454 <HAL_RCC_ClockConfig+0x1f0>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d115      	bne.n	800533a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e09a      	b.n	8005448 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d107      	bne.n	800532a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800531a:	4b4e      	ldr	r3, [pc, #312]	; (8005454 <HAL_RCC_ClockConfig+0x1f0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d109      	bne.n	800533a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e08e      	b.n	8005448 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800532a:	4b4a      	ldr	r3, [pc, #296]	; (8005454 <HAL_RCC_ClockConfig+0x1f0>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e086      	b.n	8005448 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800533a:	4b46      	ldr	r3, [pc, #280]	; (8005454 <HAL_RCC_ClockConfig+0x1f0>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f023 0203 	bic.w	r2, r3, #3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	4943      	ldr	r1, [pc, #268]	; (8005454 <HAL_RCC_ClockConfig+0x1f0>)
 8005348:	4313      	orrs	r3, r2
 800534a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800534c:	f7fd ff6c 	bl	8003228 <HAL_GetTick>
 8005350:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005352:	e00a      	b.n	800536a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005354:	f7fd ff68 	bl	8003228 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005362:	4293      	cmp	r3, r2
 8005364:	d901      	bls.n	800536a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e06e      	b.n	8005448 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800536a:	4b3a      	ldr	r3, [pc, #232]	; (8005454 <HAL_RCC_ClockConfig+0x1f0>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 020c 	and.w	r2, r3, #12
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	429a      	cmp	r2, r3
 800537a:	d1eb      	bne.n	8005354 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d010      	beq.n	80053aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	4b31      	ldr	r3, [pc, #196]	; (8005454 <HAL_RCC_ClockConfig+0x1f0>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005394:	429a      	cmp	r2, r3
 8005396:	d208      	bcs.n	80053aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005398:	4b2e      	ldr	r3, [pc, #184]	; (8005454 <HAL_RCC_ClockConfig+0x1f0>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	492b      	ldr	r1, [pc, #172]	; (8005454 <HAL_RCC_ClockConfig+0x1f0>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053aa:	4b29      	ldr	r3, [pc, #164]	; (8005450 <HAL_RCC_ClockConfig+0x1ec>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d210      	bcs.n	80053da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b8:	4b25      	ldr	r3, [pc, #148]	; (8005450 <HAL_RCC_ClockConfig+0x1ec>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f023 0207 	bic.w	r2, r3, #7
 80053c0:	4923      	ldr	r1, [pc, #140]	; (8005450 <HAL_RCC_ClockConfig+0x1ec>)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c8:	4b21      	ldr	r3, [pc, #132]	; (8005450 <HAL_RCC_ClockConfig+0x1ec>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d001      	beq.n	80053da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e036      	b.n	8005448 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d008      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053e6:	4b1b      	ldr	r3, [pc, #108]	; (8005454 <HAL_RCC_ClockConfig+0x1f0>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	4918      	ldr	r1, [pc, #96]	; (8005454 <HAL_RCC_ClockConfig+0x1f0>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d009      	beq.n	8005418 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005404:	4b13      	ldr	r3, [pc, #76]	; (8005454 <HAL_RCC_ClockConfig+0x1f0>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	4910      	ldr	r1, [pc, #64]	; (8005454 <HAL_RCC_ClockConfig+0x1f0>)
 8005414:	4313      	orrs	r3, r2
 8005416:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005418:	f000 f824 	bl	8005464 <HAL_RCC_GetSysClockFreq>
 800541c:	4602      	mov	r2, r0
 800541e:	4b0d      	ldr	r3, [pc, #52]	; (8005454 <HAL_RCC_ClockConfig+0x1f0>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	091b      	lsrs	r3, r3, #4
 8005424:	f003 030f 	and.w	r3, r3, #15
 8005428:	490b      	ldr	r1, [pc, #44]	; (8005458 <HAL_RCC_ClockConfig+0x1f4>)
 800542a:	5ccb      	ldrb	r3, [r1, r3]
 800542c:	f003 031f 	and.w	r3, r3, #31
 8005430:	fa22 f303 	lsr.w	r3, r2, r3
 8005434:	4a09      	ldr	r2, [pc, #36]	; (800545c <HAL_RCC_ClockConfig+0x1f8>)
 8005436:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005438:	4b09      	ldr	r3, [pc, #36]	; (8005460 <HAL_RCC_ClockConfig+0x1fc>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	f7fd fea3 	bl	8003188 <HAL_InitTick>
 8005442:	4603      	mov	r3, r0
 8005444:	72fb      	strb	r3, [r7, #11]

  return status;
 8005446:	7afb      	ldrb	r3, [r7, #11]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	40022000 	.word	0x40022000
 8005454:	40021000 	.word	0x40021000
 8005458:	0800ed38 	.word	0x0800ed38
 800545c:	20000000 	.word	0x20000000
 8005460:	20000004 	.word	0x20000004

08005464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005464:	b480      	push	{r7}
 8005466:	b089      	sub	sp, #36	; 0x24
 8005468:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	2300      	movs	r3, #0
 8005470:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005472:	4b3e      	ldr	r3, [pc, #248]	; (800556c <HAL_RCC_GetSysClockFreq+0x108>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 030c 	and.w	r3, r3, #12
 800547a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800547c:	4b3b      	ldr	r3, [pc, #236]	; (800556c <HAL_RCC_GetSysClockFreq+0x108>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0303 	and.w	r3, r3, #3
 8005484:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d005      	beq.n	8005498 <HAL_RCC_GetSysClockFreq+0x34>
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	2b0c      	cmp	r3, #12
 8005490:	d121      	bne.n	80054d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d11e      	bne.n	80054d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005498:	4b34      	ldr	r3, [pc, #208]	; (800556c <HAL_RCC_GetSysClockFreq+0x108>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d107      	bne.n	80054b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80054a4:	4b31      	ldr	r3, [pc, #196]	; (800556c <HAL_RCC_GetSysClockFreq+0x108>)
 80054a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054aa:	0a1b      	lsrs	r3, r3, #8
 80054ac:	f003 030f 	and.w	r3, r3, #15
 80054b0:	61fb      	str	r3, [r7, #28]
 80054b2:	e005      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80054b4:	4b2d      	ldr	r3, [pc, #180]	; (800556c <HAL_RCC_GetSysClockFreq+0x108>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	091b      	lsrs	r3, r3, #4
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80054c0:	4a2b      	ldr	r2, [pc, #172]	; (8005570 <HAL_RCC_GetSysClockFreq+0x10c>)
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10d      	bne.n	80054ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054d4:	e00a      	b.n	80054ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d102      	bne.n	80054e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054dc:	4b25      	ldr	r3, [pc, #148]	; (8005574 <HAL_RCC_GetSysClockFreq+0x110>)
 80054de:	61bb      	str	r3, [r7, #24]
 80054e0:	e004      	b.n	80054ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d101      	bne.n	80054ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054e8:	4b23      	ldr	r3, [pc, #140]	; (8005578 <HAL_RCC_GetSysClockFreq+0x114>)
 80054ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	2b0c      	cmp	r3, #12
 80054f0:	d134      	bne.n	800555c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054f2:	4b1e      	ldr	r3, [pc, #120]	; (800556c <HAL_RCC_GetSysClockFreq+0x108>)
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d003      	beq.n	800550a <HAL_RCC_GetSysClockFreq+0xa6>
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b03      	cmp	r3, #3
 8005506:	d003      	beq.n	8005510 <HAL_RCC_GetSysClockFreq+0xac>
 8005508:	e005      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800550a:	4b1a      	ldr	r3, [pc, #104]	; (8005574 <HAL_RCC_GetSysClockFreq+0x110>)
 800550c:	617b      	str	r3, [r7, #20]
      break;
 800550e:	e005      	b.n	800551c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005510:	4b19      	ldr	r3, [pc, #100]	; (8005578 <HAL_RCC_GetSysClockFreq+0x114>)
 8005512:	617b      	str	r3, [r7, #20]
      break;
 8005514:	e002      	b.n	800551c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	617b      	str	r3, [r7, #20]
      break;
 800551a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800551c:	4b13      	ldr	r3, [pc, #76]	; (800556c <HAL_RCC_GetSysClockFreq+0x108>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	091b      	lsrs	r3, r3, #4
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	3301      	adds	r3, #1
 8005528:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800552a:	4b10      	ldr	r3, [pc, #64]	; (800556c <HAL_RCC_GetSysClockFreq+0x108>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	fb03 f202 	mul.w	r2, r3, r2
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005540:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005542:	4b0a      	ldr	r3, [pc, #40]	; (800556c <HAL_RCC_GetSysClockFreq+0x108>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	0e5b      	lsrs	r3, r3, #25
 8005548:	f003 0303 	and.w	r3, r3, #3
 800554c:	3301      	adds	r3, #1
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	fbb2 f3f3 	udiv	r3, r2, r3
 800555a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800555c:	69bb      	ldr	r3, [r7, #24]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3724      	adds	r7, #36	; 0x24
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40021000 	.word	0x40021000
 8005570:	0800ed50 	.word	0x0800ed50
 8005574:	00f42400 	.word	0x00f42400
 8005578:	007a1200 	.word	0x007a1200

0800557c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005580:	4b03      	ldr	r3, [pc, #12]	; (8005590 <HAL_RCC_GetHCLKFreq+0x14>)
 8005582:	681b      	ldr	r3, [r3, #0]
}
 8005584:	4618      	mov	r0, r3
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	20000000 	.word	0x20000000

08005594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005598:	f7ff fff0 	bl	800557c <HAL_RCC_GetHCLKFreq>
 800559c:	4602      	mov	r2, r0
 800559e:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	0a1b      	lsrs	r3, r3, #8
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	4904      	ldr	r1, [pc, #16]	; (80055bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80055aa:	5ccb      	ldrb	r3, [r1, r3]
 80055ac:	f003 031f 	and.w	r3, r3, #31
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40021000 	.word	0x40021000
 80055bc:	0800ed48 	.word	0x0800ed48

080055c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80055c4:	f7ff ffda 	bl	800557c <HAL_RCC_GetHCLKFreq>
 80055c8:	4602      	mov	r2, r0
 80055ca:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	0adb      	lsrs	r3, r3, #11
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	4904      	ldr	r1, [pc, #16]	; (80055e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055d6:	5ccb      	ldrb	r3, [r1, r3]
 80055d8:	f003 031f 	and.w	r3, r3, #31
 80055dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40021000 	.word	0x40021000
 80055e8:	0800ed48 	.word	0x0800ed48

080055ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055f4:	2300      	movs	r3, #0
 80055f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055f8:	4b2a      	ldr	r3, [pc, #168]	; (80056a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005604:	f7ff f9ee 	bl	80049e4 <HAL_PWREx_GetVoltageRange>
 8005608:	6178      	str	r0, [r7, #20]
 800560a:	e014      	b.n	8005636 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800560c:	4b25      	ldr	r3, [pc, #148]	; (80056a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800560e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005610:	4a24      	ldr	r2, [pc, #144]	; (80056a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005616:	6593      	str	r3, [r2, #88]	; 0x58
 8005618:	4b22      	ldr	r3, [pc, #136]	; (80056a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800561a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005624:	f7ff f9de 	bl	80049e4 <HAL_PWREx_GetVoltageRange>
 8005628:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800562a:	4b1e      	ldr	r3, [pc, #120]	; (80056a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800562c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562e:	4a1d      	ldr	r2, [pc, #116]	; (80056a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005634:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800563c:	d10b      	bne.n	8005656 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b80      	cmp	r3, #128	; 0x80
 8005642:	d919      	bls.n	8005678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2ba0      	cmp	r3, #160	; 0xa0
 8005648:	d902      	bls.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800564a:	2302      	movs	r3, #2
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	e013      	b.n	8005678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005650:	2301      	movs	r3, #1
 8005652:	613b      	str	r3, [r7, #16]
 8005654:	e010      	b.n	8005678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b80      	cmp	r3, #128	; 0x80
 800565a:	d902      	bls.n	8005662 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800565c:	2303      	movs	r3, #3
 800565e:	613b      	str	r3, [r7, #16]
 8005660:	e00a      	b.n	8005678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b80      	cmp	r3, #128	; 0x80
 8005666:	d102      	bne.n	800566e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005668:	2302      	movs	r3, #2
 800566a:	613b      	str	r3, [r7, #16]
 800566c:	e004      	b.n	8005678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b70      	cmp	r3, #112	; 0x70
 8005672:	d101      	bne.n	8005678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005674:	2301      	movs	r3, #1
 8005676:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005678:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f023 0207 	bic.w	r2, r3, #7
 8005680:	4909      	ldr	r1, [pc, #36]	; (80056a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005688:	4b07      	ldr	r3, [pc, #28]	; (80056a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	429a      	cmp	r2, r3
 8005694:	d001      	beq.n	800569a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	40021000 	.word	0x40021000
 80056a8:	40022000 	.word	0x40022000

080056ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056b4:	2300      	movs	r3, #0
 80056b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056b8:	2300      	movs	r3, #0
 80056ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d041      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056d0:	d02a      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80056d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056d6:	d824      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056dc:	d008      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80056de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056e2:	d81e      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00a      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80056e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ec:	d010      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80056ee:	e018      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056f0:	4b86      	ldr	r3, [pc, #536]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	4a85      	ldr	r2, [pc, #532]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056fc:	e015      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	3304      	adds	r3, #4
 8005702:	2100      	movs	r1, #0
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fabb 	bl	8005c80 <RCCEx_PLLSAI1_Config>
 800570a:	4603      	mov	r3, r0
 800570c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800570e:	e00c      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3320      	adds	r3, #32
 8005714:	2100      	movs	r1, #0
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fba6 	bl	8005e68 <RCCEx_PLLSAI2_Config>
 800571c:	4603      	mov	r3, r0
 800571e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005720:	e003      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	74fb      	strb	r3, [r7, #19]
      break;
 8005726:	e000      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800572a:	7cfb      	ldrb	r3, [r7, #19]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10b      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005730:	4b76      	ldr	r3, [pc, #472]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005736:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800573e:	4973      	ldr	r1, [pc, #460]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005746:	e001      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005748:	7cfb      	ldrb	r3, [r7, #19]
 800574a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d041      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800575c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005760:	d02a      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005762:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005766:	d824      	bhi.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005768:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800576c:	d008      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800576e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005772:	d81e      	bhi.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800577c:	d010      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800577e:	e018      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005780:	4b62      	ldr	r3, [pc, #392]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	4a61      	ldr	r2, [pc, #388]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800578a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800578c:	e015      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3304      	adds	r3, #4
 8005792:	2100      	movs	r1, #0
 8005794:	4618      	mov	r0, r3
 8005796:	f000 fa73 	bl	8005c80 <RCCEx_PLLSAI1_Config>
 800579a:	4603      	mov	r3, r0
 800579c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800579e:	e00c      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3320      	adds	r3, #32
 80057a4:	2100      	movs	r1, #0
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 fb5e 	bl	8005e68 <RCCEx_PLLSAI2_Config>
 80057ac:	4603      	mov	r3, r0
 80057ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057b0:	e003      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	74fb      	strb	r3, [r7, #19]
      break;
 80057b6:	e000      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80057b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057ba:	7cfb      	ldrb	r3, [r7, #19]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10b      	bne.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057c0:	4b52      	ldr	r3, [pc, #328]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057ce:	494f      	ldr	r1, [pc, #316]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057d6:	e001      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d8:	7cfb      	ldrb	r3, [r7, #19]
 80057da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80a0 	beq.w	800592a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ea:	2300      	movs	r3, #0
 80057ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057ee:	4b47      	ldr	r3, [pc, #284]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80057fe:	2300      	movs	r3, #0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00d      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005804:	4b41      	ldr	r3, [pc, #260]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005808:	4a40      	ldr	r2, [pc, #256]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800580a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800580e:	6593      	str	r3, [r2, #88]	; 0x58
 8005810:	4b3e      	ldr	r3, [pc, #248]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005818:	60bb      	str	r3, [r7, #8]
 800581a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800581c:	2301      	movs	r3, #1
 800581e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005820:	4b3b      	ldr	r3, [pc, #236]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a3a      	ldr	r2, [pc, #232]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800582a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800582c:	f7fd fcfc 	bl	8003228 <HAL_GetTick>
 8005830:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005832:	e009      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005834:	f7fd fcf8 	bl	8003228 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d902      	bls.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	74fb      	strb	r3, [r7, #19]
        break;
 8005846:	e005      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005848:	4b31      	ldr	r3, [pc, #196]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0ef      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005854:	7cfb      	ldrb	r3, [r7, #19]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d15c      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800585a:	4b2c      	ldr	r3, [pc, #176]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800585c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005864:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d01f      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	429a      	cmp	r2, r3
 8005876:	d019      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005878:	4b24      	ldr	r3, [pc, #144]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800587a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005882:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005884:	4b21      	ldr	r3, [pc, #132]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588a:	4a20      	ldr	r2, [pc, #128]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800588c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005894:	4b1d      	ldr	r3, [pc, #116]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589a:	4a1c      	ldr	r2, [pc, #112]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800589c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058a4:	4a19      	ldr	r2, [pc, #100]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d016      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b6:	f7fd fcb7 	bl	8003228 <HAL_GetTick>
 80058ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058bc:	e00b      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058be:	f7fd fcb3 	bl	8003228 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d902      	bls.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	74fb      	strb	r3, [r7, #19]
            break;
 80058d4:	e006      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058d6:	4b0d      	ldr	r3, [pc, #52]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0ec      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80058e4:	7cfb      	ldrb	r3, [r7, #19]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10c      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058ea:	4b08      	ldr	r3, [pc, #32]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058fa:	4904      	ldr	r1, [pc, #16]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005902:	e009      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005904:	7cfb      	ldrb	r3, [r7, #19]
 8005906:	74bb      	strb	r3, [r7, #18]
 8005908:	e006      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800590a:	bf00      	nop
 800590c:	40021000 	.word	0x40021000
 8005910:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005914:	7cfb      	ldrb	r3, [r7, #19]
 8005916:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005918:	7c7b      	ldrb	r3, [r7, #17]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d105      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800591e:	4b9e      	ldr	r3, [pc, #632]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005922:	4a9d      	ldr	r2, [pc, #628]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005928:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005936:	4b98      	ldr	r3, [pc, #608]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593c:	f023 0203 	bic.w	r2, r3, #3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005944:	4994      	ldr	r1, [pc, #592]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005958:	4b8f      	ldr	r3, [pc, #572]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595e:	f023 020c 	bic.w	r2, r3, #12
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005966:	498c      	ldr	r1, [pc, #560]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005968:	4313      	orrs	r3, r2
 800596a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0304 	and.w	r3, r3, #4
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800597a:	4b87      	ldr	r3, [pc, #540]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005980:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005988:	4983      	ldr	r1, [pc, #524]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800598a:	4313      	orrs	r3, r2
 800598c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0308 	and.w	r3, r3, #8
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800599c:	4b7e      	ldr	r3, [pc, #504]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059aa:	497b      	ldr	r1, [pc, #492]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059be:	4b76      	ldr	r3, [pc, #472]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059cc:	4972      	ldr	r1, [pc, #456]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0320 	and.w	r3, r3, #32
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00a      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059e0:	4b6d      	ldr	r3, [pc, #436]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ee:	496a      	ldr	r1, [pc, #424]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a02:	4b65      	ldr	r3, [pc, #404]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a10:	4961      	ldr	r1, [pc, #388]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00a      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a24:	4b5c      	ldr	r3, [pc, #368]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a32:	4959      	ldr	r1, [pc, #356]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a46:	4b54      	ldr	r3, [pc, #336]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a54:	4950      	ldr	r1, [pc, #320]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00a      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a68:	4b4b      	ldr	r3, [pc, #300]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a76:	4948      	ldr	r1, [pc, #288]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a8a:	4b43      	ldr	r3, [pc, #268]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a98:	493f      	ldr	r1, [pc, #252]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d028      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005aac:	4b3a      	ldr	r3, [pc, #232]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aba:	4937      	ldr	r1, [pc, #220]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aca:	d106      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005acc:	4b32      	ldr	r3, [pc, #200]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4a31      	ldr	r2, [pc, #196]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ad6:	60d3      	str	r3, [r2, #12]
 8005ad8:	e011      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ade:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ae2:	d10c      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	2101      	movs	r1, #1
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 f8c8 	bl	8005c80 <RCCEx_PLLSAI1_Config>
 8005af0:	4603      	mov	r3, r0
 8005af2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005af4:	7cfb      	ldrb	r3, [r7, #19]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005afa:	7cfb      	ldrb	r3, [r7, #19]
 8005afc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d028      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b0a:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b18:	491f      	ldr	r1, [pc, #124]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b28:	d106      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b2a:	4b1b      	ldr	r3, [pc, #108]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	4a1a      	ldr	r2, [pc, #104]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b34:	60d3      	str	r3, [r2, #12]
 8005b36:	e011      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b40:	d10c      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3304      	adds	r3, #4
 8005b46:	2101      	movs	r1, #1
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 f899 	bl	8005c80 <RCCEx_PLLSAI1_Config>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b52:	7cfb      	ldrb	r3, [r7, #19]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005b58:	7cfb      	ldrb	r3, [r7, #19]
 8005b5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d02b      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b68:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b76:	4908      	ldr	r1, [pc, #32]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b86:	d109      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b88:	4b03      	ldr	r3, [pc, #12]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	4a02      	ldr	r2, [pc, #8]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b92:	60d3      	str	r3, [r2, #12]
 8005b94:	e014      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005b96:	bf00      	nop
 8005b98:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ba4:	d10c      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	2101      	movs	r1, #1
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 f867 	bl	8005c80 <RCCEx_PLLSAI1_Config>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bb6:	7cfb      	ldrb	r3, [r7, #19]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005bbc:	7cfb      	ldrb	r3, [r7, #19]
 8005bbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d02f      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bcc:	4b2b      	ldr	r3, [pc, #172]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bda:	4928      	ldr	r1, [pc, #160]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005be6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bea:	d10d      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	3304      	adds	r3, #4
 8005bf0:	2102      	movs	r1, #2
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 f844 	bl	8005c80 <RCCEx_PLLSAI1_Config>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bfc:	7cfb      	ldrb	r3, [r7, #19]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d014      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c02:	7cfb      	ldrb	r3, [r7, #19]
 8005c04:	74bb      	strb	r3, [r7, #18]
 8005c06:	e011      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c10:	d10c      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	3320      	adds	r3, #32
 8005c16:	2102      	movs	r1, #2
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 f925 	bl	8005e68 <RCCEx_PLLSAI2_Config>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c22:	7cfb      	ldrb	r3, [r7, #19]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c28:	7cfb      	ldrb	r3, [r7, #19]
 8005c2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c38:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c46:	490d      	ldr	r1, [pc, #52]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00b      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c5a:	4b08      	ldr	r3, [pc, #32]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c6a:	4904      	ldr	r1, [pc, #16]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c72:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40021000 	.word	0x40021000

08005c80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c8e:	4b75      	ldr	r3, [pc, #468]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d018      	beq.n	8005ccc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c9a:	4b72      	ldr	r3, [pc, #456]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f003 0203 	and.w	r2, r3, #3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d10d      	bne.n	8005cc6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
       ||
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005cb2:	4b6c      	ldr	r3, [pc, #432]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	091b      	lsrs	r3, r3, #4
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
       ||
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d047      	beq.n	8005d56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
 8005cca:	e044      	b.n	8005d56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d018      	beq.n	8005d06 <RCCEx_PLLSAI1_Config+0x86>
 8005cd4:	2b03      	cmp	r3, #3
 8005cd6:	d825      	bhi.n	8005d24 <RCCEx_PLLSAI1_Config+0xa4>
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d002      	beq.n	8005ce2 <RCCEx_PLLSAI1_Config+0x62>
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d009      	beq.n	8005cf4 <RCCEx_PLLSAI1_Config+0x74>
 8005ce0:	e020      	b.n	8005d24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ce2:	4b60      	ldr	r3, [pc, #384]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d11d      	bne.n	8005d2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cf2:	e01a      	b.n	8005d2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005cf4:	4b5b      	ldr	r3, [pc, #364]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d116      	bne.n	8005d2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d04:	e013      	b.n	8005d2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d06:	4b57      	ldr	r3, [pc, #348]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10f      	bne.n	8005d32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d12:	4b54      	ldr	r3, [pc, #336]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d109      	bne.n	8005d32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d22:	e006      	b.n	8005d32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	73fb      	strb	r3, [r7, #15]
      break;
 8005d28:	e004      	b.n	8005d34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d2a:	bf00      	nop
 8005d2c:	e002      	b.n	8005d34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d2e:	bf00      	nop
 8005d30:	e000      	b.n	8005d34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d32:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10d      	bne.n	8005d56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d3a:	4b4a      	ldr	r3, [pc, #296]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6819      	ldr	r1, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	430b      	orrs	r3, r1
 8005d50:	4944      	ldr	r1, [pc, #272]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d17d      	bne.n	8005e58 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d5c:	4b41      	ldr	r3, [pc, #260]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a40      	ldr	r2, [pc, #256]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d68:	f7fd fa5e 	bl	8003228 <HAL_GetTick>
 8005d6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d6e:	e009      	b.n	8005d84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d70:	f7fd fa5a 	bl	8003228 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d902      	bls.n	8005d84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	73fb      	strb	r3, [r7, #15]
        break;
 8005d82:	e005      	b.n	8005d90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d84:	4b37      	ldr	r3, [pc, #220]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1ef      	bne.n	8005d70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d160      	bne.n	8005e58 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d111      	bne.n	8005dc0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d9c:	4b31      	ldr	r3, [pc, #196]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6892      	ldr	r2, [r2, #8]
 8005dac:	0211      	lsls	r1, r2, #8
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	68d2      	ldr	r2, [r2, #12]
 8005db2:	0912      	lsrs	r2, r2, #4
 8005db4:	0452      	lsls	r2, r2, #17
 8005db6:	430a      	orrs	r2, r1
 8005db8:	492a      	ldr	r1, [pc, #168]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	610b      	str	r3, [r1, #16]
 8005dbe:	e027      	b.n	8005e10 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d112      	bne.n	8005dec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dc6:	4b27      	ldr	r3, [pc, #156]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005dce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6892      	ldr	r2, [r2, #8]
 8005dd6:	0211      	lsls	r1, r2, #8
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6912      	ldr	r2, [r2, #16]
 8005ddc:	0852      	lsrs	r2, r2, #1
 8005dde:	3a01      	subs	r2, #1
 8005de0:	0552      	lsls	r2, r2, #21
 8005de2:	430a      	orrs	r2, r1
 8005de4:	491f      	ldr	r1, [pc, #124]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	610b      	str	r3, [r1, #16]
 8005dea:	e011      	b.n	8005e10 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dec:	4b1d      	ldr	r3, [pc, #116]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005df4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6892      	ldr	r2, [r2, #8]
 8005dfc:	0211      	lsls	r1, r2, #8
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6952      	ldr	r2, [r2, #20]
 8005e02:	0852      	lsrs	r2, r2, #1
 8005e04:	3a01      	subs	r2, #1
 8005e06:	0652      	lsls	r2, r2, #25
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	4916      	ldr	r1, [pc, #88]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e10:	4b14      	ldr	r3, [pc, #80]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a13      	ldr	r2, [pc, #76]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e1c:	f7fd fa04 	bl	8003228 <HAL_GetTick>
 8005e20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e22:	e009      	b.n	8005e38 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e24:	f7fd fa00 	bl	8003228 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d902      	bls.n	8005e38 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	73fb      	strb	r3, [r7, #15]
          break;
 8005e36:	e005      	b.n	8005e44 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e38:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d0ef      	beq.n	8005e24 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d106      	bne.n	8005e58 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e4a:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e4c:	691a      	ldr	r2, [r3, #16]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	4904      	ldr	r1, [pc, #16]	; (8005e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40021000 	.word	0x40021000

08005e68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e76:	4b6a      	ldr	r3, [pc, #424]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d018      	beq.n	8005eb4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005e82:	4b67      	ldr	r3, [pc, #412]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f003 0203 	and.w	r2, r3, #3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d10d      	bne.n	8005eae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
       ||
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d009      	beq.n	8005eae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005e9a:	4b61      	ldr	r3, [pc, #388]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	091b      	lsrs	r3, r3, #4
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
       ||
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d047      	beq.n	8005f3e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	73fb      	strb	r3, [r7, #15]
 8005eb2:	e044      	b.n	8005f3e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d018      	beq.n	8005eee <RCCEx_PLLSAI2_Config+0x86>
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d825      	bhi.n	8005f0c <RCCEx_PLLSAI2_Config+0xa4>
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d002      	beq.n	8005eca <RCCEx_PLLSAI2_Config+0x62>
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d009      	beq.n	8005edc <RCCEx_PLLSAI2_Config+0x74>
 8005ec8:	e020      	b.n	8005f0c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005eca:	4b55      	ldr	r3, [pc, #340]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d11d      	bne.n	8005f12 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eda:	e01a      	b.n	8005f12 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005edc:	4b50      	ldr	r3, [pc, #320]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d116      	bne.n	8005f16 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eec:	e013      	b.n	8005f16 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005eee:	4b4c      	ldr	r3, [pc, #304]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10f      	bne.n	8005f1a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005efa:	4b49      	ldr	r3, [pc, #292]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d109      	bne.n	8005f1a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f0a:	e006      	b.n	8005f1a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f10:	e004      	b.n	8005f1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f12:	bf00      	nop
 8005f14:	e002      	b.n	8005f1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f16:	bf00      	nop
 8005f18:	e000      	b.n	8005f1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10d      	bne.n	8005f3e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f22:	4b3f      	ldr	r3, [pc, #252]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6819      	ldr	r1, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	3b01      	subs	r3, #1
 8005f34:	011b      	lsls	r3, r3, #4
 8005f36:	430b      	orrs	r3, r1
 8005f38:	4939      	ldr	r1, [pc, #228]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d167      	bne.n	8006014 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005f44:	4b36      	ldr	r3, [pc, #216]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a35      	ldr	r2, [pc, #212]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f50:	f7fd f96a 	bl	8003228 <HAL_GetTick>
 8005f54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f56:	e009      	b.n	8005f6c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f58:	f7fd f966 	bl	8003228 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d902      	bls.n	8005f6c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	73fb      	strb	r3, [r7, #15]
        break;
 8005f6a:	e005      	b.n	8005f78 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f6c:	4b2c      	ldr	r3, [pc, #176]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1ef      	bne.n	8005f58 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d14a      	bne.n	8006014 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d111      	bne.n	8005fa8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f84:	4b26      	ldr	r3, [pc, #152]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	6892      	ldr	r2, [r2, #8]
 8005f94:	0211      	lsls	r1, r2, #8
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	68d2      	ldr	r2, [r2, #12]
 8005f9a:	0912      	lsrs	r2, r2, #4
 8005f9c:	0452      	lsls	r2, r2, #17
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	491f      	ldr	r1, [pc, #124]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	614b      	str	r3, [r1, #20]
 8005fa6:	e011      	b.n	8005fcc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005fa8:	4b1d      	ldr	r3, [pc, #116]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005fb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6892      	ldr	r2, [r2, #8]
 8005fb8:	0211      	lsls	r1, r2, #8
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	6912      	ldr	r2, [r2, #16]
 8005fbe:	0852      	lsrs	r2, r2, #1
 8005fc0:	3a01      	subs	r2, #1
 8005fc2:	0652      	lsls	r2, r2, #25
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	4916      	ldr	r1, [pc, #88]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005fcc:	4b14      	ldr	r3, [pc, #80]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a13      	ldr	r2, [pc, #76]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd8:	f7fd f926 	bl	8003228 <HAL_GetTick>
 8005fdc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fde:	e009      	b.n	8005ff4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fe0:	f7fd f922 	bl	8003228 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d902      	bls.n	8005ff4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	73fb      	strb	r3, [r7, #15]
          break;
 8005ff2:	e005      	b.n	8006000 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ff4:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0ef      	beq.n	8005fe0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d106      	bne.n	8006014 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006006:	4b06      	ldr	r3, [pc, #24]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006008:	695a      	ldr	r2, [r3, #20]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	4904      	ldr	r1, [pc, #16]	; (8006020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006010:	4313      	orrs	r3, r2
 8006012:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006014:	7bfb      	ldrb	r3, [r7, #15]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	40021000 	.word	0x40021000

08006024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e049      	b.n	80060ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d106      	bne.n	8006050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7fc fe76 	bl	8002d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3304      	adds	r3, #4
 8006060:	4619      	mov	r1, r3
 8006062:	4610      	mov	r0, r2
 8006064:	f000 fe5a 	bl	8006d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d001      	beq.n	80060ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e047      	b.n	800617c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a23      	ldr	r2, [pc, #140]	; (8006188 <HAL_TIM_Base_Start+0xb4>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d01d      	beq.n	800613a <HAL_TIM_Base_Start+0x66>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006106:	d018      	beq.n	800613a <HAL_TIM_Base_Start+0x66>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a1f      	ldr	r2, [pc, #124]	; (800618c <HAL_TIM_Base_Start+0xb8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d013      	beq.n	800613a <HAL_TIM_Base_Start+0x66>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a1e      	ldr	r2, [pc, #120]	; (8006190 <HAL_TIM_Base_Start+0xbc>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d00e      	beq.n	800613a <HAL_TIM_Base_Start+0x66>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a1c      	ldr	r2, [pc, #112]	; (8006194 <HAL_TIM_Base_Start+0xc0>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d009      	beq.n	800613a <HAL_TIM_Base_Start+0x66>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a1b      	ldr	r2, [pc, #108]	; (8006198 <HAL_TIM_Base_Start+0xc4>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d004      	beq.n	800613a <HAL_TIM_Base_Start+0x66>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a19      	ldr	r2, [pc, #100]	; (800619c <HAL_TIM_Base_Start+0xc8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d115      	bne.n	8006166 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	4b17      	ldr	r3, [pc, #92]	; (80061a0 <HAL_TIM_Base_Start+0xcc>)
 8006142:	4013      	ands	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2b06      	cmp	r3, #6
 800614a:	d015      	beq.n	8006178 <HAL_TIM_Base_Start+0xa4>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006152:	d011      	beq.n	8006178 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0201 	orr.w	r2, r2, #1
 8006162:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006164:	e008      	b.n	8006178 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 0201 	orr.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	e000      	b.n	800617a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006178:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	40012c00 	.word	0x40012c00
 800618c:	40000400 	.word	0x40000400
 8006190:	40000800 	.word	0x40000800
 8006194:	40000c00 	.word	0x40000c00
 8006198:	40013400 	.word	0x40013400
 800619c:	40014000 	.word	0x40014000
 80061a0:	00010007 	.word	0x00010007

080061a4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6a1a      	ldr	r2, [r3, #32]
 80061b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80061b6:	4013      	ands	r3, r2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10f      	bne.n	80061dc <HAL_TIM_Base_Stop+0x38>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6a1a      	ldr	r2, [r3, #32]
 80061c2:	f240 4344 	movw	r3, #1092	; 0x444
 80061c6:	4013      	ands	r3, r2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d107      	bne.n	80061dc <HAL_TIM_Base_Stop+0x38>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0201 	bic.w	r2, r2, #1
 80061da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
	...

080061f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b01      	cmp	r3, #1
 8006206:	d001      	beq.n	800620c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e04f      	b.n	80062ac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0201 	orr.w	r2, r2, #1
 8006222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a23      	ldr	r2, [pc, #140]	; (80062b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d01d      	beq.n	800626a <HAL_TIM_Base_Start_IT+0x76>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006236:	d018      	beq.n	800626a <HAL_TIM_Base_Start_IT+0x76>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1f      	ldr	r2, [pc, #124]	; (80062bc <HAL_TIM_Base_Start_IT+0xc8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d013      	beq.n	800626a <HAL_TIM_Base_Start_IT+0x76>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a1e      	ldr	r2, [pc, #120]	; (80062c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d00e      	beq.n	800626a <HAL_TIM_Base_Start_IT+0x76>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a1c      	ldr	r2, [pc, #112]	; (80062c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d009      	beq.n	800626a <HAL_TIM_Base_Start_IT+0x76>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a1b      	ldr	r2, [pc, #108]	; (80062c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d004      	beq.n	800626a <HAL_TIM_Base_Start_IT+0x76>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a19      	ldr	r2, [pc, #100]	; (80062cc <HAL_TIM_Base_Start_IT+0xd8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d115      	bne.n	8006296 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	4b17      	ldr	r3, [pc, #92]	; (80062d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006272:	4013      	ands	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b06      	cmp	r3, #6
 800627a:	d015      	beq.n	80062a8 <HAL_TIM_Base_Start_IT+0xb4>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006282:	d011      	beq.n	80062a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0201 	orr.w	r2, r2, #1
 8006292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006294:	e008      	b.n	80062a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f042 0201 	orr.w	r2, r2, #1
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	e000      	b.n	80062aa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	40012c00 	.word	0x40012c00
 80062bc:	40000400 	.word	0x40000400
 80062c0:	40000800 	.word	0x40000800
 80062c4:	40000c00 	.word	0x40000c00
 80062c8:	40013400 	.word	0x40013400
 80062cc:	40014000 	.word	0x40014000
 80062d0:	00010007 	.word	0x00010007

080062d4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0201 	bic.w	r2, r2, #1
 80062ea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6a1a      	ldr	r2, [r3, #32]
 80062f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80062f6:	4013      	ands	r3, r2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10f      	bne.n	800631c <HAL_TIM_Base_Stop_IT+0x48>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6a1a      	ldr	r2, [r3, #32]
 8006302:	f240 4344 	movw	r3, #1092	; 0x444
 8006306:	4013      	ands	r3, r2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d107      	bne.n	800631c <HAL_TIM_Base_Stop_IT+0x48>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0201 	bic.w	r2, r2, #1
 800631a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b082      	sub	sp, #8
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e049      	b.n	80063d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d106      	bne.n	800635e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7fc fccf 	bl	8002cfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2202      	movs	r2, #2
 8006362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3304      	adds	r3, #4
 800636e:	4619      	mov	r1, r3
 8006370:	4610      	mov	r0, r2
 8006372:	f000 fcd3 	bl	8006d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d109      	bne.n	8006408 <HAL_TIM_PWM_Start_IT+0x28>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	bf14      	ite	ne
 8006400:	2301      	movne	r3, #1
 8006402:	2300      	moveq	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	e03c      	b.n	8006482 <HAL_TIM_PWM_Start_IT+0xa2>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	2b04      	cmp	r3, #4
 800640c:	d109      	bne.n	8006422 <HAL_TIM_PWM_Start_IT+0x42>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b01      	cmp	r3, #1
 8006418:	bf14      	ite	ne
 800641a:	2301      	movne	r3, #1
 800641c:	2300      	moveq	r3, #0
 800641e:	b2db      	uxtb	r3, r3
 8006420:	e02f      	b.n	8006482 <HAL_TIM_PWM_Start_IT+0xa2>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b08      	cmp	r3, #8
 8006426:	d109      	bne.n	800643c <HAL_TIM_PWM_Start_IT+0x5c>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b01      	cmp	r3, #1
 8006432:	bf14      	ite	ne
 8006434:	2301      	movne	r3, #1
 8006436:	2300      	moveq	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	e022      	b.n	8006482 <HAL_TIM_PWM_Start_IT+0xa2>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b0c      	cmp	r3, #12
 8006440:	d109      	bne.n	8006456 <HAL_TIM_PWM_Start_IT+0x76>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b01      	cmp	r3, #1
 800644c:	bf14      	ite	ne
 800644e:	2301      	movne	r3, #1
 8006450:	2300      	moveq	r3, #0
 8006452:	b2db      	uxtb	r3, r3
 8006454:	e015      	b.n	8006482 <HAL_TIM_PWM_Start_IT+0xa2>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b10      	cmp	r3, #16
 800645a:	d109      	bne.n	8006470 <HAL_TIM_PWM_Start_IT+0x90>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b01      	cmp	r3, #1
 8006466:	bf14      	ite	ne
 8006468:	2301      	movne	r3, #1
 800646a:	2300      	moveq	r3, #0
 800646c:	b2db      	uxtb	r3, r3
 800646e:	e008      	b.n	8006482 <HAL_TIM_PWM_Start_IT+0xa2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b01      	cmp	r3, #1
 800647a:	bf14      	ite	ne
 800647c:	2301      	movne	r3, #1
 800647e:	2300      	moveq	r3, #0
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e0e7      	b.n	800665a <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d104      	bne.n	800649a <HAL_TIM_PWM_Start_IT+0xba>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006498:	e023      	b.n	80064e2 <HAL_TIM_PWM_Start_IT+0x102>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b04      	cmp	r3, #4
 800649e:	d104      	bne.n	80064aa <HAL_TIM_PWM_Start_IT+0xca>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064a8:	e01b      	b.n	80064e2 <HAL_TIM_PWM_Start_IT+0x102>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b08      	cmp	r3, #8
 80064ae:	d104      	bne.n	80064ba <HAL_TIM_PWM_Start_IT+0xda>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064b8:	e013      	b.n	80064e2 <HAL_TIM_PWM_Start_IT+0x102>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b0c      	cmp	r3, #12
 80064be:	d104      	bne.n	80064ca <HAL_TIM_PWM_Start_IT+0xea>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064c8:	e00b      	b.n	80064e2 <HAL_TIM_PWM_Start_IT+0x102>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b10      	cmp	r3, #16
 80064ce:	d104      	bne.n	80064da <HAL_TIM_PWM_Start_IT+0xfa>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064d8:	e003      	b.n	80064e2 <HAL_TIM_PWM_Start_IT+0x102>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2202      	movs	r2, #2
 80064de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b0c      	cmp	r3, #12
 80064e6:	d841      	bhi.n	800656c <HAL_TIM_PWM_Start_IT+0x18c>
 80064e8:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <HAL_TIM_PWM_Start_IT+0x110>)
 80064ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ee:	bf00      	nop
 80064f0:	08006525 	.word	0x08006525
 80064f4:	0800656d 	.word	0x0800656d
 80064f8:	0800656d 	.word	0x0800656d
 80064fc:	0800656d 	.word	0x0800656d
 8006500:	08006537 	.word	0x08006537
 8006504:	0800656d 	.word	0x0800656d
 8006508:	0800656d 	.word	0x0800656d
 800650c:	0800656d 	.word	0x0800656d
 8006510:	08006549 	.word	0x08006549
 8006514:	0800656d 	.word	0x0800656d
 8006518:	0800656d 	.word	0x0800656d
 800651c:	0800656d 	.word	0x0800656d
 8006520:	0800655b 	.word	0x0800655b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0202 	orr.w	r2, r2, #2
 8006532:	60da      	str	r2, [r3, #12]
      break;
 8006534:	e01d      	b.n	8006572 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f042 0204 	orr.w	r2, r2, #4
 8006544:	60da      	str	r2, [r3, #12]
      break;
 8006546:	e014      	b.n	8006572 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0208 	orr.w	r2, r2, #8
 8006556:	60da      	str	r2, [r3, #12]
      break;
 8006558:	e00b      	b.n	8006572 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68da      	ldr	r2, [r3, #12]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f042 0210 	orr.w	r2, r2, #16
 8006568:	60da      	str	r2, [r3, #12]
      break;
 800656a:	e002      	b.n	8006572 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	73fb      	strb	r3, [r7, #15]
      break;
 8006570:	bf00      	nop
  }

  if (status == HAL_OK)
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d16f      	bne.n	8006658 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2201      	movs	r2, #1
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	4618      	mov	r0, r3
 8006582:	f000 ff3b 	bl	80073fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a36      	ldr	r2, [pc, #216]	; (8006664 <HAL_TIM_PWM_Start_IT+0x284>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d013      	beq.n	80065b8 <HAL_TIM_PWM_Start_IT+0x1d8>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a34      	ldr	r2, [pc, #208]	; (8006668 <HAL_TIM_PWM_Start_IT+0x288>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d00e      	beq.n	80065b8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a33      	ldr	r2, [pc, #204]	; (800666c <HAL_TIM_PWM_Start_IT+0x28c>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d009      	beq.n	80065b8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a31      	ldr	r2, [pc, #196]	; (8006670 <HAL_TIM_PWM_Start_IT+0x290>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d004      	beq.n	80065b8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a30      	ldr	r2, [pc, #192]	; (8006674 <HAL_TIM_PWM_Start_IT+0x294>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d101      	bne.n	80065bc <HAL_TIM_PWM_Start_IT+0x1dc>
 80065b8:	2301      	movs	r3, #1
 80065ba:	e000      	b.n	80065be <HAL_TIM_PWM_Start_IT+0x1de>
 80065bc:	2300      	movs	r3, #0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d007      	beq.n	80065d2 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a23      	ldr	r2, [pc, #140]	; (8006664 <HAL_TIM_PWM_Start_IT+0x284>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d01d      	beq.n	8006618 <HAL_TIM_PWM_Start_IT+0x238>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e4:	d018      	beq.n	8006618 <HAL_TIM_PWM_Start_IT+0x238>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a23      	ldr	r2, [pc, #140]	; (8006678 <HAL_TIM_PWM_Start_IT+0x298>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d013      	beq.n	8006618 <HAL_TIM_PWM_Start_IT+0x238>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a21      	ldr	r2, [pc, #132]	; (800667c <HAL_TIM_PWM_Start_IT+0x29c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00e      	beq.n	8006618 <HAL_TIM_PWM_Start_IT+0x238>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a20      	ldr	r2, [pc, #128]	; (8006680 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d009      	beq.n	8006618 <HAL_TIM_PWM_Start_IT+0x238>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a17      	ldr	r2, [pc, #92]	; (8006668 <HAL_TIM_PWM_Start_IT+0x288>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d004      	beq.n	8006618 <HAL_TIM_PWM_Start_IT+0x238>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a16      	ldr	r2, [pc, #88]	; (800666c <HAL_TIM_PWM_Start_IT+0x28c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d115      	bne.n	8006644 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689a      	ldr	r2, [r3, #8]
 800661e:	4b19      	ldr	r3, [pc, #100]	; (8006684 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8006620:	4013      	ands	r3, r2
 8006622:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	2b06      	cmp	r3, #6
 8006628:	d015      	beq.n	8006656 <HAL_TIM_PWM_Start_IT+0x276>
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006630:	d011      	beq.n	8006656 <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f042 0201 	orr.w	r2, r2, #1
 8006640:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006642:	e008      	b.n	8006656 <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0201 	orr.w	r2, r2, #1
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	e000      	b.n	8006658 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006656:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	40012c00 	.word	0x40012c00
 8006668:	40013400 	.word	0x40013400
 800666c:	40014000 	.word	0x40014000
 8006670:	40014400 	.word	0x40014400
 8006674:	40014800 	.word	0x40014800
 8006678:	40000400 	.word	0x40000400
 800667c:	40000800 	.word	0x40000800
 8006680:	40000c00 	.word	0x40000c00
 8006684:	00010007 	.word	0x00010007

08006688 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b0c      	cmp	r3, #12
 800669a:	d841      	bhi.n	8006720 <HAL_TIM_PWM_Stop_IT+0x98>
 800669c:	a201      	add	r2, pc, #4	; (adr r2, 80066a4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800669e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a2:	bf00      	nop
 80066a4:	080066d9 	.word	0x080066d9
 80066a8:	08006721 	.word	0x08006721
 80066ac:	08006721 	.word	0x08006721
 80066b0:	08006721 	.word	0x08006721
 80066b4:	080066eb 	.word	0x080066eb
 80066b8:	08006721 	.word	0x08006721
 80066bc:	08006721 	.word	0x08006721
 80066c0:	08006721 	.word	0x08006721
 80066c4:	080066fd 	.word	0x080066fd
 80066c8:	08006721 	.word	0x08006721
 80066cc:	08006721 	.word	0x08006721
 80066d0:	08006721 	.word	0x08006721
 80066d4:	0800670f 	.word	0x0800670f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0202 	bic.w	r2, r2, #2
 80066e6:	60da      	str	r2, [r3, #12]
      break;
 80066e8:	e01d      	b.n	8006726 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68da      	ldr	r2, [r3, #12]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0204 	bic.w	r2, r2, #4
 80066f8:	60da      	str	r2, [r3, #12]
      break;
 80066fa:	e014      	b.n	8006726 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0208 	bic.w	r2, r2, #8
 800670a:	60da      	str	r2, [r3, #12]
      break;
 800670c:	e00b      	b.n	8006726 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0210 	bic.w	r2, r2, #16
 800671c:	60da      	str	r2, [r3, #12]
      break;
 800671e:	e002      	b.n	8006726 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	73fb      	strb	r3, [r7, #15]
      break;
 8006724:	bf00      	nop
  }

  if (status == HAL_OK)
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	2b00      	cmp	r3, #0
 800672a:	f040 8081 	bne.w	8006830 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2200      	movs	r2, #0
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fe60 	bl	80073fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a3e      	ldr	r2, [pc, #248]	; (800683c <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d013      	beq.n	800676e <HAL_TIM_PWM_Stop_IT+0xe6>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a3d      	ldr	r2, [pc, #244]	; (8006840 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00e      	beq.n	800676e <HAL_TIM_PWM_Stop_IT+0xe6>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a3b      	ldr	r2, [pc, #236]	; (8006844 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d009      	beq.n	800676e <HAL_TIM_PWM_Stop_IT+0xe6>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a3a      	ldr	r2, [pc, #232]	; (8006848 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d004      	beq.n	800676e <HAL_TIM_PWM_Stop_IT+0xe6>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a38      	ldr	r2, [pc, #224]	; (800684c <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d101      	bne.n	8006772 <HAL_TIM_PWM_Stop_IT+0xea>
 800676e:	2301      	movs	r3, #1
 8006770:	e000      	b.n	8006774 <HAL_TIM_PWM_Stop_IT+0xec>
 8006772:	2300      	movs	r3, #0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d017      	beq.n	80067a8 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6a1a      	ldr	r2, [r3, #32]
 800677e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006782:	4013      	ands	r3, r2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10f      	bne.n	80067a8 <HAL_TIM_PWM_Stop_IT+0x120>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6a1a      	ldr	r2, [r3, #32]
 800678e:	f240 4344 	movw	r3, #1092	; 0x444
 8006792:	4013      	ands	r3, r2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d107      	bne.n	80067a8 <HAL_TIM_PWM_Stop_IT+0x120>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067a6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6a1a      	ldr	r2, [r3, #32]
 80067ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80067b2:	4013      	ands	r3, r2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10f      	bne.n	80067d8 <HAL_TIM_PWM_Stop_IT+0x150>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6a1a      	ldr	r2, [r3, #32]
 80067be:	f240 4344 	movw	r3, #1092	; 0x444
 80067c2:	4013      	ands	r3, r2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d107      	bne.n	80067d8 <HAL_TIM_PWM_Stop_IT+0x150>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0201 	bic.w	r2, r2, #1
 80067d6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d104      	bne.n	80067e8 <HAL_TIM_PWM_Stop_IT+0x160>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067e6:	e023      	b.n	8006830 <HAL_TIM_PWM_Stop_IT+0x1a8>
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	2b04      	cmp	r3, #4
 80067ec:	d104      	bne.n	80067f8 <HAL_TIM_PWM_Stop_IT+0x170>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067f6:	e01b      	b.n	8006830 <HAL_TIM_PWM_Stop_IT+0x1a8>
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2b08      	cmp	r3, #8
 80067fc:	d104      	bne.n	8006808 <HAL_TIM_PWM_Stop_IT+0x180>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006806:	e013      	b.n	8006830 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2b0c      	cmp	r3, #12
 800680c:	d104      	bne.n	8006818 <HAL_TIM_PWM_Stop_IT+0x190>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006816:	e00b      	b.n	8006830 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2b10      	cmp	r3, #16
 800681c:	d104      	bne.n	8006828 <HAL_TIM_PWM_Stop_IT+0x1a0>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006826:	e003      	b.n	8006830 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8006830:	7bfb      	ldrb	r3, [r7, #15]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	40012c00 	.word	0x40012c00
 8006840:	40013400 	.word	0x40013400
 8006844:	40014000 	.word	0x40014000
 8006848:	40014400 	.word	0x40014400
 800684c:	40014800 	.word	0x40014800

08006850 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b02      	cmp	r3, #2
 8006864:	d122      	bne.n	80068ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b02      	cmp	r3, #2
 8006872:	d11b      	bne.n	80068ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f06f 0202 	mvn.w	r2, #2
 800687c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	f003 0303 	and.w	r3, r3, #3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fa24 	bl	8006ce0 <HAL_TIM_IC_CaptureCallback>
 8006898:	e005      	b.n	80068a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fa16 	bl	8006ccc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fa27 	bl	8006cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	f003 0304 	and.w	r3, r3, #4
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d122      	bne.n	8006900 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b04      	cmp	r3, #4
 80068c6:	d11b      	bne.n	8006900 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f06f 0204 	mvn.w	r2, #4
 80068d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2202      	movs	r2, #2
 80068d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f9fa 	bl	8006ce0 <HAL_TIM_IC_CaptureCallback>
 80068ec:	e005      	b.n	80068fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f9ec 	bl	8006ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f9fd 	bl	8006cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	f003 0308 	and.w	r3, r3, #8
 800690a:	2b08      	cmp	r3, #8
 800690c:	d122      	bne.n	8006954 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f003 0308 	and.w	r3, r3, #8
 8006918:	2b08      	cmp	r3, #8
 800691a:	d11b      	bne.n	8006954 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f06f 0208 	mvn.w	r2, #8
 8006924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2204      	movs	r2, #4
 800692a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	f003 0303 	and.w	r3, r3, #3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f9d0 	bl	8006ce0 <HAL_TIM_IC_CaptureCallback>
 8006940:	e005      	b.n	800694e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f9c2 	bl	8006ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f9d3 	bl	8006cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f003 0310 	and.w	r3, r3, #16
 800695e:	2b10      	cmp	r3, #16
 8006960:	d122      	bne.n	80069a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f003 0310 	and.w	r3, r3, #16
 800696c:	2b10      	cmp	r3, #16
 800696e:	d11b      	bne.n	80069a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f06f 0210 	mvn.w	r2, #16
 8006978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2208      	movs	r2, #8
 800697e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f9a6 	bl	8006ce0 <HAL_TIM_IC_CaptureCallback>
 8006994:	e005      	b.n	80069a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f998 	bl	8006ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f9a9 	bl	8006cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d10e      	bne.n	80069d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d107      	bne.n	80069d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f06f 0201 	mvn.w	r2, #1
 80069cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f972 	bl	8006cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069de:	2b80      	cmp	r3, #128	; 0x80
 80069e0:	d10e      	bne.n	8006a00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ec:	2b80      	cmp	r3, #128	; 0x80
 80069ee:	d107      	bne.n	8006a00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fdb6 	bl	800756c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a0e:	d10e      	bne.n	8006a2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1a:	2b80      	cmp	r3, #128	; 0x80
 8006a1c:	d107      	bne.n	8006a2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fda9 	bl	8007580 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a38:	2b40      	cmp	r3, #64	; 0x40
 8006a3a:	d10e      	bne.n	8006a5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a46:	2b40      	cmp	r3, #64	; 0x40
 8006a48:	d107      	bne.n	8006a5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f957 	bl	8006d08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	f003 0320 	and.w	r3, r3, #32
 8006a64:	2b20      	cmp	r3, #32
 8006a66:	d10e      	bne.n	8006a86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f003 0320 	and.w	r3, r3, #32
 8006a72:	2b20      	cmp	r3, #32
 8006a74:	d107      	bne.n	8006a86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f06f 0220 	mvn.w	r2, #32
 8006a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fd69 	bl	8007558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a86:	bf00      	nop
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d101      	bne.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006aaa:	2302      	movs	r3, #2
 8006aac:	e0ff      	b.n	8006cae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b14      	cmp	r3, #20
 8006aba:	f200 80f0 	bhi.w	8006c9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006abe:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac4:	08006b19 	.word	0x08006b19
 8006ac8:	08006c9f 	.word	0x08006c9f
 8006acc:	08006c9f 	.word	0x08006c9f
 8006ad0:	08006c9f 	.word	0x08006c9f
 8006ad4:	08006b59 	.word	0x08006b59
 8006ad8:	08006c9f 	.word	0x08006c9f
 8006adc:	08006c9f 	.word	0x08006c9f
 8006ae0:	08006c9f 	.word	0x08006c9f
 8006ae4:	08006b9b 	.word	0x08006b9b
 8006ae8:	08006c9f 	.word	0x08006c9f
 8006aec:	08006c9f 	.word	0x08006c9f
 8006af0:	08006c9f 	.word	0x08006c9f
 8006af4:	08006bdb 	.word	0x08006bdb
 8006af8:	08006c9f 	.word	0x08006c9f
 8006afc:	08006c9f 	.word	0x08006c9f
 8006b00:	08006c9f 	.word	0x08006c9f
 8006b04:	08006c1d 	.word	0x08006c1d
 8006b08:	08006c9f 	.word	0x08006c9f
 8006b0c:	08006c9f 	.word	0x08006c9f
 8006b10:	08006c9f 	.word	0x08006c9f
 8006b14:	08006c5d 	.word	0x08006c5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68b9      	ldr	r1, [r7, #8]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 f996 	bl	8006e50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0208 	orr.w	r2, r2, #8
 8006b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	699a      	ldr	r2, [r3, #24]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0204 	bic.w	r2, r2, #4
 8006b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6999      	ldr	r1, [r3, #24]
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	691a      	ldr	r2, [r3, #16]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	619a      	str	r2, [r3, #24]
      break;
 8006b56:	e0a5      	b.n	8006ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68b9      	ldr	r1, [r7, #8]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f000 fa06 	bl	8006f70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699a      	ldr	r2, [r3, #24]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	699a      	ldr	r2, [r3, #24]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6999      	ldr	r1, [r3, #24]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	021a      	lsls	r2, r3, #8
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	430a      	orrs	r2, r1
 8006b96:	619a      	str	r2, [r3, #24]
      break;
 8006b98:	e084      	b.n	8006ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68b9      	ldr	r1, [r7, #8]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f000 fa6f 	bl	8007084 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	69da      	ldr	r2, [r3, #28]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f042 0208 	orr.w	r2, r2, #8
 8006bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	69da      	ldr	r2, [r3, #28]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 0204 	bic.w	r2, r2, #4
 8006bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	69d9      	ldr	r1, [r3, #28]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	691a      	ldr	r2, [r3, #16]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	61da      	str	r2, [r3, #28]
      break;
 8006bd8:	e064      	b.n	8006ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68b9      	ldr	r1, [r7, #8]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 fad7 	bl	8007194 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	69da      	ldr	r2, [r3, #28]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69d9      	ldr	r1, [r3, #28]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	021a      	lsls	r2, r3, #8
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	61da      	str	r2, [r3, #28]
      break;
 8006c1a:	e043      	b.n	8006ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68b9      	ldr	r1, [r7, #8]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 fb20 	bl	8007268 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0208 	orr.w	r2, r2, #8
 8006c36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f022 0204 	bic.w	r2, r2, #4
 8006c46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	691a      	ldr	r2, [r3, #16]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c5a:	e023      	b.n	8006ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68b9      	ldr	r1, [r7, #8]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 fb64 	bl	8007330 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	021a      	lsls	r2, r3, #8
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c9c:	e002      	b.n	8006ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop

08006cb8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a40      	ldr	r2, [pc, #256]	; (8006e30 <TIM_Base_SetConfig+0x114>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d013      	beq.n	8006d5c <TIM_Base_SetConfig+0x40>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d3a:	d00f      	beq.n	8006d5c <TIM_Base_SetConfig+0x40>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a3d      	ldr	r2, [pc, #244]	; (8006e34 <TIM_Base_SetConfig+0x118>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d00b      	beq.n	8006d5c <TIM_Base_SetConfig+0x40>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a3c      	ldr	r2, [pc, #240]	; (8006e38 <TIM_Base_SetConfig+0x11c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d007      	beq.n	8006d5c <TIM_Base_SetConfig+0x40>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a3b      	ldr	r2, [pc, #236]	; (8006e3c <TIM_Base_SetConfig+0x120>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d003      	beq.n	8006d5c <TIM_Base_SetConfig+0x40>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a3a      	ldr	r2, [pc, #232]	; (8006e40 <TIM_Base_SetConfig+0x124>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d108      	bne.n	8006d6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a2f      	ldr	r2, [pc, #188]	; (8006e30 <TIM_Base_SetConfig+0x114>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d01f      	beq.n	8006db6 <TIM_Base_SetConfig+0x9a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d7c:	d01b      	beq.n	8006db6 <TIM_Base_SetConfig+0x9a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a2c      	ldr	r2, [pc, #176]	; (8006e34 <TIM_Base_SetConfig+0x118>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d017      	beq.n	8006db6 <TIM_Base_SetConfig+0x9a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a2b      	ldr	r2, [pc, #172]	; (8006e38 <TIM_Base_SetConfig+0x11c>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d013      	beq.n	8006db6 <TIM_Base_SetConfig+0x9a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a2a      	ldr	r2, [pc, #168]	; (8006e3c <TIM_Base_SetConfig+0x120>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d00f      	beq.n	8006db6 <TIM_Base_SetConfig+0x9a>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a29      	ldr	r2, [pc, #164]	; (8006e40 <TIM_Base_SetConfig+0x124>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d00b      	beq.n	8006db6 <TIM_Base_SetConfig+0x9a>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a28      	ldr	r2, [pc, #160]	; (8006e44 <TIM_Base_SetConfig+0x128>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d007      	beq.n	8006db6 <TIM_Base_SetConfig+0x9a>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a27      	ldr	r2, [pc, #156]	; (8006e48 <TIM_Base_SetConfig+0x12c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d003      	beq.n	8006db6 <TIM_Base_SetConfig+0x9a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a26      	ldr	r2, [pc, #152]	; (8006e4c <TIM_Base_SetConfig+0x130>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d108      	bne.n	8006dc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a10      	ldr	r2, [pc, #64]	; (8006e30 <TIM_Base_SetConfig+0x114>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d00f      	beq.n	8006e14 <TIM_Base_SetConfig+0xf8>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a12      	ldr	r2, [pc, #72]	; (8006e40 <TIM_Base_SetConfig+0x124>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d00b      	beq.n	8006e14 <TIM_Base_SetConfig+0xf8>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a11      	ldr	r2, [pc, #68]	; (8006e44 <TIM_Base_SetConfig+0x128>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d007      	beq.n	8006e14 <TIM_Base_SetConfig+0xf8>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a10      	ldr	r2, [pc, #64]	; (8006e48 <TIM_Base_SetConfig+0x12c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d003      	beq.n	8006e14 <TIM_Base_SetConfig+0xf8>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a0f      	ldr	r2, [pc, #60]	; (8006e4c <TIM_Base_SetConfig+0x130>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d103      	bne.n	8006e1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	691a      	ldr	r2, [r3, #16]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	615a      	str	r2, [r3, #20]
}
 8006e22:	bf00      	nop
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	40012c00 	.word	0x40012c00
 8006e34:	40000400 	.word	0x40000400
 8006e38:	40000800 	.word	0x40000800
 8006e3c:	40000c00 	.word	0x40000c00
 8006e40:	40013400 	.word	0x40013400
 8006e44:	40014000 	.word	0x40014000
 8006e48:	40014400 	.word	0x40014400
 8006e4c:	40014800 	.word	0x40014800

08006e50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	f023 0201 	bic.w	r2, r3, #1
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 0303 	bic.w	r3, r3, #3
 8006e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f023 0302 	bic.w	r3, r3, #2
 8006e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a2c      	ldr	r2, [pc, #176]	; (8006f5c <TIM_OC1_SetConfig+0x10c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d00f      	beq.n	8006ed0 <TIM_OC1_SetConfig+0x80>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a2b      	ldr	r2, [pc, #172]	; (8006f60 <TIM_OC1_SetConfig+0x110>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00b      	beq.n	8006ed0 <TIM_OC1_SetConfig+0x80>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a2a      	ldr	r2, [pc, #168]	; (8006f64 <TIM_OC1_SetConfig+0x114>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d007      	beq.n	8006ed0 <TIM_OC1_SetConfig+0x80>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a29      	ldr	r2, [pc, #164]	; (8006f68 <TIM_OC1_SetConfig+0x118>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d003      	beq.n	8006ed0 <TIM_OC1_SetConfig+0x80>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a28      	ldr	r2, [pc, #160]	; (8006f6c <TIM_OC1_SetConfig+0x11c>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d10c      	bne.n	8006eea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f023 0308 	bic.w	r3, r3, #8
 8006ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f023 0304 	bic.w	r3, r3, #4
 8006ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a1b      	ldr	r2, [pc, #108]	; (8006f5c <TIM_OC1_SetConfig+0x10c>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00f      	beq.n	8006f12 <TIM_OC1_SetConfig+0xc2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a1a      	ldr	r2, [pc, #104]	; (8006f60 <TIM_OC1_SetConfig+0x110>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d00b      	beq.n	8006f12 <TIM_OC1_SetConfig+0xc2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a19      	ldr	r2, [pc, #100]	; (8006f64 <TIM_OC1_SetConfig+0x114>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d007      	beq.n	8006f12 <TIM_OC1_SetConfig+0xc2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a18      	ldr	r2, [pc, #96]	; (8006f68 <TIM_OC1_SetConfig+0x118>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d003      	beq.n	8006f12 <TIM_OC1_SetConfig+0xc2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a17      	ldr	r2, [pc, #92]	; (8006f6c <TIM_OC1_SetConfig+0x11c>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d111      	bne.n	8006f36 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	621a      	str	r2, [r3, #32]
}
 8006f50:	bf00      	nop
 8006f52:	371c      	adds	r7, #28
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	40012c00 	.word	0x40012c00
 8006f60:	40013400 	.word	0x40013400
 8006f64:	40014000 	.word	0x40014000
 8006f68:	40014400 	.word	0x40014400
 8006f6c:	40014800 	.word	0x40014800

08006f70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	f023 0210 	bic.w	r2, r3, #16
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f023 0320 	bic.w	r3, r3, #32
 8006fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	011b      	lsls	r3, r3, #4
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a28      	ldr	r2, [pc, #160]	; (8007070 <TIM_OC2_SetConfig+0x100>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d003      	beq.n	8006fdc <TIM_OC2_SetConfig+0x6c>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a27      	ldr	r2, [pc, #156]	; (8007074 <TIM_OC2_SetConfig+0x104>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d10d      	bne.n	8006ff8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ff6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a1d      	ldr	r2, [pc, #116]	; (8007070 <TIM_OC2_SetConfig+0x100>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00f      	beq.n	8007020 <TIM_OC2_SetConfig+0xb0>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a1c      	ldr	r2, [pc, #112]	; (8007074 <TIM_OC2_SetConfig+0x104>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d00b      	beq.n	8007020 <TIM_OC2_SetConfig+0xb0>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a1b      	ldr	r2, [pc, #108]	; (8007078 <TIM_OC2_SetConfig+0x108>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d007      	beq.n	8007020 <TIM_OC2_SetConfig+0xb0>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a1a      	ldr	r2, [pc, #104]	; (800707c <TIM_OC2_SetConfig+0x10c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d003      	beq.n	8007020 <TIM_OC2_SetConfig+0xb0>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a19      	ldr	r2, [pc, #100]	; (8007080 <TIM_OC2_SetConfig+0x110>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d113      	bne.n	8007048 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007026:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800702e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	4313      	orrs	r3, r2
 800703a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	621a      	str	r2, [r3, #32]
}
 8007062:	bf00      	nop
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	40012c00 	.word	0x40012c00
 8007074:	40013400 	.word	0x40013400
 8007078:	40014000 	.word	0x40014000
 800707c:	40014400 	.word	0x40014400
 8007080:	40014800 	.word	0x40014800

08007084 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0303 	bic.w	r3, r3, #3
 80070be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	021b      	lsls	r3, r3, #8
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	4313      	orrs	r3, r2
 80070dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a27      	ldr	r2, [pc, #156]	; (8007180 <TIM_OC3_SetConfig+0xfc>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d003      	beq.n	80070ee <TIM_OC3_SetConfig+0x6a>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a26      	ldr	r2, [pc, #152]	; (8007184 <TIM_OC3_SetConfig+0x100>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d10d      	bne.n	800710a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	021b      	lsls	r3, r3, #8
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	4313      	orrs	r3, r2
 8007100:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007108:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a1c      	ldr	r2, [pc, #112]	; (8007180 <TIM_OC3_SetConfig+0xfc>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d00f      	beq.n	8007132 <TIM_OC3_SetConfig+0xae>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a1b      	ldr	r2, [pc, #108]	; (8007184 <TIM_OC3_SetConfig+0x100>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00b      	beq.n	8007132 <TIM_OC3_SetConfig+0xae>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a1a      	ldr	r2, [pc, #104]	; (8007188 <TIM_OC3_SetConfig+0x104>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d007      	beq.n	8007132 <TIM_OC3_SetConfig+0xae>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a19      	ldr	r2, [pc, #100]	; (800718c <TIM_OC3_SetConfig+0x108>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d003      	beq.n	8007132 <TIM_OC3_SetConfig+0xae>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a18      	ldr	r2, [pc, #96]	; (8007190 <TIM_OC3_SetConfig+0x10c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d113      	bne.n	800715a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	011b      	lsls	r3, r3, #4
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	4313      	orrs	r3, r2
 800714c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	621a      	str	r2, [r3, #32]
}
 8007174:	bf00      	nop
 8007176:	371c      	adds	r7, #28
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	40012c00 	.word	0x40012c00
 8007184:	40013400 	.word	0x40013400
 8007188:	40014000 	.word	0x40014000
 800718c:	40014400 	.word	0x40014400
 8007190:	40014800 	.word	0x40014800

08007194 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	021b      	lsls	r3, r3, #8
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	4313      	orrs	r3, r2
 80071da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	031b      	lsls	r3, r3, #12
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a18      	ldr	r2, [pc, #96]	; (8007254 <TIM_OC4_SetConfig+0xc0>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d00f      	beq.n	8007218 <TIM_OC4_SetConfig+0x84>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a17      	ldr	r2, [pc, #92]	; (8007258 <TIM_OC4_SetConfig+0xc4>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d00b      	beq.n	8007218 <TIM_OC4_SetConfig+0x84>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a16      	ldr	r2, [pc, #88]	; (800725c <TIM_OC4_SetConfig+0xc8>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d007      	beq.n	8007218 <TIM_OC4_SetConfig+0x84>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a15      	ldr	r2, [pc, #84]	; (8007260 <TIM_OC4_SetConfig+0xcc>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d003      	beq.n	8007218 <TIM_OC4_SetConfig+0x84>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a14      	ldr	r2, [pc, #80]	; (8007264 <TIM_OC4_SetConfig+0xd0>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d109      	bne.n	800722c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800721e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	019b      	lsls	r3, r3, #6
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	4313      	orrs	r3, r2
 800722a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	621a      	str	r2, [r3, #32]
}
 8007246:	bf00      	nop
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	40012c00 	.word	0x40012c00
 8007258:	40013400 	.word	0x40013400
 800725c:	40014000 	.word	0x40014000
 8007260:	40014400 	.word	0x40014400
 8007264:	40014800 	.word	0x40014800

08007268 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80072ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	041b      	lsls	r3, r3, #16
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a17      	ldr	r2, [pc, #92]	; (800731c <TIM_OC5_SetConfig+0xb4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d00f      	beq.n	80072e2 <TIM_OC5_SetConfig+0x7a>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a16      	ldr	r2, [pc, #88]	; (8007320 <TIM_OC5_SetConfig+0xb8>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d00b      	beq.n	80072e2 <TIM_OC5_SetConfig+0x7a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a15      	ldr	r2, [pc, #84]	; (8007324 <TIM_OC5_SetConfig+0xbc>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d007      	beq.n	80072e2 <TIM_OC5_SetConfig+0x7a>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a14      	ldr	r2, [pc, #80]	; (8007328 <TIM_OC5_SetConfig+0xc0>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d003      	beq.n	80072e2 <TIM_OC5_SetConfig+0x7a>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a13      	ldr	r2, [pc, #76]	; (800732c <TIM_OC5_SetConfig+0xc4>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d109      	bne.n	80072f6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	021b      	lsls	r3, r3, #8
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	621a      	str	r2, [r3, #32]
}
 8007310:	bf00      	nop
 8007312:	371c      	adds	r7, #28
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	40012c00 	.word	0x40012c00
 8007320:	40013400 	.word	0x40013400
 8007324:	40014000 	.word	0x40014000
 8007328:	40014400 	.word	0x40014400
 800732c:	40014800 	.word	0x40014800

08007330 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800735e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	021b      	lsls	r3, r3, #8
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	4313      	orrs	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007376:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	051b      	lsls	r3, r3, #20
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a18      	ldr	r2, [pc, #96]	; (80073e8 <TIM_OC6_SetConfig+0xb8>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00f      	beq.n	80073ac <TIM_OC6_SetConfig+0x7c>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a17      	ldr	r2, [pc, #92]	; (80073ec <TIM_OC6_SetConfig+0xbc>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d00b      	beq.n	80073ac <TIM_OC6_SetConfig+0x7c>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a16      	ldr	r2, [pc, #88]	; (80073f0 <TIM_OC6_SetConfig+0xc0>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d007      	beq.n	80073ac <TIM_OC6_SetConfig+0x7c>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a15      	ldr	r2, [pc, #84]	; (80073f4 <TIM_OC6_SetConfig+0xc4>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d003      	beq.n	80073ac <TIM_OC6_SetConfig+0x7c>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a14      	ldr	r2, [pc, #80]	; (80073f8 <TIM_OC6_SetConfig+0xc8>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d109      	bne.n	80073c0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	029b      	lsls	r3, r3, #10
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	4313      	orrs	r3, r2
 80073be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	621a      	str	r2, [r3, #32]
}
 80073da:	bf00      	nop
 80073dc:	371c      	adds	r7, #28
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	40012c00 	.word	0x40012c00
 80073ec:	40013400 	.word	0x40013400
 80073f0:	40014000 	.word	0x40014000
 80073f4:	40014400 	.word	0x40014400
 80073f8:	40014800 	.word	0x40014800

080073fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	f003 031f 	and.w	r3, r3, #31
 800740e:	2201      	movs	r2, #1
 8007410:	fa02 f303 	lsl.w	r3, r2, r3
 8007414:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6a1a      	ldr	r2, [r3, #32]
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	43db      	mvns	r3, r3
 800741e:	401a      	ands	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6a1a      	ldr	r2, [r3, #32]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f003 031f 	and.w	r3, r3, #31
 800742e:	6879      	ldr	r1, [r7, #4]
 8007430:	fa01 f303 	lsl.w	r3, r1, r3
 8007434:	431a      	orrs	r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	621a      	str	r2, [r3, #32]
}
 800743a:	bf00      	nop
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
	...

08007448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007458:	2b01      	cmp	r3, #1
 800745a:	d101      	bne.n	8007460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800745c:	2302      	movs	r3, #2
 800745e:	e068      	b.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a2e      	ldr	r2, [pc, #184]	; (8007540 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d004      	beq.n	8007494 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a2d      	ldr	r2, [pc, #180]	; (8007544 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d108      	bne.n	80074a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800749a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a1e      	ldr	r2, [pc, #120]	; (8007540 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d01d      	beq.n	8007506 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d2:	d018      	beq.n	8007506 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a1b      	ldr	r2, [pc, #108]	; (8007548 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d013      	beq.n	8007506 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a1a      	ldr	r2, [pc, #104]	; (800754c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d00e      	beq.n	8007506 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a18      	ldr	r2, [pc, #96]	; (8007550 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d009      	beq.n	8007506 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a13      	ldr	r2, [pc, #76]	; (8007544 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d004      	beq.n	8007506 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a14      	ldr	r2, [pc, #80]	; (8007554 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d10c      	bne.n	8007520 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800750c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	4313      	orrs	r3, r2
 8007516:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	40012c00 	.word	0x40012c00
 8007544:	40013400 	.word	0x40013400
 8007548:	40000400 	.word	0x40000400
 800754c:	40000800 	.word	0x40000800
 8007550:	40000c00 	.word	0x40000c00
 8007554:	40014000 	.word	0x40014000

08007558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e040      	b.n	8007628 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d106      	bne.n	80075bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7fb fc32 	bl	8002e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2224      	movs	r2, #36	; 0x24
 80075c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 0201 	bic.w	r2, r2, #1
 80075d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fc94 	bl	8007f00 <UART_SetConfig>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d101      	bne.n	80075e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e022      	b.n	8007628 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 ff40 	bl	8008470 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689a      	ldr	r2, [r3, #8]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800760e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0201 	orr.w	r2, r2, #1
 800761e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 ffc7 	bl	80085b4 <UART_CheckIdleState>
 8007626:	4603      	mov	r3, r0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08a      	sub	sp, #40	; 0x28
 8007634:	af02      	add	r7, sp, #8
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	603b      	str	r3, [r7, #0]
 800763c:	4613      	mov	r3, r2
 800763e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007644:	2b20      	cmp	r3, #32
 8007646:	f040 8082 	bne.w	800774e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <HAL_UART_Transmit+0x26>
 8007650:	88fb      	ldrh	r3, [r7, #6]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e07a      	b.n	8007750 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007660:	2b01      	cmp	r3, #1
 8007662:	d101      	bne.n	8007668 <HAL_UART_Transmit+0x38>
 8007664:	2302      	movs	r3, #2
 8007666:	e073      	b.n	8007750 <HAL_UART_Transmit+0x120>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2221      	movs	r2, #33	; 0x21
 800767c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800767e:	f7fb fdd3 	bl	8003228 <HAL_GetTick>
 8007682:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	88fa      	ldrh	r2, [r7, #6]
 8007688:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	88fa      	ldrh	r2, [r7, #6]
 8007690:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800769c:	d108      	bne.n	80076b0 <HAL_UART_Transmit+0x80>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d104      	bne.n	80076b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	61bb      	str	r3, [r7, #24]
 80076ae:	e003      	b.n	80076b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076b4:	2300      	movs	r3, #0
 80076b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80076c0:	e02d      	b.n	800771e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2200      	movs	r2, #0
 80076ca:	2180      	movs	r1, #128	; 0x80
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 ffba 	bl	8008646 <UART_WaitOnFlagUntilTimeout>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e039      	b.n	8007750 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10b      	bne.n	80076fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	881a      	ldrh	r2, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076ee:	b292      	uxth	r2, r2
 80076f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	3302      	adds	r3, #2
 80076f6:	61bb      	str	r3, [r7, #24]
 80076f8:	e008      	b.n	800770c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	781a      	ldrb	r2, [r3, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	b292      	uxth	r2, r2
 8007704:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	3301      	adds	r3, #1
 800770a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007712:	b29b      	uxth	r3, r3
 8007714:	3b01      	subs	r3, #1
 8007716:	b29a      	uxth	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007724:	b29b      	uxth	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1cb      	bne.n	80076c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2200      	movs	r2, #0
 8007732:	2140      	movs	r1, #64	; 0x40
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f000 ff86 	bl	8008646 <UART_WaitOnFlagUntilTimeout>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e005      	b.n	8007750 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2220      	movs	r2, #32
 8007748:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	e000      	b.n	8007750 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800774e:	2302      	movs	r3, #2
  }
}
 8007750:	4618      	mov	r0, r3
 8007752:	3720      	adds	r7, #32
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08a      	sub	sp, #40	; 0x28
 800775c:	af02      	add	r7, sp, #8
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	4613      	mov	r3, r2
 8007766:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800776c:	2b20      	cmp	r3, #32
 800776e:	f040 80bf 	bne.w	80078f0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <HAL_UART_Receive+0x26>
 8007778:	88fb      	ldrh	r3, [r7, #6]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e0b7      	b.n	80078f2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007788:	2b01      	cmp	r3, #1
 800778a:	d101      	bne.n	8007790 <HAL_UART_Receive+0x38>
 800778c:	2302      	movs	r3, #2
 800778e:	e0b0      	b.n	80078f2 <HAL_UART_Receive+0x19a>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2222      	movs	r2, #34	; 0x22
 80077a4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077ac:	f7fb fd3c 	bl	8003228 <HAL_GetTick>
 80077b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	88fa      	ldrh	r2, [r7, #6]
 80077b6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	88fa      	ldrh	r2, [r7, #6]
 80077be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ca:	d10e      	bne.n	80077ea <HAL_UART_Receive+0x92>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d105      	bne.n	80077e0 <HAL_UART_Receive+0x88>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80077da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077de:	e02d      	b.n	800783c <HAL_UART_Receive+0xe4>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	22ff      	movs	r2, #255	; 0xff
 80077e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077e8:	e028      	b.n	800783c <HAL_UART_Receive+0xe4>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10d      	bne.n	800780e <HAL_UART_Receive+0xb6>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d104      	bne.n	8007804 <HAL_UART_Receive+0xac>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	22ff      	movs	r2, #255	; 0xff
 80077fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007802:	e01b      	b.n	800783c <HAL_UART_Receive+0xe4>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	227f      	movs	r2, #127	; 0x7f
 8007808:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800780c:	e016      	b.n	800783c <HAL_UART_Receive+0xe4>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007816:	d10d      	bne.n	8007834 <HAL_UART_Receive+0xdc>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d104      	bne.n	800782a <HAL_UART_Receive+0xd2>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	227f      	movs	r2, #127	; 0x7f
 8007824:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007828:	e008      	b.n	800783c <HAL_UART_Receive+0xe4>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	223f      	movs	r2, #63	; 0x3f
 800782e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007832:	e003      	b.n	800783c <HAL_UART_Receive+0xe4>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007842:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800784c:	d108      	bne.n	8007860 <HAL_UART_Receive+0x108>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d104      	bne.n	8007860 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8007856:	2300      	movs	r3, #0
 8007858:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	61bb      	str	r3, [r7, #24]
 800785e:	e003      	b.n	8007868 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007864:	2300      	movs	r3, #0
 8007866:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007870:	e033      	b.n	80078da <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2200      	movs	r2, #0
 800787a:	2120      	movs	r1, #32
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f000 fee2 	bl	8008646 <UART_WaitOnFlagUntilTimeout>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e032      	b.n	80078f2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10c      	bne.n	80078ac <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007898:	b29a      	uxth	r2, r3
 800789a:	8a7b      	ldrh	r3, [r7, #18]
 800789c:	4013      	ands	r3, r2
 800789e:	b29a      	uxth	r2, r3
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	3302      	adds	r3, #2
 80078a8:	61bb      	str	r3, [r7, #24]
 80078aa:	e00d      	b.n	80078c8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	8a7b      	ldrh	r3, [r7, #18]
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	4013      	ands	r3, r2
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	3301      	adds	r3, #1
 80078c6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	3b01      	subs	r3, #1
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1c5      	bne.n	8007872 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2220      	movs	r2, #32
 80078ea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	e000      	b.n	80078f2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80078f0:	2302      	movs	r3, #2
  }
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3720      	adds	r7, #32
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
	...

080078fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b0ba      	sub	sp, #232	; 0xe8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007922:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007926:	f640 030f 	movw	r3, #2063	; 0x80f
 800792a:	4013      	ands	r3, r2
 800792c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007930:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007934:	2b00      	cmp	r3, #0
 8007936:	d115      	bne.n	8007964 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00f      	beq.n	8007964 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007948:	f003 0320 	and.w	r3, r3, #32
 800794c:	2b00      	cmp	r3, #0
 800794e:	d009      	beq.n	8007964 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 82a6 	beq.w	8007ea6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	4798      	blx	r3
      }
      return;
 8007962:	e2a0      	b.n	8007ea6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007968:	2b00      	cmp	r3, #0
 800796a:	f000 8117 	beq.w	8007b9c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800796e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d106      	bne.n	8007988 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800797a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800797e:	4b85      	ldr	r3, [pc, #532]	; (8007b94 <HAL_UART_IRQHandler+0x298>)
 8007980:	4013      	ands	r3, r2
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 810a 	beq.w	8007b9c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800798c:	f003 0301 	and.w	r3, r3, #1
 8007990:	2b00      	cmp	r3, #0
 8007992:	d011      	beq.n	80079b8 <HAL_UART_IRQHandler+0xbc>
 8007994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00b      	beq.n	80079b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2201      	movs	r2, #1
 80079a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079ae:	f043 0201 	orr.w	r2, r3, #1
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d011      	beq.n	80079e8 <HAL_UART_IRQHandler+0xec>
 80079c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00b      	beq.n	80079e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2202      	movs	r2, #2
 80079d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079de:	f043 0204 	orr.w	r2, r3, #4
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d011      	beq.n	8007a18 <HAL_UART_IRQHandler+0x11c>
 80079f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00b      	beq.n	8007a18 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2204      	movs	r2, #4
 8007a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a0e:	f043 0202 	orr.w	r2, r3, #2
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a1c:	f003 0308 	and.w	r3, r3, #8
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d017      	beq.n	8007a54 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a28:	f003 0320 	and.w	r3, r3, #32
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d105      	bne.n	8007a3c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a34:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00b      	beq.n	8007a54 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2208      	movs	r2, #8
 8007a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a4a:	f043 0208 	orr.w	r2, r3, #8
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d012      	beq.n	8007a86 <HAL_UART_IRQHandler+0x18a>
 8007a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00c      	beq.n	8007a86 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a7c:	f043 0220 	orr.w	r2, r3, #32
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 820c 	beq.w	8007eaa <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a96:	f003 0320 	and.w	r3, r3, #32
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00d      	beq.n	8007aba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa2:	f003 0320 	and.w	r3, r3, #32
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d007      	beq.n	8007aba <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ac0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ace:	2b40      	cmp	r3, #64	; 0x40
 8007ad0:	d005      	beq.n	8007ade <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ad6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d04f      	beq.n	8007b7e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fe75 	bl	80087ce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aee:	2b40      	cmp	r3, #64	; 0x40
 8007af0:	d141      	bne.n	8007b76 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3308      	adds	r3, #8
 8007af8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b00:	e853 3f00 	ldrex	r3, [r3]
 8007b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3308      	adds	r3, #8
 8007b1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1d9      	bne.n	8007af2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d013      	beq.n	8007b6e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4a:	4a13      	ldr	r2, [pc, #76]	; (8007b98 <HAL_UART_IRQHandler+0x29c>)
 8007b4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fb fcf5 	bl	8003542 <HAL_DMA_Abort_IT>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d017      	beq.n	8007b8e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007b68:	4610      	mov	r0, r2
 8007b6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b6c:	e00f      	b.n	8007b8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f9b0 	bl	8007ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b74:	e00b      	b.n	8007b8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f9ac 	bl	8007ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b7c:	e007      	b.n	8007b8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f9a8 	bl	8007ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007b8c:	e18d      	b.n	8007eaa <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b8e:	bf00      	nop
    return;
 8007b90:	e18b      	b.n	8007eaa <HAL_UART_IRQHandler+0x5ae>
 8007b92:	bf00      	nop
 8007b94:	04000120 	.word	0x04000120
 8007b98:	08008895 	.word	0x08008895

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	f040 8146 	bne.w	8007e32 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007baa:	f003 0310 	and.w	r3, r3, #16
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 813f 	beq.w	8007e32 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb8:	f003 0310 	and.w	r3, r3, #16
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 8138 	beq.w	8007e32 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2210      	movs	r2, #16
 8007bc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd4:	2b40      	cmp	r3, #64	; 0x40
 8007bd6:	f040 80b4 	bne.w	8007d42 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007be6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 815f 	beq.w	8007eae <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	f080 8157 	bcs.w	8007eae <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0320 	and.w	r3, r3, #32
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f040 8085 	bne.w	8007d26 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c28:	e853 3f00 	ldrex	r3, [r3]
 8007c2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	461a      	mov	r2, r3
 8007c42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c4a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c56:	e841 2300 	strex	r3, r2, [r1]
 8007c5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1da      	bne.n	8007c1c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3308      	adds	r3, #8
 8007c6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c70:	e853 3f00 	ldrex	r3, [r3]
 8007c74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c78:	f023 0301 	bic.w	r3, r3, #1
 8007c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3308      	adds	r3, #8
 8007c86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c96:	e841 2300 	strex	r3, r2, [r1]
 8007c9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1e1      	bne.n	8007c66 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007caa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cac:	e853 3f00 	ldrex	r3, [r3]
 8007cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3308      	adds	r3, #8
 8007cc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007cc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007cc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ccc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007cce:	e841 2300 	strex	r3, r2, [r1]
 8007cd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007cd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1e3      	bne.n	8007ca2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cee:	e853 3f00 	ldrex	r3, [r3]
 8007cf2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cf6:	f023 0310 	bic.w	r3, r3, #16
 8007cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	461a      	mov	r2, r3
 8007d04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d08:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d0a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d10:	e841 2300 	strex	r3, r2, [r1]
 8007d14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1e4      	bne.n	8007ce6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fb fbd0 	bl	80034c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f8d4 	bl	8007ee8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d40:	e0b5      	b.n	8007eae <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f000 80a7 	beq.w	8007eb2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007d64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 80a2 	beq.w	8007eb2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d76:	e853 3f00 	ldrex	r3, [r3]
 8007d7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d90:	647b      	str	r3, [r7, #68]	; 0x44
 8007d92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e4      	bne.n	8007d6e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3308      	adds	r3, #8
 8007daa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	e853 3f00 	ldrex	r3, [r3]
 8007db2:	623b      	str	r3, [r7, #32]
   return(result);
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	f023 0301 	bic.w	r3, r3, #1
 8007dba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3308      	adds	r3, #8
 8007dc4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007dc8:	633a      	str	r2, [r7, #48]	; 0x30
 8007dca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dd0:	e841 2300 	strex	r3, r2, [r1]
 8007dd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1e3      	bne.n	8007da4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2220      	movs	r2, #32
 8007de0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	e853 3f00 	ldrex	r3, [r3]
 8007dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f023 0310 	bic.w	r3, r3, #16
 8007e02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e10:	61fb      	str	r3, [r7, #28]
 8007e12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e14:	69b9      	ldr	r1, [r7, #24]
 8007e16:	69fa      	ldr	r2, [r7, #28]
 8007e18:	e841 2300 	strex	r3, r2, [r1]
 8007e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1e4      	bne.n	8007dee <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e28:	4619      	mov	r1, r3
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f85c 	bl	8007ee8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e30:	e03f      	b.n	8007eb2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00e      	beq.n	8007e5c <HAL_UART_IRQHandler+0x560>
 8007e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d008      	beq.n	8007e5c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fd5d 	bl	8008914 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e5a:	e02d      	b.n	8007eb8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00e      	beq.n	8007e86 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d008      	beq.n	8007e86 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d01c      	beq.n	8007eb6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	4798      	blx	r3
    }
    return;
 8007e84:	e017      	b.n	8007eb6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d012      	beq.n	8007eb8 <HAL_UART_IRQHandler+0x5bc>
 8007e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00c      	beq.n	8007eb8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fd0e 	bl	80088c0 <UART_EndTransmit_IT>
    return;
 8007ea4:	e008      	b.n	8007eb8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007ea6:	bf00      	nop
 8007ea8:	e006      	b.n	8007eb8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007eaa:	bf00      	nop
 8007eac:	e004      	b.n	8007eb8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007eae:	bf00      	nop
 8007eb0:	e002      	b.n	8007eb8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007eb2:	bf00      	nop
 8007eb4:	e000      	b.n	8007eb8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007eb6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007eb8:	37e8      	adds	r7, #232	; 0xe8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop

08007ec0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f04:	b08a      	sub	sp, #40	; 0x28
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	689a      	ldr	r2, [r3, #8]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	4ba4      	ldr	r3, [pc, #656]	; (80081c0 <UART_SetConfig+0x2c0>)
 8007f30:	4013      	ands	r3, r2
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	6812      	ldr	r2, [r2, #0]
 8007f36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a99      	ldr	r2, [pc, #612]	; (80081c4 <UART_SetConfig+0x2c4>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d004      	beq.n	8007f6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f7c:	430a      	orrs	r2, r1
 8007f7e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a90      	ldr	r2, [pc, #576]	; (80081c8 <UART_SetConfig+0x2c8>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d126      	bne.n	8007fd8 <UART_SetConfig+0xd8>
 8007f8a:	4b90      	ldr	r3, [pc, #576]	; (80081cc <UART_SetConfig+0x2cc>)
 8007f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f90:	f003 0303 	and.w	r3, r3, #3
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d81b      	bhi.n	8007fd0 <UART_SetConfig+0xd0>
 8007f98:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <UART_SetConfig+0xa0>)
 8007f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9e:	bf00      	nop
 8007fa0:	08007fb1 	.word	0x08007fb1
 8007fa4:	08007fc1 	.word	0x08007fc1
 8007fa8:	08007fb9 	.word	0x08007fb9
 8007fac:	08007fc9 	.word	0x08007fc9
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fb6:	e116      	b.n	80081e6 <UART_SetConfig+0x2e6>
 8007fb8:	2302      	movs	r3, #2
 8007fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fbe:	e112      	b.n	80081e6 <UART_SetConfig+0x2e6>
 8007fc0:	2304      	movs	r3, #4
 8007fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fc6:	e10e      	b.n	80081e6 <UART_SetConfig+0x2e6>
 8007fc8:	2308      	movs	r3, #8
 8007fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fce:	e10a      	b.n	80081e6 <UART_SetConfig+0x2e6>
 8007fd0:	2310      	movs	r3, #16
 8007fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fd6:	e106      	b.n	80081e6 <UART_SetConfig+0x2e6>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a7c      	ldr	r2, [pc, #496]	; (80081d0 <UART_SetConfig+0x2d0>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d138      	bne.n	8008054 <UART_SetConfig+0x154>
 8007fe2:	4b7a      	ldr	r3, [pc, #488]	; (80081cc <UART_SetConfig+0x2cc>)
 8007fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe8:	f003 030c 	and.w	r3, r3, #12
 8007fec:	2b0c      	cmp	r3, #12
 8007fee:	d82d      	bhi.n	800804c <UART_SetConfig+0x14c>
 8007ff0:	a201      	add	r2, pc, #4	; (adr r2, 8007ff8 <UART_SetConfig+0xf8>)
 8007ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff6:	bf00      	nop
 8007ff8:	0800802d 	.word	0x0800802d
 8007ffc:	0800804d 	.word	0x0800804d
 8008000:	0800804d 	.word	0x0800804d
 8008004:	0800804d 	.word	0x0800804d
 8008008:	0800803d 	.word	0x0800803d
 800800c:	0800804d 	.word	0x0800804d
 8008010:	0800804d 	.word	0x0800804d
 8008014:	0800804d 	.word	0x0800804d
 8008018:	08008035 	.word	0x08008035
 800801c:	0800804d 	.word	0x0800804d
 8008020:	0800804d 	.word	0x0800804d
 8008024:	0800804d 	.word	0x0800804d
 8008028:	08008045 	.word	0x08008045
 800802c:	2300      	movs	r3, #0
 800802e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008032:	e0d8      	b.n	80081e6 <UART_SetConfig+0x2e6>
 8008034:	2302      	movs	r3, #2
 8008036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800803a:	e0d4      	b.n	80081e6 <UART_SetConfig+0x2e6>
 800803c:	2304      	movs	r3, #4
 800803e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008042:	e0d0      	b.n	80081e6 <UART_SetConfig+0x2e6>
 8008044:	2308      	movs	r3, #8
 8008046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800804a:	e0cc      	b.n	80081e6 <UART_SetConfig+0x2e6>
 800804c:	2310      	movs	r3, #16
 800804e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008052:	e0c8      	b.n	80081e6 <UART_SetConfig+0x2e6>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a5e      	ldr	r2, [pc, #376]	; (80081d4 <UART_SetConfig+0x2d4>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d125      	bne.n	80080aa <UART_SetConfig+0x1aa>
 800805e:	4b5b      	ldr	r3, [pc, #364]	; (80081cc <UART_SetConfig+0x2cc>)
 8008060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008064:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008068:	2b30      	cmp	r3, #48	; 0x30
 800806a:	d016      	beq.n	800809a <UART_SetConfig+0x19a>
 800806c:	2b30      	cmp	r3, #48	; 0x30
 800806e:	d818      	bhi.n	80080a2 <UART_SetConfig+0x1a2>
 8008070:	2b20      	cmp	r3, #32
 8008072:	d00a      	beq.n	800808a <UART_SetConfig+0x18a>
 8008074:	2b20      	cmp	r3, #32
 8008076:	d814      	bhi.n	80080a2 <UART_SetConfig+0x1a2>
 8008078:	2b00      	cmp	r3, #0
 800807a:	d002      	beq.n	8008082 <UART_SetConfig+0x182>
 800807c:	2b10      	cmp	r3, #16
 800807e:	d008      	beq.n	8008092 <UART_SetConfig+0x192>
 8008080:	e00f      	b.n	80080a2 <UART_SetConfig+0x1a2>
 8008082:	2300      	movs	r3, #0
 8008084:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008088:	e0ad      	b.n	80081e6 <UART_SetConfig+0x2e6>
 800808a:	2302      	movs	r3, #2
 800808c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008090:	e0a9      	b.n	80081e6 <UART_SetConfig+0x2e6>
 8008092:	2304      	movs	r3, #4
 8008094:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008098:	e0a5      	b.n	80081e6 <UART_SetConfig+0x2e6>
 800809a:	2308      	movs	r3, #8
 800809c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080a0:	e0a1      	b.n	80081e6 <UART_SetConfig+0x2e6>
 80080a2:	2310      	movs	r3, #16
 80080a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080a8:	e09d      	b.n	80081e6 <UART_SetConfig+0x2e6>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a4a      	ldr	r2, [pc, #296]	; (80081d8 <UART_SetConfig+0x2d8>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d125      	bne.n	8008100 <UART_SetConfig+0x200>
 80080b4:	4b45      	ldr	r3, [pc, #276]	; (80081cc <UART_SetConfig+0x2cc>)
 80080b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80080be:	2bc0      	cmp	r3, #192	; 0xc0
 80080c0:	d016      	beq.n	80080f0 <UART_SetConfig+0x1f0>
 80080c2:	2bc0      	cmp	r3, #192	; 0xc0
 80080c4:	d818      	bhi.n	80080f8 <UART_SetConfig+0x1f8>
 80080c6:	2b80      	cmp	r3, #128	; 0x80
 80080c8:	d00a      	beq.n	80080e0 <UART_SetConfig+0x1e0>
 80080ca:	2b80      	cmp	r3, #128	; 0x80
 80080cc:	d814      	bhi.n	80080f8 <UART_SetConfig+0x1f8>
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d002      	beq.n	80080d8 <UART_SetConfig+0x1d8>
 80080d2:	2b40      	cmp	r3, #64	; 0x40
 80080d4:	d008      	beq.n	80080e8 <UART_SetConfig+0x1e8>
 80080d6:	e00f      	b.n	80080f8 <UART_SetConfig+0x1f8>
 80080d8:	2300      	movs	r3, #0
 80080da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080de:	e082      	b.n	80081e6 <UART_SetConfig+0x2e6>
 80080e0:	2302      	movs	r3, #2
 80080e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080e6:	e07e      	b.n	80081e6 <UART_SetConfig+0x2e6>
 80080e8:	2304      	movs	r3, #4
 80080ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080ee:	e07a      	b.n	80081e6 <UART_SetConfig+0x2e6>
 80080f0:	2308      	movs	r3, #8
 80080f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080f6:	e076      	b.n	80081e6 <UART_SetConfig+0x2e6>
 80080f8:	2310      	movs	r3, #16
 80080fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080fe:	e072      	b.n	80081e6 <UART_SetConfig+0x2e6>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a35      	ldr	r2, [pc, #212]	; (80081dc <UART_SetConfig+0x2dc>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d12a      	bne.n	8008160 <UART_SetConfig+0x260>
 800810a:	4b30      	ldr	r3, [pc, #192]	; (80081cc <UART_SetConfig+0x2cc>)
 800810c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008118:	d01a      	beq.n	8008150 <UART_SetConfig+0x250>
 800811a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800811e:	d81b      	bhi.n	8008158 <UART_SetConfig+0x258>
 8008120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008124:	d00c      	beq.n	8008140 <UART_SetConfig+0x240>
 8008126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800812a:	d815      	bhi.n	8008158 <UART_SetConfig+0x258>
 800812c:	2b00      	cmp	r3, #0
 800812e:	d003      	beq.n	8008138 <UART_SetConfig+0x238>
 8008130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008134:	d008      	beq.n	8008148 <UART_SetConfig+0x248>
 8008136:	e00f      	b.n	8008158 <UART_SetConfig+0x258>
 8008138:	2300      	movs	r3, #0
 800813a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800813e:	e052      	b.n	80081e6 <UART_SetConfig+0x2e6>
 8008140:	2302      	movs	r3, #2
 8008142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008146:	e04e      	b.n	80081e6 <UART_SetConfig+0x2e6>
 8008148:	2304      	movs	r3, #4
 800814a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800814e:	e04a      	b.n	80081e6 <UART_SetConfig+0x2e6>
 8008150:	2308      	movs	r3, #8
 8008152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008156:	e046      	b.n	80081e6 <UART_SetConfig+0x2e6>
 8008158:	2310      	movs	r3, #16
 800815a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800815e:	e042      	b.n	80081e6 <UART_SetConfig+0x2e6>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a17      	ldr	r2, [pc, #92]	; (80081c4 <UART_SetConfig+0x2c4>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d13a      	bne.n	80081e0 <UART_SetConfig+0x2e0>
 800816a:	4b18      	ldr	r3, [pc, #96]	; (80081cc <UART_SetConfig+0x2cc>)
 800816c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008170:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008174:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008178:	d01a      	beq.n	80081b0 <UART_SetConfig+0x2b0>
 800817a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800817e:	d81b      	bhi.n	80081b8 <UART_SetConfig+0x2b8>
 8008180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008184:	d00c      	beq.n	80081a0 <UART_SetConfig+0x2a0>
 8008186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800818a:	d815      	bhi.n	80081b8 <UART_SetConfig+0x2b8>
 800818c:	2b00      	cmp	r3, #0
 800818e:	d003      	beq.n	8008198 <UART_SetConfig+0x298>
 8008190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008194:	d008      	beq.n	80081a8 <UART_SetConfig+0x2a8>
 8008196:	e00f      	b.n	80081b8 <UART_SetConfig+0x2b8>
 8008198:	2300      	movs	r3, #0
 800819a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800819e:	e022      	b.n	80081e6 <UART_SetConfig+0x2e6>
 80081a0:	2302      	movs	r3, #2
 80081a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081a6:	e01e      	b.n	80081e6 <UART_SetConfig+0x2e6>
 80081a8:	2304      	movs	r3, #4
 80081aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081ae:	e01a      	b.n	80081e6 <UART_SetConfig+0x2e6>
 80081b0:	2308      	movs	r3, #8
 80081b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081b6:	e016      	b.n	80081e6 <UART_SetConfig+0x2e6>
 80081b8:	2310      	movs	r3, #16
 80081ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081be:	e012      	b.n	80081e6 <UART_SetConfig+0x2e6>
 80081c0:	efff69f3 	.word	0xefff69f3
 80081c4:	40008000 	.word	0x40008000
 80081c8:	40013800 	.word	0x40013800
 80081cc:	40021000 	.word	0x40021000
 80081d0:	40004400 	.word	0x40004400
 80081d4:	40004800 	.word	0x40004800
 80081d8:	40004c00 	.word	0x40004c00
 80081dc:	40005000 	.word	0x40005000
 80081e0:	2310      	movs	r3, #16
 80081e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a9f      	ldr	r2, [pc, #636]	; (8008468 <UART_SetConfig+0x568>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d17a      	bne.n	80082e6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081f4:	2b08      	cmp	r3, #8
 80081f6:	d824      	bhi.n	8008242 <UART_SetConfig+0x342>
 80081f8:	a201      	add	r2, pc, #4	; (adr r2, 8008200 <UART_SetConfig+0x300>)
 80081fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fe:	bf00      	nop
 8008200:	08008225 	.word	0x08008225
 8008204:	08008243 	.word	0x08008243
 8008208:	0800822d 	.word	0x0800822d
 800820c:	08008243 	.word	0x08008243
 8008210:	08008233 	.word	0x08008233
 8008214:	08008243 	.word	0x08008243
 8008218:	08008243 	.word	0x08008243
 800821c:	08008243 	.word	0x08008243
 8008220:	0800823b 	.word	0x0800823b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008224:	f7fd f9b6 	bl	8005594 <HAL_RCC_GetPCLK1Freq>
 8008228:	61f8      	str	r0, [r7, #28]
        break;
 800822a:	e010      	b.n	800824e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800822c:	4b8f      	ldr	r3, [pc, #572]	; (800846c <UART_SetConfig+0x56c>)
 800822e:	61fb      	str	r3, [r7, #28]
        break;
 8008230:	e00d      	b.n	800824e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008232:	f7fd f917 	bl	8005464 <HAL_RCC_GetSysClockFreq>
 8008236:	61f8      	str	r0, [r7, #28]
        break;
 8008238:	e009      	b.n	800824e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800823a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800823e:	61fb      	str	r3, [r7, #28]
        break;
 8008240:	e005      	b.n	800824e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008242:	2300      	movs	r3, #0
 8008244:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800824c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 80fb 	beq.w	800844c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	4613      	mov	r3, r2
 800825c:	005b      	lsls	r3, r3, #1
 800825e:	4413      	add	r3, r2
 8008260:	69fa      	ldr	r2, [r7, #28]
 8008262:	429a      	cmp	r2, r3
 8008264:	d305      	bcc.n	8008272 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800826c:	69fa      	ldr	r2, [r7, #28]
 800826e:	429a      	cmp	r2, r3
 8008270:	d903      	bls.n	800827a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008278:	e0e8      	b.n	800844c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	2200      	movs	r2, #0
 800827e:	461c      	mov	r4, r3
 8008280:	4615      	mov	r5, r2
 8008282:	f04f 0200 	mov.w	r2, #0
 8008286:	f04f 0300 	mov.w	r3, #0
 800828a:	022b      	lsls	r3, r5, #8
 800828c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008290:	0222      	lsls	r2, r4, #8
 8008292:	68f9      	ldr	r1, [r7, #12]
 8008294:	6849      	ldr	r1, [r1, #4]
 8008296:	0849      	lsrs	r1, r1, #1
 8008298:	2000      	movs	r0, #0
 800829a:	4688      	mov	r8, r1
 800829c:	4681      	mov	r9, r0
 800829e:	eb12 0a08 	adds.w	sl, r2, r8
 80082a2:	eb43 0b09 	adc.w	fp, r3, r9
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	603b      	str	r3, [r7, #0]
 80082ae:	607a      	str	r2, [r7, #4]
 80082b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082b4:	4650      	mov	r0, sl
 80082b6:	4659      	mov	r1, fp
 80082b8:	f7f8 fc86 	bl	8000bc8 <__aeabi_uldivmod>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	4613      	mov	r3, r2
 80082c2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082ca:	d308      	bcc.n	80082de <UART_SetConfig+0x3de>
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082d2:	d204      	bcs.n	80082de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	60da      	str	r2, [r3, #12]
 80082dc:	e0b6      	b.n	800844c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80082e4:	e0b2      	b.n	800844c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082ee:	d15e      	bne.n	80083ae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80082f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082f4:	2b08      	cmp	r3, #8
 80082f6:	d828      	bhi.n	800834a <UART_SetConfig+0x44a>
 80082f8:	a201      	add	r2, pc, #4	; (adr r2, 8008300 <UART_SetConfig+0x400>)
 80082fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fe:	bf00      	nop
 8008300:	08008325 	.word	0x08008325
 8008304:	0800832d 	.word	0x0800832d
 8008308:	08008335 	.word	0x08008335
 800830c:	0800834b 	.word	0x0800834b
 8008310:	0800833b 	.word	0x0800833b
 8008314:	0800834b 	.word	0x0800834b
 8008318:	0800834b 	.word	0x0800834b
 800831c:	0800834b 	.word	0x0800834b
 8008320:	08008343 	.word	0x08008343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008324:	f7fd f936 	bl	8005594 <HAL_RCC_GetPCLK1Freq>
 8008328:	61f8      	str	r0, [r7, #28]
        break;
 800832a:	e014      	b.n	8008356 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800832c:	f7fd f948 	bl	80055c0 <HAL_RCC_GetPCLK2Freq>
 8008330:	61f8      	str	r0, [r7, #28]
        break;
 8008332:	e010      	b.n	8008356 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008334:	4b4d      	ldr	r3, [pc, #308]	; (800846c <UART_SetConfig+0x56c>)
 8008336:	61fb      	str	r3, [r7, #28]
        break;
 8008338:	e00d      	b.n	8008356 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800833a:	f7fd f893 	bl	8005464 <HAL_RCC_GetSysClockFreq>
 800833e:	61f8      	str	r0, [r7, #28]
        break;
 8008340:	e009      	b.n	8008356 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008346:	61fb      	str	r3, [r7, #28]
        break;
 8008348:	e005      	b.n	8008356 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008354:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d077      	beq.n	800844c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	005a      	lsls	r2, r3, #1
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	085b      	lsrs	r3, r3, #1
 8008366:	441a      	add	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008370:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	2b0f      	cmp	r3, #15
 8008376:	d916      	bls.n	80083a6 <UART_SetConfig+0x4a6>
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800837e:	d212      	bcs.n	80083a6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	b29b      	uxth	r3, r3
 8008384:	f023 030f 	bic.w	r3, r3, #15
 8008388:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	085b      	lsrs	r3, r3, #1
 800838e:	b29b      	uxth	r3, r3
 8008390:	f003 0307 	and.w	r3, r3, #7
 8008394:	b29a      	uxth	r2, r3
 8008396:	8afb      	ldrh	r3, [r7, #22]
 8008398:	4313      	orrs	r3, r2
 800839a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	8afa      	ldrh	r2, [r7, #22]
 80083a2:	60da      	str	r2, [r3, #12]
 80083a4:	e052      	b.n	800844c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80083ac:	e04e      	b.n	800844c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083b2:	2b08      	cmp	r3, #8
 80083b4:	d827      	bhi.n	8008406 <UART_SetConfig+0x506>
 80083b6:	a201      	add	r2, pc, #4	; (adr r2, 80083bc <UART_SetConfig+0x4bc>)
 80083b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083bc:	080083e1 	.word	0x080083e1
 80083c0:	080083e9 	.word	0x080083e9
 80083c4:	080083f1 	.word	0x080083f1
 80083c8:	08008407 	.word	0x08008407
 80083cc:	080083f7 	.word	0x080083f7
 80083d0:	08008407 	.word	0x08008407
 80083d4:	08008407 	.word	0x08008407
 80083d8:	08008407 	.word	0x08008407
 80083dc:	080083ff 	.word	0x080083ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083e0:	f7fd f8d8 	bl	8005594 <HAL_RCC_GetPCLK1Freq>
 80083e4:	61f8      	str	r0, [r7, #28]
        break;
 80083e6:	e014      	b.n	8008412 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083e8:	f7fd f8ea 	bl	80055c0 <HAL_RCC_GetPCLK2Freq>
 80083ec:	61f8      	str	r0, [r7, #28]
        break;
 80083ee:	e010      	b.n	8008412 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083f0:	4b1e      	ldr	r3, [pc, #120]	; (800846c <UART_SetConfig+0x56c>)
 80083f2:	61fb      	str	r3, [r7, #28]
        break;
 80083f4:	e00d      	b.n	8008412 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083f6:	f7fd f835 	bl	8005464 <HAL_RCC_GetSysClockFreq>
 80083fa:	61f8      	str	r0, [r7, #28]
        break;
 80083fc:	e009      	b.n	8008412 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008402:	61fb      	str	r3, [r7, #28]
        break;
 8008404:	e005      	b.n	8008412 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008410:	bf00      	nop
    }

    if (pclk != 0U)
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d019      	beq.n	800844c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	085a      	lsrs	r2, r3, #1
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	441a      	add	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	fbb2 f3f3 	udiv	r3, r2, r3
 800842a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	2b0f      	cmp	r3, #15
 8008430:	d909      	bls.n	8008446 <UART_SetConfig+0x546>
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008438:	d205      	bcs.n	8008446 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	b29a      	uxth	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	60da      	str	r2, [r3, #12]
 8008444:	e002      	b.n	800844c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008458:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800845c:	4618      	mov	r0, r3
 800845e:	3728      	adds	r7, #40	; 0x28
 8008460:	46bd      	mov	sp, r7
 8008462:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008466:	bf00      	nop
 8008468:	40008000 	.word	0x40008000
 800846c:	00f42400 	.word	0x00f42400

08008470 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00a      	beq.n	800849a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	430a      	orrs	r2, r1
 8008498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	f003 0302 	and.w	r3, r3, #2
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00a      	beq.n	80084bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	430a      	orrs	r2, r1
 80084ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	f003 0304 	and.w	r3, r3, #4
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00a      	beq.n	80084de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	430a      	orrs	r2, r1
 80084dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e2:	f003 0308 	and.w	r3, r3, #8
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00a      	beq.n	8008500 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	430a      	orrs	r2, r1
 80084fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	f003 0310 	and.w	r3, r3, #16
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00a      	beq.n	8008522 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	430a      	orrs	r2, r1
 8008520:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008526:	f003 0320 	and.w	r3, r3, #32
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00a      	beq.n	8008544 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	430a      	orrs	r2, r1
 8008542:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854c:	2b00      	cmp	r3, #0
 800854e:	d01a      	beq.n	8008586 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800856e:	d10a      	bne.n	8008586 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	430a      	orrs	r2, r1
 8008584:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00a      	beq.n	80085a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	430a      	orrs	r2, r1
 80085a6:	605a      	str	r2, [r3, #4]
  }
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af02      	add	r7, sp, #8
 80085ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085c4:	f7fa fe30 	bl	8003228 <HAL_GetTick>
 80085c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0308 	and.w	r3, r3, #8
 80085d4:	2b08      	cmp	r3, #8
 80085d6:	d10e      	bne.n	80085f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f82d 	bl	8008646 <UART_WaitOnFlagUntilTimeout>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e023      	b.n	800863e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0304 	and.w	r3, r3, #4
 8008600:	2b04      	cmp	r3, #4
 8008602:	d10e      	bne.n	8008622 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f817 	bl	8008646 <UART_WaitOnFlagUntilTimeout>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e00d      	b.n	800863e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2220      	movs	r2, #32
 8008626:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2220      	movs	r2, #32
 800862c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b09c      	sub	sp, #112	; 0x70
 800864a:	af00      	add	r7, sp, #0
 800864c:	60f8      	str	r0, [r7, #12]
 800864e:	60b9      	str	r1, [r7, #8]
 8008650:	603b      	str	r3, [r7, #0]
 8008652:	4613      	mov	r3, r2
 8008654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008656:	e0a5      	b.n	80087a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800865a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865e:	f000 80a1 	beq.w	80087a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008662:	f7fa fde1 	bl	8003228 <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800866e:	429a      	cmp	r2, r3
 8008670:	d302      	bcc.n	8008678 <UART_WaitOnFlagUntilTimeout+0x32>
 8008672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008674:	2b00      	cmp	r3, #0
 8008676:	d13e      	bne.n	80086f6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008680:	e853 3f00 	ldrex	r3, [r3]
 8008684:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008688:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800868c:	667b      	str	r3, [r7, #100]	; 0x64
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008696:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008698:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800869c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800869e:	e841 2300 	strex	r3, r2, [r1]
 80086a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80086a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1e6      	bne.n	8008678 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3308      	adds	r3, #8
 80086b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b4:	e853 3f00 	ldrex	r3, [r3]
 80086b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086bc:	f023 0301 	bic.w	r3, r3, #1
 80086c0:	663b      	str	r3, [r7, #96]	; 0x60
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	3308      	adds	r3, #8
 80086c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80086cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086d2:	e841 2300 	strex	r3, r2, [r1]
 80086d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1e5      	bne.n	80086aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2220      	movs	r2, #32
 80086e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2220      	movs	r2, #32
 80086e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e067      	b.n	80087c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0304 	and.w	r3, r3, #4
 8008700:	2b00      	cmp	r3, #0
 8008702:	d04f      	beq.n	80087a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	69db      	ldr	r3, [r3, #28]
 800870a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800870e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008712:	d147      	bne.n	80087a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800871c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008726:	e853 3f00 	ldrex	r3, [r3]
 800872a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008732:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	461a      	mov	r2, r3
 800873a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800873c:	637b      	str	r3, [r7, #52]	; 0x34
 800873e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008740:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008744:	e841 2300 	strex	r3, r2, [r1]
 8008748:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800874a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1e6      	bne.n	800871e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	3308      	adds	r3, #8
 8008756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	e853 3f00 	ldrex	r3, [r3]
 800875e:	613b      	str	r3, [r7, #16]
   return(result);
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	f023 0301 	bic.w	r3, r3, #1
 8008766:	66bb      	str	r3, [r7, #104]	; 0x68
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	3308      	adds	r3, #8
 800876e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008770:	623a      	str	r2, [r7, #32]
 8008772:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008774:	69f9      	ldr	r1, [r7, #28]
 8008776:	6a3a      	ldr	r2, [r7, #32]
 8008778:	e841 2300 	strex	r3, r2, [r1]
 800877c:	61bb      	str	r3, [r7, #24]
   return(result);
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1e5      	bne.n	8008750 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2220      	movs	r2, #32
 8008788:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2220      	movs	r2, #32
 800878e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2220      	movs	r2, #32
 8008794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e010      	b.n	80087c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	69da      	ldr	r2, [r3, #28]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	4013      	ands	r3, r2
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	bf0c      	ite	eq
 80087b4:	2301      	moveq	r3, #1
 80087b6:	2300      	movne	r3, #0
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	461a      	mov	r2, r3
 80087bc:	79fb      	ldrb	r3, [r7, #7]
 80087be:	429a      	cmp	r2, r3
 80087c0:	f43f af4a 	beq.w	8008658 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3770      	adds	r7, #112	; 0x70
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b095      	sub	sp, #84	; 0x54
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087de:	e853 3f00 	ldrex	r3, [r3]
 80087e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	461a      	mov	r2, r3
 80087f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087f4:	643b      	str	r3, [r7, #64]	; 0x40
 80087f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087fc:	e841 2300 	strex	r3, r2, [r1]
 8008800:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1e6      	bne.n	80087d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3308      	adds	r3, #8
 800880e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	e853 3f00 	ldrex	r3, [r3]
 8008816:	61fb      	str	r3, [r7, #28]
   return(result);
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	f023 0301 	bic.w	r3, r3, #1
 800881e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	3308      	adds	r3, #8
 8008826:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008828:	62fa      	str	r2, [r7, #44]	; 0x2c
 800882a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800882e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008830:	e841 2300 	strex	r3, r2, [r1]
 8008834:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1e5      	bne.n	8008808 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008840:	2b01      	cmp	r3, #1
 8008842:	d118      	bne.n	8008876 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	e853 3f00 	ldrex	r3, [r3]
 8008850:	60bb      	str	r3, [r7, #8]
   return(result);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	f023 0310 	bic.w	r3, r3, #16
 8008858:	647b      	str	r3, [r7, #68]	; 0x44
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008862:	61bb      	str	r3, [r7, #24]
 8008864:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008866:	6979      	ldr	r1, [r7, #20]
 8008868:	69ba      	ldr	r2, [r7, #24]
 800886a:	e841 2300 	strex	r3, r2, [r1]
 800886e:	613b      	str	r3, [r7, #16]
   return(result);
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e6      	bne.n	8008844 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2220      	movs	r2, #32
 800887a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008888:	bf00      	nop
 800888a:	3754      	adds	r7, #84	; 0x54
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f7ff fb0e 	bl	8007ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088b8:	bf00      	nop
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	e853 3f00 	ldrex	r3, [r3]
 80088d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088dc:	61fb      	str	r3, [r7, #28]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	61bb      	str	r3, [r7, #24]
 80088e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ea:	6979      	ldr	r1, [r7, #20]
 80088ec:	69ba      	ldr	r2, [r7, #24]
 80088ee:	e841 2300 	strex	r3, r2, [r1]
 80088f2:	613b      	str	r3, [r7, #16]
   return(result);
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1e6      	bne.n	80088c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2220      	movs	r2, #32
 80088fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7ff fada 	bl	8007ec0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800890c:	bf00      	nop
 800890e:	3720      	adds	r7, #32
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <__NVIC_SetPriority>:
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	4603      	mov	r3, r0
 8008930:	6039      	str	r1, [r7, #0]
 8008932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008938:	2b00      	cmp	r3, #0
 800893a:	db0a      	blt.n	8008952 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	b2da      	uxtb	r2, r3
 8008940:	490c      	ldr	r1, [pc, #48]	; (8008974 <__NVIC_SetPriority+0x4c>)
 8008942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008946:	0112      	lsls	r2, r2, #4
 8008948:	b2d2      	uxtb	r2, r2
 800894a:	440b      	add	r3, r1
 800894c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008950:	e00a      	b.n	8008968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	b2da      	uxtb	r2, r3
 8008956:	4908      	ldr	r1, [pc, #32]	; (8008978 <__NVIC_SetPriority+0x50>)
 8008958:	79fb      	ldrb	r3, [r7, #7]
 800895a:	f003 030f 	and.w	r3, r3, #15
 800895e:	3b04      	subs	r3, #4
 8008960:	0112      	lsls	r2, r2, #4
 8008962:	b2d2      	uxtb	r2, r2
 8008964:	440b      	add	r3, r1
 8008966:	761a      	strb	r2, [r3, #24]
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	e000e100 	.word	0xe000e100
 8008978:	e000ed00 	.word	0xe000ed00

0800897c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800897c:	b580      	push	{r7, lr}
 800897e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008980:	2100      	movs	r1, #0
 8008982:	f06f 0004 	mvn.w	r0, #4
 8008986:	f7ff ffcf 	bl	8008928 <__NVIC_SetPriority>
#endif
}
 800898a:	bf00      	nop
 800898c:	bd80      	pop	{r7, pc}
	...

08008990 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008996:	f3ef 8305 	mrs	r3, IPSR
 800899a:	603b      	str	r3, [r7, #0]
  return(result);
 800899c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d003      	beq.n	80089aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80089a2:	f06f 0305 	mvn.w	r3, #5
 80089a6:	607b      	str	r3, [r7, #4]
 80089a8:	e00c      	b.n	80089c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80089aa:	4b0a      	ldr	r3, [pc, #40]	; (80089d4 <osKernelInitialize+0x44>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d105      	bne.n	80089be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80089b2:	4b08      	ldr	r3, [pc, #32]	; (80089d4 <osKernelInitialize+0x44>)
 80089b4:	2201      	movs	r2, #1
 80089b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	607b      	str	r3, [r7, #4]
 80089bc:	e002      	b.n	80089c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80089be:	f04f 33ff 	mov.w	r3, #4294967295
 80089c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80089c4:	687b      	ldr	r3, [r7, #4]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	2000053c 	.word	0x2000053c

080089d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089de:	f3ef 8305 	mrs	r3, IPSR
 80089e2:	603b      	str	r3, [r7, #0]
  return(result);
 80089e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80089ea:	f06f 0305 	mvn.w	r3, #5
 80089ee:	607b      	str	r3, [r7, #4]
 80089f0:	e010      	b.n	8008a14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80089f2:	4b0b      	ldr	r3, [pc, #44]	; (8008a20 <osKernelStart+0x48>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d109      	bne.n	8008a0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80089fa:	f7ff ffbf 	bl	800897c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80089fe:	4b08      	ldr	r3, [pc, #32]	; (8008a20 <osKernelStart+0x48>)
 8008a00:	2202      	movs	r2, #2
 8008a02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008a04:	f001 f866 	bl	8009ad4 <vTaskStartScheduler>
      stat = osOK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	607b      	str	r3, [r7, #4]
 8008a0c:	e002      	b.n	8008a14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008a14:	687b      	ldr	r3, [r7, #4]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	2000053c 	.word	0x2000053c

08008a24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b08e      	sub	sp, #56	; 0x38
 8008a28:	af04      	add	r7, sp, #16
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008a30:	2300      	movs	r3, #0
 8008a32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a34:	f3ef 8305 	mrs	r3, IPSR
 8008a38:	617b      	str	r3, [r7, #20]
  return(result);
 8008a3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d17e      	bne.n	8008b3e <osThreadNew+0x11a>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d07b      	beq.n	8008b3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008a46:	2380      	movs	r3, #128	; 0x80
 8008a48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008a4a:	2318      	movs	r3, #24
 8008a4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008a52:	f04f 33ff 	mov.w	r3, #4294967295
 8008a56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d045      	beq.n	8008aea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d002      	beq.n	8008a6c <osThreadNew+0x48>
        name = attr->name;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d002      	beq.n	8008a7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d008      	beq.n	8008a92 <osThreadNew+0x6e>
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	2b38      	cmp	r3, #56	; 0x38
 8008a84:	d805      	bhi.n	8008a92 <osThreadNew+0x6e>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <osThreadNew+0x72>
        return (NULL);
 8008a92:	2300      	movs	r3, #0
 8008a94:	e054      	b.n	8008b40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d003      	beq.n	8008aa6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	089b      	lsrs	r3, r3, #2
 8008aa4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00e      	beq.n	8008acc <osThreadNew+0xa8>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	2b5b      	cmp	r3, #91	; 0x5b
 8008ab4:	d90a      	bls.n	8008acc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d006      	beq.n	8008acc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <osThreadNew+0xa8>
        mem = 1;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	61bb      	str	r3, [r7, #24]
 8008aca:	e010      	b.n	8008aee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10c      	bne.n	8008aee <osThreadNew+0xca>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d108      	bne.n	8008aee <osThreadNew+0xca>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d104      	bne.n	8008aee <osThreadNew+0xca>
          mem = 0;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	61bb      	str	r3, [r7, #24]
 8008ae8:	e001      	b.n	8008aee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008aea:	2300      	movs	r3, #0
 8008aec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d110      	bne.n	8008b16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008afc:	9202      	str	r2, [sp, #8]
 8008afe:	9301      	str	r3, [sp, #4]
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	6a3a      	ldr	r2, [r7, #32]
 8008b08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f000 fe0c 	bl	8009728 <xTaskCreateStatic>
 8008b10:	4603      	mov	r3, r0
 8008b12:	613b      	str	r3, [r7, #16]
 8008b14:	e013      	b.n	8008b3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d110      	bne.n	8008b3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	f107 0310 	add.w	r3, r7, #16
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 fe57 	bl	80097e2 <xTaskCreate>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d001      	beq.n	8008b3e <osThreadNew+0x11a>
            hTask = NULL;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b3e:	693b      	ldr	r3, [r7, #16]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3728      	adds	r7, #40	; 0x28
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b50:	f3ef 8305 	mrs	r3, IPSR
 8008b54:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d003      	beq.n	8008b64 <osDelay+0x1c>
    stat = osErrorISR;
 8008b5c:	f06f 0305 	mvn.w	r3, #5
 8008b60:	60fb      	str	r3, [r7, #12]
 8008b62:	e007      	b.n	8008b74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d002      	beq.n	8008b74 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 ff7c 	bl	8009a6c <vTaskDelay>
    }
  }

  return (stat);
 8008b74:	68fb      	ldr	r3, [r7, #12]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
	...

08008b80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4a07      	ldr	r2, [pc, #28]	; (8008bac <vApplicationGetIdleTaskMemory+0x2c>)
 8008b90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	4a06      	ldr	r2, [pc, #24]	; (8008bb0 <vApplicationGetIdleTaskMemory+0x30>)
 8008b96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2280      	movs	r2, #128	; 0x80
 8008b9c:	601a      	str	r2, [r3, #0]
}
 8008b9e:	bf00      	nop
 8008ba0:	3714      	adds	r7, #20
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	20000540 	.word	0x20000540
 8008bb0:	2000059c 	.word	0x2000059c

08008bb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	4a07      	ldr	r2, [pc, #28]	; (8008be0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008bc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	4a06      	ldr	r2, [pc, #24]	; (8008be4 <vApplicationGetTimerTaskMemory+0x30>)
 8008bca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bd2:	601a      	str	r2, [r3, #0]
}
 8008bd4:	bf00      	nop
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	2000079c 	.word	0x2000079c
 8008be4:	200007f8 	.word	0x200007f8

08008be8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f103 0208 	add.w	r2, r3, #8
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8008c00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f103 0208 	add.w	r2, r3, #8
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f103 0208 	add.w	r2, r3, #8
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c36:	bf00      	nop
 8008c38:	370c      	adds	r7, #12
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c42:	b480      	push	{r7}
 8008c44:	b085      	sub	sp, #20
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	683a      	ldr	r2, [r7, #0]
 8008c66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	683a      	ldr	r2, [r7, #0]
 8008c6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	1c5a      	adds	r2, r3, #1
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	601a      	str	r2, [r3, #0]
}
 8008c7e:	bf00      	nop
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b085      	sub	sp, #20
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca0:	d103      	bne.n	8008caa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	60fb      	str	r3, [r7, #12]
 8008ca8:	e00c      	b.n	8008cc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	3308      	adds	r3, #8
 8008cae:	60fb      	str	r3, [r7, #12]
 8008cb0:	e002      	b.n	8008cb8 <vListInsert+0x2e>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d2f6      	bcs.n	8008cb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	685a      	ldr	r2, [r3, #4]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	683a      	ldr	r2, [r7, #0]
 8008cde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	1c5a      	adds	r2, r3, #1
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	601a      	str	r2, [r3, #0]
}
 8008cf0:	bf00      	nop
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6892      	ldr	r2, [r2, #8]
 8008d12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	6852      	ldr	r2, [r2, #4]
 8008d1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d103      	bne.n	8008d30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	689a      	ldr	r2, [r3, #8]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	1e5a      	subs	r2, r3, #1
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3714      	adds	r7, #20
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10a      	bne.n	8008d7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008d76:	bf00      	nop
 8008d78:	e7fe      	b.n	8008d78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008d7a:	f002 f84b 	bl	800ae14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d86:	68f9      	ldr	r1, [r7, #12]
 8008d88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d8a:	fb01 f303 	mul.w	r3, r1, r3
 8008d8e:	441a      	add	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008daa:	3b01      	subs	r3, #1
 8008dac:	68f9      	ldr	r1, [r7, #12]
 8008dae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008db0:	fb01 f303 	mul.w	r3, r1, r3
 8008db4:	441a      	add	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	22ff      	movs	r2, #255	; 0xff
 8008dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	22ff      	movs	r2, #255	; 0xff
 8008dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d114      	bne.n	8008dfa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d01a      	beq.n	8008e0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	3310      	adds	r3, #16
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f001 f903 	bl	8009fe8 <xTaskRemoveFromEventList>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d012      	beq.n	8008e0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008de8:	4b0c      	ldr	r3, [pc, #48]	; (8008e1c <xQueueGenericReset+0xcc>)
 8008dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dee:	601a      	str	r2, [r3, #0]
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	e009      	b.n	8008e0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	3310      	adds	r3, #16
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7ff fef2 	bl	8008be8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	3324      	adds	r3, #36	; 0x24
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7ff feed 	bl	8008be8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e0e:	f002 f831 	bl	800ae74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e12:	2301      	movs	r3, #1
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	e000ed04 	.word	0xe000ed04

08008e20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08e      	sub	sp, #56	; 0x38
 8008e24:	af02      	add	r7, sp, #8
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
 8008e2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10a      	bne.n	8008e4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e46:	bf00      	nop
 8008e48:	e7fe      	b.n	8008e48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10a      	bne.n	8008e66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e62:	bf00      	nop
 8008e64:	e7fe      	b.n	8008e64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d002      	beq.n	8008e72 <xQueueGenericCreateStatic+0x52>
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <xQueueGenericCreateStatic+0x56>
 8008e72:	2301      	movs	r3, #1
 8008e74:	e000      	b.n	8008e78 <xQueueGenericCreateStatic+0x58>
 8008e76:	2300      	movs	r3, #0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10a      	bne.n	8008e92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	623b      	str	r3, [r7, #32]
}
 8008e8e:	bf00      	nop
 8008e90:	e7fe      	b.n	8008e90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d102      	bne.n	8008e9e <xQueueGenericCreateStatic+0x7e>
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <xQueueGenericCreateStatic+0x82>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e000      	b.n	8008ea4 <xQueueGenericCreateStatic+0x84>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10a      	bne.n	8008ebe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	61fb      	str	r3, [r7, #28]
}
 8008eba:	bf00      	nop
 8008ebc:	e7fe      	b.n	8008ebc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008ebe:	2350      	movs	r3, #80	; 0x50
 8008ec0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	2b50      	cmp	r3, #80	; 0x50
 8008ec6:	d00a      	beq.n	8008ede <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ecc:	f383 8811 	msr	BASEPRI, r3
 8008ed0:	f3bf 8f6f 	isb	sy
 8008ed4:	f3bf 8f4f 	dsb	sy
 8008ed8:	61bb      	str	r3, [r7, #24]
}
 8008eda:	bf00      	nop
 8008edc:	e7fe      	b.n	8008edc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ede:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00d      	beq.n	8008f06 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ef2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	4613      	mov	r3, r2
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	68b9      	ldr	r1, [r7, #8]
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f000 f805 	bl	8008f10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3730      	adds	r7, #48	; 0x30
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
 8008f1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d103      	bne.n	8008f2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	69ba      	ldr	r2, [r7, #24]
 8008f28:	601a      	str	r2, [r3, #0]
 8008f2a:	e002      	b.n	8008f32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f3e:	2101      	movs	r1, #1
 8008f40:	69b8      	ldr	r0, [r7, #24]
 8008f42:	f7ff ff05 	bl	8008d50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	78fa      	ldrb	r2, [r7, #3]
 8008f4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f4e:	bf00      	nop
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
	...

08008f58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b08e      	sub	sp, #56	; 0x38
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
 8008f64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f66:	2300      	movs	r3, #0
 8008f68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10a      	bne.n	8008f8a <xQueueGenericSend+0x32>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f86:	bf00      	nop
 8008f88:	e7fe      	b.n	8008f88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d103      	bne.n	8008f98 <xQueueGenericSend+0x40>
 8008f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <xQueueGenericSend+0x44>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e000      	b.n	8008f9e <xQueueGenericSend+0x46>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10a      	bne.n	8008fb8 <xQueueGenericSend+0x60>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fb4:	bf00      	nop
 8008fb6:	e7fe      	b.n	8008fb6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d103      	bne.n	8008fc6 <xQueueGenericSend+0x6e>
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d101      	bne.n	8008fca <xQueueGenericSend+0x72>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e000      	b.n	8008fcc <xQueueGenericSend+0x74>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10a      	bne.n	8008fe6 <xQueueGenericSend+0x8e>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	623b      	str	r3, [r7, #32]
}
 8008fe2:	bf00      	nop
 8008fe4:	e7fe      	b.n	8008fe4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fe6:	f001 f9bd 	bl	800a364 <xTaskGetSchedulerState>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d102      	bne.n	8008ff6 <xQueueGenericSend+0x9e>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <xQueueGenericSend+0xa2>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e000      	b.n	8008ffc <xQueueGenericSend+0xa4>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10a      	bne.n	8009016 <xQueueGenericSend+0xbe>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	61fb      	str	r3, [r7, #28]
}
 8009012:	bf00      	nop
 8009014:	e7fe      	b.n	8009014 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009016:	f001 fefd 	bl	800ae14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009022:	429a      	cmp	r2, r3
 8009024:	d302      	bcc.n	800902c <xQueueGenericSend+0xd4>
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2b02      	cmp	r3, #2
 800902a:	d129      	bne.n	8009080 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800902c:	683a      	ldr	r2, [r7, #0]
 800902e:	68b9      	ldr	r1, [r7, #8]
 8009030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009032:	f000 fa0b 	bl	800944c <prvCopyDataToQueue>
 8009036:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903c:	2b00      	cmp	r3, #0
 800903e:	d010      	beq.n	8009062 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009042:	3324      	adds	r3, #36	; 0x24
 8009044:	4618      	mov	r0, r3
 8009046:	f000 ffcf 	bl	8009fe8 <xTaskRemoveFromEventList>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d013      	beq.n	8009078 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009050:	4b3f      	ldr	r3, [pc, #252]	; (8009150 <xQueueGenericSend+0x1f8>)
 8009052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009056:	601a      	str	r2, [r3, #0]
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	e00a      	b.n	8009078 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009064:	2b00      	cmp	r3, #0
 8009066:	d007      	beq.n	8009078 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009068:	4b39      	ldr	r3, [pc, #228]	; (8009150 <xQueueGenericSend+0x1f8>)
 800906a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009078:	f001 fefc 	bl	800ae74 <vPortExitCritical>
				return pdPASS;
 800907c:	2301      	movs	r3, #1
 800907e:	e063      	b.n	8009148 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d103      	bne.n	800908e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009086:	f001 fef5 	bl	800ae74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800908a:	2300      	movs	r3, #0
 800908c:	e05c      	b.n	8009148 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800908e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009090:	2b00      	cmp	r3, #0
 8009092:	d106      	bne.n	80090a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009094:	f107 0314 	add.w	r3, r7, #20
 8009098:	4618      	mov	r0, r3
 800909a:	f001 f809 	bl	800a0b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800909e:	2301      	movs	r3, #1
 80090a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090a2:	f001 fee7 	bl	800ae74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090a6:	f000 fd7b 	bl	8009ba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090aa:	f001 feb3 	bl	800ae14 <vPortEnterCritical>
 80090ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090b4:	b25b      	sxtb	r3, r3
 80090b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ba:	d103      	bne.n	80090c4 <xQueueGenericSend+0x16c>
 80090bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090ca:	b25b      	sxtb	r3, r3
 80090cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d0:	d103      	bne.n	80090da <xQueueGenericSend+0x182>
 80090d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090da:	f001 fecb 	bl	800ae74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090de:	1d3a      	adds	r2, r7, #4
 80090e0:	f107 0314 	add.w	r3, r7, #20
 80090e4:	4611      	mov	r1, r2
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 fff8 	bl	800a0dc <xTaskCheckForTimeOut>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d124      	bne.n	800913c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80090f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090f4:	f000 faa2 	bl	800963c <prvIsQueueFull>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d018      	beq.n	8009130 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	3310      	adds	r3, #16
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	4611      	mov	r1, r2
 8009106:	4618      	mov	r0, r3
 8009108:	f000 ff1e 	bl	8009f48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800910c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800910e:	f000 fa2d 	bl	800956c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009112:	f000 fd53 	bl	8009bbc <xTaskResumeAll>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	f47f af7c 	bne.w	8009016 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800911e:	4b0c      	ldr	r3, [pc, #48]	; (8009150 <xQueueGenericSend+0x1f8>)
 8009120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009124:	601a      	str	r2, [r3, #0]
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	e772      	b.n	8009016 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009132:	f000 fa1b 	bl	800956c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009136:	f000 fd41 	bl	8009bbc <xTaskResumeAll>
 800913a:	e76c      	b.n	8009016 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800913c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800913e:	f000 fa15 	bl	800956c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009142:	f000 fd3b 	bl	8009bbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009146:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009148:	4618      	mov	r0, r3
 800914a:	3738      	adds	r7, #56	; 0x38
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	e000ed04 	.word	0xe000ed04

08009154 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b090      	sub	sp, #64	; 0x40
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
 8009160:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10a      	bne.n	8009182 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800917e:	bf00      	nop
 8009180:	e7fe      	b.n	8009180 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d103      	bne.n	8009190 <xQueueGenericSendFromISR+0x3c>
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918c:	2b00      	cmp	r3, #0
 800918e:	d101      	bne.n	8009194 <xQueueGenericSendFromISR+0x40>
 8009190:	2301      	movs	r3, #1
 8009192:	e000      	b.n	8009196 <xQueueGenericSendFromISR+0x42>
 8009194:	2300      	movs	r3, #0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10a      	bne.n	80091b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800919a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80091ac:	bf00      	nop
 80091ae:	e7fe      	b.n	80091ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d103      	bne.n	80091be <xQueueGenericSendFromISR+0x6a>
 80091b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d101      	bne.n	80091c2 <xQueueGenericSendFromISR+0x6e>
 80091be:	2301      	movs	r3, #1
 80091c0:	e000      	b.n	80091c4 <xQueueGenericSendFromISR+0x70>
 80091c2:	2300      	movs	r3, #0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10a      	bne.n	80091de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80091c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091cc:	f383 8811 	msr	BASEPRI, r3
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	623b      	str	r3, [r7, #32]
}
 80091da:	bf00      	nop
 80091dc:	e7fe      	b.n	80091dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091de:	f001 fefb 	bl	800afd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80091e2:	f3ef 8211 	mrs	r2, BASEPRI
 80091e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	61fa      	str	r2, [r7, #28]
 80091f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80091fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80091fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009206:	429a      	cmp	r2, r3
 8009208:	d302      	bcc.n	8009210 <xQueueGenericSendFromISR+0xbc>
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	2b02      	cmp	r3, #2
 800920e:	d12f      	bne.n	8009270 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800921a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	68b9      	ldr	r1, [r7, #8]
 8009224:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009226:	f000 f911 	bl	800944c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800922a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800922e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009232:	d112      	bne.n	800925a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009238:	2b00      	cmp	r3, #0
 800923a:	d016      	beq.n	800926a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800923c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923e:	3324      	adds	r3, #36	; 0x24
 8009240:	4618      	mov	r0, r3
 8009242:	f000 fed1 	bl	8009fe8 <xTaskRemoveFromEventList>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00e      	beq.n	800926a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00b      	beq.n	800926a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2201      	movs	r2, #1
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	e007      	b.n	800926a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800925a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800925e:	3301      	adds	r3, #1
 8009260:	b2db      	uxtb	r3, r3
 8009262:	b25a      	sxtb	r2, r3
 8009264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800926a:	2301      	movs	r3, #1
 800926c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800926e:	e001      	b.n	8009274 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009270:	2300      	movs	r3, #0
 8009272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009276:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800927e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009282:	4618      	mov	r0, r3
 8009284:	3740      	adds	r7, #64	; 0x40
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
	...

0800928c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08c      	sub	sp, #48	; 0x30
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009298:	2300      	movs	r3, #0
 800929a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80092a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10a      	bne.n	80092bc <xQueueReceive+0x30>
	__asm volatile
 80092a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	623b      	str	r3, [r7, #32]
}
 80092b8:	bf00      	nop
 80092ba:	e7fe      	b.n	80092ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d103      	bne.n	80092ca <xQueueReceive+0x3e>
 80092c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <xQueueReceive+0x42>
 80092ca:	2301      	movs	r3, #1
 80092cc:	e000      	b.n	80092d0 <xQueueReceive+0x44>
 80092ce:	2300      	movs	r3, #0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10a      	bne.n	80092ea <xQueueReceive+0x5e>
	__asm volatile
 80092d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	61fb      	str	r3, [r7, #28]
}
 80092e6:	bf00      	nop
 80092e8:	e7fe      	b.n	80092e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092ea:	f001 f83b 	bl	800a364 <xTaskGetSchedulerState>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d102      	bne.n	80092fa <xQueueReceive+0x6e>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <xQueueReceive+0x72>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e000      	b.n	8009300 <xQueueReceive+0x74>
 80092fe:	2300      	movs	r3, #0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10a      	bne.n	800931a <xQueueReceive+0x8e>
	__asm volatile
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	61bb      	str	r3, [r7, #24]
}
 8009316:	bf00      	nop
 8009318:	e7fe      	b.n	8009318 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800931a:	f001 fd7b 	bl	800ae14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800931e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009322:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	2b00      	cmp	r3, #0
 8009328:	d01f      	beq.n	800936a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800932a:	68b9      	ldr	r1, [r7, #8]
 800932c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800932e:	f000 f8f7 	bl	8009520 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009334:	1e5a      	subs	r2, r3, #1
 8009336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009338:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800933a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00f      	beq.n	8009362 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009344:	3310      	adds	r3, #16
 8009346:	4618      	mov	r0, r3
 8009348:	f000 fe4e 	bl	8009fe8 <xTaskRemoveFromEventList>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d007      	beq.n	8009362 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009352:	4b3d      	ldr	r3, [pc, #244]	; (8009448 <xQueueReceive+0x1bc>)
 8009354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009362:	f001 fd87 	bl	800ae74 <vPortExitCritical>
				return pdPASS;
 8009366:	2301      	movs	r3, #1
 8009368:	e069      	b.n	800943e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d103      	bne.n	8009378 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009370:	f001 fd80 	bl	800ae74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009374:	2300      	movs	r3, #0
 8009376:	e062      	b.n	800943e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937a:	2b00      	cmp	r3, #0
 800937c:	d106      	bne.n	800938c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800937e:	f107 0310 	add.w	r3, r7, #16
 8009382:	4618      	mov	r0, r3
 8009384:	f000 fe94 	bl	800a0b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009388:	2301      	movs	r3, #1
 800938a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800938c:	f001 fd72 	bl	800ae74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009390:	f000 fc06 	bl	8009ba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009394:	f001 fd3e 	bl	800ae14 <vPortEnterCritical>
 8009398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800939e:	b25b      	sxtb	r3, r3
 80093a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a4:	d103      	bne.n	80093ae <xQueueReceive+0x122>
 80093a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093b4:	b25b      	sxtb	r3, r3
 80093b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ba:	d103      	bne.n	80093c4 <xQueueReceive+0x138>
 80093bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093c4:	f001 fd56 	bl	800ae74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093c8:	1d3a      	adds	r2, r7, #4
 80093ca:	f107 0310 	add.w	r3, r7, #16
 80093ce:	4611      	mov	r1, r2
 80093d0:	4618      	mov	r0, r3
 80093d2:	f000 fe83 	bl	800a0dc <xTaskCheckForTimeOut>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d123      	bne.n	8009424 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093de:	f000 f917 	bl	8009610 <prvIsQueueEmpty>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d017      	beq.n	8009418 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80093e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ea:	3324      	adds	r3, #36	; 0x24
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	4611      	mov	r1, r2
 80093f0:	4618      	mov	r0, r3
 80093f2:	f000 fda9 	bl	8009f48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093f8:	f000 f8b8 	bl	800956c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093fc:	f000 fbde 	bl	8009bbc <xTaskResumeAll>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d189      	bne.n	800931a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009406:	4b10      	ldr	r3, [pc, #64]	; (8009448 <xQueueReceive+0x1bc>)
 8009408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800940c:	601a      	str	r2, [r3, #0]
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	e780      	b.n	800931a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800941a:	f000 f8a7 	bl	800956c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800941e:	f000 fbcd 	bl	8009bbc <xTaskResumeAll>
 8009422:	e77a      	b.n	800931a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009426:	f000 f8a1 	bl	800956c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800942a:	f000 fbc7 	bl	8009bbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800942e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009430:	f000 f8ee 	bl	8009610 <prvIsQueueEmpty>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	f43f af6f 	beq.w	800931a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800943c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800943e:	4618      	mov	r0, r3
 8009440:	3730      	adds	r7, #48	; 0x30
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	e000ed04 	.word	0xe000ed04

0800944c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009458:	2300      	movs	r3, #0
 800945a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009460:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10d      	bne.n	8009486 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d14d      	bne.n	800950e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	4618      	mov	r0, r3
 8009478:	f000 ff92 	bl	800a3a0 <xTaskPriorityDisinherit>
 800947c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	609a      	str	r2, [r3, #8]
 8009484:	e043      	b.n	800950e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d119      	bne.n	80094c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6858      	ldr	r0, [r3, #4]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009494:	461a      	mov	r2, r3
 8009496:	68b9      	ldr	r1, [r7, #8]
 8009498:	f002 f840 	bl	800b51c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	685a      	ldr	r2, [r3, #4]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a4:	441a      	add	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	685a      	ldr	r2, [r3, #4]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d32b      	bcc.n	800950e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	605a      	str	r2, [r3, #4]
 80094be:	e026      	b.n	800950e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	68d8      	ldr	r0, [r3, #12]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c8:	461a      	mov	r2, r3
 80094ca:	68b9      	ldr	r1, [r7, #8]
 80094cc:	f002 f826 	bl	800b51c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	68da      	ldr	r2, [r3, #12]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d8:	425b      	negs	r3, r3
 80094da:	441a      	add	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	68da      	ldr	r2, [r3, #12]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d207      	bcs.n	80094fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	689a      	ldr	r2, [r3, #8]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f4:	425b      	negs	r3, r3
 80094f6:	441a      	add	r2, r3
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d105      	bne.n	800950e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	3b01      	subs	r3, #1
 800950c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	1c5a      	adds	r2, r3, #1
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009516:	697b      	ldr	r3, [r7, #20]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3718      	adds	r7, #24
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952e:	2b00      	cmp	r3, #0
 8009530:	d018      	beq.n	8009564 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	68da      	ldr	r2, [r3, #12]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953a:	441a      	add	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	68da      	ldr	r2, [r3, #12]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	429a      	cmp	r2, r3
 800954a:	d303      	bcc.n	8009554 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	68d9      	ldr	r1, [r3, #12]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955c:	461a      	mov	r2, r3
 800955e:	6838      	ldr	r0, [r7, #0]
 8009560:	f001 ffdc 	bl	800b51c <memcpy>
	}
}
 8009564:	bf00      	nop
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009574:	f001 fc4e 	bl	800ae14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800957e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009580:	e011      	b.n	80095a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009586:	2b00      	cmp	r3, #0
 8009588:	d012      	beq.n	80095b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	3324      	adds	r3, #36	; 0x24
 800958e:	4618      	mov	r0, r3
 8009590:	f000 fd2a 	bl	8009fe8 <xTaskRemoveFromEventList>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800959a:	f000 fe01 	bl	800a1a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800959e:	7bfb      	ldrb	r3, [r7, #15]
 80095a0:	3b01      	subs	r3, #1
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	dce9      	bgt.n	8009582 <prvUnlockQueue+0x16>
 80095ae:	e000      	b.n	80095b2 <prvUnlockQueue+0x46>
					break;
 80095b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	22ff      	movs	r2, #255	; 0xff
 80095b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80095ba:	f001 fc5b 	bl	800ae74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80095be:	f001 fc29 	bl	800ae14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095ca:	e011      	b.n	80095f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d012      	beq.n	80095fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	3310      	adds	r3, #16
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 fd05 	bl	8009fe8 <xTaskRemoveFromEventList>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d001      	beq.n	80095e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80095e4:	f000 fddc 	bl	800a1a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80095e8:	7bbb      	ldrb	r3, [r7, #14]
 80095ea:	3b01      	subs	r3, #1
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	dce9      	bgt.n	80095cc <prvUnlockQueue+0x60>
 80095f8:	e000      	b.n	80095fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80095fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	22ff      	movs	r2, #255	; 0xff
 8009600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009604:	f001 fc36 	bl	800ae74 <vPortExitCritical>
}
 8009608:	bf00      	nop
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009618:	f001 fbfc 	bl	800ae14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009620:	2b00      	cmp	r3, #0
 8009622:	d102      	bne.n	800962a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009624:	2301      	movs	r3, #1
 8009626:	60fb      	str	r3, [r7, #12]
 8009628:	e001      	b.n	800962e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800962a:	2300      	movs	r3, #0
 800962c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800962e:	f001 fc21 	bl	800ae74 <vPortExitCritical>

	return xReturn;
 8009632:	68fb      	ldr	r3, [r7, #12]
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009644:	f001 fbe6 	bl	800ae14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009650:	429a      	cmp	r2, r3
 8009652:	d102      	bne.n	800965a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009654:	2301      	movs	r3, #1
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	e001      	b.n	800965e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800965a:	2300      	movs	r3, #0
 800965c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800965e:	f001 fc09 	bl	800ae74 <vPortExitCritical>

	return xReturn;
 8009662:	68fb      	ldr	r3, [r7, #12]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009676:	2300      	movs	r3, #0
 8009678:	60fb      	str	r3, [r7, #12]
 800967a:	e014      	b.n	80096a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800967c:	4a0f      	ldr	r2, [pc, #60]	; (80096bc <vQueueAddToRegistry+0x50>)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10b      	bne.n	80096a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009688:	490c      	ldr	r1, [pc, #48]	; (80096bc <vQueueAddToRegistry+0x50>)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009692:	4a0a      	ldr	r2, [pc, #40]	; (80096bc <vQueueAddToRegistry+0x50>)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	00db      	lsls	r3, r3, #3
 8009698:	4413      	add	r3, r2
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800969e:	e006      	b.n	80096ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	3301      	adds	r3, #1
 80096a4:	60fb      	str	r3, [r7, #12]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2b07      	cmp	r3, #7
 80096aa:	d9e7      	bls.n	800967c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80096ac:	bf00      	nop
 80096ae:	bf00      	nop
 80096b0:	3714      	adds	r7, #20
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	20000bf8 	.word	0x20000bf8

080096c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80096d0:	f001 fba0 	bl	800ae14 <vPortEnterCritical>
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096da:	b25b      	sxtb	r3, r3
 80096dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e0:	d103      	bne.n	80096ea <vQueueWaitForMessageRestricted+0x2a>
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096f0:	b25b      	sxtb	r3, r3
 80096f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f6:	d103      	bne.n	8009700 <vQueueWaitForMessageRestricted+0x40>
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009700:	f001 fbb8 	bl	800ae74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009708:	2b00      	cmp	r3, #0
 800970a:	d106      	bne.n	800971a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	3324      	adds	r3, #36	; 0x24
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	68b9      	ldr	r1, [r7, #8]
 8009714:	4618      	mov	r0, r3
 8009716:	f000 fc3b 	bl	8009f90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800971a:	6978      	ldr	r0, [r7, #20]
 800971c:	f7ff ff26 	bl	800956c <prvUnlockQueue>
	}
 8009720:	bf00      	nop
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009728:	b580      	push	{r7, lr}
 800972a:	b08e      	sub	sp, #56	; 0x38
 800972c:	af04      	add	r7, sp, #16
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
 8009734:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10a      	bne.n	8009752 <xTaskCreateStatic+0x2a>
	__asm volatile
 800973c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	623b      	str	r3, [r7, #32]
}
 800974e:	bf00      	nop
 8009750:	e7fe      	b.n	8009750 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10a      	bne.n	800976e <xTaskCreateStatic+0x46>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	61fb      	str	r3, [r7, #28]
}
 800976a:	bf00      	nop
 800976c:	e7fe      	b.n	800976c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800976e:	235c      	movs	r3, #92	; 0x5c
 8009770:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	2b5c      	cmp	r3, #92	; 0x5c
 8009776:	d00a      	beq.n	800978e <xTaskCreateStatic+0x66>
	__asm volatile
 8009778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977c:	f383 8811 	msr	BASEPRI, r3
 8009780:	f3bf 8f6f 	isb	sy
 8009784:	f3bf 8f4f 	dsb	sy
 8009788:	61bb      	str	r3, [r7, #24]
}
 800978a:	bf00      	nop
 800978c:	e7fe      	b.n	800978c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800978e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009792:	2b00      	cmp	r3, #0
 8009794:	d01e      	beq.n	80097d4 <xTaskCreateStatic+0xac>
 8009796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009798:	2b00      	cmp	r3, #0
 800979a:	d01b      	beq.n	80097d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800979c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80097a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a8:	2202      	movs	r2, #2
 80097aa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80097ae:	2300      	movs	r3, #0
 80097b0:	9303      	str	r3, [sp, #12]
 80097b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b4:	9302      	str	r3, [sp, #8]
 80097b6:	f107 0314 	add.w	r3, r7, #20
 80097ba:	9301      	str	r3, [sp, #4]
 80097bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	68b9      	ldr	r1, [r7, #8]
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f000 f850 	bl	800986c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80097ce:	f000 f8dd 	bl	800998c <prvAddNewTaskToReadyList>
 80097d2:	e001      	b.n	80097d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80097d4:	2300      	movs	r3, #0
 80097d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80097d8:	697b      	ldr	r3, [r7, #20]
	}
 80097da:	4618      	mov	r0, r3
 80097dc:	3728      	adds	r7, #40	; 0x28
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b08c      	sub	sp, #48	; 0x30
 80097e6:	af04      	add	r7, sp, #16
 80097e8:	60f8      	str	r0, [r7, #12]
 80097ea:	60b9      	str	r1, [r7, #8]
 80097ec:	603b      	str	r3, [r7, #0]
 80097ee:	4613      	mov	r3, r2
 80097f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80097f2:	88fb      	ldrh	r3, [r7, #6]
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4618      	mov	r0, r3
 80097f8:	f001 fc2e 	bl	800b058 <pvPortMalloc>
 80097fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00e      	beq.n	8009822 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009804:	205c      	movs	r0, #92	; 0x5c
 8009806:	f001 fc27 	bl	800b058 <pvPortMalloc>
 800980a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	631a      	str	r2, [r3, #48]	; 0x30
 8009818:	e005      	b.n	8009826 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800981a:	6978      	ldr	r0, [r7, #20]
 800981c:	f001 fce8 	bl	800b1f0 <vPortFree>
 8009820:	e001      	b.n	8009826 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009822:	2300      	movs	r3, #0
 8009824:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d017      	beq.n	800985c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009834:	88fa      	ldrh	r2, [r7, #6]
 8009836:	2300      	movs	r3, #0
 8009838:	9303      	str	r3, [sp, #12]
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	9302      	str	r3, [sp, #8]
 800983e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009840:	9301      	str	r3, [sp, #4]
 8009842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	68b9      	ldr	r1, [r7, #8]
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f000 f80e 	bl	800986c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009850:	69f8      	ldr	r0, [r7, #28]
 8009852:	f000 f89b 	bl	800998c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009856:	2301      	movs	r3, #1
 8009858:	61bb      	str	r3, [r7, #24]
 800985a:	e002      	b.n	8009862 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800985c:	f04f 33ff 	mov.w	r3, #4294967295
 8009860:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009862:	69bb      	ldr	r3, [r7, #24]
	}
 8009864:	4618      	mov	r0, r3
 8009866:	3720      	adds	r7, #32
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b088      	sub	sp, #32
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
 8009878:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800987a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	461a      	mov	r2, r3
 8009884:	21a5      	movs	r1, #165	; 0xa5
 8009886:	f001 fe57 	bl	800b538 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009894:	3b01      	subs	r3, #1
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4413      	add	r3, r2
 800989a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	f023 0307 	bic.w	r3, r3, #7
 80098a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	f003 0307 	and.w	r3, r3, #7
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00a      	beq.n	80098c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80098ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b2:	f383 8811 	msr	BASEPRI, r3
 80098b6:	f3bf 8f6f 	isb	sy
 80098ba:	f3bf 8f4f 	dsb	sy
 80098be:	617b      	str	r3, [r7, #20]
}
 80098c0:	bf00      	nop
 80098c2:	e7fe      	b.n	80098c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d01f      	beq.n	800990a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098ca:	2300      	movs	r3, #0
 80098cc:	61fb      	str	r3, [r7, #28]
 80098ce:	e012      	b.n	80098f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098d0:	68ba      	ldr	r2, [r7, #8]
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	4413      	add	r3, r2
 80098d6:	7819      	ldrb	r1, [r3, #0]
 80098d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	4413      	add	r3, r2
 80098de:	3334      	adds	r3, #52	; 0x34
 80098e0:	460a      	mov	r2, r1
 80098e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	4413      	add	r3, r2
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d006      	beq.n	80098fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	3301      	adds	r3, #1
 80098f4:	61fb      	str	r3, [r7, #28]
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	2b0f      	cmp	r3, #15
 80098fa:	d9e9      	bls.n	80098d0 <prvInitialiseNewTask+0x64>
 80098fc:	e000      	b.n	8009900 <prvInitialiseNewTask+0x94>
			{
				break;
 80098fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009902:	2200      	movs	r2, #0
 8009904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009908:	e003      	b.n	8009912 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800990a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990c:	2200      	movs	r2, #0
 800990e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009914:	2b37      	cmp	r3, #55	; 0x37
 8009916:	d901      	bls.n	800991c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009918:	2337      	movs	r3, #55	; 0x37
 800991a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800991c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009920:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009926:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992a:	2200      	movs	r2, #0
 800992c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800992e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009930:	3304      	adds	r3, #4
 8009932:	4618      	mov	r0, r3
 8009934:	f7ff f978 	bl	8008c28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993a:	3318      	adds	r3, #24
 800993c:	4618      	mov	r0, r3
 800993e:	f7ff f973 	bl	8008c28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009946:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800994e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009950:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009956:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995a:	2200      	movs	r2, #0
 800995c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800995e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009960:	2200      	movs	r2, #0
 8009962:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009966:	683a      	ldr	r2, [r7, #0]
 8009968:	68f9      	ldr	r1, [r7, #12]
 800996a:	69b8      	ldr	r0, [r7, #24]
 800996c:	f001 f928 	bl	800abc0 <pxPortInitialiseStack>
 8009970:	4602      	mov	r2, r0
 8009972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009974:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009978:	2b00      	cmp	r3, #0
 800997a:	d002      	beq.n	8009982 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800997c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009980:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009982:	bf00      	nop
 8009984:	3720      	adds	r7, #32
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
	...

0800998c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009994:	f001 fa3e 	bl	800ae14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009998:	4b2d      	ldr	r3, [pc, #180]	; (8009a50 <prvAddNewTaskToReadyList+0xc4>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3301      	adds	r3, #1
 800999e:	4a2c      	ldr	r2, [pc, #176]	; (8009a50 <prvAddNewTaskToReadyList+0xc4>)
 80099a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80099a2:	4b2c      	ldr	r3, [pc, #176]	; (8009a54 <prvAddNewTaskToReadyList+0xc8>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d109      	bne.n	80099be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80099aa:	4a2a      	ldr	r2, [pc, #168]	; (8009a54 <prvAddNewTaskToReadyList+0xc8>)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80099b0:	4b27      	ldr	r3, [pc, #156]	; (8009a50 <prvAddNewTaskToReadyList+0xc4>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d110      	bne.n	80099da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80099b8:	f000 fc16 	bl	800a1e8 <prvInitialiseTaskLists>
 80099bc:	e00d      	b.n	80099da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80099be:	4b26      	ldr	r3, [pc, #152]	; (8009a58 <prvAddNewTaskToReadyList+0xcc>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d109      	bne.n	80099da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80099c6:	4b23      	ldr	r3, [pc, #140]	; (8009a54 <prvAddNewTaskToReadyList+0xc8>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d802      	bhi.n	80099da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80099d4:	4a1f      	ldr	r2, [pc, #124]	; (8009a54 <prvAddNewTaskToReadyList+0xc8>)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80099da:	4b20      	ldr	r3, [pc, #128]	; (8009a5c <prvAddNewTaskToReadyList+0xd0>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	3301      	adds	r3, #1
 80099e0:	4a1e      	ldr	r2, [pc, #120]	; (8009a5c <prvAddNewTaskToReadyList+0xd0>)
 80099e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80099e4:	4b1d      	ldr	r3, [pc, #116]	; (8009a5c <prvAddNewTaskToReadyList+0xd0>)
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f0:	4b1b      	ldr	r3, [pc, #108]	; (8009a60 <prvAddNewTaskToReadyList+0xd4>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d903      	bls.n	8009a00 <prvAddNewTaskToReadyList+0x74>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fc:	4a18      	ldr	r2, [pc, #96]	; (8009a60 <prvAddNewTaskToReadyList+0xd4>)
 80099fe:	6013      	str	r3, [r2, #0]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a04:	4613      	mov	r3, r2
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	4413      	add	r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	4a15      	ldr	r2, [pc, #84]	; (8009a64 <prvAddNewTaskToReadyList+0xd8>)
 8009a0e:	441a      	add	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	3304      	adds	r3, #4
 8009a14:	4619      	mov	r1, r3
 8009a16:	4610      	mov	r0, r2
 8009a18:	f7ff f913 	bl	8008c42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a1c:	f001 fa2a 	bl	800ae74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a20:	4b0d      	ldr	r3, [pc, #52]	; (8009a58 <prvAddNewTaskToReadyList+0xcc>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00e      	beq.n	8009a46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a28:	4b0a      	ldr	r3, [pc, #40]	; (8009a54 <prvAddNewTaskToReadyList+0xc8>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d207      	bcs.n	8009a46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a36:	4b0c      	ldr	r3, [pc, #48]	; (8009a68 <prvAddNewTaskToReadyList+0xdc>)
 8009a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a46:	bf00      	nop
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	2000110c 	.word	0x2000110c
 8009a54:	20000c38 	.word	0x20000c38
 8009a58:	20001118 	.word	0x20001118
 8009a5c:	20001128 	.word	0x20001128
 8009a60:	20001114 	.word	0x20001114
 8009a64:	20000c3c 	.word	0x20000c3c
 8009a68:	e000ed04 	.word	0xe000ed04

08009a6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009a74:	2300      	movs	r3, #0
 8009a76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d017      	beq.n	8009aae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009a7e:	4b13      	ldr	r3, [pc, #76]	; (8009acc <vTaskDelay+0x60>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00a      	beq.n	8009a9c <vTaskDelay+0x30>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	60bb      	str	r3, [r7, #8]
}
 8009a98:	bf00      	nop
 8009a9a:	e7fe      	b.n	8009a9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009a9c:	f000 f880 	bl	8009ba0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fcea 	bl	800a47c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009aa8:	f000 f888 	bl	8009bbc <xTaskResumeAll>
 8009aac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d107      	bne.n	8009ac4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009ab4:	4b06      	ldr	r3, [pc, #24]	; (8009ad0 <vTaskDelay+0x64>)
 8009ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aba:	601a      	str	r2, [r3, #0]
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ac4:	bf00      	nop
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	20001134 	.word	0x20001134
 8009ad0:	e000ed04 	.word	0xe000ed04

08009ad4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b08a      	sub	sp, #40	; 0x28
 8009ad8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009ada:	2300      	movs	r3, #0
 8009adc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009ae2:	463a      	mov	r2, r7
 8009ae4:	1d39      	adds	r1, r7, #4
 8009ae6:	f107 0308 	add.w	r3, r7, #8
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7ff f848 	bl	8008b80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	9202      	str	r2, [sp, #8]
 8009af8:	9301      	str	r3, [sp, #4]
 8009afa:	2300      	movs	r3, #0
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	2300      	movs	r3, #0
 8009b00:	460a      	mov	r2, r1
 8009b02:	4921      	ldr	r1, [pc, #132]	; (8009b88 <vTaskStartScheduler+0xb4>)
 8009b04:	4821      	ldr	r0, [pc, #132]	; (8009b8c <vTaskStartScheduler+0xb8>)
 8009b06:	f7ff fe0f 	bl	8009728 <xTaskCreateStatic>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	4a20      	ldr	r2, [pc, #128]	; (8009b90 <vTaskStartScheduler+0xbc>)
 8009b0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009b10:	4b1f      	ldr	r3, [pc, #124]	; (8009b90 <vTaskStartScheduler+0xbc>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d002      	beq.n	8009b1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	617b      	str	r3, [r7, #20]
 8009b1c:	e001      	b.n	8009b22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d102      	bne.n	8009b2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009b28:	f000 fcfc 	bl	800a524 <xTimerCreateTimerTask>
 8009b2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d116      	bne.n	8009b62 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b38:	f383 8811 	msr	BASEPRI, r3
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	613b      	str	r3, [r7, #16]
}
 8009b46:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009b48:	4b12      	ldr	r3, [pc, #72]	; (8009b94 <vTaskStartScheduler+0xc0>)
 8009b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009b50:	4b11      	ldr	r3, [pc, #68]	; (8009b98 <vTaskStartScheduler+0xc4>)
 8009b52:	2201      	movs	r2, #1
 8009b54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009b56:	4b11      	ldr	r3, [pc, #68]	; (8009b9c <vTaskStartScheduler+0xc8>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009b5c:	f001 f8b8 	bl	800acd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b60:	e00e      	b.n	8009b80 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b68:	d10a      	bne.n	8009b80 <vTaskStartScheduler+0xac>
	__asm volatile
 8009b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	60fb      	str	r3, [r7, #12]
}
 8009b7c:	bf00      	nop
 8009b7e:	e7fe      	b.n	8009b7e <vTaskStartScheduler+0xaa>
}
 8009b80:	bf00      	nop
 8009b82:	3718      	adds	r7, #24
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	0800eb60 	.word	0x0800eb60
 8009b8c:	0800a1b9 	.word	0x0800a1b9
 8009b90:	20001130 	.word	0x20001130
 8009b94:	2000112c 	.word	0x2000112c
 8009b98:	20001118 	.word	0x20001118
 8009b9c:	20001110 	.word	0x20001110

08009ba0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009ba4:	4b04      	ldr	r3, [pc, #16]	; (8009bb8 <vTaskSuspendAll+0x18>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	4a03      	ldr	r2, [pc, #12]	; (8009bb8 <vTaskSuspendAll+0x18>)
 8009bac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009bae:	bf00      	nop
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr
 8009bb8:	20001134 	.word	0x20001134

08009bbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009bca:	4b42      	ldr	r3, [pc, #264]	; (8009cd4 <xTaskResumeAll+0x118>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10a      	bne.n	8009be8 <xTaskResumeAll+0x2c>
	__asm volatile
 8009bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	603b      	str	r3, [r7, #0]
}
 8009be4:	bf00      	nop
 8009be6:	e7fe      	b.n	8009be6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009be8:	f001 f914 	bl	800ae14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009bec:	4b39      	ldr	r3, [pc, #228]	; (8009cd4 <xTaskResumeAll+0x118>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	4a38      	ldr	r2, [pc, #224]	; (8009cd4 <xTaskResumeAll+0x118>)
 8009bf4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bf6:	4b37      	ldr	r3, [pc, #220]	; (8009cd4 <xTaskResumeAll+0x118>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d162      	bne.n	8009cc4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009bfe:	4b36      	ldr	r3, [pc, #216]	; (8009cd8 <xTaskResumeAll+0x11c>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d05e      	beq.n	8009cc4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c06:	e02f      	b.n	8009c68 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c08:	4b34      	ldr	r3, [pc, #208]	; (8009cdc <xTaskResumeAll+0x120>)
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	3318      	adds	r3, #24
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7ff f871 	bl	8008cfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7ff f86c 	bl	8008cfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c28:	4b2d      	ldr	r3, [pc, #180]	; (8009ce0 <xTaskResumeAll+0x124>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d903      	bls.n	8009c38 <xTaskResumeAll+0x7c>
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c34:	4a2a      	ldr	r2, [pc, #168]	; (8009ce0 <xTaskResumeAll+0x124>)
 8009c36:	6013      	str	r3, [r2, #0]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4a27      	ldr	r2, [pc, #156]	; (8009ce4 <xTaskResumeAll+0x128>)
 8009c46:	441a      	add	r2, r3
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	3304      	adds	r3, #4
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4610      	mov	r0, r2
 8009c50:	f7fe fff7 	bl	8008c42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c58:	4b23      	ldr	r3, [pc, #140]	; (8009ce8 <xTaskResumeAll+0x12c>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d302      	bcc.n	8009c68 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009c62:	4b22      	ldr	r3, [pc, #136]	; (8009cec <xTaskResumeAll+0x130>)
 8009c64:	2201      	movs	r2, #1
 8009c66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c68:	4b1c      	ldr	r3, [pc, #112]	; (8009cdc <xTaskResumeAll+0x120>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1cb      	bne.n	8009c08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d001      	beq.n	8009c7a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c76:	f000 fb55 	bl	800a324 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009c7a:	4b1d      	ldr	r3, [pc, #116]	; (8009cf0 <xTaskResumeAll+0x134>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d010      	beq.n	8009ca8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c86:	f000 f847 	bl	8009d18 <xTaskIncrementTick>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d002      	beq.n	8009c96 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009c90:	4b16      	ldr	r3, [pc, #88]	; (8009cec <xTaskResumeAll+0x130>)
 8009c92:	2201      	movs	r2, #1
 8009c94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1f1      	bne.n	8009c86 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009ca2:	4b13      	ldr	r3, [pc, #76]	; (8009cf0 <xTaskResumeAll+0x134>)
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009ca8:	4b10      	ldr	r3, [pc, #64]	; (8009cec <xTaskResumeAll+0x130>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d009      	beq.n	8009cc4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009cb4:	4b0f      	ldr	r3, [pc, #60]	; (8009cf4 <xTaskResumeAll+0x138>)
 8009cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cba:	601a      	str	r2, [r3, #0]
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009cc4:	f001 f8d6 	bl	800ae74 <vPortExitCritical>

	return xAlreadyYielded;
 8009cc8:	68bb      	ldr	r3, [r7, #8]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	20001134 	.word	0x20001134
 8009cd8:	2000110c 	.word	0x2000110c
 8009cdc:	200010cc 	.word	0x200010cc
 8009ce0:	20001114 	.word	0x20001114
 8009ce4:	20000c3c 	.word	0x20000c3c
 8009ce8:	20000c38 	.word	0x20000c38
 8009cec:	20001120 	.word	0x20001120
 8009cf0:	2000111c 	.word	0x2000111c
 8009cf4:	e000ed04 	.word	0xe000ed04

08009cf8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009cfe:	4b05      	ldr	r3, [pc, #20]	; (8009d14 <xTaskGetTickCount+0x1c>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009d04:	687b      	ldr	r3, [r7, #4]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	370c      	adds	r7, #12
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	20001110 	.word	0x20001110

08009d18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d22:	4b4f      	ldr	r3, [pc, #316]	; (8009e60 <xTaskIncrementTick+0x148>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f040 808f 	bne.w	8009e4a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d2c:	4b4d      	ldr	r3, [pc, #308]	; (8009e64 <xTaskIncrementTick+0x14c>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	3301      	adds	r3, #1
 8009d32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d34:	4a4b      	ldr	r2, [pc, #300]	; (8009e64 <xTaskIncrementTick+0x14c>)
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d120      	bne.n	8009d82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d40:	4b49      	ldr	r3, [pc, #292]	; (8009e68 <xTaskIncrementTick+0x150>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00a      	beq.n	8009d60 <xTaskIncrementTick+0x48>
	__asm volatile
 8009d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4e:	f383 8811 	msr	BASEPRI, r3
 8009d52:	f3bf 8f6f 	isb	sy
 8009d56:	f3bf 8f4f 	dsb	sy
 8009d5a:	603b      	str	r3, [r7, #0]
}
 8009d5c:	bf00      	nop
 8009d5e:	e7fe      	b.n	8009d5e <xTaskIncrementTick+0x46>
 8009d60:	4b41      	ldr	r3, [pc, #260]	; (8009e68 <xTaskIncrementTick+0x150>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	60fb      	str	r3, [r7, #12]
 8009d66:	4b41      	ldr	r3, [pc, #260]	; (8009e6c <xTaskIncrementTick+0x154>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a3f      	ldr	r2, [pc, #252]	; (8009e68 <xTaskIncrementTick+0x150>)
 8009d6c:	6013      	str	r3, [r2, #0]
 8009d6e:	4a3f      	ldr	r2, [pc, #252]	; (8009e6c <xTaskIncrementTick+0x154>)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6013      	str	r3, [r2, #0]
 8009d74:	4b3e      	ldr	r3, [pc, #248]	; (8009e70 <xTaskIncrementTick+0x158>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	4a3d      	ldr	r2, [pc, #244]	; (8009e70 <xTaskIncrementTick+0x158>)
 8009d7c:	6013      	str	r3, [r2, #0]
 8009d7e:	f000 fad1 	bl	800a324 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d82:	4b3c      	ldr	r3, [pc, #240]	; (8009e74 <xTaskIncrementTick+0x15c>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	693a      	ldr	r2, [r7, #16]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d349      	bcc.n	8009e20 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d8c:	4b36      	ldr	r3, [pc, #216]	; (8009e68 <xTaskIncrementTick+0x150>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d104      	bne.n	8009da0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d96:	4b37      	ldr	r3, [pc, #220]	; (8009e74 <xTaskIncrementTick+0x15c>)
 8009d98:	f04f 32ff 	mov.w	r2, #4294967295
 8009d9c:	601a      	str	r2, [r3, #0]
					break;
 8009d9e:	e03f      	b.n	8009e20 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009da0:	4b31      	ldr	r3, [pc, #196]	; (8009e68 <xTaskIncrementTick+0x150>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009db0:	693a      	ldr	r2, [r7, #16]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d203      	bcs.n	8009dc0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009db8:	4a2e      	ldr	r2, [pc, #184]	; (8009e74 <xTaskIncrementTick+0x15c>)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009dbe:	e02f      	b.n	8009e20 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	3304      	adds	r3, #4
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7fe ff99 	bl	8008cfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d004      	beq.n	8009ddc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	3318      	adds	r3, #24
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7fe ff90 	bl	8008cfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de0:	4b25      	ldr	r3, [pc, #148]	; (8009e78 <xTaskIncrementTick+0x160>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d903      	bls.n	8009df0 <xTaskIncrementTick+0xd8>
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dec:	4a22      	ldr	r2, [pc, #136]	; (8009e78 <xTaskIncrementTick+0x160>)
 8009dee:	6013      	str	r3, [r2, #0]
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df4:	4613      	mov	r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	4413      	add	r3, r2
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4a1f      	ldr	r2, [pc, #124]	; (8009e7c <xTaskIncrementTick+0x164>)
 8009dfe:	441a      	add	r2, r3
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	3304      	adds	r3, #4
 8009e04:	4619      	mov	r1, r3
 8009e06:	4610      	mov	r0, r2
 8009e08:	f7fe ff1b 	bl	8008c42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e10:	4b1b      	ldr	r3, [pc, #108]	; (8009e80 <xTaskIncrementTick+0x168>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d3b8      	bcc.n	8009d8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e1e:	e7b5      	b.n	8009d8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e20:	4b17      	ldr	r3, [pc, #92]	; (8009e80 <xTaskIncrementTick+0x168>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e26:	4915      	ldr	r1, [pc, #84]	; (8009e7c <xTaskIncrementTick+0x164>)
 8009e28:	4613      	mov	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4413      	add	r3, r2
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	440b      	add	r3, r1
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d901      	bls.n	8009e3c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009e3c:	4b11      	ldr	r3, [pc, #68]	; (8009e84 <xTaskIncrementTick+0x16c>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d007      	beq.n	8009e54 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009e44:	2301      	movs	r3, #1
 8009e46:	617b      	str	r3, [r7, #20]
 8009e48:	e004      	b.n	8009e54 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009e4a:	4b0f      	ldr	r3, [pc, #60]	; (8009e88 <xTaskIncrementTick+0x170>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	4a0d      	ldr	r2, [pc, #52]	; (8009e88 <xTaskIncrementTick+0x170>)
 8009e52:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009e54:	697b      	ldr	r3, [r7, #20]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	20001134 	.word	0x20001134
 8009e64:	20001110 	.word	0x20001110
 8009e68:	200010c4 	.word	0x200010c4
 8009e6c:	200010c8 	.word	0x200010c8
 8009e70:	20001124 	.word	0x20001124
 8009e74:	2000112c 	.word	0x2000112c
 8009e78:	20001114 	.word	0x20001114
 8009e7c:	20000c3c 	.word	0x20000c3c
 8009e80:	20000c38 	.word	0x20000c38
 8009e84:	20001120 	.word	0x20001120
 8009e88:	2000111c 	.word	0x2000111c

08009e8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e92:	4b28      	ldr	r3, [pc, #160]	; (8009f34 <vTaskSwitchContext+0xa8>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d003      	beq.n	8009ea2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e9a:	4b27      	ldr	r3, [pc, #156]	; (8009f38 <vTaskSwitchContext+0xac>)
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ea0:	e041      	b.n	8009f26 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009ea2:	4b25      	ldr	r3, [pc, #148]	; (8009f38 <vTaskSwitchContext+0xac>)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ea8:	4b24      	ldr	r3, [pc, #144]	; (8009f3c <vTaskSwitchContext+0xb0>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	60fb      	str	r3, [r7, #12]
 8009eae:	e010      	b.n	8009ed2 <vTaskSwitchContext+0x46>
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d10a      	bne.n	8009ecc <vTaskSwitchContext+0x40>
	__asm volatile
 8009eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eba:	f383 8811 	msr	BASEPRI, r3
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	607b      	str	r3, [r7, #4]
}
 8009ec8:	bf00      	nop
 8009eca:	e7fe      	b.n	8009eca <vTaskSwitchContext+0x3e>
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	60fb      	str	r3, [r7, #12]
 8009ed2:	491b      	ldr	r1, [pc, #108]	; (8009f40 <vTaskSwitchContext+0xb4>)
 8009ed4:	68fa      	ldr	r2, [r7, #12]
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	4413      	add	r3, r2
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	440b      	add	r3, r1
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d0e4      	beq.n	8009eb0 <vTaskSwitchContext+0x24>
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4a13      	ldr	r2, [pc, #76]	; (8009f40 <vTaskSwitchContext+0xb4>)
 8009ef2:	4413      	add	r3, r2
 8009ef4:	60bb      	str	r3, [r7, #8]
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	605a      	str	r2, [r3, #4]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	685a      	ldr	r2, [r3, #4]
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	3308      	adds	r3, #8
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d104      	bne.n	8009f16 <vTaskSwitchContext+0x8a>
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	685a      	ldr	r2, [r3, #4]
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	605a      	str	r2, [r3, #4]
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	4a09      	ldr	r2, [pc, #36]	; (8009f44 <vTaskSwitchContext+0xb8>)
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	4a06      	ldr	r2, [pc, #24]	; (8009f3c <vTaskSwitchContext+0xb0>)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6013      	str	r3, [r2, #0]
}
 8009f26:	bf00      	nop
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	20001134 	.word	0x20001134
 8009f38:	20001120 	.word	0x20001120
 8009f3c:	20001114 	.word	0x20001114
 8009f40:	20000c3c 	.word	0x20000c3c
 8009f44:	20000c38 	.word	0x20000c38

08009f48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10a      	bne.n	8009f6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	60fb      	str	r3, [r7, #12]
}
 8009f6a:	bf00      	nop
 8009f6c:	e7fe      	b.n	8009f6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f6e:	4b07      	ldr	r3, [pc, #28]	; (8009f8c <vTaskPlaceOnEventList+0x44>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	3318      	adds	r3, #24
 8009f74:	4619      	mov	r1, r3
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f7fe fe87 	bl	8008c8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f7c:	2101      	movs	r1, #1
 8009f7e:	6838      	ldr	r0, [r7, #0]
 8009f80:	f000 fa7c 	bl	800a47c <prvAddCurrentTaskToDelayedList>
}
 8009f84:	bf00      	nop
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	20000c38 	.word	0x20000c38

08009f90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10a      	bne.n	8009fb8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	617b      	str	r3, [r7, #20]
}
 8009fb4:	bf00      	nop
 8009fb6:	e7fe      	b.n	8009fb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009fb8:	4b0a      	ldr	r3, [pc, #40]	; (8009fe4 <vTaskPlaceOnEventListRestricted+0x54>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	3318      	adds	r3, #24
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f7fe fe3e 	bl	8008c42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d002      	beq.n	8009fd2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8009fd0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009fd2:	6879      	ldr	r1, [r7, #4]
 8009fd4:	68b8      	ldr	r0, [r7, #8]
 8009fd6:	f000 fa51 	bl	800a47c <prvAddCurrentTaskToDelayedList>
	}
 8009fda:	bf00      	nop
 8009fdc:	3718      	adds	r7, #24
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	20000c38 	.word	0x20000c38

08009fe8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d10a      	bne.n	800a014 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	60fb      	str	r3, [r7, #12]
}
 800a010:	bf00      	nop
 800a012:	e7fe      	b.n	800a012 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	3318      	adds	r3, #24
 800a018:	4618      	mov	r0, r3
 800a01a:	f7fe fe6f 	bl	8008cfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a01e:	4b1e      	ldr	r3, [pc, #120]	; (800a098 <xTaskRemoveFromEventList+0xb0>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d11d      	bne.n	800a062 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	3304      	adds	r3, #4
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7fe fe66 	bl	8008cfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a034:	4b19      	ldr	r3, [pc, #100]	; (800a09c <xTaskRemoveFromEventList+0xb4>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d903      	bls.n	800a044 <xTaskRemoveFromEventList+0x5c>
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a040:	4a16      	ldr	r2, [pc, #88]	; (800a09c <xTaskRemoveFromEventList+0xb4>)
 800a042:	6013      	str	r3, [r2, #0]
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a048:	4613      	mov	r3, r2
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4413      	add	r3, r2
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	4a13      	ldr	r2, [pc, #76]	; (800a0a0 <xTaskRemoveFromEventList+0xb8>)
 800a052:	441a      	add	r2, r3
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	3304      	adds	r3, #4
 800a058:	4619      	mov	r1, r3
 800a05a:	4610      	mov	r0, r2
 800a05c:	f7fe fdf1 	bl	8008c42 <vListInsertEnd>
 800a060:	e005      	b.n	800a06e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	3318      	adds	r3, #24
 800a066:	4619      	mov	r1, r3
 800a068:	480e      	ldr	r0, [pc, #56]	; (800a0a4 <xTaskRemoveFromEventList+0xbc>)
 800a06a:	f7fe fdea 	bl	8008c42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a072:	4b0d      	ldr	r3, [pc, #52]	; (800a0a8 <xTaskRemoveFromEventList+0xc0>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a078:	429a      	cmp	r2, r3
 800a07a:	d905      	bls.n	800a088 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a07c:	2301      	movs	r3, #1
 800a07e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a080:	4b0a      	ldr	r3, [pc, #40]	; (800a0ac <xTaskRemoveFromEventList+0xc4>)
 800a082:	2201      	movs	r2, #1
 800a084:	601a      	str	r2, [r3, #0]
 800a086:	e001      	b.n	800a08c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a088:	2300      	movs	r3, #0
 800a08a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a08c:	697b      	ldr	r3, [r7, #20]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3718      	adds	r7, #24
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	20001134 	.word	0x20001134
 800a09c:	20001114 	.word	0x20001114
 800a0a0:	20000c3c 	.word	0x20000c3c
 800a0a4:	200010cc 	.word	0x200010cc
 800a0a8:	20000c38 	.word	0x20000c38
 800a0ac:	20001120 	.word	0x20001120

0800a0b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a0b8:	4b06      	ldr	r3, [pc, #24]	; (800a0d4 <vTaskInternalSetTimeOutState+0x24>)
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a0c0:	4b05      	ldr	r3, [pc, #20]	; (800a0d8 <vTaskInternalSetTimeOutState+0x28>)
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	605a      	str	r2, [r3, #4]
}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr
 800a0d4:	20001124 	.word	0x20001124
 800a0d8:	20001110 	.word	0x20001110

0800a0dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b088      	sub	sp, #32
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10a      	bne.n	800a102 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	613b      	str	r3, [r7, #16]
}
 800a0fe:	bf00      	nop
 800a100:	e7fe      	b.n	800a100 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d10a      	bne.n	800a11e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10c:	f383 8811 	msr	BASEPRI, r3
 800a110:	f3bf 8f6f 	isb	sy
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	60fb      	str	r3, [r7, #12]
}
 800a11a:	bf00      	nop
 800a11c:	e7fe      	b.n	800a11c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a11e:	f000 fe79 	bl	800ae14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a122:	4b1d      	ldr	r3, [pc, #116]	; (800a198 <xTaskCheckForTimeOut+0xbc>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	69ba      	ldr	r2, [r7, #24]
 800a12e:	1ad3      	subs	r3, r2, r3
 800a130:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13a:	d102      	bne.n	800a142 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a13c:	2300      	movs	r3, #0
 800a13e:	61fb      	str	r3, [r7, #28]
 800a140:	e023      	b.n	800a18a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	4b15      	ldr	r3, [pc, #84]	; (800a19c <xTaskCheckForTimeOut+0xc0>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d007      	beq.n	800a15e <xTaskCheckForTimeOut+0x82>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	69ba      	ldr	r2, [r7, #24]
 800a154:	429a      	cmp	r2, r3
 800a156:	d302      	bcc.n	800a15e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a158:	2301      	movs	r3, #1
 800a15a:	61fb      	str	r3, [r7, #28]
 800a15c:	e015      	b.n	800a18a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	429a      	cmp	r2, r3
 800a166:	d20b      	bcs.n	800a180 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	1ad2      	subs	r2, r2, r3
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7ff ff9b 	bl	800a0b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a17a:	2300      	movs	r3, #0
 800a17c:	61fb      	str	r3, [r7, #28]
 800a17e:	e004      	b.n	800a18a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	2200      	movs	r2, #0
 800a184:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a186:	2301      	movs	r3, #1
 800a188:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a18a:	f000 fe73 	bl	800ae74 <vPortExitCritical>

	return xReturn;
 800a18e:	69fb      	ldr	r3, [r7, #28]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3720      	adds	r7, #32
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	20001110 	.word	0x20001110
 800a19c:	20001124 	.word	0x20001124

0800a1a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a1a4:	4b03      	ldr	r3, [pc, #12]	; (800a1b4 <vTaskMissedYield+0x14>)
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	601a      	str	r2, [r3, #0]
}
 800a1aa:	bf00      	nop
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr
 800a1b4:	20001120 	.word	0x20001120

0800a1b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a1c0:	f000 f852 	bl	800a268 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a1c4:	4b06      	ldr	r3, [pc, #24]	; (800a1e0 <prvIdleTask+0x28>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d9f9      	bls.n	800a1c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a1cc:	4b05      	ldr	r3, [pc, #20]	; (800a1e4 <prvIdleTask+0x2c>)
 800a1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1d2:	601a      	str	r2, [r3, #0]
 800a1d4:	f3bf 8f4f 	dsb	sy
 800a1d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a1dc:	e7f0      	b.n	800a1c0 <prvIdleTask+0x8>
 800a1de:	bf00      	nop
 800a1e0:	20000c3c 	.word	0x20000c3c
 800a1e4:	e000ed04 	.word	0xe000ed04

0800a1e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	607b      	str	r3, [r7, #4]
 800a1f2:	e00c      	b.n	800a20e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	4413      	add	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4a12      	ldr	r2, [pc, #72]	; (800a248 <prvInitialiseTaskLists+0x60>)
 800a200:	4413      	add	r3, r2
 800a202:	4618      	mov	r0, r3
 800a204:	f7fe fcf0 	bl	8008be8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	3301      	adds	r3, #1
 800a20c:	607b      	str	r3, [r7, #4]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2b37      	cmp	r3, #55	; 0x37
 800a212:	d9ef      	bls.n	800a1f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a214:	480d      	ldr	r0, [pc, #52]	; (800a24c <prvInitialiseTaskLists+0x64>)
 800a216:	f7fe fce7 	bl	8008be8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a21a:	480d      	ldr	r0, [pc, #52]	; (800a250 <prvInitialiseTaskLists+0x68>)
 800a21c:	f7fe fce4 	bl	8008be8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a220:	480c      	ldr	r0, [pc, #48]	; (800a254 <prvInitialiseTaskLists+0x6c>)
 800a222:	f7fe fce1 	bl	8008be8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a226:	480c      	ldr	r0, [pc, #48]	; (800a258 <prvInitialiseTaskLists+0x70>)
 800a228:	f7fe fcde 	bl	8008be8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a22c:	480b      	ldr	r0, [pc, #44]	; (800a25c <prvInitialiseTaskLists+0x74>)
 800a22e:	f7fe fcdb 	bl	8008be8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a232:	4b0b      	ldr	r3, [pc, #44]	; (800a260 <prvInitialiseTaskLists+0x78>)
 800a234:	4a05      	ldr	r2, [pc, #20]	; (800a24c <prvInitialiseTaskLists+0x64>)
 800a236:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a238:	4b0a      	ldr	r3, [pc, #40]	; (800a264 <prvInitialiseTaskLists+0x7c>)
 800a23a:	4a05      	ldr	r2, [pc, #20]	; (800a250 <prvInitialiseTaskLists+0x68>)
 800a23c:	601a      	str	r2, [r3, #0]
}
 800a23e:	bf00      	nop
 800a240:	3708      	adds	r7, #8
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	20000c3c 	.word	0x20000c3c
 800a24c:	2000109c 	.word	0x2000109c
 800a250:	200010b0 	.word	0x200010b0
 800a254:	200010cc 	.word	0x200010cc
 800a258:	200010e0 	.word	0x200010e0
 800a25c:	200010f8 	.word	0x200010f8
 800a260:	200010c4 	.word	0x200010c4
 800a264:	200010c8 	.word	0x200010c8

0800a268 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a26e:	e019      	b.n	800a2a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a270:	f000 fdd0 	bl	800ae14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a274:	4b10      	ldr	r3, [pc, #64]	; (800a2b8 <prvCheckTasksWaitingTermination+0x50>)
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	3304      	adds	r3, #4
 800a280:	4618      	mov	r0, r3
 800a282:	f7fe fd3b 	bl	8008cfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a286:	4b0d      	ldr	r3, [pc, #52]	; (800a2bc <prvCheckTasksWaitingTermination+0x54>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	3b01      	subs	r3, #1
 800a28c:	4a0b      	ldr	r2, [pc, #44]	; (800a2bc <prvCheckTasksWaitingTermination+0x54>)
 800a28e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a290:	4b0b      	ldr	r3, [pc, #44]	; (800a2c0 <prvCheckTasksWaitingTermination+0x58>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	3b01      	subs	r3, #1
 800a296:	4a0a      	ldr	r2, [pc, #40]	; (800a2c0 <prvCheckTasksWaitingTermination+0x58>)
 800a298:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a29a:	f000 fdeb 	bl	800ae74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f810 	bl	800a2c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2a4:	4b06      	ldr	r3, [pc, #24]	; (800a2c0 <prvCheckTasksWaitingTermination+0x58>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1e1      	bne.n	800a270 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a2ac:	bf00      	nop
 800a2ae:	bf00      	nop
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	200010e0 	.word	0x200010e0
 800a2bc:	2000110c 	.word	0x2000110c
 800a2c0:	200010f4 	.word	0x200010f4

0800a2c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d108      	bne.n	800a2e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f000 ff88 	bl	800b1f0 <vPortFree>
				vPortFree( pxTCB );
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 ff85 	bl	800b1f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a2e6:	e018      	b.n	800a31a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d103      	bne.n	800a2fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 ff7c 	bl	800b1f0 <vPortFree>
	}
 800a2f8:	e00f      	b.n	800a31a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a300:	2b02      	cmp	r3, #2
 800a302:	d00a      	beq.n	800a31a <prvDeleteTCB+0x56>
	__asm volatile
 800a304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a308:	f383 8811 	msr	BASEPRI, r3
 800a30c:	f3bf 8f6f 	isb	sy
 800a310:	f3bf 8f4f 	dsb	sy
 800a314:	60fb      	str	r3, [r7, #12]
}
 800a316:	bf00      	nop
 800a318:	e7fe      	b.n	800a318 <prvDeleteTCB+0x54>
	}
 800a31a:	bf00      	nop
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
	...

0800a324 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a32a:	4b0c      	ldr	r3, [pc, #48]	; (800a35c <prvResetNextTaskUnblockTime+0x38>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d104      	bne.n	800a33e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a334:	4b0a      	ldr	r3, [pc, #40]	; (800a360 <prvResetNextTaskUnblockTime+0x3c>)
 800a336:	f04f 32ff 	mov.w	r2, #4294967295
 800a33a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a33c:	e008      	b.n	800a350 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a33e:	4b07      	ldr	r3, [pc, #28]	; (800a35c <prvResetNextTaskUnblockTime+0x38>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	4a04      	ldr	r2, [pc, #16]	; (800a360 <prvResetNextTaskUnblockTime+0x3c>)
 800a34e:	6013      	str	r3, [r2, #0]
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr
 800a35c:	200010c4 	.word	0x200010c4
 800a360:	2000112c 	.word	0x2000112c

0800a364 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a36a:	4b0b      	ldr	r3, [pc, #44]	; (800a398 <xTaskGetSchedulerState+0x34>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d102      	bne.n	800a378 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a372:	2301      	movs	r3, #1
 800a374:	607b      	str	r3, [r7, #4]
 800a376:	e008      	b.n	800a38a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a378:	4b08      	ldr	r3, [pc, #32]	; (800a39c <xTaskGetSchedulerState+0x38>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d102      	bne.n	800a386 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a380:	2302      	movs	r3, #2
 800a382:	607b      	str	r3, [r7, #4]
 800a384:	e001      	b.n	800a38a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a386:	2300      	movs	r3, #0
 800a388:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a38a:	687b      	ldr	r3, [r7, #4]
	}
 800a38c:	4618      	mov	r0, r3
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr
 800a398:	20001118 	.word	0x20001118
 800a39c:	20001134 	.word	0x20001134

0800a3a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d056      	beq.n	800a464 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a3b6:	4b2e      	ldr	r3, [pc, #184]	; (800a470 <xTaskPriorityDisinherit+0xd0>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	693a      	ldr	r2, [r7, #16]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d00a      	beq.n	800a3d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	60fb      	str	r3, [r7, #12]
}
 800a3d2:	bf00      	nop
 800a3d4:	e7fe      	b.n	800a3d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10a      	bne.n	800a3f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e2:	f383 8811 	msr	BASEPRI, r3
 800a3e6:	f3bf 8f6f 	isb	sy
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	60bb      	str	r3, [r7, #8]
}
 800a3f0:	bf00      	nop
 800a3f2:	e7fe      	b.n	800a3f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3f8:	1e5a      	subs	r2, r3, #1
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a406:	429a      	cmp	r2, r3
 800a408:	d02c      	beq.n	800a464 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d128      	bne.n	800a464 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	3304      	adds	r3, #4
 800a416:	4618      	mov	r0, r3
 800a418:	f7fe fc70 	bl	8008cfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a428:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a434:	4b0f      	ldr	r3, [pc, #60]	; (800a474 <xTaskPriorityDisinherit+0xd4>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d903      	bls.n	800a444 <xTaskPriorityDisinherit+0xa4>
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a440:	4a0c      	ldr	r2, [pc, #48]	; (800a474 <xTaskPriorityDisinherit+0xd4>)
 800a442:	6013      	str	r3, [r2, #0]
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a448:	4613      	mov	r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4413      	add	r3, r2
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	4a09      	ldr	r2, [pc, #36]	; (800a478 <xTaskPriorityDisinherit+0xd8>)
 800a452:	441a      	add	r2, r3
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	3304      	adds	r3, #4
 800a458:	4619      	mov	r1, r3
 800a45a:	4610      	mov	r0, r2
 800a45c:	f7fe fbf1 	bl	8008c42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a460:	2301      	movs	r3, #1
 800a462:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a464:	697b      	ldr	r3, [r7, #20]
	}
 800a466:	4618      	mov	r0, r3
 800a468:	3718      	adds	r7, #24
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	20000c38 	.word	0x20000c38
 800a474:	20001114 	.word	0x20001114
 800a478:	20000c3c 	.word	0x20000c3c

0800a47c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a486:	4b21      	ldr	r3, [pc, #132]	; (800a50c <prvAddCurrentTaskToDelayedList+0x90>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a48c:	4b20      	ldr	r3, [pc, #128]	; (800a510 <prvAddCurrentTaskToDelayedList+0x94>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	3304      	adds	r3, #4
 800a492:	4618      	mov	r0, r3
 800a494:	f7fe fc32 	bl	8008cfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a49e:	d10a      	bne.n	800a4b6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d007      	beq.n	800a4b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4a6:	4b1a      	ldr	r3, [pc, #104]	; (800a510 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3304      	adds	r3, #4
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	4819      	ldr	r0, [pc, #100]	; (800a514 <prvAddCurrentTaskToDelayedList+0x98>)
 800a4b0:	f7fe fbc7 	bl	8008c42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a4b4:	e026      	b.n	800a504 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a4b6:	68fa      	ldr	r2, [r7, #12]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a4be:	4b14      	ldr	r3, [pc, #80]	; (800a510 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d209      	bcs.n	800a4e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4ce:	4b12      	ldr	r3, [pc, #72]	; (800a518 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	4b0f      	ldr	r3, [pc, #60]	; (800a510 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3304      	adds	r3, #4
 800a4d8:	4619      	mov	r1, r3
 800a4da:	4610      	mov	r0, r2
 800a4dc:	f7fe fbd5 	bl	8008c8a <vListInsert>
}
 800a4e0:	e010      	b.n	800a504 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4e2:	4b0e      	ldr	r3, [pc, #56]	; (800a51c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	4b0a      	ldr	r3, [pc, #40]	; (800a510 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3304      	adds	r3, #4
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	4610      	mov	r0, r2
 800a4f0:	f7fe fbcb 	bl	8008c8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a4f4:	4b0a      	ldr	r3, [pc, #40]	; (800a520 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d202      	bcs.n	800a504 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a4fe:	4a08      	ldr	r2, [pc, #32]	; (800a520 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	6013      	str	r3, [r2, #0]
}
 800a504:	bf00      	nop
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	20001110 	.word	0x20001110
 800a510:	20000c38 	.word	0x20000c38
 800a514:	200010f8 	.word	0x200010f8
 800a518:	200010c8 	.word	0x200010c8
 800a51c:	200010c4 	.word	0x200010c4
 800a520:	2000112c 	.word	0x2000112c

0800a524 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b08a      	sub	sp, #40	; 0x28
 800a528:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a52a:	2300      	movs	r3, #0
 800a52c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a52e:	f000 fb07 	bl	800ab40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a532:	4b1c      	ldr	r3, [pc, #112]	; (800a5a4 <xTimerCreateTimerTask+0x80>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d021      	beq.n	800a57e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a53a:	2300      	movs	r3, #0
 800a53c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a53e:	2300      	movs	r3, #0
 800a540:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a542:	1d3a      	adds	r2, r7, #4
 800a544:	f107 0108 	add.w	r1, r7, #8
 800a548:	f107 030c 	add.w	r3, r7, #12
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7fe fb31 	bl	8008bb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a552:	6879      	ldr	r1, [r7, #4]
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	9202      	str	r2, [sp, #8]
 800a55a:	9301      	str	r3, [sp, #4]
 800a55c:	2302      	movs	r3, #2
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	2300      	movs	r3, #0
 800a562:	460a      	mov	r2, r1
 800a564:	4910      	ldr	r1, [pc, #64]	; (800a5a8 <xTimerCreateTimerTask+0x84>)
 800a566:	4811      	ldr	r0, [pc, #68]	; (800a5ac <xTimerCreateTimerTask+0x88>)
 800a568:	f7ff f8de 	bl	8009728 <xTaskCreateStatic>
 800a56c:	4603      	mov	r3, r0
 800a56e:	4a10      	ldr	r2, [pc, #64]	; (800a5b0 <xTimerCreateTimerTask+0x8c>)
 800a570:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a572:	4b0f      	ldr	r3, [pc, #60]	; (800a5b0 <xTimerCreateTimerTask+0x8c>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a57a:	2301      	movs	r3, #1
 800a57c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10a      	bne.n	800a59a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a588:	f383 8811 	msr	BASEPRI, r3
 800a58c:	f3bf 8f6f 	isb	sy
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	613b      	str	r3, [r7, #16]
}
 800a596:	bf00      	nop
 800a598:	e7fe      	b.n	800a598 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a59a:	697b      	ldr	r3, [r7, #20]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3718      	adds	r7, #24
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	20001168 	.word	0x20001168
 800a5a8:	0800eb68 	.word	0x0800eb68
 800a5ac:	0800a6e9 	.word	0x0800a6e9
 800a5b0:	2000116c 	.word	0x2000116c

0800a5b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b08a      	sub	sp, #40	; 0x28
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	607a      	str	r2, [r7, #4]
 800a5c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d10a      	bne.n	800a5e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	623b      	str	r3, [r7, #32]
}
 800a5de:	bf00      	nop
 800a5e0:	e7fe      	b.n	800a5e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a5e2:	4b1a      	ldr	r3, [pc, #104]	; (800a64c <xTimerGenericCommand+0x98>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d02a      	beq.n	800a640 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	2b05      	cmp	r3, #5
 800a5fa:	dc18      	bgt.n	800a62e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a5fc:	f7ff feb2 	bl	800a364 <xTaskGetSchedulerState>
 800a600:	4603      	mov	r3, r0
 800a602:	2b02      	cmp	r3, #2
 800a604:	d109      	bne.n	800a61a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a606:	4b11      	ldr	r3, [pc, #68]	; (800a64c <xTimerGenericCommand+0x98>)
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	f107 0110 	add.w	r1, r7, #16
 800a60e:	2300      	movs	r3, #0
 800a610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a612:	f7fe fca1 	bl	8008f58 <xQueueGenericSend>
 800a616:	6278      	str	r0, [r7, #36]	; 0x24
 800a618:	e012      	b.n	800a640 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a61a:	4b0c      	ldr	r3, [pc, #48]	; (800a64c <xTimerGenericCommand+0x98>)
 800a61c:	6818      	ldr	r0, [r3, #0]
 800a61e:	f107 0110 	add.w	r1, r7, #16
 800a622:	2300      	movs	r3, #0
 800a624:	2200      	movs	r2, #0
 800a626:	f7fe fc97 	bl	8008f58 <xQueueGenericSend>
 800a62a:	6278      	str	r0, [r7, #36]	; 0x24
 800a62c:	e008      	b.n	800a640 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a62e:	4b07      	ldr	r3, [pc, #28]	; (800a64c <xTimerGenericCommand+0x98>)
 800a630:	6818      	ldr	r0, [r3, #0]
 800a632:	f107 0110 	add.w	r1, r7, #16
 800a636:	2300      	movs	r3, #0
 800a638:	683a      	ldr	r2, [r7, #0]
 800a63a:	f7fe fd8b 	bl	8009154 <xQueueGenericSendFromISR>
 800a63e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a642:	4618      	mov	r0, r3
 800a644:	3728      	adds	r7, #40	; 0x28
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	20001168 	.word	0x20001168

0800a650 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b088      	sub	sp, #32
 800a654:	af02      	add	r7, sp, #8
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a65a:	4b22      	ldr	r3, [pc, #136]	; (800a6e4 <prvProcessExpiredTimer+0x94>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	3304      	adds	r3, #4
 800a668:	4618      	mov	r0, r3
 800a66a:	f7fe fb47 	bl	8008cfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a674:	f003 0304 	and.w	r3, r3, #4
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d022      	beq.n	800a6c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	699a      	ldr	r2, [r3, #24]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	18d1      	adds	r1, r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	683a      	ldr	r2, [r7, #0]
 800a688:	6978      	ldr	r0, [r7, #20]
 800a68a:	f000 f8d1 	bl	800a830 <prvInsertTimerInActiveList>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d01f      	beq.n	800a6d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a694:	2300      	movs	r3, #0
 800a696:	9300      	str	r3, [sp, #0]
 800a698:	2300      	movs	r3, #0
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	2100      	movs	r1, #0
 800a69e:	6978      	ldr	r0, [r7, #20]
 800a6a0:	f7ff ff88 	bl	800a5b4 <xTimerGenericCommand>
 800a6a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d113      	bne.n	800a6d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b0:	f383 8811 	msr	BASEPRI, r3
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	60fb      	str	r3, [r7, #12]
}
 800a6be:	bf00      	nop
 800a6c0:	e7fe      	b.n	800a6c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6c8:	f023 0301 	bic.w	r3, r3, #1
 800a6cc:	b2da      	uxtb	r2, r3
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	6a1b      	ldr	r3, [r3, #32]
 800a6d8:	6978      	ldr	r0, [r7, #20]
 800a6da:	4798      	blx	r3
}
 800a6dc:	bf00      	nop
 800a6de:	3718      	adds	r7, #24
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	20001160 	.word	0x20001160

0800a6e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a6f0:	f107 0308 	add.w	r3, r7, #8
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f000 f857 	bl	800a7a8 <prvGetNextExpireTime>
 800a6fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	4619      	mov	r1, r3
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f000 f803 	bl	800a70c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a706:	f000 f8d5 	bl	800a8b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a70a:	e7f1      	b.n	800a6f0 <prvTimerTask+0x8>

0800a70c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a716:	f7ff fa43 	bl	8009ba0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a71a:	f107 0308 	add.w	r3, r7, #8
 800a71e:	4618      	mov	r0, r3
 800a720:	f000 f866 	bl	800a7f0 <prvSampleTimeNow>
 800a724:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d130      	bne.n	800a78e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10a      	bne.n	800a748 <prvProcessTimerOrBlockTask+0x3c>
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	429a      	cmp	r2, r3
 800a738:	d806      	bhi.n	800a748 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a73a:	f7ff fa3f 	bl	8009bbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a73e:	68f9      	ldr	r1, [r7, #12]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f7ff ff85 	bl	800a650 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a746:	e024      	b.n	800a792 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d008      	beq.n	800a760 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a74e:	4b13      	ldr	r3, [pc, #76]	; (800a79c <prvProcessTimerOrBlockTask+0x90>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d101      	bne.n	800a75c <prvProcessTimerOrBlockTask+0x50>
 800a758:	2301      	movs	r3, #1
 800a75a:	e000      	b.n	800a75e <prvProcessTimerOrBlockTask+0x52>
 800a75c:	2300      	movs	r3, #0
 800a75e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a760:	4b0f      	ldr	r3, [pc, #60]	; (800a7a0 <prvProcessTimerOrBlockTask+0x94>)
 800a762:	6818      	ldr	r0, [r3, #0]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	1ad3      	subs	r3, r2, r3
 800a76a:	683a      	ldr	r2, [r7, #0]
 800a76c:	4619      	mov	r1, r3
 800a76e:	f7fe ffa7 	bl	80096c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a772:	f7ff fa23 	bl	8009bbc <xTaskResumeAll>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d10a      	bne.n	800a792 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a77c:	4b09      	ldr	r3, [pc, #36]	; (800a7a4 <prvProcessTimerOrBlockTask+0x98>)
 800a77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a782:	601a      	str	r2, [r3, #0]
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	f3bf 8f6f 	isb	sy
}
 800a78c:	e001      	b.n	800a792 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a78e:	f7ff fa15 	bl	8009bbc <xTaskResumeAll>
}
 800a792:	bf00      	nop
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	20001164 	.word	0x20001164
 800a7a0:	20001168 	.word	0x20001168
 800a7a4:	e000ed04 	.word	0xe000ed04

0800a7a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a7b0:	4b0e      	ldr	r3, [pc, #56]	; (800a7ec <prvGetNextExpireTime+0x44>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d101      	bne.n	800a7be <prvGetNextExpireTime+0x16>
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	e000      	b.n	800a7c0 <prvGetNextExpireTime+0x18>
 800a7be:	2200      	movs	r2, #0
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d105      	bne.n	800a7d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7cc:	4b07      	ldr	r3, [pc, #28]	; (800a7ec <prvGetNextExpireTime+0x44>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	60fb      	str	r3, [r7, #12]
 800a7d6:	e001      	b.n	800a7dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3714      	adds	r7, #20
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	20001160 	.word	0x20001160

0800a7f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a7f8:	f7ff fa7e 	bl	8009cf8 <xTaskGetTickCount>
 800a7fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a7fe:	4b0b      	ldr	r3, [pc, #44]	; (800a82c <prvSampleTimeNow+0x3c>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	429a      	cmp	r2, r3
 800a806:	d205      	bcs.n	800a814 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a808:	f000 f936 	bl	800aa78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	601a      	str	r2, [r3, #0]
 800a812:	e002      	b.n	800a81a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a81a:	4a04      	ldr	r2, [pc, #16]	; (800a82c <prvSampleTimeNow+0x3c>)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a820:	68fb      	ldr	r3, [r7, #12]
}
 800a822:	4618      	mov	r0, r3
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	20001170 	.word	0x20001170

0800a830 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b086      	sub	sp, #24
 800a834:	af00      	add	r7, sp, #0
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	607a      	str	r2, [r7, #4]
 800a83c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a83e:	2300      	movs	r3, #0
 800a840:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	68fa      	ldr	r2, [r7, #12]
 800a84c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	429a      	cmp	r2, r3
 800a854:	d812      	bhi.n	800a87c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	1ad2      	subs	r2, r2, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	699b      	ldr	r3, [r3, #24]
 800a860:	429a      	cmp	r2, r3
 800a862:	d302      	bcc.n	800a86a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a864:	2301      	movs	r3, #1
 800a866:	617b      	str	r3, [r7, #20]
 800a868:	e01b      	b.n	800a8a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a86a:	4b10      	ldr	r3, [pc, #64]	; (800a8ac <prvInsertTimerInActiveList+0x7c>)
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	3304      	adds	r3, #4
 800a872:	4619      	mov	r1, r3
 800a874:	4610      	mov	r0, r2
 800a876:	f7fe fa08 	bl	8008c8a <vListInsert>
 800a87a:	e012      	b.n	800a8a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	429a      	cmp	r2, r3
 800a882:	d206      	bcs.n	800a892 <prvInsertTimerInActiveList+0x62>
 800a884:	68ba      	ldr	r2, [r7, #8]
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d302      	bcc.n	800a892 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a88c:	2301      	movs	r3, #1
 800a88e:	617b      	str	r3, [r7, #20]
 800a890:	e007      	b.n	800a8a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a892:	4b07      	ldr	r3, [pc, #28]	; (800a8b0 <prvInsertTimerInActiveList+0x80>)
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	3304      	adds	r3, #4
 800a89a:	4619      	mov	r1, r3
 800a89c:	4610      	mov	r0, r2
 800a89e:	f7fe f9f4 	bl	8008c8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a8a2:	697b      	ldr	r3, [r7, #20]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3718      	adds	r7, #24
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	20001164 	.word	0x20001164
 800a8b0:	20001160 	.word	0x20001160

0800a8b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b08e      	sub	sp, #56	; 0x38
 800a8b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a8ba:	e0ca      	b.n	800aa52 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	da18      	bge.n	800a8f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a8c2:	1d3b      	adds	r3, r7, #4
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d10a      	bne.n	800a8e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	61fb      	str	r3, [r7, #28]
}
 800a8e0:	bf00      	nop
 800a8e2:	e7fe      	b.n	800a8e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8ea:	6850      	ldr	r0, [r2, #4]
 800a8ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8ee:	6892      	ldr	r2, [r2, #8]
 800a8f0:	4611      	mov	r1, r2
 800a8f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f2c0 80aa 	blt.w	800aa50 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a902:	695b      	ldr	r3, [r3, #20]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d004      	beq.n	800a912 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90a:	3304      	adds	r3, #4
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fe f9f5 	bl	8008cfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a912:	463b      	mov	r3, r7
 800a914:	4618      	mov	r0, r3
 800a916:	f7ff ff6b 	bl	800a7f0 <prvSampleTimeNow>
 800a91a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2b09      	cmp	r3, #9
 800a920:	f200 8097 	bhi.w	800aa52 <prvProcessReceivedCommands+0x19e>
 800a924:	a201      	add	r2, pc, #4	; (adr r2, 800a92c <prvProcessReceivedCommands+0x78>)
 800a926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92a:	bf00      	nop
 800a92c:	0800a955 	.word	0x0800a955
 800a930:	0800a955 	.word	0x0800a955
 800a934:	0800a955 	.word	0x0800a955
 800a938:	0800a9c9 	.word	0x0800a9c9
 800a93c:	0800a9dd 	.word	0x0800a9dd
 800a940:	0800aa27 	.word	0x0800aa27
 800a944:	0800a955 	.word	0x0800a955
 800a948:	0800a955 	.word	0x0800a955
 800a94c:	0800a9c9 	.word	0x0800a9c9
 800a950:	0800a9dd 	.word	0x0800a9dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a95a:	f043 0301 	orr.w	r3, r3, #1
 800a95e:	b2da      	uxtb	r2, r3
 800a960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a962:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96a:	699b      	ldr	r3, [r3, #24]
 800a96c:	18d1      	adds	r1, r2, r3
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a974:	f7ff ff5c 	bl	800a830 <prvInsertTimerInActiveList>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d069      	beq.n	800aa52 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a980:	6a1b      	ldr	r3, [r3, #32]
 800a982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a984:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a98c:	f003 0304 	and.w	r3, r3, #4
 800a990:	2b00      	cmp	r3, #0
 800a992:	d05e      	beq.n	800aa52 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a998:	699b      	ldr	r3, [r3, #24]
 800a99a:	441a      	add	r2, r3
 800a99c:	2300      	movs	r3, #0
 800a99e:	9300      	str	r3, [sp, #0]
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9a6:	f7ff fe05 	bl	800a5b4 <xTimerGenericCommand>
 800a9aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a9ac:	6a3b      	ldr	r3, [r7, #32]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d14f      	bne.n	800aa52 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b6:	f383 8811 	msr	BASEPRI, r3
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	61bb      	str	r3, [r7, #24]
}
 800a9c4:	bf00      	nop
 800a9c6:	e7fe      	b.n	800a9c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9ce:	f023 0301 	bic.w	r3, r3, #1
 800a9d2:	b2da      	uxtb	r2, r3
 800a9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a9da:	e03a      	b.n	800aa52 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9e2:	f043 0301 	orr.w	r3, r3, #1
 800a9e6:	b2da      	uxtb	r2, r3
 800a9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a9ee:	68ba      	ldr	r2, [r7, #8]
 800a9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f6:	699b      	ldr	r3, [r3, #24]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d10a      	bne.n	800aa12 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa00:	f383 8811 	msr	BASEPRI, r3
 800aa04:	f3bf 8f6f 	isb	sy
 800aa08:	f3bf 8f4f 	dsb	sy
 800aa0c:	617b      	str	r3, [r7, #20]
}
 800aa0e:	bf00      	nop
 800aa10:	e7fe      	b.n	800aa10 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa14:	699a      	ldr	r2, [r3, #24]
 800aa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa18:	18d1      	adds	r1, r2, r3
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa20:	f7ff ff06 	bl	800a830 <prvInsertTimerInActiveList>
					break;
 800aa24:	e015      	b.n	800aa52 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aa26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa2c:	f003 0302 	and.w	r3, r3, #2
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d103      	bne.n	800aa3c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aa34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa36:	f000 fbdb 	bl	800b1f0 <vPortFree>
 800aa3a:	e00a      	b.n	800aa52 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa42:	f023 0301 	bic.w	r3, r3, #1
 800aa46:	b2da      	uxtb	r2, r3
 800aa48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aa4e:	e000      	b.n	800aa52 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aa50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa52:	4b08      	ldr	r3, [pc, #32]	; (800aa74 <prvProcessReceivedCommands+0x1c0>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	1d39      	adds	r1, r7, #4
 800aa58:	2200      	movs	r2, #0
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fe fc16 	bl	800928c <xQueueReceive>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f47f af2a 	bne.w	800a8bc <prvProcessReceivedCommands+0x8>
	}
}
 800aa68:	bf00      	nop
 800aa6a:	bf00      	nop
 800aa6c:	3730      	adds	r7, #48	; 0x30
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	20001168 	.word	0x20001168

0800aa78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b088      	sub	sp, #32
 800aa7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa7e:	e048      	b.n	800ab12 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa80:	4b2d      	ldr	r3, [pc, #180]	; (800ab38 <prvSwitchTimerLists+0xc0>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa8a:	4b2b      	ldr	r3, [pc, #172]	; (800ab38 <prvSwitchTimerLists+0xc0>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	3304      	adds	r3, #4
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7fe f92f 	bl	8008cfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6a1b      	ldr	r3, [r3, #32]
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaac:	f003 0304 	and.w	r3, r3, #4
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d02e      	beq.n	800ab12 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	699b      	ldr	r3, [r3, #24]
 800aab8:	693a      	ldr	r2, [r7, #16]
 800aaba:	4413      	add	r3, r2
 800aabc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aabe:	68ba      	ldr	r2, [r7, #8]
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d90e      	bls.n	800aae4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	68ba      	ldr	r2, [r7, #8]
 800aaca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aad2:	4b19      	ldr	r3, [pc, #100]	; (800ab38 <prvSwitchTimerLists+0xc0>)
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	3304      	adds	r3, #4
 800aada:	4619      	mov	r1, r3
 800aadc:	4610      	mov	r0, r2
 800aade:	f7fe f8d4 	bl	8008c8a <vListInsert>
 800aae2:	e016      	b.n	800ab12 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aae4:	2300      	movs	r3, #0
 800aae6:	9300      	str	r3, [sp, #0]
 800aae8:	2300      	movs	r3, #0
 800aaea:	693a      	ldr	r2, [r7, #16]
 800aaec:	2100      	movs	r1, #0
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f7ff fd60 	bl	800a5b4 <xTimerGenericCommand>
 800aaf4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d10a      	bne.n	800ab12 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab00:	f383 8811 	msr	BASEPRI, r3
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	603b      	str	r3, [r7, #0]
}
 800ab0e:	bf00      	nop
 800ab10:	e7fe      	b.n	800ab10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab12:	4b09      	ldr	r3, [pc, #36]	; (800ab38 <prvSwitchTimerLists+0xc0>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d1b1      	bne.n	800aa80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ab1c:	4b06      	ldr	r3, [pc, #24]	; (800ab38 <prvSwitchTimerLists+0xc0>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ab22:	4b06      	ldr	r3, [pc, #24]	; (800ab3c <prvSwitchTimerLists+0xc4>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4a04      	ldr	r2, [pc, #16]	; (800ab38 <prvSwitchTimerLists+0xc0>)
 800ab28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ab2a:	4a04      	ldr	r2, [pc, #16]	; (800ab3c <prvSwitchTimerLists+0xc4>)
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	6013      	str	r3, [r2, #0]
}
 800ab30:	bf00      	nop
 800ab32:	3718      	adds	r7, #24
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	20001160 	.word	0x20001160
 800ab3c:	20001164 	.word	0x20001164

0800ab40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ab46:	f000 f965 	bl	800ae14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ab4a:	4b15      	ldr	r3, [pc, #84]	; (800aba0 <prvCheckForValidListAndQueue+0x60>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d120      	bne.n	800ab94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ab52:	4814      	ldr	r0, [pc, #80]	; (800aba4 <prvCheckForValidListAndQueue+0x64>)
 800ab54:	f7fe f848 	bl	8008be8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ab58:	4813      	ldr	r0, [pc, #76]	; (800aba8 <prvCheckForValidListAndQueue+0x68>)
 800ab5a:	f7fe f845 	bl	8008be8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab5e:	4b13      	ldr	r3, [pc, #76]	; (800abac <prvCheckForValidListAndQueue+0x6c>)
 800ab60:	4a10      	ldr	r2, [pc, #64]	; (800aba4 <prvCheckForValidListAndQueue+0x64>)
 800ab62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab64:	4b12      	ldr	r3, [pc, #72]	; (800abb0 <prvCheckForValidListAndQueue+0x70>)
 800ab66:	4a10      	ldr	r2, [pc, #64]	; (800aba8 <prvCheckForValidListAndQueue+0x68>)
 800ab68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	4b11      	ldr	r3, [pc, #68]	; (800abb4 <prvCheckForValidListAndQueue+0x74>)
 800ab70:	4a11      	ldr	r2, [pc, #68]	; (800abb8 <prvCheckForValidListAndQueue+0x78>)
 800ab72:	2110      	movs	r1, #16
 800ab74:	200a      	movs	r0, #10
 800ab76:	f7fe f953 	bl	8008e20 <xQueueGenericCreateStatic>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	4a08      	ldr	r2, [pc, #32]	; (800aba0 <prvCheckForValidListAndQueue+0x60>)
 800ab7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ab80:	4b07      	ldr	r3, [pc, #28]	; (800aba0 <prvCheckForValidListAndQueue+0x60>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d005      	beq.n	800ab94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ab88:	4b05      	ldr	r3, [pc, #20]	; (800aba0 <prvCheckForValidListAndQueue+0x60>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	490b      	ldr	r1, [pc, #44]	; (800abbc <prvCheckForValidListAndQueue+0x7c>)
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe fd6c 	bl	800966c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab94:	f000 f96e 	bl	800ae74 <vPortExitCritical>
}
 800ab98:	bf00      	nop
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	20001168 	.word	0x20001168
 800aba4:	20001138 	.word	0x20001138
 800aba8:	2000114c 	.word	0x2000114c
 800abac:	20001160 	.word	0x20001160
 800abb0:	20001164 	.word	0x20001164
 800abb4:	20001214 	.word	0x20001214
 800abb8:	20001174 	.word	0x20001174
 800abbc:	0800eb70 	.word	0x0800eb70

0800abc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	3b04      	subs	r3, #4
 800abd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800abd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	3b04      	subs	r3, #4
 800abde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	f023 0201 	bic.w	r2, r3, #1
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	3b04      	subs	r3, #4
 800abee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800abf0:	4a0c      	ldr	r2, [pc, #48]	; (800ac24 <pxPortInitialiseStack+0x64>)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	3b14      	subs	r3, #20
 800abfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	3b04      	subs	r3, #4
 800ac06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f06f 0202 	mvn.w	r2, #2
 800ac0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	3b20      	subs	r3, #32
 800ac14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac16:	68fb      	ldr	r3, [r7, #12]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr
 800ac24:	0800ac29 	.word	0x0800ac29

0800ac28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac32:	4b12      	ldr	r3, [pc, #72]	; (800ac7c <prvTaskExitError+0x54>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac3a:	d00a      	beq.n	800ac52 <prvTaskExitError+0x2a>
	__asm volatile
 800ac3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac40:	f383 8811 	msr	BASEPRI, r3
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	60fb      	str	r3, [r7, #12]
}
 800ac4e:	bf00      	nop
 800ac50:	e7fe      	b.n	800ac50 <prvTaskExitError+0x28>
	__asm volatile
 800ac52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac56:	f383 8811 	msr	BASEPRI, r3
 800ac5a:	f3bf 8f6f 	isb	sy
 800ac5e:	f3bf 8f4f 	dsb	sy
 800ac62:	60bb      	str	r3, [r7, #8]
}
 800ac64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac66:	bf00      	nop
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d0fc      	beq.n	800ac68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac6e:	bf00      	nop
 800ac70:	bf00      	nop
 800ac72:	3714      	adds	r7, #20
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr
 800ac7c:	2000002c 	.word	0x2000002c

0800ac80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac80:	4b07      	ldr	r3, [pc, #28]	; (800aca0 <pxCurrentTCBConst2>)
 800ac82:	6819      	ldr	r1, [r3, #0]
 800ac84:	6808      	ldr	r0, [r1, #0]
 800ac86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8a:	f380 8809 	msr	PSP, r0
 800ac8e:	f3bf 8f6f 	isb	sy
 800ac92:	f04f 0000 	mov.w	r0, #0
 800ac96:	f380 8811 	msr	BASEPRI, r0
 800ac9a:	4770      	bx	lr
 800ac9c:	f3af 8000 	nop.w

0800aca0 <pxCurrentTCBConst2>:
 800aca0:	20000c38 	.word	0x20000c38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aca4:	bf00      	nop
 800aca6:	bf00      	nop

0800aca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aca8:	4808      	ldr	r0, [pc, #32]	; (800accc <prvPortStartFirstTask+0x24>)
 800acaa:	6800      	ldr	r0, [r0, #0]
 800acac:	6800      	ldr	r0, [r0, #0]
 800acae:	f380 8808 	msr	MSP, r0
 800acb2:	f04f 0000 	mov.w	r0, #0
 800acb6:	f380 8814 	msr	CONTROL, r0
 800acba:	b662      	cpsie	i
 800acbc:	b661      	cpsie	f
 800acbe:	f3bf 8f4f 	dsb	sy
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	df00      	svc	0
 800acc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800acca:	bf00      	nop
 800accc:	e000ed08 	.word	0xe000ed08

0800acd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800acd6:	4b46      	ldr	r3, [pc, #280]	; (800adf0 <xPortStartScheduler+0x120>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a46      	ldr	r2, [pc, #280]	; (800adf4 <xPortStartScheduler+0x124>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d10a      	bne.n	800acf6 <xPortStartScheduler+0x26>
	__asm volatile
 800ace0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace4:	f383 8811 	msr	BASEPRI, r3
 800ace8:	f3bf 8f6f 	isb	sy
 800acec:	f3bf 8f4f 	dsb	sy
 800acf0:	613b      	str	r3, [r7, #16]
}
 800acf2:	bf00      	nop
 800acf4:	e7fe      	b.n	800acf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800acf6:	4b3e      	ldr	r3, [pc, #248]	; (800adf0 <xPortStartScheduler+0x120>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a3f      	ldr	r2, [pc, #252]	; (800adf8 <xPortStartScheduler+0x128>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d10a      	bne.n	800ad16 <xPortStartScheduler+0x46>
	__asm volatile
 800ad00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad04:	f383 8811 	msr	BASEPRI, r3
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	60fb      	str	r3, [r7, #12]
}
 800ad12:	bf00      	nop
 800ad14:	e7fe      	b.n	800ad14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad16:	4b39      	ldr	r3, [pc, #228]	; (800adfc <xPortStartScheduler+0x12c>)
 800ad18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	22ff      	movs	r2, #255	; 0xff
 800ad26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad30:	78fb      	ldrb	r3, [r7, #3]
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad38:	b2da      	uxtb	r2, r3
 800ad3a:	4b31      	ldr	r3, [pc, #196]	; (800ae00 <xPortStartScheduler+0x130>)
 800ad3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad3e:	4b31      	ldr	r3, [pc, #196]	; (800ae04 <xPortStartScheduler+0x134>)
 800ad40:	2207      	movs	r2, #7
 800ad42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad44:	e009      	b.n	800ad5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ad46:	4b2f      	ldr	r3, [pc, #188]	; (800ae04 <xPortStartScheduler+0x134>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	4a2d      	ldr	r2, [pc, #180]	; (800ae04 <xPortStartScheduler+0x134>)
 800ad4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad50:	78fb      	ldrb	r3, [r7, #3]
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	005b      	lsls	r3, r3, #1
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad5a:	78fb      	ldrb	r3, [r7, #3]
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad62:	2b80      	cmp	r3, #128	; 0x80
 800ad64:	d0ef      	beq.n	800ad46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad66:	4b27      	ldr	r3, [pc, #156]	; (800ae04 <xPortStartScheduler+0x134>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f1c3 0307 	rsb	r3, r3, #7
 800ad6e:	2b04      	cmp	r3, #4
 800ad70:	d00a      	beq.n	800ad88 <xPortStartScheduler+0xb8>
	__asm volatile
 800ad72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad76:	f383 8811 	msr	BASEPRI, r3
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	f3bf 8f4f 	dsb	sy
 800ad82:	60bb      	str	r3, [r7, #8]
}
 800ad84:	bf00      	nop
 800ad86:	e7fe      	b.n	800ad86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad88:	4b1e      	ldr	r3, [pc, #120]	; (800ae04 <xPortStartScheduler+0x134>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	021b      	lsls	r3, r3, #8
 800ad8e:	4a1d      	ldr	r2, [pc, #116]	; (800ae04 <xPortStartScheduler+0x134>)
 800ad90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad92:	4b1c      	ldr	r3, [pc, #112]	; (800ae04 <xPortStartScheduler+0x134>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad9a:	4a1a      	ldr	r2, [pc, #104]	; (800ae04 <xPortStartScheduler+0x134>)
 800ad9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ada6:	4b18      	ldr	r3, [pc, #96]	; (800ae08 <xPortStartScheduler+0x138>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a17      	ldr	r2, [pc, #92]	; (800ae08 <xPortStartScheduler+0x138>)
 800adac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800adb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800adb2:	4b15      	ldr	r3, [pc, #84]	; (800ae08 <xPortStartScheduler+0x138>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a14      	ldr	r2, [pc, #80]	; (800ae08 <xPortStartScheduler+0x138>)
 800adb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800adbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800adbe:	f000 f8dd 	bl	800af7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800adc2:	4b12      	ldr	r3, [pc, #72]	; (800ae0c <xPortStartScheduler+0x13c>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800adc8:	f000 f8fc 	bl	800afc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800adcc:	4b10      	ldr	r3, [pc, #64]	; (800ae10 <xPortStartScheduler+0x140>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a0f      	ldr	r2, [pc, #60]	; (800ae10 <xPortStartScheduler+0x140>)
 800add2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800add6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800add8:	f7ff ff66 	bl	800aca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800addc:	f7ff f856 	bl	8009e8c <vTaskSwitchContext>
	prvTaskExitError();
 800ade0:	f7ff ff22 	bl	800ac28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3718      	adds	r7, #24
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	e000ed00 	.word	0xe000ed00
 800adf4:	410fc271 	.word	0x410fc271
 800adf8:	410fc270 	.word	0x410fc270
 800adfc:	e000e400 	.word	0xe000e400
 800ae00:	20001264 	.word	0x20001264
 800ae04:	20001268 	.word	0x20001268
 800ae08:	e000ed20 	.word	0xe000ed20
 800ae0c:	2000002c 	.word	0x2000002c
 800ae10:	e000ef34 	.word	0xe000ef34

0800ae14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
	__asm volatile
 800ae1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1e:	f383 8811 	msr	BASEPRI, r3
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	f3bf 8f4f 	dsb	sy
 800ae2a:	607b      	str	r3, [r7, #4]
}
 800ae2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ae2e:	4b0f      	ldr	r3, [pc, #60]	; (800ae6c <vPortEnterCritical+0x58>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	3301      	adds	r3, #1
 800ae34:	4a0d      	ldr	r2, [pc, #52]	; (800ae6c <vPortEnterCritical+0x58>)
 800ae36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae38:	4b0c      	ldr	r3, [pc, #48]	; (800ae6c <vPortEnterCritical+0x58>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d10f      	bne.n	800ae60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae40:	4b0b      	ldr	r3, [pc, #44]	; (800ae70 <vPortEnterCritical+0x5c>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d00a      	beq.n	800ae60 <vPortEnterCritical+0x4c>
	__asm volatile
 800ae4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4e:	f383 8811 	msr	BASEPRI, r3
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	603b      	str	r3, [r7, #0]
}
 800ae5c:	bf00      	nop
 800ae5e:	e7fe      	b.n	800ae5e <vPortEnterCritical+0x4a>
	}
}
 800ae60:	bf00      	nop
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr
 800ae6c:	2000002c 	.word	0x2000002c
 800ae70:	e000ed04 	.word	0xe000ed04

0800ae74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae7a:	4b12      	ldr	r3, [pc, #72]	; (800aec4 <vPortExitCritical+0x50>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d10a      	bne.n	800ae98 <vPortExitCritical+0x24>
	__asm volatile
 800ae82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae86:	f383 8811 	msr	BASEPRI, r3
 800ae8a:	f3bf 8f6f 	isb	sy
 800ae8e:	f3bf 8f4f 	dsb	sy
 800ae92:	607b      	str	r3, [r7, #4]
}
 800ae94:	bf00      	nop
 800ae96:	e7fe      	b.n	800ae96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae98:	4b0a      	ldr	r3, [pc, #40]	; (800aec4 <vPortExitCritical+0x50>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	4a09      	ldr	r2, [pc, #36]	; (800aec4 <vPortExitCritical+0x50>)
 800aea0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aea2:	4b08      	ldr	r3, [pc, #32]	; (800aec4 <vPortExitCritical+0x50>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d105      	bne.n	800aeb6 <vPortExitCritical+0x42>
 800aeaa:	2300      	movs	r3, #0
 800aeac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	f383 8811 	msr	BASEPRI, r3
}
 800aeb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aeb6:	bf00      	nop
 800aeb8:	370c      	adds	r7, #12
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop
 800aec4:	2000002c 	.word	0x2000002c
	...

0800aed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aed0:	f3ef 8009 	mrs	r0, PSP
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	4b15      	ldr	r3, [pc, #84]	; (800af30 <pxCurrentTCBConst>)
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	f01e 0f10 	tst.w	lr, #16
 800aee0:	bf08      	it	eq
 800aee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeea:	6010      	str	r0, [r2, #0]
 800aeec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aef4:	f380 8811 	msr	BASEPRI, r0
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	f7fe ffc4 	bl	8009e8c <vTaskSwitchContext>
 800af04:	f04f 0000 	mov.w	r0, #0
 800af08:	f380 8811 	msr	BASEPRI, r0
 800af0c:	bc09      	pop	{r0, r3}
 800af0e:	6819      	ldr	r1, [r3, #0]
 800af10:	6808      	ldr	r0, [r1, #0]
 800af12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af16:	f01e 0f10 	tst.w	lr, #16
 800af1a:	bf08      	it	eq
 800af1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800af20:	f380 8809 	msr	PSP, r0
 800af24:	f3bf 8f6f 	isb	sy
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	f3af 8000 	nop.w

0800af30 <pxCurrentTCBConst>:
 800af30:	20000c38 	.word	0x20000c38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af34:	bf00      	nop
 800af36:	bf00      	nop

0800af38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
	__asm volatile
 800af3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af42:	f383 8811 	msr	BASEPRI, r3
 800af46:	f3bf 8f6f 	isb	sy
 800af4a:	f3bf 8f4f 	dsb	sy
 800af4e:	607b      	str	r3, [r7, #4]
}
 800af50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af52:	f7fe fee1 	bl	8009d18 <xTaskIncrementTick>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d003      	beq.n	800af64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af5c:	4b06      	ldr	r3, [pc, #24]	; (800af78 <xPortSysTickHandler+0x40>)
 800af5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af62:	601a      	str	r2, [r3, #0]
 800af64:	2300      	movs	r3, #0
 800af66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	f383 8811 	msr	BASEPRI, r3
}
 800af6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af70:	bf00      	nop
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	e000ed04 	.word	0xe000ed04

0800af7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af7c:	b480      	push	{r7}
 800af7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af80:	4b0b      	ldr	r3, [pc, #44]	; (800afb0 <vPortSetupTimerInterrupt+0x34>)
 800af82:	2200      	movs	r2, #0
 800af84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af86:	4b0b      	ldr	r3, [pc, #44]	; (800afb4 <vPortSetupTimerInterrupt+0x38>)
 800af88:	2200      	movs	r2, #0
 800af8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af8c:	4b0a      	ldr	r3, [pc, #40]	; (800afb8 <vPortSetupTimerInterrupt+0x3c>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a0a      	ldr	r2, [pc, #40]	; (800afbc <vPortSetupTimerInterrupt+0x40>)
 800af92:	fba2 2303 	umull	r2, r3, r2, r3
 800af96:	099b      	lsrs	r3, r3, #6
 800af98:	4a09      	ldr	r2, [pc, #36]	; (800afc0 <vPortSetupTimerInterrupt+0x44>)
 800af9a:	3b01      	subs	r3, #1
 800af9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af9e:	4b04      	ldr	r3, [pc, #16]	; (800afb0 <vPortSetupTimerInterrupt+0x34>)
 800afa0:	2207      	movs	r2, #7
 800afa2:	601a      	str	r2, [r3, #0]
}
 800afa4:	bf00      	nop
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr
 800afae:	bf00      	nop
 800afb0:	e000e010 	.word	0xe000e010
 800afb4:	e000e018 	.word	0xe000e018
 800afb8:	20000000 	.word	0x20000000
 800afbc:	10624dd3 	.word	0x10624dd3
 800afc0:	e000e014 	.word	0xe000e014

0800afc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800afc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800afd4 <vPortEnableVFP+0x10>
 800afc8:	6801      	ldr	r1, [r0, #0]
 800afca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800afce:	6001      	str	r1, [r0, #0]
 800afd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800afd2:	bf00      	nop
 800afd4:	e000ed88 	.word	0xe000ed88

0800afd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800afde:	f3ef 8305 	mrs	r3, IPSR
 800afe2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2b0f      	cmp	r3, #15
 800afe8:	d914      	bls.n	800b014 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800afea:	4a17      	ldr	r2, [pc, #92]	; (800b048 <vPortValidateInterruptPriority+0x70>)
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	4413      	add	r3, r2
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aff4:	4b15      	ldr	r3, [pc, #84]	; (800b04c <vPortValidateInterruptPriority+0x74>)
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	7afa      	ldrb	r2, [r7, #11]
 800affa:	429a      	cmp	r2, r3
 800affc:	d20a      	bcs.n	800b014 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800affe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b002:	f383 8811 	msr	BASEPRI, r3
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	607b      	str	r3, [r7, #4]
}
 800b010:	bf00      	nop
 800b012:	e7fe      	b.n	800b012 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b014:	4b0e      	ldr	r3, [pc, #56]	; (800b050 <vPortValidateInterruptPriority+0x78>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b01c:	4b0d      	ldr	r3, [pc, #52]	; (800b054 <vPortValidateInterruptPriority+0x7c>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	429a      	cmp	r2, r3
 800b022:	d90a      	bls.n	800b03a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b028:	f383 8811 	msr	BASEPRI, r3
 800b02c:	f3bf 8f6f 	isb	sy
 800b030:	f3bf 8f4f 	dsb	sy
 800b034:	603b      	str	r3, [r7, #0]
}
 800b036:	bf00      	nop
 800b038:	e7fe      	b.n	800b038 <vPortValidateInterruptPriority+0x60>
	}
 800b03a:	bf00      	nop
 800b03c:	3714      	adds	r7, #20
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr
 800b046:	bf00      	nop
 800b048:	e000e3f0 	.word	0xe000e3f0
 800b04c:	20001264 	.word	0x20001264
 800b050:	e000ed0c 	.word	0xe000ed0c
 800b054:	20001268 	.word	0x20001268

0800b058 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b08a      	sub	sp, #40	; 0x28
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b060:	2300      	movs	r3, #0
 800b062:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b064:	f7fe fd9c 	bl	8009ba0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b068:	4b5b      	ldr	r3, [pc, #364]	; (800b1d8 <pvPortMalloc+0x180>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d101      	bne.n	800b074 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b070:	f000 f920 	bl	800b2b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b074:	4b59      	ldr	r3, [pc, #356]	; (800b1dc <pvPortMalloc+0x184>)
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4013      	ands	r3, r2
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f040 8093 	bne.w	800b1a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d01d      	beq.n	800b0c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b088:	2208      	movs	r2, #8
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	4413      	add	r3, r2
 800b08e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f003 0307 	and.w	r3, r3, #7
 800b096:	2b00      	cmp	r3, #0
 800b098:	d014      	beq.n	800b0c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f023 0307 	bic.w	r3, r3, #7
 800b0a0:	3308      	adds	r3, #8
 800b0a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f003 0307 	and.w	r3, r3, #7
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d00a      	beq.n	800b0c4 <pvPortMalloc+0x6c>
	__asm volatile
 800b0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b2:	f383 8811 	msr	BASEPRI, r3
 800b0b6:	f3bf 8f6f 	isb	sy
 800b0ba:	f3bf 8f4f 	dsb	sy
 800b0be:	617b      	str	r3, [r7, #20]
}
 800b0c0:	bf00      	nop
 800b0c2:	e7fe      	b.n	800b0c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d06e      	beq.n	800b1a8 <pvPortMalloc+0x150>
 800b0ca:	4b45      	ldr	r3, [pc, #276]	; (800b1e0 <pvPortMalloc+0x188>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d869      	bhi.n	800b1a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b0d4:	4b43      	ldr	r3, [pc, #268]	; (800b1e4 <pvPortMalloc+0x18c>)
 800b0d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b0d8:	4b42      	ldr	r3, [pc, #264]	; (800b1e4 <pvPortMalloc+0x18c>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0de:	e004      	b.n	800b0ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d903      	bls.n	800b0fc <pvPortMalloc+0xa4>
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d1f1      	bne.n	800b0e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b0fc:	4b36      	ldr	r3, [pc, #216]	; (800b1d8 <pvPortMalloc+0x180>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b102:	429a      	cmp	r2, r3
 800b104:	d050      	beq.n	800b1a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b106:	6a3b      	ldr	r3, [r7, #32]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2208      	movs	r2, #8
 800b10c:	4413      	add	r3, r2
 800b10e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	6a3b      	ldr	r3, [r7, #32]
 800b116:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11a:	685a      	ldr	r2, [r3, #4]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	1ad2      	subs	r2, r2, r3
 800b120:	2308      	movs	r3, #8
 800b122:	005b      	lsls	r3, r3, #1
 800b124:	429a      	cmp	r2, r3
 800b126:	d91f      	bls.n	800b168 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4413      	add	r3, r2
 800b12e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	f003 0307 	and.w	r3, r3, #7
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00a      	beq.n	800b150 <pvPortMalloc+0xf8>
	__asm volatile
 800b13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13e:	f383 8811 	msr	BASEPRI, r3
 800b142:	f3bf 8f6f 	isb	sy
 800b146:	f3bf 8f4f 	dsb	sy
 800b14a:	613b      	str	r3, [r7, #16]
}
 800b14c:	bf00      	nop
 800b14e:	e7fe      	b.n	800b14e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b152:	685a      	ldr	r2, [r3, #4]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	1ad2      	subs	r2, r2, r3
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b162:	69b8      	ldr	r0, [r7, #24]
 800b164:	f000 f908 	bl	800b378 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b168:	4b1d      	ldr	r3, [pc, #116]	; (800b1e0 <pvPortMalloc+0x188>)
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	1ad3      	subs	r3, r2, r3
 800b172:	4a1b      	ldr	r2, [pc, #108]	; (800b1e0 <pvPortMalloc+0x188>)
 800b174:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b176:	4b1a      	ldr	r3, [pc, #104]	; (800b1e0 <pvPortMalloc+0x188>)
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	4b1b      	ldr	r3, [pc, #108]	; (800b1e8 <pvPortMalloc+0x190>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d203      	bcs.n	800b18a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b182:	4b17      	ldr	r3, [pc, #92]	; (800b1e0 <pvPortMalloc+0x188>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a18      	ldr	r2, [pc, #96]	; (800b1e8 <pvPortMalloc+0x190>)
 800b188:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18c:	685a      	ldr	r2, [r3, #4]
 800b18e:	4b13      	ldr	r3, [pc, #76]	; (800b1dc <pvPortMalloc+0x184>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	431a      	orrs	r2, r3
 800b194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b196:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19a:	2200      	movs	r2, #0
 800b19c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b19e:	4b13      	ldr	r3, [pc, #76]	; (800b1ec <pvPortMalloc+0x194>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	4a11      	ldr	r2, [pc, #68]	; (800b1ec <pvPortMalloc+0x194>)
 800b1a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b1a8:	f7fe fd08 	bl	8009bbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	f003 0307 	and.w	r3, r3, #7
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00a      	beq.n	800b1cc <pvPortMalloc+0x174>
	__asm volatile
 800b1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ba:	f383 8811 	msr	BASEPRI, r3
 800b1be:	f3bf 8f6f 	isb	sy
 800b1c2:	f3bf 8f4f 	dsb	sy
 800b1c6:	60fb      	str	r3, [r7, #12]
}
 800b1c8:	bf00      	nop
 800b1ca:	e7fe      	b.n	800b1ca <pvPortMalloc+0x172>
	return pvReturn;
 800b1cc:	69fb      	ldr	r3, [r7, #28]
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3728      	adds	r7, #40	; 0x28
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	200025fc 	.word	0x200025fc
 800b1dc:	20002610 	.word	0x20002610
 800b1e0:	20002600 	.word	0x20002600
 800b1e4:	200025f4 	.word	0x200025f4
 800b1e8:	20002604 	.word	0x20002604
 800b1ec:	20002608 	.word	0x20002608

0800b1f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d04d      	beq.n	800b29e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b202:	2308      	movs	r3, #8
 800b204:	425b      	negs	r3, r3
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	4413      	add	r3, r2
 800b20a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	685a      	ldr	r2, [r3, #4]
 800b214:	4b24      	ldr	r3, [pc, #144]	; (800b2a8 <vPortFree+0xb8>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4013      	ands	r3, r2
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d10a      	bne.n	800b234 <vPortFree+0x44>
	__asm volatile
 800b21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	60fb      	str	r3, [r7, #12]
}
 800b230:	bf00      	nop
 800b232:	e7fe      	b.n	800b232 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00a      	beq.n	800b252 <vPortFree+0x62>
	__asm volatile
 800b23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b240:	f383 8811 	msr	BASEPRI, r3
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	f3bf 8f4f 	dsb	sy
 800b24c:	60bb      	str	r3, [r7, #8]
}
 800b24e:	bf00      	nop
 800b250:	e7fe      	b.n	800b250 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	685a      	ldr	r2, [r3, #4]
 800b256:	4b14      	ldr	r3, [pc, #80]	; (800b2a8 <vPortFree+0xb8>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4013      	ands	r3, r2
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d01e      	beq.n	800b29e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d11a      	bne.n	800b29e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	685a      	ldr	r2, [r3, #4]
 800b26c:	4b0e      	ldr	r3, [pc, #56]	; (800b2a8 <vPortFree+0xb8>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	43db      	mvns	r3, r3
 800b272:	401a      	ands	r2, r3
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b278:	f7fe fc92 	bl	8009ba0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	685a      	ldr	r2, [r3, #4]
 800b280:	4b0a      	ldr	r3, [pc, #40]	; (800b2ac <vPortFree+0xbc>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4413      	add	r3, r2
 800b286:	4a09      	ldr	r2, [pc, #36]	; (800b2ac <vPortFree+0xbc>)
 800b288:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b28a:	6938      	ldr	r0, [r7, #16]
 800b28c:	f000 f874 	bl	800b378 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b290:	4b07      	ldr	r3, [pc, #28]	; (800b2b0 <vPortFree+0xc0>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	3301      	adds	r3, #1
 800b296:	4a06      	ldr	r2, [pc, #24]	; (800b2b0 <vPortFree+0xc0>)
 800b298:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b29a:	f7fe fc8f 	bl	8009bbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b29e:	bf00      	nop
 800b2a0:	3718      	adds	r7, #24
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20002610 	.word	0x20002610
 800b2ac:	20002600 	.word	0x20002600
 800b2b0:	2000260c 	.word	0x2000260c

0800b2b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b2ba:	f241 3388 	movw	r3, #5000	; 0x1388
 800b2be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b2c0:	4b27      	ldr	r3, [pc, #156]	; (800b360 <prvHeapInit+0xac>)
 800b2c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f003 0307 	and.w	r3, r3, #7
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00c      	beq.n	800b2e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	3307      	adds	r3, #7
 800b2d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f023 0307 	bic.w	r3, r3, #7
 800b2da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b2dc:	68ba      	ldr	r2, [r7, #8]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	1ad3      	subs	r3, r2, r3
 800b2e2:	4a1f      	ldr	r2, [pc, #124]	; (800b360 <prvHeapInit+0xac>)
 800b2e4:	4413      	add	r3, r2
 800b2e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b2ec:	4a1d      	ldr	r2, [pc, #116]	; (800b364 <prvHeapInit+0xb0>)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b2f2:	4b1c      	ldr	r3, [pc, #112]	; (800b364 <prvHeapInit+0xb0>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	68ba      	ldr	r2, [r7, #8]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b300:	2208      	movs	r2, #8
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	1a9b      	subs	r3, r3, r2
 800b306:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f023 0307 	bic.w	r3, r3, #7
 800b30e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	4a15      	ldr	r2, [pc, #84]	; (800b368 <prvHeapInit+0xb4>)
 800b314:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b316:	4b14      	ldr	r3, [pc, #80]	; (800b368 <prvHeapInit+0xb4>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2200      	movs	r2, #0
 800b31c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b31e:	4b12      	ldr	r3, [pc, #72]	; (800b368 <prvHeapInit+0xb4>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2200      	movs	r2, #0
 800b324:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	1ad2      	subs	r2, r2, r3
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b334:	4b0c      	ldr	r3, [pc, #48]	; (800b368 <prvHeapInit+0xb4>)
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	4a0a      	ldr	r2, [pc, #40]	; (800b36c <prvHeapInit+0xb8>)
 800b342:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	4a09      	ldr	r2, [pc, #36]	; (800b370 <prvHeapInit+0xbc>)
 800b34a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b34c:	4b09      	ldr	r3, [pc, #36]	; (800b374 <prvHeapInit+0xc0>)
 800b34e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b352:	601a      	str	r2, [r3, #0]
}
 800b354:	bf00      	nop
 800b356:	3714      	adds	r7, #20
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr
 800b360:	2000126c 	.word	0x2000126c
 800b364:	200025f4 	.word	0x200025f4
 800b368:	200025fc 	.word	0x200025fc
 800b36c:	20002604 	.word	0x20002604
 800b370:	20002600 	.word	0x20002600
 800b374:	20002610 	.word	0x20002610

0800b378 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b380:	4b28      	ldr	r3, [pc, #160]	; (800b424 <prvInsertBlockIntoFreeList+0xac>)
 800b382:	60fb      	str	r3, [r7, #12]
 800b384:	e002      	b.n	800b38c <prvInsertBlockIntoFreeList+0x14>
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	60fb      	str	r3, [r7, #12]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	429a      	cmp	r2, r3
 800b394:	d8f7      	bhi.n	800b386 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	68ba      	ldr	r2, [r7, #8]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d108      	bne.n	800b3ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	685a      	ldr	r2, [r3, #4]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	441a      	add	r2, r3
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	68ba      	ldr	r2, [r7, #8]
 800b3c4:	441a      	add	r2, r3
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d118      	bne.n	800b400 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	4b15      	ldr	r3, [pc, #84]	; (800b428 <prvInsertBlockIntoFreeList+0xb0>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d00d      	beq.n	800b3f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	685a      	ldr	r2, [r3, #4]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	441a      	add	r2, r3
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	601a      	str	r2, [r3, #0]
 800b3f4:	e008      	b.n	800b408 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b3f6:	4b0c      	ldr	r3, [pc, #48]	; (800b428 <prvInsertBlockIntoFreeList+0xb0>)
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	601a      	str	r2, [r3, #0]
 800b3fe:	e003      	b.n	800b408 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b408:	68fa      	ldr	r2, [r7, #12]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d002      	beq.n	800b416 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b416:	bf00      	nop
 800b418:	3714      	adds	r7, #20
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	200025f4 	.word	0x200025f4
 800b428:	200025fc 	.word	0x200025fc

0800b42c <_ZdlPvj>:
 800b42c:	f000 b814 	b.w	800b458 <_ZdlPv>

0800b430 <_Znwj>:
 800b430:	2801      	cmp	r0, #1
 800b432:	bf38      	it	cc
 800b434:	2001      	movcc	r0, #1
 800b436:	b510      	push	{r4, lr}
 800b438:	4604      	mov	r4, r0
 800b43a:	4620      	mov	r0, r4
 800b43c:	f000 f85e 	bl	800b4fc <malloc>
 800b440:	b930      	cbnz	r0, 800b450 <_Znwj+0x20>
 800b442:	f000 f81d 	bl	800b480 <_ZSt15get_new_handlerv>
 800b446:	b908      	cbnz	r0, 800b44c <_Znwj+0x1c>
 800b448:	f000 f822 	bl	800b490 <abort>
 800b44c:	4780      	blx	r0
 800b44e:	e7f4      	b.n	800b43a <_Znwj+0xa>
 800b450:	bd10      	pop	{r4, pc}

0800b452 <__cxa_pure_virtual>:
 800b452:	b508      	push	{r3, lr}
 800b454:	f000 f80e 	bl	800b474 <_ZSt9terminatev>

0800b458 <_ZdlPv>:
 800b458:	f000 b858 	b.w	800b50c <free>

0800b45c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b45c:	b508      	push	{r3, lr}
 800b45e:	4780      	blx	r0
 800b460:	f000 f816 	bl	800b490 <abort>

0800b464 <_ZSt13get_terminatev>:
 800b464:	4b02      	ldr	r3, [pc, #8]	; (800b470 <_ZSt13get_terminatev+0xc>)
 800b466:	6818      	ldr	r0, [r3, #0]
 800b468:	f3bf 8f5b 	dmb	ish
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop
 800b470:	20000030 	.word	0x20000030

0800b474 <_ZSt9terminatev>:
 800b474:	b508      	push	{r3, lr}
 800b476:	f7ff fff5 	bl	800b464 <_ZSt13get_terminatev>
 800b47a:	f7ff ffef 	bl	800b45c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800b480 <_ZSt15get_new_handlerv>:
 800b480:	4b02      	ldr	r3, [pc, #8]	; (800b48c <_ZSt15get_new_handlerv+0xc>)
 800b482:	6818      	ldr	r0, [r3, #0]
 800b484:	f3bf 8f5b 	dmb	ish
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	20002614 	.word	0x20002614

0800b490 <abort>:
 800b490:	b508      	push	{r3, lr}
 800b492:	2006      	movs	r0, #6
 800b494:	f000 fe68 	bl	800c168 <raise>
 800b498:	2001      	movs	r0, #1
 800b49a:	f7f7 fd87 	bl	8002fac <_exit>

0800b49e <atoi>:
 800b49e:	220a      	movs	r2, #10
 800b4a0:	2100      	movs	r1, #0
 800b4a2:	f000 bf7b 	b.w	800c39c <strtol>
	...

0800b4a8 <__errno>:
 800b4a8:	4b01      	ldr	r3, [pc, #4]	; (800b4b0 <__errno+0x8>)
 800b4aa:	6818      	ldr	r0, [r3, #0]
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	20000034 	.word	0x20000034

0800b4b4 <__libc_init_array>:
 800b4b4:	b570      	push	{r4, r5, r6, lr}
 800b4b6:	4d0d      	ldr	r5, [pc, #52]	; (800b4ec <__libc_init_array+0x38>)
 800b4b8:	4c0d      	ldr	r4, [pc, #52]	; (800b4f0 <__libc_init_array+0x3c>)
 800b4ba:	1b64      	subs	r4, r4, r5
 800b4bc:	10a4      	asrs	r4, r4, #2
 800b4be:	2600      	movs	r6, #0
 800b4c0:	42a6      	cmp	r6, r4
 800b4c2:	d109      	bne.n	800b4d8 <__libc_init_array+0x24>
 800b4c4:	4d0b      	ldr	r5, [pc, #44]	; (800b4f4 <__libc_init_array+0x40>)
 800b4c6:	4c0c      	ldr	r4, [pc, #48]	; (800b4f8 <__libc_init_array+0x44>)
 800b4c8:	f003 facc 	bl	800ea64 <_init>
 800b4cc:	1b64      	subs	r4, r4, r5
 800b4ce:	10a4      	asrs	r4, r4, #2
 800b4d0:	2600      	movs	r6, #0
 800b4d2:	42a6      	cmp	r6, r4
 800b4d4:	d105      	bne.n	800b4e2 <__libc_init_array+0x2e>
 800b4d6:	bd70      	pop	{r4, r5, r6, pc}
 800b4d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4dc:	4798      	blx	r3
 800b4de:	3601      	adds	r6, #1
 800b4e0:	e7ee      	b.n	800b4c0 <__libc_init_array+0xc>
 800b4e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4e6:	4798      	blx	r3
 800b4e8:	3601      	adds	r6, #1
 800b4ea:	e7f2      	b.n	800b4d2 <__libc_init_array+0x1e>
 800b4ec:	0800f180 	.word	0x0800f180
 800b4f0:	0800f180 	.word	0x0800f180
 800b4f4:	0800f180 	.word	0x0800f180
 800b4f8:	0800f1a0 	.word	0x0800f1a0

0800b4fc <malloc>:
 800b4fc:	4b02      	ldr	r3, [pc, #8]	; (800b508 <malloc+0xc>)
 800b4fe:	4601      	mov	r1, r0
 800b500:	6818      	ldr	r0, [r3, #0]
 800b502:	f000 b88d 	b.w	800b620 <_malloc_r>
 800b506:	bf00      	nop
 800b508:	20000034 	.word	0x20000034

0800b50c <free>:
 800b50c:	4b02      	ldr	r3, [pc, #8]	; (800b518 <free+0xc>)
 800b50e:	4601      	mov	r1, r0
 800b510:	6818      	ldr	r0, [r3, #0]
 800b512:	f000 b819 	b.w	800b548 <_free_r>
 800b516:	bf00      	nop
 800b518:	20000034 	.word	0x20000034

0800b51c <memcpy>:
 800b51c:	440a      	add	r2, r1
 800b51e:	4291      	cmp	r1, r2
 800b520:	f100 33ff 	add.w	r3, r0, #4294967295
 800b524:	d100      	bne.n	800b528 <memcpy+0xc>
 800b526:	4770      	bx	lr
 800b528:	b510      	push	{r4, lr}
 800b52a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b52e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b532:	4291      	cmp	r1, r2
 800b534:	d1f9      	bne.n	800b52a <memcpy+0xe>
 800b536:	bd10      	pop	{r4, pc}

0800b538 <memset>:
 800b538:	4402      	add	r2, r0
 800b53a:	4603      	mov	r3, r0
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d100      	bne.n	800b542 <memset+0xa>
 800b540:	4770      	bx	lr
 800b542:	f803 1b01 	strb.w	r1, [r3], #1
 800b546:	e7f9      	b.n	800b53c <memset+0x4>

0800b548 <_free_r>:
 800b548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b54a:	2900      	cmp	r1, #0
 800b54c:	d044      	beq.n	800b5d8 <_free_r+0x90>
 800b54e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b552:	9001      	str	r0, [sp, #4]
 800b554:	2b00      	cmp	r3, #0
 800b556:	f1a1 0404 	sub.w	r4, r1, #4
 800b55a:	bfb8      	it	lt
 800b55c:	18e4      	addlt	r4, r4, r3
 800b55e:	f002 f8bd 	bl	800d6dc <__malloc_lock>
 800b562:	4a1e      	ldr	r2, [pc, #120]	; (800b5dc <_free_r+0x94>)
 800b564:	9801      	ldr	r0, [sp, #4]
 800b566:	6813      	ldr	r3, [r2, #0]
 800b568:	b933      	cbnz	r3, 800b578 <_free_r+0x30>
 800b56a:	6063      	str	r3, [r4, #4]
 800b56c:	6014      	str	r4, [r2, #0]
 800b56e:	b003      	add	sp, #12
 800b570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b574:	f002 b8b8 	b.w	800d6e8 <__malloc_unlock>
 800b578:	42a3      	cmp	r3, r4
 800b57a:	d908      	bls.n	800b58e <_free_r+0x46>
 800b57c:	6825      	ldr	r5, [r4, #0]
 800b57e:	1961      	adds	r1, r4, r5
 800b580:	428b      	cmp	r3, r1
 800b582:	bf01      	itttt	eq
 800b584:	6819      	ldreq	r1, [r3, #0]
 800b586:	685b      	ldreq	r3, [r3, #4]
 800b588:	1949      	addeq	r1, r1, r5
 800b58a:	6021      	streq	r1, [r4, #0]
 800b58c:	e7ed      	b.n	800b56a <_free_r+0x22>
 800b58e:	461a      	mov	r2, r3
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	b10b      	cbz	r3, 800b598 <_free_r+0x50>
 800b594:	42a3      	cmp	r3, r4
 800b596:	d9fa      	bls.n	800b58e <_free_r+0x46>
 800b598:	6811      	ldr	r1, [r2, #0]
 800b59a:	1855      	adds	r5, r2, r1
 800b59c:	42a5      	cmp	r5, r4
 800b59e:	d10b      	bne.n	800b5b8 <_free_r+0x70>
 800b5a0:	6824      	ldr	r4, [r4, #0]
 800b5a2:	4421      	add	r1, r4
 800b5a4:	1854      	adds	r4, r2, r1
 800b5a6:	42a3      	cmp	r3, r4
 800b5a8:	6011      	str	r1, [r2, #0]
 800b5aa:	d1e0      	bne.n	800b56e <_free_r+0x26>
 800b5ac:	681c      	ldr	r4, [r3, #0]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	6053      	str	r3, [r2, #4]
 800b5b2:	4421      	add	r1, r4
 800b5b4:	6011      	str	r1, [r2, #0]
 800b5b6:	e7da      	b.n	800b56e <_free_r+0x26>
 800b5b8:	d902      	bls.n	800b5c0 <_free_r+0x78>
 800b5ba:	230c      	movs	r3, #12
 800b5bc:	6003      	str	r3, [r0, #0]
 800b5be:	e7d6      	b.n	800b56e <_free_r+0x26>
 800b5c0:	6825      	ldr	r5, [r4, #0]
 800b5c2:	1961      	adds	r1, r4, r5
 800b5c4:	428b      	cmp	r3, r1
 800b5c6:	bf04      	itt	eq
 800b5c8:	6819      	ldreq	r1, [r3, #0]
 800b5ca:	685b      	ldreq	r3, [r3, #4]
 800b5cc:	6063      	str	r3, [r4, #4]
 800b5ce:	bf04      	itt	eq
 800b5d0:	1949      	addeq	r1, r1, r5
 800b5d2:	6021      	streq	r1, [r4, #0]
 800b5d4:	6054      	str	r4, [r2, #4]
 800b5d6:	e7ca      	b.n	800b56e <_free_r+0x26>
 800b5d8:	b003      	add	sp, #12
 800b5da:	bd30      	pop	{r4, r5, pc}
 800b5dc:	20002618 	.word	0x20002618

0800b5e0 <sbrk_aligned>:
 800b5e0:	b570      	push	{r4, r5, r6, lr}
 800b5e2:	4e0e      	ldr	r6, [pc, #56]	; (800b61c <sbrk_aligned+0x3c>)
 800b5e4:	460c      	mov	r4, r1
 800b5e6:	6831      	ldr	r1, [r6, #0]
 800b5e8:	4605      	mov	r5, r0
 800b5ea:	b911      	cbnz	r1, 800b5f2 <sbrk_aligned+0x12>
 800b5ec:	f000 fd84 	bl	800c0f8 <_sbrk_r>
 800b5f0:	6030      	str	r0, [r6, #0]
 800b5f2:	4621      	mov	r1, r4
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	f000 fd7f 	bl	800c0f8 <_sbrk_r>
 800b5fa:	1c43      	adds	r3, r0, #1
 800b5fc:	d00a      	beq.n	800b614 <sbrk_aligned+0x34>
 800b5fe:	1cc4      	adds	r4, r0, #3
 800b600:	f024 0403 	bic.w	r4, r4, #3
 800b604:	42a0      	cmp	r0, r4
 800b606:	d007      	beq.n	800b618 <sbrk_aligned+0x38>
 800b608:	1a21      	subs	r1, r4, r0
 800b60a:	4628      	mov	r0, r5
 800b60c:	f000 fd74 	bl	800c0f8 <_sbrk_r>
 800b610:	3001      	adds	r0, #1
 800b612:	d101      	bne.n	800b618 <sbrk_aligned+0x38>
 800b614:	f04f 34ff 	mov.w	r4, #4294967295
 800b618:	4620      	mov	r0, r4
 800b61a:	bd70      	pop	{r4, r5, r6, pc}
 800b61c:	2000261c 	.word	0x2000261c

0800b620 <_malloc_r>:
 800b620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b624:	1ccd      	adds	r5, r1, #3
 800b626:	f025 0503 	bic.w	r5, r5, #3
 800b62a:	3508      	adds	r5, #8
 800b62c:	2d0c      	cmp	r5, #12
 800b62e:	bf38      	it	cc
 800b630:	250c      	movcc	r5, #12
 800b632:	2d00      	cmp	r5, #0
 800b634:	4607      	mov	r7, r0
 800b636:	db01      	blt.n	800b63c <_malloc_r+0x1c>
 800b638:	42a9      	cmp	r1, r5
 800b63a:	d905      	bls.n	800b648 <_malloc_r+0x28>
 800b63c:	230c      	movs	r3, #12
 800b63e:	603b      	str	r3, [r7, #0]
 800b640:	2600      	movs	r6, #0
 800b642:	4630      	mov	r0, r6
 800b644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b648:	4e2e      	ldr	r6, [pc, #184]	; (800b704 <_malloc_r+0xe4>)
 800b64a:	f002 f847 	bl	800d6dc <__malloc_lock>
 800b64e:	6833      	ldr	r3, [r6, #0]
 800b650:	461c      	mov	r4, r3
 800b652:	bb34      	cbnz	r4, 800b6a2 <_malloc_r+0x82>
 800b654:	4629      	mov	r1, r5
 800b656:	4638      	mov	r0, r7
 800b658:	f7ff ffc2 	bl	800b5e0 <sbrk_aligned>
 800b65c:	1c43      	adds	r3, r0, #1
 800b65e:	4604      	mov	r4, r0
 800b660:	d14d      	bne.n	800b6fe <_malloc_r+0xde>
 800b662:	6834      	ldr	r4, [r6, #0]
 800b664:	4626      	mov	r6, r4
 800b666:	2e00      	cmp	r6, #0
 800b668:	d140      	bne.n	800b6ec <_malloc_r+0xcc>
 800b66a:	6823      	ldr	r3, [r4, #0]
 800b66c:	4631      	mov	r1, r6
 800b66e:	4638      	mov	r0, r7
 800b670:	eb04 0803 	add.w	r8, r4, r3
 800b674:	f000 fd40 	bl	800c0f8 <_sbrk_r>
 800b678:	4580      	cmp	r8, r0
 800b67a:	d13a      	bne.n	800b6f2 <_malloc_r+0xd2>
 800b67c:	6821      	ldr	r1, [r4, #0]
 800b67e:	3503      	adds	r5, #3
 800b680:	1a6d      	subs	r5, r5, r1
 800b682:	f025 0503 	bic.w	r5, r5, #3
 800b686:	3508      	adds	r5, #8
 800b688:	2d0c      	cmp	r5, #12
 800b68a:	bf38      	it	cc
 800b68c:	250c      	movcc	r5, #12
 800b68e:	4629      	mov	r1, r5
 800b690:	4638      	mov	r0, r7
 800b692:	f7ff ffa5 	bl	800b5e0 <sbrk_aligned>
 800b696:	3001      	adds	r0, #1
 800b698:	d02b      	beq.n	800b6f2 <_malloc_r+0xd2>
 800b69a:	6823      	ldr	r3, [r4, #0]
 800b69c:	442b      	add	r3, r5
 800b69e:	6023      	str	r3, [r4, #0]
 800b6a0:	e00e      	b.n	800b6c0 <_malloc_r+0xa0>
 800b6a2:	6822      	ldr	r2, [r4, #0]
 800b6a4:	1b52      	subs	r2, r2, r5
 800b6a6:	d41e      	bmi.n	800b6e6 <_malloc_r+0xc6>
 800b6a8:	2a0b      	cmp	r2, #11
 800b6aa:	d916      	bls.n	800b6da <_malloc_r+0xba>
 800b6ac:	1961      	adds	r1, r4, r5
 800b6ae:	42a3      	cmp	r3, r4
 800b6b0:	6025      	str	r5, [r4, #0]
 800b6b2:	bf18      	it	ne
 800b6b4:	6059      	strne	r1, [r3, #4]
 800b6b6:	6863      	ldr	r3, [r4, #4]
 800b6b8:	bf08      	it	eq
 800b6ba:	6031      	streq	r1, [r6, #0]
 800b6bc:	5162      	str	r2, [r4, r5]
 800b6be:	604b      	str	r3, [r1, #4]
 800b6c0:	4638      	mov	r0, r7
 800b6c2:	f104 060b 	add.w	r6, r4, #11
 800b6c6:	f002 f80f 	bl	800d6e8 <__malloc_unlock>
 800b6ca:	f026 0607 	bic.w	r6, r6, #7
 800b6ce:	1d23      	adds	r3, r4, #4
 800b6d0:	1af2      	subs	r2, r6, r3
 800b6d2:	d0b6      	beq.n	800b642 <_malloc_r+0x22>
 800b6d4:	1b9b      	subs	r3, r3, r6
 800b6d6:	50a3      	str	r3, [r4, r2]
 800b6d8:	e7b3      	b.n	800b642 <_malloc_r+0x22>
 800b6da:	6862      	ldr	r2, [r4, #4]
 800b6dc:	42a3      	cmp	r3, r4
 800b6de:	bf0c      	ite	eq
 800b6e0:	6032      	streq	r2, [r6, #0]
 800b6e2:	605a      	strne	r2, [r3, #4]
 800b6e4:	e7ec      	b.n	800b6c0 <_malloc_r+0xa0>
 800b6e6:	4623      	mov	r3, r4
 800b6e8:	6864      	ldr	r4, [r4, #4]
 800b6ea:	e7b2      	b.n	800b652 <_malloc_r+0x32>
 800b6ec:	4634      	mov	r4, r6
 800b6ee:	6876      	ldr	r6, [r6, #4]
 800b6f0:	e7b9      	b.n	800b666 <_malloc_r+0x46>
 800b6f2:	230c      	movs	r3, #12
 800b6f4:	603b      	str	r3, [r7, #0]
 800b6f6:	4638      	mov	r0, r7
 800b6f8:	f001 fff6 	bl	800d6e8 <__malloc_unlock>
 800b6fc:	e7a1      	b.n	800b642 <_malloc_r+0x22>
 800b6fe:	6025      	str	r5, [r4, #0]
 800b700:	e7de      	b.n	800b6c0 <_malloc_r+0xa0>
 800b702:	bf00      	nop
 800b704:	20002618 	.word	0x20002618

0800b708 <__cvt>:
 800b708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b70c:	ec55 4b10 	vmov	r4, r5, d0
 800b710:	2d00      	cmp	r5, #0
 800b712:	460e      	mov	r6, r1
 800b714:	4619      	mov	r1, r3
 800b716:	462b      	mov	r3, r5
 800b718:	bfbb      	ittet	lt
 800b71a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b71e:	461d      	movlt	r5, r3
 800b720:	2300      	movge	r3, #0
 800b722:	232d      	movlt	r3, #45	; 0x2d
 800b724:	700b      	strb	r3, [r1, #0]
 800b726:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b728:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b72c:	4691      	mov	r9, r2
 800b72e:	f023 0820 	bic.w	r8, r3, #32
 800b732:	bfbc      	itt	lt
 800b734:	4622      	movlt	r2, r4
 800b736:	4614      	movlt	r4, r2
 800b738:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b73c:	d005      	beq.n	800b74a <__cvt+0x42>
 800b73e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b742:	d100      	bne.n	800b746 <__cvt+0x3e>
 800b744:	3601      	adds	r6, #1
 800b746:	2102      	movs	r1, #2
 800b748:	e000      	b.n	800b74c <__cvt+0x44>
 800b74a:	2103      	movs	r1, #3
 800b74c:	ab03      	add	r3, sp, #12
 800b74e:	9301      	str	r3, [sp, #4]
 800b750:	ab02      	add	r3, sp, #8
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	ec45 4b10 	vmov	d0, r4, r5
 800b758:	4653      	mov	r3, sl
 800b75a:	4632      	mov	r2, r6
 800b75c:	f000 ff98 	bl	800c690 <_dtoa_r>
 800b760:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b764:	4607      	mov	r7, r0
 800b766:	d102      	bne.n	800b76e <__cvt+0x66>
 800b768:	f019 0f01 	tst.w	r9, #1
 800b76c:	d022      	beq.n	800b7b4 <__cvt+0xac>
 800b76e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b772:	eb07 0906 	add.w	r9, r7, r6
 800b776:	d110      	bne.n	800b79a <__cvt+0x92>
 800b778:	783b      	ldrb	r3, [r7, #0]
 800b77a:	2b30      	cmp	r3, #48	; 0x30
 800b77c:	d10a      	bne.n	800b794 <__cvt+0x8c>
 800b77e:	2200      	movs	r2, #0
 800b780:	2300      	movs	r3, #0
 800b782:	4620      	mov	r0, r4
 800b784:	4629      	mov	r1, r5
 800b786:	f7f5 f9af 	bl	8000ae8 <__aeabi_dcmpeq>
 800b78a:	b918      	cbnz	r0, 800b794 <__cvt+0x8c>
 800b78c:	f1c6 0601 	rsb	r6, r6, #1
 800b790:	f8ca 6000 	str.w	r6, [sl]
 800b794:	f8da 3000 	ldr.w	r3, [sl]
 800b798:	4499      	add	r9, r3
 800b79a:	2200      	movs	r2, #0
 800b79c:	2300      	movs	r3, #0
 800b79e:	4620      	mov	r0, r4
 800b7a0:	4629      	mov	r1, r5
 800b7a2:	f7f5 f9a1 	bl	8000ae8 <__aeabi_dcmpeq>
 800b7a6:	b108      	cbz	r0, 800b7ac <__cvt+0xa4>
 800b7a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b7ac:	2230      	movs	r2, #48	; 0x30
 800b7ae:	9b03      	ldr	r3, [sp, #12]
 800b7b0:	454b      	cmp	r3, r9
 800b7b2:	d307      	bcc.n	800b7c4 <__cvt+0xbc>
 800b7b4:	9b03      	ldr	r3, [sp, #12]
 800b7b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7b8:	1bdb      	subs	r3, r3, r7
 800b7ba:	4638      	mov	r0, r7
 800b7bc:	6013      	str	r3, [r2, #0]
 800b7be:	b004      	add	sp, #16
 800b7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7c4:	1c59      	adds	r1, r3, #1
 800b7c6:	9103      	str	r1, [sp, #12]
 800b7c8:	701a      	strb	r2, [r3, #0]
 800b7ca:	e7f0      	b.n	800b7ae <__cvt+0xa6>

0800b7cc <__exponent>:
 800b7cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2900      	cmp	r1, #0
 800b7d2:	bfb8      	it	lt
 800b7d4:	4249      	neglt	r1, r1
 800b7d6:	f803 2b02 	strb.w	r2, [r3], #2
 800b7da:	bfb4      	ite	lt
 800b7dc:	222d      	movlt	r2, #45	; 0x2d
 800b7de:	222b      	movge	r2, #43	; 0x2b
 800b7e0:	2909      	cmp	r1, #9
 800b7e2:	7042      	strb	r2, [r0, #1]
 800b7e4:	dd2a      	ble.n	800b83c <__exponent+0x70>
 800b7e6:	f10d 0407 	add.w	r4, sp, #7
 800b7ea:	46a4      	mov	ip, r4
 800b7ec:	270a      	movs	r7, #10
 800b7ee:	46a6      	mov	lr, r4
 800b7f0:	460a      	mov	r2, r1
 800b7f2:	fb91 f6f7 	sdiv	r6, r1, r7
 800b7f6:	fb07 1516 	mls	r5, r7, r6, r1
 800b7fa:	3530      	adds	r5, #48	; 0x30
 800b7fc:	2a63      	cmp	r2, #99	; 0x63
 800b7fe:	f104 34ff 	add.w	r4, r4, #4294967295
 800b802:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b806:	4631      	mov	r1, r6
 800b808:	dcf1      	bgt.n	800b7ee <__exponent+0x22>
 800b80a:	3130      	adds	r1, #48	; 0x30
 800b80c:	f1ae 0502 	sub.w	r5, lr, #2
 800b810:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b814:	1c44      	adds	r4, r0, #1
 800b816:	4629      	mov	r1, r5
 800b818:	4561      	cmp	r1, ip
 800b81a:	d30a      	bcc.n	800b832 <__exponent+0x66>
 800b81c:	f10d 0209 	add.w	r2, sp, #9
 800b820:	eba2 020e 	sub.w	r2, r2, lr
 800b824:	4565      	cmp	r5, ip
 800b826:	bf88      	it	hi
 800b828:	2200      	movhi	r2, #0
 800b82a:	4413      	add	r3, r2
 800b82c:	1a18      	subs	r0, r3, r0
 800b82e:	b003      	add	sp, #12
 800b830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b832:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b836:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b83a:	e7ed      	b.n	800b818 <__exponent+0x4c>
 800b83c:	2330      	movs	r3, #48	; 0x30
 800b83e:	3130      	adds	r1, #48	; 0x30
 800b840:	7083      	strb	r3, [r0, #2]
 800b842:	70c1      	strb	r1, [r0, #3]
 800b844:	1d03      	adds	r3, r0, #4
 800b846:	e7f1      	b.n	800b82c <__exponent+0x60>

0800b848 <_printf_float>:
 800b848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	ed2d 8b02 	vpush	{d8}
 800b850:	b08d      	sub	sp, #52	; 0x34
 800b852:	460c      	mov	r4, r1
 800b854:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b858:	4616      	mov	r6, r2
 800b85a:	461f      	mov	r7, r3
 800b85c:	4605      	mov	r5, r0
 800b85e:	f001 febd 	bl	800d5dc <_localeconv_r>
 800b862:	f8d0 a000 	ldr.w	sl, [r0]
 800b866:	4650      	mov	r0, sl
 800b868:	f7f4 fcbc 	bl	80001e4 <strlen>
 800b86c:	2300      	movs	r3, #0
 800b86e:	930a      	str	r3, [sp, #40]	; 0x28
 800b870:	6823      	ldr	r3, [r4, #0]
 800b872:	9305      	str	r3, [sp, #20]
 800b874:	f8d8 3000 	ldr.w	r3, [r8]
 800b878:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b87c:	3307      	adds	r3, #7
 800b87e:	f023 0307 	bic.w	r3, r3, #7
 800b882:	f103 0208 	add.w	r2, r3, #8
 800b886:	f8c8 2000 	str.w	r2, [r8]
 800b88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b892:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b896:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b89a:	9307      	str	r3, [sp, #28]
 800b89c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b8a0:	ee08 0a10 	vmov	s16, r0
 800b8a4:	4b9f      	ldr	r3, [pc, #636]	; (800bb24 <_printf_float+0x2dc>)
 800b8a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ae:	f7f5 f94d 	bl	8000b4c <__aeabi_dcmpun>
 800b8b2:	bb88      	cbnz	r0, 800b918 <_printf_float+0xd0>
 800b8b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8b8:	4b9a      	ldr	r3, [pc, #616]	; (800bb24 <_printf_float+0x2dc>)
 800b8ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b8be:	f7f5 f927 	bl	8000b10 <__aeabi_dcmple>
 800b8c2:	bb48      	cbnz	r0, 800b918 <_printf_float+0xd0>
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	4640      	mov	r0, r8
 800b8ca:	4649      	mov	r1, r9
 800b8cc:	f7f5 f916 	bl	8000afc <__aeabi_dcmplt>
 800b8d0:	b110      	cbz	r0, 800b8d8 <_printf_float+0x90>
 800b8d2:	232d      	movs	r3, #45	; 0x2d
 800b8d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8d8:	4b93      	ldr	r3, [pc, #588]	; (800bb28 <_printf_float+0x2e0>)
 800b8da:	4894      	ldr	r0, [pc, #592]	; (800bb2c <_printf_float+0x2e4>)
 800b8dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b8e0:	bf94      	ite	ls
 800b8e2:	4698      	movls	r8, r3
 800b8e4:	4680      	movhi	r8, r0
 800b8e6:	2303      	movs	r3, #3
 800b8e8:	6123      	str	r3, [r4, #16]
 800b8ea:	9b05      	ldr	r3, [sp, #20]
 800b8ec:	f023 0204 	bic.w	r2, r3, #4
 800b8f0:	6022      	str	r2, [r4, #0]
 800b8f2:	f04f 0900 	mov.w	r9, #0
 800b8f6:	9700      	str	r7, [sp, #0]
 800b8f8:	4633      	mov	r3, r6
 800b8fa:	aa0b      	add	r2, sp, #44	; 0x2c
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	4628      	mov	r0, r5
 800b900:	f000 f9d8 	bl	800bcb4 <_printf_common>
 800b904:	3001      	adds	r0, #1
 800b906:	f040 8090 	bne.w	800ba2a <_printf_float+0x1e2>
 800b90a:	f04f 30ff 	mov.w	r0, #4294967295
 800b90e:	b00d      	add	sp, #52	; 0x34
 800b910:	ecbd 8b02 	vpop	{d8}
 800b914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b918:	4642      	mov	r2, r8
 800b91a:	464b      	mov	r3, r9
 800b91c:	4640      	mov	r0, r8
 800b91e:	4649      	mov	r1, r9
 800b920:	f7f5 f914 	bl	8000b4c <__aeabi_dcmpun>
 800b924:	b140      	cbz	r0, 800b938 <_printf_float+0xf0>
 800b926:	464b      	mov	r3, r9
 800b928:	2b00      	cmp	r3, #0
 800b92a:	bfbc      	itt	lt
 800b92c:	232d      	movlt	r3, #45	; 0x2d
 800b92e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b932:	487f      	ldr	r0, [pc, #508]	; (800bb30 <_printf_float+0x2e8>)
 800b934:	4b7f      	ldr	r3, [pc, #508]	; (800bb34 <_printf_float+0x2ec>)
 800b936:	e7d1      	b.n	800b8dc <_printf_float+0x94>
 800b938:	6863      	ldr	r3, [r4, #4]
 800b93a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b93e:	9206      	str	r2, [sp, #24]
 800b940:	1c5a      	adds	r2, r3, #1
 800b942:	d13f      	bne.n	800b9c4 <_printf_float+0x17c>
 800b944:	2306      	movs	r3, #6
 800b946:	6063      	str	r3, [r4, #4]
 800b948:	9b05      	ldr	r3, [sp, #20]
 800b94a:	6861      	ldr	r1, [r4, #4]
 800b94c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b950:	2300      	movs	r3, #0
 800b952:	9303      	str	r3, [sp, #12]
 800b954:	ab0a      	add	r3, sp, #40	; 0x28
 800b956:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b95a:	ab09      	add	r3, sp, #36	; 0x24
 800b95c:	ec49 8b10 	vmov	d0, r8, r9
 800b960:	9300      	str	r3, [sp, #0]
 800b962:	6022      	str	r2, [r4, #0]
 800b964:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b968:	4628      	mov	r0, r5
 800b96a:	f7ff fecd 	bl	800b708 <__cvt>
 800b96e:	9b06      	ldr	r3, [sp, #24]
 800b970:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b972:	2b47      	cmp	r3, #71	; 0x47
 800b974:	4680      	mov	r8, r0
 800b976:	d108      	bne.n	800b98a <_printf_float+0x142>
 800b978:	1cc8      	adds	r0, r1, #3
 800b97a:	db02      	blt.n	800b982 <_printf_float+0x13a>
 800b97c:	6863      	ldr	r3, [r4, #4]
 800b97e:	4299      	cmp	r1, r3
 800b980:	dd41      	ble.n	800ba06 <_printf_float+0x1be>
 800b982:	f1ab 0b02 	sub.w	fp, fp, #2
 800b986:	fa5f fb8b 	uxtb.w	fp, fp
 800b98a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b98e:	d820      	bhi.n	800b9d2 <_printf_float+0x18a>
 800b990:	3901      	subs	r1, #1
 800b992:	465a      	mov	r2, fp
 800b994:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b998:	9109      	str	r1, [sp, #36]	; 0x24
 800b99a:	f7ff ff17 	bl	800b7cc <__exponent>
 800b99e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9a0:	1813      	adds	r3, r2, r0
 800b9a2:	2a01      	cmp	r2, #1
 800b9a4:	4681      	mov	r9, r0
 800b9a6:	6123      	str	r3, [r4, #16]
 800b9a8:	dc02      	bgt.n	800b9b0 <_printf_float+0x168>
 800b9aa:	6822      	ldr	r2, [r4, #0]
 800b9ac:	07d2      	lsls	r2, r2, #31
 800b9ae:	d501      	bpl.n	800b9b4 <_printf_float+0x16c>
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	6123      	str	r3, [r4, #16]
 800b9b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d09c      	beq.n	800b8f6 <_printf_float+0xae>
 800b9bc:	232d      	movs	r3, #45	; 0x2d
 800b9be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9c2:	e798      	b.n	800b8f6 <_printf_float+0xae>
 800b9c4:	9a06      	ldr	r2, [sp, #24]
 800b9c6:	2a47      	cmp	r2, #71	; 0x47
 800b9c8:	d1be      	bne.n	800b948 <_printf_float+0x100>
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d1bc      	bne.n	800b948 <_printf_float+0x100>
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e7b9      	b.n	800b946 <_printf_float+0xfe>
 800b9d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b9d6:	d118      	bne.n	800ba0a <_printf_float+0x1c2>
 800b9d8:	2900      	cmp	r1, #0
 800b9da:	6863      	ldr	r3, [r4, #4]
 800b9dc:	dd0b      	ble.n	800b9f6 <_printf_float+0x1ae>
 800b9de:	6121      	str	r1, [r4, #16]
 800b9e0:	b913      	cbnz	r3, 800b9e8 <_printf_float+0x1a0>
 800b9e2:	6822      	ldr	r2, [r4, #0]
 800b9e4:	07d0      	lsls	r0, r2, #31
 800b9e6:	d502      	bpl.n	800b9ee <_printf_float+0x1a6>
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	440b      	add	r3, r1
 800b9ec:	6123      	str	r3, [r4, #16]
 800b9ee:	65a1      	str	r1, [r4, #88]	; 0x58
 800b9f0:	f04f 0900 	mov.w	r9, #0
 800b9f4:	e7de      	b.n	800b9b4 <_printf_float+0x16c>
 800b9f6:	b913      	cbnz	r3, 800b9fe <_printf_float+0x1b6>
 800b9f8:	6822      	ldr	r2, [r4, #0]
 800b9fa:	07d2      	lsls	r2, r2, #31
 800b9fc:	d501      	bpl.n	800ba02 <_printf_float+0x1ba>
 800b9fe:	3302      	adds	r3, #2
 800ba00:	e7f4      	b.n	800b9ec <_printf_float+0x1a4>
 800ba02:	2301      	movs	r3, #1
 800ba04:	e7f2      	b.n	800b9ec <_printf_float+0x1a4>
 800ba06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ba0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba0c:	4299      	cmp	r1, r3
 800ba0e:	db05      	blt.n	800ba1c <_printf_float+0x1d4>
 800ba10:	6823      	ldr	r3, [r4, #0]
 800ba12:	6121      	str	r1, [r4, #16]
 800ba14:	07d8      	lsls	r0, r3, #31
 800ba16:	d5ea      	bpl.n	800b9ee <_printf_float+0x1a6>
 800ba18:	1c4b      	adds	r3, r1, #1
 800ba1a:	e7e7      	b.n	800b9ec <_printf_float+0x1a4>
 800ba1c:	2900      	cmp	r1, #0
 800ba1e:	bfd4      	ite	le
 800ba20:	f1c1 0202 	rsble	r2, r1, #2
 800ba24:	2201      	movgt	r2, #1
 800ba26:	4413      	add	r3, r2
 800ba28:	e7e0      	b.n	800b9ec <_printf_float+0x1a4>
 800ba2a:	6823      	ldr	r3, [r4, #0]
 800ba2c:	055a      	lsls	r2, r3, #21
 800ba2e:	d407      	bmi.n	800ba40 <_printf_float+0x1f8>
 800ba30:	6923      	ldr	r3, [r4, #16]
 800ba32:	4642      	mov	r2, r8
 800ba34:	4631      	mov	r1, r6
 800ba36:	4628      	mov	r0, r5
 800ba38:	47b8      	blx	r7
 800ba3a:	3001      	adds	r0, #1
 800ba3c:	d12c      	bne.n	800ba98 <_printf_float+0x250>
 800ba3e:	e764      	b.n	800b90a <_printf_float+0xc2>
 800ba40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ba44:	f240 80e0 	bls.w	800bc08 <_printf_float+0x3c0>
 800ba48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	2300      	movs	r3, #0
 800ba50:	f7f5 f84a 	bl	8000ae8 <__aeabi_dcmpeq>
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d034      	beq.n	800bac2 <_printf_float+0x27a>
 800ba58:	4a37      	ldr	r2, [pc, #220]	; (800bb38 <_printf_float+0x2f0>)
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	4631      	mov	r1, r6
 800ba5e:	4628      	mov	r0, r5
 800ba60:	47b8      	blx	r7
 800ba62:	3001      	adds	r0, #1
 800ba64:	f43f af51 	beq.w	800b90a <_printf_float+0xc2>
 800ba68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	db02      	blt.n	800ba76 <_printf_float+0x22e>
 800ba70:	6823      	ldr	r3, [r4, #0]
 800ba72:	07d8      	lsls	r0, r3, #31
 800ba74:	d510      	bpl.n	800ba98 <_printf_float+0x250>
 800ba76:	ee18 3a10 	vmov	r3, s16
 800ba7a:	4652      	mov	r2, sl
 800ba7c:	4631      	mov	r1, r6
 800ba7e:	4628      	mov	r0, r5
 800ba80:	47b8      	blx	r7
 800ba82:	3001      	adds	r0, #1
 800ba84:	f43f af41 	beq.w	800b90a <_printf_float+0xc2>
 800ba88:	f04f 0800 	mov.w	r8, #0
 800ba8c:	f104 091a 	add.w	r9, r4, #26
 800ba90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba92:	3b01      	subs	r3, #1
 800ba94:	4543      	cmp	r3, r8
 800ba96:	dc09      	bgt.n	800baac <_printf_float+0x264>
 800ba98:	6823      	ldr	r3, [r4, #0]
 800ba9a:	079b      	lsls	r3, r3, #30
 800ba9c:	f100 8105 	bmi.w	800bcaa <_printf_float+0x462>
 800baa0:	68e0      	ldr	r0, [r4, #12]
 800baa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baa4:	4298      	cmp	r0, r3
 800baa6:	bfb8      	it	lt
 800baa8:	4618      	movlt	r0, r3
 800baaa:	e730      	b.n	800b90e <_printf_float+0xc6>
 800baac:	2301      	movs	r3, #1
 800baae:	464a      	mov	r2, r9
 800bab0:	4631      	mov	r1, r6
 800bab2:	4628      	mov	r0, r5
 800bab4:	47b8      	blx	r7
 800bab6:	3001      	adds	r0, #1
 800bab8:	f43f af27 	beq.w	800b90a <_printf_float+0xc2>
 800babc:	f108 0801 	add.w	r8, r8, #1
 800bac0:	e7e6      	b.n	800ba90 <_printf_float+0x248>
 800bac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	dc39      	bgt.n	800bb3c <_printf_float+0x2f4>
 800bac8:	4a1b      	ldr	r2, [pc, #108]	; (800bb38 <_printf_float+0x2f0>)
 800baca:	2301      	movs	r3, #1
 800bacc:	4631      	mov	r1, r6
 800bace:	4628      	mov	r0, r5
 800bad0:	47b8      	blx	r7
 800bad2:	3001      	adds	r0, #1
 800bad4:	f43f af19 	beq.w	800b90a <_printf_float+0xc2>
 800bad8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800badc:	4313      	orrs	r3, r2
 800bade:	d102      	bne.n	800bae6 <_printf_float+0x29e>
 800bae0:	6823      	ldr	r3, [r4, #0]
 800bae2:	07d9      	lsls	r1, r3, #31
 800bae4:	d5d8      	bpl.n	800ba98 <_printf_float+0x250>
 800bae6:	ee18 3a10 	vmov	r3, s16
 800baea:	4652      	mov	r2, sl
 800baec:	4631      	mov	r1, r6
 800baee:	4628      	mov	r0, r5
 800baf0:	47b8      	blx	r7
 800baf2:	3001      	adds	r0, #1
 800baf4:	f43f af09 	beq.w	800b90a <_printf_float+0xc2>
 800baf8:	f04f 0900 	mov.w	r9, #0
 800bafc:	f104 0a1a 	add.w	sl, r4, #26
 800bb00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb02:	425b      	negs	r3, r3
 800bb04:	454b      	cmp	r3, r9
 800bb06:	dc01      	bgt.n	800bb0c <_printf_float+0x2c4>
 800bb08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb0a:	e792      	b.n	800ba32 <_printf_float+0x1ea>
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	4652      	mov	r2, sl
 800bb10:	4631      	mov	r1, r6
 800bb12:	4628      	mov	r0, r5
 800bb14:	47b8      	blx	r7
 800bb16:	3001      	adds	r0, #1
 800bb18:	f43f aef7 	beq.w	800b90a <_printf_float+0xc2>
 800bb1c:	f109 0901 	add.w	r9, r9, #1
 800bb20:	e7ee      	b.n	800bb00 <_printf_float+0x2b8>
 800bb22:	bf00      	nop
 800bb24:	7fefffff 	.word	0x7fefffff
 800bb28:	0800ed84 	.word	0x0800ed84
 800bb2c:	0800ed88 	.word	0x0800ed88
 800bb30:	0800ed90 	.word	0x0800ed90
 800bb34:	0800ed8c 	.word	0x0800ed8c
 800bb38:	0800f119 	.word	0x0800f119
 800bb3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb40:	429a      	cmp	r2, r3
 800bb42:	bfa8      	it	ge
 800bb44:	461a      	movge	r2, r3
 800bb46:	2a00      	cmp	r2, #0
 800bb48:	4691      	mov	r9, r2
 800bb4a:	dc37      	bgt.n	800bbbc <_printf_float+0x374>
 800bb4c:	f04f 0b00 	mov.w	fp, #0
 800bb50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb54:	f104 021a 	add.w	r2, r4, #26
 800bb58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb5a:	9305      	str	r3, [sp, #20]
 800bb5c:	eba3 0309 	sub.w	r3, r3, r9
 800bb60:	455b      	cmp	r3, fp
 800bb62:	dc33      	bgt.n	800bbcc <_printf_float+0x384>
 800bb64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	db3b      	blt.n	800bbe4 <_printf_float+0x39c>
 800bb6c:	6823      	ldr	r3, [r4, #0]
 800bb6e:	07da      	lsls	r2, r3, #31
 800bb70:	d438      	bmi.n	800bbe4 <_printf_float+0x39c>
 800bb72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb74:	9a05      	ldr	r2, [sp, #20]
 800bb76:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb78:	1a9a      	subs	r2, r3, r2
 800bb7a:	eba3 0901 	sub.w	r9, r3, r1
 800bb7e:	4591      	cmp	r9, r2
 800bb80:	bfa8      	it	ge
 800bb82:	4691      	movge	r9, r2
 800bb84:	f1b9 0f00 	cmp.w	r9, #0
 800bb88:	dc35      	bgt.n	800bbf6 <_printf_float+0x3ae>
 800bb8a:	f04f 0800 	mov.w	r8, #0
 800bb8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb92:	f104 0a1a 	add.w	sl, r4, #26
 800bb96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb9a:	1a9b      	subs	r3, r3, r2
 800bb9c:	eba3 0309 	sub.w	r3, r3, r9
 800bba0:	4543      	cmp	r3, r8
 800bba2:	f77f af79 	ble.w	800ba98 <_printf_float+0x250>
 800bba6:	2301      	movs	r3, #1
 800bba8:	4652      	mov	r2, sl
 800bbaa:	4631      	mov	r1, r6
 800bbac:	4628      	mov	r0, r5
 800bbae:	47b8      	blx	r7
 800bbb0:	3001      	adds	r0, #1
 800bbb2:	f43f aeaa 	beq.w	800b90a <_printf_float+0xc2>
 800bbb6:	f108 0801 	add.w	r8, r8, #1
 800bbba:	e7ec      	b.n	800bb96 <_printf_float+0x34e>
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	4631      	mov	r1, r6
 800bbc0:	4642      	mov	r2, r8
 800bbc2:	4628      	mov	r0, r5
 800bbc4:	47b8      	blx	r7
 800bbc6:	3001      	adds	r0, #1
 800bbc8:	d1c0      	bne.n	800bb4c <_printf_float+0x304>
 800bbca:	e69e      	b.n	800b90a <_printf_float+0xc2>
 800bbcc:	2301      	movs	r3, #1
 800bbce:	4631      	mov	r1, r6
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	9205      	str	r2, [sp, #20]
 800bbd4:	47b8      	blx	r7
 800bbd6:	3001      	adds	r0, #1
 800bbd8:	f43f ae97 	beq.w	800b90a <_printf_float+0xc2>
 800bbdc:	9a05      	ldr	r2, [sp, #20]
 800bbde:	f10b 0b01 	add.w	fp, fp, #1
 800bbe2:	e7b9      	b.n	800bb58 <_printf_float+0x310>
 800bbe4:	ee18 3a10 	vmov	r3, s16
 800bbe8:	4652      	mov	r2, sl
 800bbea:	4631      	mov	r1, r6
 800bbec:	4628      	mov	r0, r5
 800bbee:	47b8      	blx	r7
 800bbf0:	3001      	adds	r0, #1
 800bbf2:	d1be      	bne.n	800bb72 <_printf_float+0x32a>
 800bbf4:	e689      	b.n	800b90a <_printf_float+0xc2>
 800bbf6:	9a05      	ldr	r2, [sp, #20]
 800bbf8:	464b      	mov	r3, r9
 800bbfa:	4442      	add	r2, r8
 800bbfc:	4631      	mov	r1, r6
 800bbfe:	4628      	mov	r0, r5
 800bc00:	47b8      	blx	r7
 800bc02:	3001      	adds	r0, #1
 800bc04:	d1c1      	bne.n	800bb8a <_printf_float+0x342>
 800bc06:	e680      	b.n	800b90a <_printf_float+0xc2>
 800bc08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc0a:	2a01      	cmp	r2, #1
 800bc0c:	dc01      	bgt.n	800bc12 <_printf_float+0x3ca>
 800bc0e:	07db      	lsls	r3, r3, #31
 800bc10:	d538      	bpl.n	800bc84 <_printf_float+0x43c>
 800bc12:	2301      	movs	r3, #1
 800bc14:	4642      	mov	r2, r8
 800bc16:	4631      	mov	r1, r6
 800bc18:	4628      	mov	r0, r5
 800bc1a:	47b8      	blx	r7
 800bc1c:	3001      	adds	r0, #1
 800bc1e:	f43f ae74 	beq.w	800b90a <_printf_float+0xc2>
 800bc22:	ee18 3a10 	vmov	r3, s16
 800bc26:	4652      	mov	r2, sl
 800bc28:	4631      	mov	r1, r6
 800bc2a:	4628      	mov	r0, r5
 800bc2c:	47b8      	blx	r7
 800bc2e:	3001      	adds	r0, #1
 800bc30:	f43f ae6b 	beq.w	800b90a <_printf_float+0xc2>
 800bc34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc38:	2200      	movs	r2, #0
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	f7f4 ff54 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc40:	b9d8      	cbnz	r0, 800bc7a <_printf_float+0x432>
 800bc42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc44:	f108 0201 	add.w	r2, r8, #1
 800bc48:	3b01      	subs	r3, #1
 800bc4a:	4631      	mov	r1, r6
 800bc4c:	4628      	mov	r0, r5
 800bc4e:	47b8      	blx	r7
 800bc50:	3001      	adds	r0, #1
 800bc52:	d10e      	bne.n	800bc72 <_printf_float+0x42a>
 800bc54:	e659      	b.n	800b90a <_printf_float+0xc2>
 800bc56:	2301      	movs	r3, #1
 800bc58:	4652      	mov	r2, sl
 800bc5a:	4631      	mov	r1, r6
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	47b8      	blx	r7
 800bc60:	3001      	adds	r0, #1
 800bc62:	f43f ae52 	beq.w	800b90a <_printf_float+0xc2>
 800bc66:	f108 0801 	add.w	r8, r8, #1
 800bc6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	4543      	cmp	r3, r8
 800bc70:	dcf1      	bgt.n	800bc56 <_printf_float+0x40e>
 800bc72:	464b      	mov	r3, r9
 800bc74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bc78:	e6dc      	b.n	800ba34 <_printf_float+0x1ec>
 800bc7a:	f04f 0800 	mov.w	r8, #0
 800bc7e:	f104 0a1a 	add.w	sl, r4, #26
 800bc82:	e7f2      	b.n	800bc6a <_printf_float+0x422>
 800bc84:	2301      	movs	r3, #1
 800bc86:	4642      	mov	r2, r8
 800bc88:	e7df      	b.n	800bc4a <_printf_float+0x402>
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	464a      	mov	r2, r9
 800bc8e:	4631      	mov	r1, r6
 800bc90:	4628      	mov	r0, r5
 800bc92:	47b8      	blx	r7
 800bc94:	3001      	adds	r0, #1
 800bc96:	f43f ae38 	beq.w	800b90a <_printf_float+0xc2>
 800bc9a:	f108 0801 	add.w	r8, r8, #1
 800bc9e:	68e3      	ldr	r3, [r4, #12]
 800bca0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bca2:	1a5b      	subs	r3, r3, r1
 800bca4:	4543      	cmp	r3, r8
 800bca6:	dcf0      	bgt.n	800bc8a <_printf_float+0x442>
 800bca8:	e6fa      	b.n	800baa0 <_printf_float+0x258>
 800bcaa:	f04f 0800 	mov.w	r8, #0
 800bcae:	f104 0919 	add.w	r9, r4, #25
 800bcb2:	e7f4      	b.n	800bc9e <_printf_float+0x456>

0800bcb4 <_printf_common>:
 800bcb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcb8:	4616      	mov	r6, r2
 800bcba:	4699      	mov	r9, r3
 800bcbc:	688a      	ldr	r2, [r1, #8]
 800bcbe:	690b      	ldr	r3, [r1, #16]
 800bcc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	bfb8      	it	lt
 800bcc8:	4613      	movlt	r3, r2
 800bcca:	6033      	str	r3, [r6, #0]
 800bccc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bcd0:	4607      	mov	r7, r0
 800bcd2:	460c      	mov	r4, r1
 800bcd4:	b10a      	cbz	r2, 800bcda <_printf_common+0x26>
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	6033      	str	r3, [r6, #0]
 800bcda:	6823      	ldr	r3, [r4, #0]
 800bcdc:	0699      	lsls	r1, r3, #26
 800bcde:	bf42      	ittt	mi
 800bce0:	6833      	ldrmi	r3, [r6, #0]
 800bce2:	3302      	addmi	r3, #2
 800bce4:	6033      	strmi	r3, [r6, #0]
 800bce6:	6825      	ldr	r5, [r4, #0]
 800bce8:	f015 0506 	ands.w	r5, r5, #6
 800bcec:	d106      	bne.n	800bcfc <_printf_common+0x48>
 800bcee:	f104 0a19 	add.w	sl, r4, #25
 800bcf2:	68e3      	ldr	r3, [r4, #12]
 800bcf4:	6832      	ldr	r2, [r6, #0]
 800bcf6:	1a9b      	subs	r3, r3, r2
 800bcf8:	42ab      	cmp	r3, r5
 800bcfa:	dc26      	bgt.n	800bd4a <_printf_common+0x96>
 800bcfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd00:	1e13      	subs	r3, r2, #0
 800bd02:	6822      	ldr	r2, [r4, #0]
 800bd04:	bf18      	it	ne
 800bd06:	2301      	movne	r3, #1
 800bd08:	0692      	lsls	r2, r2, #26
 800bd0a:	d42b      	bmi.n	800bd64 <_printf_common+0xb0>
 800bd0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd10:	4649      	mov	r1, r9
 800bd12:	4638      	mov	r0, r7
 800bd14:	47c0      	blx	r8
 800bd16:	3001      	adds	r0, #1
 800bd18:	d01e      	beq.n	800bd58 <_printf_common+0xa4>
 800bd1a:	6823      	ldr	r3, [r4, #0]
 800bd1c:	68e5      	ldr	r5, [r4, #12]
 800bd1e:	6832      	ldr	r2, [r6, #0]
 800bd20:	f003 0306 	and.w	r3, r3, #6
 800bd24:	2b04      	cmp	r3, #4
 800bd26:	bf08      	it	eq
 800bd28:	1aad      	subeq	r5, r5, r2
 800bd2a:	68a3      	ldr	r3, [r4, #8]
 800bd2c:	6922      	ldr	r2, [r4, #16]
 800bd2e:	bf0c      	ite	eq
 800bd30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd34:	2500      	movne	r5, #0
 800bd36:	4293      	cmp	r3, r2
 800bd38:	bfc4      	itt	gt
 800bd3a:	1a9b      	subgt	r3, r3, r2
 800bd3c:	18ed      	addgt	r5, r5, r3
 800bd3e:	2600      	movs	r6, #0
 800bd40:	341a      	adds	r4, #26
 800bd42:	42b5      	cmp	r5, r6
 800bd44:	d11a      	bne.n	800bd7c <_printf_common+0xc8>
 800bd46:	2000      	movs	r0, #0
 800bd48:	e008      	b.n	800bd5c <_printf_common+0xa8>
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	4652      	mov	r2, sl
 800bd4e:	4649      	mov	r1, r9
 800bd50:	4638      	mov	r0, r7
 800bd52:	47c0      	blx	r8
 800bd54:	3001      	adds	r0, #1
 800bd56:	d103      	bne.n	800bd60 <_printf_common+0xac>
 800bd58:	f04f 30ff 	mov.w	r0, #4294967295
 800bd5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd60:	3501      	adds	r5, #1
 800bd62:	e7c6      	b.n	800bcf2 <_printf_common+0x3e>
 800bd64:	18e1      	adds	r1, r4, r3
 800bd66:	1c5a      	adds	r2, r3, #1
 800bd68:	2030      	movs	r0, #48	; 0x30
 800bd6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd6e:	4422      	add	r2, r4
 800bd70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd78:	3302      	adds	r3, #2
 800bd7a:	e7c7      	b.n	800bd0c <_printf_common+0x58>
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	4622      	mov	r2, r4
 800bd80:	4649      	mov	r1, r9
 800bd82:	4638      	mov	r0, r7
 800bd84:	47c0      	blx	r8
 800bd86:	3001      	adds	r0, #1
 800bd88:	d0e6      	beq.n	800bd58 <_printf_common+0xa4>
 800bd8a:	3601      	adds	r6, #1
 800bd8c:	e7d9      	b.n	800bd42 <_printf_common+0x8e>
	...

0800bd90 <_printf_i>:
 800bd90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd94:	7e0f      	ldrb	r7, [r1, #24]
 800bd96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd98:	2f78      	cmp	r7, #120	; 0x78
 800bd9a:	4691      	mov	r9, r2
 800bd9c:	4680      	mov	r8, r0
 800bd9e:	460c      	mov	r4, r1
 800bda0:	469a      	mov	sl, r3
 800bda2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bda6:	d807      	bhi.n	800bdb8 <_printf_i+0x28>
 800bda8:	2f62      	cmp	r7, #98	; 0x62
 800bdaa:	d80a      	bhi.n	800bdc2 <_printf_i+0x32>
 800bdac:	2f00      	cmp	r7, #0
 800bdae:	f000 80d8 	beq.w	800bf62 <_printf_i+0x1d2>
 800bdb2:	2f58      	cmp	r7, #88	; 0x58
 800bdb4:	f000 80a3 	beq.w	800befe <_printf_i+0x16e>
 800bdb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bdc0:	e03a      	b.n	800be38 <_printf_i+0xa8>
 800bdc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bdc6:	2b15      	cmp	r3, #21
 800bdc8:	d8f6      	bhi.n	800bdb8 <_printf_i+0x28>
 800bdca:	a101      	add	r1, pc, #4	; (adr r1, 800bdd0 <_printf_i+0x40>)
 800bdcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bdd0:	0800be29 	.word	0x0800be29
 800bdd4:	0800be3d 	.word	0x0800be3d
 800bdd8:	0800bdb9 	.word	0x0800bdb9
 800bddc:	0800bdb9 	.word	0x0800bdb9
 800bde0:	0800bdb9 	.word	0x0800bdb9
 800bde4:	0800bdb9 	.word	0x0800bdb9
 800bde8:	0800be3d 	.word	0x0800be3d
 800bdec:	0800bdb9 	.word	0x0800bdb9
 800bdf0:	0800bdb9 	.word	0x0800bdb9
 800bdf4:	0800bdb9 	.word	0x0800bdb9
 800bdf8:	0800bdb9 	.word	0x0800bdb9
 800bdfc:	0800bf49 	.word	0x0800bf49
 800be00:	0800be6d 	.word	0x0800be6d
 800be04:	0800bf2b 	.word	0x0800bf2b
 800be08:	0800bdb9 	.word	0x0800bdb9
 800be0c:	0800bdb9 	.word	0x0800bdb9
 800be10:	0800bf6b 	.word	0x0800bf6b
 800be14:	0800bdb9 	.word	0x0800bdb9
 800be18:	0800be6d 	.word	0x0800be6d
 800be1c:	0800bdb9 	.word	0x0800bdb9
 800be20:	0800bdb9 	.word	0x0800bdb9
 800be24:	0800bf33 	.word	0x0800bf33
 800be28:	682b      	ldr	r3, [r5, #0]
 800be2a:	1d1a      	adds	r2, r3, #4
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	602a      	str	r2, [r5, #0]
 800be30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be38:	2301      	movs	r3, #1
 800be3a:	e0a3      	b.n	800bf84 <_printf_i+0x1f4>
 800be3c:	6820      	ldr	r0, [r4, #0]
 800be3e:	6829      	ldr	r1, [r5, #0]
 800be40:	0606      	lsls	r6, r0, #24
 800be42:	f101 0304 	add.w	r3, r1, #4
 800be46:	d50a      	bpl.n	800be5e <_printf_i+0xce>
 800be48:	680e      	ldr	r6, [r1, #0]
 800be4a:	602b      	str	r3, [r5, #0]
 800be4c:	2e00      	cmp	r6, #0
 800be4e:	da03      	bge.n	800be58 <_printf_i+0xc8>
 800be50:	232d      	movs	r3, #45	; 0x2d
 800be52:	4276      	negs	r6, r6
 800be54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be58:	485e      	ldr	r0, [pc, #376]	; (800bfd4 <_printf_i+0x244>)
 800be5a:	230a      	movs	r3, #10
 800be5c:	e019      	b.n	800be92 <_printf_i+0x102>
 800be5e:	680e      	ldr	r6, [r1, #0]
 800be60:	602b      	str	r3, [r5, #0]
 800be62:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be66:	bf18      	it	ne
 800be68:	b236      	sxthne	r6, r6
 800be6a:	e7ef      	b.n	800be4c <_printf_i+0xbc>
 800be6c:	682b      	ldr	r3, [r5, #0]
 800be6e:	6820      	ldr	r0, [r4, #0]
 800be70:	1d19      	adds	r1, r3, #4
 800be72:	6029      	str	r1, [r5, #0]
 800be74:	0601      	lsls	r1, r0, #24
 800be76:	d501      	bpl.n	800be7c <_printf_i+0xec>
 800be78:	681e      	ldr	r6, [r3, #0]
 800be7a:	e002      	b.n	800be82 <_printf_i+0xf2>
 800be7c:	0646      	lsls	r6, r0, #25
 800be7e:	d5fb      	bpl.n	800be78 <_printf_i+0xe8>
 800be80:	881e      	ldrh	r6, [r3, #0]
 800be82:	4854      	ldr	r0, [pc, #336]	; (800bfd4 <_printf_i+0x244>)
 800be84:	2f6f      	cmp	r7, #111	; 0x6f
 800be86:	bf0c      	ite	eq
 800be88:	2308      	moveq	r3, #8
 800be8a:	230a      	movne	r3, #10
 800be8c:	2100      	movs	r1, #0
 800be8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be92:	6865      	ldr	r5, [r4, #4]
 800be94:	60a5      	str	r5, [r4, #8]
 800be96:	2d00      	cmp	r5, #0
 800be98:	bfa2      	ittt	ge
 800be9a:	6821      	ldrge	r1, [r4, #0]
 800be9c:	f021 0104 	bicge.w	r1, r1, #4
 800bea0:	6021      	strge	r1, [r4, #0]
 800bea2:	b90e      	cbnz	r6, 800bea8 <_printf_i+0x118>
 800bea4:	2d00      	cmp	r5, #0
 800bea6:	d04d      	beq.n	800bf44 <_printf_i+0x1b4>
 800bea8:	4615      	mov	r5, r2
 800beaa:	fbb6 f1f3 	udiv	r1, r6, r3
 800beae:	fb03 6711 	mls	r7, r3, r1, r6
 800beb2:	5dc7      	ldrb	r7, [r0, r7]
 800beb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800beb8:	4637      	mov	r7, r6
 800beba:	42bb      	cmp	r3, r7
 800bebc:	460e      	mov	r6, r1
 800bebe:	d9f4      	bls.n	800beaa <_printf_i+0x11a>
 800bec0:	2b08      	cmp	r3, #8
 800bec2:	d10b      	bne.n	800bedc <_printf_i+0x14c>
 800bec4:	6823      	ldr	r3, [r4, #0]
 800bec6:	07de      	lsls	r6, r3, #31
 800bec8:	d508      	bpl.n	800bedc <_printf_i+0x14c>
 800beca:	6923      	ldr	r3, [r4, #16]
 800becc:	6861      	ldr	r1, [r4, #4]
 800bece:	4299      	cmp	r1, r3
 800bed0:	bfde      	ittt	le
 800bed2:	2330      	movle	r3, #48	; 0x30
 800bed4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bed8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bedc:	1b52      	subs	r2, r2, r5
 800bede:	6122      	str	r2, [r4, #16]
 800bee0:	f8cd a000 	str.w	sl, [sp]
 800bee4:	464b      	mov	r3, r9
 800bee6:	aa03      	add	r2, sp, #12
 800bee8:	4621      	mov	r1, r4
 800beea:	4640      	mov	r0, r8
 800beec:	f7ff fee2 	bl	800bcb4 <_printf_common>
 800bef0:	3001      	adds	r0, #1
 800bef2:	d14c      	bne.n	800bf8e <_printf_i+0x1fe>
 800bef4:	f04f 30ff 	mov.w	r0, #4294967295
 800bef8:	b004      	add	sp, #16
 800befa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800befe:	4835      	ldr	r0, [pc, #212]	; (800bfd4 <_printf_i+0x244>)
 800bf00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bf04:	6829      	ldr	r1, [r5, #0]
 800bf06:	6823      	ldr	r3, [r4, #0]
 800bf08:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf0c:	6029      	str	r1, [r5, #0]
 800bf0e:	061d      	lsls	r5, r3, #24
 800bf10:	d514      	bpl.n	800bf3c <_printf_i+0x1ac>
 800bf12:	07df      	lsls	r7, r3, #31
 800bf14:	bf44      	itt	mi
 800bf16:	f043 0320 	orrmi.w	r3, r3, #32
 800bf1a:	6023      	strmi	r3, [r4, #0]
 800bf1c:	b91e      	cbnz	r6, 800bf26 <_printf_i+0x196>
 800bf1e:	6823      	ldr	r3, [r4, #0]
 800bf20:	f023 0320 	bic.w	r3, r3, #32
 800bf24:	6023      	str	r3, [r4, #0]
 800bf26:	2310      	movs	r3, #16
 800bf28:	e7b0      	b.n	800be8c <_printf_i+0xfc>
 800bf2a:	6823      	ldr	r3, [r4, #0]
 800bf2c:	f043 0320 	orr.w	r3, r3, #32
 800bf30:	6023      	str	r3, [r4, #0]
 800bf32:	2378      	movs	r3, #120	; 0x78
 800bf34:	4828      	ldr	r0, [pc, #160]	; (800bfd8 <_printf_i+0x248>)
 800bf36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf3a:	e7e3      	b.n	800bf04 <_printf_i+0x174>
 800bf3c:	0659      	lsls	r1, r3, #25
 800bf3e:	bf48      	it	mi
 800bf40:	b2b6      	uxthmi	r6, r6
 800bf42:	e7e6      	b.n	800bf12 <_printf_i+0x182>
 800bf44:	4615      	mov	r5, r2
 800bf46:	e7bb      	b.n	800bec0 <_printf_i+0x130>
 800bf48:	682b      	ldr	r3, [r5, #0]
 800bf4a:	6826      	ldr	r6, [r4, #0]
 800bf4c:	6961      	ldr	r1, [r4, #20]
 800bf4e:	1d18      	adds	r0, r3, #4
 800bf50:	6028      	str	r0, [r5, #0]
 800bf52:	0635      	lsls	r5, r6, #24
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	d501      	bpl.n	800bf5c <_printf_i+0x1cc>
 800bf58:	6019      	str	r1, [r3, #0]
 800bf5a:	e002      	b.n	800bf62 <_printf_i+0x1d2>
 800bf5c:	0670      	lsls	r0, r6, #25
 800bf5e:	d5fb      	bpl.n	800bf58 <_printf_i+0x1c8>
 800bf60:	8019      	strh	r1, [r3, #0]
 800bf62:	2300      	movs	r3, #0
 800bf64:	6123      	str	r3, [r4, #16]
 800bf66:	4615      	mov	r5, r2
 800bf68:	e7ba      	b.n	800bee0 <_printf_i+0x150>
 800bf6a:	682b      	ldr	r3, [r5, #0]
 800bf6c:	1d1a      	adds	r2, r3, #4
 800bf6e:	602a      	str	r2, [r5, #0]
 800bf70:	681d      	ldr	r5, [r3, #0]
 800bf72:	6862      	ldr	r2, [r4, #4]
 800bf74:	2100      	movs	r1, #0
 800bf76:	4628      	mov	r0, r5
 800bf78:	f7f4 f942 	bl	8000200 <memchr>
 800bf7c:	b108      	cbz	r0, 800bf82 <_printf_i+0x1f2>
 800bf7e:	1b40      	subs	r0, r0, r5
 800bf80:	6060      	str	r0, [r4, #4]
 800bf82:	6863      	ldr	r3, [r4, #4]
 800bf84:	6123      	str	r3, [r4, #16]
 800bf86:	2300      	movs	r3, #0
 800bf88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf8c:	e7a8      	b.n	800bee0 <_printf_i+0x150>
 800bf8e:	6923      	ldr	r3, [r4, #16]
 800bf90:	462a      	mov	r2, r5
 800bf92:	4649      	mov	r1, r9
 800bf94:	4640      	mov	r0, r8
 800bf96:	47d0      	blx	sl
 800bf98:	3001      	adds	r0, #1
 800bf9a:	d0ab      	beq.n	800bef4 <_printf_i+0x164>
 800bf9c:	6823      	ldr	r3, [r4, #0]
 800bf9e:	079b      	lsls	r3, r3, #30
 800bfa0:	d413      	bmi.n	800bfca <_printf_i+0x23a>
 800bfa2:	68e0      	ldr	r0, [r4, #12]
 800bfa4:	9b03      	ldr	r3, [sp, #12]
 800bfa6:	4298      	cmp	r0, r3
 800bfa8:	bfb8      	it	lt
 800bfaa:	4618      	movlt	r0, r3
 800bfac:	e7a4      	b.n	800bef8 <_printf_i+0x168>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	4632      	mov	r2, r6
 800bfb2:	4649      	mov	r1, r9
 800bfb4:	4640      	mov	r0, r8
 800bfb6:	47d0      	blx	sl
 800bfb8:	3001      	adds	r0, #1
 800bfba:	d09b      	beq.n	800bef4 <_printf_i+0x164>
 800bfbc:	3501      	adds	r5, #1
 800bfbe:	68e3      	ldr	r3, [r4, #12]
 800bfc0:	9903      	ldr	r1, [sp, #12]
 800bfc2:	1a5b      	subs	r3, r3, r1
 800bfc4:	42ab      	cmp	r3, r5
 800bfc6:	dcf2      	bgt.n	800bfae <_printf_i+0x21e>
 800bfc8:	e7eb      	b.n	800bfa2 <_printf_i+0x212>
 800bfca:	2500      	movs	r5, #0
 800bfcc:	f104 0619 	add.w	r6, r4, #25
 800bfd0:	e7f5      	b.n	800bfbe <_printf_i+0x22e>
 800bfd2:	bf00      	nop
 800bfd4:	0800ed94 	.word	0x0800ed94
 800bfd8:	0800eda5 	.word	0x0800eda5

0800bfdc <iprintf>:
 800bfdc:	b40f      	push	{r0, r1, r2, r3}
 800bfde:	4b0a      	ldr	r3, [pc, #40]	; (800c008 <iprintf+0x2c>)
 800bfe0:	b513      	push	{r0, r1, r4, lr}
 800bfe2:	681c      	ldr	r4, [r3, #0]
 800bfe4:	b124      	cbz	r4, 800bff0 <iprintf+0x14>
 800bfe6:	69a3      	ldr	r3, [r4, #24]
 800bfe8:	b913      	cbnz	r3, 800bff0 <iprintf+0x14>
 800bfea:	4620      	mov	r0, r4
 800bfec:	f001 fa58 	bl	800d4a0 <__sinit>
 800bff0:	ab05      	add	r3, sp, #20
 800bff2:	9a04      	ldr	r2, [sp, #16]
 800bff4:	68a1      	ldr	r1, [r4, #8]
 800bff6:	9301      	str	r3, [sp, #4]
 800bff8:	4620      	mov	r0, r4
 800bffa:	f002 f911 	bl	800e220 <_vfiprintf_r>
 800bffe:	b002      	add	sp, #8
 800c000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c004:	b004      	add	sp, #16
 800c006:	4770      	bx	lr
 800c008:	20000034 	.word	0x20000034

0800c00c <_puts_r>:
 800c00c:	b570      	push	{r4, r5, r6, lr}
 800c00e:	460e      	mov	r6, r1
 800c010:	4605      	mov	r5, r0
 800c012:	b118      	cbz	r0, 800c01c <_puts_r+0x10>
 800c014:	6983      	ldr	r3, [r0, #24]
 800c016:	b90b      	cbnz	r3, 800c01c <_puts_r+0x10>
 800c018:	f001 fa42 	bl	800d4a0 <__sinit>
 800c01c:	69ab      	ldr	r3, [r5, #24]
 800c01e:	68ac      	ldr	r4, [r5, #8]
 800c020:	b913      	cbnz	r3, 800c028 <_puts_r+0x1c>
 800c022:	4628      	mov	r0, r5
 800c024:	f001 fa3c 	bl	800d4a0 <__sinit>
 800c028:	4b2c      	ldr	r3, [pc, #176]	; (800c0dc <_puts_r+0xd0>)
 800c02a:	429c      	cmp	r4, r3
 800c02c:	d120      	bne.n	800c070 <_puts_r+0x64>
 800c02e:	686c      	ldr	r4, [r5, #4]
 800c030:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c032:	07db      	lsls	r3, r3, #31
 800c034:	d405      	bmi.n	800c042 <_puts_r+0x36>
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	0598      	lsls	r0, r3, #22
 800c03a:	d402      	bmi.n	800c042 <_puts_r+0x36>
 800c03c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c03e:	f001 fad2 	bl	800d5e6 <__retarget_lock_acquire_recursive>
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	0719      	lsls	r1, r3, #28
 800c046:	d51d      	bpl.n	800c084 <_puts_r+0x78>
 800c048:	6923      	ldr	r3, [r4, #16]
 800c04a:	b1db      	cbz	r3, 800c084 <_puts_r+0x78>
 800c04c:	3e01      	subs	r6, #1
 800c04e:	68a3      	ldr	r3, [r4, #8]
 800c050:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c054:	3b01      	subs	r3, #1
 800c056:	60a3      	str	r3, [r4, #8]
 800c058:	bb39      	cbnz	r1, 800c0aa <_puts_r+0x9e>
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	da38      	bge.n	800c0d0 <_puts_r+0xc4>
 800c05e:	4622      	mov	r2, r4
 800c060:	210a      	movs	r1, #10
 800c062:	4628      	mov	r0, r5
 800c064:	f000 f9a4 	bl	800c3b0 <__swbuf_r>
 800c068:	3001      	adds	r0, #1
 800c06a:	d011      	beq.n	800c090 <_puts_r+0x84>
 800c06c:	250a      	movs	r5, #10
 800c06e:	e011      	b.n	800c094 <_puts_r+0x88>
 800c070:	4b1b      	ldr	r3, [pc, #108]	; (800c0e0 <_puts_r+0xd4>)
 800c072:	429c      	cmp	r4, r3
 800c074:	d101      	bne.n	800c07a <_puts_r+0x6e>
 800c076:	68ac      	ldr	r4, [r5, #8]
 800c078:	e7da      	b.n	800c030 <_puts_r+0x24>
 800c07a:	4b1a      	ldr	r3, [pc, #104]	; (800c0e4 <_puts_r+0xd8>)
 800c07c:	429c      	cmp	r4, r3
 800c07e:	bf08      	it	eq
 800c080:	68ec      	ldreq	r4, [r5, #12]
 800c082:	e7d5      	b.n	800c030 <_puts_r+0x24>
 800c084:	4621      	mov	r1, r4
 800c086:	4628      	mov	r0, r5
 800c088:	f000 f9f6 	bl	800c478 <__swsetup_r>
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d0dd      	beq.n	800c04c <_puts_r+0x40>
 800c090:	f04f 35ff 	mov.w	r5, #4294967295
 800c094:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c096:	07da      	lsls	r2, r3, #31
 800c098:	d405      	bmi.n	800c0a6 <_puts_r+0x9a>
 800c09a:	89a3      	ldrh	r3, [r4, #12]
 800c09c:	059b      	lsls	r3, r3, #22
 800c09e:	d402      	bmi.n	800c0a6 <_puts_r+0x9a>
 800c0a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0a2:	f001 faa1 	bl	800d5e8 <__retarget_lock_release_recursive>
 800c0a6:	4628      	mov	r0, r5
 800c0a8:	bd70      	pop	{r4, r5, r6, pc}
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	da04      	bge.n	800c0b8 <_puts_r+0xac>
 800c0ae:	69a2      	ldr	r2, [r4, #24]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	dc06      	bgt.n	800c0c2 <_puts_r+0xb6>
 800c0b4:	290a      	cmp	r1, #10
 800c0b6:	d004      	beq.n	800c0c2 <_puts_r+0xb6>
 800c0b8:	6823      	ldr	r3, [r4, #0]
 800c0ba:	1c5a      	adds	r2, r3, #1
 800c0bc:	6022      	str	r2, [r4, #0]
 800c0be:	7019      	strb	r1, [r3, #0]
 800c0c0:	e7c5      	b.n	800c04e <_puts_r+0x42>
 800c0c2:	4622      	mov	r2, r4
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	f000 f973 	bl	800c3b0 <__swbuf_r>
 800c0ca:	3001      	adds	r0, #1
 800c0cc:	d1bf      	bne.n	800c04e <_puts_r+0x42>
 800c0ce:	e7df      	b.n	800c090 <_puts_r+0x84>
 800c0d0:	6823      	ldr	r3, [r4, #0]
 800c0d2:	250a      	movs	r5, #10
 800c0d4:	1c5a      	adds	r2, r3, #1
 800c0d6:	6022      	str	r2, [r4, #0]
 800c0d8:	701d      	strb	r5, [r3, #0]
 800c0da:	e7db      	b.n	800c094 <_puts_r+0x88>
 800c0dc:	0800ef68 	.word	0x0800ef68
 800c0e0:	0800ef88 	.word	0x0800ef88
 800c0e4:	0800ef48 	.word	0x0800ef48

0800c0e8 <puts>:
 800c0e8:	4b02      	ldr	r3, [pc, #8]	; (800c0f4 <puts+0xc>)
 800c0ea:	4601      	mov	r1, r0
 800c0ec:	6818      	ldr	r0, [r3, #0]
 800c0ee:	f7ff bf8d 	b.w	800c00c <_puts_r>
 800c0f2:	bf00      	nop
 800c0f4:	20000034 	.word	0x20000034

0800c0f8 <_sbrk_r>:
 800c0f8:	b538      	push	{r3, r4, r5, lr}
 800c0fa:	4d06      	ldr	r5, [pc, #24]	; (800c114 <_sbrk_r+0x1c>)
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	4604      	mov	r4, r0
 800c100:	4608      	mov	r0, r1
 800c102:	602b      	str	r3, [r5, #0]
 800c104:	f7f6 ffae 	bl	8003064 <_sbrk>
 800c108:	1c43      	adds	r3, r0, #1
 800c10a:	d102      	bne.n	800c112 <_sbrk_r+0x1a>
 800c10c:	682b      	ldr	r3, [r5, #0]
 800c10e:	b103      	cbz	r3, 800c112 <_sbrk_r+0x1a>
 800c110:	6023      	str	r3, [r4, #0]
 800c112:	bd38      	pop	{r3, r4, r5, pc}
 800c114:	20002624 	.word	0x20002624

0800c118 <_raise_r>:
 800c118:	291f      	cmp	r1, #31
 800c11a:	b538      	push	{r3, r4, r5, lr}
 800c11c:	4604      	mov	r4, r0
 800c11e:	460d      	mov	r5, r1
 800c120:	d904      	bls.n	800c12c <_raise_r+0x14>
 800c122:	2316      	movs	r3, #22
 800c124:	6003      	str	r3, [r0, #0]
 800c126:	f04f 30ff 	mov.w	r0, #4294967295
 800c12a:	bd38      	pop	{r3, r4, r5, pc}
 800c12c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c12e:	b112      	cbz	r2, 800c136 <_raise_r+0x1e>
 800c130:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c134:	b94b      	cbnz	r3, 800c14a <_raise_r+0x32>
 800c136:	4620      	mov	r0, r4
 800c138:	f000 f830 	bl	800c19c <_getpid_r>
 800c13c:	462a      	mov	r2, r5
 800c13e:	4601      	mov	r1, r0
 800c140:	4620      	mov	r0, r4
 800c142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c146:	f000 b817 	b.w	800c178 <_kill_r>
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d00a      	beq.n	800c164 <_raise_r+0x4c>
 800c14e:	1c59      	adds	r1, r3, #1
 800c150:	d103      	bne.n	800c15a <_raise_r+0x42>
 800c152:	2316      	movs	r3, #22
 800c154:	6003      	str	r3, [r0, #0]
 800c156:	2001      	movs	r0, #1
 800c158:	e7e7      	b.n	800c12a <_raise_r+0x12>
 800c15a:	2400      	movs	r4, #0
 800c15c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c160:	4628      	mov	r0, r5
 800c162:	4798      	blx	r3
 800c164:	2000      	movs	r0, #0
 800c166:	e7e0      	b.n	800c12a <_raise_r+0x12>

0800c168 <raise>:
 800c168:	4b02      	ldr	r3, [pc, #8]	; (800c174 <raise+0xc>)
 800c16a:	4601      	mov	r1, r0
 800c16c:	6818      	ldr	r0, [r3, #0]
 800c16e:	f7ff bfd3 	b.w	800c118 <_raise_r>
 800c172:	bf00      	nop
 800c174:	20000034 	.word	0x20000034

0800c178 <_kill_r>:
 800c178:	b538      	push	{r3, r4, r5, lr}
 800c17a:	4d07      	ldr	r5, [pc, #28]	; (800c198 <_kill_r+0x20>)
 800c17c:	2300      	movs	r3, #0
 800c17e:	4604      	mov	r4, r0
 800c180:	4608      	mov	r0, r1
 800c182:	4611      	mov	r1, r2
 800c184:	602b      	str	r3, [r5, #0]
 800c186:	f7f6 ff01 	bl	8002f8c <_kill>
 800c18a:	1c43      	adds	r3, r0, #1
 800c18c:	d102      	bne.n	800c194 <_kill_r+0x1c>
 800c18e:	682b      	ldr	r3, [r5, #0]
 800c190:	b103      	cbz	r3, 800c194 <_kill_r+0x1c>
 800c192:	6023      	str	r3, [r4, #0]
 800c194:	bd38      	pop	{r3, r4, r5, pc}
 800c196:	bf00      	nop
 800c198:	20002624 	.word	0x20002624

0800c19c <_getpid_r>:
 800c19c:	f7f6 beee 	b.w	8002f7c <_getpid>

0800c1a0 <siscanf>:
 800c1a0:	b40e      	push	{r1, r2, r3}
 800c1a2:	b510      	push	{r4, lr}
 800c1a4:	b09f      	sub	sp, #124	; 0x7c
 800c1a6:	ac21      	add	r4, sp, #132	; 0x84
 800c1a8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c1ac:	f854 2b04 	ldr.w	r2, [r4], #4
 800c1b0:	9201      	str	r2, [sp, #4]
 800c1b2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c1b6:	9004      	str	r0, [sp, #16]
 800c1b8:	9008      	str	r0, [sp, #32]
 800c1ba:	f7f4 f813 	bl	80001e4 <strlen>
 800c1be:	4b0c      	ldr	r3, [pc, #48]	; (800c1f0 <siscanf+0x50>)
 800c1c0:	9005      	str	r0, [sp, #20]
 800c1c2:	9009      	str	r0, [sp, #36]	; 0x24
 800c1c4:	930d      	str	r3, [sp, #52]	; 0x34
 800c1c6:	480b      	ldr	r0, [pc, #44]	; (800c1f4 <siscanf+0x54>)
 800c1c8:	9a01      	ldr	r2, [sp, #4]
 800c1ca:	6800      	ldr	r0, [r0, #0]
 800c1cc:	9403      	str	r4, [sp, #12]
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	9311      	str	r3, [sp, #68]	; 0x44
 800c1d2:	9316      	str	r3, [sp, #88]	; 0x58
 800c1d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c1d8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c1dc:	a904      	add	r1, sp, #16
 800c1de:	4623      	mov	r3, r4
 800c1e0:	f001 fe7c 	bl	800dedc <__ssvfiscanf_r>
 800c1e4:	b01f      	add	sp, #124	; 0x7c
 800c1e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1ea:	b003      	add	sp, #12
 800c1ec:	4770      	bx	lr
 800c1ee:	bf00      	nop
 800c1f0:	0800c21b 	.word	0x0800c21b
 800c1f4:	20000034 	.word	0x20000034

0800c1f8 <__sread>:
 800c1f8:	b510      	push	{r4, lr}
 800c1fa:	460c      	mov	r4, r1
 800c1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c200:	f002 fa90 	bl	800e724 <_read_r>
 800c204:	2800      	cmp	r0, #0
 800c206:	bfab      	itete	ge
 800c208:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c20a:	89a3      	ldrhlt	r3, [r4, #12]
 800c20c:	181b      	addge	r3, r3, r0
 800c20e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c212:	bfac      	ite	ge
 800c214:	6563      	strge	r3, [r4, #84]	; 0x54
 800c216:	81a3      	strhlt	r3, [r4, #12]
 800c218:	bd10      	pop	{r4, pc}

0800c21a <__seofread>:
 800c21a:	2000      	movs	r0, #0
 800c21c:	4770      	bx	lr

0800c21e <__swrite>:
 800c21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c222:	461f      	mov	r7, r3
 800c224:	898b      	ldrh	r3, [r1, #12]
 800c226:	05db      	lsls	r3, r3, #23
 800c228:	4605      	mov	r5, r0
 800c22a:	460c      	mov	r4, r1
 800c22c:	4616      	mov	r6, r2
 800c22e:	d505      	bpl.n	800c23c <__swrite+0x1e>
 800c230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c234:	2302      	movs	r3, #2
 800c236:	2200      	movs	r2, #0
 800c238:	f001 f9d8 	bl	800d5ec <_lseek_r>
 800c23c:	89a3      	ldrh	r3, [r4, #12]
 800c23e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c242:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c246:	81a3      	strh	r3, [r4, #12]
 800c248:	4632      	mov	r2, r6
 800c24a:	463b      	mov	r3, r7
 800c24c:	4628      	mov	r0, r5
 800c24e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c252:	f000 b8ff 	b.w	800c454 <_write_r>

0800c256 <__sseek>:
 800c256:	b510      	push	{r4, lr}
 800c258:	460c      	mov	r4, r1
 800c25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c25e:	f001 f9c5 	bl	800d5ec <_lseek_r>
 800c262:	1c43      	adds	r3, r0, #1
 800c264:	89a3      	ldrh	r3, [r4, #12]
 800c266:	bf15      	itete	ne
 800c268:	6560      	strne	r0, [r4, #84]	; 0x54
 800c26a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c26e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c272:	81a3      	strheq	r3, [r4, #12]
 800c274:	bf18      	it	ne
 800c276:	81a3      	strhne	r3, [r4, #12]
 800c278:	bd10      	pop	{r4, pc}

0800c27a <__sclose>:
 800c27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c27e:	f000 b969 	b.w	800c554 <_close_r>

0800c282 <strcpy>:
 800c282:	4603      	mov	r3, r0
 800c284:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c288:	f803 2b01 	strb.w	r2, [r3], #1
 800c28c:	2a00      	cmp	r2, #0
 800c28e:	d1f9      	bne.n	800c284 <strcpy+0x2>
 800c290:	4770      	bx	lr
	...

0800c294 <_strtol_l.constprop.0>:
 800c294:	2b01      	cmp	r3, #1
 800c296:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c29a:	d001      	beq.n	800c2a0 <_strtol_l.constprop.0+0xc>
 800c29c:	2b24      	cmp	r3, #36	; 0x24
 800c29e:	d906      	bls.n	800c2ae <_strtol_l.constprop.0+0x1a>
 800c2a0:	f7ff f902 	bl	800b4a8 <__errno>
 800c2a4:	2316      	movs	r3, #22
 800c2a6:	6003      	str	r3, [r0, #0]
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c394 <_strtol_l.constprop.0+0x100>
 800c2b2:	460d      	mov	r5, r1
 800c2b4:	462e      	mov	r6, r5
 800c2b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2ba:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c2be:	f017 0708 	ands.w	r7, r7, #8
 800c2c2:	d1f7      	bne.n	800c2b4 <_strtol_l.constprop.0+0x20>
 800c2c4:	2c2d      	cmp	r4, #45	; 0x2d
 800c2c6:	d132      	bne.n	800c32e <_strtol_l.constprop.0+0x9a>
 800c2c8:	782c      	ldrb	r4, [r5, #0]
 800c2ca:	2701      	movs	r7, #1
 800c2cc:	1cb5      	adds	r5, r6, #2
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d05b      	beq.n	800c38a <_strtol_l.constprop.0+0xf6>
 800c2d2:	2b10      	cmp	r3, #16
 800c2d4:	d109      	bne.n	800c2ea <_strtol_l.constprop.0+0x56>
 800c2d6:	2c30      	cmp	r4, #48	; 0x30
 800c2d8:	d107      	bne.n	800c2ea <_strtol_l.constprop.0+0x56>
 800c2da:	782c      	ldrb	r4, [r5, #0]
 800c2dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c2e0:	2c58      	cmp	r4, #88	; 0x58
 800c2e2:	d14d      	bne.n	800c380 <_strtol_l.constprop.0+0xec>
 800c2e4:	786c      	ldrb	r4, [r5, #1]
 800c2e6:	2310      	movs	r3, #16
 800c2e8:	3502      	adds	r5, #2
 800c2ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c2ee:	f108 38ff 	add.w	r8, r8, #4294967295
 800c2f2:	f04f 0c00 	mov.w	ip, #0
 800c2f6:	fbb8 f9f3 	udiv	r9, r8, r3
 800c2fa:	4666      	mov	r6, ip
 800c2fc:	fb03 8a19 	mls	sl, r3, r9, r8
 800c300:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c304:	f1be 0f09 	cmp.w	lr, #9
 800c308:	d816      	bhi.n	800c338 <_strtol_l.constprop.0+0xa4>
 800c30a:	4674      	mov	r4, lr
 800c30c:	42a3      	cmp	r3, r4
 800c30e:	dd24      	ble.n	800c35a <_strtol_l.constprop.0+0xc6>
 800c310:	f1bc 0f00 	cmp.w	ip, #0
 800c314:	db1e      	blt.n	800c354 <_strtol_l.constprop.0+0xc0>
 800c316:	45b1      	cmp	r9, r6
 800c318:	d31c      	bcc.n	800c354 <_strtol_l.constprop.0+0xc0>
 800c31a:	d101      	bne.n	800c320 <_strtol_l.constprop.0+0x8c>
 800c31c:	45a2      	cmp	sl, r4
 800c31e:	db19      	blt.n	800c354 <_strtol_l.constprop.0+0xc0>
 800c320:	fb06 4603 	mla	r6, r6, r3, r4
 800c324:	f04f 0c01 	mov.w	ip, #1
 800c328:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c32c:	e7e8      	b.n	800c300 <_strtol_l.constprop.0+0x6c>
 800c32e:	2c2b      	cmp	r4, #43	; 0x2b
 800c330:	bf04      	itt	eq
 800c332:	782c      	ldrbeq	r4, [r5, #0]
 800c334:	1cb5      	addeq	r5, r6, #2
 800c336:	e7ca      	b.n	800c2ce <_strtol_l.constprop.0+0x3a>
 800c338:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c33c:	f1be 0f19 	cmp.w	lr, #25
 800c340:	d801      	bhi.n	800c346 <_strtol_l.constprop.0+0xb2>
 800c342:	3c37      	subs	r4, #55	; 0x37
 800c344:	e7e2      	b.n	800c30c <_strtol_l.constprop.0+0x78>
 800c346:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c34a:	f1be 0f19 	cmp.w	lr, #25
 800c34e:	d804      	bhi.n	800c35a <_strtol_l.constprop.0+0xc6>
 800c350:	3c57      	subs	r4, #87	; 0x57
 800c352:	e7db      	b.n	800c30c <_strtol_l.constprop.0+0x78>
 800c354:	f04f 3cff 	mov.w	ip, #4294967295
 800c358:	e7e6      	b.n	800c328 <_strtol_l.constprop.0+0x94>
 800c35a:	f1bc 0f00 	cmp.w	ip, #0
 800c35e:	da05      	bge.n	800c36c <_strtol_l.constprop.0+0xd8>
 800c360:	2322      	movs	r3, #34	; 0x22
 800c362:	6003      	str	r3, [r0, #0]
 800c364:	4646      	mov	r6, r8
 800c366:	b942      	cbnz	r2, 800c37a <_strtol_l.constprop.0+0xe6>
 800c368:	4630      	mov	r0, r6
 800c36a:	e79e      	b.n	800c2aa <_strtol_l.constprop.0+0x16>
 800c36c:	b107      	cbz	r7, 800c370 <_strtol_l.constprop.0+0xdc>
 800c36e:	4276      	negs	r6, r6
 800c370:	2a00      	cmp	r2, #0
 800c372:	d0f9      	beq.n	800c368 <_strtol_l.constprop.0+0xd4>
 800c374:	f1bc 0f00 	cmp.w	ip, #0
 800c378:	d000      	beq.n	800c37c <_strtol_l.constprop.0+0xe8>
 800c37a:	1e69      	subs	r1, r5, #1
 800c37c:	6011      	str	r1, [r2, #0]
 800c37e:	e7f3      	b.n	800c368 <_strtol_l.constprop.0+0xd4>
 800c380:	2430      	movs	r4, #48	; 0x30
 800c382:	2b00      	cmp	r3, #0
 800c384:	d1b1      	bne.n	800c2ea <_strtol_l.constprop.0+0x56>
 800c386:	2308      	movs	r3, #8
 800c388:	e7af      	b.n	800c2ea <_strtol_l.constprop.0+0x56>
 800c38a:	2c30      	cmp	r4, #48	; 0x30
 800c38c:	d0a5      	beq.n	800c2da <_strtol_l.constprop.0+0x46>
 800c38e:	230a      	movs	r3, #10
 800c390:	e7ab      	b.n	800c2ea <_strtol_l.constprop.0+0x56>
 800c392:	bf00      	nop
 800c394:	0800edb7 	.word	0x0800edb7

0800c398 <_strtol_r>:
 800c398:	f7ff bf7c 	b.w	800c294 <_strtol_l.constprop.0>

0800c39c <strtol>:
 800c39c:	4613      	mov	r3, r2
 800c39e:	460a      	mov	r2, r1
 800c3a0:	4601      	mov	r1, r0
 800c3a2:	4802      	ldr	r0, [pc, #8]	; (800c3ac <strtol+0x10>)
 800c3a4:	6800      	ldr	r0, [r0, #0]
 800c3a6:	f7ff bf75 	b.w	800c294 <_strtol_l.constprop.0>
 800c3aa:	bf00      	nop
 800c3ac:	20000034 	.word	0x20000034

0800c3b0 <__swbuf_r>:
 800c3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3b2:	460e      	mov	r6, r1
 800c3b4:	4614      	mov	r4, r2
 800c3b6:	4605      	mov	r5, r0
 800c3b8:	b118      	cbz	r0, 800c3c2 <__swbuf_r+0x12>
 800c3ba:	6983      	ldr	r3, [r0, #24]
 800c3bc:	b90b      	cbnz	r3, 800c3c2 <__swbuf_r+0x12>
 800c3be:	f001 f86f 	bl	800d4a0 <__sinit>
 800c3c2:	4b21      	ldr	r3, [pc, #132]	; (800c448 <__swbuf_r+0x98>)
 800c3c4:	429c      	cmp	r4, r3
 800c3c6:	d12b      	bne.n	800c420 <__swbuf_r+0x70>
 800c3c8:	686c      	ldr	r4, [r5, #4]
 800c3ca:	69a3      	ldr	r3, [r4, #24]
 800c3cc:	60a3      	str	r3, [r4, #8]
 800c3ce:	89a3      	ldrh	r3, [r4, #12]
 800c3d0:	071a      	lsls	r2, r3, #28
 800c3d2:	d52f      	bpl.n	800c434 <__swbuf_r+0x84>
 800c3d4:	6923      	ldr	r3, [r4, #16]
 800c3d6:	b36b      	cbz	r3, 800c434 <__swbuf_r+0x84>
 800c3d8:	6923      	ldr	r3, [r4, #16]
 800c3da:	6820      	ldr	r0, [r4, #0]
 800c3dc:	1ac0      	subs	r0, r0, r3
 800c3de:	6963      	ldr	r3, [r4, #20]
 800c3e0:	b2f6      	uxtb	r6, r6
 800c3e2:	4283      	cmp	r3, r0
 800c3e4:	4637      	mov	r7, r6
 800c3e6:	dc04      	bgt.n	800c3f2 <__swbuf_r+0x42>
 800c3e8:	4621      	mov	r1, r4
 800c3ea:	4628      	mov	r0, r5
 800c3ec:	f000 ffc4 	bl	800d378 <_fflush_r>
 800c3f0:	bb30      	cbnz	r0, 800c440 <__swbuf_r+0x90>
 800c3f2:	68a3      	ldr	r3, [r4, #8]
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	60a3      	str	r3, [r4, #8]
 800c3f8:	6823      	ldr	r3, [r4, #0]
 800c3fa:	1c5a      	adds	r2, r3, #1
 800c3fc:	6022      	str	r2, [r4, #0]
 800c3fe:	701e      	strb	r6, [r3, #0]
 800c400:	6963      	ldr	r3, [r4, #20]
 800c402:	3001      	adds	r0, #1
 800c404:	4283      	cmp	r3, r0
 800c406:	d004      	beq.n	800c412 <__swbuf_r+0x62>
 800c408:	89a3      	ldrh	r3, [r4, #12]
 800c40a:	07db      	lsls	r3, r3, #31
 800c40c:	d506      	bpl.n	800c41c <__swbuf_r+0x6c>
 800c40e:	2e0a      	cmp	r6, #10
 800c410:	d104      	bne.n	800c41c <__swbuf_r+0x6c>
 800c412:	4621      	mov	r1, r4
 800c414:	4628      	mov	r0, r5
 800c416:	f000 ffaf 	bl	800d378 <_fflush_r>
 800c41a:	b988      	cbnz	r0, 800c440 <__swbuf_r+0x90>
 800c41c:	4638      	mov	r0, r7
 800c41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c420:	4b0a      	ldr	r3, [pc, #40]	; (800c44c <__swbuf_r+0x9c>)
 800c422:	429c      	cmp	r4, r3
 800c424:	d101      	bne.n	800c42a <__swbuf_r+0x7a>
 800c426:	68ac      	ldr	r4, [r5, #8]
 800c428:	e7cf      	b.n	800c3ca <__swbuf_r+0x1a>
 800c42a:	4b09      	ldr	r3, [pc, #36]	; (800c450 <__swbuf_r+0xa0>)
 800c42c:	429c      	cmp	r4, r3
 800c42e:	bf08      	it	eq
 800c430:	68ec      	ldreq	r4, [r5, #12]
 800c432:	e7ca      	b.n	800c3ca <__swbuf_r+0x1a>
 800c434:	4621      	mov	r1, r4
 800c436:	4628      	mov	r0, r5
 800c438:	f000 f81e 	bl	800c478 <__swsetup_r>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	d0cb      	beq.n	800c3d8 <__swbuf_r+0x28>
 800c440:	f04f 37ff 	mov.w	r7, #4294967295
 800c444:	e7ea      	b.n	800c41c <__swbuf_r+0x6c>
 800c446:	bf00      	nop
 800c448:	0800ef68 	.word	0x0800ef68
 800c44c:	0800ef88 	.word	0x0800ef88
 800c450:	0800ef48 	.word	0x0800ef48

0800c454 <_write_r>:
 800c454:	b538      	push	{r3, r4, r5, lr}
 800c456:	4d07      	ldr	r5, [pc, #28]	; (800c474 <_write_r+0x20>)
 800c458:	4604      	mov	r4, r0
 800c45a:	4608      	mov	r0, r1
 800c45c:	4611      	mov	r1, r2
 800c45e:	2200      	movs	r2, #0
 800c460:	602a      	str	r2, [r5, #0]
 800c462:	461a      	mov	r2, r3
 800c464:	f7f6 f820 	bl	80024a8 <_write>
 800c468:	1c43      	adds	r3, r0, #1
 800c46a:	d102      	bne.n	800c472 <_write_r+0x1e>
 800c46c:	682b      	ldr	r3, [r5, #0]
 800c46e:	b103      	cbz	r3, 800c472 <_write_r+0x1e>
 800c470:	6023      	str	r3, [r4, #0]
 800c472:	bd38      	pop	{r3, r4, r5, pc}
 800c474:	20002624 	.word	0x20002624

0800c478 <__swsetup_r>:
 800c478:	4b32      	ldr	r3, [pc, #200]	; (800c544 <__swsetup_r+0xcc>)
 800c47a:	b570      	push	{r4, r5, r6, lr}
 800c47c:	681d      	ldr	r5, [r3, #0]
 800c47e:	4606      	mov	r6, r0
 800c480:	460c      	mov	r4, r1
 800c482:	b125      	cbz	r5, 800c48e <__swsetup_r+0x16>
 800c484:	69ab      	ldr	r3, [r5, #24]
 800c486:	b913      	cbnz	r3, 800c48e <__swsetup_r+0x16>
 800c488:	4628      	mov	r0, r5
 800c48a:	f001 f809 	bl	800d4a0 <__sinit>
 800c48e:	4b2e      	ldr	r3, [pc, #184]	; (800c548 <__swsetup_r+0xd0>)
 800c490:	429c      	cmp	r4, r3
 800c492:	d10f      	bne.n	800c4b4 <__swsetup_r+0x3c>
 800c494:	686c      	ldr	r4, [r5, #4]
 800c496:	89a3      	ldrh	r3, [r4, #12]
 800c498:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c49c:	0719      	lsls	r1, r3, #28
 800c49e:	d42c      	bmi.n	800c4fa <__swsetup_r+0x82>
 800c4a0:	06dd      	lsls	r5, r3, #27
 800c4a2:	d411      	bmi.n	800c4c8 <__swsetup_r+0x50>
 800c4a4:	2309      	movs	r3, #9
 800c4a6:	6033      	str	r3, [r6, #0]
 800c4a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c4ac:	81a3      	strh	r3, [r4, #12]
 800c4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b2:	e03e      	b.n	800c532 <__swsetup_r+0xba>
 800c4b4:	4b25      	ldr	r3, [pc, #148]	; (800c54c <__swsetup_r+0xd4>)
 800c4b6:	429c      	cmp	r4, r3
 800c4b8:	d101      	bne.n	800c4be <__swsetup_r+0x46>
 800c4ba:	68ac      	ldr	r4, [r5, #8]
 800c4bc:	e7eb      	b.n	800c496 <__swsetup_r+0x1e>
 800c4be:	4b24      	ldr	r3, [pc, #144]	; (800c550 <__swsetup_r+0xd8>)
 800c4c0:	429c      	cmp	r4, r3
 800c4c2:	bf08      	it	eq
 800c4c4:	68ec      	ldreq	r4, [r5, #12]
 800c4c6:	e7e6      	b.n	800c496 <__swsetup_r+0x1e>
 800c4c8:	0758      	lsls	r0, r3, #29
 800c4ca:	d512      	bpl.n	800c4f2 <__swsetup_r+0x7a>
 800c4cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4ce:	b141      	cbz	r1, 800c4e2 <__swsetup_r+0x6a>
 800c4d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4d4:	4299      	cmp	r1, r3
 800c4d6:	d002      	beq.n	800c4de <__swsetup_r+0x66>
 800c4d8:	4630      	mov	r0, r6
 800c4da:	f7ff f835 	bl	800b548 <_free_r>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	6363      	str	r3, [r4, #52]	; 0x34
 800c4e2:	89a3      	ldrh	r3, [r4, #12]
 800c4e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c4e8:	81a3      	strh	r3, [r4, #12]
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	6063      	str	r3, [r4, #4]
 800c4ee:	6923      	ldr	r3, [r4, #16]
 800c4f0:	6023      	str	r3, [r4, #0]
 800c4f2:	89a3      	ldrh	r3, [r4, #12]
 800c4f4:	f043 0308 	orr.w	r3, r3, #8
 800c4f8:	81a3      	strh	r3, [r4, #12]
 800c4fa:	6923      	ldr	r3, [r4, #16]
 800c4fc:	b94b      	cbnz	r3, 800c512 <__swsetup_r+0x9a>
 800c4fe:	89a3      	ldrh	r3, [r4, #12]
 800c500:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c508:	d003      	beq.n	800c512 <__swsetup_r+0x9a>
 800c50a:	4621      	mov	r1, r4
 800c50c:	4630      	mov	r0, r6
 800c50e:	f001 f8a5 	bl	800d65c <__smakebuf_r>
 800c512:	89a0      	ldrh	r0, [r4, #12]
 800c514:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c518:	f010 0301 	ands.w	r3, r0, #1
 800c51c:	d00a      	beq.n	800c534 <__swsetup_r+0xbc>
 800c51e:	2300      	movs	r3, #0
 800c520:	60a3      	str	r3, [r4, #8]
 800c522:	6963      	ldr	r3, [r4, #20]
 800c524:	425b      	negs	r3, r3
 800c526:	61a3      	str	r3, [r4, #24]
 800c528:	6923      	ldr	r3, [r4, #16]
 800c52a:	b943      	cbnz	r3, 800c53e <__swsetup_r+0xc6>
 800c52c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c530:	d1ba      	bne.n	800c4a8 <__swsetup_r+0x30>
 800c532:	bd70      	pop	{r4, r5, r6, pc}
 800c534:	0781      	lsls	r1, r0, #30
 800c536:	bf58      	it	pl
 800c538:	6963      	ldrpl	r3, [r4, #20]
 800c53a:	60a3      	str	r3, [r4, #8]
 800c53c:	e7f4      	b.n	800c528 <__swsetup_r+0xb0>
 800c53e:	2000      	movs	r0, #0
 800c540:	e7f7      	b.n	800c532 <__swsetup_r+0xba>
 800c542:	bf00      	nop
 800c544:	20000034 	.word	0x20000034
 800c548:	0800ef68 	.word	0x0800ef68
 800c54c:	0800ef88 	.word	0x0800ef88
 800c550:	0800ef48 	.word	0x0800ef48

0800c554 <_close_r>:
 800c554:	b538      	push	{r3, r4, r5, lr}
 800c556:	4d06      	ldr	r5, [pc, #24]	; (800c570 <_close_r+0x1c>)
 800c558:	2300      	movs	r3, #0
 800c55a:	4604      	mov	r4, r0
 800c55c:	4608      	mov	r0, r1
 800c55e:	602b      	str	r3, [r5, #0]
 800c560:	f7f6 fd4b 	bl	8002ffa <_close>
 800c564:	1c43      	adds	r3, r0, #1
 800c566:	d102      	bne.n	800c56e <_close_r+0x1a>
 800c568:	682b      	ldr	r3, [r5, #0]
 800c56a:	b103      	cbz	r3, 800c56e <_close_r+0x1a>
 800c56c:	6023      	str	r3, [r4, #0]
 800c56e:	bd38      	pop	{r3, r4, r5, pc}
 800c570:	20002624 	.word	0x20002624

0800c574 <quorem>:
 800c574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c578:	6903      	ldr	r3, [r0, #16]
 800c57a:	690c      	ldr	r4, [r1, #16]
 800c57c:	42a3      	cmp	r3, r4
 800c57e:	4607      	mov	r7, r0
 800c580:	f2c0 8081 	blt.w	800c686 <quorem+0x112>
 800c584:	3c01      	subs	r4, #1
 800c586:	f101 0814 	add.w	r8, r1, #20
 800c58a:	f100 0514 	add.w	r5, r0, #20
 800c58e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c592:	9301      	str	r3, [sp, #4]
 800c594:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c59c:	3301      	adds	r3, #1
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c5a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5a8:	fbb2 f6f3 	udiv	r6, r2, r3
 800c5ac:	d331      	bcc.n	800c612 <quorem+0x9e>
 800c5ae:	f04f 0e00 	mov.w	lr, #0
 800c5b2:	4640      	mov	r0, r8
 800c5b4:	46ac      	mov	ip, r5
 800c5b6:	46f2      	mov	sl, lr
 800c5b8:	f850 2b04 	ldr.w	r2, [r0], #4
 800c5bc:	b293      	uxth	r3, r2
 800c5be:	fb06 e303 	mla	r3, r6, r3, lr
 800c5c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	ebaa 0303 	sub.w	r3, sl, r3
 800c5cc:	f8dc a000 	ldr.w	sl, [ip]
 800c5d0:	0c12      	lsrs	r2, r2, #16
 800c5d2:	fa13 f38a 	uxtah	r3, r3, sl
 800c5d6:	fb06 e202 	mla	r2, r6, r2, lr
 800c5da:	9300      	str	r3, [sp, #0]
 800c5dc:	9b00      	ldr	r3, [sp, #0]
 800c5de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c5e2:	b292      	uxth	r2, r2
 800c5e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c5e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5ec:	f8bd 3000 	ldrh.w	r3, [sp]
 800c5f0:	4581      	cmp	r9, r0
 800c5f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5f6:	f84c 3b04 	str.w	r3, [ip], #4
 800c5fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c5fe:	d2db      	bcs.n	800c5b8 <quorem+0x44>
 800c600:	f855 300b 	ldr.w	r3, [r5, fp]
 800c604:	b92b      	cbnz	r3, 800c612 <quorem+0x9e>
 800c606:	9b01      	ldr	r3, [sp, #4]
 800c608:	3b04      	subs	r3, #4
 800c60a:	429d      	cmp	r5, r3
 800c60c:	461a      	mov	r2, r3
 800c60e:	d32e      	bcc.n	800c66e <quorem+0xfa>
 800c610:	613c      	str	r4, [r7, #16]
 800c612:	4638      	mov	r0, r7
 800c614:	f001 faf0 	bl	800dbf8 <__mcmp>
 800c618:	2800      	cmp	r0, #0
 800c61a:	db24      	blt.n	800c666 <quorem+0xf2>
 800c61c:	3601      	adds	r6, #1
 800c61e:	4628      	mov	r0, r5
 800c620:	f04f 0c00 	mov.w	ip, #0
 800c624:	f858 2b04 	ldr.w	r2, [r8], #4
 800c628:	f8d0 e000 	ldr.w	lr, [r0]
 800c62c:	b293      	uxth	r3, r2
 800c62e:	ebac 0303 	sub.w	r3, ip, r3
 800c632:	0c12      	lsrs	r2, r2, #16
 800c634:	fa13 f38e 	uxtah	r3, r3, lr
 800c638:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c63c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c640:	b29b      	uxth	r3, r3
 800c642:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c646:	45c1      	cmp	r9, r8
 800c648:	f840 3b04 	str.w	r3, [r0], #4
 800c64c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c650:	d2e8      	bcs.n	800c624 <quorem+0xb0>
 800c652:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c656:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c65a:	b922      	cbnz	r2, 800c666 <quorem+0xf2>
 800c65c:	3b04      	subs	r3, #4
 800c65e:	429d      	cmp	r5, r3
 800c660:	461a      	mov	r2, r3
 800c662:	d30a      	bcc.n	800c67a <quorem+0x106>
 800c664:	613c      	str	r4, [r7, #16]
 800c666:	4630      	mov	r0, r6
 800c668:	b003      	add	sp, #12
 800c66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c66e:	6812      	ldr	r2, [r2, #0]
 800c670:	3b04      	subs	r3, #4
 800c672:	2a00      	cmp	r2, #0
 800c674:	d1cc      	bne.n	800c610 <quorem+0x9c>
 800c676:	3c01      	subs	r4, #1
 800c678:	e7c7      	b.n	800c60a <quorem+0x96>
 800c67a:	6812      	ldr	r2, [r2, #0]
 800c67c:	3b04      	subs	r3, #4
 800c67e:	2a00      	cmp	r2, #0
 800c680:	d1f0      	bne.n	800c664 <quorem+0xf0>
 800c682:	3c01      	subs	r4, #1
 800c684:	e7eb      	b.n	800c65e <quorem+0xea>
 800c686:	2000      	movs	r0, #0
 800c688:	e7ee      	b.n	800c668 <quorem+0xf4>
 800c68a:	0000      	movs	r0, r0
 800c68c:	0000      	movs	r0, r0
	...

0800c690 <_dtoa_r>:
 800c690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c694:	ed2d 8b04 	vpush	{d8-d9}
 800c698:	ec57 6b10 	vmov	r6, r7, d0
 800c69c:	b093      	sub	sp, #76	; 0x4c
 800c69e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c6a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c6a4:	9106      	str	r1, [sp, #24]
 800c6a6:	ee10 aa10 	vmov	sl, s0
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	9209      	str	r2, [sp, #36]	; 0x24
 800c6ae:	930c      	str	r3, [sp, #48]	; 0x30
 800c6b0:	46bb      	mov	fp, r7
 800c6b2:	b975      	cbnz	r5, 800c6d2 <_dtoa_r+0x42>
 800c6b4:	2010      	movs	r0, #16
 800c6b6:	f7fe ff21 	bl	800b4fc <malloc>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	6260      	str	r0, [r4, #36]	; 0x24
 800c6be:	b920      	cbnz	r0, 800c6ca <_dtoa_r+0x3a>
 800c6c0:	4ba7      	ldr	r3, [pc, #668]	; (800c960 <_dtoa_r+0x2d0>)
 800c6c2:	21ea      	movs	r1, #234	; 0xea
 800c6c4:	48a7      	ldr	r0, [pc, #668]	; (800c964 <_dtoa_r+0x2d4>)
 800c6c6:	f002 f925 	bl	800e914 <__assert_func>
 800c6ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c6ce:	6005      	str	r5, [r0, #0]
 800c6d0:	60c5      	str	r5, [r0, #12]
 800c6d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6d4:	6819      	ldr	r1, [r3, #0]
 800c6d6:	b151      	cbz	r1, 800c6ee <_dtoa_r+0x5e>
 800c6d8:	685a      	ldr	r2, [r3, #4]
 800c6da:	604a      	str	r2, [r1, #4]
 800c6dc:	2301      	movs	r3, #1
 800c6de:	4093      	lsls	r3, r2
 800c6e0:	608b      	str	r3, [r1, #8]
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	f001 f846 	bl	800d774 <_Bfree>
 800c6e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	601a      	str	r2, [r3, #0]
 800c6ee:	1e3b      	subs	r3, r7, #0
 800c6f0:	bfaa      	itet	ge
 800c6f2:	2300      	movge	r3, #0
 800c6f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c6f8:	f8c8 3000 	strge.w	r3, [r8]
 800c6fc:	4b9a      	ldr	r3, [pc, #616]	; (800c968 <_dtoa_r+0x2d8>)
 800c6fe:	bfbc      	itt	lt
 800c700:	2201      	movlt	r2, #1
 800c702:	f8c8 2000 	strlt.w	r2, [r8]
 800c706:	ea33 030b 	bics.w	r3, r3, fp
 800c70a:	d11b      	bne.n	800c744 <_dtoa_r+0xb4>
 800c70c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c70e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c712:	6013      	str	r3, [r2, #0]
 800c714:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c718:	4333      	orrs	r3, r6
 800c71a:	f000 8592 	beq.w	800d242 <_dtoa_r+0xbb2>
 800c71e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c720:	b963      	cbnz	r3, 800c73c <_dtoa_r+0xac>
 800c722:	4b92      	ldr	r3, [pc, #584]	; (800c96c <_dtoa_r+0x2dc>)
 800c724:	e022      	b.n	800c76c <_dtoa_r+0xdc>
 800c726:	4b92      	ldr	r3, [pc, #584]	; (800c970 <_dtoa_r+0x2e0>)
 800c728:	9301      	str	r3, [sp, #4]
 800c72a:	3308      	adds	r3, #8
 800c72c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c72e:	6013      	str	r3, [r2, #0]
 800c730:	9801      	ldr	r0, [sp, #4]
 800c732:	b013      	add	sp, #76	; 0x4c
 800c734:	ecbd 8b04 	vpop	{d8-d9}
 800c738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c73c:	4b8b      	ldr	r3, [pc, #556]	; (800c96c <_dtoa_r+0x2dc>)
 800c73e:	9301      	str	r3, [sp, #4]
 800c740:	3303      	adds	r3, #3
 800c742:	e7f3      	b.n	800c72c <_dtoa_r+0x9c>
 800c744:	2200      	movs	r2, #0
 800c746:	2300      	movs	r3, #0
 800c748:	4650      	mov	r0, sl
 800c74a:	4659      	mov	r1, fp
 800c74c:	f7f4 f9cc 	bl	8000ae8 <__aeabi_dcmpeq>
 800c750:	ec4b ab19 	vmov	d9, sl, fp
 800c754:	4680      	mov	r8, r0
 800c756:	b158      	cbz	r0, 800c770 <_dtoa_r+0xe0>
 800c758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c75a:	2301      	movs	r3, #1
 800c75c:	6013      	str	r3, [r2, #0]
 800c75e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c760:	2b00      	cmp	r3, #0
 800c762:	f000 856b 	beq.w	800d23c <_dtoa_r+0xbac>
 800c766:	4883      	ldr	r0, [pc, #524]	; (800c974 <_dtoa_r+0x2e4>)
 800c768:	6018      	str	r0, [r3, #0]
 800c76a:	1e43      	subs	r3, r0, #1
 800c76c:	9301      	str	r3, [sp, #4]
 800c76e:	e7df      	b.n	800c730 <_dtoa_r+0xa0>
 800c770:	ec4b ab10 	vmov	d0, sl, fp
 800c774:	aa10      	add	r2, sp, #64	; 0x40
 800c776:	a911      	add	r1, sp, #68	; 0x44
 800c778:	4620      	mov	r0, r4
 800c77a:	f001 fae3 	bl	800dd44 <__d2b>
 800c77e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c782:	ee08 0a10 	vmov	s16, r0
 800c786:	2d00      	cmp	r5, #0
 800c788:	f000 8084 	beq.w	800c894 <_dtoa_r+0x204>
 800c78c:	ee19 3a90 	vmov	r3, s19
 800c790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c794:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c798:	4656      	mov	r6, sl
 800c79a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c79e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c7a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c7a6:	4b74      	ldr	r3, [pc, #464]	; (800c978 <_dtoa_r+0x2e8>)
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	4639      	mov	r1, r7
 800c7ae:	f7f3 fd7b 	bl	80002a8 <__aeabi_dsub>
 800c7b2:	a365      	add	r3, pc, #404	; (adr r3, 800c948 <_dtoa_r+0x2b8>)
 800c7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b8:	f7f3 ff2e 	bl	8000618 <__aeabi_dmul>
 800c7bc:	a364      	add	r3, pc, #400	; (adr r3, 800c950 <_dtoa_r+0x2c0>)
 800c7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c2:	f7f3 fd73 	bl	80002ac <__adddf3>
 800c7c6:	4606      	mov	r6, r0
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	460f      	mov	r7, r1
 800c7cc:	f7f3 feba 	bl	8000544 <__aeabi_i2d>
 800c7d0:	a361      	add	r3, pc, #388	; (adr r3, 800c958 <_dtoa_r+0x2c8>)
 800c7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d6:	f7f3 ff1f 	bl	8000618 <__aeabi_dmul>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	460b      	mov	r3, r1
 800c7de:	4630      	mov	r0, r6
 800c7e0:	4639      	mov	r1, r7
 800c7e2:	f7f3 fd63 	bl	80002ac <__adddf3>
 800c7e6:	4606      	mov	r6, r0
 800c7e8:	460f      	mov	r7, r1
 800c7ea:	f7f4 f9c5 	bl	8000b78 <__aeabi_d2iz>
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	9000      	str	r0, [sp, #0]
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	4639      	mov	r1, r7
 800c7f8:	f7f4 f980 	bl	8000afc <__aeabi_dcmplt>
 800c7fc:	b150      	cbz	r0, 800c814 <_dtoa_r+0x184>
 800c7fe:	9800      	ldr	r0, [sp, #0]
 800c800:	f7f3 fea0 	bl	8000544 <__aeabi_i2d>
 800c804:	4632      	mov	r2, r6
 800c806:	463b      	mov	r3, r7
 800c808:	f7f4 f96e 	bl	8000ae8 <__aeabi_dcmpeq>
 800c80c:	b910      	cbnz	r0, 800c814 <_dtoa_r+0x184>
 800c80e:	9b00      	ldr	r3, [sp, #0]
 800c810:	3b01      	subs	r3, #1
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	9b00      	ldr	r3, [sp, #0]
 800c816:	2b16      	cmp	r3, #22
 800c818:	d85a      	bhi.n	800c8d0 <_dtoa_r+0x240>
 800c81a:	9a00      	ldr	r2, [sp, #0]
 800c81c:	4b57      	ldr	r3, [pc, #348]	; (800c97c <_dtoa_r+0x2ec>)
 800c81e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c826:	ec51 0b19 	vmov	r0, r1, d9
 800c82a:	f7f4 f967 	bl	8000afc <__aeabi_dcmplt>
 800c82e:	2800      	cmp	r0, #0
 800c830:	d050      	beq.n	800c8d4 <_dtoa_r+0x244>
 800c832:	9b00      	ldr	r3, [sp, #0]
 800c834:	3b01      	subs	r3, #1
 800c836:	9300      	str	r3, [sp, #0]
 800c838:	2300      	movs	r3, #0
 800c83a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c83c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c83e:	1b5d      	subs	r5, r3, r5
 800c840:	1e6b      	subs	r3, r5, #1
 800c842:	9305      	str	r3, [sp, #20]
 800c844:	bf45      	ittet	mi
 800c846:	f1c5 0301 	rsbmi	r3, r5, #1
 800c84a:	9304      	strmi	r3, [sp, #16]
 800c84c:	2300      	movpl	r3, #0
 800c84e:	2300      	movmi	r3, #0
 800c850:	bf4c      	ite	mi
 800c852:	9305      	strmi	r3, [sp, #20]
 800c854:	9304      	strpl	r3, [sp, #16]
 800c856:	9b00      	ldr	r3, [sp, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	db3d      	blt.n	800c8d8 <_dtoa_r+0x248>
 800c85c:	9b05      	ldr	r3, [sp, #20]
 800c85e:	9a00      	ldr	r2, [sp, #0]
 800c860:	920a      	str	r2, [sp, #40]	; 0x28
 800c862:	4413      	add	r3, r2
 800c864:	9305      	str	r3, [sp, #20]
 800c866:	2300      	movs	r3, #0
 800c868:	9307      	str	r3, [sp, #28]
 800c86a:	9b06      	ldr	r3, [sp, #24]
 800c86c:	2b09      	cmp	r3, #9
 800c86e:	f200 8089 	bhi.w	800c984 <_dtoa_r+0x2f4>
 800c872:	2b05      	cmp	r3, #5
 800c874:	bfc4      	itt	gt
 800c876:	3b04      	subgt	r3, #4
 800c878:	9306      	strgt	r3, [sp, #24]
 800c87a:	9b06      	ldr	r3, [sp, #24]
 800c87c:	f1a3 0302 	sub.w	r3, r3, #2
 800c880:	bfcc      	ite	gt
 800c882:	2500      	movgt	r5, #0
 800c884:	2501      	movle	r5, #1
 800c886:	2b03      	cmp	r3, #3
 800c888:	f200 8087 	bhi.w	800c99a <_dtoa_r+0x30a>
 800c88c:	e8df f003 	tbb	[pc, r3]
 800c890:	59383a2d 	.word	0x59383a2d
 800c894:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c898:	441d      	add	r5, r3
 800c89a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c89e:	2b20      	cmp	r3, #32
 800c8a0:	bfc1      	itttt	gt
 800c8a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c8a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c8aa:	fa0b f303 	lslgt.w	r3, fp, r3
 800c8ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c8b2:	bfda      	itte	le
 800c8b4:	f1c3 0320 	rsble	r3, r3, #32
 800c8b8:	fa06 f003 	lslle.w	r0, r6, r3
 800c8bc:	4318      	orrgt	r0, r3
 800c8be:	f7f3 fe31 	bl	8000524 <__aeabi_ui2d>
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	4606      	mov	r6, r0
 800c8c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c8ca:	3d01      	subs	r5, #1
 800c8cc:	930e      	str	r3, [sp, #56]	; 0x38
 800c8ce:	e76a      	b.n	800c7a6 <_dtoa_r+0x116>
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	e7b2      	b.n	800c83a <_dtoa_r+0x1aa>
 800c8d4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c8d6:	e7b1      	b.n	800c83c <_dtoa_r+0x1ac>
 800c8d8:	9b04      	ldr	r3, [sp, #16]
 800c8da:	9a00      	ldr	r2, [sp, #0]
 800c8dc:	1a9b      	subs	r3, r3, r2
 800c8de:	9304      	str	r3, [sp, #16]
 800c8e0:	4253      	negs	r3, r2
 800c8e2:	9307      	str	r3, [sp, #28]
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	930a      	str	r3, [sp, #40]	; 0x28
 800c8e8:	e7bf      	b.n	800c86a <_dtoa_r+0x1da>
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	9308      	str	r3, [sp, #32]
 800c8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	dc55      	bgt.n	800c9a0 <_dtoa_r+0x310>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	9209      	str	r2, [sp, #36]	; 0x24
 800c8fe:	e00c      	b.n	800c91a <_dtoa_r+0x28a>
 800c900:	2301      	movs	r3, #1
 800c902:	e7f3      	b.n	800c8ec <_dtoa_r+0x25c>
 800c904:	2300      	movs	r3, #0
 800c906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c908:	9308      	str	r3, [sp, #32]
 800c90a:	9b00      	ldr	r3, [sp, #0]
 800c90c:	4413      	add	r3, r2
 800c90e:	9302      	str	r3, [sp, #8]
 800c910:	3301      	adds	r3, #1
 800c912:	2b01      	cmp	r3, #1
 800c914:	9303      	str	r3, [sp, #12]
 800c916:	bfb8      	it	lt
 800c918:	2301      	movlt	r3, #1
 800c91a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c91c:	2200      	movs	r2, #0
 800c91e:	6042      	str	r2, [r0, #4]
 800c920:	2204      	movs	r2, #4
 800c922:	f102 0614 	add.w	r6, r2, #20
 800c926:	429e      	cmp	r6, r3
 800c928:	6841      	ldr	r1, [r0, #4]
 800c92a:	d93d      	bls.n	800c9a8 <_dtoa_r+0x318>
 800c92c:	4620      	mov	r0, r4
 800c92e:	f000 fee1 	bl	800d6f4 <_Balloc>
 800c932:	9001      	str	r0, [sp, #4]
 800c934:	2800      	cmp	r0, #0
 800c936:	d13b      	bne.n	800c9b0 <_dtoa_r+0x320>
 800c938:	4b11      	ldr	r3, [pc, #68]	; (800c980 <_dtoa_r+0x2f0>)
 800c93a:	4602      	mov	r2, r0
 800c93c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c940:	e6c0      	b.n	800c6c4 <_dtoa_r+0x34>
 800c942:	2301      	movs	r3, #1
 800c944:	e7df      	b.n	800c906 <_dtoa_r+0x276>
 800c946:	bf00      	nop
 800c948:	636f4361 	.word	0x636f4361
 800c94c:	3fd287a7 	.word	0x3fd287a7
 800c950:	8b60c8b3 	.word	0x8b60c8b3
 800c954:	3fc68a28 	.word	0x3fc68a28
 800c958:	509f79fb 	.word	0x509f79fb
 800c95c:	3fd34413 	.word	0x3fd34413
 800c960:	0800eec4 	.word	0x0800eec4
 800c964:	0800eedb 	.word	0x0800eedb
 800c968:	7ff00000 	.word	0x7ff00000
 800c96c:	0800eec0 	.word	0x0800eec0
 800c970:	0800eeb7 	.word	0x0800eeb7
 800c974:	0800f11a 	.word	0x0800f11a
 800c978:	3ff80000 	.word	0x3ff80000
 800c97c:	0800f030 	.word	0x0800f030
 800c980:	0800ef36 	.word	0x0800ef36
 800c984:	2501      	movs	r5, #1
 800c986:	2300      	movs	r3, #0
 800c988:	9306      	str	r3, [sp, #24]
 800c98a:	9508      	str	r5, [sp, #32]
 800c98c:	f04f 33ff 	mov.w	r3, #4294967295
 800c990:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c994:	2200      	movs	r2, #0
 800c996:	2312      	movs	r3, #18
 800c998:	e7b0      	b.n	800c8fc <_dtoa_r+0x26c>
 800c99a:	2301      	movs	r3, #1
 800c99c:	9308      	str	r3, [sp, #32]
 800c99e:	e7f5      	b.n	800c98c <_dtoa_r+0x2fc>
 800c9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c9a6:	e7b8      	b.n	800c91a <_dtoa_r+0x28a>
 800c9a8:	3101      	adds	r1, #1
 800c9aa:	6041      	str	r1, [r0, #4]
 800c9ac:	0052      	lsls	r2, r2, #1
 800c9ae:	e7b8      	b.n	800c922 <_dtoa_r+0x292>
 800c9b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9b2:	9a01      	ldr	r2, [sp, #4]
 800c9b4:	601a      	str	r2, [r3, #0]
 800c9b6:	9b03      	ldr	r3, [sp, #12]
 800c9b8:	2b0e      	cmp	r3, #14
 800c9ba:	f200 809d 	bhi.w	800caf8 <_dtoa_r+0x468>
 800c9be:	2d00      	cmp	r5, #0
 800c9c0:	f000 809a 	beq.w	800caf8 <_dtoa_r+0x468>
 800c9c4:	9b00      	ldr	r3, [sp, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	dd32      	ble.n	800ca30 <_dtoa_r+0x3a0>
 800c9ca:	4ab7      	ldr	r2, [pc, #732]	; (800cca8 <_dtoa_r+0x618>)
 800c9cc:	f003 030f 	and.w	r3, r3, #15
 800c9d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c9d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9d8:	9b00      	ldr	r3, [sp, #0]
 800c9da:	05d8      	lsls	r0, r3, #23
 800c9dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c9e0:	d516      	bpl.n	800ca10 <_dtoa_r+0x380>
 800c9e2:	4bb2      	ldr	r3, [pc, #712]	; (800ccac <_dtoa_r+0x61c>)
 800c9e4:	ec51 0b19 	vmov	r0, r1, d9
 800c9e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c9ec:	f7f3 ff3e 	bl	800086c <__aeabi_ddiv>
 800c9f0:	f007 070f 	and.w	r7, r7, #15
 800c9f4:	4682      	mov	sl, r0
 800c9f6:	468b      	mov	fp, r1
 800c9f8:	2503      	movs	r5, #3
 800c9fa:	4eac      	ldr	r6, [pc, #688]	; (800ccac <_dtoa_r+0x61c>)
 800c9fc:	b957      	cbnz	r7, 800ca14 <_dtoa_r+0x384>
 800c9fe:	4642      	mov	r2, r8
 800ca00:	464b      	mov	r3, r9
 800ca02:	4650      	mov	r0, sl
 800ca04:	4659      	mov	r1, fp
 800ca06:	f7f3 ff31 	bl	800086c <__aeabi_ddiv>
 800ca0a:	4682      	mov	sl, r0
 800ca0c:	468b      	mov	fp, r1
 800ca0e:	e028      	b.n	800ca62 <_dtoa_r+0x3d2>
 800ca10:	2502      	movs	r5, #2
 800ca12:	e7f2      	b.n	800c9fa <_dtoa_r+0x36a>
 800ca14:	07f9      	lsls	r1, r7, #31
 800ca16:	d508      	bpl.n	800ca2a <_dtoa_r+0x39a>
 800ca18:	4640      	mov	r0, r8
 800ca1a:	4649      	mov	r1, r9
 800ca1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca20:	f7f3 fdfa 	bl	8000618 <__aeabi_dmul>
 800ca24:	3501      	adds	r5, #1
 800ca26:	4680      	mov	r8, r0
 800ca28:	4689      	mov	r9, r1
 800ca2a:	107f      	asrs	r7, r7, #1
 800ca2c:	3608      	adds	r6, #8
 800ca2e:	e7e5      	b.n	800c9fc <_dtoa_r+0x36c>
 800ca30:	f000 809b 	beq.w	800cb6a <_dtoa_r+0x4da>
 800ca34:	9b00      	ldr	r3, [sp, #0]
 800ca36:	4f9d      	ldr	r7, [pc, #628]	; (800ccac <_dtoa_r+0x61c>)
 800ca38:	425e      	negs	r6, r3
 800ca3a:	4b9b      	ldr	r3, [pc, #620]	; (800cca8 <_dtoa_r+0x618>)
 800ca3c:	f006 020f 	and.w	r2, r6, #15
 800ca40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca48:	ec51 0b19 	vmov	r0, r1, d9
 800ca4c:	f7f3 fde4 	bl	8000618 <__aeabi_dmul>
 800ca50:	1136      	asrs	r6, r6, #4
 800ca52:	4682      	mov	sl, r0
 800ca54:	468b      	mov	fp, r1
 800ca56:	2300      	movs	r3, #0
 800ca58:	2502      	movs	r5, #2
 800ca5a:	2e00      	cmp	r6, #0
 800ca5c:	d17a      	bne.n	800cb54 <_dtoa_r+0x4c4>
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d1d3      	bne.n	800ca0a <_dtoa_r+0x37a>
 800ca62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	f000 8082 	beq.w	800cb6e <_dtoa_r+0x4de>
 800ca6a:	4b91      	ldr	r3, [pc, #580]	; (800ccb0 <_dtoa_r+0x620>)
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	4650      	mov	r0, sl
 800ca70:	4659      	mov	r1, fp
 800ca72:	f7f4 f843 	bl	8000afc <__aeabi_dcmplt>
 800ca76:	2800      	cmp	r0, #0
 800ca78:	d079      	beq.n	800cb6e <_dtoa_r+0x4de>
 800ca7a:	9b03      	ldr	r3, [sp, #12]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d076      	beq.n	800cb6e <_dtoa_r+0x4de>
 800ca80:	9b02      	ldr	r3, [sp, #8]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	dd36      	ble.n	800caf4 <_dtoa_r+0x464>
 800ca86:	9b00      	ldr	r3, [sp, #0]
 800ca88:	4650      	mov	r0, sl
 800ca8a:	4659      	mov	r1, fp
 800ca8c:	1e5f      	subs	r7, r3, #1
 800ca8e:	2200      	movs	r2, #0
 800ca90:	4b88      	ldr	r3, [pc, #544]	; (800ccb4 <_dtoa_r+0x624>)
 800ca92:	f7f3 fdc1 	bl	8000618 <__aeabi_dmul>
 800ca96:	9e02      	ldr	r6, [sp, #8]
 800ca98:	4682      	mov	sl, r0
 800ca9a:	468b      	mov	fp, r1
 800ca9c:	3501      	adds	r5, #1
 800ca9e:	4628      	mov	r0, r5
 800caa0:	f7f3 fd50 	bl	8000544 <__aeabi_i2d>
 800caa4:	4652      	mov	r2, sl
 800caa6:	465b      	mov	r3, fp
 800caa8:	f7f3 fdb6 	bl	8000618 <__aeabi_dmul>
 800caac:	4b82      	ldr	r3, [pc, #520]	; (800ccb8 <_dtoa_r+0x628>)
 800caae:	2200      	movs	r2, #0
 800cab0:	f7f3 fbfc 	bl	80002ac <__adddf3>
 800cab4:	46d0      	mov	r8, sl
 800cab6:	46d9      	mov	r9, fp
 800cab8:	4682      	mov	sl, r0
 800caba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cabe:	2e00      	cmp	r6, #0
 800cac0:	d158      	bne.n	800cb74 <_dtoa_r+0x4e4>
 800cac2:	4b7e      	ldr	r3, [pc, #504]	; (800ccbc <_dtoa_r+0x62c>)
 800cac4:	2200      	movs	r2, #0
 800cac6:	4640      	mov	r0, r8
 800cac8:	4649      	mov	r1, r9
 800caca:	f7f3 fbed 	bl	80002a8 <__aeabi_dsub>
 800cace:	4652      	mov	r2, sl
 800cad0:	465b      	mov	r3, fp
 800cad2:	4680      	mov	r8, r0
 800cad4:	4689      	mov	r9, r1
 800cad6:	f7f4 f82f 	bl	8000b38 <__aeabi_dcmpgt>
 800cada:	2800      	cmp	r0, #0
 800cadc:	f040 8295 	bne.w	800d00a <_dtoa_r+0x97a>
 800cae0:	4652      	mov	r2, sl
 800cae2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cae6:	4640      	mov	r0, r8
 800cae8:	4649      	mov	r1, r9
 800caea:	f7f4 f807 	bl	8000afc <__aeabi_dcmplt>
 800caee:	2800      	cmp	r0, #0
 800caf0:	f040 8289 	bne.w	800d006 <_dtoa_r+0x976>
 800caf4:	ec5b ab19 	vmov	sl, fp, d9
 800caf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	f2c0 8148 	blt.w	800cd90 <_dtoa_r+0x700>
 800cb00:	9a00      	ldr	r2, [sp, #0]
 800cb02:	2a0e      	cmp	r2, #14
 800cb04:	f300 8144 	bgt.w	800cd90 <_dtoa_r+0x700>
 800cb08:	4b67      	ldr	r3, [pc, #412]	; (800cca8 <_dtoa_r+0x618>)
 800cb0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	f280 80d5 	bge.w	800ccc4 <_dtoa_r+0x634>
 800cb1a:	9b03      	ldr	r3, [sp, #12]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	f300 80d1 	bgt.w	800ccc4 <_dtoa_r+0x634>
 800cb22:	f040 826f 	bne.w	800d004 <_dtoa_r+0x974>
 800cb26:	4b65      	ldr	r3, [pc, #404]	; (800ccbc <_dtoa_r+0x62c>)
 800cb28:	2200      	movs	r2, #0
 800cb2a:	4640      	mov	r0, r8
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	f7f3 fd73 	bl	8000618 <__aeabi_dmul>
 800cb32:	4652      	mov	r2, sl
 800cb34:	465b      	mov	r3, fp
 800cb36:	f7f3 fff5 	bl	8000b24 <__aeabi_dcmpge>
 800cb3a:	9e03      	ldr	r6, [sp, #12]
 800cb3c:	4637      	mov	r7, r6
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	f040 8245 	bne.w	800cfce <_dtoa_r+0x93e>
 800cb44:	9d01      	ldr	r5, [sp, #4]
 800cb46:	2331      	movs	r3, #49	; 0x31
 800cb48:	f805 3b01 	strb.w	r3, [r5], #1
 800cb4c:	9b00      	ldr	r3, [sp, #0]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	9300      	str	r3, [sp, #0]
 800cb52:	e240      	b.n	800cfd6 <_dtoa_r+0x946>
 800cb54:	07f2      	lsls	r2, r6, #31
 800cb56:	d505      	bpl.n	800cb64 <_dtoa_r+0x4d4>
 800cb58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb5c:	f7f3 fd5c 	bl	8000618 <__aeabi_dmul>
 800cb60:	3501      	adds	r5, #1
 800cb62:	2301      	movs	r3, #1
 800cb64:	1076      	asrs	r6, r6, #1
 800cb66:	3708      	adds	r7, #8
 800cb68:	e777      	b.n	800ca5a <_dtoa_r+0x3ca>
 800cb6a:	2502      	movs	r5, #2
 800cb6c:	e779      	b.n	800ca62 <_dtoa_r+0x3d2>
 800cb6e:	9f00      	ldr	r7, [sp, #0]
 800cb70:	9e03      	ldr	r6, [sp, #12]
 800cb72:	e794      	b.n	800ca9e <_dtoa_r+0x40e>
 800cb74:	9901      	ldr	r1, [sp, #4]
 800cb76:	4b4c      	ldr	r3, [pc, #304]	; (800cca8 <_dtoa_r+0x618>)
 800cb78:	4431      	add	r1, r6
 800cb7a:	910d      	str	r1, [sp, #52]	; 0x34
 800cb7c:	9908      	ldr	r1, [sp, #32]
 800cb7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cb82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb86:	2900      	cmp	r1, #0
 800cb88:	d043      	beq.n	800cc12 <_dtoa_r+0x582>
 800cb8a:	494d      	ldr	r1, [pc, #308]	; (800ccc0 <_dtoa_r+0x630>)
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	f7f3 fe6d 	bl	800086c <__aeabi_ddiv>
 800cb92:	4652      	mov	r2, sl
 800cb94:	465b      	mov	r3, fp
 800cb96:	f7f3 fb87 	bl	80002a8 <__aeabi_dsub>
 800cb9a:	9d01      	ldr	r5, [sp, #4]
 800cb9c:	4682      	mov	sl, r0
 800cb9e:	468b      	mov	fp, r1
 800cba0:	4649      	mov	r1, r9
 800cba2:	4640      	mov	r0, r8
 800cba4:	f7f3 ffe8 	bl	8000b78 <__aeabi_d2iz>
 800cba8:	4606      	mov	r6, r0
 800cbaa:	f7f3 fccb 	bl	8000544 <__aeabi_i2d>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	4640      	mov	r0, r8
 800cbb4:	4649      	mov	r1, r9
 800cbb6:	f7f3 fb77 	bl	80002a8 <__aeabi_dsub>
 800cbba:	3630      	adds	r6, #48	; 0x30
 800cbbc:	f805 6b01 	strb.w	r6, [r5], #1
 800cbc0:	4652      	mov	r2, sl
 800cbc2:	465b      	mov	r3, fp
 800cbc4:	4680      	mov	r8, r0
 800cbc6:	4689      	mov	r9, r1
 800cbc8:	f7f3 ff98 	bl	8000afc <__aeabi_dcmplt>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	d163      	bne.n	800cc98 <_dtoa_r+0x608>
 800cbd0:	4642      	mov	r2, r8
 800cbd2:	464b      	mov	r3, r9
 800cbd4:	4936      	ldr	r1, [pc, #216]	; (800ccb0 <_dtoa_r+0x620>)
 800cbd6:	2000      	movs	r0, #0
 800cbd8:	f7f3 fb66 	bl	80002a8 <__aeabi_dsub>
 800cbdc:	4652      	mov	r2, sl
 800cbde:	465b      	mov	r3, fp
 800cbe0:	f7f3 ff8c 	bl	8000afc <__aeabi_dcmplt>
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	f040 80b5 	bne.w	800cd54 <_dtoa_r+0x6c4>
 800cbea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbec:	429d      	cmp	r5, r3
 800cbee:	d081      	beq.n	800caf4 <_dtoa_r+0x464>
 800cbf0:	4b30      	ldr	r3, [pc, #192]	; (800ccb4 <_dtoa_r+0x624>)
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	4650      	mov	r0, sl
 800cbf6:	4659      	mov	r1, fp
 800cbf8:	f7f3 fd0e 	bl	8000618 <__aeabi_dmul>
 800cbfc:	4b2d      	ldr	r3, [pc, #180]	; (800ccb4 <_dtoa_r+0x624>)
 800cbfe:	4682      	mov	sl, r0
 800cc00:	468b      	mov	fp, r1
 800cc02:	4640      	mov	r0, r8
 800cc04:	4649      	mov	r1, r9
 800cc06:	2200      	movs	r2, #0
 800cc08:	f7f3 fd06 	bl	8000618 <__aeabi_dmul>
 800cc0c:	4680      	mov	r8, r0
 800cc0e:	4689      	mov	r9, r1
 800cc10:	e7c6      	b.n	800cba0 <_dtoa_r+0x510>
 800cc12:	4650      	mov	r0, sl
 800cc14:	4659      	mov	r1, fp
 800cc16:	f7f3 fcff 	bl	8000618 <__aeabi_dmul>
 800cc1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc1c:	9d01      	ldr	r5, [sp, #4]
 800cc1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc20:	4682      	mov	sl, r0
 800cc22:	468b      	mov	fp, r1
 800cc24:	4649      	mov	r1, r9
 800cc26:	4640      	mov	r0, r8
 800cc28:	f7f3 ffa6 	bl	8000b78 <__aeabi_d2iz>
 800cc2c:	4606      	mov	r6, r0
 800cc2e:	f7f3 fc89 	bl	8000544 <__aeabi_i2d>
 800cc32:	3630      	adds	r6, #48	; 0x30
 800cc34:	4602      	mov	r2, r0
 800cc36:	460b      	mov	r3, r1
 800cc38:	4640      	mov	r0, r8
 800cc3a:	4649      	mov	r1, r9
 800cc3c:	f7f3 fb34 	bl	80002a8 <__aeabi_dsub>
 800cc40:	f805 6b01 	strb.w	r6, [r5], #1
 800cc44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc46:	429d      	cmp	r5, r3
 800cc48:	4680      	mov	r8, r0
 800cc4a:	4689      	mov	r9, r1
 800cc4c:	f04f 0200 	mov.w	r2, #0
 800cc50:	d124      	bne.n	800cc9c <_dtoa_r+0x60c>
 800cc52:	4b1b      	ldr	r3, [pc, #108]	; (800ccc0 <_dtoa_r+0x630>)
 800cc54:	4650      	mov	r0, sl
 800cc56:	4659      	mov	r1, fp
 800cc58:	f7f3 fb28 	bl	80002ac <__adddf3>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	460b      	mov	r3, r1
 800cc60:	4640      	mov	r0, r8
 800cc62:	4649      	mov	r1, r9
 800cc64:	f7f3 ff68 	bl	8000b38 <__aeabi_dcmpgt>
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d173      	bne.n	800cd54 <_dtoa_r+0x6c4>
 800cc6c:	4652      	mov	r2, sl
 800cc6e:	465b      	mov	r3, fp
 800cc70:	4913      	ldr	r1, [pc, #76]	; (800ccc0 <_dtoa_r+0x630>)
 800cc72:	2000      	movs	r0, #0
 800cc74:	f7f3 fb18 	bl	80002a8 <__aeabi_dsub>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	4640      	mov	r0, r8
 800cc7e:	4649      	mov	r1, r9
 800cc80:	f7f3 ff3c 	bl	8000afc <__aeabi_dcmplt>
 800cc84:	2800      	cmp	r0, #0
 800cc86:	f43f af35 	beq.w	800caf4 <_dtoa_r+0x464>
 800cc8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cc8c:	1e6b      	subs	r3, r5, #1
 800cc8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc94:	2b30      	cmp	r3, #48	; 0x30
 800cc96:	d0f8      	beq.n	800cc8a <_dtoa_r+0x5fa>
 800cc98:	9700      	str	r7, [sp, #0]
 800cc9a:	e049      	b.n	800cd30 <_dtoa_r+0x6a0>
 800cc9c:	4b05      	ldr	r3, [pc, #20]	; (800ccb4 <_dtoa_r+0x624>)
 800cc9e:	f7f3 fcbb 	bl	8000618 <__aeabi_dmul>
 800cca2:	4680      	mov	r8, r0
 800cca4:	4689      	mov	r9, r1
 800cca6:	e7bd      	b.n	800cc24 <_dtoa_r+0x594>
 800cca8:	0800f030 	.word	0x0800f030
 800ccac:	0800f008 	.word	0x0800f008
 800ccb0:	3ff00000 	.word	0x3ff00000
 800ccb4:	40240000 	.word	0x40240000
 800ccb8:	401c0000 	.word	0x401c0000
 800ccbc:	40140000 	.word	0x40140000
 800ccc0:	3fe00000 	.word	0x3fe00000
 800ccc4:	9d01      	ldr	r5, [sp, #4]
 800ccc6:	4656      	mov	r6, sl
 800ccc8:	465f      	mov	r7, fp
 800ccca:	4642      	mov	r2, r8
 800cccc:	464b      	mov	r3, r9
 800ccce:	4630      	mov	r0, r6
 800ccd0:	4639      	mov	r1, r7
 800ccd2:	f7f3 fdcb 	bl	800086c <__aeabi_ddiv>
 800ccd6:	f7f3 ff4f 	bl	8000b78 <__aeabi_d2iz>
 800ccda:	4682      	mov	sl, r0
 800ccdc:	f7f3 fc32 	bl	8000544 <__aeabi_i2d>
 800cce0:	4642      	mov	r2, r8
 800cce2:	464b      	mov	r3, r9
 800cce4:	f7f3 fc98 	bl	8000618 <__aeabi_dmul>
 800cce8:	4602      	mov	r2, r0
 800ccea:	460b      	mov	r3, r1
 800ccec:	4630      	mov	r0, r6
 800ccee:	4639      	mov	r1, r7
 800ccf0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ccf4:	f7f3 fad8 	bl	80002a8 <__aeabi_dsub>
 800ccf8:	f805 6b01 	strb.w	r6, [r5], #1
 800ccfc:	9e01      	ldr	r6, [sp, #4]
 800ccfe:	9f03      	ldr	r7, [sp, #12]
 800cd00:	1bae      	subs	r6, r5, r6
 800cd02:	42b7      	cmp	r7, r6
 800cd04:	4602      	mov	r2, r0
 800cd06:	460b      	mov	r3, r1
 800cd08:	d135      	bne.n	800cd76 <_dtoa_r+0x6e6>
 800cd0a:	f7f3 facf 	bl	80002ac <__adddf3>
 800cd0e:	4642      	mov	r2, r8
 800cd10:	464b      	mov	r3, r9
 800cd12:	4606      	mov	r6, r0
 800cd14:	460f      	mov	r7, r1
 800cd16:	f7f3 ff0f 	bl	8000b38 <__aeabi_dcmpgt>
 800cd1a:	b9d0      	cbnz	r0, 800cd52 <_dtoa_r+0x6c2>
 800cd1c:	4642      	mov	r2, r8
 800cd1e:	464b      	mov	r3, r9
 800cd20:	4630      	mov	r0, r6
 800cd22:	4639      	mov	r1, r7
 800cd24:	f7f3 fee0 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd28:	b110      	cbz	r0, 800cd30 <_dtoa_r+0x6a0>
 800cd2a:	f01a 0f01 	tst.w	sl, #1
 800cd2e:	d110      	bne.n	800cd52 <_dtoa_r+0x6c2>
 800cd30:	4620      	mov	r0, r4
 800cd32:	ee18 1a10 	vmov	r1, s16
 800cd36:	f000 fd1d 	bl	800d774 <_Bfree>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	9800      	ldr	r0, [sp, #0]
 800cd3e:	702b      	strb	r3, [r5, #0]
 800cd40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd42:	3001      	adds	r0, #1
 800cd44:	6018      	str	r0, [r3, #0]
 800cd46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	f43f acf1 	beq.w	800c730 <_dtoa_r+0xa0>
 800cd4e:	601d      	str	r5, [r3, #0]
 800cd50:	e4ee      	b.n	800c730 <_dtoa_r+0xa0>
 800cd52:	9f00      	ldr	r7, [sp, #0]
 800cd54:	462b      	mov	r3, r5
 800cd56:	461d      	mov	r5, r3
 800cd58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd5c:	2a39      	cmp	r2, #57	; 0x39
 800cd5e:	d106      	bne.n	800cd6e <_dtoa_r+0x6de>
 800cd60:	9a01      	ldr	r2, [sp, #4]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d1f7      	bne.n	800cd56 <_dtoa_r+0x6c6>
 800cd66:	9901      	ldr	r1, [sp, #4]
 800cd68:	2230      	movs	r2, #48	; 0x30
 800cd6a:	3701      	adds	r7, #1
 800cd6c:	700a      	strb	r2, [r1, #0]
 800cd6e:	781a      	ldrb	r2, [r3, #0]
 800cd70:	3201      	adds	r2, #1
 800cd72:	701a      	strb	r2, [r3, #0]
 800cd74:	e790      	b.n	800cc98 <_dtoa_r+0x608>
 800cd76:	4ba6      	ldr	r3, [pc, #664]	; (800d010 <_dtoa_r+0x980>)
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f7f3 fc4d 	bl	8000618 <__aeabi_dmul>
 800cd7e:	2200      	movs	r2, #0
 800cd80:	2300      	movs	r3, #0
 800cd82:	4606      	mov	r6, r0
 800cd84:	460f      	mov	r7, r1
 800cd86:	f7f3 feaf 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd8a:	2800      	cmp	r0, #0
 800cd8c:	d09d      	beq.n	800ccca <_dtoa_r+0x63a>
 800cd8e:	e7cf      	b.n	800cd30 <_dtoa_r+0x6a0>
 800cd90:	9a08      	ldr	r2, [sp, #32]
 800cd92:	2a00      	cmp	r2, #0
 800cd94:	f000 80d7 	beq.w	800cf46 <_dtoa_r+0x8b6>
 800cd98:	9a06      	ldr	r2, [sp, #24]
 800cd9a:	2a01      	cmp	r2, #1
 800cd9c:	f300 80ba 	bgt.w	800cf14 <_dtoa_r+0x884>
 800cda0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cda2:	2a00      	cmp	r2, #0
 800cda4:	f000 80b2 	beq.w	800cf0c <_dtoa_r+0x87c>
 800cda8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cdac:	9e07      	ldr	r6, [sp, #28]
 800cdae:	9d04      	ldr	r5, [sp, #16]
 800cdb0:	9a04      	ldr	r2, [sp, #16]
 800cdb2:	441a      	add	r2, r3
 800cdb4:	9204      	str	r2, [sp, #16]
 800cdb6:	9a05      	ldr	r2, [sp, #20]
 800cdb8:	2101      	movs	r1, #1
 800cdba:	441a      	add	r2, r3
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	9205      	str	r2, [sp, #20]
 800cdc0:	f000 fd90 	bl	800d8e4 <__i2b>
 800cdc4:	4607      	mov	r7, r0
 800cdc6:	2d00      	cmp	r5, #0
 800cdc8:	dd0c      	ble.n	800cde4 <_dtoa_r+0x754>
 800cdca:	9b05      	ldr	r3, [sp, #20]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	dd09      	ble.n	800cde4 <_dtoa_r+0x754>
 800cdd0:	42ab      	cmp	r3, r5
 800cdd2:	9a04      	ldr	r2, [sp, #16]
 800cdd4:	bfa8      	it	ge
 800cdd6:	462b      	movge	r3, r5
 800cdd8:	1ad2      	subs	r2, r2, r3
 800cdda:	9204      	str	r2, [sp, #16]
 800cddc:	9a05      	ldr	r2, [sp, #20]
 800cdde:	1aed      	subs	r5, r5, r3
 800cde0:	1ad3      	subs	r3, r2, r3
 800cde2:	9305      	str	r3, [sp, #20]
 800cde4:	9b07      	ldr	r3, [sp, #28]
 800cde6:	b31b      	cbz	r3, 800ce30 <_dtoa_r+0x7a0>
 800cde8:	9b08      	ldr	r3, [sp, #32]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	f000 80af 	beq.w	800cf4e <_dtoa_r+0x8be>
 800cdf0:	2e00      	cmp	r6, #0
 800cdf2:	dd13      	ble.n	800ce1c <_dtoa_r+0x78c>
 800cdf4:	4639      	mov	r1, r7
 800cdf6:	4632      	mov	r2, r6
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	f000 fe33 	bl	800da64 <__pow5mult>
 800cdfe:	ee18 2a10 	vmov	r2, s16
 800ce02:	4601      	mov	r1, r0
 800ce04:	4607      	mov	r7, r0
 800ce06:	4620      	mov	r0, r4
 800ce08:	f000 fd82 	bl	800d910 <__multiply>
 800ce0c:	ee18 1a10 	vmov	r1, s16
 800ce10:	4680      	mov	r8, r0
 800ce12:	4620      	mov	r0, r4
 800ce14:	f000 fcae 	bl	800d774 <_Bfree>
 800ce18:	ee08 8a10 	vmov	s16, r8
 800ce1c:	9b07      	ldr	r3, [sp, #28]
 800ce1e:	1b9a      	subs	r2, r3, r6
 800ce20:	d006      	beq.n	800ce30 <_dtoa_r+0x7a0>
 800ce22:	ee18 1a10 	vmov	r1, s16
 800ce26:	4620      	mov	r0, r4
 800ce28:	f000 fe1c 	bl	800da64 <__pow5mult>
 800ce2c:	ee08 0a10 	vmov	s16, r0
 800ce30:	2101      	movs	r1, #1
 800ce32:	4620      	mov	r0, r4
 800ce34:	f000 fd56 	bl	800d8e4 <__i2b>
 800ce38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	4606      	mov	r6, r0
 800ce3e:	f340 8088 	ble.w	800cf52 <_dtoa_r+0x8c2>
 800ce42:	461a      	mov	r2, r3
 800ce44:	4601      	mov	r1, r0
 800ce46:	4620      	mov	r0, r4
 800ce48:	f000 fe0c 	bl	800da64 <__pow5mult>
 800ce4c:	9b06      	ldr	r3, [sp, #24]
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	4606      	mov	r6, r0
 800ce52:	f340 8081 	ble.w	800cf58 <_dtoa_r+0x8c8>
 800ce56:	f04f 0800 	mov.w	r8, #0
 800ce5a:	6933      	ldr	r3, [r6, #16]
 800ce5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ce60:	6918      	ldr	r0, [r3, #16]
 800ce62:	f000 fcef 	bl	800d844 <__hi0bits>
 800ce66:	f1c0 0020 	rsb	r0, r0, #32
 800ce6a:	9b05      	ldr	r3, [sp, #20]
 800ce6c:	4418      	add	r0, r3
 800ce6e:	f010 001f 	ands.w	r0, r0, #31
 800ce72:	f000 8092 	beq.w	800cf9a <_dtoa_r+0x90a>
 800ce76:	f1c0 0320 	rsb	r3, r0, #32
 800ce7a:	2b04      	cmp	r3, #4
 800ce7c:	f340 808a 	ble.w	800cf94 <_dtoa_r+0x904>
 800ce80:	f1c0 001c 	rsb	r0, r0, #28
 800ce84:	9b04      	ldr	r3, [sp, #16]
 800ce86:	4403      	add	r3, r0
 800ce88:	9304      	str	r3, [sp, #16]
 800ce8a:	9b05      	ldr	r3, [sp, #20]
 800ce8c:	4403      	add	r3, r0
 800ce8e:	4405      	add	r5, r0
 800ce90:	9305      	str	r3, [sp, #20]
 800ce92:	9b04      	ldr	r3, [sp, #16]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	dd07      	ble.n	800cea8 <_dtoa_r+0x818>
 800ce98:	ee18 1a10 	vmov	r1, s16
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f000 fe3a 	bl	800db18 <__lshift>
 800cea4:	ee08 0a10 	vmov	s16, r0
 800cea8:	9b05      	ldr	r3, [sp, #20]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	dd05      	ble.n	800ceba <_dtoa_r+0x82a>
 800ceae:	4631      	mov	r1, r6
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	f000 fe30 	bl	800db18 <__lshift>
 800ceb8:	4606      	mov	r6, r0
 800ceba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d06e      	beq.n	800cf9e <_dtoa_r+0x90e>
 800cec0:	ee18 0a10 	vmov	r0, s16
 800cec4:	4631      	mov	r1, r6
 800cec6:	f000 fe97 	bl	800dbf8 <__mcmp>
 800ceca:	2800      	cmp	r0, #0
 800cecc:	da67      	bge.n	800cf9e <_dtoa_r+0x90e>
 800cece:	9b00      	ldr	r3, [sp, #0]
 800ced0:	3b01      	subs	r3, #1
 800ced2:	ee18 1a10 	vmov	r1, s16
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	220a      	movs	r2, #10
 800ceda:	2300      	movs	r3, #0
 800cedc:	4620      	mov	r0, r4
 800cede:	f000 fc6b 	bl	800d7b8 <__multadd>
 800cee2:	9b08      	ldr	r3, [sp, #32]
 800cee4:	ee08 0a10 	vmov	s16, r0
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	f000 81b1 	beq.w	800d250 <_dtoa_r+0xbc0>
 800ceee:	2300      	movs	r3, #0
 800cef0:	4639      	mov	r1, r7
 800cef2:	220a      	movs	r2, #10
 800cef4:	4620      	mov	r0, r4
 800cef6:	f000 fc5f 	bl	800d7b8 <__multadd>
 800cefa:	9b02      	ldr	r3, [sp, #8]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	4607      	mov	r7, r0
 800cf00:	f300 808e 	bgt.w	800d020 <_dtoa_r+0x990>
 800cf04:	9b06      	ldr	r3, [sp, #24]
 800cf06:	2b02      	cmp	r3, #2
 800cf08:	dc51      	bgt.n	800cfae <_dtoa_r+0x91e>
 800cf0a:	e089      	b.n	800d020 <_dtoa_r+0x990>
 800cf0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf12:	e74b      	b.n	800cdac <_dtoa_r+0x71c>
 800cf14:	9b03      	ldr	r3, [sp, #12]
 800cf16:	1e5e      	subs	r6, r3, #1
 800cf18:	9b07      	ldr	r3, [sp, #28]
 800cf1a:	42b3      	cmp	r3, r6
 800cf1c:	bfbf      	itttt	lt
 800cf1e:	9b07      	ldrlt	r3, [sp, #28]
 800cf20:	9607      	strlt	r6, [sp, #28]
 800cf22:	1af2      	sublt	r2, r6, r3
 800cf24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cf26:	bfb6      	itet	lt
 800cf28:	189b      	addlt	r3, r3, r2
 800cf2a:	1b9e      	subge	r6, r3, r6
 800cf2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cf2e:	9b03      	ldr	r3, [sp, #12]
 800cf30:	bfb8      	it	lt
 800cf32:	2600      	movlt	r6, #0
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	bfb7      	itett	lt
 800cf38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cf3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cf40:	1a9d      	sublt	r5, r3, r2
 800cf42:	2300      	movlt	r3, #0
 800cf44:	e734      	b.n	800cdb0 <_dtoa_r+0x720>
 800cf46:	9e07      	ldr	r6, [sp, #28]
 800cf48:	9d04      	ldr	r5, [sp, #16]
 800cf4a:	9f08      	ldr	r7, [sp, #32]
 800cf4c:	e73b      	b.n	800cdc6 <_dtoa_r+0x736>
 800cf4e:	9a07      	ldr	r2, [sp, #28]
 800cf50:	e767      	b.n	800ce22 <_dtoa_r+0x792>
 800cf52:	9b06      	ldr	r3, [sp, #24]
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	dc18      	bgt.n	800cf8a <_dtoa_r+0x8fa>
 800cf58:	f1ba 0f00 	cmp.w	sl, #0
 800cf5c:	d115      	bne.n	800cf8a <_dtoa_r+0x8fa>
 800cf5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf62:	b993      	cbnz	r3, 800cf8a <_dtoa_r+0x8fa>
 800cf64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cf68:	0d1b      	lsrs	r3, r3, #20
 800cf6a:	051b      	lsls	r3, r3, #20
 800cf6c:	b183      	cbz	r3, 800cf90 <_dtoa_r+0x900>
 800cf6e:	9b04      	ldr	r3, [sp, #16]
 800cf70:	3301      	adds	r3, #1
 800cf72:	9304      	str	r3, [sp, #16]
 800cf74:	9b05      	ldr	r3, [sp, #20]
 800cf76:	3301      	adds	r3, #1
 800cf78:	9305      	str	r3, [sp, #20]
 800cf7a:	f04f 0801 	mov.w	r8, #1
 800cf7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	f47f af6a 	bne.w	800ce5a <_dtoa_r+0x7ca>
 800cf86:	2001      	movs	r0, #1
 800cf88:	e76f      	b.n	800ce6a <_dtoa_r+0x7da>
 800cf8a:	f04f 0800 	mov.w	r8, #0
 800cf8e:	e7f6      	b.n	800cf7e <_dtoa_r+0x8ee>
 800cf90:	4698      	mov	r8, r3
 800cf92:	e7f4      	b.n	800cf7e <_dtoa_r+0x8ee>
 800cf94:	f43f af7d 	beq.w	800ce92 <_dtoa_r+0x802>
 800cf98:	4618      	mov	r0, r3
 800cf9a:	301c      	adds	r0, #28
 800cf9c:	e772      	b.n	800ce84 <_dtoa_r+0x7f4>
 800cf9e:	9b03      	ldr	r3, [sp, #12]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	dc37      	bgt.n	800d014 <_dtoa_r+0x984>
 800cfa4:	9b06      	ldr	r3, [sp, #24]
 800cfa6:	2b02      	cmp	r3, #2
 800cfa8:	dd34      	ble.n	800d014 <_dtoa_r+0x984>
 800cfaa:	9b03      	ldr	r3, [sp, #12]
 800cfac:	9302      	str	r3, [sp, #8]
 800cfae:	9b02      	ldr	r3, [sp, #8]
 800cfb0:	b96b      	cbnz	r3, 800cfce <_dtoa_r+0x93e>
 800cfb2:	4631      	mov	r1, r6
 800cfb4:	2205      	movs	r2, #5
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f000 fbfe 	bl	800d7b8 <__multadd>
 800cfbc:	4601      	mov	r1, r0
 800cfbe:	4606      	mov	r6, r0
 800cfc0:	ee18 0a10 	vmov	r0, s16
 800cfc4:	f000 fe18 	bl	800dbf8 <__mcmp>
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	f73f adbb 	bgt.w	800cb44 <_dtoa_r+0x4b4>
 800cfce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfd0:	9d01      	ldr	r5, [sp, #4]
 800cfd2:	43db      	mvns	r3, r3
 800cfd4:	9300      	str	r3, [sp, #0]
 800cfd6:	f04f 0800 	mov.w	r8, #0
 800cfda:	4631      	mov	r1, r6
 800cfdc:	4620      	mov	r0, r4
 800cfde:	f000 fbc9 	bl	800d774 <_Bfree>
 800cfe2:	2f00      	cmp	r7, #0
 800cfe4:	f43f aea4 	beq.w	800cd30 <_dtoa_r+0x6a0>
 800cfe8:	f1b8 0f00 	cmp.w	r8, #0
 800cfec:	d005      	beq.n	800cffa <_dtoa_r+0x96a>
 800cfee:	45b8      	cmp	r8, r7
 800cff0:	d003      	beq.n	800cffa <_dtoa_r+0x96a>
 800cff2:	4641      	mov	r1, r8
 800cff4:	4620      	mov	r0, r4
 800cff6:	f000 fbbd 	bl	800d774 <_Bfree>
 800cffa:	4639      	mov	r1, r7
 800cffc:	4620      	mov	r0, r4
 800cffe:	f000 fbb9 	bl	800d774 <_Bfree>
 800d002:	e695      	b.n	800cd30 <_dtoa_r+0x6a0>
 800d004:	2600      	movs	r6, #0
 800d006:	4637      	mov	r7, r6
 800d008:	e7e1      	b.n	800cfce <_dtoa_r+0x93e>
 800d00a:	9700      	str	r7, [sp, #0]
 800d00c:	4637      	mov	r7, r6
 800d00e:	e599      	b.n	800cb44 <_dtoa_r+0x4b4>
 800d010:	40240000 	.word	0x40240000
 800d014:	9b08      	ldr	r3, [sp, #32]
 800d016:	2b00      	cmp	r3, #0
 800d018:	f000 80ca 	beq.w	800d1b0 <_dtoa_r+0xb20>
 800d01c:	9b03      	ldr	r3, [sp, #12]
 800d01e:	9302      	str	r3, [sp, #8]
 800d020:	2d00      	cmp	r5, #0
 800d022:	dd05      	ble.n	800d030 <_dtoa_r+0x9a0>
 800d024:	4639      	mov	r1, r7
 800d026:	462a      	mov	r2, r5
 800d028:	4620      	mov	r0, r4
 800d02a:	f000 fd75 	bl	800db18 <__lshift>
 800d02e:	4607      	mov	r7, r0
 800d030:	f1b8 0f00 	cmp.w	r8, #0
 800d034:	d05b      	beq.n	800d0ee <_dtoa_r+0xa5e>
 800d036:	6879      	ldr	r1, [r7, #4]
 800d038:	4620      	mov	r0, r4
 800d03a:	f000 fb5b 	bl	800d6f4 <_Balloc>
 800d03e:	4605      	mov	r5, r0
 800d040:	b928      	cbnz	r0, 800d04e <_dtoa_r+0x9be>
 800d042:	4b87      	ldr	r3, [pc, #540]	; (800d260 <_dtoa_r+0xbd0>)
 800d044:	4602      	mov	r2, r0
 800d046:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d04a:	f7ff bb3b 	b.w	800c6c4 <_dtoa_r+0x34>
 800d04e:	693a      	ldr	r2, [r7, #16]
 800d050:	3202      	adds	r2, #2
 800d052:	0092      	lsls	r2, r2, #2
 800d054:	f107 010c 	add.w	r1, r7, #12
 800d058:	300c      	adds	r0, #12
 800d05a:	f7fe fa5f 	bl	800b51c <memcpy>
 800d05e:	2201      	movs	r2, #1
 800d060:	4629      	mov	r1, r5
 800d062:	4620      	mov	r0, r4
 800d064:	f000 fd58 	bl	800db18 <__lshift>
 800d068:	9b01      	ldr	r3, [sp, #4]
 800d06a:	f103 0901 	add.w	r9, r3, #1
 800d06e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d072:	4413      	add	r3, r2
 800d074:	9305      	str	r3, [sp, #20]
 800d076:	f00a 0301 	and.w	r3, sl, #1
 800d07a:	46b8      	mov	r8, r7
 800d07c:	9304      	str	r3, [sp, #16]
 800d07e:	4607      	mov	r7, r0
 800d080:	4631      	mov	r1, r6
 800d082:	ee18 0a10 	vmov	r0, s16
 800d086:	f7ff fa75 	bl	800c574 <quorem>
 800d08a:	4641      	mov	r1, r8
 800d08c:	9002      	str	r0, [sp, #8]
 800d08e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d092:	ee18 0a10 	vmov	r0, s16
 800d096:	f000 fdaf 	bl	800dbf8 <__mcmp>
 800d09a:	463a      	mov	r2, r7
 800d09c:	9003      	str	r0, [sp, #12]
 800d09e:	4631      	mov	r1, r6
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	f000 fdc5 	bl	800dc30 <__mdiff>
 800d0a6:	68c2      	ldr	r2, [r0, #12]
 800d0a8:	f109 3bff 	add.w	fp, r9, #4294967295
 800d0ac:	4605      	mov	r5, r0
 800d0ae:	bb02      	cbnz	r2, 800d0f2 <_dtoa_r+0xa62>
 800d0b0:	4601      	mov	r1, r0
 800d0b2:	ee18 0a10 	vmov	r0, s16
 800d0b6:	f000 fd9f 	bl	800dbf8 <__mcmp>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	4629      	mov	r1, r5
 800d0be:	4620      	mov	r0, r4
 800d0c0:	9207      	str	r2, [sp, #28]
 800d0c2:	f000 fb57 	bl	800d774 <_Bfree>
 800d0c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d0ca:	ea43 0102 	orr.w	r1, r3, r2
 800d0ce:	9b04      	ldr	r3, [sp, #16]
 800d0d0:	430b      	orrs	r3, r1
 800d0d2:	464d      	mov	r5, r9
 800d0d4:	d10f      	bne.n	800d0f6 <_dtoa_r+0xa66>
 800d0d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d0da:	d02a      	beq.n	800d132 <_dtoa_r+0xaa2>
 800d0dc:	9b03      	ldr	r3, [sp, #12]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	dd02      	ble.n	800d0e8 <_dtoa_r+0xa58>
 800d0e2:	9b02      	ldr	r3, [sp, #8]
 800d0e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d0e8:	f88b a000 	strb.w	sl, [fp]
 800d0ec:	e775      	b.n	800cfda <_dtoa_r+0x94a>
 800d0ee:	4638      	mov	r0, r7
 800d0f0:	e7ba      	b.n	800d068 <_dtoa_r+0x9d8>
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	e7e2      	b.n	800d0bc <_dtoa_r+0xa2c>
 800d0f6:	9b03      	ldr	r3, [sp, #12]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	db04      	blt.n	800d106 <_dtoa_r+0xa76>
 800d0fc:	9906      	ldr	r1, [sp, #24]
 800d0fe:	430b      	orrs	r3, r1
 800d100:	9904      	ldr	r1, [sp, #16]
 800d102:	430b      	orrs	r3, r1
 800d104:	d122      	bne.n	800d14c <_dtoa_r+0xabc>
 800d106:	2a00      	cmp	r2, #0
 800d108:	ddee      	ble.n	800d0e8 <_dtoa_r+0xa58>
 800d10a:	ee18 1a10 	vmov	r1, s16
 800d10e:	2201      	movs	r2, #1
 800d110:	4620      	mov	r0, r4
 800d112:	f000 fd01 	bl	800db18 <__lshift>
 800d116:	4631      	mov	r1, r6
 800d118:	ee08 0a10 	vmov	s16, r0
 800d11c:	f000 fd6c 	bl	800dbf8 <__mcmp>
 800d120:	2800      	cmp	r0, #0
 800d122:	dc03      	bgt.n	800d12c <_dtoa_r+0xa9c>
 800d124:	d1e0      	bne.n	800d0e8 <_dtoa_r+0xa58>
 800d126:	f01a 0f01 	tst.w	sl, #1
 800d12a:	d0dd      	beq.n	800d0e8 <_dtoa_r+0xa58>
 800d12c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d130:	d1d7      	bne.n	800d0e2 <_dtoa_r+0xa52>
 800d132:	2339      	movs	r3, #57	; 0x39
 800d134:	f88b 3000 	strb.w	r3, [fp]
 800d138:	462b      	mov	r3, r5
 800d13a:	461d      	mov	r5, r3
 800d13c:	3b01      	subs	r3, #1
 800d13e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d142:	2a39      	cmp	r2, #57	; 0x39
 800d144:	d071      	beq.n	800d22a <_dtoa_r+0xb9a>
 800d146:	3201      	adds	r2, #1
 800d148:	701a      	strb	r2, [r3, #0]
 800d14a:	e746      	b.n	800cfda <_dtoa_r+0x94a>
 800d14c:	2a00      	cmp	r2, #0
 800d14e:	dd07      	ble.n	800d160 <_dtoa_r+0xad0>
 800d150:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d154:	d0ed      	beq.n	800d132 <_dtoa_r+0xaa2>
 800d156:	f10a 0301 	add.w	r3, sl, #1
 800d15a:	f88b 3000 	strb.w	r3, [fp]
 800d15e:	e73c      	b.n	800cfda <_dtoa_r+0x94a>
 800d160:	9b05      	ldr	r3, [sp, #20]
 800d162:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d166:	4599      	cmp	r9, r3
 800d168:	d047      	beq.n	800d1fa <_dtoa_r+0xb6a>
 800d16a:	ee18 1a10 	vmov	r1, s16
 800d16e:	2300      	movs	r3, #0
 800d170:	220a      	movs	r2, #10
 800d172:	4620      	mov	r0, r4
 800d174:	f000 fb20 	bl	800d7b8 <__multadd>
 800d178:	45b8      	cmp	r8, r7
 800d17a:	ee08 0a10 	vmov	s16, r0
 800d17e:	f04f 0300 	mov.w	r3, #0
 800d182:	f04f 020a 	mov.w	r2, #10
 800d186:	4641      	mov	r1, r8
 800d188:	4620      	mov	r0, r4
 800d18a:	d106      	bne.n	800d19a <_dtoa_r+0xb0a>
 800d18c:	f000 fb14 	bl	800d7b8 <__multadd>
 800d190:	4680      	mov	r8, r0
 800d192:	4607      	mov	r7, r0
 800d194:	f109 0901 	add.w	r9, r9, #1
 800d198:	e772      	b.n	800d080 <_dtoa_r+0x9f0>
 800d19a:	f000 fb0d 	bl	800d7b8 <__multadd>
 800d19e:	4639      	mov	r1, r7
 800d1a0:	4680      	mov	r8, r0
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	220a      	movs	r2, #10
 800d1a6:	4620      	mov	r0, r4
 800d1a8:	f000 fb06 	bl	800d7b8 <__multadd>
 800d1ac:	4607      	mov	r7, r0
 800d1ae:	e7f1      	b.n	800d194 <_dtoa_r+0xb04>
 800d1b0:	9b03      	ldr	r3, [sp, #12]
 800d1b2:	9302      	str	r3, [sp, #8]
 800d1b4:	9d01      	ldr	r5, [sp, #4]
 800d1b6:	ee18 0a10 	vmov	r0, s16
 800d1ba:	4631      	mov	r1, r6
 800d1bc:	f7ff f9da 	bl	800c574 <quorem>
 800d1c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d1c4:	9b01      	ldr	r3, [sp, #4]
 800d1c6:	f805 ab01 	strb.w	sl, [r5], #1
 800d1ca:	1aea      	subs	r2, r5, r3
 800d1cc:	9b02      	ldr	r3, [sp, #8]
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	dd09      	ble.n	800d1e6 <_dtoa_r+0xb56>
 800d1d2:	ee18 1a10 	vmov	r1, s16
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	220a      	movs	r2, #10
 800d1da:	4620      	mov	r0, r4
 800d1dc:	f000 faec 	bl	800d7b8 <__multadd>
 800d1e0:	ee08 0a10 	vmov	s16, r0
 800d1e4:	e7e7      	b.n	800d1b6 <_dtoa_r+0xb26>
 800d1e6:	9b02      	ldr	r3, [sp, #8]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	bfc8      	it	gt
 800d1ec:	461d      	movgt	r5, r3
 800d1ee:	9b01      	ldr	r3, [sp, #4]
 800d1f0:	bfd8      	it	le
 800d1f2:	2501      	movle	r5, #1
 800d1f4:	441d      	add	r5, r3
 800d1f6:	f04f 0800 	mov.w	r8, #0
 800d1fa:	ee18 1a10 	vmov	r1, s16
 800d1fe:	2201      	movs	r2, #1
 800d200:	4620      	mov	r0, r4
 800d202:	f000 fc89 	bl	800db18 <__lshift>
 800d206:	4631      	mov	r1, r6
 800d208:	ee08 0a10 	vmov	s16, r0
 800d20c:	f000 fcf4 	bl	800dbf8 <__mcmp>
 800d210:	2800      	cmp	r0, #0
 800d212:	dc91      	bgt.n	800d138 <_dtoa_r+0xaa8>
 800d214:	d102      	bne.n	800d21c <_dtoa_r+0xb8c>
 800d216:	f01a 0f01 	tst.w	sl, #1
 800d21a:	d18d      	bne.n	800d138 <_dtoa_r+0xaa8>
 800d21c:	462b      	mov	r3, r5
 800d21e:	461d      	mov	r5, r3
 800d220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d224:	2a30      	cmp	r2, #48	; 0x30
 800d226:	d0fa      	beq.n	800d21e <_dtoa_r+0xb8e>
 800d228:	e6d7      	b.n	800cfda <_dtoa_r+0x94a>
 800d22a:	9a01      	ldr	r2, [sp, #4]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d184      	bne.n	800d13a <_dtoa_r+0xaaa>
 800d230:	9b00      	ldr	r3, [sp, #0]
 800d232:	3301      	adds	r3, #1
 800d234:	9300      	str	r3, [sp, #0]
 800d236:	2331      	movs	r3, #49	; 0x31
 800d238:	7013      	strb	r3, [r2, #0]
 800d23a:	e6ce      	b.n	800cfda <_dtoa_r+0x94a>
 800d23c:	4b09      	ldr	r3, [pc, #36]	; (800d264 <_dtoa_r+0xbd4>)
 800d23e:	f7ff ba95 	b.w	800c76c <_dtoa_r+0xdc>
 800d242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d244:	2b00      	cmp	r3, #0
 800d246:	f47f aa6e 	bne.w	800c726 <_dtoa_r+0x96>
 800d24a:	4b07      	ldr	r3, [pc, #28]	; (800d268 <_dtoa_r+0xbd8>)
 800d24c:	f7ff ba8e 	b.w	800c76c <_dtoa_r+0xdc>
 800d250:	9b02      	ldr	r3, [sp, #8]
 800d252:	2b00      	cmp	r3, #0
 800d254:	dcae      	bgt.n	800d1b4 <_dtoa_r+0xb24>
 800d256:	9b06      	ldr	r3, [sp, #24]
 800d258:	2b02      	cmp	r3, #2
 800d25a:	f73f aea8 	bgt.w	800cfae <_dtoa_r+0x91e>
 800d25e:	e7a9      	b.n	800d1b4 <_dtoa_r+0xb24>
 800d260:	0800ef36 	.word	0x0800ef36
 800d264:	0800f119 	.word	0x0800f119
 800d268:	0800eeb7 	.word	0x0800eeb7

0800d26c <__sflush_r>:
 800d26c:	898a      	ldrh	r2, [r1, #12]
 800d26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d272:	4605      	mov	r5, r0
 800d274:	0710      	lsls	r0, r2, #28
 800d276:	460c      	mov	r4, r1
 800d278:	d458      	bmi.n	800d32c <__sflush_r+0xc0>
 800d27a:	684b      	ldr	r3, [r1, #4]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	dc05      	bgt.n	800d28c <__sflush_r+0x20>
 800d280:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d282:	2b00      	cmp	r3, #0
 800d284:	dc02      	bgt.n	800d28c <__sflush_r+0x20>
 800d286:	2000      	movs	r0, #0
 800d288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d28c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d28e:	2e00      	cmp	r6, #0
 800d290:	d0f9      	beq.n	800d286 <__sflush_r+0x1a>
 800d292:	2300      	movs	r3, #0
 800d294:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d298:	682f      	ldr	r7, [r5, #0]
 800d29a:	602b      	str	r3, [r5, #0]
 800d29c:	d032      	beq.n	800d304 <__sflush_r+0x98>
 800d29e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d2a0:	89a3      	ldrh	r3, [r4, #12]
 800d2a2:	075a      	lsls	r2, r3, #29
 800d2a4:	d505      	bpl.n	800d2b2 <__sflush_r+0x46>
 800d2a6:	6863      	ldr	r3, [r4, #4]
 800d2a8:	1ac0      	subs	r0, r0, r3
 800d2aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d2ac:	b10b      	cbz	r3, 800d2b2 <__sflush_r+0x46>
 800d2ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d2b0:	1ac0      	subs	r0, r0, r3
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	4602      	mov	r2, r0
 800d2b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d2b8:	6a21      	ldr	r1, [r4, #32]
 800d2ba:	4628      	mov	r0, r5
 800d2bc:	47b0      	blx	r6
 800d2be:	1c43      	adds	r3, r0, #1
 800d2c0:	89a3      	ldrh	r3, [r4, #12]
 800d2c2:	d106      	bne.n	800d2d2 <__sflush_r+0x66>
 800d2c4:	6829      	ldr	r1, [r5, #0]
 800d2c6:	291d      	cmp	r1, #29
 800d2c8:	d82c      	bhi.n	800d324 <__sflush_r+0xb8>
 800d2ca:	4a2a      	ldr	r2, [pc, #168]	; (800d374 <__sflush_r+0x108>)
 800d2cc:	40ca      	lsrs	r2, r1
 800d2ce:	07d6      	lsls	r6, r2, #31
 800d2d0:	d528      	bpl.n	800d324 <__sflush_r+0xb8>
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	6062      	str	r2, [r4, #4]
 800d2d6:	04d9      	lsls	r1, r3, #19
 800d2d8:	6922      	ldr	r2, [r4, #16]
 800d2da:	6022      	str	r2, [r4, #0]
 800d2dc:	d504      	bpl.n	800d2e8 <__sflush_r+0x7c>
 800d2de:	1c42      	adds	r2, r0, #1
 800d2e0:	d101      	bne.n	800d2e6 <__sflush_r+0x7a>
 800d2e2:	682b      	ldr	r3, [r5, #0]
 800d2e4:	b903      	cbnz	r3, 800d2e8 <__sflush_r+0x7c>
 800d2e6:	6560      	str	r0, [r4, #84]	; 0x54
 800d2e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2ea:	602f      	str	r7, [r5, #0]
 800d2ec:	2900      	cmp	r1, #0
 800d2ee:	d0ca      	beq.n	800d286 <__sflush_r+0x1a>
 800d2f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2f4:	4299      	cmp	r1, r3
 800d2f6:	d002      	beq.n	800d2fe <__sflush_r+0x92>
 800d2f8:	4628      	mov	r0, r5
 800d2fa:	f7fe f925 	bl	800b548 <_free_r>
 800d2fe:	2000      	movs	r0, #0
 800d300:	6360      	str	r0, [r4, #52]	; 0x34
 800d302:	e7c1      	b.n	800d288 <__sflush_r+0x1c>
 800d304:	6a21      	ldr	r1, [r4, #32]
 800d306:	2301      	movs	r3, #1
 800d308:	4628      	mov	r0, r5
 800d30a:	47b0      	blx	r6
 800d30c:	1c41      	adds	r1, r0, #1
 800d30e:	d1c7      	bne.n	800d2a0 <__sflush_r+0x34>
 800d310:	682b      	ldr	r3, [r5, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d0c4      	beq.n	800d2a0 <__sflush_r+0x34>
 800d316:	2b1d      	cmp	r3, #29
 800d318:	d001      	beq.n	800d31e <__sflush_r+0xb2>
 800d31a:	2b16      	cmp	r3, #22
 800d31c:	d101      	bne.n	800d322 <__sflush_r+0xb6>
 800d31e:	602f      	str	r7, [r5, #0]
 800d320:	e7b1      	b.n	800d286 <__sflush_r+0x1a>
 800d322:	89a3      	ldrh	r3, [r4, #12]
 800d324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d328:	81a3      	strh	r3, [r4, #12]
 800d32a:	e7ad      	b.n	800d288 <__sflush_r+0x1c>
 800d32c:	690f      	ldr	r7, [r1, #16]
 800d32e:	2f00      	cmp	r7, #0
 800d330:	d0a9      	beq.n	800d286 <__sflush_r+0x1a>
 800d332:	0793      	lsls	r3, r2, #30
 800d334:	680e      	ldr	r6, [r1, #0]
 800d336:	bf08      	it	eq
 800d338:	694b      	ldreq	r3, [r1, #20]
 800d33a:	600f      	str	r7, [r1, #0]
 800d33c:	bf18      	it	ne
 800d33e:	2300      	movne	r3, #0
 800d340:	eba6 0807 	sub.w	r8, r6, r7
 800d344:	608b      	str	r3, [r1, #8]
 800d346:	f1b8 0f00 	cmp.w	r8, #0
 800d34a:	dd9c      	ble.n	800d286 <__sflush_r+0x1a>
 800d34c:	6a21      	ldr	r1, [r4, #32]
 800d34e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d350:	4643      	mov	r3, r8
 800d352:	463a      	mov	r2, r7
 800d354:	4628      	mov	r0, r5
 800d356:	47b0      	blx	r6
 800d358:	2800      	cmp	r0, #0
 800d35a:	dc06      	bgt.n	800d36a <__sflush_r+0xfe>
 800d35c:	89a3      	ldrh	r3, [r4, #12]
 800d35e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d362:	81a3      	strh	r3, [r4, #12]
 800d364:	f04f 30ff 	mov.w	r0, #4294967295
 800d368:	e78e      	b.n	800d288 <__sflush_r+0x1c>
 800d36a:	4407      	add	r7, r0
 800d36c:	eba8 0800 	sub.w	r8, r8, r0
 800d370:	e7e9      	b.n	800d346 <__sflush_r+0xda>
 800d372:	bf00      	nop
 800d374:	20400001 	.word	0x20400001

0800d378 <_fflush_r>:
 800d378:	b538      	push	{r3, r4, r5, lr}
 800d37a:	690b      	ldr	r3, [r1, #16]
 800d37c:	4605      	mov	r5, r0
 800d37e:	460c      	mov	r4, r1
 800d380:	b913      	cbnz	r3, 800d388 <_fflush_r+0x10>
 800d382:	2500      	movs	r5, #0
 800d384:	4628      	mov	r0, r5
 800d386:	bd38      	pop	{r3, r4, r5, pc}
 800d388:	b118      	cbz	r0, 800d392 <_fflush_r+0x1a>
 800d38a:	6983      	ldr	r3, [r0, #24]
 800d38c:	b90b      	cbnz	r3, 800d392 <_fflush_r+0x1a>
 800d38e:	f000 f887 	bl	800d4a0 <__sinit>
 800d392:	4b14      	ldr	r3, [pc, #80]	; (800d3e4 <_fflush_r+0x6c>)
 800d394:	429c      	cmp	r4, r3
 800d396:	d11b      	bne.n	800d3d0 <_fflush_r+0x58>
 800d398:	686c      	ldr	r4, [r5, #4]
 800d39a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d0ef      	beq.n	800d382 <_fflush_r+0xa>
 800d3a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d3a4:	07d0      	lsls	r0, r2, #31
 800d3a6:	d404      	bmi.n	800d3b2 <_fflush_r+0x3a>
 800d3a8:	0599      	lsls	r1, r3, #22
 800d3aa:	d402      	bmi.n	800d3b2 <_fflush_r+0x3a>
 800d3ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3ae:	f000 f91a 	bl	800d5e6 <__retarget_lock_acquire_recursive>
 800d3b2:	4628      	mov	r0, r5
 800d3b4:	4621      	mov	r1, r4
 800d3b6:	f7ff ff59 	bl	800d26c <__sflush_r>
 800d3ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3bc:	07da      	lsls	r2, r3, #31
 800d3be:	4605      	mov	r5, r0
 800d3c0:	d4e0      	bmi.n	800d384 <_fflush_r+0xc>
 800d3c2:	89a3      	ldrh	r3, [r4, #12]
 800d3c4:	059b      	lsls	r3, r3, #22
 800d3c6:	d4dd      	bmi.n	800d384 <_fflush_r+0xc>
 800d3c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3ca:	f000 f90d 	bl	800d5e8 <__retarget_lock_release_recursive>
 800d3ce:	e7d9      	b.n	800d384 <_fflush_r+0xc>
 800d3d0:	4b05      	ldr	r3, [pc, #20]	; (800d3e8 <_fflush_r+0x70>)
 800d3d2:	429c      	cmp	r4, r3
 800d3d4:	d101      	bne.n	800d3da <_fflush_r+0x62>
 800d3d6:	68ac      	ldr	r4, [r5, #8]
 800d3d8:	e7df      	b.n	800d39a <_fflush_r+0x22>
 800d3da:	4b04      	ldr	r3, [pc, #16]	; (800d3ec <_fflush_r+0x74>)
 800d3dc:	429c      	cmp	r4, r3
 800d3de:	bf08      	it	eq
 800d3e0:	68ec      	ldreq	r4, [r5, #12]
 800d3e2:	e7da      	b.n	800d39a <_fflush_r+0x22>
 800d3e4:	0800ef68 	.word	0x0800ef68
 800d3e8:	0800ef88 	.word	0x0800ef88
 800d3ec:	0800ef48 	.word	0x0800ef48

0800d3f0 <std>:
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	b510      	push	{r4, lr}
 800d3f4:	4604      	mov	r4, r0
 800d3f6:	e9c0 3300 	strd	r3, r3, [r0]
 800d3fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3fe:	6083      	str	r3, [r0, #8]
 800d400:	8181      	strh	r1, [r0, #12]
 800d402:	6643      	str	r3, [r0, #100]	; 0x64
 800d404:	81c2      	strh	r2, [r0, #14]
 800d406:	6183      	str	r3, [r0, #24]
 800d408:	4619      	mov	r1, r3
 800d40a:	2208      	movs	r2, #8
 800d40c:	305c      	adds	r0, #92	; 0x5c
 800d40e:	f7fe f893 	bl	800b538 <memset>
 800d412:	4b05      	ldr	r3, [pc, #20]	; (800d428 <std+0x38>)
 800d414:	6263      	str	r3, [r4, #36]	; 0x24
 800d416:	4b05      	ldr	r3, [pc, #20]	; (800d42c <std+0x3c>)
 800d418:	62a3      	str	r3, [r4, #40]	; 0x28
 800d41a:	4b05      	ldr	r3, [pc, #20]	; (800d430 <std+0x40>)
 800d41c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d41e:	4b05      	ldr	r3, [pc, #20]	; (800d434 <std+0x44>)
 800d420:	6224      	str	r4, [r4, #32]
 800d422:	6323      	str	r3, [r4, #48]	; 0x30
 800d424:	bd10      	pop	{r4, pc}
 800d426:	bf00      	nop
 800d428:	0800c1f9 	.word	0x0800c1f9
 800d42c:	0800c21f 	.word	0x0800c21f
 800d430:	0800c257 	.word	0x0800c257
 800d434:	0800c27b 	.word	0x0800c27b

0800d438 <_cleanup_r>:
 800d438:	4901      	ldr	r1, [pc, #4]	; (800d440 <_cleanup_r+0x8>)
 800d43a:	f000 b8af 	b.w	800d59c <_fwalk_reent>
 800d43e:	bf00      	nop
 800d440:	0800d379 	.word	0x0800d379

0800d444 <__sfmoreglue>:
 800d444:	b570      	push	{r4, r5, r6, lr}
 800d446:	2268      	movs	r2, #104	; 0x68
 800d448:	1e4d      	subs	r5, r1, #1
 800d44a:	4355      	muls	r5, r2
 800d44c:	460e      	mov	r6, r1
 800d44e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d452:	f7fe f8e5 	bl	800b620 <_malloc_r>
 800d456:	4604      	mov	r4, r0
 800d458:	b140      	cbz	r0, 800d46c <__sfmoreglue+0x28>
 800d45a:	2100      	movs	r1, #0
 800d45c:	e9c0 1600 	strd	r1, r6, [r0]
 800d460:	300c      	adds	r0, #12
 800d462:	60a0      	str	r0, [r4, #8]
 800d464:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d468:	f7fe f866 	bl	800b538 <memset>
 800d46c:	4620      	mov	r0, r4
 800d46e:	bd70      	pop	{r4, r5, r6, pc}

0800d470 <__sfp_lock_acquire>:
 800d470:	4801      	ldr	r0, [pc, #4]	; (800d478 <__sfp_lock_acquire+0x8>)
 800d472:	f000 b8b8 	b.w	800d5e6 <__retarget_lock_acquire_recursive>
 800d476:	bf00      	nop
 800d478:	20002621 	.word	0x20002621

0800d47c <__sfp_lock_release>:
 800d47c:	4801      	ldr	r0, [pc, #4]	; (800d484 <__sfp_lock_release+0x8>)
 800d47e:	f000 b8b3 	b.w	800d5e8 <__retarget_lock_release_recursive>
 800d482:	bf00      	nop
 800d484:	20002621 	.word	0x20002621

0800d488 <__sinit_lock_acquire>:
 800d488:	4801      	ldr	r0, [pc, #4]	; (800d490 <__sinit_lock_acquire+0x8>)
 800d48a:	f000 b8ac 	b.w	800d5e6 <__retarget_lock_acquire_recursive>
 800d48e:	bf00      	nop
 800d490:	20002622 	.word	0x20002622

0800d494 <__sinit_lock_release>:
 800d494:	4801      	ldr	r0, [pc, #4]	; (800d49c <__sinit_lock_release+0x8>)
 800d496:	f000 b8a7 	b.w	800d5e8 <__retarget_lock_release_recursive>
 800d49a:	bf00      	nop
 800d49c:	20002622 	.word	0x20002622

0800d4a0 <__sinit>:
 800d4a0:	b510      	push	{r4, lr}
 800d4a2:	4604      	mov	r4, r0
 800d4a4:	f7ff fff0 	bl	800d488 <__sinit_lock_acquire>
 800d4a8:	69a3      	ldr	r3, [r4, #24]
 800d4aa:	b11b      	cbz	r3, 800d4b4 <__sinit+0x14>
 800d4ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4b0:	f7ff bff0 	b.w	800d494 <__sinit_lock_release>
 800d4b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d4b8:	6523      	str	r3, [r4, #80]	; 0x50
 800d4ba:	4b13      	ldr	r3, [pc, #76]	; (800d508 <__sinit+0x68>)
 800d4bc:	4a13      	ldr	r2, [pc, #76]	; (800d50c <__sinit+0x6c>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	62a2      	str	r2, [r4, #40]	; 0x28
 800d4c2:	42a3      	cmp	r3, r4
 800d4c4:	bf04      	itt	eq
 800d4c6:	2301      	moveq	r3, #1
 800d4c8:	61a3      	streq	r3, [r4, #24]
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	f000 f820 	bl	800d510 <__sfp>
 800d4d0:	6060      	str	r0, [r4, #4]
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	f000 f81c 	bl	800d510 <__sfp>
 800d4d8:	60a0      	str	r0, [r4, #8]
 800d4da:	4620      	mov	r0, r4
 800d4dc:	f000 f818 	bl	800d510 <__sfp>
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	60e0      	str	r0, [r4, #12]
 800d4e4:	2104      	movs	r1, #4
 800d4e6:	6860      	ldr	r0, [r4, #4]
 800d4e8:	f7ff ff82 	bl	800d3f0 <std>
 800d4ec:	68a0      	ldr	r0, [r4, #8]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	2109      	movs	r1, #9
 800d4f2:	f7ff ff7d 	bl	800d3f0 <std>
 800d4f6:	68e0      	ldr	r0, [r4, #12]
 800d4f8:	2202      	movs	r2, #2
 800d4fa:	2112      	movs	r1, #18
 800d4fc:	f7ff ff78 	bl	800d3f0 <std>
 800d500:	2301      	movs	r3, #1
 800d502:	61a3      	str	r3, [r4, #24]
 800d504:	e7d2      	b.n	800d4ac <__sinit+0xc>
 800d506:	bf00      	nop
 800d508:	0800ed80 	.word	0x0800ed80
 800d50c:	0800d439 	.word	0x0800d439

0800d510 <__sfp>:
 800d510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d512:	4607      	mov	r7, r0
 800d514:	f7ff ffac 	bl	800d470 <__sfp_lock_acquire>
 800d518:	4b1e      	ldr	r3, [pc, #120]	; (800d594 <__sfp+0x84>)
 800d51a:	681e      	ldr	r6, [r3, #0]
 800d51c:	69b3      	ldr	r3, [r6, #24]
 800d51e:	b913      	cbnz	r3, 800d526 <__sfp+0x16>
 800d520:	4630      	mov	r0, r6
 800d522:	f7ff ffbd 	bl	800d4a0 <__sinit>
 800d526:	3648      	adds	r6, #72	; 0x48
 800d528:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d52c:	3b01      	subs	r3, #1
 800d52e:	d503      	bpl.n	800d538 <__sfp+0x28>
 800d530:	6833      	ldr	r3, [r6, #0]
 800d532:	b30b      	cbz	r3, 800d578 <__sfp+0x68>
 800d534:	6836      	ldr	r6, [r6, #0]
 800d536:	e7f7      	b.n	800d528 <__sfp+0x18>
 800d538:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d53c:	b9d5      	cbnz	r5, 800d574 <__sfp+0x64>
 800d53e:	4b16      	ldr	r3, [pc, #88]	; (800d598 <__sfp+0x88>)
 800d540:	60e3      	str	r3, [r4, #12]
 800d542:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d546:	6665      	str	r5, [r4, #100]	; 0x64
 800d548:	f000 f84c 	bl	800d5e4 <__retarget_lock_init_recursive>
 800d54c:	f7ff ff96 	bl	800d47c <__sfp_lock_release>
 800d550:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d554:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d558:	6025      	str	r5, [r4, #0]
 800d55a:	61a5      	str	r5, [r4, #24]
 800d55c:	2208      	movs	r2, #8
 800d55e:	4629      	mov	r1, r5
 800d560:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d564:	f7fd ffe8 	bl	800b538 <memset>
 800d568:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d56c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d570:	4620      	mov	r0, r4
 800d572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d574:	3468      	adds	r4, #104	; 0x68
 800d576:	e7d9      	b.n	800d52c <__sfp+0x1c>
 800d578:	2104      	movs	r1, #4
 800d57a:	4638      	mov	r0, r7
 800d57c:	f7ff ff62 	bl	800d444 <__sfmoreglue>
 800d580:	4604      	mov	r4, r0
 800d582:	6030      	str	r0, [r6, #0]
 800d584:	2800      	cmp	r0, #0
 800d586:	d1d5      	bne.n	800d534 <__sfp+0x24>
 800d588:	f7ff ff78 	bl	800d47c <__sfp_lock_release>
 800d58c:	230c      	movs	r3, #12
 800d58e:	603b      	str	r3, [r7, #0]
 800d590:	e7ee      	b.n	800d570 <__sfp+0x60>
 800d592:	bf00      	nop
 800d594:	0800ed80 	.word	0x0800ed80
 800d598:	ffff0001 	.word	0xffff0001

0800d59c <_fwalk_reent>:
 800d59c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5a0:	4606      	mov	r6, r0
 800d5a2:	4688      	mov	r8, r1
 800d5a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d5a8:	2700      	movs	r7, #0
 800d5aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d5ae:	f1b9 0901 	subs.w	r9, r9, #1
 800d5b2:	d505      	bpl.n	800d5c0 <_fwalk_reent+0x24>
 800d5b4:	6824      	ldr	r4, [r4, #0]
 800d5b6:	2c00      	cmp	r4, #0
 800d5b8:	d1f7      	bne.n	800d5aa <_fwalk_reent+0xe>
 800d5ba:	4638      	mov	r0, r7
 800d5bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5c0:	89ab      	ldrh	r3, [r5, #12]
 800d5c2:	2b01      	cmp	r3, #1
 800d5c4:	d907      	bls.n	800d5d6 <_fwalk_reent+0x3a>
 800d5c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	d003      	beq.n	800d5d6 <_fwalk_reent+0x3a>
 800d5ce:	4629      	mov	r1, r5
 800d5d0:	4630      	mov	r0, r6
 800d5d2:	47c0      	blx	r8
 800d5d4:	4307      	orrs	r7, r0
 800d5d6:	3568      	adds	r5, #104	; 0x68
 800d5d8:	e7e9      	b.n	800d5ae <_fwalk_reent+0x12>
	...

0800d5dc <_localeconv_r>:
 800d5dc:	4800      	ldr	r0, [pc, #0]	; (800d5e0 <_localeconv_r+0x4>)
 800d5de:	4770      	bx	lr
 800d5e0:	20000188 	.word	0x20000188

0800d5e4 <__retarget_lock_init_recursive>:
 800d5e4:	4770      	bx	lr

0800d5e6 <__retarget_lock_acquire_recursive>:
 800d5e6:	4770      	bx	lr

0800d5e8 <__retarget_lock_release_recursive>:
 800d5e8:	4770      	bx	lr
	...

0800d5ec <_lseek_r>:
 800d5ec:	b538      	push	{r3, r4, r5, lr}
 800d5ee:	4d07      	ldr	r5, [pc, #28]	; (800d60c <_lseek_r+0x20>)
 800d5f0:	4604      	mov	r4, r0
 800d5f2:	4608      	mov	r0, r1
 800d5f4:	4611      	mov	r1, r2
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	602a      	str	r2, [r5, #0]
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	f7f5 fd24 	bl	8003048 <_lseek>
 800d600:	1c43      	adds	r3, r0, #1
 800d602:	d102      	bne.n	800d60a <_lseek_r+0x1e>
 800d604:	682b      	ldr	r3, [r5, #0]
 800d606:	b103      	cbz	r3, 800d60a <_lseek_r+0x1e>
 800d608:	6023      	str	r3, [r4, #0]
 800d60a:	bd38      	pop	{r3, r4, r5, pc}
 800d60c:	20002624 	.word	0x20002624

0800d610 <__swhatbuf_r>:
 800d610:	b570      	push	{r4, r5, r6, lr}
 800d612:	460e      	mov	r6, r1
 800d614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d618:	2900      	cmp	r1, #0
 800d61a:	b096      	sub	sp, #88	; 0x58
 800d61c:	4614      	mov	r4, r2
 800d61e:	461d      	mov	r5, r3
 800d620:	da08      	bge.n	800d634 <__swhatbuf_r+0x24>
 800d622:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d626:	2200      	movs	r2, #0
 800d628:	602a      	str	r2, [r5, #0]
 800d62a:	061a      	lsls	r2, r3, #24
 800d62c:	d410      	bmi.n	800d650 <__swhatbuf_r+0x40>
 800d62e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d632:	e00e      	b.n	800d652 <__swhatbuf_r+0x42>
 800d634:	466a      	mov	r2, sp
 800d636:	f001 f99d 	bl	800e974 <_fstat_r>
 800d63a:	2800      	cmp	r0, #0
 800d63c:	dbf1      	blt.n	800d622 <__swhatbuf_r+0x12>
 800d63e:	9a01      	ldr	r2, [sp, #4]
 800d640:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d644:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d648:	425a      	negs	r2, r3
 800d64a:	415a      	adcs	r2, r3
 800d64c:	602a      	str	r2, [r5, #0]
 800d64e:	e7ee      	b.n	800d62e <__swhatbuf_r+0x1e>
 800d650:	2340      	movs	r3, #64	; 0x40
 800d652:	2000      	movs	r0, #0
 800d654:	6023      	str	r3, [r4, #0]
 800d656:	b016      	add	sp, #88	; 0x58
 800d658:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d65c <__smakebuf_r>:
 800d65c:	898b      	ldrh	r3, [r1, #12]
 800d65e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d660:	079d      	lsls	r5, r3, #30
 800d662:	4606      	mov	r6, r0
 800d664:	460c      	mov	r4, r1
 800d666:	d507      	bpl.n	800d678 <__smakebuf_r+0x1c>
 800d668:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d66c:	6023      	str	r3, [r4, #0]
 800d66e:	6123      	str	r3, [r4, #16]
 800d670:	2301      	movs	r3, #1
 800d672:	6163      	str	r3, [r4, #20]
 800d674:	b002      	add	sp, #8
 800d676:	bd70      	pop	{r4, r5, r6, pc}
 800d678:	ab01      	add	r3, sp, #4
 800d67a:	466a      	mov	r2, sp
 800d67c:	f7ff ffc8 	bl	800d610 <__swhatbuf_r>
 800d680:	9900      	ldr	r1, [sp, #0]
 800d682:	4605      	mov	r5, r0
 800d684:	4630      	mov	r0, r6
 800d686:	f7fd ffcb 	bl	800b620 <_malloc_r>
 800d68a:	b948      	cbnz	r0, 800d6a0 <__smakebuf_r+0x44>
 800d68c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d690:	059a      	lsls	r2, r3, #22
 800d692:	d4ef      	bmi.n	800d674 <__smakebuf_r+0x18>
 800d694:	f023 0303 	bic.w	r3, r3, #3
 800d698:	f043 0302 	orr.w	r3, r3, #2
 800d69c:	81a3      	strh	r3, [r4, #12]
 800d69e:	e7e3      	b.n	800d668 <__smakebuf_r+0xc>
 800d6a0:	4b0d      	ldr	r3, [pc, #52]	; (800d6d8 <__smakebuf_r+0x7c>)
 800d6a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800d6a4:	89a3      	ldrh	r3, [r4, #12]
 800d6a6:	6020      	str	r0, [r4, #0]
 800d6a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6ac:	81a3      	strh	r3, [r4, #12]
 800d6ae:	9b00      	ldr	r3, [sp, #0]
 800d6b0:	6163      	str	r3, [r4, #20]
 800d6b2:	9b01      	ldr	r3, [sp, #4]
 800d6b4:	6120      	str	r0, [r4, #16]
 800d6b6:	b15b      	cbz	r3, 800d6d0 <__smakebuf_r+0x74>
 800d6b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6bc:	4630      	mov	r0, r6
 800d6be:	f001 f96b 	bl	800e998 <_isatty_r>
 800d6c2:	b128      	cbz	r0, 800d6d0 <__smakebuf_r+0x74>
 800d6c4:	89a3      	ldrh	r3, [r4, #12]
 800d6c6:	f023 0303 	bic.w	r3, r3, #3
 800d6ca:	f043 0301 	orr.w	r3, r3, #1
 800d6ce:	81a3      	strh	r3, [r4, #12]
 800d6d0:	89a0      	ldrh	r0, [r4, #12]
 800d6d2:	4305      	orrs	r5, r0
 800d6d4:	81a5      	strh	r5, [r4, #12]
 800d6d6:	e7cd      	b.n	800d674 <__smakebuf_r+0x18>
 800d6d8:	0800d439 	.word	0x0800d439

0800d6dc <__malloc_lock>:
 800d6dc:	4801      	ldr	r0, [pc, #4]	; (800d6e4 <__malloc_lock+0x8>)
 800d6de:	f7ff bf82 	b.w	800d5e6 <__retarget_lock_acquire_recursive>
 800d6e2:	bf00      	nop
 800d6e4:	20002620 	.word	0x20002620

0800d6e8 <__malloc_unlock>:
 800d6e8:	4801      	ldr	r0, [pc, #4]	; (800d6f0 <__malloc_unlock+0x8>)
 800d6ea:	f7ff bf7d 	b.w	800d5e8 <__retarget_lock_release_recursive>
 800d6ee:	bf00      	nop
 800d6f0:	20002620 	.word	0x20002620

0800d6f4 <_Balloc>:
 800d6f4:	b570      	push	{r4, r5, r6, lr}
 800d6f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d6f8:	4604      	mov	r4, r0
 800d6fa:	460d      	mov	r5, r1
 800d6fc:	b976      	cbnz	r6, 800d71c <_Balloc+0x28>
 800d6fe:	2010      	movs	r0, #16
 800d700:	f7fd fefc 	bl	800b4fc <malloc>
 800d704:	4602      	mov	r2, r0
 800d706:	6260      	str	r0, [r4, #36]	; 0x24
 800d708:	b920      	cbnz	r0, 800d714 <_Balloc+0x20>
 800d70a:	4b18      	ldr	r3, [pc, #96]	; (800d76c <_Balloc+0x78>)
 800d70c:	4818      	ldr	r0, [pc, #96]	; (800d770 <_Balloc+0x7c>)
 800d70e:	2166      	movs	r1, #102	; 0x66
 800d710:	f001 f900 	bl	800e914 <__assert_func>
 800d714:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d718:	6006      	str	r6, [r0, #0]
 800d71a:	60c6      	str	r6, [r0, #12]
 800d71c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d71e:	68f3      	ldr	r3, [r6, #12]
 800d720:	b183      	cbz	r3, 800d744 <_Balloc+0x50>
 800d722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d724:	68db      	ldr	r3, [r3, #12]
 800d726:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d72a:	b9b8      	cbnz	r0, 800d75c <_Balloc+0x68>
 800d72c:	2101      	movs	r1, #1
 800d72e:	fa01 f605 	lsl.w	r6, r1, r5
 800d732:	1d72      	adds	r2, r6, #5
 800d734:	0092      	lsls	r2, r2, #2
 800d736:	4620      	mov	r0, r4
 800d738:	f000 fb60 	bl	800ddfc <_calloc_r>
 800d73c:	b160      	cbz	r0, 800d758 <_Balloc+0x64>
 800d73e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d742:	e00e      	b.n	800d762 <_Balloc+0x6e>
 800d744:	2221      	movs	r2, #33	; 0x21
 800d746:	2104      	movs	r1, #4
 800d748:	4620      	mov	r0, r4
 800d74a:	f000 fb57 	bl	800ddfc <_calloc_r>
 800d74e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d750:	60f0      	str	r0, [r6, #12]
 800d752:	68db      	ldr	r3, [r3, #12]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d1e4      	bne.n	800d722 <_Balloc+0x2e>
 800d758:	2000      	movs	r0, #0
 800d75a:	bd70      	pop	{r4, r5, r6, pc}
 800d75c:	6802      	ldr	r2, [r0, #0]
 800d75e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d762:	2300      	movs	r3, #0
 800d764:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d768:	e7f7      	b.n	800d75a <_Balloc+0x66>
 800d76a:	bf00      	nop
 800d76c:	0800eec4 	.word	0x0800eec4
 800d770:	0800efa8 	.word	0x0800efa8

0800d774 <_Bfree>:
 800d774:	b570      	push	{r4, r5, r6, lr}
 800d776:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d778:	4605      	mov	r5, r0
 800d77a:	460c      	mov	r4, r1
 800d77c:	b976      	cbnz	r6, 800d79c <_Bfree+0x28>
 800d77e:	2010      	movs	r0, #16
 800d780:	f7fd febc 	bl	800b4fc <malloc>
 800d784:	4602      	mov	r2, r0
 800d786:	6268      	str	r0, [r5, #36]	; 0x24
 800d788:	b920      	cbnz	r0, 800d794 <_Bfree+0x20>
 800d78a:	4b09      	ldr	r3, [pc, #36]	; (800d7b0 <_Bfree+0x3c>)
 800d78c:	4809      	ldr	r0, [pc, #36]	; (800d7b4 <_Bfree+0x40>)
 800d78e:	218a      	movs	r1, #138	; 0x8a
 800d790:	f001 f8c0 	bl	800e914 <__assert_func>
 800d794:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d798:	6006      	str	r6, [r0, #0]
 800d79a:	60c6      	str	r6, [r0, #12]
 800d79c:	b13c      	cbz	r4, 800d7ae <_Bfree+0x3a>
 800d79e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d7a0:	6862      	ldr	r2, [r4, #4]
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d7a8:	6021      	str	r1, [r4, #0]
 800d7aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d7ae:	bd70      	pop	{r4, r5, r6, pc}
 800d7b0:	0800eec4 	.word	0x0800eec4
 800d7b4:	0800efa8 	.word	0x0800efa8

0800d7b8 <__multadd>:
 800d7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7bc:	690d      	ldr	r5, [r1, #16]
 800d7be:	4607      	mov	r7, r0
 800d7c0:	460c      	mov	r4, r1
 800d7c2:	461e      	mov	r6, r3
 800d7c4:	f101 0c14 	add.w	ip, r1, #20
 800d7c8:	2000      	movs	r0, #0
 800d7ca:	f8dc 3000 	ldr.w	r3, [ip]
 800d7ce:	b299      	uxth	r1, r3
 800d7d0:	fb02 6101 	mla	r1, r2, r1, r6
 800d7d4:	0c1e      	lsrs	r6, r3, #16
 800d7d6:	0c0b      	lsrs	r3, r1, #16
 800d7d8:	fb02 3306 	mla	r3, r2, r6, r3
 800d7dc:	b289      	uxth	r1, r1
 800d7de:	3001      	adds	r0, #1
 800d7e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7e4:	4285      	cmp	r5, r0
 800d7e6:	f84c 1b04 	str.w	r1, [ip], #4
 800d7ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7ee:	dcec      	bgt.n	800d7ca <__multadd+0x12>
 800d7f0:	b30e      	cbz	r6, 800d836 <__multadd+0x7e>
 800d7f2:	68a3      	ldr	r3, [r4, #8]
 800d7f4:	42ab      	cmp	r3, r5
 800d7f6:	dc19      	bgt.n	800d82c <__multadd+0x74>
 800d7f8:	6861      	ldr	r1, [r4, #4]
 800d7fa:	4638      	mov	r0, r7
 800d7fc:	3101      	adds	r1, #1
 800d7fe:	f7ff ff79 	bl	800d6f4 <_Balloc>
 800d802:	4680      	mov	r8, r0
 800d804:	b928      	cbnz	r0, 800d812 <__multadd+0x5a>
 800d806:	4602      	mov	r2, r0
 800d808:	4b0c      	ldr	r3, [pc, #48]	; (800d83c <__multadd+0x84>)
 800d80a:	480d      	ldr	r0, [pc, #52]	; (800d840 <__multadd+0x88>)
 800d80c:	21b5      	movs	r1, #181	; 0xb5
 800d80e:	f001 f881 	bl	800e914 <__assert_func>
 800d812:	6922      	ldr	r2, [r4, #16]
 800d814:	3202      	adds	r2, #2
 800d816:	f104 010c 	add.w	r1, r4, #12
 800d81a:	0092      	lsls	r2, r2, #2
 800d81c:	300c      	adds	r0, #12
 800d81e:	f7fd fe7d 	bl	800b51c <memcpy>
 800d822:	4621      	mov	r1, r4
 800d824:	4638      	mov	r0, r7
 800d826:	f7ff ffa5 	bl	800d774 <_Bfree>
 800d82a:	4644      	mov	r4, r8
 800d82c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d830:	3501      	adds	r5, #1
 800d832:	615e      	str	r6, [r3, #20]
 800d834:	6125      	str	r5, [r4, #16]
 800d836:	4620      	mov	r0, r4
 800d838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d83c:	0800ef36 	.word	0x0800ef36
 800d840:	0800efa8 	.word	0x0800efa8

0800d844 <__hi0bits>:
 800d844:	0c03      	lsrs	r3, r0, #16
 800d846:	041b      	lsls	r3, r3, #16
 800d848:	b9d3      	cbnz	r3, 800d880 <__hi0bits+0x3c>
 800d84a:	0400      	lsls	r0, r0, #16
 800d84c:	2310      	movs	r3, #16
 800d84e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d852:	bf04      	itt	eq
 800d854:	0200      	lsleq	r0, r0, #8
 800d856:	3308      	addeq	r3, #8
 800d858:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d85c:	bf04      	itt	eq
 800d85e:	0100      	lsleq	r0, r0, #4
 800d860:	3304      	addeq	r3, #4
 800d862:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d866:	bf04      	itt	eq
 800d868:	0080      	lsleq	r0, r0, #2
 800d86a:	3302      	addeq	r3, #2
 800d86c:	2800      	cmp	r0, #0
 800d86e:	db05      	blt.n	800d87c <__hi0bits+0x38>
 800d870:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d874:	f103 0301 	add.w	r3, r3, #1
 800d878:	bf08      	it	eq
 800d87a:	2320      	moveq	r3, #32
 800d87c:	4618      	mov	r0, r3
 800d87e:	4770      	bx	lr
 800d880:	2300      	movs	r3, #0
 800d882:	e7e4      	b.n	800d84e <__hi0bits+0xa>

0800d884 <__lo0bits>:
 800d884:	6803      	ldr	r3, [r0, #0]
 800d886:	f013 0207 	ands.w	r2, r3, #7
 800d88a:	4601      	mov	r1, r0
 800d88c:	d00b      	beq.n	800d8a6 <__lo0bits+0x22>
 800d88e:	07da      	lsls	r2, r3, #31
 800d890:	d423      	bmi.n	800d8da <__lo0bits+0x56>
 800d892:	0798      	lsls	r0, r3, #30
 800d894:	bf49      	itett	mi
 800d896:	085b      	lsrmi	r3, r3, #1
 800d898:	089b      	lsrpl	r3, r3, #2
 800d89a:	2001      	movmi	r0, #1
 800d89c:	600b      	strmi	r3, [r1, #0]
 800d89e:	bf5c      	itt	pl
 800d8a0:	600b      	strpl	r3, [r1, #0]
 800d8a2:	2002      	movpl	r0, #2
 800d8a4:	4770      	bx	lr
 800d8a6:	b298      	uxth	r0, r3
 800d8a8:	b9a8      	cbnz	r0, 800d8d6 <__lo0bits+0x52>
 800d8aa:	0c1b      	lsrs	r3, r3, #16
 800d8ac:	2010      	movs	r0, #16
 800d8ae:	b2da      	uxtb	r2, r3
 800d8b0:	b90a      	cbnz	r2, 800d8b6 <__lo0bits+0x32>
 800d8b2:	3008      	adds	r0, #8
 800d8b4:	0a1b      	lsrs	r3, r3, #8
 800d8b6:	071a      	lsls	r2, r3, #28
 800d8b8:	bf04      	itt	eq
 800d8ba:	091b      	lsreq	r3, r3, #4
 800d8bc:	3004      	addeq	r0, #4
 800d8be:	079a      	lsls	r2, r3, #30
 800d8c0:	bf04      	itt	eq
 800d8c2:	089b      	lsreq	r3, r3, #2
 800d8c4:	3002      	addeq	r0, #2
 800d8c6:	07da      	lsls	r2, r3, #31
 800d8c8:	d403      	bmi.n	800d8d2 <__lo0bits+0x4e>
 800d8ca:	085b      	lsrs	r3, r3, #1
 800d8cc:	f100 0001 	add.w	r0, r0, #1
 800d8d0:	d005      	beq.n	800d8de <__lo0bits+0x5a>
 800d8d2:	600b      	str	r3, [r1, #0]
 800d8d4:	4770      	bx	lr
 800d8d6:	4610      	mov	r0, r2
 800d8d8:	e7e9      	b.n	800d8ae <__lo0bits+0x2a>
 800d8da:	2000      	movs	r0, #0
 800d8dc:	4770      	bx	lr
 800d8de:	2020      	movs	r0, #32
 800d8e0:	4770      	bx	lr
	...

0800d8e4 <__i2b>:
 800d8e4:	b510      	push	{r4, lr}
 800d8e6:	460c      	mov	r4, r1
 800d8e8:	2101      	movs	r1, #1
 800d8ea:	f7ff ff03 	bl	800d6f4 <_Balloc>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	b928      	cbnz	r0, 800d8fe <__i2b+0x1a>
 800d8f2:	4b05      	ldr	r3, [pc, #20]	; (800d908 <__i2b+0x24>)
 800d8f4:	4805      	ldr	r0, [pc, #20]	; (800d90c <__i2b+0x28>)
 800d8f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d8fa:	f001 f80b 	bl	800e914 <__assert_func>
 800d8fe:	2301      	movs	r3, #1
 800d900:	6144      	str	r4, [r0, #20]
 800d902:	6103      	str	r3, [r0, #16]
 800d904:	bd10      	pop	{r4, pc}
 800d906:	bf00      	nop
 800d908:	0800ef36 	.word	0x0800ef36
 800d90c:	0800efa8 	.word	0x0800efa8

0800d910 <__multiply>:
 800d910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d914:	4691      	mov	r9, r2
 800d916:	690a      	ldr	r2, [r1, #16]
 800d918:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	bfb8      	it	lt
 800d920:	460b      	movlt	r3, r1
 800d922:	460c      	mov	r4, r1
 800d924:	bfbc      	itt	lt
 800d926:	464c      	movlt	r4, r9
 800d928:	4699      	movlt	r9, r3
 800d92a:	6927      	ldr	r7, [r4, #16]
 800d92c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d930:	68a3      	ldr	r3, [r4, #8]
 800d932:	6861      	ldr	r1, [r4, #4]
 800d934:	eb07 060a 	add.w	r6, r7, sl
 800d938:	42b3      	cmp	r3, r6
 800d93a:	b085      	sub	sp, #20
 800d93c:	bfb8      	it	lt
 800d93e:	3101      	addlt	r1, #1
 800d940:	f7ff fed8 	bl	800d6f4 <_Balloc>
 800d944:	b930      	cbnz	r0, 800d954 <__multiply+0x44>
 800d946:	4602      	mov	r2, r0
 800d948:	4b44      	ldr	r3, [pc, #272]	; (800da5c <__multiply+0x14c>)
 800d94a:	4845      	ldr	r0, [pc, #276]	; (800da60 <__multiply+0x150>)
 800d94c:	f240 115d 	movw	r1, #349	; 0x15d
 800d950:	f000 ffe0 	bl	800e914 <__assert_func>
 800d954:	f100 0514 	add.w	r5, r0, #20
 800d958:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d95c:	462b      	mov	r3, r5
 800d95e:	2200      	movs	r2, #0
 800d960:	4543      	cmp	r3, r8
 800d962:	d321      	bcc.n	800d9a8 <__multiply+0x98>
 800d964:	f104 0314 	add.w	r3, r4, #20
 800d968:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d96c:	f109 0314 	add.w	r3, r9, #20
 800d970:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d974:	9202      	str	r2, [sp, #8]
 800d976:	1b3a      	subs	r2, r7, r4
 800d978:	3a15      	subs	r2, #21
 800d97a:	f022 0203 	bic.w	r2, r2, #3
 800d97e:	3204      	adds	r2, #4
 800d980:	f104 0115 	add.w	r1, r4, #21
 800d984:	428f      	cmp	r7, r1
 800d986:	bf38      	it	cc
 800d988:	2204      	movcc	r2, #4
 800d98a:	9201      	str	r2, [sp, #4]
 800d98c:	9a02      	ldr	r2, [sp, #8]
 800d98e:	9303      	str	r3, [sp, #12]
 800d990:	429a      	cmp	r2, r3
 800d992:	d80c      	bhi.n	800d9ae <__multiply+0x9e>
 800d994:	2e00      	cmp	r6, #0
 800d996:	dd03      	ble.n	800d9a0 <__multiply+0x90>
 800d998:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d05a      	beq.n	800da56 <__multiply+0x146>
 800d9a0:	6106      	str	r6, [r0, #16]
 800d9a2:	b005      	add	sp, #20
 800d9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9a8:	f843 2b04 	str.w	r2, [r3], #4
 800d9ac:	e7d8      	b.n	800d960 <__multiply+0x50>
 800d9ae:	f8b3 a000 	ldrh.w	sl, [r3]
 800d9b2:	f1ba 0f00 	cmp.w	sl, #0
 800d9b6:	d024      	beq.n	800da02 <__multiply+0xf2>
 800d9b8:	f104 0e14 	add.w	lr, r4, #20
 800d9bc:	46a9      	mov	r9, r5
 800d9be:	f04f 0c00 	mov.w	ip, #0
 800d9c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d9c6:	f8d9 1000 	ldr.w	r1, [r9]
 800d9ca:	fa1f fb82 	uxth.w	fp, r2
 800d9ce:	b289      	uxth	r1, r1
 800d9d0:	fb0a 110b 	mla	r1, sl, fp, r1
 800d9d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d9d8:	f8d9 2000 	ldr.w	r2, [r9]
 800d9dc:	4461      	add	r1, ip
 800d9de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d9e2:	fb0a c20b 	mla	r2, sl, fp, ip
 800d9e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d9ea:	b289      	uxth	r1, r1
 800d9ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d9f0:	4577      	cmp	r7, lr
 800d9f2:	f849 1b04 	str.w	r1, [r9], #4
 800d9f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d9fa:	d8e2      	bhi.n	800d9c2 <__multiply+0xb2>
 800d9fc:	9a01      	ldr	r2, [sp, #4]
 800d9fe:	f845 c002 	str.w	ip, [r5, r2]
 800da02:	9a03      	ldr	r2, [sp, #12]
 800da04:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800da08:	3304      	adds	r3, #4
 800da0a:	f1b9 0f00 	cmp.w	r9, #0
 800da0e:	d020      	beq.n	800da52 <__multiply+0x142>
 800da10:	6829      	ldr	r1, [r5, #0]
 800da12:	f104 0c14 	add.w	ip, r4, #20
 800da16:	46ae      	mov	lr, r5
 800da18:	f04f 0a00 	mov.w	sl, #0
 800da1c:	f8bc b000 	ldrh.w	fp, [ip]
 800da20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800da24:	fb09 220b 	mla	r2, r9, fp, r2
 800da28:	4492      	add	sl, r2
 800da2a:	b289      	uxth	r1, r1
 800da2c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800da30:	f84e 1b04 	str.w	r1, [lr], #4
 800da34:	f85c 2b04 	ldr.w	r2, [ip], #4
 800da38:	f8be 1000 	ldrh.w	r1, [lr]
 800da3c:	0c12      	lsrs	r2, r2, #16
 800da3e:	fb09 1102 	mla	r1, r9, r2, r1
 800da42:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800da46:	4567      	cmp	r7, ip
 800da48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800da4c:	d8e6      	bhi.n	800da1c <__multiply+0x10c>
 800da4e:	9a01      	ldr	r2, [sp, #4]
 800da50:	50a9      	str	r1, [r5, r2]
 800da52:	3504      	adds	r5, #4
 800da54:	e79a      	b.n	800d98c <__multiply+0x7c>
 800da56:	3e01      	subs	r6, #1
 800da58:	e79c      	b.n	800d994 <__multiply+0x84>
 800da5a:	bf00      	nop
 800da5c:	0800ef36 	.word	0x0800ef36
 800da60:	0800efa8 	.word	0x0800efa8

0800da64 <__pow5mult>:
 800da64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da68:	4615      	mov	r5, r2
 800da6a:	f012 0203 	ands.w	r2, r2, #3
 800da6e:	4606      	mov	r6, r0
 800da70:	460f      	mov	r7, r1
 800da72:	d007      	beq.n	800da84 <__pow5mult+0x20>
 800da74:	4c25      	ldr	r4, [pc, #148]	; (800db0c <__pow5mult+0xa8>)
 800da76:	3a01      	subs	r2, #1
 800da78:	2300      	movs	r3, #0
 800da7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da7e:	f7ff fe9b 	bl	800d7b8 <__multadd>
 800da82:	4607      	mov	r7, r0
 800da84:	10ad      	asrs	r5, r5, #2
 800da86:	d03d      	beq.n	800db04 <__pow5mult+0xa0>
 800da88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800da8a:	b97c      	cbnz	r4, 800daac <__pow5mult+0x48>
 800da8c:	2010      	movs	r0, #16
 800da8e:	f7fd fd35 	bl	800b4fc <malloc>
 800da92:	4602      	mov	r2, r0
 800da94:	6270      	str	r0, [r6, #36]	; 0x24
 800da96:	b928      	cbnz	r0, 800daa4 <__pow5mult+0x40>
 800da98:	4b1d      	ldr	r3, [pc, #116]	; (800db10 <__pow5mult+0xac>)
 800da9a:	481e      	ldr	r0, [pc, #120]	; (800db14 <__pow5mult+0xb0>)
 800da9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800daa0:	f000 ff38 	bl	800e914 <__assert_func>
 800daa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800daa8:	6004      	str	r4, [r0, #0]
 800daaa:	60c4      	str	r4, [r0, #12]
 800daac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dab0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dab4:	b94c      	cbnz	r4, 800daca <__pow5mult+0x66>
 800dab6:	f240 2171 	movw	r1, #625	; 0x271
 800daba:	4630      	mov	r0, r6
 800dabc:	f7ff ff12 	bl	800d8e4 <__i2b>
 800dac0:	2300      	movs	r3, #0
 800dac2:	f8c8 0008 	str.w	r0, [r8, #8]
 800dac6:	4604      	mov	r4, r0
 800dac8:	6003      	str	r3, [r0, #0]
 800daca:	f04f 0900 	mov.w	r9, #0
 800dace:	07eb      	lsls	r3, r5, #31
 800dad0:	d50a      	bpl.n	800dae8 <__pow5mult+0x84>
 800dad2:	4639      	mov	r1, r7
 800dad4:	4622      	mov	r2, r4
 800dad6:	4630      	mov	r0, r6
 800dad8:	f7ff ff1a 	bl	800d910 <__multiply>
 800dadc:	4639      	mov	r1, r7
 800dade:	4680      	mov	r8, r0
 800dae0:	4630      	mov	r0, r6
 800dae2:	f7ff fe47 	bl	800d774 <_Bfree>
 800dae6:	4647      	mov	r7, r8
 800dae8:	106d      	asrs	r5, r5, #1
 800daea:	d00b      	beq.n	800db04 <__pow5mult+0xa0>
 800daec:	6820      	ldr	r0, [r4, #0]
 800daee:	b938      	cbnz	r0, 800db00 <__pow5mult+0x9c>
 800daf0:	4622      	mov	r2, r4
 800daf2:	4621      	mov	r1, r4
 800daf4:	4630      	mov	r0, r6
 800daf6:	f7ff ff0b 	bl	800d910 <__multiply>
 800dafa:	6020      	str	r0, [r4, #0]
 800dafc:	f8c0 9000 	str.w	r9, [r0]
 800db00:	4604      	mov	r4, r0
 800db02:	e7e4      	b.n	800dace <__pow5mult+0x6a>
 800db04:	4638      	mov	r0, r7
 800db06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db0a:	bf00      	nop
 800db0c:	0800f0f8 	.word	0x0800f0f8
 800db10:	0800eec4 	.word	0x0800eec4
 800db14:	0800efa8 	.word	0x0800efa8

0800db18 <__lshift>:
 800db18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db1c:	460c      	mov	r4, r1
 800db1e:	6849      	ldr	r1, [r1, #4]
 800db20:	6923      	ldr	r3, [r4, #16]
 800db22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db26:	68a3      	ldr	r3, [r4, #8]
 800db28:	4607      	mov	r7, r0
 800db2a:	4691      	mov	r9, r2
 800db2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db30:	f108 0601 	add.w	r6, r8, #1
 800db34:	42b3      	cmp	r3, r6
 800db36:	db0b      	blt.n	800db50 <__lshift+0x38>
 800db38:	4638      	mov	r0, r7
 800db3a:	f7ff fddb 	bl	800d6f4 <_Balloc>
 800db3e:	4605      	mov	r5, r0
 800db40:	b948      	cbnz	r0, 800db56 <__lshift+0x3e>
 800db42:	4602      	mov	r2, r0
 800db44:	4b2a      	ldr	r3, [pc, #168]	; (800dbf0 <__lshift+0xd8>)
 800db46:	482b      	ldr	r0, [pc, #172]	; (800dbf4 <__lshift+0xdc>)
 800db48:	f240 11d9 	movw	r1, #473	; 0x1d9
 800db4c:	f000 fee2 	bl	800e914 <__assert_func>
 800db50:	3101      	adds	r1, #1
 800db52:	005b      	lsls	r3, r3, #1
 800db54:	e7ee      	b.n	800db34 <__lshift+0x1c>
 800db56:	2300      	movs	r3, #0
 800db58:	f100 0114 	add.w	r1, r0, #20
 800db5c:	f100 0210 	add.w	r2, r0, #16
 800db60:	4618      	mov	r0, r3
 800db62:	4553      	cmp	r3, sl
 800db64:	db37      	blt.n	800dbd6 <__lshift+0xbe>
 800db66:	6920      	ldr	r0, [r4, #16]
 800db68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db6c:	f104 0314 	add.w	r3, r4, #20
 800db70:	f019 091f 	ands.w	r9, r9, #31
 800db74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800db7c:	d02f      	beq.n	800dbde <__lshift+0xc6>
 800db7e:	f1c9 0e20 	rsb	lr, r9, #32
 800db82:	468a      	mov	sl, r1
 800db84:	f04f 0c00 	mov.w	ip, #0
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	fa02 f209 	lsl.w	r2, r2, r9
 800db8e:	ea42 020c 	orr.w	r2, r2, ip
 800db92:	f84a 2b04 	str.w	r2, [sl], #4
 800db96:	f853 2b04 	ldr.w	r2, [r3], #4
 800db9a:	4298      	cmp	r0, r3
 800db9c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dba0:	d8f2      	bhi.n	800db88 <__lshift+0x70>
 800dba2:	1b03      	subs	r3, r0, r4
 800dba4:	3b15      	subs	r3, #21
 800dba6:	f023 0303 	bic.w	r3, r3, #3
 800dbaa:	3304      	adds	r3, #4
 800dbac:	f104 0215 	add.w	r2, r4, #21
 800dbb0:	4290      	cmp	r0, r2
 800dbb2:	bf38      	it	cc
 800dbb4:	2304      	movcc	r3, #4
 800dbb6:	f841 c003 	str.w	ip, [r1, r3]
 800dbba:	f1bc 0f00 	cmp.w	ip, #0
 800dbbe:	d001      	beq.n	800dbc4 <__lshift+0xac>
 800dbc0:	f108 0602 	add.w	r6, r8, #2
 800dbc4:	3e01      	subs	r6, #1
 800dbc6:	4638      	mov	r0, r7
 800dbc8:	612e      	str	r6, [r5, #16]
 800dbca:	4621      	mov	r1, r4
 800dbcc:	f7ff fdd2 	bl	800d774 <_Bfree>
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbd6:	f842 0f04 	str.w	r0, [r2, #4]!
 800dbda:	3301      	adds	r3, #1
 800dbdc:	e7c1      	b.n	800db62 <__lshift+0x4a>
 800dbde:	3904      	subs	r1, #4
 800dbe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbe4:	f841 2f04 	str.w	r2, [r1, #4]!
 800dbe8:	4298      	cmp	r0, r3
 800dbea:	d8f9      	bhi.n	800dbe0 <__lshift+0xc8>
 800dbec:	e7ea      	b.n	800dbc4 <__lshift+0xac>
 800dbee:	bf00      	nop
 800dbf0:	0800ef36 	.word	0x0800ef36
 800dbf4:	0800efa8 	.word	0x0800efa8

0800dbf8 <__mcmp>:
 800dbf8:	b530      	push	{r4, r5, lr}
 800dbfa:	6902      	ldr	r2, [r0, #16]
 800dbfc:	690c      	ldr	r4, [r1, #16]
 800dbfe:	1b12      	subs	r2, r2, r4
 800dc00:	d10e      	bne.n	800dc20 <__mcmp+0x28>
 800dc02:	f100 0314 	add.w	r3, r0, #20
 800dc06:	3114      	adds	r1, #20
 800dc08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dc0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dc10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dc14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dc18:	42a5      	cmp	r5, r4
 800dc1a:	d003      	beq.n	800dc24 <__mcmp+0x2c>
 800dc1c:	d305      	bcc.n	800dc2a <__mcmp+0x32>
 800dc1e:	2201      	movs	r2, #1
 800dc20:	4610      	mov	r0, r2
 800dc22:	bd30      	pop	{r4, r5, pc}
 800dc24:	4283      	cmp	r3, r0
 800dc26:	d3f3      	bcc.n	800dc10 <__mcmp+0x18>
 800dc28:	e7fa      	b.n	800dc20 <__mcmp+0x28>
 800dc2a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc2e:	e7f7      	b.n	800dc20 <__mcmp+0x28>

0800dc30 <__mdiff>:
 800dc30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc34:	460c      	mov	r4, r1
 800dc36:	4606      	mov	r6, r0
 800dc38:	4611      	mov	r1, r2
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	4690      	mov	r8, r2
 800dc3e:	f7ff ffdb 	bl	800dbf8 <__mcmp>
 800dc42:	1e05      	subs	r5, r0, #0
 800dc44:	d110      	bne.n	800dc68 <__mdiff+0x38>
 800dc46:	4629      	mov	r1, r5
 800dc48:	4630      	mov	r0, r6
 800dc4a:	f7ff fd53 	bl	800d6f4 <_Balloc>
 800dc4e:	b930      	cbnz	r0, 800dc5e <__mdiff+0x2e>
 800dc50:	4b3a      	ldr	r3, [pc, #232]	; (800dd3c <__mdiff+0x10c>)
 800dc52:	4602      	mov	r2, r0
 800dc54:	f240 2132 	movw	r1, #562	; 0x232
 800dc58:	4839      	ldr	r0, [pc, #228]	; (800dd40 <__mdiff+0x110>)
 800dc5a:	f000 fe5b 	bl	800e914 <__assert_func>
 800dc5e:	2301      	movs	r3, #1
 800dc60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc68:	bfa4      	itt	ge
 800dc6a:	4643      	movge	r3, r8
 800dc6c:	46a0      	movge	r8, r4
 800dc6e:	4630      	mov	r0, r6
 800dc70:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dc74:	bfa6      	itte	ge
 800dc76:	461c      	movge	r4, r3
 800dc78:	2500      	movge	r5, #0
 800dc7a:	2501      	movlt	r5, #1
 800dc7c:	f7ff fd3a 	bl	800d6f4 <_Balloc>
 800dc80:	b920      	cbnz	r0, 800dc8c <__mdiff+0x5c>
 800dc82:	4b2e      	ldr	r3, [pc, #184]	; (800dd3c <__mdiff+0x10c>)
 800dc84:	4602      	mov	r2, r0
 800dc86:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dc8a:	e7e5      	b.n	800dc58 <__mdiff+0x28>
 800dc8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dc90:	6926      	ldr	r6, [r4, #16]
 800dc92:	60c5      	str	r5, [r0, #12]
 800dc94:	f104 0914 	add.w	r9, r4, #20
 800dc98:	f108 0514 	add.w	r5, r8, #20
 800dc9c:	f100 0e14 	add.w	lr, r0, #20
 800dca0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dca4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dca8:	f108 0210 	add.w	r2, r8, #16
 800dcac:	46f2      	mov	sl, lr
 800dcae:	2100      	movs	r1, #0
 800dcb0:	f859 3b04 	ldr.w	r3, [r9], #4
 800dcb4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dcb8:	fa1f f883 	uxth.w	r8, r3
 800dcbc:	fa11 f18b 	uxtah	r1, r1, fp
 800dcc0:	0c1b      	lsrs	r3, r3, #16
 800dcc2:	eba1 0808 	sub.w	r8, r1, r8
 800dcc6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dcca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dcce:	fa1f f888 	uxth.w	r8, r8
 800dcd2:	1419      	asrs	r1, r3, #16
 800dcd4:	454e      	cmp	r6, r9
 800dcd6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dcda:	f84a 3b04 	str.w	r3, [sl], #4
 800dcde:	d8e7      	bhi.n	800dcb0 <__mdiff+0x80>
 800dce0:	1b33      	subs	r3, r6, r4
 800dce2:	3b15      	subs	r3, #21
 800dce4:	f023 0303 	bic.w	r3, r3, #3
 800dce8:	3304      	adds	r3, #4
 800dcea:	3415      	adds	r4, #21
 800dcec:	42a6      	cmp	r6, r4
 800dcee:	bf38      	it	cc
 800dcf0:	2304      	movcc	r3, #4
 800dcf2:	441d      	add	r5, r3
 800dcf4:	4473      	add	r3, lr
 800dcf6:	469e      	mov	lr, r3
 800dcf8:	462e      	mov	r6, r5
 800dcfa:	4566      	cmp	r6, ip
 800dcfc:	d30e      	bcc.n	800dd1c <__mdiff+0xec>
 800dcfe:	f10c 0203 	add.w	r2, ip, #3
 800dd02:	1b52      	subs	r2, r2, r5
 800dd04:	f022 0203 	bic.w	r2, r2, #3
 800dd08:	3d03      	subs	r5, #3
 800dd0a:	45ac      	cmp	ip, r5
 800dd0c:	bf38      	it	cc
 800dd0e:	2200      	movcc	r2, #0
 800dd10:	441a      	add	r2, r3
 800dd12:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dd16:	b17b      	cbz	r3, 800dd38 <__mdiff+0x108>
 800dd18:	6107      	str	r7, [r0, #16]
 800dd1a:	e7a3      	b.n	800dc64 <__mdiff+0x34>
 800dd1c:	f856 8b04 	ldr.w	r8, [r6], #4
 800dd20:	fa11 f288 	uxtah	r2, r1, r8
 800dd24:	1414      	asrs	r4, r2, #16
 800dd26:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dd2a:	b292      	uxth	r2, r2
 800dd2c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dd30:	f84e 2b04 	str.w	r2, [lr], #4
 800dd34:	1421      	asrs	r1, r4, #16
 800dd36:	e7e0      	b.n	800dcfa <__mdiff+0xca>
 800dd38:	3f01      	subs	r7, #1
 800dd3a:	e7ea      	b.n	800dd12 <__mdiff+0xe2>
 800dd3c:	0800ef36 	.word	0x0800ef36
 800dd40:	0800efa8 	.word	0x0800efa8

0800dd44 <__d2b>:
 800dd44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd48:	4689      	mov	r9, r1
 800dd4a:	2101      	movs	r1, #1
 800dd4c:	ec57 6b10 	vmov	r6, r7, d0
 800dd50:	4690      	mov	r8, r2
 800dd52:	f7ff fccf 	bl	800d6f4 <_Balloc>
 800dd56:	4604      	mov	r4, r0
 800dd58:	b930      	cbnz	r0, 800dd68 <__d2b+0x24>
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	4b25      	ldr	r3, [pc, #148]	; (800ddf4 <__d2b+0xb0>)
 800dd5e:	4826      	ldr	r0, [pc, #152]	; (800ddf8 <__d2b+0xb4>)
 800dd60:	f240 310a 	movw	r1, #778	; 0x30a
 800dd64:	f000 fdd6 	bl	800e914 <__assert_func>
 800dd68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dd6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd70:	bb35      	cbnz	r5, 800ddc0 <__d2b+0x7c>
 800dd72:	2e00      	cmp	r6, #0
 800dd74:	9301      	str	r3, [sp, #4]
 800dd76:	d028      	beq.n	800ddca <__d2b+0x86>
 800dd78:	4668      	mov	r0, sp
 800dd7a:	9600      	str	r6, [sp, #0]
 800dd7c:	f7ff fd82 	bl	800d884 <__lo0bits>
 800dd80:	9900      	ldr	r1, [sp, #0]
 800dd82:	b300      	cbz	r0, 800ddc6 <__d2b+0x82>
 800dd84:	9a01      	ldr	r2, [sp, #4]
 800dd86:	f1c0 0320 	rsb	r3, r0, #32
 800dd8a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd8e:	430b      	orrs	r3, r1
 800dd90:	40c2      	lsrs	r2, r0
 800dd92:	6163      	str	r3, [r4, #20]
 800dd94:	9201      	str	r2, [sp, #4]
 800dd96:	9b01      	ldr	r3, [sp, #4]
 800dd98:	61a3      	str	r3, [r4, #24]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	bf14      	ite	ne
 800dd9e:	2202      	movne	r2, #2
 800dda0:	2201      	moveq	r2, #1
 800dda2:	6122      	str	r2, [r4, #16]
 800dda4:	b1d5      	cbz	r5, 800dddc <__d2b+0x98>
 800dda6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ddaa:	4405      	add	r5, r0
 800ddac:	f8c9 5000 	str.w	r5, [r9]
 800ddb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ddb4:	f8c8 0000 	str.w	r0, [r8]
 800ddb8:	4620      	mov	r0, r4
 800ddba:	b003      	add	sp, #12
 800ddbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ddc4:	e7d5      	b.n	800dd72 <__d2b+0x2e>
 800ddc6:	6161      	str	r1, [r4, #20]
 800ddc8:	e7e5      	b.n	800dd96 <__d2b+0x52>
 800ddca:	a801      	add	r0, sp, #4
 800ddcc:	f7ff fd5a 	bl	800d884 <__lo0bits>
 800ddd0:	9b01      	ldr	r3, [sp, #4]
 800ddd2:	6163      	str	r3, [r4, #20]
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	6122      	str	r2, [r4, #16]
 800ddd8:	3020      	adds	r0, #32
 800ddda:	e7e3      	b.n	800dda4 <__d2b+0x60>
 800dddc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dde0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dde4:	f8c9 0000 	str.w	r0, [r9]
 800dde8:	6918      	ldr	r0, [r3, #16]
 800ddea:	f7ff fd2b 	bl	800d844 <__hi0bits>
 800ddee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ddf2:	e7df      	b.n	800ddb4 <__d2b+0x70>
 800ddf4:	0800ef36 	.word	0x0800ef36
 800ddf8:	0800efa8 	.word	0x0800efa8

0800ddfc <_calloc_r>:
 800ddfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddfe:	fba1 2402 	umull	r2, r4, r1, r2
 800de02:	b94c      	cbnz	r4, 800de18 <_calloc_r+0x1c>
 800de04:	4611      	mov	r1, r2
 800de06:	9201      	str	r2, [sp, #4]
 800de08:	f7fd fc0a 	bl	800b620 <_malloc_r>
 800de0c:	9a01      	ldr	r2, [sp, #4]
 800de0e:	4605      	mov	r5, r0
 800de10:	b930      	cbnz	r0, 800de20 <_calloc_r+0x24>
 800de12:	4628      	mov	r0, r5
 800de14:	b003      	add	sp, #12
 800de16:	bd30      	pop	{r4, r5, pc}
 800de18:	220c      	movs	r2, #12
 800de1a:	6002      	str	r2, [r0, #0]
 800de1c:	2500      	movs	r5, #0
 800de1e:	e7f8      	b.n	800de12 <_calloc_r+0x16>
 800de20:	4621      	mov	r1, r4
 800de22:	f7fd fb89 	bl	800b538 <memset>
 800de26:	e7f4      	b.n	800de12 <_calloc_r+0x16>

0800de28 <_sungetc_r>:
 800de28:	b538      	push	{r3, r4, r5, lr}
 800de2a:	1c4b      	adds	r3, r1, #1
 800de2c:	4614      	mov	r4, r2
 800de2e:	d103      	bne.n	800de38 <_sungetc_r+0x10>
 800de30:	f04f 35ff 	mov.w	r5, #4294967295
 800de34:	4628      	mov	r0, r5
 800de36:	bd38      	pop	{r3, r4, r5, pc}
 800de38:	8993      	ldrh	r3, [r2, #12]
 800de3a:	f023 0320 	bic.w	r3, r3, #32
 800de3e:	8193      	strh	r3, [r2, #12]
 800de40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de42:	6852      	ldr	r2, [r2, #4]
 800de44:	b2cd      	uxtb	r5, r1
 800de46:	b18b      	cbz	r3, 800de6c <_sungetc_r+0x44>
 800de48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de4a:	4293      	cmp	r3, r2
 800de4c:	dd08      	ble.n	800de60 <_sungetc_r+0x38>
 800de4e:	6823      	ldr	r3, [r4, #0]
 800de50:	1e5a      	subs	r2, r3, #1
 800de52:	6022      	str	r2, [r4, #0]
 800de54:	f803 5c01 	strb.w	r5, [r3, #-1]
 800de58:	6863      	ldr	r3, [r4, #4]
 800de5a:	3301      	adds	r3, #1
 800de5c:	6063      	str	r3, [r4, #4]
 800de5e:	e7e9      	b.n	800de34 <_sungetc_r+0xc>
 800de60:	4621      	mov	r1, r4
 800de62:	f000 fd1d 	bl	800e8a0 <__submore>
 800de66:	2800      	cmp	r0, #0
 800de68:	d0f1      	beq.n	800de4e <_sungetc_r+0x26>
 800de6a:	e7e1      	b.n	800de30 <_sungetc_r+0x8>
 800de6c:	6921      	ldr	r1, [r4, #16]
 800de6e:	6823      	ldr	r3, [r4, #0]
 800de70:	b151      	cbz	r1, 800de88 <_sungetc_r+0x60>
 800de72:	4299      	cmp	r1, r3
 800de74:	d208      	bcs.n	800de88 <_sungetc_r+0x60>
 800de76:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800de7a:	42a9      	cmp	r1, r5
 800de7c:	d104      	bne.n	800de88 <_sungetc_r+0x60>
 800de7e:	3b01      	subs	r3, #1
 800de80:	3201      	adds	r2, #1
 800de82:	6023      	str	r3, [r4, #0]
 800de84:	6062      	str	r2, [r4, #4]
 800de86:	e7d5      	b.n	800de34 <_sungetc_r+0xc>
 800de88:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800de8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de90:	6363      	str	r3, [r4, #52]	; 0x34
 800de92:	2303      	movs	r3, #3
 800de94:	63a3      	str	r3, [r4, #56]	; 0x38
 800de96:	4623      	mov	r3, r4
 800de98:	f803 5f46 	strb.w	r5, [r3, #70]!
 800de9c:	6023      	str	r3, [r4, #0]
 800de9e:	2301      	movs	r3, #1
 800dea0:	e7dc      	b.n	800de5c <_sungetc_r+0x34>

0800dea2 <__ssrefill_r>:
 800dea2:	b510      	push	{r4, lr}
 800dea4:	460c      	mov	r4, r1
 800dea6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dea8:	b169      	cbz	r1, 800dec6 <__ssrefill_r+0x24>
 800deaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800deae:	4299      	cmp	r1, r3
 800deb0:	d001      	beq.n	800deb6 <__ssrefill_r+0x14>
 800deb2:	f7fd fb49 	bl	800b548 <_free_r>
 800deb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800deb8:	6063      	str	r3, [r4, #4]
 800deba:	2000      	movs	r0, #0
 800debc:	6360      	str	r0, [r4, #52]	; 0x34
 800debe:	b113      	cbz	r3, 800dec6 <__ssrefill_r+0x24>
 800dec0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dec2:	6023      	str	r3, [r4, #0]
 800dec4:	bd10      	pop	{r4, pc}
 800dec6:	6923      	ldr	r3, [r4, #16]
 800dec8:	6023      	str	r3, [r4, #0]
 800deca:	2300      	movs	r3, #0
 800decc:	6063      	str	r3, [r4, #4]
 800dece:	89a3      	ldrh	r3, [r4, #12]
 800ded0:	f043 0320 	orr.w	r3, r3, #32
 800ded4:	81a3      	strh	r3, [r4, #12]
 800ded6:	f04f 30ff 	mov.w	r0, #4294967295
 800deda:	e7f3      	b.n	800dec4 <__ssrefill_r+0x22>

0800dedc <__ssvfiscanf_r>:
 800dedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dee0:	460c      	mov	r4, r1
 800dee2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800dee6:	2100      	movs	r1, #0
 800dee8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800deec:	49a6      	ldr	r1, [pc, #664]	; (800e188 <__ssvfiscanf_r+0x2ac>)
 800deee:	91a0      	str	r1, [sp, #640]	; 0x280
 800def0:	f10d 0804 	add.w	r8, sp, #4
 800def4:	49a5      	ldr	r1, [pc, #660]	; (800e18c <__ssvfiscanf_r+0x2b0>)
 800def6:	4fa6      	ldr	r7, [pc, #664]	; (800e190 <__ssvfiscanf_r+0x2b4>)
 800def8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e194 <__ssvfiscanf_r+0x2b8>
 800defc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800df00:	4606      	mov	r6, r0
 800df02:	91a1      	str	r1, [sp, #644]	; 0x284
 800df04:	9300      	str	r3, [sp, #0]
 800df06:	7813      	ldrb	r3, [r2, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	f000 815a 	beq.w	800e1c2 <__ssvfiscanf_r+0x2e6>
 800df0e:	5dd9      	ldrb	r1, [r3, r7]
 800df10:	f011 0108 	ands.w	r1, r1, #8
 800df14:	f102 0501 	add.w	r5, r2, #1
 800df18:	d019      	beq.n	800df4e <__ssvfiscanf_r+0x72>
 800df1a:	6863      	ldr	r3, [r4, #4]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	dd0f      	ble.n	800df40 <__ssvfiscanf_r+0x64>
 800df20:	6823      	ldr	r3, [r4, #0]
 800df22:	781a      	ldrb	r2, [r3, #0]
 800df24:	5cba      	ldrb	r2, [r7, r2]
 800df26:	0712      	lsls	r2, r2, #28
 800df28:	d401      	bmi.n	800df2e <__ssvfiscanf_r+0x52>
 800df2a:	462a      	mov	r2, r5
 800df2c:	e7eb      	b.n	800df06 <__ssvfiscanf_r+0x2a>
 800df2e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800df30:	3201      	adds	r2, #1
 800df32:	9245      	str	r2, [sp, #276]	; 0x114
 800df34:	6862      	ldr	r2, [r4, #4]
 800df36:	3301      	adds	r3, #1
 800df38:	3a01      	subs	r2, #1
 800df3a:	6062      	str	r2, [r4, #4]
 800df3c:	6023      	str	r3, [r4, #0]
 800df3e:	e7ec      	b.n	800df1a <__ssvfiscanf_r+0x3e>
 800df40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800df42:	4621      	mov	r1, r4
 800df44:	4630      	mov	r0, r6
 800df46:	4798      	blx	r3
 800df48:	2800      	cmp	r0, #0
 800df4a:	d0e9      	beq.n	800df20 <__ssvfiscanf_r+0x44>
 800df4c:	e7ed      	b.n	800df2a <__ssvfiscanf_r+0x4e>
 800df4e:	2b25      	cmp	r3, #37	; 0x25
 800df50:	d012      	beq.n	800df78 <__ssvfiscanf_r+0x9c>
 800df52:	469a      	mov	sl, r3
 800df54:	6863      	ldr	r3, [r4, #4]
 800df56:	2b00      	cmp	r3, #0
 800df58:	f340 8091 	ble.w	800e07e <__ssvfiscanf_r+0x1a2>
 800df5c:	6822      	ldr	r2, [r4, #0]
 800df5e:	7813      	ldrb	r3, [r2, #0]
 800df60:	4553      	cmp	r3, sl
 800df62:	f040 812e 	bne.w	800e1c2 <__ssvfiscanf_r+0x2e6>
 800df66:	6863      	ldr	r3, [r4, #4]
 800df68:	3b01      	subs	r3, #1
 800df6a:	6063      	str	r3, [r4, #4]
 800df6c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800df6e:	3201      	adds	r2, #1
 800df70:	3301      	adds	r3, #1
 800df72:	6022      	str	r2, [r4, #0]
 800df74:	9345      	str	r3, [sp, #276]	; 0x114
 800df76:	e7d8      	b.n	800df2a <__ssvfiscanf_r+0x4e>
 800df78:	9141      	str	r1, [sp, #260]	; 0x104
 800df7a:	9143      	str	r1, [sp, #268]	; 0x10c
 800df7c:	7853      	ldrb	r3, [r2, #1]
 800df7e:	2b2a      	cmp	r3, #42	; 0x2a
 800df80:	bf02      	ittt	eq
 800df82:	2310      	moveq	r3, #16
 800df84:	1c95      	addeq	r5, r2, #2
 800df86:	9341      	streq	r3, [sp, #260]	; 0x104
 800df88:	220a      	movs	r2, #10
 800df8a:	46aa      	mov	sl, r5
 800df8c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800df90:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800df94:	2b09      	cmp	r3, #9
 800df96:	d91d      	bls.n	800dfd4 <__ssvfiscanf_r+0xf8>
 800df98:	487e      	ldr	r0, [pc, #504]	; (800e194 <__ssvfiscanf_r+0x2b8>)
 800df9a:	2203      	movs	r2, #3
 800df9c:	f7f2 f930 	bl	8000200 <memchr>
 800dfa0:	b140      	cbz	r0, 800dfb4 <__ssvfiscanf_r+0xd8>
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	eba0 0009 	sub.w	r0, r0, r9
 800dfa8:	fa03 f000 	lsl.w	r0, r3, r0
 800dfac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dfae:	4318      	orrs	r0, r3
 800dfb0:	9041      	str	r0, [sp, #260]	; 0x104
 800dfb2:	4655      	mov	r5, sl
 800dfb4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dfb8:	2b78      	cmp	r3, #120	; 0x78
 800dfba:	d806      	bhi.n	800dfca <__ssvfiscanf_r+0xee>
 800dfbc:	2b57      	cmp	r3, #87	; 0x57
 800dfbe:	d810      	bhi.n	800dfe2 <__ssvfiscanf_r+0x106>
 800dfc0:	2b25      	cmp	r3, #37	; 0x25
 800dfc2:	d0c6      	beq.n	800df52 <__ssvfiscanf_r+0x76>
 800dfc4:	d856      	bhi.n	800e074 <__ssvfiscanf_r+0x198>
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d064      	beq.n	800e094 <__ssvfiscanf_r+0x1b8>
 800dfca:	2303      	movs	r3, #3
 800dfcc:	9347      	str	r3, [sp, #284]	; 0x11c
 800dfce:	230a      	movs	r3, #10
 800dfd0:	9342      	str	r3, [sp, #264]	; 0x108
 800dfd2:	e071      	b.n	800e0b8 <__ssvfiscanf_r+0x1dc>
 800dfd4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800dfd6:	fb02 1103 	mla	r1, r2, r3, r1
 800dfda:	3930      	subs	r1, #48	; 0x30
 800dfdc:	9143      	str	r1, [sp, #268]	; 0x10c
 800dfde:	4655      	mov	r5, sl
 800dfe0:	e7d3      	b.n	800df8a <__ssvfiscanf_r+0xae>
 800dfe2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800dfe6:	2a20      	cmp	r2, #32
 800dfe8:	d8ef      	bhi.n	800dfca <__ssvfiscanf_r+0xee>
 800dfea:	a101      	add	r1, pc, #4	; (adr r1, 800dff0 <__ssvfiscanf_r+0x114>)
 800dfec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dff0:	0800e0a3 	.word	0x0800e0a3
 800dff4:	0800dfcb 	.word	0x0800dfcb
 800dff8:	0800dfcb 	.word	0x0800dfcb
 800dffc:	0800e101 	.word	0x0800e101
 800e000:	0800dfcb 	.word	0x0800dfcb
 800e004:	0800dfcb 	.word	0x0800dfcb
 800e008:	0800dfcb 	.word	0x0800dfcb
 800e00c:	0800dfcb 	.word	0x0800dfcb
 800e010:	0800dfcb 	.word	0x0800dfcb
 800e014:	0800dfcb 	.word	0x0800dfcb
 800e018:	0800dfcb 	.word	0x0800dfcb
 800e01c:	0800e117 	.word	0x0800e117
 800e020:	0800e0ed 	.word	0x0800e0ed
 800e024:	0800e07b 	.word	0x0800e07b
 800e028:	0800e07b 	.word	0x0800e07b
 800e02c:	0800e07b 	.word	0x0800e07b
 800e030:	0800dfcb 	.word	0x0800dfcb
 800e034:	0800e0f1 	.word	0x0800e0f1
 800e038:	0800dfcb 	.word	0x0800dfcb
 800e03c:	0800dfcb 	.word	0x0800dfcb
 800e040:	0800dfcb 	.word	0x0800dfcb
 800e044:	0800dfcb 	.word	0x0800dfcb
 800e048:	0800e127 	.word	0x0800e127
 800e04c:	0800e0f9 	.word	0x0800e0f9
 800e050:	0800e09b 	.word	0x0800e09b
 800e054:	0800dfcb 	.word	0x0800dfcb
 800e058:	0800dfcb 	.word	0x0800dfcb
 800e05c:	0800e123 	.word	0x0800e123
 800e060:	0800dfcb 	.word	0x0800dfcb
 800e064:	0800e0ed 	.word	0x0800e0ed
 800e068:	0800dfcb 	.word	0x0800dfcb
 800e06c:	0800dfcb 	.word	0x0800dfcb
 800e070:	0800e0a3 	.word	0x0800e0a3
 800e074:	3b45      	subs	r3, #69	; 0x45
 800e076:	2b02      	cmp	r3, #2
 800e078:	d8a7      	bhi.n	800dfca <__ssvfiscanf_r+0xee>
 800e07a:	2305      	movs	r3, #5
 800e07c:	e01b      	b.n	800e0b6 <__ssvfiscanf_r+0x1da>
 800e07e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e080:	4621      	mov	r1, r4
 800e082:	4630      	mov	r0, r6
 800e084:	4798      	blx	r3
 800e086:	2800      	cmp	r0, #0
 800e088:	f43f af68 	beq.w	800df5c <__ssvfiscanf_r+0x80>
 800e08c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e08e:	2800      	cmp	r0, #0
 800e090:	f040 808d 	bne.w	800e1ae <__ssvfiscanf_r+0x2d2>
 800e094:	f04f 30ff 	mov.w	r0, #4294967295
 800e098:	e08f      	b.n	800e1ba <__ssvfiscanf_r+0x2de>
 800e09a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e09c:	f042 0220 	orr.w	r2, r2, #32
 800e0a0:	9241      	str	r2, [sp, #260]	; 0x104
 800e0a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e0a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e0a8:	9241      	str	r2, [sp, #260]	; 0x104
 800e0aa:	2210      	movs	r2, #16
 800e0ac:	2b6f      	cmp	r3, #111	; 0x6f
 800e0ae:	9242      	str	r2, [sp, #264]	; 0x108
 800e0b0:	bf34      	ite	cc
 800e0b2:	2303      	movcc	r3, #3
 800e0b4:	2304      	movcs	r3, #4
 800e0b6:	9347      	str	r3, [sp, #284]	; 0x11c
 800e0b8:	6863      	ldr	r3, [r4, #4]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	dd42      	ble.n	800e144 <__ssvfiscanf_r+0x268>
 800e0be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e0c0:	0659      	lsls	r1, r3, #25
 800e0c2:	d404      	bmi.n	800e0ce <__ssvfiscanf_r+0x1f2>
 800e0c4:	6823      	ldr	r3, [r4, #0]
 800e0c6:	781a      	ldrb	r2, [r3, #0]
 800e0c8:	5cba      	ldrb	r2, [r7, r2]
 800e0ca:	0712      	lsls	r2, r2, #28
 800e0cc:	d441      	bmi.n	800e152 <__ssvfiscanf_r+0x276>
 800e0ce:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e0d0:	2b02      	cmp	r3, #2
 800e0d2:	dc50      	bgt.n	800e176 <__ssvfiscanf_r+0x29a>
 800e0d4:	466b      	mov	r3, sp
 800e0d6:	4622      	mov	r2, r4
 800e0d8:	a941      	add	r1, sp, #260	; 0x104
 800e0da:	4630      	mov	r0, r6
 800e0dc:	f000 f9d0 	bl	800e480 <_scanf_chars>
 800e0e0:	2801      	cmp	r0, #1
 800e0e2:	d06e      	beq.n	800e1c2 <__ssvfiscanf_r+0x2e6>
 800e0e4:	2802      	cmp	r0, #2
 800e0e6:	f47f af20 	bne.w	800df2a <__ssvfiscanf_r+0x4e>
 800e0ea:	e7cf      	b.n	800e08c <__ssvfiscanf_r+0x1b0>
 800e0ec:	220a      	movs	r2, #10
 800e0ee:	e7dd      	b.n	800e0ac <__ssvfiscanf_r+0x1d0>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	9342      	str	r3, [sp, #264]	; 0x108
 800e0f4:	2303      	movs	r3, #3
 800e0f6:	e7de      	b.n	800e0b6 <__ssvfiscanf_r+0x1da>
 800e0f8:	2308      	movs	r3, #8
 800e0fa:	9342      	str	r3, [sp, #264]	; 0x108
 800e0fc:	2304      	movs	r3, #4
 800e0fe:	e7da      	b.n	800e0b6 <__ssvfiscanf_r+0x1da>
 800e100:	4629      	mov	r1, r5
 800e102:	4640      	mov	r0, r8
 800e104:	f000 fb20 	bl	800e748 <__sccl>
 800e108:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e10a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e10e:	9341      	str	r3, [sp, #260]	; 0x104
 800e110:	4605      	mov	r5, r0
 800e112:	2301      	movs	r3, #1
 800e114:	e7cf      	b.n	800e0b6 <__ssvfiscanf_r+0x1da>
 800e116:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e11c:	9341      	str	r3, [sp, #260]	; 0x104
 800e11e:	2300      	movs	r3, #0
 800e120:	e7c9      	b.n	800e0b6 <__ssvfiscanf_r+0x1da>
 800e122:	2302      	movs	r3, #2
 800e124:	e7c7      	b.n	800e0b6 <__ssvfiscanf_r+0x1da>
 800e126:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e128:	06c3      	lsls	r3, r0, #27
 800e12a:	f53f aefe 	bmi.w	800df2a <__ssvfiscanf_r+0x4e>
 800e12e:	9b00      	ldr	r3, [sp, #0]
 800e130:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e132:	1d19      	adds	r1, r3, #4
 800e134:	9100      	str	r1, [sp, #0]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f010 0f01 	tst.w	r0, #1
 800e13c:	bf14      	ite	ne
 800e13e:	801a      	strhne	r2, [r3, #0]
 800e140:	601a      	streq	r2, [r3, #0]
 800e142:	e6f2      	b.n	800df2a <__ssvfiscanf_r+0x4e>
 800e144:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e146:	4621      	mov	r1, r4
 800e148:	4630      	mov	r0, r6
 800e14a:	4798      	blx	r3
 800e14c:	2800      	cmp	r0, #0
 800e14e:	d0b6      	beq.n	800e0be <__ssvfiscanf_r+0x1e2>
 800e150:	e79c      	b.n	800e08c <__ssvfiscanf_r+0x1b0>
 800e152:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e154:	3201      	adds	r2, #1
 800e156:	9245      	str	r2, [sp, #276]	; 0x114
 800e158:	6862      	ldr	r2, [r4, #4]
 800e15a:	3a01      	subs	r2, #1
 800e15c:	2a00      	cmp	r2, #0
 800e15e:	6062      	str	r2, [r4, #4]
 800e160:	dd02      	ble.n	800e168 <__ssvfiscanf_r+0x28c>
 800e162:	3301      	adds	r3, #1
 800e164:	6023      	str	r3, [r4, #0]
 800e166:	e7ad      	b.n	800e0c4 <__ssvfiscanf_r+0x1e8>
 800e168:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e16a:	4621      	mov	r1, r4
 800e16c:	4630      	mov	r0, r6
 800e16e:	4798      	blx	r3
 800e170:	2800      	cmp	r0, #0
 800e172:	d0a7      	beq.n	800e0c4 <__ssvfiscanf_r+0x1e8>
 800e174:	e78a      	b.n	800e08c <__ssvfiscanf_r+0x1b0>
 800e176:	2b04      	cmp	r3, #4
 800e178:	dc0e      	bgt.n	800e198 <__ssvfiscanf_r+0x2bc>
 800e17a:	466b      	mov	r3, sp
 800e17c:	4622      	mov	r2, r4
 800e17e:	a941      	add	r1, sp, #260	; 0x104
 800e180:	4630      	mov	r0, r6
 800e182:	f000 f9d7 	bl	800e534 <_scanf_i>
 800e186:	e7ab      	b.n	800e0e0 <__ssvfiscanf_r+0x204>
 800e188:	0800de29 	.word	0x0800de29
 800e18c:	0800dea3 	.word	0x0800dea3
 800e190:	0800edb7 	.word	0x0800edb7
 800e194:	0800f104 	.word	0x0800f104
 800e198:	4b0b      	ldr	r3, [pc, #44]	; (800e1c8 <__ssvfiscanf_r+0x2ec>)
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	f43f aec5 	beq.w	800df2a <__ssvfiscanf_r+0x4e>
 800e1a0:	466b      	mov	r3, sp
 800e1a2:	4622      	mov	r2, r4
 800e1a4:	a941      	add	r1, sp, #260	; 0x104
 800e1a6:	4630      	mov	r0, r6
 800e1a8:	f3af 8000 	nop.w
 800e1ac:	e798      	b.n	800e0e0 <__ssvfiscanf_r+0x204>
 800e1ae:	89a3      	ldrh	r3, [r4, #12]
 800e1b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e1b4:	bf18      	it	ne
 800e1b6:	f04f 30ff 	movne.w	r0, #4294967295
 800e1ba:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1c2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e1c4:	e7f9      	b.n	800e1ba <__ssvfiscanf_r+0x2de>
 800e1c6:	bf00      	nop
 800e1c8:	00000000 	.word	0x00000000

0800e1cc <__sfputc_r>:
 800e1cc:	6893      	ldr	r3, [r2, #8]
 800e1ce:	3b01      	subs	r3, #1
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	b410      	push	{r4}
 800e1d4:	6093      	str	r3, [r2, #8]
 800e1d6:	da08      	bge.n	800e1ea <__sfputc_r+0x1e>
 800e1d8:	6994      	ldr	r4, [r2, #24]
 800e1da:	42a3      	cmp	r3, r4
 800e1dc:	db01      	blt.n	800e1e2 <__sfputc_r+0x16>
 800e1de:	290a      	cmp	r1, #10
 800e1e0:	d103      	bne.n	800e1ea <__sfputc_r+0x1e>
 800e1e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1e6:	f7fe b8e3 	b.w	800c3b0 <__swbuf_r>
 800e1ea:	6813      	ldr	r3, [r2, #0]
 800e1ec:	1c58      	adds	r0, r3, #1
 800e1ee:	6010      	str	r0, [r2, #0]
 800e1f0:	7019      	strb	r1, [r3, #0]
 800e1f2:	4608      	mov	r0, r1
 800e1f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1f8:	4770      	bx	lr

0800e1fa <__sfputs_r>:
 800e1fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fc:	4606      	mov	r6, r0
 800e1fe:	460f      	mov	r7, r1
 800e200:	4614      	mov	r4, r2
 800e202:	18d5      	adds	r5, r2, r3
 800e204:	42ac      	cmp	r4, r5
 800e206:	d101      	bne.n	800e20c <__sfputs_r+0x12>
 800e208:	2000      	movs	r0, #0
 800e20a:	e007      	b.n	800e21c <__sfputs_r+0x22>
 800e20c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e210:	463a      	mov	r2, r7
 800e212:	4630      	mov	r0, r6
 800e214:	f7ff ffda 	bl	800e1cc <__sfputc_r>
 800e218:	1c43      	adds	r3, r0, #1
 800e21a:	d1f3      	bne.n	800e204 <__sfputs_r+0xa>
 800e21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e220 <_vfiprintf_r>:
 800e220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e224:	460d      	mov	r5, r1
 800e226:	b09d      	sub	sp, #116	; 0x74
 800e228:	4614      	mov	r4, r2
 800e22a:	4698      	mov	r8, r3
 800e22c:	4606      	mov	r6, r0
 800e22e:	b118      	cbz	r0, 800e238 <_vfiprintf_r+0x18>
 800e230:	6983      	ldr	r3, [r0, #24]
 800e232:	b90b      	cbnz	r3, 800e238 <_vfiprintf_r+0x18>
 800e234:	f7ff f934 	bl	800d4a0 <__sinit>
 800e238:	4b89      	ldr	r3, [pc, #548]	; (800e460 <_vfiprintf_r+0x240>)
 800e23a:	429d      	cmp	r5, r3
 800e23c:	d11b      	bne.n	800e276 <_vfiprintf_r+0x56>
 800e23e:	6875      	ldr	r5, [r6, #4]
 800e240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e242:	07d9      	lsls	r1, r3, #31
 800e244:	d405      	bmi.n	800e252 <_vfiprintf_r+0x32>
 800e246:	89ab      	ldrh	r3, [r5, #12]
 800e248:	059a      	lsls	r2, r3, #22
 800e24a:	d402      	bmi.n	800e252 <_vfiprintf_r+0x32>
 800e24c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e24e:	f7ff f9ca 	bl	800d5e6 <__retarget_lock_acquire_recursive>
 800e252:	89ab      	ldrh	r3, [r5, #12]
 800e254:	071b      	lsls	r3, r3, #28
 800e256:	d501      	bpl.n	800e25c <_vfiprintf_r+0x3c>
 800e258:	692b      	ldr	r3, [r5, #16]
 800e25a:	b9eb      	cbnz	r3, 800e298 <_vfiprintf_r+0x78>
 800e25c:	4629      	mov	r1, r5
 800e25e:	4630      	mov	r0, r6
 800e260:	f7fe f90a 	bl	800c478 <__swsetup_r>
 800e264:	b1c0      	cbz	r0, 800e298 <_vfiprintf_r+0x78>
 800e266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e268:	07dc      	lsls	r4, r3, #31
 800e26a:	d50e      	bpl.n	800e28a <_vfiprintf_r+0x6a>
 800e26c:	f04f 30ff 	mov.w	r0, #4294967295
 800e270:	b01d      	add	sp, #116	; 0x74
 800e272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e276:	4b7b      	ldr	r3, [pc, #492]	; (800e464 <_vfiprintf_r+0x244>)
 800e278:	429d      	cmp	r5, r3
 800e27a:	d101      	bne.n	800e280 <_vfiprintf_r+0x60>
 800e27c:	68b5      	ldr	r5, [r6, #8]
 800e27e:	e7df      	b.n	800e240 <_vfiprintf_r+0x20>
 800e280:	4b79      	ldr	r3, [pc, #484]	; (800e468 <_vfiprintf_r+0x248>)
 800e282:	429d      	cmp	r5, r3
 800e284:	bf08      	it	eq
 800e286:	68f5      	ldreq	r5, [r6, #12]
 800e288:	e7da      	b.n	800e240 <_vfiprintf_r+0x20>
 800e28a:	89ab      	ldrh	r3, [r5, #12]
 800e28c:	0598      	lsls	r0, r3, #22
 800e28e:	d4ed      	bmi.n	800e26c <_vfiprintf_r+0x4c>
 800e290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e292:	f7ff f9a9 	bl	800d5e8 <__retarget_lock_release_recursive>
 800e296:	e7e9      	b.n	800e26c <_vfiprintf_r+0x4c>
 800e298:	2300      	movs	r3, #0
 800e29a:	9309      	str	r3, [sp, #36]	; 0x24
 800e29c:	2320      	movs	r3, #32
 800e29e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2a6:	2330      	movs	r3, #48	; 0x30
 800e2a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e46c <_vfiprintf_r+0x24c>
 800e2ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2b0:	f04f 0901 	mov.w	r9, #1
 800e2b4:	4623      	mov	r3, r4
 800e2b6:	469a      	mov	sl, r3
 800e2b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2bc:	b10a      	cbz	r2, 800e2c2 <_vfiprintf_r+0xa2>
 800e2be:	2a25      	cmp	r2, #37	; 0x25
 800e2c0:	d1f9      	bne.n	800e2b6 <_vfiprintf_r+0x96>
 800e2c2:	ebba 0b04 	subs.w	fp, sl, r4
 800e2c6:	d00b      	beq.n	800e2e0 <_vfiprintf_r+0xc0>
 800e2c8:	465b      	mov	r3, fp
 800e2ca:	4622      	mov	r2, r4
 800e2cc:	4629      	mov	r1, r5
 800e2ce:	4630      	mov	r0, r6
 800e2d0:	f7ff ff93 	bl	800e1fa <__sfputs_r>
 800e2d4:	3001      	adds	r0, #1
 800e2d6:	f000 80aa 	beq.w	800e42e <_vfiprintf_r+0x20e>
 800e2da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2dc:	445a      	add	r2, fp
 800e2de:	9209      	str	r2, [sp, #36]	; 0x24
 800e2e0:	f89a 3000 	ldrb.w	r3, [sl]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	f000 80a2 	beq.w	800e42e <_vfiprintf_r+0x20e>
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e2f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2f4:	f10a 0a01 	add.w	sl, sl, #1
 800e2f8:	9304      	str	r3, [sp, #16]
 800e2fa:	9307      	str	r3, [sp, #28]
 800e2fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e300:	931a      	str	r3, [sp, #104]	; 0x68
 800e302:	4654      	mov	r4, sl
 800e304:	2205      	movs	r2, #5
 800e306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e30a:	4858      	ldr	r0, [pc, #352]	; (800e46c <_vfiprintf_r+0x24c>)
 800e30c:	f7f1 ff78 	bl	8000200 <memchr>
 800e310:	9a04      	ldr	r2, [sp, #16]
 800e312:	b9d8      	cbnz	r0, 800e34c <_vfiprintf_r+0x12c>
 800e314:	06d1      	lsls	r1, r2, #27
 800e316:	bf44      	itt	mi
 800e318:	2320      	movmi	r3, #32
 800e31a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e31e:	0713      	lsls	r3, r2, #28
 800e320:	bf44      	itt	mi
 800e322:	232b      	movmi	r3, #43	; 0x2b
 800e324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e328:	f89a 3000 	ldrb.w	r3, [sl]
 800e32c:	2b2a      	cmp	r3, #42	; 0x2a
 800e32e:	d015      	beq.n	800e35c <_vfiprintf_r+0x13c>
 800e330:	9a07      	ldr	r2, [sp, #28]
 800e332:	4654      	mov	r4, sl
 800e334:	2000      	movs	r0, #0
 800e336:	f04f 0c0a 	mov.w	ip, #10
 800e33a:	4621      	mov	r1, r4
 800e33c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e340:	3b30      	subs	r3, #48	; 0x30
 800e342:	2b09      	cmp	r3, #9
 800e344:	d94e      	bls.n	800e3e4 <_vfiprintf_r+0x1c4>
 800e346:	b1b0      	cbz	r0, 800e376 <_vfiprintf_r+0x156>
 800e348:	9207      	str	r2, [sp, #28]
 800e34a:	e014      	b.n	800e376 <_vfiprintf_r+0x156>
 800e34c:	eba0 0308 	sub.w	r3, r0, r8
 800e350:	fa09 f303 	lsl.w	r3, r9, r3
 800e354:	4313      	orrs	r3, r2
 800e356:	9304      	str	r3, [sp, #16]
 800e358:	46a2      	mov	sl, r4
 800e35a:	e7d2      	b.n	800e302 <_vfiprintf_r+0xe2>
 800e35c:	9b03      	ldr	r3, [sp, #12]
 800e35e:	1d19      	adds	r1, r3, #4
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	9103      	str	r1, [sp, #12]
 800e364:	2b00      	cmp	r3, #0
 800e366:	bfbb      	ittet	lt
 800e368:	425b      	neglt	r3, r3
 800e36a:	f042 0202 	orrlt.w	r2, r2, #2
 800e36e:	9307      	strge	r3, [sp, #28]
 800e370:	9307      	strlt	r3, [sp, #28]
 800e372:	bfb8      	it	lt
 800e374:	9204      	strlt	r2, [sp, #16]
 800e376:	7823      	ldrb	r3, [r4, #0]
 800e378:	2b2e      	cmp	r3, #46	; 0x2e
 800e37a:	d10c      	bne.n	800e396 <_vfiprintf_r+0x176>
 800e37c:	7863      	ldrb	r3, [r4, #1]
 800e37e:	2b2a      	cmp	r3, #42	; 0x2a
 800e380:	d135      	bne.n	800e3ee <_vfiprintf_r+0x1ce>
 800e382:	9b03      	ldr	r3, [sp, #12]
 800e384:	1d1a      	adds	r2, r3, #4
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	9203      	str	r2, [sp, #12]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	bfb8      	it	lt
 800e38e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e392:	3402      	adds	r4, #2
 800e394:	9305      	str	r3, [sp, #20]
 800e396:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e47c <_vfiprintf_r+0x25c>
 800e39a:	7821      	ldrb	r1, [r4, #0]
 800e39c:	2203      	movs	r2, #3
 800e39e:	4650      	mov	r0, sl
 800e3a0:	f7f1 ff2e 	bl	8000200 <memchr>
 800e3a4:	b140      	cbz	r0, 800e3b8 <_vfiprintf_r+0x198>
 800e3a6:	2340      	movs	r3, #64	; 0x40
 800e3a8:	eba0 000a 	sub.w	r0, r0, sl
 800e3ac:	fa03 f000 	lsl.w	r0, r3, r0
 800e3b0:	9b04      	ldr	r3, [sp, #16]
 800e3b2:	4303      	orrs	r3, r0
 800e3b4:	3401      	adds	r4, #1
 800e3b6:	9304      	str	r3, [sp, #16]
 800e3b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3bc:	482c      	ldr	r0, [pc, #176]	; (800e470 <_vfiprintf_r+0x250>)
 800e3be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3c2:	2206      	movs	r2, #6
 800e3c4:	f7f1 ff1c 	bl	8000200 <memchr>
 800e3c8:	2800      	cmp	r0, #0
 800e3ca:	d03f      	beq.n	800e44c <_vfiprintf_r+0x22c>
 800e3cc:	4b29      	ldr	r3, [pc, #164]	; (800e474 <_vfiprintf_r+0x254>)
 800e3ce:	bb1b      	cbnz	r3, 800e418 <_vfiprintf_r+0x1f8>
 800e3d0:	9b03      	ldr	r3, [sp, #12]
 800e3d2:	3307      	adds	r3, #7
 800e3d4:	f023 0307 	bic.w	r3, r3, #7
 800e3d8:	3308      	adds	r3, #8
 800e3da:	9303      	str	r3, [sp, #12]
 800e3dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3de:	443b      	add	r3, r7
 800e3e0:	9309      	str	r3, [sp, #36]	; 0x24
 800e3e2:	e767      	b.n	800e2b4 <_vfiprintf_r+0x94>
 800e3e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3e8:	460c      	mov	r4, r1
 800e3ea:	2001      	movs	r0, #1
 800e3ec:	e7a5      	b.n	800e33a <_vfiprintf_r+0x11a>
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	3401      	adds	r4, #1
 800e3f2:	9305      	str	r3, [sp, #20]
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	f04f 0c0a 	mov.w	ip, #10
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e400:	3a30      	subs	r2, #48	; 0x30
 800e402:	2a09      	cmp	r2, #9
 800e404:	d903      	bls.n	800e40e <_vfiprintf_r+0x1ee>
 800e406:	2b00      	cmp	r3, #0
 800e408:	d0c5      	beq.n	800e396 <_vfiprintf_r+0x176>
 800e40a:	9105      	str	r1, [sp, #20]
 800e40c:	e7c3      	b.n	800e396 <_vfiprintf_r+0x176>
 800e40e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e412:	4604      	mov	r4, r0
 800e414:	2301      	movs	r3, #1
 800e416:	e7f0      	b.n	800e3fa <_vfiprintf_r+0x1da>
 800e418:	ab03      	add	r3, sp, #12
 800e41a:	9300      	str	r3, [sp, #0]
 800e41c:	462a      	mov	r2, r5
 800e41e:	4b16      	ldr	r3, [pc, #88]	; (800e478 <_vfiprintf_r+0x258>)
 800e420:	a904      	add	r1, sp, #16
 800e422:	4630      	mov	r0, r6
 800e424:	f7fd fa10 	bl	800b848 <_printf_float>
 800e428:	4607      	mov	r7, r0
 800e42a:	1c78      	adds	r0, r7, #1
 800e42c:	d1d6      	bne.n	800e3dc <_vfiprintf_r+0x1bc>
 800e42e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e430:	07d9      	lsls	r1, r3, #31
 800e432:	d405      	bmi.n	800e440 <_vfiprintf_r+0x220>
 800e434:	89ab      	ldrh	r3, [r5, #12]
 800e436:	059a      	lsls	r2, r3, #22
 800e438:	d402      	bmi.n	800e440 <_vfiprintf_r+0x220>
 800e43a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e43c:	f7ff f8d4 	bl	800d5e8 <__retarget_lock_release_recursive>
 800e440:	89ab      	ldrh	r3, [r5, #12]
 800e442:	065b      	lsls	r3, r3, #25
 800e444:	f53f af12 	bmi.w	800e26c <_vfiprintf_r+0x4c>
 800e448:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e44a:	e711      	b.n	800e270 <_vfiprintf_r+0x50>
 800e44c:	ab03      	add	r3, sp, #12
 800e44e:	9300      	str	r3, [sp, #0]
 800e450:	462a      	mov	r2, r5
 800e452:	4b09      	ldr	r3, [pc, #36]	; (800e478 <_vfiprintf_r+0x258>)
 800e454:	a904      	add	r1, sp, #16
 800e456:	4630      	mov	r0, r6
 800e458:	f7fd fc9a 	bl	800bd90 <_printf_i>
 800e45c:	e7e4      	b.n	800e428 <_vfiprintf_r+0x208>
 800e45e:	bf00      	nop
 800e460:	0800ef68 	.word	0x0800ef68
 800e464:	0800ef88 	.word	0x0800ef88
 800e468:	0800ef48 	.word	0x0800ef48
 800e46c:	0800f108 	.word	0x0800f108
 800e470:	0800f10e 	.word	0x0800f10e
 800e474:	0800b849 	.word	0x0800b849
 800e478:	0800e1fb 	.word	0x0800e1fb
 800e47c:	0800f104 	.word	0x0800f104

0800e480 <_scanf_chars>:
 800e480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e484:	4615      	mov	r5, r2
 800e486:	688a      	ldr	r2, [r1, #8]
 800e488:	4680      	mov	r8, r0
 800e48a:	460c      	mov	r4, r1
 800e48c:	b932      	cbnz	r2, 800e49c <_scanf_chars+0x1c>
 800e48e:	698a      	ldr	r2, [r1, #24]
 800e490:	2a00      	cmp	r2, #0
 800e492:	bf0c      	ite	eq
 800e494:	2201      	moveq	r2, #1
 800e496:	f04f 32ff 	movne.w	r2, #4294967295
 800e49a:	608a      	str	r2, [r1, #8]
 800e49c:	6822      	ldr	r2, [r4, #0]
 800e49e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e530 <_scanf_chars+0xb0>
 800e4a2:	06d1      	lsls	r1, r2, #27
 800e4a4:	bf5f      	itttt	pl
 800e4a6:	681a      	ldrpl	r2, [r3, #0]
 800e4a8:	1d11      	addpl	r1, r2, #4
 800e4aa:	6019      	strpl	r1, [r3, #0]
 800e4ac:	6816      	ldrpl	r6, [r2, #0]
 800e4ae:	2700      	movs	r7, #0
 800e4b0:	69a0      	ldr	r0, [r4, #24]
 800e4b2:	b188      	cbz	r0, 800e4d8 <_scanf_chars+0x58>
 800e4b4:	2801      	cmp	r0, #1
 800e4b6:	d107      	bne.n	800e4c8 <_scanf_chars+0x48>
 800e4b8:	682a      	ldr	r2, [r5, #0]
 800e4ba:	7811      	ldrb	r1, [r2, #0]
 800e4bc:	6962      	ldr	r2, [r4, #20]
 800e4be:	5c52      	ldrb	r2, [r2, r1]
 800e4c0:	b952      	cbnz	r2, 800e4d8 <_scanf_chars+0x58>
 800e4c2:	2f00      	cmp	r7, #0
 800e4c4:	d031      	beq.n	800e52a <_scanf_chars+0xaa>
 800e4c6:	e022      	b.n	800e50e <_scanf_chars+0x8e>
 800e4c8:	2802      	cmp	r0, #2
 800e4ca:	d120      	bne.n	800e50e <_scanf_chars+0x8e>
 800e4cc:	682b      	ldr	r3, [r5, #0]
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e4d4:	071b      	lsls	r3, r3, #28
 800e4d6:	d41a      	bmi.n	800e50e <_scanf_chars+0x8e>
 800e4d8:	6823      	ldr	r3, [r4, #0]
 800e4da:	06da      	lsls	r2, r3, #27
 800e4dc:	bf5e      	ittt	pl
 800e4de:	682b      	ldrpl	r3, [r5, #0]
 800e4e0:	781b      	ldrbpl	r3, [r3, #0]
 800e4e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e4e6:	682a      	ldr	r2, [r5, #0]
 800e4e8:	686b      	ldr	r3, [r5, #4]
 800e4ea:	3201      	adds	r2, #1
 800e4ec:	602a      	str	r2, [r5, #0]
 800e4ee:	68a2      	ldr	r2, [r4, #8]
 800e4f0:	3b01      	subs	r3, #1
 800e4f2:	3a01      	subs	r2, #1
 800e4f4:	606b      	str	r3, [r5, #4]
 800e4f6:	3701      	adds	r7, #1
 800e4f8:	60a2      	str	r2, [r4, #8]
 800e4fa:	b142      	cbz	r2, 800e50e <_scanf_chars+0x8e>
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	dcd7      	bgt.n	800e4b0 <_scanf_chars+0x30>
 800e500:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e504:	4629      	mov	r1, r5
 800e506:	4640      	mov	r0, r8
 800e508:	4798      	blx	r3
 800e50a:	2800      	cmp	r0, #0
 800e50c:	d0d0      	beq.n	800e4b0 <_scanf_chars+0x30>
 800e50e:	6823      	ldr	r3, [r4, #0]
 800e510:	f013 0310 	ands.w	r3, r3, #16
 800e514:	d105      	bne.n	800e522 <_scanf_chars+0xa2>
 800e516:	68e2      	ldr	r2, [r4, #12]
 800e518:	3201      	adds	r2, #1
 800e51a:	60e2      	str	r2, [r4, #12]
 800e51c:	69a2      	ldr	r2, [r4, #24]
 800e51e:	b102      	cbz	r2, 800e522 <_scanf_chars+0xa2>
 800e520:	7033      	strb	r3, [r6, #0]
 800e522:	6923      	ldr	r3, [r4, #16]
 800e524:	443b      	add	r3, r7
 800e526:	6123      	str	r3, [r4, #16]
 800e528:	2000      	movs	r0, #0
 800e52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e52e:	bf00      	nop
 800e530:	0800edb7 	.word	0x0800edb7

0800e534 <_scanf_i>:
 800e534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e538:	4698      	mov	r8, r3
 800e53a:	4b76      	ldr	r3, [pc, #472]	; (800e714 <_scanf_i+0x1e0>)
 800e53c:	460c      	mov	r4, r1
 800e53e:	4682      	mov	sl, r0
 800e540:	4616      	mov	r6, r2
 800e542:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e546:	b087      	sub	sp, #28
 800e548:	ab03      	add	r3, sp, #12
 800e54a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e54e:	4b72      	ldr	r3, [pc, #456]	; (800e718 <_scanf_i+0x1e4>)
 800e550:	69a1      	ldr	r1, [r4, #24]
 800e552:	4a72      	ldr	r2, [pc, #456]	; (800e71c <_scanf_i+0x1e8>)
 800e554:	2903      	cmp	r1, #3
 800e556:	bf18      	it	ne
 800e558:	461a      	movne	r2, r3
 800e55a:	68a3      	ldr	r3, [r4, #8]
 800e55c:	9201      	str	r2, [sp, #4]
 800e55e:	1e5a      	subs	r2, r3, #1
 800e560:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e564:	bf88      	it	hi
 800e566:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e56a:	4627      	mov	r7, r4
 800e56c:	bf82      	ittt	hi
 800e56e:	eb03 0905 	addhi.w	r9, r3, r5
 800e572:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e576:	60a3      	strhi	r3, [r4, #8]
 800e578:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e57c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e580:	bf98      	it	ls
 800e582:	f04f 0900 	movls.w	r9, #0
 800e586:	6023      	str	r3, [r4, #0]
 800e588:	463d      	mov	r5, r7
 800e58a:	f04f 0b00 	mov.w	fp, #0
 800e58e:	6831      	ldr	r1, [r6, #0]
 800e590:	ab03      	add	r3, sp, #12
 800e592:	7809      	ldrb	r1, [r1, #0]
 800e594:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e598:	2202      	movs	r2, #2
 800e59a:	f7f1 fe31 	bl	8000200 <memchr>
 800e59e:	b328      	cbz	r0, 800e5ec <_scanf_i+0xb8>
 800e5a0:	f1bb 0f01 	cmp.w	fp, #1
 800e5a4:	d159      	bne.n	800e65a <_scanf_i+0x126>
 800e5a6:	6862      	ldr	r2, [r4, #4]
 800e5a8:	b92a      	cbnz	r2, 800e5b6 <_scanf_i+0x82>
 800e5aa:	6822      	ldr	r2, [r4, #0]
 800e5ac:	2308      	movs	r3, #8
 800e5ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e5b2:	6063      	str	r3, [r4, #4]
 800e5b4:	6022      	str	r2, [r4, #0]
 800e5b6:	6822      	ldr	r2, [r4, #0]
 800e5b8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e5bc:	6022      	str	r2, [r4, #0]
 800e5be:	68a2      	ldr	r2, [r4, #8]
 800e5c0:	1e51      	subs	r1, r2, #1
 800e5c2:	60a1      	str	r1, [r4, #8]
 800e5c4:	b192      	cbz	r2, 800e5ec <_scanf_i+0xb8>
 800e5c6:	6832      	ldr	r2, [r6, #0]
 800e5c8:	1c51      	adds	r1, r2, #1
 800e5ca:	6031      	str	r1, [r6, #0]
 800e5cc:	7812      	ldrb	r2, [r2, #0]
 800e5ce:	f805 2b01 	strb.w	r2, [r5], #1
 800e5d2:	6872      	ldr	r2, [r6, #4]
 800e5d4:	3a01      	subs	r2, #1
 800e5d6:	2a00      	cmp	r2, #0
 800e5d8:	6072      	str	r2, [r6, #4]
 800e5da:	dc07      	bgt.n	800e5ec <_scanf_i+0xb8>
 800e5dc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e5e0:	4631      	mov	r1, r6
 800e5e2:	4650      	mov	r0, sl
 800e5e4:	4790      	blx	r2
 800e5e6:	2800      	cmp	r0, #0
 800e5e8:	f040 8085 	bne.w	800e6f6 <_scanf_i+0x1c2>
 800e5ec:	f10b 0b01 	add.w	fp, fp, #1
 800e5f0:	f1bb 0f03 	cmp.w	fp, #3
 800e5f4:	d1cb      	bne.n	800e58e <_scanf_i+0x5a>
 800e5f6:	6863      	ldr	r3, [r4, #4]
 800e5f8:	b90b      	cbnz	r3, 800e5fe <_scanf_i+0xca>
 800e5fa:	230a      	movs	r3, #10
 800e5fc:	6063      	str	r3, [r4, #4]
 800e5fe:	6863      	ldr	r3, [r4, #4]
 800e600:	4947      	ldr	r1, [pc, #284]	; (800e720 <_scanf_i+0x1ec>)
 800e602:	6960      	ldr	r0, [r4, #20]
 800e604:	1ac9      	subs	r1, r1, r3
 800e606:	f000 f89f 	bl	800e748 <__sccl>
 800e60a:	f04f 0b00 	mov.w	fp, #0
 800e60e:	68a3      	ldr	r3, [r4, #8]
 800e610:	6822      	ldr	r2, [r4, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d03d      	beq.n	800e692 <_scanf_i+0x15e>
 800e616:	6831      	ldr	r1, [r6, #0]
 800e618:	6960      	ldr	r0, [r4, #20]
 800e61a:	f891 c000 	ldrb.w	ip, [r1]
 800e61e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e622:	2800      	cmp	r0, #0
 800e624:	d035      	beq.n	800e692 <_scanf_i+0x15e>
 800e626:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e62a:	d124      	bne.n	800e676 <_scanf_i+0x142>
 800e62c:	0510      	lsls	r0, r2, #20
 800e62e:	d522      	bpl.n	800e676 <_scanf_i+0x142>
 800e630:	f10b 0b01 	add.w	fp, fp, #1
 800e634:	f1b9 0f00 	cmp.w	r9, #0
 800e638:	d003      	beq.n	800e642 <_scanf_i+0x10e>
 800e63a:	3301      	adds	r3, #1
 800e63c:	f109 39ff 	add.w	r9, r9, #4294967295
 800e640:	60a3      	str	r3, [r4, #8]
 800e642:	6873      	ldr	r3, [r6, #4]
 800e644:	3b01      	subs	r3, #1
 800e646:	2b00      	cmp	r3, #0
 800e648:	6073      	str	r3, [r6, #4]
 800e64a:	dd1b      	ble.n	800e684 <_scanf_i+0x150>
 800e64c:	6833      	ldr	r3, [r6, #0]
 800e64e:	3301      	adds	r3, #1
 800e650:	6033      	str	r3, [r6, #0]
 800e652:	68a3      	ldr	r3, [r4, #8]
 800e654:	3b01      	subs	r3, #1
 800e656:	60a3      	str	r3, [r4, #8]
 800e658:	e7d9      	b.n	800e60e <_scanf_i+0xda>
 800e65a:	f1bb 0f02 	cmp.w	fp, #2
 800e65e:	d1ae      	bne.n	800e5be <_scanf_i+0x8a>
 800e660:	6822      	ldr	r2, [r4, #0]
 800e662:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e666:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e66a:	d1bf      	bne.n	800e5ec <_scanf_i+0xb8>
 800e66c:	2310      	movs	r3, #16
 800e66e:	6063      	str	r3, [r4, #4]
 800e670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e674:	e7a2      	b.n	800e5bc <_scanf_i+0x88>
 800e676:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e67a:	6022      	str	r2, [r4, #0]
 800e67c:	780b      	ldrb	r3, [r1, #0]
 800e67e:	f805 3b01 	strb.w	r3, [r5], #1
 800e682:	e7de      	b.n	800e642 <_scanf_i+0x10e>
 800e684:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e688:	4631      	mov	r1, r6
 800e68a:	4650      	mov	r0, sl
 800e68c:	4798      	blx	r3
 800e68e:	2800      	cmp	r0, #0
 800e690:	d0df      	beq.n	800e652 <_scanf_i+0x11e>
 800e692:	6823      	ldr	r3, [r4, #0]
 800e694:	05db      	lsls	r3, r3, #23
 800e696:	d50d      	bpl.n	800e6b4 <_scanf_i+0x180>
 800e698:	42bd      	cmp	r5, r7
 800e69a:	d909      	bls.n	800e6b0 <_scanf_i+0x17c>
 800e69c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e6a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e6a4:	4632      	mov	r2, r6
 800e6a6:	4650      	mov	r0, sl
 800e6a8:	4798      	blx	r3
 800e6aa:	f105 39ff 	add.w	r9, r5, #4294967295
 800e6ae:	464d      	mov	r5, r9
 800e6b0:	42bd      	cmp	r5, r7
 800e6b2:	d02d      	beq.n	800e710 <_scanf_i+0x1dc>
 800e6b4:	6822      	ldr	r2, [r4, #0]
 800e6b6:	f012 0210 	ands.w	r2, r2, #16
 800e6ba:	d113      	bne.n	800e6e4 <_scanf_i+0x1b0>
 800e6bc:	702a      	strb	r2, [r5, #0]
 800e6be:	6863      	ldr	r3, [r4, #4]
 800e6c0:	9e01      	ldr	r6, [sp, #4]
 800e6c2:	4639      	mov	r1, r7
 800e6c4:	4650      	mov	r0, sl
 800e6c6:	47b0      	blx	r6
 800e6c8:	6821      	ldr	r1, [r4, #0]
 800e6ca:	f8d8 3000 	ldr.w	r3, [r8]
 800e6ce:	f011 0f20 	tst.w	r1, #32
 800e6d2:	d013      	beq.n	800e6fc <_scanf_i+0x1c8>
 800e6d4:	1d1a      	adds	r2, r3, #4
 800e6d6:	f8c8 2000 	str.w	r2, [r8]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	6018      	str	r0, [r3, #0]
 800e6de:	68e3      	ldr	r3, [r4, #12]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	60e3      	str	r3, [r4, #12]
 800e6e4:	1bed      	subs	r5, r5, r7
 800e6e6:	44ab      	add	fp, r5
 800e6e8:	6925      	ldr	r5, [r4, #16]
 800e6ea:	445d      	add	r5, fp
 800e6ec:	6125      	str	r5, [r4, #16]
 800e6ee:	2000      	movs	r0, #0
 800e6f0:	b007      	add	sp, #28
 800e6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6f6:	f04f 0b00 	mov.w	fp, #0
 800e6fa:	e7ca      	b.n	800e692 <_scanf_i+0x15e>
 800e6fc:	1d1a      	adds	r2, r3, #4
 800e6fe:	f8c8 2000 	str.w	r2, [r8]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f011 0f01 	tst.w	r1, #1
 800e708:	bf14      	ite	ne
 800e70a:	8018      	strhne	r0, [r3, #0]
 800e70c:	6018      	streq	r0, [r3, #0]
 800e70e:	e7e6      	b.n	800e6de <_scanf_i+0x1aa>
 800e710:	2001      	movs	r0, #1
 800e712:	e7ed      	b.n	800e6f0 <_scanf_i+0x1bc>
 800e714:	0800eb78 	.word	0x0800eb78
 800e718:	0800e89d 	.word	0x0800e89d
 800e71c:	0800c399 	.word	0x0800c399
 800e720:	0800f12e 	.word	0x0800f12e

0800e724 <_read_r>:
 800e724:	b538      	push	{r3, r4, r5, lr}
 800e726:	4d07      	ldr	r5, [pc, #28]	; (800e744 <_read_r+0x20>)
 800e728:	4604      	mov	r4, r0
 800e72a:	4608      	mov	r0, r1
 800e72c:	4611      	mov	r1, r2
 800e72e:	2200      	movs	r2, #0
 800e730:	602a      	str	r2, [r5, #0]
 800e732:	461a      	mov	r2, r3
 800e734:	f7f4 fc44 	bl	8002fc0 <_read>
 800e738:	1c43      	adds	r3, r0, #1
 800e73a:	d102      	bne.n	800e742 <_read_r+0x1e>
 800e73c:	682b      	ldr	r3, [r5, #0]
 800e73e:	b103      	cbz	r3, 800e742 <_read_r+0x1e>
 800e740:	6023      	str	r3, [r4, #0]
 800e742:	bd38      	pop	{r3, r4, r5, pc}
 800e744:	20002624 	.word	0x20002624

0800e748 <__sccl>:
 800e748:	b570      	push	{r4, r5, r6, lr}
 800e74a:	780b      	ldrb	r3, [r1, #0]
 800e74c:	4604      	mov	r4, r0
 800e74e:	2b5e      	cmp	r3, #94	; 0x5e
 800e750:	bf0b      	itete	eq
 800e752:	784b      	ldrbeq	r3, [r1, #1]
 800e754:	1c48      	addne	r0, r1, #1
 800e756:	1c88      	addeq	r0, r1, #2
 800e758:	2200      	movne	r2, #0
 800e75a:	bf08      	it	eq
 800e75c:	2201      	moveq	r2, #1
 800e75e:	1e61      	subs	r1, r4, #1
 800e760:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e764:	f801 2f01 	strb.w	r2, [r1, #1]!
 800e768:	42a9      	cmp	r1, r5
 800e76a:	d1fb      	bne.n	800e764 <__sccl+0x1c>
 800e76c:	b90b      	cbnz	r3, 800e772 <__sccl+0x2a>
 800e76e:	3801      	subs	r0, #1
 800e770:	bd70      	pop	{r4, r5, r6, pc}
 800e772:	f082 0201 	eor.w	r2, r2, #1
 800e776:	54e2      	strb	r2, [r4, r3]
 800e778:	4605      	mov	r5, r0
 800e77a:	4628      	mov	r0, r5
 800e77c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800e780:	292d      	cmp	r1, #45	; 0x2d
 800e782:	d006      	beq.n	800e792 <__sccl+0x4a>
 800e784:	295d      	cmp	r1, #93	; 0x5d
 800e786:	d0f3      	beq.n	800e770 <__sccl+0x28>
 800e788:	b909      	cbnz	r1, 800e78e <__sccl+0x46>
 800e78a:	4628      	mov	r0, r5
 800e78c:	e7f0      	b.n	800e770 <__sccl+0x28>
 800e78e:	460b      	mov	r3, r1
 800e790:	e7f1      	b.n	800e776 <__sccl+0x2e>
 800e792:	786e      	ldrb	r6, [r5, #1]
 800e794:	2e5d      	cmp	r6, #93	; 0x5d
 800e796:	d0fa      	beq.n	800e78e <__sccl+0x46>
 800e798:	42b3      	cmp	r3, r6
 800e79a:	dcf8      	bgt.n	800e78e <__sccl+0x46>
 800e79c:	3502      	adds	r5, #2
 800e79e:	4619      	mov	r1, r3
 800e7a0:	3101      	adds	r1, #1
 800e7a2:	428e      	cmp	r6, r1
 800e7a4:	5462      	strb	r2, [r4, r1]
 800e7a6:	dcfb      	bgt.n	800e7a0 <__sccl+0x58>
 800e7a8:	1af1      	subs	r1, r6, r3
 800e7aa:	3901      	subs	r1, #1
 800e7ac:	1c58      	adds	r0, r3, #1
 800e7ae:	42b3      	cmp	r3, r6
 800e7b0:	bfa8      	it	ge
 800e7b2:	2100      	movge	r1, #0
 800e7b4:	1843      	adds	r3, r0, r1
 800e7b6:	e7e0      	b.n	800e77a <__sccl+0x32>

0800e7b8 <_strtoul_l.constprop.0>:
 800e7b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7bc:	4f36      	ldr	r7, [pc, #216]	; (800e898 <_strtoul_l.constprop.0+0xe0>)
 800e7be:	4686      	mov	lr, r0
 800e7c0:	460d      	mov	r5, r1
 800e7c2:	4628      	mov	r0, r5
 800e7c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e7c8:	5de6      	ldrb	r6, [r4, r7]
 800e7ca:	f016 0608 	ands.w	r6, r6, #8
 800e7ce:	d1f8      	bne.n	800e7c2 <_strtoul_l.constprop.0+0xa>
 800e7d0:	2c2d      	cmp	r4, #45	; 0x2d
 800e7d2:	d12f      	bne.n	800e834 <_strtoul_l.constprop.0+0x7c>
 800e7d4:	782c      	ldrb	r4, [r5, #0]
 800e7d6:	2601      	movs	r6, #1
 800e7d8:	1c85      	adds	r5, r0, #2
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d057      	beq.n	800e88e <_strtoul_l.constprop.0+0xd6>
 800e7de:	2b10      	cmp	r3, #16
 800e7e0:	d109      	bne.n	800e7f6 <_strtoul_l.constprop.0+0x3e>
 800e7e2:	2c30      	cmp	r4, #48	; 0x30
 800e7e4:	d107      	bne.n	800e7f6 <_strtoul_l.constprop.0+0x3e>
 800e7e6:	7828      	ldrb	r0, [r5, #0]
 800e7e8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e7ec:	2858      	cmp	r0, #88	; 0x58
 800e7ee:	d149      	bne.n	800e884 <_strtoul_l.constprop.0+0xcc>
 800e7f0:	786c      	ldrb	r4, [r5, #1]
 800e7f2:	2310      	movs	r3, #16
 800e7f4:	3502      	adds	r5, #2
 800e7f6:	f04f 38ff 	mov.w	r8, #4294967295
 800e7fa:	2700      	movs	r7, #0
 800e7fc:	fbb8 f8f3 	udiv	r8, r8, r3
 800e800:	fb03 f908 	mul.w	r9, r3, r8
 800e804:	ea6f 0909 	mvn.w	r9, r9
 800e808:	4638      	mov	r0, r7
 800e80a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e80e:	f1bc 0f09 	cmp.w	ip, #9
 800e812:	d814      	bhi.n	800e83e <_strtoul_l.constprop.0+0x86>
 800e814:	4664      	mov	r4, ip
 800e816:	42a3      	cmp	r3, r4
 800e818:	dd22      	ble.n	800e860 <_strtoul_l.constprop.0+0xa8>
 800e81a:	2f00      	cmp	r7, #0
 800e81c:	db1d      	blt.n	800e85a <_strtoul_l.constprop.0+0xa2>
 800e81e:	4580      	cmp	r8, r0
 800e820:	d31b      	bcc.n	800e85a <_strtoul_l.constprop.0+0xa2>
 800e822:	d101      	bne.n	800e828 <_strtoul_l.constprop.0+0x70>
 800e824:	45a1      	cmp	r9, r4
 800e826:	db18      	blt.n	800e85a <_strtoul_l.constprop.0+0xa2>
 800e828:	fb00 4003 	mla	r0, r0, r3, r4
 800e82c:	2701      	movs	r7, #1
 800e82e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e832:	e7ea      	b.n	800e80a <_strtoul_l.constprop.0+0x52>
 800e834:	2c2b      	cmp	r4, #43	; 0x2b
 800e836:	bf04      	itt	eq
 800e838:	782c      	ldrbeq	r4, [r5, #0]
 800e83a:	1c85      	addeq	r5, r0, #2
 800e83c:	e7cd      	b.n	800e7da <_strtoul_l.constprop.0+0x22>
 800e83e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e842:	f1bc 0f19 	cmp.w	ip, #25
 800e846:	d801      	bhi.n	800e84c <_strtoul_l.constprop.0+0x94>
 800e848:	3c37      	subs	r4, #55	; 0x37
 800e84a:	e7e4      	b.n	800e816 <_strtoul_l.constprop.0+0x5e>
 800e84c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e850:	f1bc 0f19 	cmp.w	ip, #25
 800e854:	d804      	bhi.n	800e860 <_strtoul_l.constprop.0+0xa8>
 800e856:	3c57      	subs	r4, #87	; 0x57
 800e858:	e7dd      	b.n	800e816 <_strtoul_l.constprop.0+0x5e>
 800e85a:	f04f 37ff 	mov.w	r7, #4294967295
 800e85e:	e7e6      	b.n	800e82e <_strtoul_l.constprop.0+0x76>
 800e860:	2f00      	cmp	r7, #0
 800e862:	da07      	bge.n	800e874 <_strtoul_l.constprop.0+0xbc>
 800e864:	2322      	movs	r3, #34	; 0x22
 800e866:	f8ce 3000 	str.w	r3, [lr]
 800e86a:	f04f 30ff 	mov.w	r0, #4294967295
 800e86e:	b932      	cbnz	r2, 800e87e <_strtoul_l.constprop.0+0xc6>
 800e870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e874:	b106      	cbz	r6, 800e878 <_strtoul_l.constprop.0+0xc0>
 800e876:	4240      	negs	r0, r0
 800e878:	2a00      	cmp	r2, #0
 800e87a:	d0f9      	beq.n	800e870 <_strtoul_l.constprop.0+0xb8>
 800e87c:	b107      	cbz	r7, 800e880 <_strtoul_l.constprop.0+0xc8>
 800e87e:	1e69      	subs	r1, r5, #1
 800e880:	6011      	str	r1, [r2, #0]
 800e882:	e7f5      	b.n	800e870 <_strtoul_l.constprop.0+0xb8>
 800e884:	2430      	movs	r4, #48	; 0x30
 800e886:	2b00      	cmp	r3, #0
 800e888:	d1b5      	bne.n	800e7f6 <_strtoul_l.constprop.0+0x3e>
 800e88a:	2308      	movs	r3, #8
 800e88c:	e7b3      	b.n	800e7f6 <_strtoul_l.constprop.0+0x3e>
 800e88e:	2c30      	cmp	r4, #48	; 0x30
 800e890:	d0a9      	beq.n	800e7e6 <_strtoul_l.constprop.0+0x2e>
 800e892:	230a      	movs	r3, #10
 800e894:	e7af      	b.n	800e7f6 <_strtoul_l.constprop.0+0x3e>
 800e896:	bf00      	nop
 800e898:	0800edb7 	.word	0x0800edb7

0800e89c <_strtoul_r>:
 800e89c:	f7ff bf8c 	b.w	800e7b8 <_strtoul_l.constprop.0>

0800e8a0 <__submore>:
 800e8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8a4:	460c      	mov	r4, r1
 800e8a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e8a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8ac:	4299      	cmp	r1, r3
 800e8ae:	d11d      	bne.n	800e8ec <__submore+0x4c>
 800e8b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e8b4:	f7fc feb4 	bl	800b620 <_malloc_r>
 800e8b8:	b918      	cbnz	r0, 800e8c2 <__submore+0x22>
 800e8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e8be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8c6:	63a3      	str	r3, [r4, #56]	; 0x38
 800e8c8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e8cc:	6360      	str	r0, [r4, #52]	; 0x34
 800e8ce:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e8d2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e8d6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800e8da:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e8de:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800e8e2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e8e6:	6020      	str	r0, [r4, #0]
 800e8e8:	2000      	movs	r0, #0
 800e8ea:	e7e8      	b.n	800e8be <__submore+0x1e>
 800e8ec:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e8ee:	0077      	lsls	r7, r6, #1
 800e8f0:	463a      	mov	r2, r7
 800e8f2:	f000 f873 	bl	800e9dc <_realloc_r>
 800e8f6:	4605      	mov	r5, r0
 800e8f8:	2800      	cmp	r0, #0
 800e8fa:	d0de      	beq.n	800e8ba <__submore+0x1a>
 800e8fc:	eb00 0806 	add.w	r8, r0, r6
 800e900:	4601      	mov	r1, r0
 800e902:	4632      	mov	r2, r6
 800e904:	4640      	mov	r0, r8
 800e906:	f7fc fe09 	bl	800b51c <memcpy>
 800e90a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e90e:	f8c4 8000 	str.w	r8, [r4]
 800e912:	e7e9      	b.n	800e8e8 <__submore+0x48>

0800e914 <__assert_func>:
 800e914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e916:	4614      	mov	r4, r2
 800e918:	461a      	mov	r2, r3
 800e91a:	4b09      	ldr	r3, [pc, #36]	; (800e940 <__assert_func+0x2c>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	4605      	mov	r5, r0
 800e920:	68d8      	ldr	r0, [r3, #12]
 800e922:	b14c      	cbz	r4, 800e938 <__assert_func+0x24>
 800e924:	4b07      	ldr	r3, [pc, #28]	; (800e944 <__assert_func+0x30>)
 800e926:	9100      	str	r1, [sp, #0]
 800e928:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e92c:	4906      	ldr	r1, [pc, #24]	; (800e948 <__assert_func+0x34>)
 800e92e:	462b      	mov	r3, r5
 800e930:	f000 f80e 	bl	800e950 <fiprintf>
 800e934:	f7fc fdac 	bl	800b490 <abort>
 800e938:	4b04      	ldr	r3, [pc, #16]	; (800e94c <__assert_func+0x38>)
 800e93a:	461c      	mov	r4, r3
 800e93c:	e7f3      	b.n	800e926 <__assert_func+0x12>
 800e93e:	bf00      	nop
 800e940:	20000034 	.word	0x20000034
 800e944:	0800f130 	.word	0x0800f130
 800e948:	0800f13d 	.word	0x0800f13d
 800e94c:	0800f16b 	.word	0x0800f16b

0800e950 <fiprintf>:
 800e950:	b40e      	push	{r1, r2, r3}
 800e952:	b503      	push	{r0, r1, lr}
 800e954:	4601      	mov	r1, r0
 800e956:	ab03      	add	r3, sp, #12
 800e958:	4805      	ldr	r0, [pc, #20]	; (800e970 <fiprintf+0x20>)
 800e95a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e95e:	6800      	ldr	r0, [r0, #0]
 800e960:	9301      	str	r3, [sp, #4]
 800e962:	f7ff fc5d 	bl	800e220 <_vfiprintf_r>
 800e966:	b002      	add	sp, #8
 800e968:	f85d eb04 	ldr.w	lr, [sp], #4
 800e96c:	b003      	add	sp, #12
 800e96e:	4770      	bx	lr
 800e970:	20000034 	.word	0x20000034

0800e974 <_fstat_r>:
 800e974:	b538      	push	{r3, r4, r5, lr}
 800e976:	4d07      	ldr	r5, [pc, #28]	; (800e994 <_fstat_r+0x20>)
 800e978:	2300      	movs	r3, #0
 800e97a:	4604      	mov	r4, r0
 800e97c:	4608      	mov	r0, r1
 800e97e:	4611      	mov	r1, r2
 800e980:	602b      	str	r3, [r5, #0]
 800e982:	f7f4 fb46 	bl	8003012 <_fstat>
 800e986:	1c43      	adds	r3, r0, #1
 800e988:	d102      	bne.n	800e990 <_fstat_r+0x1c>
 800e98a:	682b      	ldr	r3, [r5, #0]
 800e98c:	b103      	cbz	r3, 800e990 <_fstat_r+0x1c>
 800e98e:	6023      	str	r3, [r4, #0]
 800e990:	bd38      	pop	{r3, r4, r5, pc}
 800e992:	bf00      	nop
 800e994:	20002624 	.word	0x20002624

0800e998 <_isatty_r>:
 800e998:	b538      	push	{r3, r4, r5, lr}
 800e99a:	4d06      	ldr	r5, [pc, #24]	; (800e9b4 <_isatty_r+0x1c>)
 800e99c:	2300      	movs	r3, #0
 800e99e:	4604      	mov	r4, r0
 800e9a0:	4608      	mov	r0, r1
 800e9a2:	602b      	str	r3, [r5, #0]
 800e9a4:	f7f4 fb45 	bl	8003032 <_isatty>
 800e9a8:	1c43      	adds	r3, r0, #1
 800e9aa:	d102      	bne.n	800e9b2 <_isatty_r+0x1a>
 800e9ac:	682b      	ldr	r3, [r5, #0]
 800e9ae:	b103      	cbz	r3, 800e9b2 <_isatty_r+0x1a>
 800e9b0:	6023      	str	r3, [r4, #0]
 800e9b2:	bd38      	pop	{r3, r4, r5, pc}
 800e9b4:	20002624 	.word	0x20002624

0800e9b8 <__ascii_mbtowc>:
 800e9b8:	b082      	sub	sp, #8
 800e9ba:	b901      	cbnz	r1, 800e9be <__ascii_mbtowc+0x6>
 800e9bc:	a901      	add	r1, sp, #4
 800e9be:	b142      	cbz	r2, 800e9d2 <__ascii_mbtowc+0x1a>
 800e9c0:	b14b      	cbz	r3, 800e9d6 <__ascii_mbtowc+0x1e>
 800e9c2:	7813      	ldrb	r3, [r2, #0]
 800e9c4:	600b      	str	r3, [r1, #0]
 800e9c6:	7812      	ldrb	r2, [r2, #0]
 800e9c8:	1e10      	subs	r0, r2, #0
 800e9ca:	bf18      	it	ne
 800e9cc:	2001      	movne	r0, #1
 800e9ce:	b002      	add	sp, #8
 800e9d0:	4770      	bx	lr
 800e9d2:	4610      	mov	r0, r2
 800e9d4:	e7fb      	b.n	800e9ce <__ascii_mbtowc+0x16>
 800e9d6:	f06f 0001 	mvn.w	r0, #1
 800e9da:	e7f8      	b.n	800e9ce <__ascii_mbtowc+0x16>

0800e9dc <_realloc_r>:
 800e9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9e0:	4680      	mov	r8, r0
 800e9e2:	4614      	mov	r4, r2
 800e9e4:	460e      	mov	r6, r1
 800e9e6:	b921      	cbnz	r1, 800e9f2 <_realloc_r+0x16>
 800e9e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ec:	4611      	mov	r1, r2
 800e9ee:	f7fc be17 	b.w	800b620 <_malloc_r>
 800e9f2:	b92a      	cbnz	r2, 800ea00 <_realloc_r+0x24>
 800e9f4:	f7fc fda8 	bl	800b548 <_free_r>
 800e9f8:	4625      	mov	r5, r4
 800e9fa:	4628      	mov	r0, r5
 800e9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea00:	f000 f828 	bl	800ea54 <_malloc_usable_size_r>
 800ea04:	4284      	cmp	r4, r0
 800ea06:	4607      	mov	r7, r0
 800ea08:	d802      	bhi.n	800ea10 <_realloc_r+0x34>
 800ea0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea0e:	d812      	bhi.n	800ea36 <_realloc_r+0x5a>
 800ea10:	4621      	mov	r1, r4
 800ea12:	4640      	mov	r0, r8
 800ea14:	f7fc fe04 	bl	800b620 <_malloc_r>
 800ea18:	4605      	mov	r5, r0
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	d0ed      	beq.n	800e9fa <_realloc_r+0x1e>
 800ea1e:	42bc      	cmp	r4, r7
 800ea20:	4622      	mov	r2, r4
 800ea22:	4631      	mov	r1, r6
 800ea24:	bf28      	it	cs
 800ea26:	463a      	movcs	r2, r7
 800ea28:	f7fc fd78 	bl	800b51c <memcpy>
 800ea2c:	4631      	mov	r1, r6
 800ea2e:	4640      	mov	r0, r8
 800ea30:	f7fc fd8a 	bl	800b548 <_free_r>
 800ea34:	e7e1      	b.n	800e9fa <_realloc_r+0x1e>
 800ea36:	4635      	mov	r5, r6
 800ea38:	e7df      	b.n	800e9fa <_realloc_r+0x1e>

0800ea3a <__ascii_wctomb>:
 800ea3a:	b149      	cbz	r1, 800ea50 <__ascii_wctomb+0x16>
 800ea3c:	2aff      	cmp	r2, #255	; 0xff
 800ea3e:	bf85      	ittet	hi
 800ea40:	238a      	movhi	r3, #138	; 0x8a
 800ea42:	6003      	strhi	r3, [r0, #0]
 800ea44:	700a      	strbls	r2, [r1, #0]
 800ea46:	f04f 30ff 	movhi.w	r0, #4294967295
 800ea4a:	bf98      	it	ls
 800ea4c:	2001      	movls	r0, #1
 800ea4e:	4770      	bx	lr
 800ea50:	4608      	mov	r0, r1
 800ea52:	4770      	bx	lr

0800ea54 <_malloc_usable_size_r>:
 800ea54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea58:	1f18      	subs	r0, r3, #4
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	bfbc      	itt	lt
 800ea5e:	580b      	ldrlt	r3, [r1, r0]
 800ea60:	18c0      	addlt	r0, r0, r3
 800ea62:	4770      	bx	lr

0800ea64 <_init>:
 800ea64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea66:	bf00      	nop
 800ea68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea6a:	bc08      	pop	{r3}
 800ea6c:	469e      	mov	lr, r3
 800ea6e:	4770      	bx	lr

0800ea70 <_fini>:
 800ea70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea72:	bf00      	nop
 800ea74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea76:	bc08      	pop	{r3}
 800ea78:	469e      	mov	lr, r3
 800ea7a:	4770      	bx	lr
