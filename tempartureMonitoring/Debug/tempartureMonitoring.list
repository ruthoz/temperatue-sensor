
tempartureMonitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a170  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0800a300  0800a300  0001a300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a678  0800a678  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a678  0800a678  0001a678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a680  0800a680  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800a680  0800a680  0001a680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0800a68c  0800a68c  0001a68c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bd0  20000078  0800a710  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c48  0800a710  00021c48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023b0c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052f6  00000000  00000000  00043bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d68  00000000  00000000  00048eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b90  00000000  00000000  0004ac18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c873  00000000  00000000  0004c7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000230c9  00000000  00000000  0007901b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001041e8  00000000  00000000  0009c0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a02cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089cc  00000000  00000000  001a031c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a2e8 	.word	0x0800a2e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800a2e8 	.word	0x0800a2e8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <_ZN9TimerTaskC1Ev>:
#define INC_TIMERTASK_H_

class TimerTask {

public:
	TimerTask(){}
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <_ZN9TimerTaskC1Ev+0x1c>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4618      	mov	r0, r3
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	0800a3c8 	.word	0x0800a3c8

080005c4 <_ZN9TimerTaskD1Ev>:

	virtual void timerFunc() = 0;
	virtual ~TimerTask(){}
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <_ZN9TimerTaskD1Ev+0x1c>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4618      	mov	r0, r3
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	0800a3c8 	.word	0x0800a3c8

080005e4 <_ZN9TimerTaskD0Ev>:
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff ffe9 	bl	80005c4 <_ZN9TimerTaskD1Ev>
 80005f2:	2104      	movs	r1, #4
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f008 f8a9 	bl	800874c <_ZdlPvj>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <_ZN9MainTimer17getTimerTaskIndexEP9TimerTask>:
class MainTimer {
private:
	TimerTask* _timerTasks[MAX_TIMER_TASKS];
	int _timerCount;

	int getTimerTaskIndex(TimerTask *pTimerTask) {
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
		for (int i = 0; i < _timerCount; i++) {
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	429a      	cmp	r2, r3
 800061a:	da0c      	bge.n	8000636 <_ZN9MainTimer17getTimerTaskIndexEP9TimerTask+0x32>
			if (_timerTasks[i] == pTimerTask) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000624:	683a      	ldr	r2, [r7, #0]
 8000626:	429a      	cmp	r2, r3
 8000628:	d101      	bne.n	800062e <_ZN9MainTimer17getTimerTaskIndexEP9TimerTask+0x2a>
				return i;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	e005      	b.n	800063a <_ZN9MainTimer17getTimerTaskIndexEP9TimerTask+0x36>
		for (int i = 0; i < _timerCount; i++) {
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3301      	adds	r3, #1
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	e7ed      	b.n	8000612 <_ZN9MainTimer17getTimerTaskIndexEP9TimerTask+0xe>
			}

		}
		return -1;
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
	}
 800063a:	4618      	mov	r0, r3
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <_ZN9MainTimer12addTimerTaskEP9TimerTask>:
public:
	MainTimer() {
		_timerCount = 0;
	}
	~MainTimer() {}
	void addTimerTask(TimerTask *pTimerTask) {
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
 800064e:	6039      	str	r1, [r7, #0]
		if (getTimerTaskIndex(pTimerTask) == -1) {
 8000650:	6839      	ldr	r1, [r7, #0]
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f7ff ffd6 	bl	8000604 <_ZN9MainTimer17getTimerTaskIndexEP9TimerTask>
 8000658:	4603      	mov	r3, r0
 800065a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800065e:	bf0c      	ite	eq
 8000660:	2301      	moveq	r3, #1
 8000662:	2300      	movne	r3, #0
 8000664:	b2db      	uxtb	r3, r3
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00a      	beq.n	8000680 <_ZN9MainTimer12addTimerTaskEP9TimerTask+0x3a>
			_timerTasks[_timerCount] = pTimerTask;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6839      	ldr	r1, [r7, #0]
 8000672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			_timerCount++;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	629a      	str	r2, [r3, #40]	; 0x28
		}
	}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <_ZN9MainTimer15deleteTimerTaskEP9TimerTask>:

	void deleteTimerTask(TimerTask *pTimerTask) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
		int i = getTimerTaskIndex(pTimerTask);
 8000692:	6839      	ldr	r1, [r7, #0]
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f7ff ffb5 	bl	8000604 <_ZN9MainTimer17getTimerTaskIndexEP9TimerTask>
 800069a:	60f8      	str	r0, [r7, #12]
		if (i != -1) {
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a2:	d01e      	beq.n	80006e2 <_ZN9MainTimer15deleteTimerTaskEP9TimerTask+0x5a>
			_timerCount--;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006a8:	1e5a      	subs	r2, r3, #1
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	629a      	str	r2, [r3, #40]	; 0x28
			if (i == _timerCount) {
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d105      	bne.n	80006c4 <_ZN9MainTimer15deleteTimerTaskEP9TimerTask+0x3c>
				_timerTasks[i] = { 0 };
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	2100      	movs	r1, #0
 80006be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				_timerTasks[i] = _timerTasks[_timerCount];
				_timerTasks[_timerCount] = { 0 };
			}
		}

	}
 80006c2:	e00e      	b.n	80006e2 <_ZN9MainTimer15deleteTimerTaskEP9TimerTask+0x5a>
				_timerTasks[i] = _timerTasks[_timerCount];
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				_timerTasks[_timerCount] = { 0 };
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2100      	movs	r1, #0
 80006de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <_ZN6ButtonC1EP12GPIO_TypeDeft>:
#include "main.h"

extern MainTimer mainTimer;


Button::Button(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	4613      	mov	r3, r2
 80006f8:	80fb      	strh	r3, [r7, #6]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff51 	bl	80005a4 <_ZN9TimerTaskC1Ev>
 8000702:	4a08      	ldr	r2, [pc, #32]	; (8000724 <_ZN6ButtonC1EP12GPIO_TypeDeft+0x38>)
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	601a      	str	r2, [r3, #0]
{
	_GPIOx = GPIOx;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	611a      	str	r2, [r3, #16]
	_GPIO_Pin = GPIO_Pin;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	88fa      	ldrh	r2, [r7, #6]
 8000712:	829a      	strh	r2, [r3, #20]
	_counter = 0;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
}
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	4618      	mov	r0, r3
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	0800a3b4 	.word	0x0800a3b4

08000728 <_ZN6Button9interruptEv>:

void Button::interrupt()
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	uint32_t delayTick = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]

	if(HAL_GPIO_ReadPin(_GPIOx, _GPIO_Pin) == 0){
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	691a      	ldr	r2, [r3, #16]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	8a9b      	ldrh	r3, [r3, #20]
 800073c:	4619      	mov	r1, r3
 800073e:	4610      	mov	r0, r2
 8000740:	f001 fcec 	bl	800211c <HAL_GPIO_ReadPin>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	bf0c      	ite	eq
 800074a:	2301      	moveq	r3, #1
 800074c:	2300      	movne	r3, #0
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d005      	beq.n	8000760 <_ZN6Button9interruptEv+0x38>
		timeTickOn = HAL_GetTick();
 8000754:	f001 f99c 	bl	8001a90 <HAL_GetTick>
 8000758:	4602      	mov	r2, r0
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	609a      	str	r2, [r3, #8]
		else{
			state = BUTTON_STATE;
			mainTimer.addTimerTask(this);
		}
	}
}
 800075e:	e040      	b.n	80007e2 <_ZN6Button9interruptEv+0xba>
	else if(HAL_GPIO_ReadPin(_GPIOx, _GPIO_Pin) == 1){
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	691a      	ldr	r2, [r3, #16]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	8a9b      	ldrh	r3, [r3, #20]
 8000768:	4619      	mov	r1, r3
 800076a:	4610      	mov	r0, r2
 800076c:	f001 fcd6 	bl	800211c <HAL_GPIO_ReadPin>
 8000770:	4603      	mov	r3, r0
 8000772:	2b01      	cmp	r3, #1
 8000774:	bf0c      	ite	eq
 8000776:	2301      	moveq	r3, #1
 8000778:	2300      	movne	r3, #0
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d030      	beq.n	80007e2 <_ZN6Button9interruptEv+0xba>
		timeTickOff = HAL_GetTick();
 8000780:	f001 f986 	bl	8001a90 <HAL_GetTick>
 8000784:	4602      	mov	r2, r0
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	60da      	str	r2, [r3, #12]
		delayTick = timeTickOff - timeTickOn;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68da      	ldr	r2, [r3, #12]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	60fb      	str	r3, [r7, #12]
		if(delayTick > 500){
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800079c:	d906      	bls.n	80007ac <_ZN6Button9interruptEv+0x84>
			state = BUTTON_LONG_PRESS;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2203      	movs	r2, #3
 80007a2:	711a      	strb	r2, [r3, #4]
		        printf("Long \n\r");
 80007a4:	4811      	ldr	r0, [pc, #68]	; (80007ec <_ZN6Button9interruptEv+0xc4>)
 80007a6:	f008 f93b 	bl	8008a20 <iprintf>
}
 80007aa:	e01a      	b.n	80007e2 <_ZN6Button9interruptEv+0xba>
		else if (state == BUTTON_STATE) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	791b      	ldrb	r3, [r3, #4]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d10e      	bne.n	80007d2 <_ZN6Button9interruptEv+0xaa>
			state = BUTTON_DOUBLE_PRESS;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2204      	movs	r2, #4
 80007b8:	711a      	strb	r2, [r3, #4]
			_counter = 0;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
			printf("Double \n\r");
 80007c0:	480b      	ldr	r0, [pc, #44]	; (80007f0 <_ZN6Button9interruptEv+0xc8>)
 80007c2:	f008 f92d 	bl	8008a20 <iprintf>
			mainTimer.deleteTimerTask(this);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4619      	mov	r1, r3
 80007ca:	480a      	ldr	r0, [pc, #40]	; (80007f4 <_ZN6Button9interruptEv+0xcc>)
 80007cc:	f7ff ff5c 	bl	8000688 <_ZN9MainTimer15deleteTimerTaskEP9TimerTask>
}
 80007d0:	e007      	b.n	80007e2 <_ZN6Button9interruptEv+0xba>
			state = BUTTON_STATE;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2201      	movs	r2, #1
 80007d6:	711a      	strb	r2, [r3, #4]
			mainTimer.addTimerTask(this);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4619      	mov	r1, r3
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <_ZN6Button9interruptEv+0xcc>)
 80007de:	f7ff ff32 	bl	8000646 <_ZN9MainTimer12addTimerTaskEP9TimerTask>
}
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	0800a300 	.word	0x0800a300
 80007f0:	0800a308 	.word	0x0800a308
 80007f4:	2000017c 	.word	0x2000017c

080007f8 <_ZN6Button9timerFuncEv>:
void Button:: timerFunc()
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	if (state == BUTTON_STATE) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	791b      	ldrb	r3, [r3, #4]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d116      	bne.n	8000836 <_ZN6Button9timerFuncEv+0x3e>
		_counter++;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	619a      	str	r2, [r3, #24]
		if(_counter > 200 ){
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	2bc8      	cmp	r3, #200	; 0xc8
 8000818:	d90d      	bls.n	8000836 <_ZN6Button9timerFuncEv+0x3e>
			state = BUTTON_STATE_PRESS;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2202      	movs	r2, #2
 800081e:	711a      	strb	r2, [r3, #4]
			_counter = 0;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
			printf("One \n\r");
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <_ZN6Button9timerFuncEv+0x48>)
 8000828:	f008 f8fa 	bl	8008a20 <iprintf>
			mainTimer.deleteTimerTask(this);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4619      	mov	r1, r3
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <_ZN6Button9timerFuncEv+0x4c>)
 8000832:	f7ff ff29 	bl	8000688 <_ZN9MainTimer15deleteTimerTaskEP9TimerTask>
		}
	}
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	0800a314 	.word	0x0800a314
 8000844:	2000017c 	.word	0x2000017c

08000848 <_ZN6ButtonD1Ev>:
	BUTTON_STATE_PRESS,
	BUTTON_LONG_PRESS,
	BUTTON_DOUBLE_PRESS,
}StateButton;

class Button : public TimerTask {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	4a05      	ldr	r2, [pc, #20]	; (8000868 <_ZN6ButtonD1Ev+0x20>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff feb3 	bl	80005c4 <_ZN9TimerTaskD1Ev>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	0800a3b4 	.word	0x0800a3b4

0800086c <_ZN6ButtonD0Ev>:
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff ffe7 	bl	8000848 <_ZN6ButtonD1Ev>
 800087a:	211c      	movs	r1, #28
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f007 ff65 	bl	800874c <_ZdlPvj>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <_ZN10CliCommandC1EPKc>:
class CliCommand {
private:
	char _name[MAX_NAME_LEN];
public:
	CliCommand(){}
	CliCommand(const char* name){
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <_ZN10CliCommandC1EPKc+0x28>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	601a      	str	r2, [r3, #0]
		strcpy(_name, name);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3304      	adds	r3, #4
 80008a0:	6839      	ldr	r1, [r7, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f008 fa0f 	bl	8008cc6 <strcpy>
	}
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	0800a404 	.word	0x0800a404

080008b8 <_ZN10CliCommandD1Ev>:
	virtual void doCommand() = 0;
	virtual ~CliCommand(){}
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <_ZN10CliCommandD1Ev+0x1c>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4618      	mov	r0, r3
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	0800a404 	.word	0x0800a404

080008d8 <_ZN10CliCommandD0Ev>:
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff ffe9 	bl	80008b8 <_ZN10CliCommandD1Ev>
 80008e6:	2118      	movs	r1, #24
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f007 ff2f 	bl	800874c <_ZdlPvj>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <_ZN8LedOnCmdC1EPKcP3Led>:
extern CliContainer CliContainer;

class LedOnCmd : public CliCommand {
	Led *_led;
public:
	LedOnCmd (const char * name, Led * led) : CliCommand(name), _led(led) {}
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	68b9      	ldr	r1, [r7, #8]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ffbf 	bl	800088c <_ZN10CliCommandC1EPKc>
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <_ZN8LedOnCmdC1EPKcP3Led+0x2c>)
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	619a      	str	r2, [r3, #24]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	4618      	mov	r0, r3
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	0800a3f0 	.word	0x0800a3f0

08000928 <_ZN8LedOnCmd9doCommandEv>:
	void doCommand() override {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
		_led->on();
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4618      	mov	r0, r3
 8000936:	f000 fa5d 	bl	8000df4 <_ZN3Led2onEv>
	}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <_ZN9LedOffCmdC1EPKcP3Led>:
};

class LedOffCmd : public CliCommand {
	Led *_led;
public:
	LedOffCmd (const char * name, Led * led) : CliCommand(name), _led(led) {}
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	68b9      	ldr	r1, [r7, #8]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff99 	bl	800088c <_ZN10CliCommandC1EPKc>
 800095a:	4a05      	ldr	r2, [pc, #20]	; (8000970 <_ZN9LedOffCmdC1EPKcP3Led+0x2c>)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	619a      	str	r2, [r3, #24]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	4618      	mov	r0, r3
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	0800a3dc 	.word	0x0800a3dc

08000974 <_ZN9LedOffCmd9doCommandEv>:
	void doCommand() override {
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
		_led->off();
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4618      	mov	r0, r3
 8000982:	f000 fa4a 	bl	8000e1a <_ZN3Led3offEv>
	}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <_Z7CliInitv>:
	}
};


void CliInit()
{
 8000990:	b598      	push	{r3, r4, r7, lr}
 8000992:	af00      	add	r7, sp, #0
	//////////////////ledB//////////////////////////////
	CliContainer.add (new LedOnCmd("ledBlueOn", &ledB));
 8000994:	201c      	movs	r0, #28
 8000996:	f007 fedb 	bl	8008750 <_Znwj>
 800099a:	4603      	mov	r3, r0
 800099c:	461c      	mov	r4, r3
 800099e:	4a13      	ldr	r2, [pc, #76]	; (80009ec <_Z7CliInitv+0x5c>)
 80009a0:	4913      	ldr	r1, [pc, #76]	; (80009f0 <_Z7CliInitv+0x60>)
 80009a2:	4620      	mov	r0, r4
 80009a4:	f7ff ffa8 	bl	80008f8 <_ZN8LedOnCmdC1EPKcP3Led>
 80009a8:	4621      	mov	r1, r4
 80009aa:	4812      	ldr	r0, [pc, #72]	; (80009f4 <_Z7CliInitv+0x64>)
 80009ac:	f000 f8ad 	bl	8000b0a <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new LedOffCmd("ledBlueOff", &ledB));
 80009b0:	201c      	movs	r0, #28
 80009b2:	f007 fecd 	bl	8008750 <_Znwj>
 80009b6:	4603      	mov	r3, r0
 80009b8:	461c      	mov	r4, r3
 80009ba:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <_Z7CliInitv+0x5c>)
 80009bc:	490e      	ldr	r1, [pc, #56]	; (80009f8 <_Z7CliInitv+0x68>)
 80009be:	4620      	mov	r0, r4
 80009c0:	f7ff ffc0 	bl	8000944 <_ZN9LedOffCmdC1EPKcP3Led>
 80009c4:	4621      	mov	r1, r4
 80009c6:	480b      	ldr	r0, [pc, #44]	; (80009f4 <_Z7CliInitv+0x64>)
 80009c8:	f000 f89f 	bl	8000b0a <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new LedOffCmd("ledBlueBlink", &ledB));
 80009cc:	201c      	movs	r0, #28
 80009ce:	f007 febf 	bl	8008750 <_Znwj>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461c      	mov	r4, r3
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <_Z7CliInitv+0x5c>)
 80009d8:	4908      	ldr	r1, [pc, #32]	; (80009fc <_Z7CliInitv+0x6c>)
 80009da:	4620      	mov	r0, r4
 80009dc:	f7ff ffb2 	bl	8000944 <_ZN9LedOffCmdC1EPKcP3Led>
 80009e0:	4621      	mov	r1, r4
 80009e2:	4804      	ldr	r0, [pc, #16]	; (80009f4 <_Z7CliInitv+0x64>)
 80009e4:	f000 f891 	bl	8000b0a <_ZN12CliContainer3addEP10CliCommand>
}
 80009e8:	bf00      	nop
 80009ea:	bd98      	pop	{r3, r4, r7, pc}
 80009ec:	20000100 	.word	0x20000100
 80009f0:	0800a31c 	.word	0x0800a31c
 80009f4:	20000128 	.word	0x20000128
 80009f8:	0800a328 	.word	0x0800a328
 80009fc:	0800a334 	.word	0x0800a334

08000a00 <_ZN9LedOffCmdD1Ev>:
class LedOffCmd : public CliCommand {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <_ZN9LedOffCmdD1Ev+0x20>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff51 	bl	80008b8 <_ZN10CliCommandD1Ev>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	0800a3dc 	.word	0x0800a3dc

08000a24 <_ZN9LedOffCmdD0Ev>:
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff ffe7 	bl	8000a00 <_ZN9LedOffCmdD1Ev>
 8000a32:	211c      	movs	r1, #28
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f007 fe89 	bl	800874c <_ZdlPvj>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_ZN8LedOnCmdD1Ev>:
class LedOnCmd : public CliCommand {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <_ZN8LedOnCmdD1Ev+0x20>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ff2f 	bl	80008b8 <_ZN10CliCommandD1Ev>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	0800a3f0 	.word	0x0800a3f0

08000a68 <_ZN8LedOnCmdD0Ev>:
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ffe7 	bl	8000a44 <_ZN8LedOnCmdD1Ev>
 8000a76:	211c      	movs	r1, #28
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f007 fe67 	bl	800874c <_ZdlPvj>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_ZNK10CliCommand7getNameEv>:
	const char* getName ()const {
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
		return _name;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3304      	adds	r3, #4
	}
 8000a94:	4618      	mov	r0, r3
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <_ZN12CliContainerC1Ev>:
#include "Communication.h"
#include <stdlib.h>



CliContainer::CliContainer()
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
{
	m_counter = 0;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	651a      	str	r2, [r3, #80]	; 0x50
	memset(m_CliCommand, 0, sizeof(CliCommand*) * MAX_CLI);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2250      	movs	r2, #80	; 0x50
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f007 fecb 	bl	8008850 <memset>
}
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <_ZN12CliContainerD1Ev>:

CliContainer::~CliContainer()
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
{
	for (int i = 0; i < MAX_CLI; i++) {
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2b13      	cmp	r3, #19
 8000ad4:	dc14      	bgt.n	8000b00 <_ZN12CliContainerD1Ev+0x3c>
		if (m_CliCommand[i] != NULL) {
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d00a      	beq.n	8000af8 <_ZN12CliContainerD1Ev+0x34>
			delete m_CliCommand[i];
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d004      	beq.n	8000af8 <_ZN12CliContainerD1Ev+0x34>
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	3208      	adds	r2, #8
 8000af2:	6812      	ldr	r2, [r2, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	4790      	blx	r2
	for (int i = 0; i < MAX_CLI; i++) {
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	3301      	adds	r3, #1
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	e7e7      	b.n	8000ad0 <_ZN12CliContainerD1Ev+0xc>
		}
	}
}
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4618      	mov	r0, r3
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <_ZN12CliContainer3addEP10CliCommand>:

void CliContainer::add(CliCommand* pCliCommand)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]
	if (m_counter < MAX_CLI) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b18:	2b13      	cmp	r3, #19
 8000b1a:	dc0a      	bgt.n	8000b32 <_ZN12CliContainer3addEP10CliCommand+0x28>
		m_CliCommand[m_counter] = pCliCommand;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6839      	ldr	r1, [r7, #0]
 8000b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		m_counter++;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b2c:	1c5a      	adds	r2, r3, #1
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	651a      	str	r2, [r3, #80]	; 0x50
	}
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_ZN12CliContainer4CallEPc>:

int CliContainer::Call (char* cmdname){
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b084      	sub	sp, #16
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < m_counter; i++){
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	da25      	bge.n	8000ba2 <_ZN12CliContainer4CallEPc+0x64>
		if(strcmp(cmdname, m_CliCommand[i]->getName())==0){
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff92 	bl	8000a88 <_ZNK10CliCommand7getNameEv>
 8000b64:	4603      	mov	r3, r0
 8000b66:	4619      	mov	r1, r3
 8000b68:	6838      	ldr	r0, [r7, #0]
 8000b6a:	f7ff fb31 	bl	80001d0 <strcmp>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	bf0c      	ite	eq
 8000b74:	2301      	moveq	r3, #1
 8000b76:	2300      	movne	r3, #0
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d00d      	beq.n	8000b9a <_ZN12CliContainer4CallEPc+0x5c>
			m_CliCommand[i]->doCommand();
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4608      	mov	r0, r1
 8000b94:	4798      	blx	r3
			return 1;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e004      	b.n	8000ba4 <_ZN12CliContainer4CallEPc+0x66>
	for (int i = 0; i < m_counter; i++){
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	e7d4      	b.n	8000b4c <_ZN12CliContainer4CallEPc+0xe>
		}
	}
	return 0;
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_write>:
static int cmdprint = 0;


//////////////////////////////////////////////////////////////
extern "C" int _write(int fd, char* ptr, int len)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <_write+0x28>)
 8000bc4:	f003 fec0 	bl	8004948 <HAL_UART_Transmit>
	return len;
 8000bc8:	687b      	ldr	r3, [r7, #4]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000294 	.word	0x20000294

08000bd8 <_Z22Communication_commTaskv>:




int Communication_commTask()
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8000bde:	1db9      	adds	r1, r7, #6
 8000be0:	230a      	movs	r3, #10
 8000be2:	2201      	movs	r2, #1
 8000be4:	4839      	ldr	r0, [pc, #228]	; (8000ccc <_Z22Communication_commTaskv+0xf4>)
 8000be6:	f003 ff43 	bl	8004a70 <HAL_UART_Receive>
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d025      	beq.n	8000c40 <_Z22Communication_commTaskv+0x68>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 8000bf4:	4b35      	ldr	r3, [pc, #212]	; (8000ccc <_Z22Communication_commTaskv+0xf4>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	f003 0308 	and.w	r3, r3, #8
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	bf14      	ite	ne
 8000c02:	2301      	movne	r3, #1
 8000c04:	2300      	moveq	r3, #0
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d003      	beq.n	8000c14 <_Z22Communication_commTaskv+0x3c>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000c0c:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <_Z22Communication_commTaskv+0xf4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2208      	movs	r2, #8
 8000c12:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 8000c14:	4b2e      	ldr	r3, [pc, #184]	; (8000cd0 <_Z22Communication_commTaskv+0xf8>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <_Z22Communication_commTaskv+0xfc>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	da0d      	bge.n	8000c3c <_Z22Communication_commTaskv+0x64>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000c20:	4b2b      	ldr	r3, [pc, #172]	; (8000cd0 <_Z22Communication_commTaskv+0xf8>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	1c5a      	adds	r2, r3, #1
 8000c26:	492a      	ldr	r1, [pc, #168]	; (8000cd0 <_Z22Communication_commTaskv+0xf8>)
 8000c28:	600a      	str	r2, [r1, #0]
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <_Z22Communication_commTaskv+0x100>)
 8000c2c:	1899      	adds	r1, r3, r2
 8000c2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c32:	2201      	movs	r2, #1
 8000c34:	4825      	ldr	r0, [pc, #148]	; (8000ccc <_Z22Communication_commTaskv+0xf4>)
 8000c36:	f003 fe87 	bl	8004948 <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 8000c3a:	e7eb      	b.n	8000c14 <_Z22Communication_commTaskv+0x3c>
		}

		return 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e040      	b.n	8000cc2 <_Z22Communication_commTaskv+0xea>
	}

	if (ch != '\r' && ch != '\n')
 8000c40:	79bb      	ldrb	r3, [r7, #6]
 8000c42:	2b0d      	cmp	r3, #13
 8000c44:	d016      	beq.n	8000c74 <_Z22Communication_commTaskv+0x9c>
 8000c46:	79bb      	ldrb	r3, [r7, #6]
 8000c48:	2b0a      	cmp	r3, #10
 8000c4a:	d013      	beq.n	8000c74 <_Z22Communication_commTaskv+0x9c>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 8000c4c:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <_Z22Communication_commTaskv+0xfc>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b63      	cmp	r3, #99	; 0x63
 8000c52:	dd05      	ble.n	8000c60 <_Z22Communication_commTaskv+0x88>
		{
			cmdcount = 0;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <_Z22Communication_commTaskv+0xfc>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <_Z22Communication_commTaskv+0xf8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8000c60:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <_Z22Communication_commTaskv+0xfc>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	1c5a      	adds	r2, r3, #1
 8000c66:	491b      	ldr	r1, [pc, #108]	; (8000cd4 <_Z22Communication_commTaskv+0xfc>)
 8000c68:	600a      	str	r2, [r1, #0]
 8000c6a:	79b9      	ldrb	r1, [r7, #6]
 8000c6c:	4a1a      	ldr	r2, [pc, #104]	; (8000cd8 <_Z22Communication_commTaskv+0x100>)
 8000c6e:	54d1      	strb	r1, [r2, r3]
		return 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	e026      	b.n	8000cc2 <_Z22Communication_commTaskv+0xea>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount)
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <_Z22Communication_commTaskv+0xf8>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <_Z22Communication_commTaskv+0xfc>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	da0d      	bge.n	8000c9c <_Z22Communication_commTaskv+0xc4>
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <_Z22Communication_commTaskv+0xf8>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	1c5a      	adds	r2, r3, #1
 8000c86:	4912      	ldr	r1, [pc, #72]	; (8000cd0 <_Z22Communication_commTaskv+0xf8>)
 8000c88:	600a      	str	r2, [r1, #0]
 8000c8a:	4a13      	ldr	r2, [pc, #76]	; (8000cd8 <_Z22Communication_commTaskv+0x100>)
 8000c8c:	1899      	adds	r1, r3, r2
 8000c8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c92:	2201      	movs	r2, #1
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <_Z22Communication_commTaskv+0xf4>)
 8000c96:	f003 fe57 	bl	8004948 <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 8000c9a:	e7eb      	b.n	8000c74 <_Z22Communication_commTaskv+0x9c>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000c9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	490e      	ldr	r1, [pc, #56]	; (8000cdc <_Z22Communication_commTaskv+0x104>)
 8000ca4:	4809      	ldr	r0, [pc, #36]	; (8000ccc <_Z22Communication_commTaskv+0xf4>)
 8000ca6:	f003 fe4f 	bl	8004948 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <_Z22Communication_commTaskv+0xfc>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <_Z22Communication_commTaskv+0x100>)
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <_Z22Communication_commTaskv+0xfc>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <_Z22Communication_commTaskv+0xf8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
	return 1;
 8000cc0:	2301      	movs	r3, #1
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000294 	.word	0x20000294
 8000cd0:	200000fc 	.word	0x200000fc
 8000cd4:	200000f8 	.word	0x200000f8
 8000cd8:	20000094 	.word	0x20000094
 8000cdc:	0800a344 	.word	0x0800a344

08000ce0 <_Z27Communication_handleCommandv>:


void Communication_handleCommand()
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b092      	sub	sp, #72	; 0x48
 8000ce4:	af02      	add	r7, sp, #8
	char cmd[20];
	char state[20];
	char param [20];

   int params = sscanf((const char*)cmdbuffer, "%s %s %s", cmd, state, param );
 8000ce6:	f107 0114 	add.w	r1, r7, #20
 8000cea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000cee:	463b      	mov	r3, r7
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	490e      	ldr	r1, [pc, #56]	; (8000d30 <_Z27Communication_handleCommandv+0x50>)
 8000cf6:	480f      	ldr	r0, [pc, #60]	; (8000d34 <_Z27Communication_handleCommandv+0x54>)
 8000cf8:	f007 ff74 	bl	8008be4 <siscanf>
 8000cfc:	63f8      	str	r0, [r7, #60]	; 0x3c
   if (params == 0){
 8000cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d011      	beq.n	8000d28 <_Z27Communication_handleCommandv+0x48>
	   return;
   }

   if(CliContainer.Call(cmd) == 0){
 8000d04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480b      	ldr	r0, [pc, #44]	; (8000d38 <_Z27Communication_handleCommandv+0x58>)
 8000d0c:	f7ff ff17 	bl	8000b3e <_ZN12CliContainer4CallEPc>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	bf0c      	ite	eq
 8000d16:	2301      	moveq	r3, #1
 8000d18:	2300      	movne	r3, #0
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d004      	beq.n	8000d2a <_Z27Communication_handleCommandv+0x4a>
   printf("Invalid command\r\n");
 8000d20:	4806      	ldr	r0, [pc, #24]	; (8000d3c <_Z27Communication_handleCommandv+0x5c>)
 8000d22:	f007 ff03 	bl	8008b2c <puts>
 8000d26:	e000      	b.n	8000d2a <_Z27Communication_handleCommandv+0x4a>
	   return;
 8000d28:	bf00      	nop
   }
}
 8000d2a:	3740      	adds	r7, #64	; 0x40
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	0800a348 	.word	0x0800a348
 8000d34:	20000094 	.word	0x20000094
 8000d38:	20000128 	.word	0x20000128
 8000d3c:	0800a354 	.word	0x0800a354

08000d40 <StartComTask>:

extern "C" void StartComTask()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Entry_comTask */
  /* Infinite loop */
  CliInit();
 8000d44:	f7ff fe24 	bl	8000990 <_Z7CliInitv>
  while(1)
  {
	  if (Communication_commTask()){
 8000d48:	f7ff ff46 	bl	8000bd8 <_Z22Communication_commTaskv>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	bf14      	ite	ne
 8000d52:	2301      	movne	r3, #1
 8000d54:	2300      	moveq	r3, #0
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <StartComTask+0x20>
		  Communication_handleCommand();
 8000d5c:	f7ff ffc0 	bl	8000ce0 <_Z27Communication_handleCommandv>
	  }
    osDelay(1);
 8000d60:	2001      	movs	r0, #1
 8000d62:	f005 f87d 	bl	8005e60 <osDelay>
	  if (Communication_commTask()){
 8000d66:	e7ef      	b.n	8000d48 <StartComTask+0x8>

08000d68 <_ZN3LedD1Ev>:
	uint16_t _GPIO_Pin;

public:
	Led(){};
    Led(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin);
    ~Led(){};
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <_ZN3Led8getGPIOxEv>:

    void on();
    void off();
    void blink();

    GPIO_TypeDef* getGPIOx(){
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
    	return _GPIOx;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
   }
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <_ZN3Led11getGPIO_PinEv>:

    uint16_t getGPIO_Pin(){
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
        return _GPIO_Pin;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	891b      	ldrh	r3, [r3, #8]
   }
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_ZN3Led8getStateEv>:

    LedState getState(){
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
    	return _state;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	781b      	ldrb	r3, [r3, #0]
   }
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <_ZN3LedC1EP12GPIO_TypeDeft>:

#include "Led.h"
#include <stdio.h>
#include "cmsis_os.h"

Led::Led(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
 8000dc6:	b480      	push	{r7}
 8000dc8:	b085      	sub	sp, #20
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	60f8      	str	r0, [r7, #12]
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	80fb      	strh	r3, [r7, #6]
{
	_GPIOx = GPIOx;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	605a      	str	r2, [r3, #4]
	_GPIO_Pin = GPIO_Pin;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	88fa      	ldrh	r2, [r7, #6]
 8000dde:	811a      	strh	r2, [r3, #8]
	_state = STATE_OFF;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
}
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <_ZN3Led2onEv>:

void Led::on()
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	_state = STATE_ON,
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_GPIOx, _GPIO_Pin, GPIO_PIN_SET);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6858      	ldr	r0, [r3, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	891b      	ldrh	r3, [r3, #8]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f001 f99d 	bl	800214c <HAL_GPIO_WritePin>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_ZN3Led3offEv>:

void Led::off()
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
	_state = STATE_OFF,
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_GPIOx, _GPIO_Pin, GPIO_PIN_RESET);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6858      	ldr	r0, [r3, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	891b      	ldrh	r3, [r3, #8]
 8000e30:	2200      	movs	r2, #0
 8000e32:	4619      	mov	r1, r3
 8000e34:	f001 f98a 	bl	800214c <HAL_GPIO_WritePin>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <startBlinkTask>:
}

Led ledB(LD2_GPIO_Port , LD2_Pin );

extern "C" void startBlinkTask()
{
 8000e40:	b598      	push	{r3, r4, r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN startBlinkTask */
	//Led *_led = (Led*)argument ;
  /* Infinite loop */
  while(1)
  {
	if(ledB.getState() == STATE_BLINKING){
 8000e44:	480f      	ldr	r0, [pc, #60]	; (8000e84 <startBlinkTask+0x44>)
 8000e46:	f7ff ffb2 	bl	8000dae <_ZN3Led8getStateEv>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	bf0c      	ite	eq
 8000e50:	2301      	moveq	r3, #1
 8000e52:	2300      	movne	r3, #0
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00f      	beq.n	8000e7a <startBlinkTask+0x3a>
	HAL_GPIO_TogglePin(ledB.getGPIOx(), ledB.getGPIO_Pin());
 8000e5a:	480a      	ldr	r0, [pc, #40]	; (8000e84 <startBlinkTask+0x44>)
 8000e5c:	f7ff ff8f 	bl	8000d7e <_ZN3Led8getGPIOxEv>
 8000e60:	4604      	mov	r4, r0
 8000e62:	4808      	ldr	r0, [pc, #32]	; (8000e84 <startBlinkTask+0x44>)
 8000e64:	f7ff ff97 	bl	8000d96 <_ZN3Led11getGPIO_PinEv>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f001 f985 	bl	800217c <HAL_GPIO_TogglePin>
	osDelay(600);
 8000e72:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000e76:	f004 fff3 	bl	8005e60 <osDelay>
	}
	osDelay(1);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f004 fff0 	bl	8005e60 <osDelay>
	if(ledB.getState() == STATE_BLINKING){
 8000e80:	e7e0      	b.n	8000e44 <startBlinkTask+0x4>
 8000e82:	bf00      	nop
 8000e84:	20000100 	.word	0x20000100

08000e88 <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END startBlinkTask */
}
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d10a      	bne.n	8000eae <_Z41__static_initialization_and_destruction_0ii+0x26>
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d105      	bne.n	8000eae <_Z41__static_initialization_and_destruction_0ii+0x26>
Led ledB(LD2_GPIO_Port , LD2_Pin );
 8000ea2:	2220      	movs	r2, #32
 8000ea4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000ea8:	4808      	ldr	r0, [pc, #32]	; (8000ecc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000eaa:	f7ff ff8c 	bl	8000dc6 <_ZN3LedC1EP12GPIO_TypeDeft>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d107      	bne.n	8000ec4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d102      	bne.n	8000ec4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8000ebe:	4803      	ldr	r0, [pc, #12]	; (8000ecc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000ec0:	f7ff ff52 	bl	8000d68 <_ZN3LedD1Ev>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000100 	.word	0x20000100

08000ed0 <_GLOBAL__sub_I__ZN3LedC2EP12GPIO_TypeDeft>:
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff ffd5 	bl	8000e88 <_Z41__static_initialization_and_destruction_0ii>
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <_GLOBAL__sub_D__ZN3LedC2EP12GPIO_TypeDeft>:
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f7ff ffcd 	bl	8000e88 <_Z41__static_initialization_and_destruction_0ii>
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <_ZN9MainTimerC1Ev>:
	MainTimer() {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
		_timerCount = 0;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <_ZN9MainTimerD1Ev>:
	~MainTimer() {}
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <_ZN9MainTimer13callTimerFuncEv>:
	void callTimerFunc() {
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b084      	sub	sp, #16
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
		for (int i = 0; i < _timerCount; i++) {
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	da0f      	bge.n	8000f58 <_ZN9MainTimer13callTimerFuncEv+0x36>
			_timerTasks[i]->timerFunc();
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	4798      	blx	r3
		for (int i = 0; i < _timerCount; i++) {
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3301      	adds	r3, #1
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	e7ea      	b.n	8000f2e <_ZN9MainTimer13callTimerFuncEv+0xc>
		}
	}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_TIM_PeriodElapsedCallback>:
CliContainer CliContainer;
//Led ledB(LD2_GPIO_Port , LD2_Pin );
MainTimer mainTimer;

extern "C" void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d102      	bne.n	8000f76 <HAL_TIM_PeriodElapsedCallback+0x16>
	///////////button///////////////////////////////////
		mainTimer.callTimerFunc();
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f72:	f7ff ffd6 	bl	8000f22 <_ZN9MainTimer13callTimerFuncEv>
	}

}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000248 	.word	0x20000248
 8000f84:	2000017c 	.word	0x2000017c

08000f88 <HAL_GPIO_EXTI_Callback>:

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
	button.interrupt();
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x18>)
 8000f94:	f7ff fbc8 	bl	8000728 <_ZN6Button9interruptEv>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000010c 	.word	0x2000010c

08000fa4 <_Z41__static_initialization_and_destruction_0ii>:
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d111      	bne.n	8000fd8 <_Z41__static_initialization_and_destruction_0ii+0x34>
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d10c      	bne.n	8000fd8 <_Z41__static_initialization_and_destruction_0ii+0x34>
Button button(B2_GPIO_Port ,  B2_Pin);
 8000fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fc2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000fc6:	480f      	ldr	r0, [pc, #60]	; (8001004 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000fc8:	f7ff fb90 	bl	80006ec <_ZN6ButtonC1EP12GPIO_TypeDeft>
CliContainer CliContainer;
 8000fcc:	480e      	ldr	r0, [pc, #56]	; (8001008 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000fce:	f7ff fd67 	bl	8000aa0 <_ZN12CliContainerC1Ev>
MainTimer mainTimer;
 8000fd2:	480e      	ldr	r0, [pc, #56]	; (800100c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000fd4:	f7ff ff8c 	bl	8000ef0 <_ZN9MainTimerC1Ev>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10d      	bne.n	8000ffa <_Z41__static_initialization_and_destruction_0ii+0x56>
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d108      	bne.n	8000ffa <_Z41__static_initialization_and_destruction_0ii+0x56>
 8000fe8:	4808      	ldr	r0, [pc, #32]	; (800100c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000fea:	f7ff ff8f 	bl	8000f0c <_ZN9MainTimerD1Ev>
CliContainer CliContainer;
 8000fee:	4806      	ldr	r0, [pc, #24]	; (8001008 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000ff0:	f7ff fd68 	bl	8000ac4 <_ZN12CliContainerD1Ev>
Button button(B2_GPIO_Port ,  B2_Pin);
 8000ff4:	4803      	ldr	r0, [pc, #12]	; (8001004 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000ff6:	f7ff fc27 	bl	8000848 <_ZN6ButtonD1Ev>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000010c 	.word	0x2000010c
 8001008:	20000128 	.word	0x20000128
 800100c:	2000017c 	.word	0x2000017c

08001010 <_GLOBAL__sub_I_button>:
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
 8001014:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001018:	2001      	movs	r0, #1
 800101a:	f7ff ffc3 	bl	8000fa4 <_Z41__static_initialization_and_destruction_0ii>
 800101e:	bd80      	pop	{r7, pc}

08001020 <_GLOBAL__sub_D_button>:
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
 8001024:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff ffbb 	bl	8000fa4 <_Z41__static_initialization_and_destruction_0ii>
 800102e:	bd80      	pop	{r7, pc}

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001034:	f000 fcbc 	bl	80019b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001038:	f000 f83a 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103c:	f000 f98c 	bl	8001358 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001040:	f000 f95a 	bl	80012f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001044:	f000 f886 	bl	8001154 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001048:	f000 f8c4 	bl	80011d4 <MX_TIM3_Init>
  MX_TIM6_Init();
 800104c:	f000 f91c 	bl	8001288 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001050:	f004 fe2a 	bl	8005ca8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <main+0x5c>)
 8001056:	2100      	movs	r1, #0
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <main+0x60>)
 800105a:	f004 fe6f 	bl	8005d3c <osThreadNew>
 800105e:	4603      	mov	r3, r0
 8001060:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <main+0x64>)
 8001062:	6013      	str	r3, [r2, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(startBlinkTask, NULL, &blinkTask_attributes);
 8001064:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <main+0x68>)
 8001066:	2100      	movs	r1, #0
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <main+0x6c>)
 800106a:	f004 fe67 	bl	8005d3c <osThreadNew>
 800106e:	4603      	mov	r3, r0
 8001070:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <main+0x70>)
 8001072:	6013      	str	r3, [r2, #0]

  /* creation of comTask */
  comTaskHandle = osThreadNew(StartComTask, NULL, &comTask_attributes);
 8001074:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <main+0x74>)
 8001076:	2100      	movs	r1, #0
 8001078:	480b      	ldr	r0, [pc, #44]	; (80010a8 <main+0x78>)
 800107a:	f004 fe5f 	bl	8005d3c <osThreadNew>
 800107e:	4603      	mov	r3, r0
 8001080:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <main+0x7c>)
 8001082:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001084:	f004 fe34 	bl	8005cf0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001088:	e7fe      	b.n	8001088 <main+0x58>
 800108a:	bf00      	nop
 800108c:	0800a410 	.word	0x0800a410
 8001090:	08001471 	.word	0x08001471
 8001094:	20000318 	.word	0x20000318
 8001098:	0800a434 	.word	0x0800a434
 800109c:	08000e41 	.word	0x08000e41
 80010a0:	2000031c 	.word	0x2000031c
 80010a4:	0800a458 	.word	0x0800a458
 80010a8:	08000d41 	.word	0x08000d41
 80010ac:	20000320 	.word	0x20000320

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b096      	sub	sp, #88	; 0x58
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	2244      	movs	r2, #68	; 0x44
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f007 fbc6 	bl	8008850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	463b      	mov	r3, r7
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010d6:	f001 f9b7 	bl	8002448 <HAL_PWREx_ControlVoltageScaling>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010e0:	f000 f9ce 	bl	8001480 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e4:	2302      	movs	r3, #2
 80010e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ee:	2310      	movs	r3, #16
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f2:	2302      	movs	r3, #2
 80010f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010f6:	2302      	movs	r3, #2
 80010f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010fa:	2301      	movs	r3, #1
 80010fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010fe:	230a      	movs	r3, #10
 8001100:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001102:	2307      	movs	r3, #7
 8001104:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001106:	2302      	movs	r3, #2
 8001108:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800110a:	2302      	movs	r3, #2
 800110c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4618      	mov	r0, r3
 8001114:	f001 f9ee 	bl	80024f4 <HAL_RCC_OscConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800111e:	f000 f9af 	bl	8001480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001122:	230f      	movs	r3, #15
 8001124:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001126:	2303      	movs	r3, #3
 8001128:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001136:	463b      	mov	r3, r7
 8001138:	2104      	movs	r1, #4
 800113a:	4618      	mov	r0, r3
 800113c:	f001 fdb6 	bl	8002cac <HAL_RCC_ClockConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001146:	f000 f99b 	bl	8001480 <Error_Handler>
  }
}
 800114a:	bf00      	nop
 800114c:	3758      	adds	r7, #88	; 0x58
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_I2C1_Init+0x74>)
 800115a:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <MX_I2C1_Init+0x78>)
 800115c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_I2C1_Init+0x74>)
 8001160:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <MX_I2C1_Init+0x7c>)
 8001162:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_I2C1_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_I2C1_Init+0x74>)
 800116c:	2201      	movs	r2, #1
 800116e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_I2C1_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_I2C1_Init+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <MX_I2C1_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_I2C1_Init+0x74>)
 8001184:	2200      	movs	r2, #0
 8001186:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_I2C1_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800118e:	480e      	ldr	r0, [pc, #56]	; (80011c8 <MX_I2C1_Init+0x74>)
 8001190:	f001 f826 	bl	80021e0 <HAL_I2C_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800119a:	f000 f971 	bl	8001480 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800119e:	2100      	movs	r1, #0
 80011a0:	4809      	ldr	r0, [pc, #36]	; (80011c8 <MX_I2C1_Init+0x74>)
 80011a2:	f001 f8ac 	bl	80022fe <HAL_I2CEx_ConfigAnalogFilter>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011ac:	f000 f968 	bl	8001480 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011b0:	2100      	movs	r1, #0
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_I2C1_Init+0x74>)
 80011b4:	f001 f8ee 	bl	8002394 <HAL_I2CEx_ConfigDigitalFilter>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011be:	f000 f95f 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200001a8 	.word	0x200001a8
 80011cc:	40005400 	.word	0x40005400
 80011d0:	10909cec 	.word	0x10909cec

080011d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e6:	463b      	mov	r3, r7
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
 80011f4:	615a      	str	r2, [r3, #20]
 80011f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011f8:	4b21      	ldr	r3, [pc, #132]	; (8001280 <MX_TIM3_Init+0xac>)
 80011fa:	4a22      	ldr	r2, [pc, #136]	; (8001284 <MX_TIM3_Init+0xb0>)
 80011fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <MX_TIM3_Init+0xac>)
 8001200:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001204:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <MX_TIM3_Init+0xac>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800120c:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_TIM3_Init+0xac>)
 800120e:	2264      	movs	r2, #100	; 0x64
 8001210:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001212:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <MX_TIM3_Init+0xac>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_TIM3_Init+0xac>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800121e:	4818      	ldr	r0, [pc, #96]	; (8001280 <MX_TIM3_Init+0xac>)
 8001220:	f002 fc7b 	bl	8003b1a <HAL_TIM_PWM_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800122a:	f000 f929 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	4810      	ldr	r0, [pc, #64]	; (8001280 <MX_TIM3_Init+0xac>)
 800123e:	f003 fa8f 	bl	8004760 <HAL_TIMEx_MasterConfigSynchronization>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001248:	f000 f91a 	bl	8001480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124c:	2360      	movs	r3, #96	; 0x60
 800124e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8001250:	2332      	movs	r3, #50	; 0x32
 8001252:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	2200      	movs	r2, #0
 8001260:	4619      	mov	r1, r3
 8001262:	4807      	ldr	r0, [pc, #28]	; (8001280 <MX_TIM3_Init+0xac>)
 8001264:	f002 fdd0 	bl	8003e08 <HAL_TIM_PWM_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800126e:	f000 f907 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001272:	4803      	ldr	r0, [pc, #12]	; (8001280 <MX_TIM3_Init+0xac>)
 8001274:	f000 f9d6 	bl	8001624 <HAL_TIM_MspPostInit>

}
 8001278:	bf00      	nop
 800127a:	3728      	adds	r7, #40	; 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200001fc 	.word	0x200001fc
 8001284:	40000400 	.word	0x40000400

08001288 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_TIM6_Init+0x68>)
 800129a:	4a16      	ldr	r2, [pc, #88]	; (80012f4 <MX_TIM6_Init+0x6c>)
 800129c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_TIM6_Init+0x68>)
 80012a0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012a4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_TIM6_Init+0x68>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <MX_TIM6_Init+0x68>)
 80012ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012b2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_TIM6_Init+0x68>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012ba:	480d      	ldr	r0, [pc, #52]	; (80012f0 <MX_TIM6_Init+0x68>)
 80012bc:	f002 fbd6 	bl	8003a6c <HAL_TIM_Base_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80012c6:	f000 f8db 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	4619      	mov	r1, r3
 80012d6:	4806      	ldr	r0, [pc, #24]	; (80012f0 <MX_TIM6_Init+0x68>)
 80012d8:	f003 fa42 	bl	8004760 <HAL_TIMEx_MasterConfigSynchronization>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80012e2:	f000 f8cd 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000248 	.word	0x20000248
 80012f4:	40001000 	.word	0x40001000

080012f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <MX_USART2_UART_Init+0x58>)
 80012fe:	4a15      	ldr	r2, [pc, #84]	; (8001354 <MX_USART2_UART_Init+0x5c>)
 8001300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <MX_USART2_UART_Init+0x58>)
 8001304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_USART2_UART_Init+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_USART2_UART_Init+0x58>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_USART2_UART_Init+0x58>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_USART2_UART_Init+0x58>)
 800131e:	220c      	movs	r2, #12
 8001320:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_USART2_UART_Init+0x58>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_USART2_UART_Init+0x58>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_USART2_UART_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_USART2_UART_Init+0x58>)
 8001336:	2200      	movs	r2, #0
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_USART2_UART_Init+0x58>)
 800133c:	f003 fab6 	bl	80048ac <HAL_UART_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001346:	f000 f89b 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000294 	.word	0x20000294
 8001354:	40004400 	.word	0x40004400

08001358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	4b3d      	ldr	r3, [pc, #244]	; (8001464 <MX_GPIO_Init+0x10c>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a3c      	ldr	r2, [pc, #240]	; (8001464 <MX_GPIO_Init+0x10c>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b3a      	ldr	r3, [pc, #232]	; (8001464 <MX_GPIO_Init+0x10c>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001386:	4b37      	ldr	r3, [pc, #220]	; (8001464 <MX_GPIO_Init+0x10c>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a36      	ldr	r2, [pc, #216]	; (8001464 <MX_GPIO_Init+0x10c>)
 800138c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b34      	ldr	r3, [pc, #208]	; (8001464 <MX_GPIO_Init+0x10c>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	4b31      	ldr	r3, [pc, #196]	; (8001464 <MX_GPIO_Init+0x10c>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a30      	ldr	r2, [pc, #192]	; (8001464 <MX_GPIO_Init+0x10c>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <MX_GPIO_Init+0x10c>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <MX_GPIO_Init+0x10c>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	4a2a      	ldr	r2, [pc, #168]	; (8001464 <MX_GPIO_Init+0x10c>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c2:	4b28      	ldr	r3, [pc, #160]	; (8001464 <MX_GPIO_Init+0x10c>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2120      	movs	r1, #32
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d6:	f000 feb9 	bl	800214c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	481d      	ldr	r0, [pc, #116]	; (8001468 <MX_GPIO_Init+0x110>)
 80013f2:	f000 fce9 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013f6:	2320      	movs	r3, #32
 80013f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001410:	f000 fcda 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8001414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800141a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800141e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142e:	f000 fccb 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001432:	2320      	movs	r3, #32
 8001434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001436:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4619      	mov	r1, r3
 8001446:	4809      	ldr	r0, [pc, #36]	; (800146c <MX_GPIO_Init+0x114>)
 8001448:	f000 fcbe 	bl	8001dc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2105      	movs	r1, #5
 8001450:	2028      	movs	r0, #40	; 0x28
 8001452:	f000 fc04 	bl	8001c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001456:	2028      	movs	r0, #40	; 0x28
 8001458:	f000 fc1d 	bl	8001c96 <HAL_NVIC_EnableIRQ>

}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40021000 	.word	0x40021000
 8001468:	48000800 	.word	0x48000800
 800146c:	48000400 	.word	0x48000400

08001470 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001478:	2001      	movs	r0, #1
 800147a:	f004 fcf1 	bl	8005e60 <osDelay>
 800147e:	e7fb      	b.n	8001478 <StartDefaultTask+0x8>

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	e7fe      	b.n	8001488 <Error_Handler+0x8>
	...

0800148c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_MspInit+0x4c>)
 8001494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001496:	4a10      	ldr	r2, [pc, #64]	; (80014d8 <HAL_MspInit+0x4c>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6613      	str	r3, [r2, #96]	; 0x60
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_MspInit+0x4c>)
 80014a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_MspInit+0x4c>)
 80014ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <HAL_MspInit+0x4c>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6593      	str	r3, [r2, #88]	; 0x58
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_MspInit+0x4c>)
 80014b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	210f      	movs	r1, #15
 80014c6:	f06f 0001 	mvn.w	r0, #1
 80014ca:	f000 fbc8 	bl	8001c5e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000

080014dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b0ac      	sub	sp, #176	; 0xb0
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2288      	movs	r2, #136	; 0x88
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f007 f9a7 	bl	8008850 <memset>
  if(hi2c->Instance==I2C1)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a21      	ldr	r2, [pc, #132]	; (800158c <HAL_I2C_MspInit+0xb0>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d13b      	bne.n	8001584 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800150c:	2340      	movs	r3, #64	; 0x40
 800150e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001510:	2300      	movs	r3, #0
 8001512:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4618      	mov	r0, r3
 800151a:	f001 fdeb 	bl	80030f4 <HAL_RCCEx_PeriphCLKConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001524:	f7ff ffac 	bl	8001480 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_I2C_MspInit+0xb4>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152c:	4a18      	ldr	r2, [pc, #96]	; (8001590 <HAL_I2C_MspInit+0xb4>)
 800152e:	f043 0302 	orr.w	r3, r3, #2
 8001532:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_I2C_MspInit+0xb4>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001540:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001544:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001548:	2312      	movs	r3, #18
 800154a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001554:	2303      	movs	r3, #3
 8001556:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800155a:	2304      	movs	r3, #4
 800155c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001560:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001564:	4619      	mov	r1, r3
 8001566:	480b      	ldr	r0, [pc, #44]	; (8001594 <HAL_I2C_MspInit+0xb8>)
 8001568:	f000 fc2e 	bl	8001dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <HAL_I2C_MspInit+0xb4>)
 800156e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001570:	4a07      	ldr	r2, [pc, #28]	; (8001590 <HAL_I2C_MspInit+0xb4>)
 8001572:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001576:	6593      	str	r3, [r2, #88]	; 0x58
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_I2C_MspInit+0xb4>)
 800157a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001584:	bf00      	nop
 8001586:	37b0      	adds	r7, #176	; 0xb0
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40005400 	.word	0x40005400
 8001590:	40021000 	.word	0x40021000
 8001594:	48000400 	.word	0x48000400

08001598 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_TIM_PWM_MspInit+0x38>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d10b      	bne.n	80015c2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80015ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ae:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	6593      	str	r3, [r2, #88]	; 0x58
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80015b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015c2:	bf00      	nop
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40000400 	.word	0x40000400
 80015d4:	40021000 	.word	0x40021000

080015d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0d      	ldr	r2, [pc, #52]	; (800161c <HAL_TIM_Base_MspInit+0x44>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d113      	bne.n	8001612 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <HAL_TIM_Base_MspInit+0x48>)
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	4a0c      	ldr	r2, [pc, #48]	; (8001620 <HAL_TIM_Base_MspInit+0x48>)
 80015f0:	f043 0310 	orr.w	r3, r3, #16
 80015f4:	6593      	str	r3, [r2, #88]	; 0x58
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_TIM_Base_MspInit+0x48>)
 80015f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2105      	movs	r1, #5
 8001606:	2036      	movs	r0, #54	; 0x36
 8001608:	f000 fb29 	bl	8001c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800160c:	2036      	movs	r0, #54	; 0x36
 800160e:	f000 fb42 	bl	8001c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40001000 	.word	0x40001000
 8001620:	40021000 	.word	0x40021000

08001624 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a11      	ldr	r2, [pc, #68]	; (8001688 <HAL_TIM_MspPostInit+0x64>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d11b      	bne.n	800167e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <HAL_TIM_MspPostInit+0x68>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	4a10      	ldr	r2, [pc, #64]	; (800168c <HAL_TIM_MspPostInit+0x68>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_TIM_MspPostInit+0x68>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800165e:	2310      	movs	r3, #16
 8001660:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800166e:	2302      	movs	r3, #2
 8001670:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	4619      	mov	r1, r3
 8001678:	4805      	ldr	r0, [pc, #20]	; (8001690 <HAL_TIM_MspPostInit+0x6c>)
 800167a:	f000 fba5 	bl	8001dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800167e:	bf00      	nop
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40000400 	.word	0x40000400
 800168c:	40021000 	.word	0x40021000
 8001690:	48000400 	.word	0x48000400

08001694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b0ac      	sub	sp, #176	; 0xb0
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2288      	movs	r2, #136	; 0x88
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f007 f8cb 	bl	8008850 <memset>
  if(huart->Instance==USART2)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a25      	ldr	r2, [pc, #148]	; (8001754 <HAL_UART_MspInit+0xc0>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d143      	bne.n	800174c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016c4:	2302      	movs	r3, #2
 80016c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4618      	mov	r0, r3
 80016d2:	f001 fd0f 	bl	80030f4 <HAL_RCCEx_PeriphCLKConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016dc:	f7ff fed0 	bl	8001480 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <HAL_UART_MspInit+0xc4>)
 80016e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e4:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <HAL_UART_MspInit+0xc4>)
 80016e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ea:	6593      	str	r3, [r2, #88]	; 0x58
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <HAL_UART_MspInit+0xc4>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <HAL_UART_MspInit+0xc4>)
 80016fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fc:	4a16      	ldr	r2, [pc, #88]	; (8001758 <HAL_UART_MspInit+0xc4>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <HAL_UART_MspInit+0xc4>)
 8001706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001710:	230c      	movs	r3, #12
 8001712:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001722:	2303      	movs	r3, #3
 8001724:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001728:	2307      	movs	r3, #7
 800172a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001732:	4619      	mov	r1, r3
 8001734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001738:	f000 fb46 	bl	8001dc8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2105      	movs	r1, #5
 8001740:	2026      	movs	r0, #38	; 0x26
 8001742:	f000 fa8c 	bl	8001c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001746:	2026      	movs	r0, #38	; 0x26
 8001748:	f000 faa5 	bl	8001c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800174c:	bf00      	nop
 800174e:	37b0      	adds	r7, #176	; 0xb0
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40004400 	.word	0x40004400
 8001758:	40021000 	.word	0x40021000

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <NMI_Handler+0x4>

08001762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <HardFault_Handler+0x4>

08001768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <MemManage_Handler+0x4>

0800176e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <BusFault_Handler+0x4>

08001774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <UsageFault_Handler+0x4>

0800177a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178c:	f000 f96c 	bl	8001a68 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001790:	f005 ff74 	bl	800767c <xTaskGetSchedulerState>
 8001794:	4603      	mov	r3, r0
 8001796:	2b01      	cmp	r3, #1
 8001798:	d001      	beq.n	800179e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800179a:	f006 fd5d 	bl	8008258 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <USART2_IRQHandler+0x10>)
 80017aa:	f003 fa33 	bl	8004c14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000294 	.word	0x20000294

080017b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 80017bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017c0:	f000 fcf6 	bl	80021b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017c8:	f000 fcf2 	bl	80021b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <TIM6_DAC_IRQHandler+0x10>)
 80017d6:	f002 f9f7 	bl	8003bc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000248 	.word	0x20000248

080017e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
	return 1;
 80017e8:	2301      	movs	r3, #1
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <_kill>:

int _kill(int pid, int sig)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017fe:	f006 ffdf 	bl	80087c0 <__errno>
 8001802:	4603      	mov	r3, r0
 8001804:	2216      	movs	r2, #22
 8001806:	601a      	str	r2, [r3, #0]
	return -1;
 8001808:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <_exit>:

void _exit (int status)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800181c:	f04f 31ff 	mov.w	r1, #4294967295
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ffe7 	bl	80017f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001826:	e7fe      	b.n	8001826 <_exit+0x12>

08001828 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	e00a      	b.n	8001850 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800183a:	f3af 8000 	nop.w
 800183e:	4601      	mov	r1, r0
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	60ba      	str	r2, [r7, #8]
 8001846:	b2ca      	uxtb	r2, r1
 8001848:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	3301      	adds	r3, #1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	429a      	cmp	r2, r3
 8001856:	dbf0      	blt.n	800183a <_read+0x12>
	}

return len;
 8001858:	687b      	ldr	r3, [r7, #4]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
	return -1;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800188a:	605a      	str	r2, [r3, #4]
	return 0;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_isatty>:

int _isatty(int file)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
	return 1;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
	return 0;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <_sbrk+0x5c>)
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <_sbrk+0x60>)
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <_sbrk+0x64>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <_sbrk+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018fc:	f006 ff60 	bl	80087c0 <__errno>
 8001900:	4603      	mov	r3, r0
 8001902:	220c      	movs	r2, #12
 8001904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	e009      	b.n	8001920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <_sbrk+0x64>)
 800191c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20018000 	.word	0x20018000
 800192c:	00000400 	.word	0x00000400
 8001930:	20000324 	.word	0x20000324
 8001934:	20001c48 	.word	0x20001c48

08001938 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <SystemInit+0x20>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <SystemInit+0x20>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800195c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001994 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001960:	f7ff ffea 	bl	8001938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001964:	480c      	ldr	r0, [pc, #48]	; (8001998 <LoopForever+0x6>)
  ldr r1, =_edata
 8001966:	490d      	ldr	r1, [pc, #52]	; (800199c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <LoopForever+0xe>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800196c:	e002      	b.n	8001974 <LoopCopyDataInit>

0800196e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800196e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001972:	3304      	adds	r3, #4

08001974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001978:	d3f9      	bcc.n	800196e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800197c:	4c0a      	ldr	r4, [pc, #40]	; (80019a8 <LoopForever+0x16>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001980:	e001      	b.n	8001986 <LoopFillZerobss>

08001982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001984:	3204      	adds	r2, #4

08001986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001988:	d3fb      	bcc.n	8001982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800198a:	f006 ff1f 	bl	80087cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800198e:	f7ff fb4f 	bl	8001030 <main>

08001992 <LoopForever>:

LoopForever:
    b LoopForever
 8001992:	e7fe      	b.n	8001992 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001994:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800199c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80019a0:	0800a698 	.word	0x0800a698
  ldr r2, =_sbss
 80019a4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80019a8:	20001c48 	.word	0x20001c48

080019ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019ac:	e7fe      	b.n	80019ac <ADC1_2_IRQHandler>
	...

080019b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <HAL_Init+0x3c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <HAL_Init+0x3c>)
 80019c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c6:	2003      	movs	r0, #3
 80019c8:	f000 f93e 	bl	8001c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019cc:	200f      	movs	r0, #15
 80019ce:	f000 f80f 	bl	80019f0 <HAL_InitTick>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d002      	beq.n	80019de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	71fb      	strb	r3, [r7, #7]
 80019dc:	e001      	b.n	80019e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019de:	f7ff fd55 	bl	800148c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019e2:	79fb      	ldrb	r3, [r7, #7]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40022000 	.word	0x40022000

080019f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019fc:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <HAL_InitTick+0x6c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d023      	beq.n	8001a4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a04:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <HAL_InitTick+0x70>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_InitTick+0x6c>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f949 	bl	8001cb2 <HAL_SYSTICK_Config>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10f      	bne.n	8001a46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b0f      	cmp	r3, #15
 8001a2a:	d809      	bhi.n	8001a40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f000 f913 	bl	8001c5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <HAL_InitTick+0x74>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e007      	b.n	8001a50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
 8001a44:	e004      	b.n	8001a50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	73fb      	strb	r3, [r7, #15]
 8001a4a:	e001      	b.n	8001a50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000008 	.word	0x20000008
 8001a60:	20000000 	.word	0x20000000
 8001a64:	20000004 	.word	0x20000004

08001a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_IncTick+0x20>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_IncTick+0x24>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <HAL_IncTick+0x24>)
 8001a7a:	6013      	str	r3, [r2, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	20000328 	.word	0x20000328

08001a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return uwTick;
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <HAL_GetTick+0x14>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000328 	.word	0x20000328

08001aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ada:	4a04      	ldr	r2, [pc, #16]	; (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	60d3      	str	r3, [r2, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <__NVIC_GetPriorityGrouping+0x18>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	f003 0307 	and.w	r3, r3, #7
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	db0b      	blt.n	8001b36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	f003 021f 	and.w	r2, r3, #31
 8001b24:	4907      	ldr	r1, [pc, #28]	; (8001b44 <__NVIC_EnableIRQ+0x38>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000e100 	.word	0xe000e100

08001b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db0a      	blt.n	8001b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	490c      	ldr	r1, [pc, #48]	; (8001b94 <__NVIC_SetPriority+0x4c>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b70:	e00a      	b.n	8001b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4908      	ldr	r1, [pc, #32]	; (8001b98 <__NVIC_SetPriority+0x50>)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	3b04      	subs	r3, #4
 8001b80:	0112      	lsls	r2, r2, #4
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	761a      	strb	r2, [r3, #24]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000e100 	.word	0xe000e100
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f1c3 0307 	rsb	r3, r3, #7
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	bf28      	it	cs
 8001bba:	2304      	movcs	r3, #4
 8001bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d902      	bls.n	8001bcc <NVIC_EncodePriority+0x30>
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	e000      	b.n	8001bce <NVIC_EncodePriority+0x32>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	401a      	ands	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43d9      	mvns	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	4313      	orrs	r3, r2
         );
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3724      	adds	r7, #36	; 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c14:	d301      	bcc.n	8001c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00f      	b.n	8001c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <SysTick_Config+0x40>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c22:	210f      	movs	r1, #15
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f7ff ff8e 	bl	8001b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <SysTick_Config+0x40>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <SysTick_Config+0x40>)
 8001c34:	2207      	movs	r2, #7
 8001c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	e000e010 	.word	0xe000e010

08001c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff29 	bl	8001aa8 <__NVIC_SetPriorityGrouping>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c70:	f7ff ff3e 	bl	8001af0 <__NVIC_GetPriorityGrouping>
 8001c74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	6978      	ldr	r0, [r7, #20]
 8001c7c:	f7ff ff8e 	bl	8001b9c <NVIC_EncodePriority>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff5d 	bl	8001b48 <__NVIC_SetPriority>
}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff31 	bl	8001b0c <__NVIC_EnableIRQ>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffa2 	bl	8001c04 <SysTick_Config>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b085      	sub	sp, #20
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d008      	beq.n	8001cf4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e022      	b.n	8001d3a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 020e 	bic.w	r2, r2, #14
 8001d02:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d18:	f003 021c 	and.w	r2, r3, #28
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	2101      	movs	r1, #1
 8001d22:	fa01 f202 	lsl.w	r2, r1, r2
 8001d26:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d005      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2204      	movs	r2, #4
 8001d62:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
 8001d68:	e029      	b.n	8001dbe <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 020e 	bic.w	r2, r2, #14
 8001d78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0201 	bic.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f003 021c 	and.w	r2, r3, #28
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	2101      	movs	r1, #1
 8001d98:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	4798      	blx	r3
    }
  }
  return status;
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd6:	e17f      	b.n	80020d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	2101      	movs	r1, #1
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	fa01 f303 	lsl.w	r3, r1, r3
 8001de4:	4013      	ands	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 8171 	beq.w	80020d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d005      	beq.n	8001e08 <HAL_GPIO_Init+0x40>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d130      	bne.n	8001e6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e3e:	2201      	movs	r2, #1
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	091b      	lsrs	r3, r3, #4
 8001e54:	f003 0201 	and.w	r2, r3, #1
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d118      	bne.n	8001ea8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	08db      	lsrs	r3, r3, #3
 8001e92:	f003 0201 	and.w	r2, r3, #1
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d017      	beq.n	8001ee4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d123      	bne.n	8001f38 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	08da      	lsrs	r2, r3, #3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3208      	adds	r2, #8
 8001ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	220f      	movs	r2, #15
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	08da      	lsrs	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3208      	adds	r2, #8
 8001f32:	6939      	ldr	r1, [r7, #16]
 8001f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0203 	and.w	r2, r3, #3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80ac 	beq.w	80020d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7a:	4b5f      	ldr	r3, [pc, #380]	; (80020f8 <HAL_GPIO_Init+0x330>)
 8001f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7e:	4a5e      	ldr	r2, [pc, #376]	; (80020f8 <HAL_GPIO_Init+0x330>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6613      	str	r3, [r2, #96]	; 0x60
 8001f86:	4b5c      	ldr	r3, [pc, #368]	; (80020f8 <HAL_GPIO_Init+0x330>)
 8001f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f92:	4a5a      	ldr	r2, [pc, #360]	; (80020fc <HAL_GPIO_Init+0x334>)
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	3302      	adds	r3, #2
 8001f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	220f      	movs	r2, #15
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fbc:	d025      	beq.n	800200a <HAL_GPIO_Init+0x242>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a4f      	ldr	r2, [pc, #316]	; (8002100 <HAL_GPIO_Init+0x338>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d01f      	beq.n	8002006 <HAL_GPIO_Init+0x23e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4e      	ldr	r2, [pc, #312]	; (8002104 <HAL_GPIO_Init+0x33c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d019      	beq.n	8002002 <HAL_GPIO_Init+0x23a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4d      	ldr	r2, [pc, #308]	; (8002108 <HAL_GPIO_Init+0x340>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_GPIO_Init+0x236>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4c      	ldr	r2, [pc, #304]	; (800210c <HAL_GPIO_Init+0x344>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00d      	beq.n	8001ffa <HAL_GPIO_Init+0x232>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4b      	ldr	r2, [pc, #300]	; (8002110 <HAL_GPIO_Init+0x348>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d007      	beq.n	8001ff6 <HAL_GPIO_Init+0x22e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4a      	ldr	r2, [pc, #296]	; (8002114 <HAL_GPIO_Init+0x34c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d101      	bne.n	8001ff2 <HAL_GPIO_Init+0x22a>
 8001fee:	2306      	movs	r3, #6
 8001ff0:	e00c      	b.n	800200c <HAL_GPIO_Init+0x244>
 8001ff2:	2307      	movs	r3, #7
 8001ff4:	e00a      	b.n	800200c <HAL_GPIO_Init+0x244>
 8001ff6:	2305      	movs	r3, #5
 8001ff8:	e008      	b.n	800200c <HAL_GPIO_Init+0x244>
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	e006      	b.n	800200c <HAL_GPIO_Init+0x244>
 8001ffe:	2303      	movs	r3, #3
 8002000:	e004      	b.n	800200c <HAL_GPIO_Init+0x244>
 8002002:	2302      	movs	r3, #2
 8002004:	e002      	b.n	800200c <HAL_GPIO_Init+0x244>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_GPIO_Init+0x244>
 800200a:	2300      	movs	r3, #0
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	f002 0203 	and.w	r2, r2, #3
 8002012:	0092      	lsls	r2, r2, #2
 8002014:	4093      	lsls	r3, r2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800201c:	4937      	ldr	r1, [pc, #220]	; (80020fc <HAL_GPIO_Init+0x334>)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	3302      	adds	r3, #2
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800202a:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <HAL_GPIO_Init+0x350>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	43db      	mvns	r3, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800204e:	4a32      	ldr	r2, [pc, #200]	; (8002118 <HAL_GPIO_Init+0x350>)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002054:	4b30      	ldr	r3, [pc, #192]	; (8002118 <HAL_GPIO_Init+0x350>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	43db      	mvns	r3, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002078:	4a27      	ldr	r2, [pc, #156]	; (8002118 <HAL_GPIO_Init+0x350>)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800207e:	4b26      	ldr	r3, [pc, #152]	; (8002118 <HAL_GPIO_Init+0x350>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020a2:	4a1d      	ldr	r2, [pc, #116]	; (8002118 <HAL_GPIO_Init+0x350>)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020a8:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <HAL_GPIO_Init+0x350>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020cc:	4a12      	ldr	r2, [pc, #72]	; (8002118 <HAL_GPIO_Init+0x350>)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	3301      	adds	r3, #1
 80020d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa22 f303 	lsr.w	r3, r2, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f47f ae78 	bne.w	8001dd8 <HAL_GPIO_Init+0x10>
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	371c      	adds	r7, #28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40010000 	.word	0x40010000
 8002100:	48000400 	.word	0x48000400
 8002104:	48000800 	.word	0x48000800
 8002108:	48000c00 	.word	0x48000c00
 800210c:	48001000 	.word	0x48001000
 8002110:	48001400 	.word	0x48001400
 8002114:	48001800 	.word	0x48001800
 8002118:	40010400 	.word	0x40010400

0800211c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
 8002138:	e001      	b.n	800213e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800213e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
 8002158:	4613      	mov	r3, r2
 800215a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800215c:	787b      	ldrb	r3, [r7, #1]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002162:	887a      	ldrh	r2, [r7, #2]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002168:	e002      	b.n	8002170 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800216a:	887a      	ldrh	r2, [r7, #2]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4013      	ands	r3, r2
 8002194:	041a      	lsls	r2, r3, #16
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	43d9      	mvns	r1, r3
 800219a:	887b      	ldrh	r3, [r7, #2]
 800219c:	400b      	ands	r3, r1
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	619a      	str	r2, [r3, #24]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d006      	beq.n	80021d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe feda 	bl	8000f88 <HAL_GPIO_EXTI_Callback>
  }
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40010400 	.word	0x40010400

080021e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e081      	b.n	80022f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff f968 	bl	80014dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2224      	movs	r2, #36	; 0x24
 8002210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002230:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002240:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d107      	bne.n	800225a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	e006      	b.n	8002268 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002266:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d104      	bne.n	800227a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002278:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800228c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800229c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691a      	ldr	r2, [r3, #16]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69d9      	ldr	r1, [r3, #28]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1a      	ldr	r2, [r3, #32]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b20      	cmp	r3, #32
 8002312:	d138      	bne.n	8002386 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800231e:	2302      	movs	r3, #2
 8002320:	e032      	b.n	8002388 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2224      	movs	r2, #36	; 0x24
 800232e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0201 	bic.w	r2, r2, #1
 8002340:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002350:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6819      	ldr	r1, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 0201 	orr.w	r2, r2, #1
 8002370:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2220      	movs	r2, #32
 8002376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	e000      	b.n	8002388 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002386:	2302      	movs	r3, #2
  }
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b20      	cmp	r3, #32
 80023a8:	d139      	bne.n	800241e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023b4:	2302      	movs	r3, #2
 80023b6:	e033      	b.n	8002420 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2224      	movs	r2, #36	; 0x24
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2220      	movs	r2, #32
 800240e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	e000      	b.n	8002420 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800241e:	2302      	movs	r3, #2
  }
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <HAL_PWREx_GetVoltageRange+0x18>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40007000 	.word	0x40007000

08002448 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002456:	d130      	bne.n	80024ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002458:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002464:	d038      	beq.n	80024d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800246e:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002470:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002474:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002476:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2232      	movs	r2, #50	; 0x32
 800247c:	fb02 f303 	mul.w	r3, r2, r3
 8002480:	4a1b      	ldr	r2, [pc, #108]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	0c9b      	lsrs	r3, r3, #18
 8002488:	3301      	adds	r3, #1
 800248a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800248c:	e002      	b.n	8002494 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3b01      	subs	r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002494:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a0:	d102      	bne.n	80024a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f2      	bne.n	800248e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024a8:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b4:	d110      	bne.n	80024d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e00f      	b.n	80024da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024ba:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c6:	d007      	beq.n	80024d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024c8:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024d0:	4a05      	ldr	r2, [pc, #20]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40007000 	.word	0x40007000
 80024ec:	20000000 	.word	0x20000000
 80024f0:	431bde83 	.word	0x431bde83

080024f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e3ca      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002506:	4b97      	ldr	r3, [pc, #604]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002510:	4b94      	ldr	r3, [pc, #592]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80e4 	beq.w	80026f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <HAL_RCC_OscConfig+0x4a>
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2b0c      	cmp	r3, #12
 8002532:	f040 808b 	bne.w	800264c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b01      	cmp	r3, #1
 800253a:	f040 8087 	bne.w	800264c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800253e:	4b89      	ldr	r3, [pc, #548]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d005      	beq.n	8002556 <HAL_RCC_OscConfig+0x62>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e3a2      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1a      	ldr	r2, [r3, #32]
 800255a:	4b82      	ldr	r3, [pc, #520]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d004      	beq.n	8002570 <HAL_RCC_OscConfig+0x7c>
 8002566:	4b7f      	ldr	r3, [pc, #508]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800256e:	e005      	b.n	800257c <HAL_RCC_OscConfig+0x88>
 8002570:	4b7c      	ldr	r3, [pc, #496]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800257c:	4293      	cmp	r3, r2
 800257e:	d223      	bcs.n	80025c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4618      	mov	r0, r3
 8002586:	f000 fd55 	bl	8003034 <RCC_SetFlashLatencyFromMSIRange>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e383      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002594:	4b73      	ldr	r3, [pc, #460]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a72      	ldr	r2, [pc, #456]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800259a:	f043 0308 	orr.w	r3, r3, #8
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b70      	ldr	r3, [pc, #448]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	496d      	ldr	r1, [pc, #436]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025b2:	4b6c      	ldr	r3, [pc, #432]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	4968      	ldr	r1, [pc, #416]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	604b      	str	r3, [r1, #4]
 80025c6:	e025      	b.n	8002614 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025c8:	4b66      	ldr	r3, [pc, #408]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a65      	ldr	r2, [pc, #404]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025ce:	f043 0308 	orr.w	r3, r3, #8
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	4b63      	ldr	r3, [pc, #396]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	4960      	ldr	r1, [pc, #384]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025e6:	4b5f      	ldr	r3, [pc, #380]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	021b      	lsls	r3, r3, #8
 80025f4:	495b      	ldr	r1, [pc, #364]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d109      	bne.n	8002614 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fd15 	bl	8003034 <RCC_SetFlashLatencyFromMSIRange>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e343      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002614:	f000 fc4a 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002618:	4602      	mov	r2, r0
 800261a:	4b52      	ldr	r3, [pc, #328]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	4950      	ldr	r1, [pc, #320]	; (8002768 <HAL_RCC_OscConfig+0x274>)
 8002626:	5ccb      	ldrb	r3, [r1, r3]
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	fa22 f303 	lsr.w	r3, r2, r3
 8002630:	4a4e      	ldr	r2, [pc, #312]	; (800276c <HAL_RCC_OscConfig+0x278>)
 8002632:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002634:	4b4e      	ldr	r3, [pc, #312]	; (8002770 <HAL_RCC_OscConfig+0x27c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff f9d9 	bl	80019f0 <HAL_InitTick>
 800263e:	4603      	mov	r3, r0
 8002640:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d052      	beq.n	80026ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	e327      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d032      	beq.n	80026ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002654:	4b43      	ldr	r3, [pc, #268]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a42      	ldr	r2, [pc, #264]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002660:	f7ff fa16 	bl	8001a90 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002668:	f7ff fa12 	bl	8001a90 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e310      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800267a:	4b3a      	ldr	r3, [pc, #232]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002686:	4b37      	ldr	r3, [pc, #220]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a36      	ldr	r2, [pc, #216]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800268c:	f043 0308 	orr.w	r3, r3, #8
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	4b34      	ldr	r3, [pc, #208]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	4931      	ldr	r1, [pc, #196]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026a4:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	492c      	ldr	r1, [pc, #176]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
 80026b8:	e01a      	b.n	80026f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026ba:	4b2a      	ldr	r3, [pc, #168]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a29      	ldr	r2, [pc, #164]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026c6:	f7ff f9e3 	bl	8001a90 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026ce:	f7ff f9df 	bl	8001a90 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e2dd      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026e0:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f0      	bne.n	80026ce <HAL_RCC_OscConfig+0x1da>
 80026ec:	e000      	b.n	80026f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d074      	beq.n	80027e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d005      	beq.n	800270e <HAL_RCC_OscConfig+0x21a>
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	2b0c      	cmp	r3, #12
 8002706:	d10e      	bne.n	8002726 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2b03      	cmp	r3, #3
 800270c:	d10b      	bne.n	8002726 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d064      	beq.n	80027e4 <HAL_RCC_OscConfig+0x2f0>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d160      	bne.n	80027e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e2ba      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272e:	d106      	bne.n	800273e <HAL_RCC_OscConfig+0x24a>
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0b      	ldr	r2, [pc, #44]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	e026      	b.n	800278c <HAL_RCC_OscConfig+0x298>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002746:	d115      	bne.n	8002774 <HAL_RCC_OscConfig+0x280>
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a05      	ldr	r2, [pc, #20]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800274e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a02      	ldr	r2, [pc, #8]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800275a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	e014      	b.n	800278c <HAL_RCC_OscConfig+0x298>
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000
 8002768:	0800a47c 	.word	0x0800a47c
 800276c:	20000000 	.word	0x20000000
 8002770:	20000004 	.word	0x20000004
 8002774:	4ba0      	ldr	r3, [pc, #640]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a9f      	ldr	r2, [pc, #636]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800277a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b9d      	ldr	r3, [pc, #628]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a9c      	ldr	r2, [pc, #624]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d013      	beq.n	80027bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7ff f97c 	bl	8001a90 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800279c:	f7ff f978 	bl	8001a90 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e276      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ae:	4b92      	ldr	r3, [pc, #584]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x2a8>
 80027ba:	e014      	b.n	80027e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7ff f968 	bl	8001a90 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7ff f964 	bl	8001a90 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e262      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027d6:	4b88      	ldr	r3, [pc, #544]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x2d0>
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d060      	beq.n	80028b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_OscConfig+0x310>
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d119      	bne.n	8002832 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d116      	bne.n	8002832 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002804:	4b7c      	ldr	r3, [pc, #496]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_OscConfig+0x328>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e23f      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281c:	4b76      	ldr	r3, [pc, #472]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	061b      	lsls	r3, r3, #24
 800282a:	4973      	ldr	r1, [pc, #460]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002830:	e040      	b.n	80028b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d023      	beq.n	8002882 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800283a:	4b6f      	ldr	r3, [pc, #444]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a6e      	ldr	r2, [pc, #440]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002846:	f7ff f923 	bl	8001a90 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284e:	f7ff f91f 	bl	8001a90 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e21d      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002860:	4b65      	ldr	r3, [pc, #404]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286c:	4b62      	ldr	r3, [pc, #392]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	061b      	lsls	r3, r3, #24
 800287a:	495f      	ldr	r1, [pc, #380]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
 8002880:	e018      	b.n	80028b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002882:	4b5d      	ldr	r3, [pc, #372]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a5c      	ldr	r2, [pc, #368]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800288c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288e:	f7ff f8ff 	bl	8001a90 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002896:	f7ff f8fb 	bl	8001a90 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e1f9      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028a8:	4b53      	ldr	r3, [pc, #332]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f0      	bne.n	8002896 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d03c      	beq.n	800293a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d01c      	beq.n	8002902 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c8:	4b4b      	ldr	r3, [pc, #300]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80028ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ce:	4a4a      	ldr	r2, [pc, #296]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d8:	f7ff f8da 	bl	8001a90 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e0:	f7ff f8d6 	bl	8001a90 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e1d4      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028f2:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80028f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ef      	beq.n	80028e0 <HAL_RCC_OscConfig+0x3ec>
 8002900:	e01b      	b.n	800293a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002902:	4b3d      	ldr	r3, [pc, #244]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002908:	4a3b      	ldr	r2, [pc, #236]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002912:	f7ff f8bd 	bl	8001a90 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291a:	f7ff f8b9 	bl	8001a90 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e1b7      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800292c:	4b32      	ldr	r3, [pc, #200]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800292e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1ef      	bne.n	800291a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 80a6 	beq.w	8002a94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002948:	2300      	movs	r3, #0
 800294a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800294c:	4b2a      	ldr	r3, [pc, #168]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800294e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10d      	bne.n	8002974 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002958:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	4a26      	ldr	r2, [pc, #152]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800295e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002962:	6593      	str	r3, [r2, #88]	; 0x58
 8002964:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002970:	2301      	movs	r3, #1
 8002972:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002974:	4b21      	ldr	r3, [pc, #132]	; (80029fc <HAL_RCC_OscConfig+0x508>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d118      	bne.n	80029b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002980:	4b1e      	ldr	r3, [pc, #120]	; (80029fc <HAL_RCC_OscConfig+0x508>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1d      	ldr	r2, [pc, #116]	; (80029fc <HAL_RCC_OscConfig+0x508>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298c:	f7ff f880 	bl	8001a90 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002994:	f7ff f87c 	bl	8001a90 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e17a      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_RCC_OscConfig+0x508>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d108      	bne.n	80029cc <HAL_RCC_OscConfig+0x4d8>
 80029ba:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c0:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ca:	e029      	b.n	8002a20 <HAL_RCC_OscConfig+0x52c>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b05      	cmp	r3, #5
 80029d2:	d115      	bne.n	8002a00 <HAL_RCC_OscConfig+0x50c>
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80029dc:	f043 0304 	orr.w	r3, r3, #4
 80029e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ea:	4a03      	ldr	r2, [pc, #12]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029f4:	e014      	b.n	8002a20 <HAL_RCC_OscConfig+0x52c>
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40007000 	.word	0x40007000
 8002a00:	4b9c      	ldr	r3, [pc, #624]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a06:	4a9b      	ldr	r2, [pc, #620]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a10:	4b98      	ldr	r3, [pc, #608]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a16:	4a97      	ldr	r2, [pc, #604]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a18:	f023 0304 	bic.w	r3, r3, #4
 8002a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d016      	beq.n	8002a56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7ff f832 	bl	8001a90 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a30:	f7ff f82e 	bl	8001a90 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e12a      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a46:	4b8b      	ldr	r3, [pc, #556]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ed      	beq.n	8002a30 <HAL_RCC_OscConfig+0x53c>
 8002a54:	e015      	b.n	8002a82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a56:	f7ff f81b 	bl	8001a90 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5e:	f7ff f817 	bl	8001a90 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e113      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a74:	4b7f      	ldr	r3, [pc, #508]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1ed      	bne.n	8002a5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a82:	7ffb      	ldrb	r3, [r7, #31]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d105      	bne.n	8002a94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a88:	4b7a      	ldr	r3, [pc, #488]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	4a79      	ldr	r2, [pc, #484]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a92:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80fe 	beq.w	8002c9a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	f040 80d0 	bne.w	8002c48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002aa8:	4b72      	ldr	r3, [pc, #456]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f003 0203 	and.w	r2, r3, #3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d130      	bne.n	8002b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d127      	bne.n	8002b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d11f      	bne.n	8002b1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ae8:	2a07      	cmp	r2, #7
 8002aea:	bf14      	ite	ne
 8002aec:	2201      	movne	r2, #1
 8002aee:	2200      	moveq	r2, #0
 8002af0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d113      	bne.n	8002b1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b00:	085b      	lsrs	r3, r3, #1
 8002b02:	3b01      	subs	r3, #1
 8002b04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d109      	bne.n	8002b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	085b      	lsrs	r3, r3, #1
 8002b16:	3b01      	subs	r3, #1
 8002b18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d06e      	beq.n	8002bfc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	2b0c      	cmp	r3, #12
 8002b22:	d069      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b24:	4b53      	ldr	r3, [pc, #332]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b30:	4b50      	ldr	r3, [pc, #320]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0ad      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b40:	4b4c      	ldr	r3, [pc, #304]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a4b      	ldr	r2, [pc, #300]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b4c:	f7fe ffa0 	bl	8001a90 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b54:	f7fe ff9c 	bl	8001a90 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e09a      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b66:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b72:	4b40      	ldr	r3, [pc, #256]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	4b40      	ldr	r3, [pc, #256]	; (8002c78 <HAL_RCC_OscConfig+0x784>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b82:	3a01      	subs	r2, #1
 8002b84:	0112      	lsls	r2, r2, #4
 8002b86:	4311      	orrs	r1, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b8c:	0212      	lsls	r2, r2, #8
 8002b8e:	4311      	orrs	r1, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b94:	0852      	lsrs	r2, r2, #1
 8002b96:	3a01      	subs	r2, #1
 8002b98:	0552      	lsls	r2, r2, #21
 8002b9a:	4311      	orrs	r1, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ba0:	0852      	lsrs	r2, r2, #1
 8002ba2:	3a01      	subs	r2, #1
 8002ba4:	0652      	lsls	r2, r2, #25
 8002ba6:	4311      	orrs	r1, r2
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bac:	0912      	lsrs	r2, r2, #4
 8002bae:	0452      	lsls	r2, r2, #17
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	4930      	ldr	r1, [pc, #192]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bb8:	4b2e      	ldr	r3, [pc, #184]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a2d      	ldr	r2, [pc, #180]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bc4:	4b2b      	ldr	r3, [pc, #172]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4a2a      	ldr	r2, [pc, #168]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bd0:	f7fe ff5e 	bl	8001a90 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7fe ff5a 	bl	8001a90 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e058      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bea:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bf6:	e050      	b.n	8002c9a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e04f      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d148      	bne.n	8002c9a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c08:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a19      	ldr	r2, [pc, #100]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c14:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4a16      	ldr	r2, [pc, #88]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c20:	f7fe ff36 	bl	8001a90 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe ff32 	bl	8001a90 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e030      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x734>
 8002c46:	e028      	b.n	8002c9a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2b0c      	cmp	r3, #12
 8002c4c:	d023      	beq.n	8002c96 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a08      	ldr	r2, [pc, #32]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7fe ff19 	bl	8001a90 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c60:	e00c      	b.n	8002c7c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c62:	f7fe ff15 	bl	8001a90 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d905      	bls.n	8002c7c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e013      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
 8002c74:	40021000 	.word	0x40021000
 8002c78:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_RCC_OscConfig+0x7b0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1ec      	bne.n	8002c62 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_RCC_OscConfig+0x7b0>)
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	4905      	ldr	r1, [pc, #20]	; (8002ca4 <HAL_RCC_OscConfig+0x7b0>)
 8002c8e:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_RCC_OscConfig+0x7b4>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	60cb      	str	r3, [r1, #12]
 8002c94:	e001      	b.n	8002c9a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3720      	adds	r7, #32
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	feeefffc 	.word	0xfeeefffc

08002cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0e7      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b75      	ldr	r3, [pc, #468]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d910      	bls.n	8002cf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b72      	ldr	r3, [pc, #456]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 0207 	bic.w	r2, r3, #7
 8002cd6:	4970      	ldr	r1, [pc, #448]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b6e      	ldr	r3, [pc, #440]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0cf      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d010      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	4b66      	ldr	r3, [pc, #408]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d908      	bls.n	8002d1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d0c:	4b63      	ldr	r3, [pc, #396]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4960      	ldr	r1, [pc, #384]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d04c      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d107      	bne.n	8002d42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d32:	4b5a      	ldr	r3, [pc, #360]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d121      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e0a6      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d107      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d4a:	4b54      	ldr	r3, [pc, #336]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d115      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e09a      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d62:	4b4e      	ldr	r3, [pc, #312]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e08e      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d72:	4b4a      	ldr	r3, [pc, #296]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e086      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d82:	4b46      	ldr	r3, [pc, #280]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f023 0203 	bic.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4943      	ldr	r1, [pc, #268]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d94:	f7fe fe7c 	bl	8001a90 <HAL_GetTick>
 8002d98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9c:	f7fe fe78 	bl	8001a90 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e06e      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db2:	4b3a      	ldr	r3, [pc, #232]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 020c 	and.w	r2, r3, #12
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d1eb      	bne.n	8002d9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d010      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d208      	bcs.n	8002df2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de0:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	492b      	ldr	r1, [pc, #172]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df2:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d210      	bcs.n	8002e22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 0207 	bic.w	r2, r3, #7
 8002e08:	4923      	ldr	r1, [pc, #140]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e10:	4b21      	ldr	r3, [pc, #132]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e036      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e2e:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	4918      	ldr	r1, [pc, #96]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d009      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e4c:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4910      	ldr	r1, [pc, #64]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e60:	f000 f824 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002e64:	4602      	mov	r2, r0
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	490b      	ldr	r1, [pc, #44]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f4>)
 8002e72:	5ccb      	ldrb	r3, [r1, r3]
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7c:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_RCC_ClockConfig+0x1fc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe fdb3 	bl	80019f0 <HAL_InitTick>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e8e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40022000 	.word	0x40022000
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	0800a47c 	.word	0x0800a47c
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	20000004 	.word	0x20000004

08002eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b089      	sub	sp, #36	; 0x24
 8002eb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eba:	4b3e      	ldr	r3, [pc, #248]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ec4:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	2b0c      	cmp	r3, #12
 8002ed8:	d121      	bne.n	8002f1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d11e      	bne.n	8002f1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ee0:	4b34      	ldr	r3, [pc, #208]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002eec:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	e005      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002efc:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f08:	4a2b      	ldr	r2, [pc, #172]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10d      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d102      	bne.n	8002f2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f24:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	e004      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d101      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f30:	4b23      	ldr	r3, [pc, #140]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b0c      	cmp	r3, #12
 8002f38:	d134      	bne.n	8002fa4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f3a:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d003      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0xac>
 8002f50:	e005      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f52:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f54:	617b      	str	r3, [r7, #20]
      break;
 8002f56:	e005      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f5a:	617b      	str	r3, [r7, #20]
      break;
 8002f5c:	e002      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	617b      	str	r3, [r7, #20]
      break;
 8002f62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	3301      	adds	r3, #1
 8002f70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f72:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	fb03 f202 	mul.w	r2, r3, r2
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	0e5b      	lsrs	r3, r3, #25
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	3301      	adds	r3, #1
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fa4:	69bb      	ldr	r3, [r7, #24]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3724      	adds	r7, #36	; 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	0800a494 	.word	0x0800a494
 8002fbc:	00f42400 	.word	0x00f42400
 8002fc0:	007a1200 	.word	0x007a1200

08002fc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20000000 	.word	0x20000000

08002fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fe0:	f7ff fff0 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	4904      	ldr	r1, [pc, #16]	; (8003004 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ff2:	5ccb      	ldrb	r3, [r1, r3]
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40021000 	.word	0x40021000
 8003004:	0800a48c 	.word	0x0800a48c

08003008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800300c:	f7ff ffda 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 8003010:	4602      	mov	r2, r0
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	0adb      	lsrs	r3, r3, #11
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	4904      	ldr	r1, [pc, #16]	; (8003030 <HAL_RCC_GetPCLK2Freq+0x28>)
 800301e:	5ccb      	ldrb	r3, [r1, r3]
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000
 8003030:	0800a48c 	.word	0x0800a48c

08003034 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003040:	4b2a      	ldr	r3, [pc, #168]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800304c:	f7ff f9ee 	bl	800242c <HAL_PWREx_GetVoltageRange>
 8003050:	6178      	str	r0, [r7, #20]
 8003052:	e014      	b.n	800307e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003054:	4b25      	ldr	r3, [pc, #148]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	4a24      	ldr	r2, [pc, #144]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800305a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800305e:	6593      	str	r3, [r2, #88]	; 0x58
 8003060:	4b22      	ldr	r3, [pc, #136]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800306c:	f7ff f9de 	bl	800242c <HAL_PWREx_GetVoltageRange>
 8003070:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003072:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	4a1d      	ldr	r2, [pc, #116]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800307c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003084:	d10b      	bne.n	800309e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b80      	cmp	r3, #128	; 0x80
 800308a:	d919      	bls.n	80030c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2ba0      	cmp	r3, #160	; 0xa0
 8003090:	d902      	bls.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003092:	2302      	movs	r3, #2
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	e013      	b.n	80030c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003098:	2301      	movs	r3, #1
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	e010      	b.n	80030c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b80      	cmp	r3, #128	; 0x80
 80030a2:	d902      	bls.n	80030aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030a4:	2303      	movs	r3, #3
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	e00a      	b.n	80030c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b80      	cmp	r3, #128	; 0x80
 80030ae:	d102      	bne.n	80030b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030b0:	2302      	movs	r3, #2
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	e004      	b.n	80030c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b70      	cmp	r3, #112	; 0x70
 80030ba:	d101      	bne.n	80030c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030bc:	2301      	movs	r3, #1
 80030be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f023 0207 	bic.w	r2, r3, #7
 80030c8:	4909      	ldr	r1, [pc, #36]	; (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030d0:	4b07      	ldr	r3, [pc, #28]	; (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d001      	beq.n	80030e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40022000 	.word	0x40022000

080030f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030fc:	2300      	movs	r3, #0
 80030fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003100:	2300      	movs	r3, #0
 8003102:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800310c:	2b00      	cmp	r3, #0
 800310e:	d041      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003114:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003118:	d02a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800311a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800311e:	d824      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003120:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003124:	d008      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003126:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800312a:	d81e      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003130:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003134:	d010      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003136:	e018      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003138:	4b86      	ldr	r3, [pc, #536]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4a85      	ldr	r2, [pc, #532]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003142:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003144:	e015      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3304      	adds	r3, #4
 800314a:	2100      	movs	r1, #0
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fabb 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 8003152:	4603      	mov	r3, r0
 8003154:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003156:	e00c      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3320      	adds	r3, #32
 800315c:	2100      	movs	r1, #0
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fba6 	bl	80038b0 <RCCEx_PLLSAI2_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003168:	e003      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	74fb      	strb	r3, [r7, #19]
      break;
 800316e:	e000      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003172:	7cfb      	ldrb	r3, [r7, #19]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10b      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003178:	4b76      	ldr	r3, [pc, #472]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003186:	4973      	ldr	r1, [pc, #460]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800318e:	e001      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003190:	7cfb      	ldrb	r3, [r7, #19]
 8003192:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d041      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031a8:	d02a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031ae:	d824      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031b4:	d008      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031ba:	d81e      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031c4:	d010      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031c6:	e018      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031c8:	4b62      	ldr	r3, [pc, #392]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a61      	ldr	r2, [pc, #388]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031d4:	e015      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3304      	adds	r3, #4
 80031da:	2100      	movs	r1, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fa73 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031e6:	e00c      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3320      	adds	r3, #32
 80031ec:	2100      	movs	r1, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fb5e 	bl	80038b0 <RCCEx_PLLSAI2_Config>
 80031f4:	4603      	mov	r3, r0
 80031f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031f8:	e003      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	74fb      	strb	r3, [r7, #19]
      break;
 80031fe:	e000      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003200:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003202:	7cfb      	ldrb	r3, [r7, #19]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10b      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003208:	4b52      	ldr	r3, [pc, #328]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003216:	494f      	ldr	r1, [pc, #316]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800321e:	e001      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003220:	7cfb      	ldrb	r3, [r7, #19]
 8003222:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80a0 	beq.w	8003372 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003232:	2300      	movs	r3, #0
 8003234:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003236:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003246:	2300      	movs	r3, #0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00d      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324c:	4b41      	ldr	r3, [pc, #260]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003250:	4a40      	ldr	r2, [pc, #256]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003256:	6593      	str	r3, [r2, #88]	; 0x58
 8003258:	4b3e      	ldr	r3, [pc, #248]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003264:	2301      	movs	r3, #1
 8003266:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003268:	4b3b      	ldr	r3, [pc, #236]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a3a      	ldr	r2, [pc, #232]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800326e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003272:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003274:	f7fe fc0c 	bl	8001a90 <HAL_GetTick>
 8003278:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800327a:	e009      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327c:	f7fe fc08 	bl	8001a90 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d902      	bls.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	74fb      	strb	r3, [r7, #19]
        break;
 800328e:	e005      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003290:	4b31      	ldr	r3, [pc, #196]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0ef      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d15c      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032a2:	4b2c      	ldr	r3, [pc, #176]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01f      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d019      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032c0:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032cc:	4b21      	ldr	r3, [pc, #132]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d2:	4a20      	ldr	r2, [pc, #128]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032dc:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e2:	4a1c      	ldr	r2, [pc, #112]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032ec:	4a19      	ldr	r2, [pc, #100]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d016      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fe:	f7fe fbc7 	bl	8001a90 <HAL_GetTick>
 8003302:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003304:	e00b      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003306:	f7fe fbc3 	bl	8001a90 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	f241 3288 	movw	r2, #5000	; 0x1388
 8003314:	4293      	cmp	r3, r2
 8003316:	d902      	bls.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	74fb      	strb	r3, [r7, #19]
            break;
 800331c:	e006      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800331e:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0ec      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800332c:	7cfb      	ldrb	r3, [r7, #19]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10c      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003332:	4b08      	ldr	r3, [pc, #32]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003342:	4904      	ldr	r1, [pc, #16]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800334a:	e009      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800334c:	7cfb      	ldrb	r3, [r7, #19]
 800334e:	74bb      	strb	r3, [r7, #18]
 8003350:	e006      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
 8003358:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335c:	7cfb      	ldrb	r3, [r7, #19]
 800335e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003360:	7c7b      	ldrb	r3, [r7, #17]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d105      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003366:	4b9e      	ldr	r3, [pc, #632]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	4a9d      	ldr	r2, [pc, #628]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003370:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800337e:	4b98      	ldr	r3, [pc, #608]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003384:	f023 0203 	bic.w	r2, r3, #3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338c:	4994      	ldr	r1, [pc, #592]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033a0:	4b8f      	ldr	r3, [pc, #572]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a6:	f023 020c 	bic.w	r2, r3, #12
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ae:	498c      	ldr	r1, [pc, #560]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033c2:	4b87      	ldr	r3, [pc, #540]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	4983      	ldr	r1, [pc, #524]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00a      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033e4:	4b7e      	ldr	r3, [pc, #504]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	497b      	ldr	r1, [pc, #492]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003406:	4b76      	ldr	r3, [pc, #472]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003414:	4972      	ldr	r1, [pc, #456]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0320 	and.w	r3, r3, #32
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003428:	4b6d      	ldr	r3, [pc, #436]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003436:	496a      	ldr	r1, [pc, #424]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800344a:	4b65      	ldr	r3, [pc, #404]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003450:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003458:	4961      	ldr	r1, [pc, #388]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800346c:	4b5c      	ldr	r3, [pc, #368]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003472:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347a:	4959      	ldr	r1, [pc, #356]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800348e:	4b54      	ldr	r3, [pc, #336]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003494:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349c:	4950      	ldr	r1, [pc, #320]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034b0:	4b4b      	ldr	r3, [pc, #300]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	4948      	ldr	r1, [pc, #288]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034d2:	4b43      	ldr	r3, [pc, #268]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e0:	493f      	ldr	r1, [pc, #252]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d028      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034f4:	4b3a      	ldr	r3, [pc, #232]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003502:	4937      	ldr	r1, [pc, #220]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800350e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003512:	d106      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003514:	4b32      	ldr	r3, [pc, #200]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4a31      	ldr	r2, [pc, #196]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800351e:	60d3      	str	r3, [r2, #12]
 8003520:	e011      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003526:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800352a:	d10c      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3304      	adds	r3, #4
 8003530:	2101      	movs	r1, #1
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f8c8 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 8003538:	4603      	mov	r3, r0
 800353a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003542:	7cfb      	ldrb	r3, [r7, #19]
 8003544:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d028      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003552:	4b23      	ldr	r3, [pc, #140]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003558:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	491f      	ldr	r1, [pc, #124]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003570:	d106      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003572:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	4a1a      	ldr	r2, [pc, #104]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003578:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800357c:	60d3      	str	r3, [r2, #12]
 800357e:	e011      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003584:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003588:	d10c      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3304      	adds	r3, #4
 800358e:	2101      	movs	r1, #1
 8003590:	4618      	mov	r0, r3
 8003592:	f000 f899 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 8003596:	4603      	mov	r3, r0
 8003598:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800359a:	7cfb      	ldrb	r3, [r7, #19]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d02b      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035be:	4908      	ldr	r1, [pc, #32]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ce:	d109      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d0:	4b03      	ldr	r3, [pc, #12]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4a02      	ldr	r2, [pc, #8]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035da:	60d3      	str	r3, [r2, #12]
 80035dc:	e014      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035ec:	d10c      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3304      	adds	r3, #4
 80035f2:	2101      	movs	r1, #1
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 f867 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035fe:	7cfb      	ldrb	r3, [r7, #19]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003604:	7cfb      	ldrb	r3, [r7, #19]
 8003606:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d02f      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003614:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003622:	4928      	ldr	r1, [pc, #160]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800362e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003632:	d10d      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3304      	adds	r3, #4
 8003638:	2102      	movs	r1, #2
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f844 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d014      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800364a:	7cfb      	ldrb	r3, [r7, #19]
 800364c:	74bb      	strb	r3, [r7, #18]
 800364e:	e011      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003658:	d10c      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3320      	adds	r3, #32
 800365e:	2102      	movs	r1, #2
 8003660:	4618      	mov	r0, r3
 8003662:	f000 f925 	bl	80038b0 <RCCEx_PLLSAI2_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800366a:	7cfb      	ldrb	r3, [r7, #19]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003670:	7cfb      	ldrb	r3, [r7, #19]
 8003672:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003680:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003686:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800368e:	490d      	ldr	r1, [pc, #52]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036a2:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036b2:	4904      	ldr	r1, [pc, #16]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40021000 	.word	0x40021000

080036c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036d6:	4b75      	ldr	r3, [pc, #468]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d018      	beq.n	8003714 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036e2:	4b72      	ldr	r3, [pc, #456]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f003 0203 	and.w	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d10d      	bne.n	800370e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
       ||
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036fa:	4b6c      	ldr	r3, [pc, #432]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
       ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d047      	beq.n	800379e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
 8003712:	e044      	b.n	800379e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d018      	beq.n	800374e <RCCEx_PLLSAI1_Config+0x86>
 800371c:	2b03      	cmp	r3, #3
 800371e:	d825      	bhi.n	800376c <RCCEx_PLLSAI1_Config+0xa4>
 8003720:	2b01      	cmp	r3, #1
 8003722:	d002      	beq.n	800372a <RCCEx_PLLSAI1_Config+0x62>
 8003724:	2b02      	cmp	r3, #2
 8003726:	d009      	beq.n	800373c <RCCEx_PLLSAI1_Config+0x74>
 8003728:	e020      	b.n	800376c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800372a:	4b60      	ldr	r3, [pc, #384]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d11d      	bne.n	8003772 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800373a:	e01a      	b.n	8003772 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800373c:	4b5b      	ldr	r3, [pc, #364]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d116      	bne.n	8003776 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800374c:	e013      	b.n	8003776 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800374e:	4b57      	ldr	r3, [pc, #348]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10f      	bne.n	800377a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800375a:	4b54      	ldr	r3, [pc, #336]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800376a:	e006      	b.n	800377a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
      break;
 8003770:	e004      	b.n	800377c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003772:	bf00      	nop
 8003774:	e002      	b.n	800377c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800377a:	bf00      	nop
    }

    if(status == HAL_OK)
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10d      	bne.n	800379e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003782:	4b4a      	ldr	r3, [pc, #296]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6819      	ldr	r1, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	3b01      	subs	r3, #1
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	430b      	orrs	r3, r1
 8003798:	4944      	ldr	r1, [pc, #272]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d17d      	bne.n	80038a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037a4:	4b41      	ldr	r3, [pc, #260]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a40      	ldr	r2, [pc, #256]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80037aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b0:	f7fe f96e 	bl	8001a90 <HAL_GetTick>
 80037b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037b6:	e009      	b.n	80037cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037b8:	f7fe f96a 	bl	8001a90 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d902      	bls.n	80037cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	73fb      	strb	r3, [r7, #15]
        break;
 80037ca:	e005      	b.n	80037d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037cc:	4b37      	ldr	r3, [pc, #220]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ef      	bne.n	80037b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d160      	bne.n	80038a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d111      	bne.n	8003808 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037e4:	4b31      	ldr	r3, [pc, #196]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6892      	ldr	r2, [r2, #8]
 80037f4:	0211      	lsls	r1, r2, #8
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68d2      	ldr	r2, [r2, #12]
 80037fa:	0912      	lsrs	r2, r2, #4
 80037fc:	0452      	lsls	r2, r2, #17
 80037fe:	430a      	orrs	r2, r1
 8003800:	492a      	ldr	r1, [pc, #168]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003802:	4313      	orrs	r3, r2
 8003804:	610b      	str	r3, [r1, #16]
 8003806:	e027      	b.n	8003858 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d112      	bne.n	8003834 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800380e:	4b27      	ldr	r3, [pc, #156]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003816:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6892      	ldr	r2, [r2, #8]
 800381e:	0211      	lsls	r1, r2, #8
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6912      	ldr	r2, [r2, #16]
 8003824:	0852      	lsrs	r2, r2, #1
 8003826:	3a01      	subs	r2, #1
 8003828:	0552      	lsls	r2, r2, #21
 800382a:	430a      	orrs	r2, r1
 800382c:	491f      	ldr	r1, [pc, #124]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800382e:	4313      	orrs	r3, r2
 8003830:	610b      	str	r3, [r1, #16]
 8003832:	e011      	b.n	8003858 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003834:	4b1d      	ldr	r3, [pc, #116]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800383c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6892      	ldr	r2, [r2, #8]
 8003844:	0211      	lsls	r1, r2, #8
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6952      	ldr	r2, [r2, #20]
 800384a:	0852      	lsrs	r2, r2, #1
 800384c:	3a01      	subs	r2, #1
 800384e:	0652      	lsls	r2, r2, #25
 8003850:	430a      	orrs	r2, r1
 8003852:	4916      	ldr	r1, [pc, #88]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003854:	4313      	orrs	r3, r2
 8003856:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003858:	4b14      	ldr	r3, [pc, #80]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a13      	ldr	r2, [pc, #76]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800385e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003862:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003864:	f7fe f914 	bl	8001a90 <HAL_GetTick>
 8003868:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800386a:	e009      	b.n	8003880 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800386c:	f7fe f910 	bl	8001a90 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d902      	bls.n	8003880 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	73fb      	strb	r3, [r7, #15]
          break;
 800387e:	e005      	b.n	800388c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003880:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0ef      	beq.n	800386c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003892:	4b06      	ldr	r3, [pc, #24]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003894:	691a      	ldr	r2, [r3, #16]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	4904      	ldr	r1, [pc, #16]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800389c:	4313      	orrs	r3, r2
 800389e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40021000 	.word	0x40021000

080038b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038be:	4b6a      	ldr	r3, [pc, #424]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d018      	beq.n	80038fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038ca:	4b67      	ldr	r3, [pc, #412]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 0203 	and.w	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d10d      	bne.n	80038f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
       ||
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d009      	beq.n	80038f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038e2:	4b61      	ldr	r3, [pc, #388]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	091b      	lsrs	r3, r3, #4
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
       ||
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d047      	beq.n	8003986 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
 80038fa:	e044      	b.n	8003986 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b03      	cmp	r3, #3
 8003902:	d018      	beq.n	8003936 <RCCEx_PLLSAI2_Config+0x86>
 8003904:	2b03      	cmp	r3, #3
 8003906:	d825      	bhi.n	8003954 <RCCEx_PLLSAI2_Config+0xa4>
 8003908:	2b01      	cmp	r3, #1
 800390a:	d002      	beq.n	8003912 <RCCEx_PLLSAI2_Config+0x62>
 800390c:	2b02      	cmp	r3, #2
 800390e:	d009      	beq.n	8003924 <RCCEx_PLLSAI2_Config+0x74>
 8003910:	e020      	b.n	8003954 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003912:	4b55      	ldr	r3, [pc, #340]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d11d      	bne.n	800395a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003922:	e01a      	b.n	800395a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003924:	4b50      	ldr	r3, [pc, #320]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392c:	2b00      	cmp	r3, #0
 800392e:	d116      	bne.n	800395e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003934:	e013      	b.n	800395e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003936:	4b4c      	ldr	r3, [pc, #304]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10f      	bne.n	8003962 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003942:	4b49      	ldr	r3, [pc, #292]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003952:	e006      	b.n	8003962 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
      break;
 8003958:	e004      	b.n	8003964 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800395a:	bf00      	nop
 800395c:	e002      	b.n	8003964 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800395e:	bf00      	nop
 8003960:	e000      	b.n	8003964 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003962:	bf00      	nop
    }

    if(status == HAL_OK)
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10d      	bne.n	8003986 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800396a:	4b3f      	ldr	r3, [pc, #252]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6819      	ldr	r1, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	3b01      	subs	r3, #1
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	430b      	orrs	r3, r1
 8003980:	4939      	ldr	r1, [pc, #228]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003982:	4313      	orrs	r3, r2
 8003984:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d167      	bne.n	8003a5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800398c:	4b36      	ldr	r3, [pc, #216]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a35      	ldr	r2, [pc, #212]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003998:	f7fe f87a 	bl	8001a90 <HAL_GetTick>
 800399c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800399e:	e009      	b.n	80039b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039a0:	f7fe f876 	bl	8001a90 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d902      	bls.n	80039b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	73fb      	strb	r3, [r7, #15]
        break;
 80039b2:	e005      	b.n	80039c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039b4:	4b2c      	ldr	r3, [pc, #176]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1ef      	bne.n	80039a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d14a      	bne.n	8003a5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d111      	bne.n	80039f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039cc:	4b26      	ldr	r3, [pc, #152]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6892      	ldr	r2, [r2, #8]
 80039dc:	0211      	lsls	r1, r2, #8
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	68d2      	ldr	r2, [r2, #12]
 80039e2:	0912      	lsrs	r2, r2, #4
 80039e4:	0452      	lsls	r2, r2, #17
 80039e6:	430a      	orrs	r2, r1
 80039e8:	491f      	ldr	r1, [pc, #124]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	614b      	str	r3, [r1, #20]
 80039ee:	e011      	b.n	8003a14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039f0:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6892      	ldr	r2, [r2, #8]
 8003a00:	0211      	lsls	r1, r2, #8
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6912      	ldr	r2, [r2, #16]
 8003a06:	0852      	lsrs	r2, r2, #1
 8003a08:	3a01      	subs	r2, #1
 8003a0a:	0652      	lsls	r2, r2, #25
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	4916      	ldr	r1, [pc, #88]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a14:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a13      	ldr	r2, [pc, #76]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fe f836 	bl	8001a90 <HAL_GetTick>
 8003a24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a26:	e009      	b.n	8003a3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a28:	f7fe f832 	bl	8001a90 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d902      	bls.n	8003a3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	73fb      	strb	r3, [r7, #15]
          break;
 8003a3a:	e005      	b.n	8003a48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0ef      	beq.n	8003a28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a50:	695a      	ldr	r2, [r3, #20]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	4904      	ldr	r1, [pc, #16]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000

08003a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e049      	b.n	8003b12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fd fda0 	bl	80015d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4610      	mov	r0, r2
 8003aac:	f000 fae8 	bl	8004080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e049      	b.n	8003bc0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d106      	bne.n	8003b46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7fd fd29 	bl	8001598 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3304      	adds	r3, #4
 8003b56:	4619      	mov	r1, r3
 8003b58:	4610      	mov	r0, r2
 8003b5a:	f000 fa91 	bl	8004080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d122      	bne.n	8003c24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d11b      	bne.n	8003c24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0202 	mvn.w	r2, #2
 8003bf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fa1a 	bl	8004044 <HAL_TIM_IC_CaptureCallback>
 8003c10:	e005      	b.n	8003c1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fa0c 	bl	8004030 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 fa1d 	bl	8004058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d122      	bne.n	8003c78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d11b      	bne.n	8003c78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f06f 0204 	mvn.w	r2, #4
 8003c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f9f0 	bl	8004044 <HAL_TIM_IC_CaptureCallback>
 8003c64:	e005      	b.n	8003c72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f9e2 	bl	8004030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f9f3 	bl	8004058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d122      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f003 0308 	and.w	r3, r3, #8
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d11b      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f06f 0208 	mvn.w	r2, #8
 8003c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2204      	movs	r2, #4
 8003ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f9c6 	bl	8004044 <HAL_TIM_IC_CaptureCallback>
 8003cb8:	e005      	b.n	8003cc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f9b8 	bl	8004030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f9c9 	bl	8004058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0310 	and.w	r3, r3, #16
 8003cd6:	2b10      	cmp	r3, #16
 8003cd8:	d122      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b10      	cmp	r3, #16
 8003ce6:	d11b      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0210 	mvn.w	r2, #16
 8003cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2208      	movs	r2, #8
 8003cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f99c 	bl	8004044 <HAL_TIM_IC_CaptureCallback>
 8003d0c:	e005      	b.n	8003d1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f98e 	bl	8004030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f99f 	bl	8004058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d10e      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d107      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0201 	mvn.w	r2, #1
 8003d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fd f90a 	bl	8000f60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d56:	2b80      	cmp	r3, #128	; 0x80
 8003d58:	d10e      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d64:	2b80      	cmp	r3, #128	; 0x80
 8003d66:	d107      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fd86 	bl	8004884 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d86:	d10e      	bne.n	8003da6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d92:	2b80      	cmp	r3, #128	; 0x80
 8003d94:	d107      	bne.n	8003da6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fd79 	bl	8004898 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db0:	2b40      	cmp	r3, #64	; 0x40
 8003db2:	d10e      	bne.n	8003dd2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b40      	cmp	r3, #64	; 0x40
 8003dc0:	d107      	bne.n	8003dd2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f94d 	bl	800406c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d10e      	bne.n	8003dfe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b20      	cmp	r3, #32
 8003dec:	d107      	bne.n	8003dfe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f06f 0220 	mvn.w	r2, #32
 8003df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fd39 	bl	8004870 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dfe:	bf00      	nop
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e0ff      	b.n	8004026 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b14      	cmp	r3, #20
 8003e32:	f200 80f0 	bhi.w	8004016 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e36:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3c:	08003e91 	.word	0x08003e91
 8003e40:	08004017 	.word	0x08004017
 8003e44:	08004017 	.word	0x08004017
 8003e48:	08004017 	.word	0x08004017
 8003e4c:	08003ed1 	.word	0x08003ed1
 8003e50:	08004017 	.word	0x08004017
 8003e54:	08004017 	.word	0x08004017
 8003e58:	08004017 	.word	0x08004017
 8003e5c:	08003f13 	.word	0x08003f13
 8003e60:	08004017 	.word	0x08004017
 8003e64:	08004017 	.word	0x08004017
 8003e68:	08004017 	.word	0x08004017
 8003e6c:	08003f53 	.word	0x08003f53
 8003e70:	08004017 	.word	0x08004017
 8003e74:	08004017 	.word	0x08004017
 8003e78:	08004017 	.word	0x08004017
 8003e7c:	08003f95 	.word	0x08003f95
 8003e80:	08004017 	.word	0x08004017
 8003e84:	08004017 	.word	0x08004017
 8003e88:	08004017 	.word	0x08004017
 8003e8c:	08003fd5 	.word	0x08003fd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 f98c 	bl	80041b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0208 	orr.w	r2, r2, #8
 8003eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0204 	bic.w	r2, r2, #4
 8003eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6999      	ldr	r1, [r3, #24]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	619a      	str	r2, [r3, #24]
      break;
 8003ece:	e0a5      	b.n	800401c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f9fc 	bl	80042d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6999      	ldr	r1, [r3, #24]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	021a      	lsls	r2, r3, #8
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	619a      	str	r2, [r3, #24]
      break;
 8003f10:	e084      	b.n	800401c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 fa65 	bl	80043e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0208 	orr.w	r2, r2, #8
 8003f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0204 	bic.w	r2, r2, #4
 8003f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69d9      	ldr	r1, [r3, #28]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	61da      	str	r2, [r3, #28]
      break;
 8003f50:	e064      	b.n	800401c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 facd 	bl	80044f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69da      	ldr	r2, [r3, #28]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69d9      	ldr	r1, [r3, #28]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	021a      	lsls	r2, r3, #8
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	61da      	str	r2, [r3, #28]
      break;
 8003f92:	e043      	b.n	800401c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fb16 	bl	80045cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0208 	orr.w	r2, r2, #8
 8003fae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0204 	bic.w	r2, r2, #4
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	691a      	ldr	r2, [r3, #16]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003fd2:	e023      	b.n	800401c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fb5a 	bl	8004694 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ffe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	021a      	lsls	r2, r3, #8
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004014:	e002      	b.n	800401c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	75fb      	strb	r3, [r7, #23]
      break;
 800401a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004024:	7dfb      	ldrb	r3, [r7, #23]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop

08004030 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a40      	ldr	r2, [pc, #256]	; (8004194 <TIM_Base_SetConfig+0x114>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d013      	beq.n	80040c0 <TIM_Base_SetConfig+0x40>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409e:	d00f      	beq.n	80040c0 <TIM_Base_SetConfig+0x40>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a3d      	ldr	r2, [pc, #244]	; (8004198 <TIM_Base_SetConfig+0x118>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00b      	beq.n	80040c0 <TIM_Base_SetConfig+0x40>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a3c      	ldr	r2, [pc, #240]	; (800419c <TIM_Base_SetConfig+0x11c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d007      	beq.n	80040c0 <TIM_Base_SetConfig+0x40>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a3b      	ldr	r2, [pc, #236]	; (80041a0 <TIM_Base_SetConfig+0x120>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d003      	beq.n	80040c0 <TIM_Base_SetConfig+0x40>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a3a      	ldr	r2, [pc, #232]	; (80041a4 <TIM_Base_SetConfig+0x124>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d108      	bne.n	80040d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a2f      	ldr	r2, [pc, #188]	; (8004194 <TIM_Base_SetConfig+0x114>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d01f      	beq.n	800411a <TIM_Base_SetConfig+0x9a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e0:	d01b      	beq.n	800411a <TIM_Base_SetConfig+0x9a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a2c      	ldr	r2, [pc, #176]	; (8004198 <TIM_Base_SetConfig+0x118>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d017      	beq.n	800411a <TIM_Base_SetConfig+0x9a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a2b      	ldr	r2, [pc, #172]	; (800419c <TIM_Base_SetConfig+0x11c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d013      	beq.n	800411a <TIM_Base_SetConfig+0x9a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a2a      	ldr	r2, [pc, #168]	; (80041a0 <TIM_Base_SetConfig+0x120>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00f      	beq.n	800411a <TIM_Base_SetConfig+0x9a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a29      	ldr	r2, [pc, #164]	; (80041a4 <TIM_Base_SetConfig+0x124>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00b      	beq.n	800411a <TIM_Base_SetConfig+0x9a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a28      	ldr	r2, [pc, #160]	; (80041a8 <TIM_Base_SetConfig+0x128>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d007      	beq.n	800411a <TIM_Base_SetConfig+0x9a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a27      	ldr	r2, [pc, #156]	; (80041ac <TIM_Base_SetConfig+0x12c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d003      	beq.n	800411a <TIM_Base_SetConfig+0x9a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a26      	ldr	r2, [pc, #152]	; (80041b0 <TIM_Base_SetConfig+0x130>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d108      	bne.n	800412c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a10      	ldr	r2, [pc, #64]	; (8004194 <TIM_Base_SetConfig+0x114>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00f      	beq.n	8004178 <TIM_Base_SetConfig+0xf8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a12      	ldr	r2, [pc, #72]	; (80041a4 <TIM_Base_SetConfig+0x124>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00b      	beq.n	8004178 <TIM_Base_SetConfig+0xf8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a11      	ldr	r2, [pc, #68]	; (80041a8 <TIM_Base_SetConfig+0x128>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d007      	beq.n	8004178 <TIM_Base_SetConfig+0xf8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a10      	ldr	r2, [pc, #64]	; (80041ac <TIM_Base_SetConfig+0x12c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d003      	beq.n	8004178 <TIM_Base_SetConfig+0xf8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a0f      	ldr	r2, [pc, #60]	; (80041b0 <TIM_Base_SetConfig+0x130>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d103      	bne.n	8004180 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	615a      	str	r2, [r3, #20]
}
 8004186:	bf00      	nop
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40012c00 	.word	0x40012c00
 8004198:	40000400 	.word	0x40000400
 800419c:	40000800 	.word	0x40000800
 80041a0:	40000c00 	.word	0x40000c00
 80041a4:	40013400 	.word	0x40013400
 80041a8:	40014000 	.word	0x40014000
 80041ac:	40014400 	.word	0x40014400
 80041b0:	40014800 	.word	0x40014800

080041b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f023 0201 	bic.w	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0303 	bic.w	r3, r3, #3
 80041ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f023 0302 	bic.w	r3, r3, #2
 8004200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a2c      	ldr	r2, [pc, #176]	; (80042c0 <TIM_OC1_SetConfig+0x10c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00f      	beq.n	8004234 <TIM_OC1_SetConfig+0x80>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a2b      	ldr	r2, [pc, #172]	; (80042c4 <TIM_OC1_SetConfig+0x110>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00b      	beq.n	8004234 <TIM_OC1_SetConfig+0x80>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a2a      	ldr	r2, [pc, #168]	; (80042c8 <TIM_OC1_SetConfig+0x114>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d007      	beq.n	8004234 <TIM_OC1_SetConfig+0x80>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a29      	ldr	r2, [pc, #164]	; (80042cc <TIM_OC1_SetConfig+0x118>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d003      	beq.n	8004234 <TIM_OC1_SetConfig+0x80>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a28      	ldr	r2, [pc, #160]	; (80042d0 <TIM_OC1_SetConfig+0x11c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d10c      	bne.n	800424e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f023 0308 	bic.w	r3, r3, #8
 800423a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	4313      	orrs	r3, r2
 8004244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f023 0304 	bic.w	r3, r3, #4
 800424c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a1b      	ldr	r2, [pc, #108]	; (80042c0 <TIM_OC1_SetConfig+0x10c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00f      	beq.n	8004276 <TIM_OC1_SetConfig+0xc2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a1a      	ldr	r2, [pc, #104]	; (80042c4 <TIM_OC1_SetConfig+0x110>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00b      	beq.n	8004276 <TIM_OC1_SetConfig+0xc2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a19      	ldr	r2, [pc, #100]	; (80042c8 <TIM_OC1_SetConfig+0x114>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d007      	beq.n	8004276 <TIM_OC1_SetConfig+0xc2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a18      	ldr	r2, [pc, #96]	; (80042cc <TIM_OC1_SetConfig+0x118>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d003      	beq.n	8004276 <TIM_OC1_SetConfig+0xc2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a17      	ldr	r2, [pc, #92]	; (80042d0 <TIM_OC1_SetConfig+0x11c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d111      	bne.n	800429a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800427c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	4313      	orrs	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	621a      	str	r2, [r3, #32]
}
 80042b4:	bf00      	nop
 80042b6:	371c      	adds	r7, #28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	40012c00 	.word	0x40012c00
 80042c4:	40013400 	.word	0x40013400
 80042c8:	40014000 	.word	0x40014000
 80042cc:	40014400 	.word	0x40014400
 80042d0:	40014800 	.word	0x40014800

080042d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f023 0210 	bic.w	r2, r3, #16
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4313      	orrs	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f023 0320 	bic.w	r3, r3, #32
 8004322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	4313      	orrs	r3, r2
 800432e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a28      	ldr	r2, [pc, #160]	; (80043d4 <TIM_OC2_SetConfig+0x100>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d003      	beq.n	8004340 <TIM_OC2_SetConfig+0x6c>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a27      	ldr	r2, [pc, #156]	; (80043d8 <TIM_OC2_SetConfig+0x104>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d10d      	bne.n	800435c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	4313      	orrs	r3, r2
 8004352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800435a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <TIM_OC2_SetConfig+0x100>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d00f      	beq.n	8004384 <TIM_OC2_SetConfig+0xb0>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a1c      	ldr	r2, [pc, #112]	; (80043d8 <TIM_OC2_SetConfig+0x104>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00b      	beq.n	8004384 <TIM_OC2_SetConfig+0xb0>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a1b      	ldr	r2, [pc, #108]	; (80043dc <TIM_OC2_SetConfig+0x108>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d007      	beq.n	8004384 <TIM_OC2_SetConfig+0xb0>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a1a      	ldr	r2, [pc, #104]	; (80043e0 <TIM_OC2_SetConfig+0x10c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d003      	beq.n	8004384 <TIM_OC2_SetConfig+0xb0>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a19      	ldr	r2, [pc, #100]	; (80043e4 <TIM_OC2_SetConfig+0x110>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d113      	bne.n	80043ac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800438a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004392:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	621a      	str	r2, [r3, #32]
}
 80043c6:	bf00      	nop
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40012c00 	.word	0x40012c00
 80043d8:	40013400 	.word	0x40013400
 80043dc:	40014000 	.word	0x40014000
 80043e0:	40014400 	.word	0x40014400
 80043e4:	40014800 	.word	0x40014800

080043e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0303 	bic.w	r3, r3, #3
 8004422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	021b      	lsls	r3, r3, #8
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	4313      	orrs	r3, r2
 8004440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a27      	ldr	r2, [pc, #156]	; (80044e4 <TIM_OC3_SetConfig+0xfc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d003      	beq.n	8004452 <TIM_OC3_SetConfig+0x6a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a26      	ldr	r2, [pc, #152]	; (80044e8 <TIM_OC3_SetConfig+0x100>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d10d      	bne.n	800446e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004458:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800446c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a1c      	ldr	r2, [pc, #112]	; (80044e4 <TIM_OC3_SetConfig+0xfc>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00f      	beq.n	8004496 <TIM_OC3_SetConfig+0xae>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a1b      	ldr	r2, [pc, #108]	; (80044e8 <TIM_OC3_SetConfig+0x100>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00b      	beq.n	8004496 <TIM_OC3_SetConfig+0xae>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a1a      	ldr	r2, [pc, #104]	; (80044ec <TIM_OC3_SetConfig+0x104>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d007      	beq.n	8004496 <TIM_OC3_SetConfig+0xae>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a19      	ldr	r2, [pc, #100]	; (80044f0 <TIM_OC3_SetConfig+0x108>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d003      	beq.n	8004496 <TIM_OC3_SetConfig+0xae>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a18      	ldr	r2, [pc, #96]	; (80044f4 <TIM_OC3_SetConfig+0x10c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d113      	bne.n	80044be <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800449c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	621a      	str	r2, [r3, #32]
}
 80044d8:	bf00      	nop
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	40012c00 	.word	0x40012c00
 80044e8:	40013400 	.word	0x40013400
 80044ec:	40014000 	.word	0x40014000
 80044f0:	40014400 	.word	0x40014400
 80044f4:	40014800 	.word	0x40014800

080044f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	031b      	lsls	r3, r3, #12
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a18      	ldr	r2, [pc, #96]	; (80045b8 <TIM_OC4_SetConfig+0xc0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00f      	beq.n	800457c <TIM_OC4_SetConfig+0x84>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a17      	ldr	r2, [pc, #92]	; (80045bc <TIM_OC4_SetConfig+0xc4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00b      	beq.n	800457c <TIM_OC4_SetConfig+0x84>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a16      	ldr	r2, [pc, #88]	; (80045c0 <TIM_OC4_SetConfig+0xc8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d007      	beq.n	800457c <TIM_OC4_SetConfig+0x84>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a15      	ldr	r2, [pc, #84]	; (80045c4 <TIM_OC4_SetConfig+0xcc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_OC4_SetConfig+0x84>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a14      	ldr	r2, [pc, #80]	; (80045c8 <TIM_OC4_SetConfig+0xd0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d109      	bne.n	8004590 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004582:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	019b      	lsls	r3, r3, #6
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	4313      	orrs	r3, r2
 800458e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	621a      	str	r2, [r3, #32]
}
 80045aa:	bf00      	nop
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40012c00 	.word	0x40012c00
 80045bc:	40013400 	.word	0x40013400
 80045c0:	40014000 	.word	0x40014000
 80045c4:	40014400 	.word	0x40014400
 80045c8:	40014800 	.word	0x40014800

080045cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004610:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	041b      	lsls	r3, r3, #16
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a17      	ldr	r2, [pc, #92]	; (8004680 <TIM_OC5_SetConfig+0xb4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d00f      	beq.n	8004646 <TIM_OC5_SetConfig+0x7a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a16      	ldr	r2, [pc, #88]	; (8004684 <TIM_OC5_SetConfig+0xb8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00b      	beq.n	8004646 <TIM_OC5_SetConfig+0x7a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a15      	ldr	r2, [pc, #84]	; (8004688 <TIM_OC5_SetConfig+0xbc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d007      	beq.n	8004646 <TIM_OC5_SetConfig+0x7a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a14      	ldr	r2, [pc, #80]	; (800468c <TIM_OC5_SetConfig+0xc0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d003      	beq.n	8004646 <TIM_OC5_SetConfig+0x7a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a13      	ldr	r2, [pc, #76]	; (8004690 <TIM_OC5_SetConfig+0xc4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d109      	bne.n	800465a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800464c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	621a      	str	r2, [r3, #32]
}
 8004674:	bf00      	nop
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40013400 	.word	0x40013400
 8004688:	40014000 	.word	0x40014000
 800468c:	40014400 	.word	0x40014400
 8004690:	40014800 	.word	0x40014800

08004694 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	021b      	lsls	r3, r3, #8
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	051b      	lsls	r3, r3, #20
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a18      	ldr	r2, [pc, #96]	; (800474c <TIM_OC6_SetConfig+0xb8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d00f      	beq.n	8004710 <TIM_OC6_SetConfig+0x7c>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a17      	ldr	r2, [pc, #92]	; (8004750 <TIM_OC6_SetConfig+0xbc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00b      	beq.n	8004710 <TIM_OC6_SetConfig+0x7c>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a16      	ldr	r2, [pc, #88]	; (8004754 <TIM_OC6_SetConfig+0xc0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d007      	beq.n	8004710 <TIM_OC6_SetConfig+0x7c>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a15      	ldr	r2, [pc, #84]	; (8004758 <TIM_OC6_SetConfig+0xc4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d003      	beq.n	8004710 <TIM_OC6_SetConfig+0x7c>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a14      	ldr	r2, [pc, #80]	; (800475c <TIM_OC6_SetConfig+0xc8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d109      	bne.n	8004724 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004716:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	029b      	lsls	r3, r3, #10
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	621a      	str	r2, [r3, #32]
}
 800473e:	bf00      	nop
 8004740:	371c      	adds	r7, #28
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40012c00 	.word	0x40012c00
 8004750:	40013400 	.word	0x40013400
 8004754:	40014000 	.word	0x40014000
 8004758:	40014400 	.word	0x40014400
 800475c:	40014800 	.word	0x40014800

08004760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004774:	2302      	movs	r3, #2
 8004776:	e068      	b.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a2e      	ldr	r2, [pc, #184]	; (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d004      	beq.n	80047ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a2d      	ldr	r2, [pc, #180]	; (800485c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d108      	bne.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a1e      	ldr	r2, [pc, #120]	; (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d01d      	beq.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ea:	d018      	beq.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a1b      	ldr	r2, [pc, #108]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d013      	beq.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a1a      	ldr	r2, [pc, #104]	; (8004864 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d00e      	beq.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a18      	ldr	r2, [pc, #96]	; (8004868 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d009      	beq.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a13      	ldr	r2, [pc, #76]	; (800485c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d004      	beq.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a14      	ldr	r2, [pc, #80]	; (800486c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d10c      	bne.n	8004838 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004824:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	4313      	orrs	r3, r2
 800482e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40012c00 	.word	0x40012c00
 800485c:	40013400 	.word	0x40013400
 8004860:	40000400 	.word	0x40000400
 8004864:	40000800 	.word	0x40000800
 8004868:	40000c00 	.word	0x40000c00
 800486c:	40014000 	.word	0x40014000

08004870 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e040      	b.n	8004940 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fc fee0 	bl	8001694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2224      	movs	r2, #36	; 0x24
 80048d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fc94 	bl	8005218 <UART_SetConfig>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e022      	b.n	8004940 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 ff40 	bl	8005788 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004916:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004926:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 ffc7 	bl	80058cc <UART_CheckIdleState>
 800493e:	4603      	mov	r3, r0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	; 0x28
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800495c:	2b20      	cmp	r3, #32
 800495e:	f040 8082 	bne.w	8004a66 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <HAL_UART_Transmit+0x26>
 8004968:	88fb      	ldrh	r3, [r7, #6]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e07a      	b.n	8004a68 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_UART_Transmit+0x38>
 800497c:	2302      	movs	r3, #2
 800497e:	e073      	b.n	8004a68 <HAL_UART_Transmit+0x120>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2221      	movs	r2, #33	; 0x21
 8004994:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004996:	f7fd f87b 	bl	8001a90 <HAL_GetTick>
 800499a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	88fa      	ldrh	r2, [r7, #6]
 80049a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	88fa      	ldrh	r2, [r7, #6]
 80049a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b4:	d108      	bne.n	80049c8 <HAL_UART_Transmit+0x80>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d104      	bne.n	80049c8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80049be:	2300      	movs	r3, #0
 80049c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	61bb      	str	r3, [r7, #24]
 80049c6:	e003      	b.n	80049d0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049cc:	2300      	movs	r3, #0
 80049ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80049d8:	e02d      	b.n	8004a36 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2200      	movs	r2, #0
 80049e2:	2180      	movs	r1, #128	; 0x80
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 ffba 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e039      	b.n	8004a68 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10b      	bne.n	8004a12 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	881a      	ldrh	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a06:	b292      	uxth	r2, r2
 8004a08:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	3302      	adds	r3, #2
 8004a0e:	61bb      	str	r3, [r7, #24]
 8004a10:	e008      	b.n	8004a24 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	781a      	ldrb	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	b292      	uxth	r2, r2
 8004a1c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	3301      	adds	r3, #1
 8004a22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1cb      	bne.n	80049da <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2140      	movs	r1, #64	; 0x40
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 ff86 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e005      	b.n	8004a68 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	e000      	b.n	8004a68 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004a66:	2302      	movs	r3, #2
  }
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3720      	adds	r7, #32
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08a      	sub	sp, #40	; 0x28
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a84:	2b20      	cmp	r3, #32
 8004a86:	f040 80bf 	bne.w	8004c08 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <HAL_UART_Receive+0x26>
 8004a90:	88fb      	ldrh	r3, [r7, #6]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e0b7      	b.n	8004c0a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_UART_Receive+0x38>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e0b0      	b.n	8004c0a <HAL_UART_Receive+0x19a>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2222      	movs	r2, #34	; 0x22
 8004abc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ac4:	f7fc ffe4 	bl	8001a90 <HAL_GetTick>
 8004ac8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	88fa      	ldrh	r2, [r7, #6]
 8004ace:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	88fa      	ldrh	r2, [r7, #6]
 8004ad6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae2:	d10e      	bne.n	8004b02 <HAL_UART_Receive+0x92>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d105      	bne.n	8004af8 <HAL_UART_Receive+0x88>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004af2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004af6:	e02d      	b.n	8004b54 <HAL_UART_Receive+0xe4>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	22ff      	movs	r2, #255	; 0xff
 8004afc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b00:	e028      	b.n	8004b54 <HAL_UART_Receive+0xe4>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10d      	bne.n	8004b26 <HAL_UART_Receive+0xb6>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d104      	bne.n	8004b1c <HAL_UART_Receive+0xac>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	22ff      	movs	r2, #255	; 0xff
 8004b16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b1a:	e01b      	b.n	8004b54 <HAL_UART_Receive+0xe4>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	227f      	movs	r2, #127	; 0x7f
 8004b20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b24:	e016      	b.n	8004b54 <HAL_UART_Receive+0xe4>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b2e:	d10d      	bne.n	8004b4c <HAL_UART_Receive+0xdc>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d104      	bne.n	8004b42 <HAL_UART_Receive+0xd2>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	227f      	movs	r2, #127	; 0x7f
 8004b3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b40:	e008      	b.n	8004b54 <HAL_UART_Receive+0xe4>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	223f      	movs	r2, #63	; 0x3f
 8004b46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b4a:	e003      	b.n	8004b54 <HAL_UART_Receive+0xe4>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b5a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b64:	d108      	bne.n	8004b78 <HAL_UART_Receive+0x108>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d104      	bne.n	8004b78 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	61bb      	str	r3, [r7, #24]
 8004b76:	e003      	b.n	8004b80 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004b88:	e033      	b.n	8004bf2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2200      	movs	r2, #0
 8004b92:	2120      	movs	r1, #32
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 fee2 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e032      	b.n	8004c0a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10c      	bne.n	8004bc4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	8a7b      	ldrh	r3, [r7, #18]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	3302      	adds	r3, #2
 8004bc0:	61bb      	str	r3, [r7, #24]
 8004bc2:	e00d      	b.n	8004be0 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	8a7b      	ldrh	r3, [r7, #18]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1c5      	bne.n	8004b8a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2220      	movs	r2, #32
 8004c02:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	e000      	b.n	8004c0a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004c08:	2302      	movs	r3, #2
  }
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3720      	adds	r7, #32
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
	...

08004c14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b0ba      	sub	sp, #232	; 0xe8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004c3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004c42:	4013      	ands	r3, r2
 8004c44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004c48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d115      	bne.n	8004c7c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00f      	beq.n	8004c7c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d009      	beq.n	8004c7c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 82a6 	beq.w	80051be <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	4798      	blx	r3
      }
      return;
 8004c7a:	e2a0      	b.n	80051be <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004c7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8117 	beq.w	8004eb4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004c92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004c96:	4b85      	ldr	r3, [pc, #532]	; (8004eac <HAL_UART_IRQHandler+0x298>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 810a 	beq.w	8004eb4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d011      	beq.n	8004cd0 <HAL_UART_IRQHandler+0xbc>
 8004cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00b      	beq.n	8004cd0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cc6:	f043 0201 	orr.w	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d011      	beq.n	8004d00 <HAL_UART_IRQHandler+0xec>
 8004cdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00b      	beq.n	8004d00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2202      	movs	r2, #2
 8004cee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cf6:	f043 0204 	orr.w	r2, r3, #4
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d011      	beq.n	8004d30 <HAL_UART_IRQHandler+0x11c>
 8004d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00b      	beq.n	8004d30 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d26:	f043 0202 	orr.w	r2, r3, #2
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d017      	beq.n	8004d6c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d105      	bne.n	8004d54 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00b      	beq.n	8004d6c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2208      	movs	r2, #8
 8004d5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d62:	f043 0208 	orr.w	r2, r3, #8
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d012      	beq.n	8004d9e <HAL_UART_IRQHandler+0x18a>
 8004d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00c      	beq.n	8004d9e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d94:	f043 0220 	orr.w	r2, r3, #32
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 820c 	beq.w	80051c2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00d      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d007      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de6:	2b40      	cmp	r3, #64	; 0x40
 8004de8:	d005      	beq.n	8004df6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d04f      	beq.n	8004e96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fe75 	bl	8005ae6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e06:	2b40      	cmp	r3, #64	; 0x40
 8004e08:	d141      	bne.n	8004e8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3308      	adds	r3, #8
 8004e10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e18:	e853 3f00 	ldrex	r3, [r3]
 8004e1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3308      	adds	r3, #8
 8004e32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1d9      	bne.n	8004e0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d013      	beq.n	8004e86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e62:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <HAL_UART_IRQHandler+0x29c>)
 8004e64:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fc ff6b 	bl	8001d46 <HAL_DMA_Abort_IT>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d017      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004e80:	4610      	mov	r0, r2
 8004e82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e84:	e00f      	b.n	8004ea6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f9b0 	bl	80051ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8c:	e00b      	b.n	8004ea6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f9ac 	bl	80051ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e94:	e007      	b.n	8004ea6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f9a8 	bl	80051ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004ea4:	e18d      	b.n	80051c2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea6:	bf00      	nop
    return;
 8004ea8:	e18b      	b.n	80051c2 <HAL_UART_IRQHandler+0x5ae>
 8004eaa:	bf00      	nop
 8004eac:	04000120 	.word	0x04000120
 8004eb0:	08005bad 	.word	0x08005bad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	f040 8146 	bne.w	800514a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 813f 	beq.w	800514a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 8138 	beq.w	800514a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2210      	movs	r2, #16
 8004ee0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eec:	2b40      	cmp	r3, #64	; 0x40
 8004eee:	f040 80b4 	bne.w	800505a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004efe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 815f 	beq.w	80051c6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f12:	429a      	cmp	r2, r3
 8004f14:	f080 8157 	bcs.w	80051c6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f040 8085 	bne.w	800503e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1da      	bne.n	8004f34 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3308      	adds	r3, #8
 8004f84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3308      	adds	r3, #8
 8004f9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fa2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004faa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fae:	e841 2300 	strex	r3, r2, [r1]
 8004fb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e1      	bne.n	8004f7e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3308      	adds	r3, #8
 8004fc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
 8004fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3308      	adds	r3, #8
 8004fda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004fde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fe0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004fe4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fe6:	e841 2300 	strex	r3, r2, [r1]
 8004fea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e3      	bne.n	8004fba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005006:	e853 3f00 	ldrex	r3, [r3]
 800500a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800500c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800500e:	f023 0310 	bic.w	r3, r3, #16
 8005012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005020:	65bb      	str	r3, [r7, #88]	; 0x58
 8005022:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005024:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005026:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005028:	e841 2300 	strex	r3, r2, [r1]
 800502c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800502e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e4      	bne.n	8004ffe <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005038:	4618      	mov	r0, r3
 800503a:	f7fc fe46 	bl	8001cca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800504a:	b29b      	uxth	r3, r3
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	b29b      	uxth	r3, r3
 8005050:	4619      	mov	r1, r3
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f8d4 	bl	8005200 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005058:	e0b5      	b.n	80051c6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005066:	b29b      	uxth	r3, r3
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 80a7 	beq.w	80051ca <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800507c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 80a2 	beq.w	80051ca <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005096:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800509a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050a8:	647b      	str	r3, [r7, #68]	; 0x44
 80050aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e4      	bne.n	8005086 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3308      	adds	r3, #8
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	e853 3f00 	ldrex	r3, [r3]
 80050ca:	623b      	str	r3, [r7, #32]
   return(result);
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	f023 0301 	bic.w	r3, r3, #1
 80050d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	3308      	adds	r3, #8
 80050dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050e0:	633a      	str	r2, [r7, #48]	; 0x30
 80050e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e3      	bne.n	80050bc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	e853 3f00 	ldrex	r3, [r3]
 8005112:	60fb      	str	r3, [r7, #12]
   return(result);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0310 	bic.w	r3, r3, #16
 800511a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005128:	61fb      	str	r3, [r7, #28]
 800512a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512c:	69b9      	ldr	r1, [r7, #24]
 800512e:	69fa      	ldr	r2, [r7, #28]
 8005130:	e841 2300 	strex	r3, r2, [r1]
 8005134:	617b      	str	r3, [r7, #20]
   return(result);
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e4      	bne.n	8005106 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800513c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005140:	4619      	mov	r1, r3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f85c 	bl	8005200 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005148:	e03f      	b.n	80051ca <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800514a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800514e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00e      	beq.n	8005174 <HAL_UART_IRQHandler+0x560>
 8005156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800515a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d008      	beq.n	8005174 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800516a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fd5d 	bl	8005c2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005172:	e02d      	b.n	80051d0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00e      	beq.n	800519e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005188:	2b00      	cmp	r3, #0
 800518a:	d008      	beq.n	800519e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01c      	beq.n	80051ce <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	4798      	blx	r3
    }
    return;
 800519c:	e017      	b.n	80051ce <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800519e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d012      	beq.n	80051d0 <HAL_UART_IRQHandler+0x5bc>
 80051aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00c      	beq.n	80051d0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fd0e 	bl	8005bd8 <UART_EndTransmit_IT>
    return;
 80051bc:	e008      	b.n	80051d0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80051be:	bf00      	nop
 80051c0:	e006      	b.n	80051d0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80051c2:	bf00      	nop
 80051c4:	e004      	b.n	80051d0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80051c6:	bf00      	nop
 80051c8:	e002      	b.n	80051d0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80051ca:	bf00      	nop
 80051cc:	e000      	b.n	80051d0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80051ce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80051d0:	37e8      	adds	r7, #232	; 0xe8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop

080051d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800521c:	b08a      	sub	sp, #40	; 0x28
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	431a      	orrs	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	431a      	orrs	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	4313      	orrs	r3, r2
 800523e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	4ba4      	ldr	r3, [pc, #656]	; (80054d8 <UART_SetConfig+0x2c0>)
 8005248:	4013      	ands	r3, r2
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005250:	430b      	orrs	r3, r1
 8005252:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a99      	ldr	r2, [pc, #612]	; (80054dc <UART_SetConfig+0x2c4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d004      	beq.n	8005284 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005280:	4313      	orrs	r3, r2
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005294:	430a      	orrs	r2, r1
 8005296:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a90      	ldr	r2, [pc, #576]	; (80054e0 <UART_SetConfig+0x2c8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d126      	bne.n	80052f0 <UART_SetConfig+0xd8>
 80052a2:	4b90      	ldr	r3, [pc, #576]	; (80054e4 <UART_SetConfig+0x2cc>)
 80052a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d81b      	bhi.n	80052e8 <UART_SetConfig+0xd0>
 80052b0:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <UART_SetConfig+0xa0>)
 80052b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b6:	bf00      	nop
 80052b8:	080052c9 	.word	0x080052c9
 80052bc:	080052d9 	.word	0x080052d9
 80052c0:	080052d1 	.word	0x080052d1
 80052c4:	080052e1 	.word	0x080052e1
 80052c8:	2301      	movs	r3, #1
 80052ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ce:	e116      	b.n	80054fe <UART_SetConfig+0x2e6>
 80052d0:	2302      	movs	r3, #2
 80052d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d6:	e112      	b.n	80054fe <UART_SetConfig+0x2e6>
 80052d8:	2304      	movs	r3, #4
 80052da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052de:	e10e      	b.n	80054fe <UART_SetConfig+0x2e6>
 80052e0:	2308      	movs	r3, #8
 80052e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e6:	e10a      	b.n	80054fe <UART_SetConfig+0x2e6>
 80052e8:	2310      	movs	r3, #16
 80052ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ee:	e106      	b.n	80054fe <UART_SetConfig+0x2e6>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a7c      	ldr	r2, [pc, #496]	; (80054e8 <UART_SetConfig+0x2d0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d138      	bne.n	800536c <UART_SetConfig+0x154>
 80052fa:	4b7a      	ldr	r3, [pc, #488]	; (80054e4 <UART_SetConfig+0x2cc>)
 80052fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005300:	f003 030c 	and.w	r3, r3, #12
 8005304:	2b0c      	cmp	r3, #12
 8005306:	d82d      	bhi.n	8005364 <UART_SetConfig+0x14c>
 8005308:	a201      	add	r2, pc, #4	; (adr r2, 8005310 <UART_SetConfig+0xf8>)
 800530a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530e:	bf00      	nop
 8005310:	08005345 	.word	0x08005345
 8005314:	08005365 	.word	0x08005365
 8005318:	08005365 	.word	0x08005365
 800531c:	08005365 	.word	0x08005365
 8005320:	08005355 	.word	0x08005355
 8005324:	08005365 	.word	0x08005365
 8005328:	08005365 	.word	0x08005365
 800532c:	08005365 	.word	0x08005365
 8005330:	0800534d 	.word	0x0800534d
 8005334:	08005365 	.word	0x08005365
 8005338:	08005365 	.word	0x08005365
 800533c:	08005365 	.word	0x08005365
 8005340:	0800535d 	.word	0x0800535d
 8005344:	2300      	movs	r3, #0
 8005346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800534a:	e0d8      	b.n	80054fe <UART_SetConfig+0x2e6>
 800534c:	2302      	movs	r3, #2
 800534e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005352:	e0d4      	b.n	80054fe <UART_SetConfig+0x2e6>
 8005354:	2304      	movs	r3, #4
 8005356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800535a:	e0d0      	b.n	80054fe <UART_SetConfig+0x2e6>
 800535c:	2308      	movs	r3, #8
 800535e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005362:	e0cc      	b.n	80054fe <UART_SetConfig+0x2e6>
 8005364:	2310      	movs	r3, #16
 8005366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800536a:	e0c8      	b.n	80054fe <UART_SetConfig+0x2e6>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a5e      	ldr	r2, [pc, #376]	; (80054ec <UART_SetConfig+0x2d4>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d125      	bne.n	80053c2 <UART_SetConfig+0x1aa>
 8005376:	4b5b      	ldr	r3, [pc, #364]	; (80054e4 <UART_SetConfig+0x2cc>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005380:	2b30      	cmp	r3, #48	; 0x30
 8005382:	d016      	beq.n	80053b2 <UART_SetConfig+0x19a>
 8005384:	2b30      	cmp	r3, #48	; 0x30
 8005386:	d818      	bhi.n	80053ba <UART_SetConfig+0x1a2>
 8005388:	2b20      	cmp	r3, #32
 800538a:	d00a      	beq.n	80053a2 <UART_SetConfig+0x18a>
 800538c:	2b20      	cmp	r3, #32
 800538e:	d814      	bhi.n	80053ba <UART_SetConfig+0x1a2>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <UART_SetConfig+0x182>
 8005394:	2b10      	cmp	r3, #16
 8005396:	d008      	beq.n	80053aa <UART_SetConfig+0x192>
 8005398:	e00f      	b.n	80053ba <UART_SetConfig+0x1a2>
 800539a:	2300      	movs	r3, #0
 800539c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a0:	e0ad      	b.n	80054fe <UART_SetConfig+0x2e6>
 80053a2:	2302      	movs	r3, #2
 80053a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a8:	e0a9      	b.n	80054fe <UART_SetConfig+0x2e6>
 80053aa:	2304      	movs	r3, #4
 80053ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b0:	e0a5      	b.n	80054fe <UART_SetConfig+0x2e6>
 80053b2:	2308      	movs	r3, #8
 80053b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b8:	e0a1      	b.n	80054fe <UART_SetConfig+0x2e6>
 80053ba:	2310      	movs	r3, #16
 80053bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053c0:	e09d      	b.n	80054fe <UART_SetConfig+0x2e6>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a4a      	ldr	r2, [pc, #296]	; (80054f0 <UART_SetConfig+0x2d8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d125      	bne.n	8005418 <UART_SetConfig+0x200>
 80053cc:	4b45      	ldr	r3, [pc, #276]	; (80054e4 <UART_SetConfig+0x2cc>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053d6:	2bc0      	cmp	r3, #192	; 0xc0
 80053d8:	d016      	beq.n	8005408 <UART_SetConfig+0x1f0>
 80053da:	2bc0      	cmp	r3, #192	; 0xc0
 80053dc:	d818      	bhi.n	8005410 <UART_SetConfig+0x1f8>
 80053de:	2b80      	cmp	r3, #128	; 0x80
 80053e0:	d00a      	beq.n	80053f8 <UART_SetConfig+0x1e0>
 80053e2:	2b80      	cmp	r3, #128	; 0x80
 80053e4:	d814      	bhi.n	8005410 <UART_SetConfig+0x1f8>
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <UART_SetConfig+0x1d8>
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d008      	beq.n	8005400 <UART_SetConfig+0x1e8>
 80053ee:	e00f      	b.n	8005410 <UART_SetConfig+0x1f8>
 80053f0:	2300      	movs	r3, #0
 80053f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f6:	e082      	b.n	80054fe <UART_SetConfig+0x2e6>
 80053f8:	2302      	movs	r3, #2
 80053fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053fe:	e07e      	b.n	80054fe <UART_SetConfig+0x2e6>
 8005400:	2304      	movs	r3, #4
 8005402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005406:	e07a      	b.n	80054fe <UART_SetConfig+0x2e6>
 8005408:	2308      	movs	r3, #8
 800540a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800540e:	e076      	b.n	80054fe <UART_SetConfig+0x2e6>
 8005410:	2310      	movs	r3, #16
 8005412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005416:	e072      	b.n	80054fe <UART_SetConfig+0x2e6>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a35      	ldr	r2, [pc, #212]	; (80054f4 <UART_SetConfig+0x2dc>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d12a      	bne.n	8005478 <UART_SetConfig+0x260>
 8005422:	4b30      	ldr	r3, [pc, #192]	; (80054e4 <UART_SetConfig+0x2cc>)
 8005424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800542c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005430:	d01a      	beq.n	8005468 <UART_SetConfig+0x250>
 8005432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005436:	d81b      	bhi.n	8005470 <UART_SetConfig+0x258>
 8005438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800543c:	d00c      	beq.n	8005458 <UART_SetConfig+0x240>
 800543e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005442:	d815      	bhi.n	8005470 <UART_SetConfig+0x258>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <UART_SetConfig+0x238>
 8005448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544c:	d008      	beq.n	8005460 <UART_SetConfig+0x248>
 800544e:	e00f      	b.n	8005470 <UART_SetConfig+0x258>
 8005450:	2300      	movs	r3, #0
 8005452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005456:	e052      	b.n	80054fe <UART_SetConfig+0x2e6>
 8005458:	2302      	movs	r3, #2
 800545a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800545e:	e04e      	b.n	80054fe <UART_SetConfig+0x2e6>
 8005460:	2304      	movs	r3, #4
 8005462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005466:	e04a      	b.n	80054fe <UART_SetConfig+0x2e6>
 8005468:	2308      	movs	r3, #8
 800546a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546e:	e046      	b.n	80054fe <UART_SetConfig+0x2e6>
 8005470:	2310      	movs	r3, #16
 8005472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005476:	e042      	b.n	80054fe <UART_SetConfig+0x2e6>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a17      	ldr	r2, [pc, #92]	; (80054dc <UART_SetConfig+0x2c4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d13a      	bne.n	80054f8 <UART_SetConfig+0x2e0>
 8005482:	4b18      	ldr	r3, [pc, #96]	; (80054e4 <UART_SetConfig+0x2cc>)
 8005484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005488:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800548c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005490:	d01a      	beq.n	80054c8 <UART_SetConfig+0x2b0>
 8005492:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005496:	d81b      	bhi.n	80054d0 <UART_SetConfig+0x2b8>
 8005498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800549c:	d00c      	beq.n	80054b8 <UART_SetConfig+0x2a0>
 800549e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054a2:	d815      	bhi.n	80054d0 <UART_SetConfig+0x2b8>
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <UART_SetConfig+0x298>
 80054a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ac:	d008      	beq.n	80054c0 <UART_SetConfig+0x2a8>
 80054ae:	e00f      	b.n	80054d0 <UART_SetConfig+0x2b8>
 80054b0:	2300      	movs	r3, #0
 80054b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054b6:	e022      	b.n	80054fe <UART_SetConfig+0x2e6>
 80054b8:	2302      	movs	r3, #2
 80054ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054be:	e01e      	b.n	80054fe <UART_SetConfig+0x2e6>
 80054c0:	2304      	movs	r3, #4
 80054c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054c6:	e01a      	b.n	80054fe <UART_SetConfig+0x2e6>
 80054c8:	2308      	movs	r3, #8
 80054ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ce:	e016      	b.n	80054fe <UART_SetConfig+0x2e6>
 80054d0:	2310      	movs	r3, #16
 80054d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054d6:	e012      	b.n	80054fe <UART_SetConfig+0x2e6>
 80054d8:	efff69f3 	.word	0xefff69f3
 80054dc:	40008000 	.word	0x40008000
 80054e0:	40013800 	.word	0x40013800
 80054e4:	40021000 	.word	0x40021000
 80054e8:	40004400 	.word	0x40004400
 80054ec:	40004800 	.word	0x40004800
 80054f0:	40004c00 	.word	0x40004c00
 80054f4:	40005000 	.word	0x40005000
 80054f8:	2310      	movs	r3, #16
 80054fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a9f      	ldr	r2, [pc, #636]	; (8005780 <UART_SetConfig+0x568>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d17a      	bne.n	80055fe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005508:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800550c:	2b08      	cmp	r3, #8
 800550e:	d824      	bhi.n	800555a <UART_SetConfig+0x342>
 8005510:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <UART_SetConfig+0x300>)
 8005512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005516:	bf00      	nop
 8005518:	0800553d 	.word	0x0800553d
 800551c:	0800555b 	.word	0x0800555b
 8005520:	08005545 	.word	0x08005545
 8005524:	0800555b 	.word	0x0800555b
 8005528:	0800554b 	.word	0x0800554b
 800552c:	0800555b 	.word	0x0800555b
 8005530:	0800555b 	.word	0x0800555b
 8005534:	0800555b 	.word	0x0800555b
 8005538:	08005553 	.word	0x08005553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800553c:	f7fd fd4e 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 8005540:	61f8      	str	r0, [r7, #28]
        break;
 8005542:	e010      	b.n	8005566 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005544:	4b8f      	ldr	r3, [pc, #572]	; (8005784 <UART_SetConfig+0x56c>)
 8005546:	61fb      	str	r3, [r7, #28]
        break;
 8005548:	e00d      	b.n	8005566 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800554a:	f7fd fcaf 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 800554e:	61f8      	str	r0, [r7, #28]
        break;
 8005550:	e009      	b.n	8005566 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005556:	61fb      	str	r3, [r7, #28]
        break;
 8005558:	e005      	b.n	8005566 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005564:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 80fb 	beq.w	8005764 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	4413      	add	r3, r2
 8005578:	69fa      	ldr	r2, [r7, #28]
 800557a:	429a      	cmp	r2, r3
 800557c:	d305      	bcc.n	800558a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005584:	69fa      	ldr	r2, [r7, #28]
 8005586:	429a      	cmp	r2, r3
 8005588:	d903      	bls.n	8005592 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005590:	e0e8      	b.n	8005764 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	2200      	movs	r2, #0
 8005596:	461c      	mov	r4, r3
 8005598:	4615      	mov	r5, r2
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	022b      	lsls	r3, r5, #8
 80055a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80055a8:	0222      	lsls	r2, r4, #8
 80055aa:	68f9      	ldr	r1, [r7, #12]
 80055ac:	6849      	ldr	r1, [r1, #4]
 80055ae:	0849      	lsrs	r1, r1, #1
 80055b0:	2000      	movs	r0, #0
 80055b2:	4688      	mov	r8, r1
 80055b4:	4681      	mov	r9, r0
 80055b6:	eb12 0a08 	adds.w	sl, r2, r8
 80055ba:	eb43 0b09 	adc.w	fp, r3, r9
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	603b      	str	r3, [r7, #0]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055cc:	4650      	mov	r0, sl
 80055ce:	4659      	mov	r1, fp
 80055d0:	f7fa fe66 	bl	80002a0 <__aeabi_uldivmod>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4613      	mov	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055e2:	d308      	bcc.n	80055f6 <UART_SetConfig+0x3de>
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ea:	d204      	bcs.n	80055f6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	60da      	str	r2, [r3, #12]
 80055f4:	e0b6      	b.n	8005764 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055fc:	e0b2      	b.n	8005764 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005606:	d15e      	bne.n	80056c6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005608:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800560c:	2b08      	cmp	r3, #8
 800560e:	d828      	bhi.n	8005662 <UART_SetConfig+0x44a>
 8005610:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <UART_SetConfig+0x400>)
 8005612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005616:	bf00      	nop
 8005618:	0800563d 	.word	0x0800563d
 800561c:	08005645 	.word	0x08005645
 8005620:	0800564d 	.word	0x0800564d
 8005624:	08005663 	.word	0x08005663
 8005628:	08005653 	.word	0x08005653
 800562c:	08005663 	.word	0x08005663
 8005630:	08005663 	.word	0x08005663
 8005634:	08005663 	.word	0x08005663
 8005638:	0800565b 	.word	0x0800565b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800563c:	f7fd fcce 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 8005640:	61f8      	str	r0, [r7, #28]
        break;
 8005642:	e014      	b.n	800566e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005644:	f7fd fce0 	bl	8003008 <HAL_RCC_GetPCLK2Freq>
 8005648:	61f8      	str	r0, [r7, #28]
        break;
 800564a:	e010      	b.n	800566e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800564c:	4b4d      	ldr	r3, [pc, #308]	; (8005784 <UART_SetConfig+0x56c>)
 800564e:	61fb      	str	r3, [r7, #28]
        break;
 8005650:	e00d      	b.n	800566e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005652:	f7fd fc2b 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8005656:	61f8      	str	r0, [r7, #28]
        break;
 8005658:	e009      	b.n	800566e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800565a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800565e:	61fb      	str	r3, [r7, #28]
        break;
 8005660:	e005      	b.n	800566e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800566c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d077      	beq.n	8005764 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	005a      	lsls	r2, r3, #1
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	085b      	lsrs	r3, r3, #1
 800567e:	441a      	add	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	fbb2 f3f3 	udiv	r3, r2, r3
 8005688:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	2b0f      	cmp	r3, #15
 800568e:	d916      	bls.n	80056be <UART_SetConfig+0x4a6>
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005696:	d212      	bcs.n	80056be <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	b29b      	uxth	r3, r3
 800569c:	f023 030f 	bic.w	r3, r3, #15
 80056a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	085b      	lsrs	r3, r3, #1
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	8afb      	ldrh	r3, [r7, #22]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	8afa      	ldrh	r2, [r7, #22]
 80056ba:	60da      	str	r2, [r3, #12]
 80056bc:	e052      	b.n	8005764 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80056c4:	e04e      	b.n	8005764 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056ca:	2b08      	cmp	r3, #8
 80056cc:	d827      	bhi.n	800571e <UART_SetConfig+0x506>
 80056ce:	a201      	add	r2, pc, #4	; (adr r2, 80056d4 <UART_SetConfig+0x4bc>)
 80056d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d4:	080056f9 	.word	0x080056f9
 80056d8:	08005701 	.word	0x08005701
 80056dc:	08005709 	.word	0x08005709
 80056e0:	0800571f 	.word	0x0800571f
 80056e4:	0800570f 	.word	0x0800570f
 80056e8:	0800571f 	.word	0x0800571f
 80056ec:	0800571f 	.word	0x0800571f
 80056f0:	0800571f 	.word	0x0800571f
 80056f4:	08005717 	.word	0x08005717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056f8:	f7fd fc70 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 80056fc:	61f8      	str	r0, [r7, #28]
        break;
 80056fe:	e014      	b.n	800572a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005700:	f7fd fc82 	bl	8003008 <HAL_RCC_GetPCLK2Freq>
 8005704:	61f8      	str	r0, [r7, #28]
        break;
 8005706:	e010      	b.n	800572a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005708:	4b1e      	ldr	r3, [pc, #120]	; (8005784 <UART_SetConfig+0x56c>)
 800570a:	61fb      	str	r3, [r7, #28]
        break;
 800570c:	e00d      	b.n	800572a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800570e:	f7fd fbcd 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8005712:	61f8      	str	r0, [r7, #28]
        break;
 8005714:	e009      	b.n	800572a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800571a:	61fb      	str	r3, [r7, #28]
        break;
 800571c:	e005      	b.n	800572a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005728:	bf00      	nop
    }

    if (pclk != 0U)
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d019      	beq.n	8005764 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	085a      	lsrs	r2, r3, #1
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	441a      	add	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005742:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	2b0f      	cmp	r3, #15
 8005748:	d909      	bls.n	800575e <UART_SetConfig+0x546>
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005750:	d205      	bcs.n	800575e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60da      	str	r2, [r3, #12]
 800575c:	e002      	b.n	8005764 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005770:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005774:	4618      	mov	r0, r3
 8005776:	3728      	adds	r7, #40	; 0x28
 8005778:	46bd      	mov	sp, r7
 800577a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800577e:	bf00      	nop
 8005780:	40008000 	.word	0x40008000
 8005784:	00f42400 	.word	0x00f42400

08005788 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	f003 0308 	and.w	r3, r3, #8
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01a      	beq.n	800589e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005886:	d10a      	bne.n	800589e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	605a      	str	r2, [r3, #4]
  }
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af02      	add	r7, sp, #8
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058dc:	f7fc f8d8 	bl	8001a90 <HAL_GetTick>
 80058e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d10e      	bne.n	800590e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f82d 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e023      	b.n	8005956 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b04      	cmp	r3, #4
 800591a:	d10e      	bne.n	800593a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800591c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f817 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e00d      	b.n	8005956 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b09c      	sub	sp, #112	; 0x70
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	4613      	mov	r3, r2
 800596c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800596e:	e0a5      	b.n	8005abc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005976:	f000 80a1 	beq.w	8005abc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597a:	f7fc f889 	bl	8001a90 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005986:	429a      	cmp	r2, r3
 8005988:	d302      	bcc.n	8005990 <UART_WaitOnFlagUntilTimeout+0x32>
 800598a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800598c:	2b00      	cmp	r3, #0
 800598e:	d13e      	bne.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800599e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059a4:	667b      	str	r3, [r7, #100]	; 0x64
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1e6      	bne.n	8005990 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3308      	adds	r3, #8
 80059c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	f023 0301 	bic.w	r3, r3, #1
 80059d8:	663b      	str	r3, [r7, #96]	; 0x60
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3308      	adds	r3, #8
 80059e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80059e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1e5      	bne.n	80059c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2220      	movs	r2, #32
 80059fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2220      	movs	r2, #32
 8005a00:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e067      	b.n	8005ade <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d04f      	beq.n	8005abc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a2a:	d147      	bne.n	8005abc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a34:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	461a      	mov	r2, r3
 8005a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a54:	637b      	str	r3, [r7, #52]	; 0x34
 8005a56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e6      	bne.n	8005a36 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	613b      	str	r3, [r7, #16]
   return(result);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f023 0301 	bic.w	r3, r3, #1
 8005a7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3308      	adds	r3, #8
 8005a86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a88:	623a      	str	r2, [r7, #32]
 8005a8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	69f9      	ldr	r1, [r7, #28]
 8005a8e:	6a3a      	ldr	r2, [r7, #32]
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e5      	bne.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e010      	b.n	8005ade <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69da      	ldr	r2, [r3, #28]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	bf0c      	ite	eq
 8005acc:	2301      	moveq	r3, #1
 8005ace:	2300      	movne	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	79fb      	ldrb	r3, [r7, #7]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	f43f af4a 	beq.w	8005970 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3770      	adds	r7, #112	; 0x70
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b095      	sub	sp, #84	; 0x54
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e6      	bne.n	8005aee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3308      	adds	r3, #8
 8005b26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	e853 3f00 	ldrex	r3, [r3]
 8005b2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	f023 0301 	bic.w	r3, r3, #1
 8005b36:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b48:	e841 2300 	strex	r3, r2, [r1]
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1e5      	bne.n	8005b20 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d118      	bne.n	8005b8e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	e853 3f00 	ldrex	r3, [r3]
 8005b68:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f023 0310 	bic.w	r3, r3, #16
 8005b70:	647b      	str	r3, [r7, #68]	; 0x44
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b7a:	61bb      	str	r3, [r7, #24]
 8005b7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7e:	6979      	ldr	r1, [r7, #20]
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	e841 2300 	strex	r3, r2, [r1]
 8005b86:	613b      	str	r3, [r7, #16]
   return(result);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1e6      	bne.n	8005b5c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2220      	movs	r2, #32
 8005b92:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005ba0:	bf00      	nop
 8005ba2:	3754      	adds	r7, #84	; 0x54
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f7ff fb0e 	bl	80051ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bd0:	bf00      	nop
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bf4:	61fb      	str	r3, [r7, #28]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	61bb      	str	r3, [r7, #24]
 8005c00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	6979      	ldr	r1, [r7, #20]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e6      	bne.n	8005be0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff fada 	bl	80051d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c24:	bf00      	nop
 8005c26:	3720      	adds	r7, #32
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <__NVIC_SetPriority>:
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	4603      	mov	r3, r0
 8005c48:	6039      	str	r1, [r7, #0]
 8005c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	db0a      	blt.n	8005c6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	490c      	ldr	r1, [pc, #48]	; (8005c8c <__NVIC_SetPriority+0x4c>)
 8005c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c5e:	0112      	lsls	r2, r2, #4
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	440b      	add	r3, r1
 8005c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005c68:	e00a      	b.n	8005c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	4908      	ldr	r1, [pc, #32]	; (8005c90 <__NVIC_SetPriority+0x50>)
 8005c70:	79fb      	ldrb	r3, [r7, #7]
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	3b04      	subs	r3, #4
 8005c78:	0112      	lsls	r2, r2, #4
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	440b      	add	r3, r1
 8005c7e:	761a      	strb	r2, [r3, #24]
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	e000e100 	.word	0xe000e100
 8005c90:	e000ed00 	.word	0xe000ed00

08005c94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005c98:	2100      	movs	r1, #0
 8005c9a:	f06f 0004 	mvn.w	r0, #4
 8005c9e:	f7ff ffcf 	bl	8005c40 <__NVIC_SetPriority>
#endif
}
 8005ca2:	bf00      	nop
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cae:	f3ef 8305 	mrs	r3, IPSR
 8005cb2:	603b      	str	r3, [r7, #0]
  return(result);
 8005cb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005cba:	f06f 0305 	mvn.w	r3, #5
 8005cbe:	607b      	str	r3, [r7, #4]
 8005cc0:	e00c      	b.n	8005cdc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005cc2:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <osKernelInitialize+0x44>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d105      	bne.n	8005cd6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005cca:	4b08      	ldr	r3, [pc, #32]	; (8005cec <osKernelInitialize+0x44>)
 8005ccc:	2201      	movs	r2, #1
 8005cce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	607b      	str	r3, [r7, #4]
 8005cd4:	e002      	b.n	8005cdc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005cdc:	687b      	ldr	r3, [r7, #4]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	2000032c 	.word	0x2000032c

08005cf0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cf6:	f3ef 8305 	mrs	r3, IPSR
 8005cfa:	603b      	str	r3, [r7, #0]
  return(result);
 8005cfc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005d02:	f06f 0305 	mvn.w	r3, #5
 8005d06:	607b      	str	r3, [r7, #4]
 8005d08:	e010      	b.n	8005d2c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005d0a:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <osKernelStart+0x48>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d109      	bne.n	8005d26 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005d12:	f7ff ffbf 	bl	8005c94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d16:	4b08      	ldr	r3, [pc, #32]	; (8005d38 <osKernelStart+0x48>)
 8005d18:	2202      	movs	r2, #2
 8005d1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d1c:	f001 f866 	bl	8006dec <vTaskStartScheduler>
      stat = osOK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	607b      	str	r3, [r7, #4]
 8005d24:	e002      	b.n	8005d2c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005d26:	f04f 33ff 	mov.w	r3, #4294967295
 8005d2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d2c:	687b      	ldr	r3, [r7, #4]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	2000032c 	.word	0x2000032c

08005d3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b08e      	sub	sp, #56	; 0x38
 8005d40:	af04      	add	r7, sp, #16
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d4c:	f3ef 8305 	mrs	r3, IPSR
 8005d50:	617b      	str	r3, [r7, #20]
  return(result);
 8005d52:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d17e      	bne.n	8005e56 <osThreadNew+0x11a>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d07b      	beq.n	8005e56 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005d5e:	2380      	movs	r3, #128	; 0x80
 8005d60:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005d62:	2318      	movs	r3, #24
 8005d64:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d045      	beq.n	8005e02 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <osThreadNew+0x48>
        name = attr->name;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d008      	beq.n	8005daa <osThreadNew+0x6e>
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	2b38      	cmp	r3, #56	; 0x38
 8005d9c:	d805      	bhi.n	8005daa <osThreadNew+0x6e>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <osThreadNew+0x72>
        return (NULL);
 8005daa:	2300      	movs	r3, #0
 8005dac:	e054      	b.n	8005e58 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	089b      	lsrs	r3, r3, #2
 8005dbc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00e      	beq.n	8005de4 <osThreadNew+0xa8>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	2b5b      	cmp	r3, #91	; 0x5b
 8005dcc:	d90a      	bls.n	8005de4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d006      	beq.n	8005de4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <osThreadNew+0xa8>
        mem = 1;
 8005dde:	2301      	movs	r3, #1
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	e010      	b.n	8005e06 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10c      	bne.n	8005e06 <osThreadNew+0xca>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d108      	bne.n	8005e06 <osThreadNew+0xca>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d104      	bne.n	8005e06 <osThreadNew+0xca>
          mem = 0;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61bb      	str	r3, [r7, #24]
 8005e00:	e001      	b.n	8005e06 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005e02:	2300      	movs	r3, #0
 8005e04:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d110      	bne.n	8005e2e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e14:	9202      	str	r2, [sp, #8]
 8005e16:	9301      	str	r3, [sp, #4]
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	6a3a      	ldr	r2, [r7, #32]
 8005e20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 fe0c 	bl	8006a40 <xTaskCreateStatic>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	613b      	str	r3, [r7, #16]
 8005e2c:	e013      	b.n	8005e56 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d110      	bne.n	8005e56 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	f107 0310 	add.w	r3, r7, #16
 8005e3c:	9301      	str	r3, [sp, #4]
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 fe57 	bl	8006afa <xTaskCreate>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d001      	beq.n	8005e56 <osThreadNew+0x11a>
            hTask = NULL;
 8005e52:	2300      	movs	r3, #0
 8005e54:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005e56:	693b      	ldr	r3, [r7, #16]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3728      	adds	r7, #40	; 0x28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e68:	f3ef 8305 	mrs	r3, IPSR
 8005e6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d003      	beq.n	8005e7c <osDelay+0x1c>
    stat = osErrorISR;
 8005e74:	f06f 0305 	mvn.w	r3, #5
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	e007      	b.n	8005e8c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 ff7c 	bl	8006d84 <vTaskDelay>
    }
  }

  return (stat);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4a07      	ldr	r2, [pc, #28]	; (8005ec4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005ea8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	4a06      	ldr	r2, [pc, #24]	; (8005ec8 <vApplicationGetIdleTaskMemory+0x30>)
 8005eae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2280      	movs	r2, #128	; 0x80
 8005eb4:	601a      	str	r2, [r3, #0]
}
 8005eb6:	bf00      	nop
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20000330 	.word	0x20000330
 8005ec8:	2000038c 	.word	0x2000038c

08005ecc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4a07      	ldr	r2, [pc, #28]	; (8005ef8 <vApplicationGetTimerTaskMemory+0x2c>)
 8005edc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	4a06      	ldr	r2, [pc, #24]	; (8005efc <vApplicationGetTimerTaskMemory+0x30>)
 8005ee2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eea:	601a      	str	r2, [r3, #0]
}
 8005eec:	bf00      	nop
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	2000058c 	.word	0x2000058c
 8005efc:	200005e8 	.word	0x200005e8

08005f00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f103 0208 	add.w	r2, r3, #8
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f04f 32ff 	mov.w	r2, #4294967295
 8005f18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f103 0208 	add.w	r2, r3, #8
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f103 0208 	add.w	r2, r3, #8
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b085      	sub	sp, #20
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	601a      	str	r2, [r3, #0]
}
 8005f96:	bf00      	nop
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b085      	sub	sp, #20
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb8:	d103      	bne.n	8005fc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	e00c      	b.n	8005fdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	3308      	adds	r3, #8
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	e002      	b.n	8005fd0 <vListInsert+0x2e>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d2f6      	bcs.n	8005fca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	601a      	str	r2, [r3, #0]
}
 8006008:	bf00      	nop
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6892      	ldr	r2, [r2, #8]
 800602a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	6852      	ldr	r2, [r2, #4]
 8006034:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	429a      	cmp	r2, r3
 800603e:	d103      	bne.n	8006048 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	1e5a      	subs	r2, r3, #1
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10a      	bne.n	8006092 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800608e:	bf00      	nop
 8006090:	e7fe      	b.n	8006090 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006092:	f002 f84f 	bl	8008134 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060a2:	fb01 f303 	mul.w	r3, r1, r3
 80060a6:	441a      	add	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c2:	3b01      	subs	r3, #1
 80060c4:	68f9      	ldr	r1, [r7, #12]
 80060c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060c8:	fb01 f303 	mul.w	r3, r1, r3
 80060cc:	441a      	add	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	22ff      	movs	r2, #255	; 0xff
 80060d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	22ff      	movs	r2, #255	; 0xff
 80060de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d114      	bne.n	8006112 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01a      	beq.n	8006126 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	3310      	adds	r3, #16
 80060f4:	4618      	mov	r0, r3
 80060f6:	f001 f903 	bl	8007300 <xTaskRemoveFromEventList>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d012      	beq.n	8006126 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006100:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <xQueueGenericReset+0xcc>)
 8006102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	e009      	b.n	8006126 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3310      	adds	r3, #16
 8006116:	4618      	mov	r0, r3
 8006118:	f7ff fef2 	bl	8005f00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	3324      	adds	r3, #36	; 0x24
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff feed 	bl	8005f00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006126:	f002 f835 	bl	8008194 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800612a:	2301      	movs	r3, #1
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	e000ed04 	.word	0xe000ed04

08006138 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08e      	sub	sp, #56	; 0x38
 800613c:	af02      	add	r7, sp, #8
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
 8006144:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	627b      	str	r3, [r7, #36]	; 0x24
}
 800617a:	bf00      	nop
 800617c:	e7fe      	b.n	800617c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <xQueueGenericCreateStatic+0x52>
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <xQueueGenericCreateStatic+0x56>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <xQueueGenericCreateStatic+0x58>
 800618e:	2300      	movs	r3, #0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10a      	bne.n	80061aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	623b      	str	r3, [r7, #32]
}
 80061a6:	bf00      	nop
 80061a8:	e7fe      	b.n	80061a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d102      	bne.n	80061b6 <xQueueGenericCreateStatic+0x7e>
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <xQueueGenericCreateStatic+0x82>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <xQueueGenericCreateStatic+0x84>
 80061ba:	2300      	movs	r3, #0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10a      	bne.n	80061d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	61fb      	str	r3, [r7, #28]
}
 80061d2:	bf00      	nop
 80061d4:	e7fe      	b.n	80061d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061d6:	2350      	movs	r3, #80	; 0x50
 80061d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b50      	cmp	r3, #80	; 0x50
 80061de:	d00a      	beq.n	80061f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	61bb      	str	r3, [r7, #24]
}
 80061f2:	bf00      	nop
 80061f4:	e7fe      	b.n	80061f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80061fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00d      	beq.n	800621e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800620a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800620e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	4613      	mov	r3, r2
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f805 	bl	8006228 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800621e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006220:	4618      	mov	r0, r3
 8006222:	3730      	adds	r7, #48	; 0x30
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d103      	bne.n	8006244 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	e002      	b.n	800624a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006256:	2101      	movs	r1, #1
 8006258:	69b8      	ldr	r0, [r7, #24]
 800625a:	f7ff ff05 	bl	8006068 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	78fa      	ldrb	r2, [r7, #3]
 8006262:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006266:	bf00      	nop
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08e      	sub	sp, #56	; 0x38
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800627e:	2300      	movs	r3, #0
 8006280:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10a      	bne.n	80062a2 <xQueueGenericSend+0x32>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800629e:	bf00      	nop
 80062a0:	e7fe      	b.n	80062a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d103      	bne.n	80062b0 <xQueueGenericSend+0x40>
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <xQueueGenericSend+0x44>
 80062b0:	2301      	movs	r3, #1
 80062b2:	e000      	b.n	80062b6 <xQueueGenericSend+0x46>
 80062b4:	2300      	movs	r3, #0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10a      	bne.n	80062d0 <xQueueGenericSend+0x60>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062cc:	bf00      	nop
 80062ce:	e7fe      	b.n	80062ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d103      	bne.n	80062de <xQueueGenericSend+0x6e>
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <xQueueGenericSend+0x72>
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <xQueueGenericSend+0x74>
 80062e2:	2300      	movs	r3, #0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10a      	bne.n	80062fe <xQueueGenericSend+0x8e>
	__asm volatile
 80062e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ec:	f383 8811 	msr	BASEPRI, r3
 80062f0:	f3bf 8f6f 	isb	sy
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	623b      	str	r3, [r7, #32]
}
 80062fa:	bf00      	nop
 80062fc:	e7fe      	b.n	80062fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062fe:	f001 f9bd 	bl	800767c <xTaskGetSchedulerState>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d102      	bne.n	800630e <xQueueGenericSend+0x9e>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <xQueueGenericSend+0xa2>
 800630e:	2301      	movs	r3, #1
 8006310:	e000      	b.n	8006314 <xQueueGenericSend+0xa4>
 8006312:	2300      	movs	r3, #0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10a      	bne.n	800632e <xQueueGenericSend+0xbe>
	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	61fb      	str	r3, [r7, #28]
}
 800632a:	bf00      	nop
 800632c:	e7fe      	b.n	800632c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800632e:	f001 ff01 	bl	8008134 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633a:	429a      	cmp	r2, r3
 800633c:	d302      	bcc.n	8006344 <xQueueGenericSend+0xd4>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b02      	cmp	r3, #2
 8006342:	d129      	bne.n	8006398 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	68b9      	ldr	r1, [r7, #8]
 8006348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800634a:	f000 fa0b 	bl	8006764 <prvCopyDataToQueue>
 800634e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006354:	2b00      	cmp	r3, #0
 8006356:	d010      	beq.n	800637a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635a:	3324      	adds	r3, #36	; 0x24
 800635c:	4618      	mov	r0, r3
 800635e:	f000 ffcf 	bl	8007300 <xTaskRemoveFromEventList>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d013      	beq.n	8006390 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006368:	4b3f      	ldr	r3, [pc, #252]	; (8006468 <xQueueGenericSend+0x1f8>)
 800636a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	e00a      	b.n	8006390 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800637a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637c:	2b00      	cmp	r3, #0
 800637e:	d007      	beq.n	8006390 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006380:	4b39      	ldr	r3, [pc, #228]	; (8006468 <xQueueGenericSend+0x1f8>)
 8006382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006390:	f001 ff00 	bl	8008194 <vPortExitCritical>
				return pdPASS;
 8006394:	2301      	movs	r3, #1
 8006396:	e063      	b.n	8006460 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d103      	bne.n	80063a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800639e:	f001 fef9 	bl	8008194 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80063a2:	2300      	movs	r3, #0
 80063a4:	e05c      	b.n	8006460 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d106      	bne.n	80063ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063ac:	f107 0314 	add.w	r3, r7, #20
 80063b0:	4618      	mov	r0, r3
 80063b2:	f001 f809 	bl	80073c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063b6:	2301      	movs	r3, #1
 80063b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063ba:	f001 feeb 	bl	8008194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063be:	f000 fd7b 	bl	8006eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063c2:	f001 feb7 	bl	8008134 <vPortEnterCritical>
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063cc:	b25b      	sxtb	r3, r3
 80063ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d2:	d103      	bne.n	80063dc <xQueueGenericSend+0x16c>
 80063d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063e2:	b25b      	sxtb	r3, r3
 80063e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e8:	d103      	bne.n	80063f2 <xQueueGenericSend+0x182>
 80063ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063f2:	f001 fecf 	bl	8008194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063f6:	1d3a      	adds	r2, r7, #4
 80063f8:	f107 0314 	add.w	r3, r7, #20
 80063fc:	4611      	mov	r1, r2
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 fff8 	bl	80073f4 <xTaskCheckForTimeOut>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d124      	bne.n	8006454 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800640a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800640c:	f000 faa2 	bl	8006954 <prvIsQueueFull>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d018      	beq.n	8006448 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	3310      	adds	r3, #16
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	4611      	mov	r1, r2
 800641e:	4618      	mov	r0, r3
 8006420:	f000 ff1e 	bl	8007260 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006426:	f000 fa2d 	bl	8006884 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800642a:	f000 fd53 	bl	8006ed4 <xTaskResumeAll>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	f47f af7c 	bne.w	800632e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006436:	4b0c      	ldr	r3, [pc, #48]	; (8006468 <xQueueGenericSend+0x1f8>)
 8006438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	e772      	b.n	800632e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800644a:	f000 fa1b 	bl	8006884 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800644e:	f000 fd41 	bl	8006ed4 <xTaskResumeAll>
 8006452:	e76c      	b.n	800632e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006456:	f000 fa15 	bl	8006884 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800645a:	f000 fd3b 	bl	8006ed4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800645e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006460:	4618      	mov	r0, r3
 8006462:	3738      	adds	r7, #56	; 0x38
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b090      	sub	sp, #64	; 0x40
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800647e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10a      	bne.n	800649a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d103      	bne.n	80064a8 <xQueueGenericSendFromISR+0x3c>
 80064a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <xQueueGenericSendFromISR+0x40>
 80064a8:	2301      	movs	r3, #1
 80064aa:	e000      	b.n	80064ae <xQueueGenericSendFromISR+0x42>
 80064ac:	2300      	movs	r3, #0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064c4:	bf00      	nop
 80064c6:	e7fe      	b.n	80064c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d103      	bne.n	80064d6 <xQueueGenericSendFromISR+0x6a>
 80064ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d101      	bne.n	80064da <xQueueGenericSendFromISR+0x6e>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <xQueueGenericSendFromISR+0x70>
 80064da:	2300      	movs	r3, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	623b      	str	r3, [r7, #32]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064f6:	f001 feff 	bl	80082f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064fa:	f3ef 8211 	mrs	r2, BASEPRI
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	61fa      	str	r2, [r7, #28]
 8006510:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006512:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006514:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800651a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651e:	429a      	cmp	r2, r3
 8006520:	d302      	bcc.n	8006528 <xQueueGenericSendFromISR+0xbc>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2b02      	cmp	r3, #2
 8006526:	d12f      	bne.n	8006588 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800652e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	68b9      	ldr	r1, [r7, #8]
 800653c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800653e:	f000 f911 	bl	8006764 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006542:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654a:	d112      	bne.n	8006572 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800654c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	2b00      	cmp	r3, #0
 8006552:	d016      	beq.n	8006582 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006556:	3324      	adds	r3, #36	; 0x24
 8006558:	4618      	mov	r0, r3
 800655a:	f000 fed1 	bl	8007300 <xTaskRemoveFromEventList>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00e      	beq.n	8006582 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00b      	beq.n	8006582 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	e007      	b.n	8006582 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006572:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006576:	3301      	adds	r3, #1
 8006578:	b2db      	uxtb	r3, r3
 800657a:	b25a      	sxtb	r2, r3
 800657c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006582:	2301      	movs	r3, #1
 8006584:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006586:	e001      	b.n	800658c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006588:	2300      	movs	r3, #0
 800658a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800658c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006596:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800659a:	4618      	mov	r0, r3
 800659c:	3740      	adds	r7, #64	; 0x40
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b08c      	sub	sp, #48	; 0x30
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80065b0:	2300      	movs	r3, #0
 80065b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10a      	bne.n	80065d4 <xQueueReceive+0x30>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	623b      	str	r3, [r7, #32]
}
 80065d0:	bf00      	nop
 80065d2:	e7fe      	b.n	80065d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d103      	bne.n	80065e2 <xQueueReceive+0x3e>
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <xQueueReceive+0x42>
 80065e2:	2301      	movs	r3, #1
 80065e4:	e000      	b.n	80065e8 <xQueueReceive+0x44>
 80065e6:	2300      	movs	r3, #0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10a      	bne.n	8006602 <xQueueReceive+0x5e>
	__asm volatile
 80065ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	61fb      	str	r3, [r7, #28]
}
 80065fe:	bf00      	nop
 8006600:	e7fe      	b.n	8006600 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006602:	f001 f83b 	bl	800767c <xTaskGetSchedulerState>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d102      	bne.n	8006612 <xQueueReceive+0x6e>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <xQueueReceive+0x72>
 8006612:	2301      	movs	r3, #1
 8006614:	e000      	b.n	8006618 <xQueueReceive+0x74>
 8006616:	2300      	movs	r3, #0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10a      	bne.n	8006632 <xQueueReceive+0x8e>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	61bb      	str	r3, [r7, #24]
}
 800662e:	bf00      	nop
 8006630:	e7fe      	b.n	8006630 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006632:	f001 fd7f 	bl	8008134 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	2b00      	cmp	r3, #0
 8006640:	d01f      	beq.n	8006682 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006642:	68b9      	ldr	r1, [r7, #8]
 8006644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006646:	f000 f8f7 	bl	8006838 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	1e5a      	subs	r2, r3, #1
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00f      	beq.n	800667a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	3310      	adds	r3, #16
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fe4e 	bl	8007300 <xTaskRemoveFromEventList>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d007      	beq.n	800667a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800666a:	4b3d      	ldr	r3, [pc, #244]	; (8006760 <xQueueReceive+0x1bc>)
 800666c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800667a:	f001 fd8b 	bl	8008194 <vPortExitCritical>
				return pdPASS;
 800667e:	2301      	movs	r3, #1
 8006680:	e069      	b.n	8006756 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d103      	bne.n	8006690 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006688:	f001 fd84 	bl	8008194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800668c:	2300      	movs	r3, #0
 800668e:	e062      	b.n	8006756 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d106      	bne.n	80066a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006696:	f107 0310 	add.w	r3, r7, #16
 800669a:	4618      	mov	r0, r3
 800669c:	f000 fe94 	bl	80073c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066a0:	2301      	movs	r3, #1
 80066a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066a4:	f001 fd76 	bl	8008194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066a8:	f000 fc06 	bl	8006eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066ac:	f001 fd42 	bl	8008134 <vPortEnterCritical>
 80066b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066b6:	b25b      	sxtb	r3, r3
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066bc:	d103      	bne.n	80066c6 <xQueueReceive+0x122>
 80066be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066cc:	b25b      	sxtb	r3, r3
 80066ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d2:	d103      	bne.n	80066dc <xQueueReceive+0x138>
 80066d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066dc:	f001 fd5a 	bl	8008194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066e0:	1d3a      	adds	r2, r7, #4
 80066e2:	f107 0310 	add.w	r3, r7, #16
 80066e6:	4611      	mov	r1, r2
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fe83 	bl	80073f4 <xTaskCheckForTimeOut>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d123      	bne.n	800673c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066f6:	f000 f917 	bl	8006928 <prvIsQueueEmpty>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d017      	beq.n	8006730 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	3324      	adds	r3, #36	; 0x24
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	4611      	mov	r1, r2
 8006708:	4618      	mov	r0, r3
 800670a:	f000 fda9 	bl	8007260 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800670e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006710:	f000 f8b8 	bl	8006884 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006714:	f000 fbde 	bl	8006ed4 <xTaskResumeAll>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d189      	bne.n	8006632 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800671e:	4b10      	ldr	r3, [pc, #64]	; (8006760 <xQueueReceive+0x1bc>)
 8006720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	e780      	b.n	8006632 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006732:	f000 f8a7 	bl	8006884 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006736:	f000 fbcd 	bl	8006ed4 <xTaskResumeAll>
 800673a:	e77a      	b.n	8006632 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800673c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800673e:	f000 f8a1 	bl	8006884 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006742:	f000 fbc7 	bl	8006ed4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006748:	f000 f8ee 	bl	8006928 <prvIsQueueEmpty>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	f43f af6f 	beq.w	8006632 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006754:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006756:	4618      	mov	r0, r3
 8006758:	3730      	adds	r7, #48	; 0x30
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	e000ed04 	.word	0xe000ed04

08006764 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006778:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10d      	bne.n	800679e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d14d      	bne.n	8006826 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	4618      	mov	r0, r3
 8006790:	f000 ff92 	bl	80076b8 <xTaskPriorityDisinherit>
 8006794:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	609a      	str	r2, [r3, #8]
 800679c:	e043      	b.n	8006826 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d119      	bne.n	80067d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6858      	ldr	r0, [r3, #4]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	461a      	mov	r2, r3
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	f002 f840 	bl	8008834 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067bc:	441a      	add	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d32b      	bcc.n	8006826 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	605a      	str	r2, [r3, #4]
 80067d6:	e026      	b.n	8006826 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	68d8      	ldr	r0, [r3, #12]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e0:	461a      	mov	r2, r3
 80067e2:	68b9      	ldr	r1, [r7, #8]
 80067e4:	f002 f826 	bl	8008834 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f0:	425b      	negs	r3, r3
 80067f2:	441a      	add	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	68da      	ldr	r2, [r3, #12]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d207      	bcs.n	8006814 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680c:	425b      	negs	r3, r3
 800680e:	441a      	add	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b02      	cmp	r3, #2
 8006818:	d105      	bne.n	8006826 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	3b01      	subs	r3, #1
 8006824:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1c5a      	adds	r2, r3, #1
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800682e:	697b      	ldr	r3, [r7, #20]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	d018      	beq.n	800687c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68da      	ldr	r2, [r3, #12]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	441a      	add	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68da      	ldr	r2, [r3, #12]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	429a      	cmp	r2, r3
 8006862:	d303      	bcc.n	800686c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68d9      	ldr	r1, [r3, #12]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006874:	461a      	mov	r2, r3
 8006876:	6838      	ldr	r0, [r7, #0]
 8006878:	f001 ffdc 	bl	8008834 <memcpy>
	}
}
 800687c:	bf00      	nop
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800688c:	f001 fc52 	bl	8008134 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006896:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006898:	e011      	b.n	80068be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d012      	beq.n	80068c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3324      	adds	r3, #36	; 0x24
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fd2a 	bl	8007300 <xTaskRemoveFromEventList>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80068b2:	f000 fe01 	bl	80074b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	dce9      	bgt.n	800689a <prvUnlockQueue+0x16>
 80068c6:	e000      	b.n	80068ca <prvUnlockQueue+0x46>
					break;
 80068c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	22ff      	movs	r2, #255	; 0xff
 80068ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80068d2:	f001 fc5f 	bl	8008194 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068d6:	f001 fc2d 	bl	8008134 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068e2:	e011      	b.n	8006908 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d012      	beq.n	8006912 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	3310      	adds	r3, #16
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 fd05 	bl	8007300 <xTaskRemoveFromEventList>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068fc:	f000 fddc 	bl	80074b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006900:	7bbb      	ldrb	r3, [r7, #14]
 8006902:	3b01      	subs	r3, #1
 8006904:	b2db      	uxtb	r3, r3
 8006906:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800690c:	2b00      	cmp	r3, #0
 800690e:	dce9      	bgt.n	80068e4 <prvUnlockQueue+0x60>
 8006910:	e000      	b.n	8006914 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006912:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	22ff      	movs	r2, #255	; 0xff
 8006918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800691c:	f001 fc3a 	bl	8008194 <vPortExitCritical>
}
 8006920:	bf00      	nop
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006930:	f001 fc00 	bl	8008134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	2b00      	cmp	r3, #0
 800693a:	d102      	bne.n	8006942 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800693c:	2301      	movs	r3, #1
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	e001      	b.n	8006946 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006946:	f001 fc25 	bl	8008194 <vPortExitCritical>

	return xReturn;
 800694a:	68fb      	ldr	r3, [r7, #12]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800695c:	f001 fbea 	bl	8008134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006968:	429a      	cmp	r2, r3
 800696a:	d102      	bne.n	8006972 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800696c:	2301      	movs	r3, #1
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	e001      	b.n	8006976 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006972:	2300      	movs	r3, #0
 8006974:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006976:	f001 fc0d 	bl	8008194 <vPortExitCritical>

	return xReturn;
 800697a:	68fb      	ldr	r3, [r7, #12]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800698e:	2300      	movs	r3, #0
 8006990:	60fb      	str	r3, [r7, #12]
 8006992:	e014      	b.n	80069be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006994:	4a0f      	ldr	r2, [pc, #60]	; (80069d4 <vQueueAddToRegistry+0x50>)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10b      	bne.n	80069b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80069a0:	490c      	ldr	r1, [pc, #48]	; (80069d4 <vQueueAddToRegistry+0x50>)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80069aa:	4a0a      	ldr	r2, [pc, #40]	; (80069d4 <vQueueAddToRegistry+0x50>)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	00db      	lsls	r3, r3, #3
 80069b0:	4413      	add	r3, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80069b6:	e006      	b.n	80069c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	3301      	adds	r3, #1
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b07      	cmp	r3, #7
 80069c2:	d9e7      	bls.n	8006994 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80069c4:	bf00      	nop
 80069c6:	bf00      	nop
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	200009e8 	.word	0x200009e8

080069d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069e8:	f001 fba4 	bl	8008134 <vPortEnterCritical>
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069f2:	b25b      	sxtb	r3, r3
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f8:	d103      	bne.n	8006a02 <vQueueWaitForMessageRestricted+0x2a>
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a08:	b25b      	sxtb	r3, r3
 8006a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0e:	d103      	bne.n	8006a18 <vQueueWaitForMessageRestricted+0x40>
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a18:	f001 fbbc 	bl	8008194 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d106      	bne.n	8006a32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	3324      	adds	r3, #36	; 0x24
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	68b9      	ldr	r1, [r7, #8]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 fc3b 	bl	80072a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a32:	6978      	ldr	r0, [r7, #20]
 8006a34:	f7ff ff26 	bl	8006884 <prvUnlockQueue>
	}
 8006a38:	bf00      	nop
 8006a3a:	3718      	adds	r7, #24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08e      	sub	sp, #56	; 0x38
 8006a44:	af04      	add	r7, sp, #16
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
 8006a4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10a      	bne.n	8006a6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	623b      	str	r3, [r7, #32]
}
 8006a66:	bf00      	nop
 8006a68:	e7fe      	b.n	8006a68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10a      	bne.n	8006a86 <xTaskCreateStatic+0x46>
	__asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	61fb      	str	r3, [r7, #28]
}
 8006a82:	bf00      	nop
 8006a84:	e7fe      	b.n	8006a84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a86:	235c      	movs	r3, #92	; 0x5c
 8006a88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	2b5c      	cmp	r3, #92	; 0x5c
 8006a8e:	d00a      	beq.n	8006aa6 <xTaskCreateStatic+0x66>
	__asm volatile
 8006a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	61bb      	str	r3, [r7, #24]
}
 8006aa2:	bf00      	nop
 8006aa4:	e7fe      	b.n	8006aa4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006aa6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d01e      	beq.n	8006aec <xTaskCreateStatic+0xac>
 8006aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d01b      	beq.n	8006aec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006abc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	9303      	str	r3, [sp, #12]
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	9302      	str	r3, [sp, #8]
 8006ace:	f107 0314 	add.w	r3, r7, #20
 8006ad2:	9301      	str	r3, [sp, #4]
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	68b9      	ldr	r1, [r7, #8]
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 f850 	bl	8006b84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ae4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ae6:	f000 f8dd 	bl	8006ca4 <prvAddNewTaskToReadyList>
 8006aea:	e001      	b.n	8006af0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006aec:	2300      	movs	r3, #0
 8006aee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006af0:	697b      	ldr	r3, [r7, #20]
	}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3728      	adds	r7, #40	; 0x28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b08c      	sub	sp, #48	; 0x30
 8006afe:	af04      	add	r7, sp, #16
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	603b      	str	r3, [r7, #0]
 8006b06:	4613      	mov	r3, r2
 8006b08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b0a:	88fb      	ldrh	r3, [r7, #6]
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f001 fc32 	bl	8008378 <pvPortMalloc>
 8006b14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00e      	beq.n	8006b3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b1c:	205c      	movs	r0, #92	; 0x5c
 8006b1e:	f001 fc2b 	bl	8008378 <pvPortMalloc>
 8006b22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	631a      	str	r2, [r3, #48]	; 0x30
 8006b30:	e005      	b.n	8006b3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b32:	6978      	ldr	r0, [r7, #20]
 8006b34:	f001 fcec 	bl	8008510 <vPortFree>
 8006b38:	e001      	b.n	8006b3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d017      	beq.n	8006b74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b4c:	88fa      	ldrh	r2, [r7, #6]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	9303      	str	r3, [sp, #12]
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	9302      	str	r3, [sp, #8]
 8006b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b58:	9301      	str	r3, [sp, #4]
 8006b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	68b9      	ldr	r1, [r7, #8]
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 f80e 	bl	8006b84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b68:	69f8      	ldr	r0, [r7, #28]
 8006b6a:	f000 f89b 	bl	8006ca4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	61bb      	str	r3, [r7, #24]
 8006b72:	e002      	b.n	8006b7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b74:	f04f 33ff 	mov.w	r3, #4294967295
 8006b78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b7a:	69bb      	ldr	r3, [r7, #24]
	}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3720      	adds	r7, #32
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	21a5      	movs	r1, #165	; 0xa5
 8006b9e:	f001 fe57 	bl	8008850 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006bac:	3b01      	subs	r3, #1
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	f023 0307 	bic.w	r3, r3, #7
 8006bba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	f003 0307 	and.w	r3, r3, #7
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00a      	beq.n	8006bdc <prvInitialiseNewTask+0x58>
	__asm volatile
 8006bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bca:	f383 8811 	msr	BASEPRI, r3
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	617b      	str	r3, [r7, #20]
}
 8006bd8:	bf00      	nop
 8006bda:	e7fe      	b.n	8006bda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d01f      	beq.n	8006c22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006be2:	2300      	movs	r3, #0
 8006be4:	61fb      	str	r3, [r7, #28]
 8006be6:	e012      	b.n	8006c0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	4413      	add	r3, r2
 8006bee:	7819      	ldrb	r1, [r3, #0]
 8006bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	3334      	adds	r3, #52	; 0x34
 8006bf8:	460a      	mov	r2, r1
 8006bfa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	4413      	add	r3, r2
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d006      	beq.n	8006c16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	61fb      	str	r3, [r7, #28]
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	2b0f      	cmp	r3, #15
 8006c12:	d9e9      	bls.n	8006be8 <prvInitialiseNewTask+0x64>
 8006c14:	e000      	b.n	8006c18 <prvInitialiseNewTask+0x94>
			{
				break;
 8006c16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c20:	e003      	b.n	8006c2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2c:	2b37      	cmp	r3, #55	; 0x37
 8006c2e:	d901      	bls.n	8006c34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c30:	2337      	movs	r3, #55	; 0x37
 8006c32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	2200      	movs	r2, #0
 8006c44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	3304      	adds	r3, #4
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7ff f978 	bl	8005f40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	3318      	adds	r3, #24
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7ff f973 	bl	8005f40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	2200      	movs	r2, #0
 8006c74:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	68f9      	ldr	r1, [r7, #12]
 8006c82:	69b8      	ldr	r0, [r7, #24]
 8006c84:	f001 f928 	bl	8007ed8 <pxPortInitialiseStack>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c9a:	bf00      	nop
 8006c9c:	3720      	adds	r7, #32
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
	...

08006ca4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006cac:	f001 fa42 	bl	8008134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006cb0:	4b2d      	ldr	r3, [pc, #180]	; (8006d68 <prvAddNewTaskToReadyList+0xc4>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	4a2c      	ldr	r2, [pc, #176]	; (8006d68 <prvAddNewTaskToReadyList+0xc4>)
 8006cb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006cba:	4b2c      	ldr	r3, [pc, #176]	; (8006d6c <prvAddNewTaskToReadyList+0xc8>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d109      	bne.n	8006cd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006cc2:	4a2a      	ldr	r2, [pc, #168]	; (8006d6c <prvAddNewTaskToReadyList+0xc8>)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cc8:	4b27      	ldr	r3, [pc, #156]	; (8006d68 <prvAddNewTaskToReadyList+0xc4>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d110      	bne.n	8006cf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006cd0:	f000 fc16 	bl	8007500 <prvInitialiseTaskLists>
 8006cd4:	e00d      	b.n	8006cf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006cd6:	4b26      	ldr	r3, [pc, #152]	; (8006d70 <prvAddNewTaskToReadyList+0xcc>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d109      	bne.n	8006cf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cde:	4b23      	ldr	r3, [pc, #140]	; (8006d6c <prvAddNewTaskToReadyList+0xc8>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d802      	bhi.n	8006cf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cec:	4a1f      	ldr	r2, [pc, #124]	; (8006d6c <prvAddNewTaskToReadyList+0xc8>)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cf2:	4b20      	ldr	r3, [pc, #128]	; (8006d74 <prvAddNewTaskToReadyList+0xd0>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	4a1e      	ldr	r2, [pc, #120]	; (8006d74 <prvAddNewTaskToReadyList+0xd0>)
 8006cfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006cfc:	4b1d      	ldr	r3, [pc, #116]	; (8006d74 <prvAddNewTaskToReadyList+0xd0>)
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d08:	4b1b      	ldr	r3, [pc, #108]	; (8006d78 <prvAddNewTaskToReadyList+0xd4>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d903      	bls.n	8006d18 <prvAddNewTaskToReadyList+0x74>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d14:	4a18      	ldr	r2, [pc, #96]	; (8006d78 <prvAddNewTaskToReadyList+0xd4>)
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4a15      	ldr	r2, [pc, #84]	; (8006d7c <prvAddNewTaskToReadyList+0xd8>)
 8006d26:	441a      	add	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	4610      	mov	r0, r2
 8006d30:	f7ff f913 	bl	8005f5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d34:	f001 fa2e 	bl	8008194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d38:	4b0d      	ldr	r3, [pc, #52]	; (8006d70 <prvAddNewTaskToReadyList+0xcc>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00e      	beq.n	8006d5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d40:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <prvAddNewTaskToReadyList+0xc8>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d207      	bcs.n	8006d5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d4e:	4b0c      	ldr	r3, [pc, #48]	; (8006d80 <prvAddNewTaskToReadyList+0xdc>)
 8006d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d54:	601a      	str	r2, [r3, #0]
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d5e:	bf00      	nop
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20000efc 	.word	0x20000efc
 8006d6c:	20000a28 	.word	0x20000a28
 8006d70:	20000f08 	.word	0x20000f08
 8006d74:	20000f18 	.word	0x20000f18
 8006d78:	20000f04 	.word	0x20000f04
 8006d7c:	20000a2c 	.word	0x20000a2c
 8006d80:	e000ed04 	.word	0xe000ed04

08006d84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d017      	beq.n	8006dc6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d96:	4b13      	ldr	r3, [pc, #76]	; (8006de4 <vTaskDelay+0x60>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <vTaskDelay+0x30>
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	60bb      	str	r3, [r7, #8]
}
 8006db0:	bf00      	nop
 8006db2:	e7fe      	b.n	8006db2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006db4:	f000 f880 	bl	8006eb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006db8:	2100      	movs	r1, #0
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fcea 	bl	8007794 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006dc0:	f000 f888 	bl	8006ed4 <xTaskResumeAll>
 8006dc4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d107      	bne.n	8006ddc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006dcc:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <vTaskDelay+0x64>)
 8006dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ddc:	bf00      	nop
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	20000f24 	.word	0x20000f24
 8006de8:	e000ed04 	.word	0xe000ed04

08006dec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b08a      	sub	sp, #40	; 0x28
 8006df0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006df6:	2300      	movs	r3, #0
 8006df8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006dfa:	463a      	mov	r2, r7
 8006dfc:	1d39      	adds	r1, r7, #4
 8006dfe:	f107 0308 	add.w	r3, r7, #8
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7ff f848 	bl	8005e98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	9202      	str	r2, [sp, #8]
 8006e10:	9301      	str	r3, [sp, #4]
 8006e12:	2300      	movs	r3, #0
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	2300      	movs	r3, #0
 8006e18:	460a      	mov	r2, r1
 8006e1a:	4921      	ldr	r1, [pc, #132]	; (8006ea0 <vTaskStartScheduler+0xb4>)
 8006e1c:	4821      	ldr	r0, [pc, #132]	; (8006ea4 <vTaskStartScheduler+0xb8>)
 8006e1e:	f7ff fe0f 	bl	8006a40 <xTaskCreateStatic>
 8006e22:	4603      	mov	r3, r0
 8006e24:	4a20      	ldr	r2, [pc, #128]	; (8006ea8 <vTaskStartScheduler+0xbc>)
 8006e26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e28:	4b1f      	ldr	r3, [pc, #124]	; (8006ea8 <vTaskStartScheduler+0xbc>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e30:	2301      	movs	r3, #1
 8006e32:	617b      	str	r3, [r7, #20]
 8006e34:	e001      	b.n	8006e3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e36:	2300      	movs	r3, #0
 8006e38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d102      	bne.n	8006e46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e40:	f000 fcfc 	bl	800783c <xTimerCreateTimerTask>
 8006e44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d116      	bne.n	8006e7a <vTaskStartScheduler+0x8e>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	613b      	str	r3, [r7, #16]
}
 8006e5e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e60:	4b12      	ldr	r3, [pc, #72]	; (8006eac <vTaskStartScheduler+0xc0>)
 8006e62:	f04f 32ff 	mov.w	r2, #4294967295
 8006e66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e68:	4b11      	ldr	r3, [pc, #68]	; (8006eb0 <vTaskStartScheduler+0xc4>)
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e6e:	4b11      	ldr	r3, [pc, #68]	; (8006eb4 <vTaskStartScheduler+0xc8>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e74:	f001 f8bc 	bl	8007ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e78:	e00e      	b.n	8006e98 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e80:	d10a      	bne.n	8006e98 <vTaskStartScheduler+0xac>
	__asm volatile
 8006e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	60fb      	str	r3, [r7, #12]
}
 8006e94:	bf00      	nop
 8006e96:	e7fe      	b.n	8006e96 <vTaskStartScheduler+0xaa>
}
 8006e98:	bf00      	nop
 8006e9a:	3718      	adds	r7, #24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	0800a388 	.word	0x0800a388
 8006ea4:	080074d1 	.word	0x080074d1
 8006ea8:	20000f20 	.word	0x20000f20
 8006eac:	20000f1c 	.word	0x20000f1c
 8006eb0:	20000f08 	.word	0x20000f08
 8006eb4:	20000f00 	.word	0x20000f00

08006eb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ebc:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <vTaskSuspendAll+0x18>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	4a03      	ldr	r2, [pc, #12]	; (8006ed0 <vTaskSuspendAll+0x18>)
 8006ec4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006ec6:	bf00      	nop
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	20000f24 	.word	0x20000f24

08006ed4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ee2:	4b42      	ldr	r3, [pc, #264]	; (8006fec <xTaskResumeAll+0x118>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10a      	bne.n	8006f00 <xTaskResumeAll+0x2c>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	603b      	str	r3, [r7, #0]
}
 8006efc:	bf00      	nop
 8006efe:	e7fe      	b.n	8006efe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f00:	f001 f918 	bl	8008134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f04:	4b39      	ldr	r3, [pc, #228]	; (8006fec <xTaskResumeAll+0x118>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	4a38      	ldr	r2, [pc, #224]	; (8006fec <xTaskResumeAll+0x118>)
 8006f0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f0e:	4b37      	ldr	r3, [pc, #220]	; (8006fec <xTaskResumeAll+0x118>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d162      	bne.n	8006fdc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f16:	4b36      	ldr	r3, [pc, #216]	; (8006ff0 <xTaskResumeAll+0x11c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d05e      	beq.n	8006fdc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f1e:	e02f      	b.n	8006f80 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f20:	4b34      	ldr	r3, [pc, #208]	; (8006ff4 <xTaskResumeAll+0x120>)
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3318      	adds	r3, #24
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7ff f871 	bl	8006014 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3304      	adds	r3, #4
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff f86c 	bl	8006014 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f40:	4b2d      	ldr	r3, [pc, #180]	; (8006ff8 <xTaskResumeAll+0x124>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d903      	bls.n	8006f50 <xTaskResumeAll+0x7c>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	4a2a      	ldr	r2, [pc, #168]	; (8006ff8 <xTaskResumeAll+0x124>)
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f54:	4613      	mov	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4a27      	ldr	r2, [pc, #156]	; (8006ffc <xTaskResumeAll+0x128>)
 8006f5e:	441a      	add	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3304      	adds	r3, #4
 8006f64:	4619      	mov	r1, r3
 8006f66:	4610      	mov	r0, r2
 8006f68:	f7fe fff7 	bl	8005f5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f70:	4b23      	ldr	r3, [pc, #140]	; (8007000 <xTaskResumeAll+0x12c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d302      	bcc.n	8006f80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f7a:	4b22      	ldr	r3, [pc, #136]	; (8007004 <xTaskResumeAll+0x130>)
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f80:	4b1c      	ldr	r3, [pc, #112]	; (8006ff4 <xTaskResumeAll+0x120>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1cb      	bne.n	8006f20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f8e:	f000 fb55 	bl	800763c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f92:	4b1d      	ldr	r3, [pc, #116]	; (8007008 <xTaskResumeAll+0x134>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d010      	beq.n	8006fc0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f9e:	f000 f847 	bl	8007030 <xTaskIncrementTick>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006fa8:	4b16      	ldr	r3, [pc, #88]	; (8007004 <xTaskResumeAll+0x130>)
 8006faa:	2201      	movs	r2, #1
 8006fac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1f1      	bne.n	8006f9e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006fba:	4b13      	ldr	r3, [pc, #76]	; (8007008 <xTaskResumeAll+0x134>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fc0:	4b10      	ldr	r3, [pc, #64]	; (8007004 <xTaskResumeAll+0x130>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d009      	beq.n	8006fdc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fcc:	4b0f      	ldr	r3, [pc, #60]	; (800700c <xTaskResumeAll+0x138>)
 8006fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fdc:	f001 f8da 	bl	8008194 <vPortExitCritical>

	return xAlreadyYielded;
 8006fe0:	68bb      	ldr	r3, [r7, #8]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20000f24 	.word	0x20000f24
 8006ff0:	20000efc 	.word	0x20000efc
 8006ff4:	20000ebc 	.word	0x20000ebc
 8006ff8:	20000f04 	.word	0x20000f04
 8006ffc:	20000a2c 	.word	0x20000a2c
 8007000:	20000a28 	.word	0x20000a28
 8007004:	20000f10 	.word	0x20000f10
 8007008:	20000f0c 	.word	0x20000f0c
 800700c:	e000ed04 	.word	0xe000ed04

08007010 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007016:	4b05      	ldr	r3, [pc, #20]	; (800702c <xTaskGetTickCount+0x1c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800701c:	687b      	ldr	r3, [r7, #4]
}
 800701e:	4618      	mov	r0, r3
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	20000f00 	.word	0x20000f00

08007030 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007036:	2300      	movs	r3, #0
 8007038:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800703a:	4b4f      	ldr	r3, [pc, #316]	; (8007178 <xTaskIncrementTick+0x148>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f040 808f 	bne.w	8007162 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007044:	4b4d      	ldr	r3, [pc, #308]	; (800717c <xTaskIncrementTick+0x14c>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3301      	adds	r3, #1
 800704a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800704c:	4a4b      	ldr	r2, [pc, #300]	; (800717c <xTaskIncrementTick+0x14c>)
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d120      	bne.n	800709a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007058:	4b49      	ldr	r3, [pc, #292]	; (8007180 <xTaskIncrementTick+0x150>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00a      	beq.n	8007078 <xTaskIncrementTick+0x48>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	603b      	str	r3, [r7, #0]
}
 8007074:	bf00      	nop
 8007076:	e7fe      	b.n	8007076 <xTaskIncrementTick+0x46>
 8007078:	4b41      	ldr	r3, [pc, #260]	; (8007180 <xTaskIncrementTick+0x150>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	4b41      	ldr	r3, [pc, #260]	; (8007184 <xTaskIncrementTick+0x154>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a3f      	ldr	r2, [pc, #252]	; (8007180 <xTaskIncrementTick+0x150>)
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	4a3f      	ldr	r2, [pc, #252]	; (8007184 <xTaskIncrementTick+0x154>)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	4b3e      	ldr	r3, [pc, #248]	; (8007188 <xTaskIncrementTick+0x158>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3301      	adds	r3, #1
 8007092:	4a3d      	ldr	r2, [pc, #244]	; (8007188 <xTaskIncrementTick+0x158>)
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	f000 fad1 	bl	800763c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800709a:	4b3c      	ldr	r3, [pc, #240]	; (800718c <xTaskIncrementTick+0x15c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d349      	bcc.n	8007138 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070a4:	4b36      	ldr	r3, [pc, #216]	; (8007180 <xTaskIncrementTick+0x150>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d104      	bne.n	80070b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070ae:	4b37      	ldr	r3, [pc, #220]	; (800718c <xTaskIncrementTick+0x15c>)
 80070b0:	f04f 32ff 	mov.w	r2, #4294967295
 80070b4:	601a      	str	r2, [r3, #0]
					break;
 80070b6:	e03f      	b.n	8007138 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070b8:	4b31      	ldr	r3, [pc, #196]	; (8007180 <xTaskIncrementTick+0x150>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d203      	bcs.n	80070d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070d0:	4a2e      	ldr	r2, [pc, #184]	; (800718c <xTaskIncrementTick+0x15c>)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070d6:	e02f      	b.n	8007138 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	3304      	adds	r3, #4
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fe ff99 	bl	8006014 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d004      	beq.n	80070f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	3318      	adds	r3, #24
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe ff90 	bl	8006014 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f8:	4b25      	ldr	r3, [pc, #148]	; (8007190 <xTaskIncrementTick+0x160>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d903      	bls.n	8007108 <xTaskIncrementTick+0xd8>
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	4a22      	ldr	r2, [pc, #136]	; (8007190 <xTaskIncrementTick+0x160>)
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710c:	4613      	mov	r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4a1f      	ldr	r2, [pc, #124]	; (8007194 <xTaskIncrementTick+0x164>)
 8007116:	441a      	add	r2, r3
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	3304      	adds	r3, #4
 800711c:	4619      	mov	r1, r3
 800711e:	4610      	mov	r0, r2
 8007120:	f7fe ff1b 	bl	8005f5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007128:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <xTaskIncrementTick+0x168>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712e:	429a      	cmp	r2, r3
 8007130:	d3b8      	bcc.n	80070a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007132:	2301      	movs	r3, #1
 8007134:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007136:	e7b5      	b.n	80070a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007138:	4b17      	ldr	r3, [pc, #92]	; (8007198 <xTaskIncrementTick+0x168>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713e:	4915      	ldr	r1, [pc, #84]	; (8007194 <xTaskIncrementTick+0x164>)
 8007140:	4613      	mov	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	440b      	add	r3, r1
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d901      	bls.n	8007154 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007150:	2301      	movs	r3, #1
 8007152:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007154:	4b11      	ldr	r3, [pc, #68]	; (800719c <xTaskIncrementTick+0x16c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d007      	beq.n	800716c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800715c:	2301      	movs	r3, #1
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	e004      	b.n	800716c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007162:	4b0f      	ldr	r3, [pc, #60]	; (80071a0 <xTaskIncrementTick+0x170>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3301      	adds	r3, #1
 8007168:	4a0d      	ldr	r2, [pc, #52]	; (80071a0 <xTaskIncrementTick+0x170>)
 800716a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800716c:	697b      	ldr	r3, [r7, #20]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20000f24 	.word	0x20000f24
 800717c:	20000f00 	.word	0x20000f00
 8007180:	20000eb4 	.word	0x20000eb4
 8007184:	20000eb8 	.word	0x20000eb8
 8007188:	20000f14 	.word	0x20000f14
 800718c:	20000f1c 	.word	0x20000f1c
 8007190:	20000f04 	.word	0x20000f04
 8007194:	20000a2c 	.word	0x20000a2c
 8007198:	20000a28 	.word	0x20000a28
 800719c:	20000f10 	.word	0x20000f10
 80071a0:	20000f0c 	.word	0x20000f0c

080071a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071aa:	4b28      	ldr	r3, [pc, #160]	; (800724c <vTaskSwitchContext+0xa8>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071b2:	4b27      	ldr	r3, [pc, #156]	; (8007250 <vTaskSwitchContext+0xac>)
 80071b4:	2201      	movs	r2, #1
 80071b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071b8:	e041      	b.n	800723e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80071ba:	4b25      	ldr	r3, [pc, #148]	; (8007250 <vTaskSwitchContext+0xac>)
 80071bc:	2200      	movs	r2, #0
 80071be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071c0:	4b24      	ldr	r3, [pc, #144]	; (8007254 <vTaskSwitchContext+0xb0>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	e010      	b.n	80071ea <vTaskSwitchContext+0x46>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10a      	bne.n	80071e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	607b      	str	r3, [r7, #4]
}
 80071e0:	bf00      	nop
 80071e2:	e7fe      	b.n	80071e2 <vTaskSwitchContext+0x3e>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	3b01      	subs	r3, #1
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	491b      	ldr	r1, [pc, #108]	; (8007258 <vTaskSwitchContext+0xb4>)
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	4613      	mov	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	440b      	add	r3, r1
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0e4      	beq.n	80071c8 <vTaskSwitchContext+0x24>
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4613      	mov	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4413      	add	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4a13      	ldr	r2, [pc, #76]	; (8007258 <vTaskSwitchContext+0xb4>)
 800720a:	4413      	add	r3, r2
 800720c:	60bb      	str	r3, [r7, #8]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	685a      	ldr	r2, [r3, #4]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	605a      	str	r2, [r3, #4]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	3308      	adds	r3, #8
 8007220:	429a      	cmp	r2, r3
 8007222:	d104      	bne.n	800722e <vTaskSwitchContext+0x8a>
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	605a      	str	r2, [r3, #4]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	4a09      	ldr	r2, [pc, #36]	; (800725c <vTaskSwitchContext+0xb8>)
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	4a06      	ldr	r2, [pc, #24]	; (8007254 <vTaskSwitchContext+0xb0>)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6013      	str	r3, [r2, #0]
}
 800723e:	bf00      	nop
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	20000f24 	.word	0x20000f24
 8007250:	20000f10 	.word	0x20000f10
 8007254:	20000f04 	.word	0x20000f04
 8007258:	20000a2c 	.word	0x20000a2c
 800725c:	20000a28 	.word	0x20000a28

08007260 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	60fb      	str	r3, [r7, #12]
}
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007286:	4b07      	ldr	r3, [pc, #28]	; (80072a4 <vTaskPlaceOnEventList+0x44>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3318      	adds	r3, #24
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7fe fe87 	bl	8005fa2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007294:	2101      	movs	r1, #1
 8007296:	6838      	ldr	r0, [r7, #0]
 8007298:	f000 fa7c 	bl	8007794 <prvAddCurrentTaskToDelayedList>
}
 800729c:	bf00      	nop
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	20000a28 	.word	0x20000a28

080072a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10a      	bne.n	80072d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80072ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	617b      	str	r3, [r7, #20]
}
 80072cc:	bf00      	nop
 80072ce:	e7fe      	b.n	80072ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072d0:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <vTaskPlaceOnEventListRestricted+0x54>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3318      	adds	r3, #24
 80072d6:	4619      	mov	r1, r3
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f7fe fe3e 	bl	8005f5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80072e4:	f04f 33ff 	mov.w	r3, #4294967295
 80072e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	68b8      	ldr	r0, [r7, #8]
 80072ee:	f000 fa51 	bl	8007794 <prvAddCurrentTaskToDelayedList>
	}
 80072f2:	bf00      	nop
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	20000a28 	.word	0x20000a28

08007300 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10a      	bne.n	800732c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	60fb      	str	r3, [r7, #12]
}
 8007328:	bf00      	nop
 800732a:	e7fe      	b.n	800732a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	3318      	adds	r3, #24
 8007330:	4618      	mov	r0, r3
 8007332:	f7fe fe6f 	bl	8006014 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007336:	4b1e      	ldr	r3, [pc, #120]	; (80073b0 <xTaskRemoveFromEventList+0xb0>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d11d      	bne.n	800737a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	3304      	adds	r3, #4
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe fe66 	bl	8006014 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734c:	4b19      	ldr	r3, [pc, #100]	; (80073b4 <xTaskRemoveFromEventList+0xb4>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	429a      	cmp	r2, r3
 8007352:	d903      	bls.n	800735c <xTaskRemoveFromEventList+0x5c>
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	4a16      	ldr	r2, [pc, #88]	; (80073b4 <xTaskRemoveFromEventList+0xb4>)
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4a13      	ldr	r2, [pc, #76]	; (80073b8 <xTaskRemoveFromEventList+0xb8>)
 800736a:	441a      	add	r2, r3
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	3304      	adds	r3, #4
 8007370:	4619      	mov	r1, r3
 8007372:	4610      	mov	r0, r2
 8007374:	f7fe fdf1 	bl	8005f5a <vListInsertEnd>
 8007378:	e005      	b.n	8007386 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	3318      	adds	r3, #24
 800737e:	4619      	mov	r1, r3
 8007380:	480e      	ldr	r0, [pc, #56]	; (80073bc <xTaskRemoveFromEventList+0xbc>)
 8007382:	f7fe fdea 	bl	8005f5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738a:	4b0d      	ldr	r3, [pc, #52]	; (80073c0 <xTaskRemoveFromEventList+0xc0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	429a      	cmp	r2, r3
 8007392:	d905      	bls.n	80073a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007394:	2301      	movs	r3, #1
 8007396:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007398:	4b0a      	ldr	r3, [pc, #40]	; (80073c4 <xTaskRemoveFromEventList+0xc4>)
 800739a:	2201      	movs	r2, #1
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	e001      	b.n	80073a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80073a0:	2300      	movs	r3, #0
 80073a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073a4:	697b      	ldr	r3, [r7, #20]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	20000f24 	.word	0x20000f24
 80073b4:	20000f04 	.word	0x20000f04
 80073b8:	20000a2c 	.word	0x20000a2c
 80073bc:	20000ebc 	.word	0x20000ebc
 80073c0:	20000a28 	.word	0x20000a28
 80073c4:	20000f10 	.word	0x20000f10

080073c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073d0:	4b06      	ldr	r3, [pc, #24]	; (80073ec <vTaskInternalSetTimeOutState+0x24>)
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073d8:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <vTaskInternalSetTimeOutState+0x28>)
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	605a      	str	r2, [r3, #4]
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	20000f14 	.word	0x20000f14
 80073f0:	20000f00 	.word	0x20000f00

080073f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b088      	sub	sp, #32
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10a      	bne.n	800741a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	613b      	str	r3, [r7, #16]
}
 8007416:	bf00      	nop
 8007418:	e7fe      	b.n	8007418 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10a      	bne.n	8007436 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	60fb      	str	r3, [r7, #12]
}
 8007432:	bf00      	nop
 8007434:	e7fe      	b.n	8007434 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007436:	f000 fe7d 	bl	8008134 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800743a:	4b1d      	ldr	r3, [pc, #116]	; (80074b0 <xTaskCheckForTimeOut+0xbc>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007452:	d102      	bne.n	800745a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007454:	2300      	movs	r3, #0
 8007456:	61fb      	str	r3, [r7, #28]
 8007458:	e023      	b.n	80074a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	4b15      	ldr	r3, [pc, #84]	; (80074b4 <xTaskCheckForTimeOut+0xc0>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	429a      	cmp	r2, r3
 8007464:	d007      	beq.n	8007476 <xTaskCheckForTimeOut+0x82>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	429a      	cmp	r2, r3
 800746e:	d302      	bcc.n	8007476 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007470:	2301      	movs	r3, #1
 8007472:	61fb      	str	r3, [r7, #28]
 8007474:	e015      	b.n	80074a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	429a      	cmp	r2, r3
 800747e:	d20b      	bcs.n	8007498 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	1ad2      	subs	r2, r2, r3
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f7ff ff9b 	bl	80073c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007492:	2300      	movs	r3, #0
 8007494:	61fb      	str	r3, [r7, #28]
 8007496:	e004      	b.n	80074a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2200      	movs	r2, #0
 800749c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800749e:	2301      	movs	r3, #1
 80074a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074a2:	f000 fe77 	bl	8008194 <vPortExitCritical>

	return xReturn;
 80074a6:	69fb      	ldr	r3, [r7, #28]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3720      	adds	r7, #32
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	20000f00 	.word	0x20000f00
 80074b4:	20000f14 	.word	0x20000f14

080074b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074bc:	4b03      	ldr	r3, [pc, #12]	; (80074cc <vTaskMissedYield+0x14>)
 80074be:	2201      	movs	r2, #1
 80074c0:	601a      	str	r2, [r3, #0]
}
 80074c2:	bf00      	nop
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	20000f10 	.word	0x20000f10

080074d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074d8:	f000 f852 	bl	8007580 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074dc:	4b06      	ldr	r3, [pc, #24]	; (80074f8 <prvIdleTask+0x28>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d9f9      	bls.n	80074d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074e4:	4b05      	ldr	r3, [pc, #20]	; (80074fc <prvIdleTask+0x2c>)
 80074e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074f4:	e7f0      	b.n	80074d8 <prvIdleTask+0x8>
 80074f6:	bf00      	nop
 80074f8:	20000a2c 	.word	0x20000a2c
 80074fc:	e000ed04 	.word	0xe000ed04

08007500 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007506:	2300      	movs	r3, #0
 8007508:	607b      	str	r3, [r7, #4]
 800750a:	e00c      	b.n	8007526 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	4613      	mov	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4a12      	ldr	r2, [pc, #72]	; (8007560 <prvInitialiseTaskLists+0x60>)
 8007518:	4413      	add	r3, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f7fe fcf0 	bl	8005f00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3301      	adds	r3, #1
 8007524:	607b      	str	r3, [r7, #4]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b37      	cmp	r3, #55	; 0x37
 800752a:	d9ef      	bls.n	800750c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800752c:	480d      	ldr	r0, [pc, #52]	; (8007564 <prvInitialiseTaskLists+0x64>)
 800752e:	f7fe fce7 	bl	8005f00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007532:	480d      	ldr	r0, [pc, #52]	; (8007568 <prvInitialiseTaskLists+0x68>)
 8007534:	f7fe fce4 	bl	8005f00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007538:	480c      	ldr	r0, [pc, #48]	; (800756c <prvInitialiseTaskLists+0x6c>)
 800753a:	f7fe fce1 	bl	8005f00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800753e:	480c      	ldr	r0, [pc, #48]	; (8007570 <prvInitialiseTaskLists+0x70>)
 8007540:	f7fe fcde 	bl	8005f00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007544:	480b      	ldr	r0, [pc, #44]	; (8007574 <prvInitialiseTaskLists+0x74>)
 8007546:	f7fe fcdb 	bl	8005f00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800754a:	4b0b      	ldr	r3, [pc, #44]	; (8007578 <prvInitialiseTaskLists+0x78>)
 800754c:	4a05      	ldr	r2, [pc, #20]	; (8007564 <prvInitialiseTaskLists+0x64>)
 800754e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007550:	4b0a      	ldr	r3, [pc, #40]	; (800757c <prvInitialiseTaskLists+0x7c>)
 8007552:	4a05      	ldr	r2, [pc, #20]	; (8007568 <prvInitialiseTaskLists+0x68>)
 8007554:	601a      	str	r2, [r3, #0]
}
 8007556:	bf00      	nop
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	20000a2c 	.word	0x20000a2c
 8007564:	20000e8c 	.word	0x20000e8c
 8007568:	20000ea0 	.word	0x20000ea0
 800756c:	20000ebc 	.word	0x20000ebc
 8007570:	20000ed0 	.word	0x20000ed0
 8007574:	20000ee8 	.word	0x20000ee8
 8007578:	20000eb4 	.word	0x20000eb4
 800757c:	20000eb8 	.word	0x20000eb8

08007580 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007586:	e019      	b.n	80075bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007588:	f000 fdd4 	bl	8008134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800758c:	4b10      	ldr	r3, [pc, #64]	; (80075d0 <prvCheckTasksWaitingTermination+0x50>)
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3304      	adds	r3, #4
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe fd3b 	bl	8006014 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800759e:	4b0d      	ldr	r3, [pc, #52]	; (80075d4 <prvCheckTasksWaitingTermination+0x54>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	4a0b      	ldr	r2, [pc, #44]	; (80075d4 <prvCheckTasksWaitingTermination+0x54>)
 80075a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075a8:	4b0b      	ldr	r3, [pc, #44]	; (80075d8 <prvCheckTasksWaitingTermination+0x58>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	4a0a      	ldr	r2, [pc, #40]	; (80075d8 <prvCheckTasksWaitingTermination+0x58>)
 80075b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075b2:	f000 fdef 	bl	8008194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f810 	bl	80075dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075bc:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <prvCheckTasksWaitingTermination+0x58>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e1      	bne.n	8007588 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	20000ed0 	.word	0x20000ed0
 80075d4:	20000efc 	.word	0x20000efc
 80075d8:	20000ee4 	.word	0x20000ee4

080075dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d108      	bne.n	8007600 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 ff8c 	bl	8008510 <vPortFree>
				vPortFree( pxTCB );
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 ff89 	bl	8008510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075fe:	e018      	b.n	8007632 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007606:	2b01      	cmp	r3, #1
 8007608:	d103      	bne.n	8007612 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 ff80 	bl	8008510 <vPortFree>
	}
 8007610:	e00f      	b.n	8007632 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007618:	2b02      	cmp	r3, #2
 800761a:	d00a      	beq.n	8007632 <prvDeleteTCB+0x56>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	60fb      	str	r3, [r7, #12]
}
 800762e:	bf00      	nop
 8007630:	e7fe      	b.n	8007630 <prvDeleteTCB+0x54>
	}
 8007632:	bf00      	nop
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
	...

0800763c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007642:	4b0c      	ldr	r3, [pc, #48]	; (8007674 <prvResetNextTaskUnblockTime+0x38>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d104      	bne.n	8007656 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800764c:	4b0a      	ldr	r3, [pc, #40]	; (8007678 <prvResetNextTaskUnblockTime+0x3c>)
 800764e:	f04f 32ff 	mov.w	r2, #4294967295
 8007652:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007654:	e008      	b.n	8007668 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007656:	4b07      	ldr	r3, [pc, #28]	; (8007674 <prvResetNextTaskUnblockTime+0x38>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	4a04      	ldr	r2, [pc, #16]	; (8007678 <prvResetNextTaskUnblockTime+0x3c>)
 8007666:	6013      	str	r3, [r2, #0]
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	20000eb4 	.word	0x20000eb4
 8007678:	20000f1c 	.word	0x20000f1c

0800767c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007682:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <xTaskGetSchedulerState+0x34>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d102      	bne.n	8007690 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800768a:	2301      	movs	r3, #1
 800768c:	607b      	str	r3, [r7, #4]
 800768e:	e008      	b.n	80076a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007690:	4b08      	ldr	r3, [pc, #32]	; (80076b4 <xTaskGetSchedulerState+0x38>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d102      	bne.n	800769e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007698:	2302      	movs	r3, #2
 800769a:	607b      	str	r3, [r7, #4]
 800769c:	e001      	b.n	80076a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800769e:	2300      	movs	r3, #0
 80076a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076a2:	687b      	ldr	r3, [r7, #4]
	}
 80076a4:	4618      	mov	r0, r3
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	20000f08 	.word	0x20000f08
 80076b4:	20000f24 	.word	0x20000f24

080076b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076c4:	2300      	movs	r3, #0
 80076c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d056      	beq.n	800777c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076ce:	4b2e      	ldr	r3, [pc, #184]	; (8007788 <xTaskPriorityDisinherit+0xd0>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d00a      	beq.n	80076ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	60fb      	str	r3, [r7, #12]
}
 80076ea:	bf00      	nop
 80076ec:	e7fe      	b.n	80076ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10a      	bne.n	800770c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	60bb      	str	r3, [r7, #8]
}
 8007708:	bf00      	nop
 800770a:	e7fe      	b.n	800770a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007710:	1e5a      	subs	r2, r3, #1
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800771e:	429a      	cmp	r2, r3
 8007720:	d02c      	beq.n	800777c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007726:	2b00      	cmp	r3, #0
 8007728:	d128      	bne.n	800777c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	3304      	adds	r3, #4
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe fc70 	bl	8006014 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774c:	4b0f      	ldr	r3, [pc, #60]	; (800778c <xTaskPriorityDisinherit+0xd4>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	429a      	cmp	r2, r3
 8007752:	d903      	bls.n	800775c <xTaskPriorityDisinherit+0xa4>
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007758:	4a0c      	ldr	r2, [pc, #48]	; (800778c <xTaskPriorityDisinherit+0xd4>)
 800775a:	6013      	str	r3, [r2, #0]
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007760:	4613      	mov	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4a09      	ldr	r2, [pc, #36]	; (8007790 <xTaskPriorityDisinherit+0xd8>)
 800776a:	441a      	add	r2, r3
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	3304      	adds	r3, #4
 8007770:	4619      	mov	r1, r3
 8007772:	4610      	mov	r0, r2
 8007774:	f7fe fbf1 	bl	8005f5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007778:	2301      	movs	r3, #1
 800777a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800777c:	697b      	ldr	r3, [r7, #20]
	}
 800777e:	4618      	mov	r0, r3
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20000a28 	.word	0x20000a28
 800778c:	20000f04 	.word	0x20000f04
 8007790:	20000a2c 	.word	0x20000a2c

08007794 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800779e:	4b21      	ldr	r3, [pc, #132]	; (8007824 <prvAddCurrentTaskToDelayedList+0x90>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077a4:	4b20      	ldr	r3, [pc, #128]	; (8007828 <prvAddCurrentTaskToDelayedList+0x94>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3304      	adds	r3, #4
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fe fc32 	bl	8006014 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b6:	d10a      	bne.n	80077ce <prvAddCurrentTaskToDelayedList+0x3a>
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d007      	beq.n	80077ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077be:	4b1a      	ldr	r3, [pc, #104]	; (8007828 <prvAddCurrentTaskToDelayedList+0x94>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3304      	adds	r3, #4
 80077c4:	4619      	mov	r1, r3
 80077c6:	4819      	ldr	r0, [pc, #100]	; (800782c <prvAddCurrentTaskToDelayedList+0x98>)
 80077c8:	f7fe fbc7 	bl	8005f5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077cc:	e026      	b.n	800781c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4413      	add	r3, r2
 80077d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077d6:	4b14      	ldr	r3, [pc, #80]	; (8007828 <prvAddCurrentTaskToDelayedList+0x94>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d209      	bcs.n	80077fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077e6:	4b12      	ldr	r3, [pc, #72]	; (8007830 <prvAddCurrentTaskToDelayedList+0x9c>)
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	4b0f      	ldr	r3, [pc, #60]	; (8007828 <prvAddCurrentTaskToDelayedList+0x94>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3304      	adds	r3, #4
 80077f0:	4619      	mov	r1, r3
 80077f2:	4610      	mov	r0, r2
 80077f4:	f7fe fbd5 	bl	8005fa2 <vListInsert>
}
 80077f8:	e010      	b.n	800781c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077fa:	4b0e      	ldr	r3, [pc, #56]	; (8007834 <prvAddCurrentTaskToDelayedList+0xa0>)
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	4b0a      	ldr	r3, [pc, #40]	; (8007828 <prvAddCurrentTaskToDelayedList+0x94>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3304      	adds	r3, #4
 8007804:	4619      	mov	r1, r3
 8007806:	4610      	mov	r0, r2
 8007808:	f7fe fbcb 	bl	8005fa2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800780c:	4b0a      	ldr	r3, [pc, #40]	; (8007838 <prvAddCurrentTaskToDelayedList+0xa4>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68ba      	ldr	r2, [r7, #8]
 8007812:	429a      	cmp	r2, r3
 8007814:	d202      	bcs.n	800781c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007816:	4a08      	ldr	r2, [pc, #32]	; (8007838 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	6013      	str	r3, [r2, #0]
}
 800781c:	bf00      	nop
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20000f00 	.word	0x20000f00
 8007828:	20000a28 	.word	0x20000a28
 800782c:	20000ee8 	.word	0x20000ee8
 8007830:	20000eb8 	.word	0x20000eb8
 8007834:	20000eb4 	.word	0x20000eb4
 8007838:	20000f1c 	.word	0x20000f1c

0800783c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b08a      	sub	sp, #40	; 0x28
 8007840:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007842:	2300      	movs	r3, #0
 8007844:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007846:	f000 fb07 	bl	8007e58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800784a:	4b1c      	ldr	r3, [pc, #112]	; (80078bc <xTimerCreateTimerTask+0x80>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d021      	beq.n	8007896 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007856:	2300      	movs	r3, #0
 8007858:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800785a:	1d3a      	adds	r2, r7, #4
 800785c:	f107 0108 	add.w	r1, r7, #8
 8007860:	f107 030c 	add.w	r3, r7, #12
 8007864:	4618      	mov	r0, r3
 8007866:	f7fe fb31 	bl	8005ecc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800786a:	6879      	ldr	r1, [r7, #4]
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	9202      	str	r2, [sp, #8]
 8007872:	9301      	str	r3, [sp, #4]
 8007874:	2302      	movs	r3, #2
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	2300      	movs	r3, #0
 800787a:	460a      	mov	r2, r1
 800787c:	4910      	ldr	r1, [pc, #64]	; (80078c0 <xTimerCreateTimerTask+0x84>)
 800787e:	4811      	ldr	r0, [pc, #68]	; (80078c4 <xTimerCreateTimerTask+0x88>)
 8007880:	f7ff f8de 	bl	8006a40 <xTaskCreateStatic>
 8007884:	4603      	mov	r3, r0
 8007886:	4a10      	ldr	r2, [pc, #64]	; (80078c8 <xTimerCreateTimerTask+0x8c>)
 8007888:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800788a:	4b0f      	ldr	r3, [pc, #60]	; (80078c8 <xTimerCreateTimerTask+0x8c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007892:	2301      	movs	r3, #1
 8007894:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10a      	bne.n	80078b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	613b      	str	r3, [r7, #16]
}
 80078ae:	bf00      	nop
 80078b0:	e7fe      	b.n	80078b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80078b2:	697b      	ldr	r3, [r7, #20]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3718      	adds	r7, #24
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	20000f58 	.word	0x20000f58
 80078c0:	0800a390 	.word	0x0800a390
 80078c4:	08007a01 	.word	0x08007a01
 80078c8:	20000f5c 	.word	0x20000f5c

080078cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b08a      	sub	sp, #40	; 0x28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
 80078d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80078da:	2300      	movs	r3, #0
 80078dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10a      	bne.n	80078fa <xTimerGenericCommand+0x2e>
	__asm volatile
 80078e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e8:	f383 8811 	msr	BASEPRI, r3
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	623b      	str	r3, [r7, #32]
}
 80078f6:	bf00      	nop
 80078f8:	e7fe      	b.n	80078f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80078fa:	4b1a      	ldr	r3, [pc, #104]	; (8007964 <xTimerGenericCommand+0x98>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d02a      	beq.n	8007958 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	2b05      	cmp	r3, #5
 8007912:	dc18      	bgt.n	8007946 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007914:	f7ff feb2 	bl	800767c <xTaskGetSchedulerState>
 8007918:	4603      	mov	r3, r0
 800791a:	2b02      	cmp	r3, #2
 800791c:	d109      	bne.n	8007932 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800791e:	4b11      	ldr	r3, [pc, #68]	; (8007964 <xTimerGenericCommand+0x98>)
 8007920:	6818      	ldr	r0, [r3, #0]
 8007922:	f107 0110 	add.w	r1, r7, #16
 8007926:	2300      	movs	r3, #0
 8007928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800792a:	f7fe fca1 	bl	8006270 <xQueueGenericSend>
 800792e:	6278      	str	r0, [r7, #36]	; 0x24
 8007930:	e012      	b.n	8007958 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007932:	4b0c      	ldr	r3, [pc, #48]	; (8007964 <xTimerGenericCommand+0x98>)
 8007934:	6818      	ldr	r0, [r3, #0]
 8007936:	f107 0110 	add.w	r1, r7, #16
 800793a:	2300      	movs	r3, #0
 800793c:	2200      	movs	r2, #0
 800793e:	f7fe fc97 	bl	8006270 <xQueueGenericSend>
 8007942:	6278      	str	r0, [r7, #36]	; 0x24
 8007944:	e008      	b.n	8007958 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007946:	4b07      	ldr	r3, [pc, #28]	; (8007964 <xTimerGenericCommand+0x98>)
 8007948:	6818      	ldr	r0, [r3, #0]
 800794a:	f107 0110 	add.w	r1, r7, #16
 800794e:	2300      	movs	r3, #0
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	f7fe fd8b 	bl	800646c <xQueueGenericSendFromISR>
 8007956:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800795a:	4618      	mov	r0, r3
 800795c:	3728      	adds	r7, #40	; 0x28
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	20000f58 	.word	0x20000f58

08007968 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af02      	add	r7, sp, #8
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007972:	4b22      	ldr	r3, [pc, #136]	; (80079fc <prvProcessExpiredTimer+0x94>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	3304      	adds	r3, #4
 8007980:	4618      	mov	r0, r3
 8007982:	f7fe fb47 	bl	8006014 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	2b00      	cmp	r3, #0
 8007992:	d022      	beq.n	80079da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	699a      	ldr	r2, [r3, #24]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	18d1      	adds	r1, r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	6978      	ldr	r0, [r7, #20]
 80079a2:	f000 f8d1 	bl	8007b48 <prvInsertTimerInActiveList>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01f      	beq.n	80079ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079ac:	2300      	movs	r3, #0
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	2300      	movs	r3, #0
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	2100      	movs	r1, #0
 80079b6:	6978      	ldr	r0, [r7, #20]
 80079b8:	f7ff ff88 	bl	80078cc <xTimerGenericCommand>
 80079bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d113      	bne.n	80079ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 80079c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	60fb      	str	r3, [r7, #12]
}
 80079d6:	bf00      	nop
 80079d8:	e7fe      	b.n	80079d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079e0:	f023 0301 	bic.w	r3, r3, #1
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	6a1b      	ldr	r3, [r3, #32]
 80079f0:	6978      	ldr	r0, [r7, #20]
 80079f2:	4798      	blx	r3
}
 80079f4:	bf00      	nop
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	20000f50 	.word	0x20000f50

08007a00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a08:	f107 0308 	add.w	r3, r7, #8
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 f857 	bl	8007ac0 <prvGetNextExpireTime>
 8007a12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	4619      	mov	r1, r3
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f000 f803 	bl	8007a24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a1e:	f000 f8d5 	bl	8007bcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a22:	e7f1      	b.n	8007a08 <prvTimerTask+0x8>

08007a24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a2e:	f7ff fa43 	bl	8006eb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a32:	f107 0308 	add.w	r3, r7, #8
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 f866 	bl	8007b08 <prvSampleTimeNow>
 8007a3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d130      	bne.n	8007aa6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10a      	bne.n	8007a60 <prvProcessTimerOrBlockTask+0x3c>
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d806      	bhi.n	8007a60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a52:	f7ff fa3f 	bl	8006ed4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a56:	68f9      	ldr	r1, [r7, #12]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7ff ff85 	bl	8007968 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a5e:	e024      	b.n	8007aaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d008      	beq.n	8007a78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a66:	4b13      	ldr	r3, [pc, #76]	; (8007ab4 <prvProcessTimerOrBlockTask+0x90>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <prvProcessTimerOrBlockTask+0x50>
 8007a70:	2301      	movs	r3, #1
 8007a72:	e000      	b.n	8007a76 <prvProcessTimerOrBlockTask+0x52>
 8007a74:	2300      	movs	r3, #0
 8007a76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a78:	4b0f      	ldr	r3, [pc, #60]	; (8007ab8 <prvProcessTimerOrBlockTask+0x94>)
 8007a7a:	6818      	ldr	r0, [r3, #0]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	4619      	mov	r1, r3
 8007a86:	f7fe ffa7 	bl	80069d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a8a:	f7ff fa23 	bl	8006ed4 <xTaskResumeAll>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10a      	bne.n	8007aaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a94:	4b09      	ldr	r3, [pc, #36]	; (8007abc <prvProcessTimerOrBlockTask+0x98>)
 8007a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	f3bf 8f6f 	isb	sy
}
 8007aa4:	e001      	b.n	8007aaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007aa6:	f7ff fa15 	bl	8006ed4 <xTaskResumeAll>
}
 8007aaa:	bf00      	nop
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20000f54 	.word	0x20000f54
 8007ab8:	20000f58 	.word	0x20000f58
 8007abc:	e000ed04 	.word	0xe000ed04

08007ac0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ac8:	4b0e      	ldr	r3, [pc, #56]	; (8007b04 <prvGetNextExpireTime+0x44>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <prvGetNextExpireTime+0x16>
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	e000      	b.n	8007ad8 <prvGetNextExpireTime+0x18>
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d105      	bne.n	8007af0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ae4:	4b07      	ldr	r3, [pc, #28]	; (8007b04 <prvGetNextExpireTime+0x44>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	60fb      	str	r3, [r7, #12]
 8007aee:	e001      	b.n	8007af4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007af4:	68fb      	ldr	r3, [r7, #12]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20000f50 	.word	0x20000f50

08007b08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b10:	f7ff fa7e 	bl	8007010 <xTaskGetTickCount>
 8007b14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b16:	4b0b      	ldr	r3, [pc, #44]	; (8007b44 <prvSampleTimeNow+0x3c>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d205      	bcs.n	8007b2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b20:	f000 f936 	bl	8007d90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	601a      	str	r2, [r3, #0]
 8007b2a:	e002      	b.n	8007b32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b32:	4a04      	ldr	r2, [pc, #16]	; (8007b44 <prvSampleTimeNow+0x3c>)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b38:	68fb      	ldr	r3, [r7, #12]
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	20000f60 	.word	0x20000f60

08007b48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
 8007b54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b56:	2300      	movs	r3, #0
 8007b58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d812      	bhi.n	8007b94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	1ad2      	subs	r2, r2, r3
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d302      	bcc.n	8007b82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	617b      	str	r3, [r7, #20]
 8007b80:	e01b      	b.n	8007bba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b82:	4b10      	ldr	r3, [pc, #64]	; (8007bc4 <prvInsertTimerInActiveList+0x7c>)
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3304      	adds	r3, #4
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	f7fe fa08 	bl	8005fa2 <vListInsert>
 8007b92:	e012      	b.n	8007bba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d206      	bcs.n	8007baa <prvInsertTimerInActiveList+0x62>
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d302      	bcc.n	8007baa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	617b      	str	r3, [r7, #20]
 8007ba8:	e007      	b.n	8007bba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007baa:	4b07      	ldr	r3, [pc, #28]	; (8007bc8 <prvInsertTimerInActiveList+0x80>)
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	f7fe f9f4 	bl	8005fa2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007bba:	697b      	ldr	r3, [r7, #20]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	20000f54 	.word	0x20000f54
 8007bc8:	20000f50 	.word	0x20000f50

08007bcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08e      	sub	sp, #56	; 0x38
 8007bd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bd2:	e0ca      	b.n	8007d6a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	da18      	bge.n	8007c0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007bda:	1d3b      	adds	r3, r7, #4
 8007bdc:	3304      	adds	r3, #4
 8007bde:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10a      	bne.n	8007bfc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	61fb      	str	r3, [r7, #28]
}
 8007bf8:	bf00      	nop
 8007bfa:	e7fe      	b.n	8007bfa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c02:	6850      	ldr	r0, [r2, #4]
 8007c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c06:	6892      	ldr	r2, [r2, #8]
 8007c08:	4611      	mov	r1, r2
 8007c0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f2c0 80aa 	blt.w	8007d68 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1a:	695b      	ldr	r3, [r3, #20]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d004      	beq.n	8007c2a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c22:	3304      	adds	r3, #4
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fe f9f5 	bl	8006014 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c2a:	463b      	mov	r3, r7
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7ff ff6b 	bl	8007b08 <prvSampleTimeNow>
 8007c32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b09      	cmp	r3, #9
 8007c38:	f200 8097 	bhi.w	8007d6a <prvProcessReceivedCommands+0x19e>
 8007c3c:	a201      	add	r2, pc, #4	; (adr r2, 8007c44 <prvProcessReceivedCommands+0x78>)
 8007c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c42:	bf00      	nop
 8007c44:	08007c6d 	.word	0x08007c6d
 8007c48:	08007c6d 	.word	0x08007c6d
 8007c4c:	08007c6d 	.word	0x08007c6d
 8007c50:	08007ce1 	.word	0x08007ce1
 8007c54:	08007cf5 	.word	0x08007cf5
 8007c58:	08007d3f 	.word	0x08007d3f
 8007c5c:	08007c6d 	.word	0x08007c6d
 8007c60:	08007c6d 	.word	0x08007c6d
 8007c64:	08007ce1 	.word	0x08007ce1
 8007c68:	08007cf5 	.word	0x08007cf5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c72:	f043 0301 	orr.w	r3, r3, #1
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	18d1      	adds	r1, r2, r3
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c8c:	f7ff ff5c 	bl	8007b48 <prvInsertTimerInActiveList>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d069      	beq.n	8007d6a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ca4:	f003 0304 	and.w	r3, r3, #4
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d05e      	beq.n	8007d6a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	441a      	add	r2, r3
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	2300      	movs	r3, #0
 8007cba:	2100      	movs	r1, #0
 8007cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cbe:	f7ff fe05 	bl	80078cc <xTimerGenericCommand>
 8007cc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d14f      	bne.n	8007d6a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cce:	f383 8811 	msr	BASEPRI, r3
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	61bb      	str	r3, [r7, #24]
}
 8007cdc:	bf00      	nop
 8007cde:	e7fe      	b.n	8007cde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ce6:	f023 0301 	bic.w	r3, r3, #1
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007cf2:	e03a      	b.n	8007d6a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cfa:	f043 0301 	orr.w	r3, r3, #1
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10a      	bne.n	8007d2a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	617b      	str	r3, [r7, #20]
}
 8007d26:	bf00      	nop
 8007d28:	e7fe      	b.n	8007d28 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2c:	699a      	ldr	r2, [r3, #24]
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	18d1      	adds	r1, r2, r3
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d38:	f7ff ff06 	bl	8007b48 <prvInsertTimerInActiveList>
					break;
 8007d3c:	e015      	b.n	8007d6a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d103      	bne.n	8007d54 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d4e:	f000 fbdf 	bl	8008510 <vPortFree>
 8007d52:	e00a      	b.n	8007d6a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d5a:	f023 0301 	bic.w	r3, r3, #1
 8007d5e:	b2da      	uxtb	r2, r3
 8007d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d66:	e000      	b.n	8007d6a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d6a:	4b08      	ldr	r3, [pc, #32]	; (8007d8c <prvProcessReceivedCommands+0x1c0>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	1d39      	adds	r1, r7, #4
 8007d70:	2200      	movs	r2, #0
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe fc16 	bl	80065a4 <xQueueReceive>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f47f af2a 	bne.w	8007bd4 <prvProcessReceivedCommands+0x8>
	}
}
 8007d80:	bf00      	nop
 8007d82:	bf00      	nop
 8007d84:	3730      	adds	r7, #48	; 0x30
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20000f58 	.word	0x20000f58

08007d90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d96:	e048      	b.n	8007e2a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d98:	4b2d      	ldr	r3, [pc, #180]	; (8007e50 <prvSwitchTimerLists+0xc0>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007da2:	4b2b      	ldr	r3, [pc, #172]	; (8007e50 <prvSwitchTimerLists+0xc0>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	3304      	adds	r3, #4
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fe f92f 	bl	8006014 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dc4:	f003 0304 	and.w	r3, r3, #4
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d02e      	beq.n	8007e2a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d90e      	bls.n	8007dfc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dea:	4b19      	ldr	r3, [pc, #100]	; (8007e50 <prvSwitchTimerLists+0xc0>)
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3304      	adds	r3, #4
 8007df2:	4619      	mov	r1, r3
 8007df4:	4610      	mov	r0, r2
 8007df6:	f7fe f8d4 	bl	8005fa2 <vListInsert>
 8007dfa:	e016      	b.n	8007e2a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	2300      	movs	r3, #0
 8007e02:	693a      	ldr	r2, [r7, #16]
 8007e04:	2100      	movs	r1, #0
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f7ff fd60 	bl	80078cc <xTimerGenericCommand>
 8007e0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10a      	bne.n	8007e2a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	603b      	str	r3, [r7, #0]
}
 8007e26:	bf00      	nop
 8007e28:	e7fe      	b.n	8007e28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e2a:	4b09      	ldr	r3, [pc, #36]	; (8007e50 <prvSwitchTimerLists+0xc0>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1b1      	bne.n	8007d98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e34:	4b06      	ldr	r3, [pc, #24]	; (8007e50 <prvSwitchTimerLists+0xc0>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e3a:	4b06      	ldr	r3, [pc, #24]	; (8007e54 <prvSwitchTimerLists+0xc4>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a04      	ldr	r2, [pc, #16]	; (8007e50 <prvSwitchTimerLists+0xc0>)
 8007e40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e42:	4a04      	ldr	r2, [pc, #16]	; (8007e54 <prvSwitchTimerLists+0xc4>)
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	6013      	str	r3, [r2, #0]
}
 8007e48:	bf00      	nop
 8007e4a:	3718      	adds	r7, #24
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	20000f50 	.word	0x20000f50
 8007e54:	20000f54 	.word	0x20000f54

08007e58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e5e:	f000 f969 	bl	8008134 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e62:	4b15      	ldr	r3, [pc, #84]	; (8007eb8 <prvCheckForValidListAndQueue+0x60>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d120      	bne.n	8007eac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e6a:	4814      	ldr	r0, [pc, #80]	; (8007ebc <prvCheckForValidListAndQueue+0x64>)
 8007e6c:	f7fe f848 	bl	8005f00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e70:	4813      	ldr	r0, [pc, #76]	; (8007ec0 <prvCheckForValidListAndQueue+0x68>)
 8007e72:	f7fe f845 	bl	8005f00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e76:	4b13      	ldr	r3, [pc, #76]	; (8007ec4 <prvCheckForValidListAndQueue+0x6c>)
 8007e78:	4a10      	ldr	r2, [pc, #64]	; (8007ebc <prvCheckForValidListAndQueue+0x64>)
 8007e7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e7c:	4b12      	ldr	r3, [pc, #72]	; (8007ec8 <prvCheckForValidListAndQueue+0x70>)
 8007e7e:	4a10      	ldr	r2, [pc, #64]	; (8007ec0 <prvCheckForValidListAndQueue+0x68>)
 8007e80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e82:	2300      	movs	r3, #0
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	4b11      	ldr	r3, [pc, #68]	; (8007ecc <prvCheckForValidListAndQueue+0x74>)
 8007e88:	4a11      	ldr	r2, [pc, #68]	; (8007ed0 <prvCheckForValidListAndQueue+0x78>)
 8007e8a:	2110      	movs	r1, #16
 8007e8c:	200a      	movs	r0, #10
 8007e8e:	f7fe f953 	bl	8006138 <xQueueGenericCreateStatic>
 8007e92:	4603      	mov	r3, r0
 8007e94:	4a08      	ldr	r2, [pc, #32]	; (8007eb8 <prvCheckForValidListAndQueue+0x60>)
 8007e96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e98:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <prvCheckForValidListAndQueue+0x60>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d005      	beq.n	8007eac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ea0:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <prvCheckForValidListAndQueue+0x60>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	490b      	ldr	r1, [pc, #44]	; (8007ed4 <prvCheckForValidListAndQueue+0x7c>)
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fe fd6c 	bl	8006984 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007eac:	f000 f972 	bl	8008194 <vPortExitCritical>
}
 8007eb0:	bf00      	nop
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20000f58 	.word	0x20000f58
 8007ebc:	20000f28 	.word	0x20000f28
 8007ec0:	20000f3c 	.word	0x20000f3c
 8007ec4:	20000f50 	.word	0x20000f50
 8007ec8:	20000f54 	.word	0x20000f54
 8007ecc:	20001004 	.word	0x20001004
 8007ed0:	20000f64 	.word	0x20000f64
 8007ed4:	0800a398 	.word	0x0800a398

08007ed8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	3b04      	subs	r3, #4
 8007ee8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	3b04      	subs	r3, #4
 8007ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	f023 0201 	bic.w	r2, r3, #1
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	3b04      	subs	r3, #4
 8007f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f08:	4a0c      	ldr	r2, [pc, #48]	; (8007f3c <pxPortInitialiseStack+0x64>)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3b14      	subs	r3, #20
 8007f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3b04      	subs	r3, #4
 8007f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f06f 0202 	mvn.w	r2, #2
 8007f26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	3b20      	subs	r3, #32
 8007f2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr
 8007f3c:	08007f41 	.word	0x08007f41

08007f40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f46:	2300      	movs	r3, #0
 8007f48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f4a:	4b12      	ldr	r3, [pc, #72]	; (8007f94 <prvTaskExitError+0x54>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f52:	d00a      	beq.n	8007f6a <prvTaskExitError+0x2a>
	__asm volatile
 8007f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	60fb      	str	r3, [r7, #12]
}
 8007f66:	bf00      	nop
 8007f68:	e7fe      	b.n	8007f68 <prvTaskExitError+0x28>
	__asm volatile
 8007f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	60bb      	str	r3, [r7, #8]
}
 8007f7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f7e:	bf00      	nop
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d0fc      	beq.n	8007f80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f86:	bf00      	nop
 8007f88:	bf00      	nop
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr
 8007f94:	2000000c 	.word	0x2000000c
	...

08007fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007fa0:	4b07      	ldr	r3, [pc, #28]	; (8007fc0 <pxCurrentTCBConst2>)
 8007fa2:	6819      	ldr	r1, [r3, #0]
 8007fa4:	6808      	ldr	r0, [r1, #0]
 8007fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007faa:	f380 8809 	msr	PSP, r0
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f04f 0000 	mov.w	r0, #0
 8007fb6:	f380 8811 	msr	BASEPRI, r0
 8007fba:	4770      	bx	lr
 8007fbc:	f3af 8000 	nop.w

08007fc0 <pxCurrentTCBConst2>:
 8007fc0:	20000a28 	.word	0x20000a28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007fc4:	bf00      	nop
 8007fc6:	bf00      	nop

08007fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007fc8:	4808      	ldr	r0, [pc, #32]	; (8007fec <prvPortStartFirstTask+0x24>)
 8007fca:	6800      	ldr	r0, [r0, #0]
 8007fcc:	6800      	ldr	r0, [r0, #0]
 8007fce:	f380 8808 	msr	MSP, r0
 8007fd2:	f04f 0000 	mov.w	r0, #0
 8007fd6:	f380 8814 	msr	CONTROL, r0
 8007fda:	b662      	cpsie	i
 8007fdc:	b661      	cpsie	f
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	df00      	svc	0
 8007fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007fea:	bf00      	nop
 8007fec:	e000ed08 	.word	0xe000ed08

08007ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ff6:	4b46      	ldr	r3, [pc, #280]	; (8008110 <xPortStartScheduler+0x120>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a46      	ldr	r2, [pc, #280]	; (8008114 <xPortStartScheduler+0x124>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d10a      	bne.n	8008016 <xPortStartScheduler+0x26>
	__asm volatile
 8008000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	613b      	str	r3, [r7, #16]
}
 8008012:	bf00      	nop
 8008014:	e7fe      	b.n	8008014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008016:	4b3e      	ldr	r3, [pc, #248]	; (8008110 <xPortStartScheduler+0x120>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a3f      	ldr	r2, [pc, #252]	; (8008118 <xPortStartScheduler+0x128>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d10a      	bne.n	8008036 <xPortStartScheduler+0x46>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	60fb      	str	r3, [r7, #12]
}
 8008032:	bf00      	nop
 8008034:	e7fe      	b.n	8008034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008036:	4b39      	ldr	r3, [pc, #228]	; (800811c <xPortStartScheduler+0x12c>)
 8008038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	b2db      	uxtb	r3, r3
 8008040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	22ff      	movs	r2, #255	; 0xff
 8008046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	b2db      	uxtb	r3, r3
 800804e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008050:	78fb      	ldrb	r3, [r7, #3]
 8008052:	b2db      	uxtb	r3, r3
 8008054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008058:	b2da      	uxtb	r2, r3
 800805a:	4b31      	ldr	r3, [pc, #196]	; (8008120 <xPortStartScheduler+0x130>)
 800805c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800805e:	4b31      	ldr	r3, [pc, #196]	; (8008124 <xPortStartScheduler+0x134>)
 8008060:	2207      	movs	r2, #7
 8008062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008064:	e009      	b.n	800807a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008066:	4b2f      	ldr	r3, [pc, #188]	; (8008124 <xPortStartScheduler+0x134>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3b01      	subs	r3, #1
 800806c:	4a2d      	ldr	r2, [pc, #180]	; (8008124 <xPortStartScheduler+0x134>)
 800806e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	b2db      	uxtb	r3, r3
 8008074:	005b      	lsls	r3, r3, #1
 8008076:	b2db      	uxtb	r3, r3
 8008078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800807a:	78fb      	ldrb	r3, [r7, #3]
 800807c:	b2db      	uxtb	r3, r3
 800807e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008082:	2b80      	cmp	r3, #128	; 0x80
 8008084:	d0ef      	beq.n	8008066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008086:	4b27      	ldr	r3, [pc, #156]	; (8008124 <xPortStartScheduler+0x134>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f1c3 0307 	rsb	r3, r3, #7
 800808e:	2b04      	cmp	r3, #4
 8008090:	d00a      	beq.n	80080a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	60bb      	str	r3, [r7, #8]
}
 80080a4:	bf00      	nop
 80080a6:	e7fe      	b.n	80080a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080a8:	4b1e      	ldr	r3, [pc, #120]	; (8008124 <xPortStartScheduler+0x134>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	021b      	lsls	r3, r3, #8
 80080ae:	4a1d      	ldr	r2, [pc, #116]	; (8008124 <xPortStartScheduler+0x134>)
 80080b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080b2:	4b1c      	ldr	r3, [pc, #112]	; (8008124 <xPortStartScheduler+0x134>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080ba:	4a1a      	ldr	r2, [pc, #104]	; (8008124 <xPortStartScheduler+0x134>)
 80080bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080c6:	4b18      	ldr	r3, [pc, #96]	; (8008128 <xPortStartScheduler+0x138>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a17      	ldr	r2, [pc, #92]	; (8008128 <xPortStartScheduler+0x138>)
 80080cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80080d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080d2:	4b15      	ldr	r3, [pc, #84]	; (8008128 <xPortStartScheduler+0x138>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a14      	ldr	r2, [pc, #80]	; (8008128 <xPortStartScheduler+0x138>)
 80080d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80080dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80080de:	f000 f8dd 	bl	800829c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080e2:	4b12      	ldr	r3, [pc, #72]	; (800812c <xPortStartScheduler+0x13c>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080e8:	f000 f8fc 	bl	80082e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080ec:	4b10      	ldr	r3, [pc, #64]	; (8008130 <xPortStartScheduler+0x140>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a0f      	ldr	r2, [pc, #60]	; (8008130 <xPortStartScheduler+0x140>)
 80080f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80080f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080f8:	f7ff ff66 	bl	8007fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080fc:	f7ff f852 	bl	80071a4 <vTaskSwitchContext>
	prvTaskExitError();
 8008100:	f7ff ff1e 	bl	8007f40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	e000ed00 	.word	0xe000ed00
 8008114:	410fc271 	.word	0x410fc271
 8008118:	410fc270 	.word	0x410fc270
 800811c:	e000e400 	.word	0xe000e400
 8008120:	20001054 	.word	0x20001054
 8008124:	20001058 	.word	0x20001058
 8008128:	e000ed20 	.word	0xe000ed20
 800812c:	2000000c 	.word	0x2000000c
 8008130:	e000ef34 	.word	0xe000ef34

08008134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	607b      	str	r3, [r7, #4]
}
 800814c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800814e:	4b0f      	ldr	r3, [pc, #60]	; (800818c <vPortEnterCritical+0x58>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3301      	adds	r3, #1
 8008154:	4a0d      	ldr	r2, [pc, #52]	; (800818c <vPortEnterCritical+0x58>)
 8008156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008158:	4b0c      	ldr	r3, [pc, #48]	; (800818c <vPortEnterCritical+0x58>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d10f      	bne.n	8008180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008160:	4b0b      	ldr	r3, [pc, #44]	; (8008190 <vPortEnterCritical+0x5c>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00a      	beq.n	8008180 <vPortEnterCritical+0x4c>
	__asm volatile
 800816a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816e:	f383 8811 	msr	BASEPRI, r3
 8008172:	f3bf 8f6f 	isb	sy
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	603b      	str	r3, [r7, #0]
}
 800817c:	bf00      	nop
 800817e:	e7fe      	b.n	800817e <vPortEnterCritical+0x4a>
	}
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	2000000c 	.word	0x2000000c
 8008190:	e000ed04 	.word	0xe000ed04

08008194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800819a:	4b12      	ldr	r3, [pc, #72]	; (80081e4 <vPortExitCritical+0x50>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10a      	bne.n	80081b8 <vPortExitCritical+0x24>
	__asm volatile
 80081a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a6:	f383 8811 	msr	BASEPRI, r3
 80081aa:	f3bf 8f6f 	isb	sy
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	607b      	str	r3, [r7, #4]
}
 80081b4:	bf00      	nop
 80081b6:	e7fe      	b.n	80081b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80081b8:	4b0a      	ldr	r3, [pc, #40]	; (80081e4 <vPortExitCritical+0x50>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3b01      	subs	r3, #1
 80081be:	4a09      	ldr	r2, [pc, #36]	; (80081e4 <vPortExitCritical+0x50>)
 80081c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081c2:	4b08      	ldr	r3, [pc, #32]	; (80081e4 <vPortExitCritical+0x50>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d105      	bne.n	80081d6 <vPortExitCritical+0x42>
 80081ca:	2300      	movs	r3, #0
 80081cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	f383 8811 	msr	BASEPRI, r3
}
 80081d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80081d6:	bf00      	nop
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	2000000c 	.word	0x2000000c
	...

080081f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081f0:	f3ef 8009 	mrs	r0, PSP
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	4b15      	ldr	r3, [pc, #84]	; (8008250 <pxCurrentTCBConst>)
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	f01e 0f10 	tst.w	lr, #16
 8008200:	bf08      	it	eq
 8008202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800820a:	6010      	str	r0, [r2, #0]
 800820c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008214:	f380 8811 	msr	BASEPRI, r0
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f7fe ffc0 	bl	80071a4 <vTaskSwitchContext>
 8008224:	f04f 0000 	mov.w	r0, #0
 8008228:	f380 8811 	msr	BASEPRI, r0
 800822c:	bc09      	pop	{r0, r3}
 800822e:	6819      	ldr	r1, [r3, #0]
 8008230:	6808      	ldr	r0, [r1, #0]
 8008232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008236:	f01e 0f10 	tst.w	lr, #16
 800823a:	bf08      	it	eq
 800823c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008240:	f380 8809 	msr	PSP, r0
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	f3af 8000 	nop.w

08008250 <pxCurrentTCBConst>:
 8008250:	20000a28 	.word	0x20000a28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008254:	bf00      	nop
 8008256:	bf00      	nop

08008258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	607b      	str	r3, [r7, #4]
}
 8008270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008272:	f7fe fedd 	bl	8007030 <xTaskIncrementTick>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d003      	beq.n	8008284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800827c:	4b06      	ldr	r3, [pc, #24]	; (8008298 <xPortSysTickHandler+0x40>)
 800827e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	2300      	movs	r3, #0
 8008286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	f383 8811 	msr	BASEPRI, r3
}
 800828e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008290:	bf00      	nop
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	e000ed04 	.word	0xe000ed04

0800829c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800829c:	b480      	push	{r7}
 800829e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082a0:	4b0b      	ldr	r3, [pc, #44]	; (80082d0 <vPortSetupTimerInterrupt+0x34>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082a6:	4b0b      	ldr	r3, [pc, #44]	; (80082d4 <vPortSetupTimerInterrupt+0x38>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082ac:	4b0a      	ldr	r3, [pc, #40]	; (80082d8 <vPortSetupTimerInterrupt+0x3c>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a0a      	ldr	r2, [pc, #40]	; (80082dc <vPortSetupTimerInterrupt+0x40>)
 80082b2:	fba2 2303 	umull	r2, r3, r2, r3
 80082b6:	099b      	lsrs	r3, r3, #6
 80082b8:	4a09      	ldr	r2, [pc, #36]	; (80082e0 <vPortSetupTimerInterrupt+0x44>)
 80082ba:	3b01      	subs	r3, #1
 80082bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082be:	4b04      	ldr	r3, [pc, #16]	; (80082d0 <vPortSetupTimerInterrupt+0x34>)
 80082c0:	2207      	movs	r2, #7
 80082c2:	601a      	str	r2, [r3, #0]
}
 80082c4:	bf00      	nop
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	e000e010 	.word	0xe000e010
 80082d4:	e000e018 	.word	0xe000e018
 80082d8:	20000000 	.word	0x20000000
 80082dc:	10624dd3 	.word	0x10624dd3
 80082e0:	e000e014 	.word	0xe000e014

080082e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80082f4 <vPortEnableVFP+0x10>
 80082e8:	6801      	ldr	r1, [r0, #0]
 80082ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80082ee:	6001      	str	r1, [r0, #0]
 80082f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80082f2:	bf00      	nop
 80082f4:	e000ed88 	.word	0xe000ed88

080082f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80082fe:	f3ef 8305 	mrs	r3, IPSR
 8008302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b0f      	cmp	r3, #15
 8008308:	d914      	bls.n	8008334 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800830a:	4a17      	ldr	r2, [pc, #92]	; (8008368 <vPortValidateInterruptPriority+0x70>)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	4413      	add	r3, r2
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008314:	4b15      	ldr	r3, [pc, #84]	; (800836c <vPortValidateInterruptPriority+0x74>)
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	7afa      	ldrb	r2, [r7, #11]
 800831a:	429a      	cmp	r2, r3
 800831c:	d20a      	bcs.n	8008334 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	607b      	str	r3, [r7, #4]
}
 8008330:	bf00      	nop
 8008332:	e7fe      	b.n	8008332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008334:	4b0e      	ldr	r3, [pc, #56]	; (8008370 <vPortValidateInterruptPriority+0x78>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800833c:	4b0d      	ldr	r3, [pc, #52]	; (8008374 <vPortValidateInterruptPriority+0x7c>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	429a      	cmp	r2, r3
 8008342:	d90a      	bls.n	800835a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	603b      	str	r3, [r7, #0]
}
 8008356:	bf00      	nop
 8008358:	e7fe      	b.n	8008358 <vPortValidateInterruptPriority+0x60>
	}
 800835a:	bf00      	nop
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	e000e3f0 	.word	0xe000e3f0
 800836c:	20001054 	.word	0x20001054
 8008370:	e000ed0c 	.word	0xe000ed0c
 8008374:	20001058 	.word	0x20001058

08008378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b08a      	sub	sp, #40	; 0x28
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008380:	2300      	movs	r3, #0
 8008382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008384:	f7fe fd98 	bl	8006eb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008388:	4b5b      	ldr	r3, [pc, #364]	; (80084f8 <pvPortMalloc+0x180>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008390:	f000 f920 	bl	80085d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008394:	4b59      	ldr	r3, [pc, #356]	; (80084fc <pvPortMalloc+0x184>)
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4013      	ands	r3, r2
 800839c:	2b00      	cmp	r3, #0
 800839e:	f040 8093 	bne.w	80084c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d01d      	beq.n	80083e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80083a8:	2208      	movs	r2, #8
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4413      	add	r3, r2
 80083ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f003 0307 	and.w	r3, r3, #7
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d014      	beq.n	80083e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f023 0307 	bic.w	r3, r3, #7
 80083c0:	3308      	adds	r3, #8
 80083c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f003 0307 	and.w	r3, r3, #7
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00a      	beq.n	80083e4 <pvPortMalloc+0x6c>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	617b      	str	r3, [r7, #20]
}
 80083e0:	bf00      	nop
 80083e2:	e7fe      	b.n	80083e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d06e      	beq.n	80084c8 <pvPortMalloc+0x150>
 80083ea:	4b45      	ldr	r3, [pc, #276]	; (8008500 <pvPortMalloc+0x188>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d869      	bhi.n	80084c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083f4:	4b43      	ldr	r3, [pc, #268]	; (8008504 <pvPortMalloc+0x18c>)
 80083f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80083f8:	4b42      	ldr	r3, [pc, #264]	; (8008504 <pvPortMalloc+0x18c>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083fe:	e004      	b.n	800840a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	429a      	cmp	r2, r3
 8008412:	d903      	bls.n	800841c <pvPortMalloc+0xa4>
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1f1      	bne.n	8008400 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800841c:	4b36      	ldr	r3, [pc, #216]	; (80084f8 <pvPortMalloc+0x180>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008422:	429a      	cmp	r2, r3
 8008424:	d050      	beq.n	80084c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008426:	6a3b      	ldr	r3, [r7, #32]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2208      	movs	r2, #8
 800842c:	4413      	add	r3, r2
 800842e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	6a3b      	ldr	r3, [r7, #32]
 8008436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	1ad2      	subs	r2, r2, r3
 8008440:	2308      	movs	r3, #8
 8008442:	005b      	lsls	r3, r3, #1
 8008444:	429a      	cmp	r2, r3
 8008446:	d91f      	bls.n	8008488 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4413      	add	r3, r2
 800844e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	f003 0307 	and.w	r3, r3, #7
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00a      	beq.n	8008470 <pvPortMalloc+0xf8>
	__asm volatile
 800845a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	613b      	str	r3, [r7, #16]
}
 800846c:	bf00      	nop
 800846e:	e7fe      	b.n	800846e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	685a      	ldr	r2, [r3, #4]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	1ad2      	subs	r2, r2, r3
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008482:	69b8      	ldr	r0, [r7, #24]
 8008484:	f000 f908 	bl	8008698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008488:	4b1d      	ldr	r3, [pc, #116]	; (8008500 <pvPortMalloc+0x188>)
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	4a1b      	ldr	r2, [pc, #108]	; (8008500 <pvPortMalloc+0x188>)
 8008494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008496:	4b1a      	ldr	r3, [pc, #104]	; (8008500 <pvPortMalloc+0x188>)
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	4b1b      	ldr	r3, [pc, #108]	; (8008508 <pvPortMalloc+0x190>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d203      	bcs.n	80084aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084a2:	4b17      	ldr	r3, [pc, #92]	; (8008500 <pvPortMalloc+0x188>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a18      	ldr	r2, [pc, #96]	; (8008508 <pvPortMalloc+0x190>)
 80084a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	685a      	ldr	r2, [r3, #4]
 80084ae:	4b13      	ldr	r3, [pc, #76]	; (80084fc <pvPortMalloc+0x184>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	431a      	orrs	r2, r3
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	2200      	movs	r2, #0
 80084bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80084be:	4b13      	ldr	r3, [pc, #76]	; (800850c <pvPortMalloc+0x194>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	3301      	adds	r3, #1
 80084c4:	4a11      	ldr	r2, [pc, #68]	; (800850c <pvPortMalloc+0x194>)
 80084c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084c8:	f7fe fd04 	bl	8006ed4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	f003 0307 	and.w	r3, r3, #7
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00a      	beq.n	80084ec <pvPortMalloc+0x174>
	__asm volatile
 80084d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	60fb      	str	r3, [r7, #12]
}
 80084e8:	bf00      	nop
 80084ea:	e7fe      	b.n	80084ea <pvPortMalloc+0x172>
	return pvReturn;
 80084ec:	69fb      	ldr	r3, [r7, #28]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3728      	adds	r7, #40	; 0x28
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	20001c1c 	.word	0x20001c1c
 80084fc:	20001c30 	.word	0x20001c30
 8008500:	20001c20 	.word	0x20001c20
 8008504:	20001c14 	.word	0x20001c14
 8008508:	20001c24 	.word	0x20001c24
 800850c:	20001c28 	.word	0x20001c28

08008510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d04d      	beq.n	80085be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008522:	2308      	movs	r3, #8
 8008524:	425b      	negs	r3, r3
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	4413      	add	r3, r2
 800852a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	685a      	ldr	r2, [r3, #4]
 8008534:	4b24      	ldr	r3, [pc, #144]	; (80085c8 <vPortFree+0xb8>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4013      	ands	r3, r2
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10a      	bne.n	8008554 <vPortFree+0x44>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	60fb      	str	r3, [r7, #12]
}
 8008550:	bf00      	nop
 8008552:	e7fe      	b.n	8008552 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00a      	beq.n	8008572 <vPortFree+0x62>
	__asm volatile
 800855c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008560:	f383 8811 	msr	BASEPRI, r3
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	60bb      	str	r3, [r7, #8]
}
 800856e:	bf00      	nop
 8008570:	e7fe      	b.n	8008570 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	685a      	ldr	r2, [r3, #4]
 8008576:	4b14      	ldr	r3, [pc, #80]	; (80085c8 <vPortFree+0xb8>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4013      	ands	r3, r2
 800857c:	2b00      	cmp	r3, #0
 800857e:	d01e      	beq.n	80085be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d11a      	bne.n	80085be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	4b0e      	ldr	r3, [pc, #56]	; (80085c8 <vPortFree+0xb8>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	43db      	mvns	r3, r3
 8008592:	401a      	ands	r2, r3
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008598:	f7fe fc8e 	bl	8006eb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	4b0a      	ldr	r3, [pc, #40]	; (80085cc <vPortFree+0xbc>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4413      	add	r3, r2
 80085a6:	4a09      	ldr	r2, [pc, #36]	; (80085cc <vPortFree+0xbc>)
 80085a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80085aa:	6938      	ldr	r0, [r7, #16]
 80085ac:	f000 f874 	bl	8008698 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80085b0:	4b07      	ldr	r3, [pc, #28]	; (80085d0 <vPortFree+0xc0>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	3301      	adds	r3, #1
 80085b6:	4a06      	ldr	r2, [pc, #24]	; (80085d0 <vPortFree+0xc0>)
 80085b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80085ba:	f7fe fc8b 	bl	8006ed4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085be:	bf00      	nop
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	20001c30 	.word	0x20001c30
 80085cc:	20001c20 	.word	0x20001c20
 80085d0:	20001c2c 	.word	0x20001c2c

080085d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80085de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085e0:	4b27      	ldr	r3, [pc, #156]	; (8008680 <prvHeapInit+0xac>)
 80085e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f003 0307 	and.w	r3, r3, #7
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00c      	beq.n	8008608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	3307      	adds	r3, #7
 80085f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 0307 	bic.w	r3, r3, #7
 80085fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	4a1f      	ldr	r2, [pc, #124]	; (8008680 <prvHeapInit+0xac>)
 8008604:	4413      	add	r3, r2
 8008606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800860c:	4a1d      	ldr	r2, [pc, #116]	; (8008684 <prvHeapInit+0xb0>)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008612:	4b1c      	ldr	r3, [pc, #112]	; (8008684 <prvHeapInit+0xb0>)
 8008614:	2200      	movs	r2, #0
 8008616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	4413      	add	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008620:	2208      	movs	r2, #8
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	1a9b      	subs	r3, r3, r2
 8008626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f023 0307 	bic.w	r3, r3, #7
 800862e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	4a15      	ldr	r2, [pc, #84]	; (8008688 <prvHeapInit+0xb4>)
 8008634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008636:	4b14      	ldr	r3, [pc, #80]	; (8008688 <prvHeapInit+0xb4>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2200      	movs	r2, #0
 800863c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800863e:	4b12      	ldr	r3, [pc, #72]	; (8008688 <prvHeapInit+0xb4>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	1ad2      	subs	r2, r2, r3
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008654:	4b0c      	ldr	r3, [pc, #48]	; (8008688 <prvHeapInit+0xb4>)
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	4a0a      	ldr	r2, [pc, #40]	; (800868c <prvHeapInit+0xb8>)
 8008662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	4a09      	ldr	r2, [pc, #36]	; (8008690 <prvHeapInit+0xbc>)
 800866a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800866c:	4b09      	ldr	r3, [pc, #36]	; (8008694 <prvHeapInit+0xc0>)
 800866e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008672:	601a      	str	r2, [r3, #0]
}
 8008674:	bf00      	nop
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	2000105c 	.word	0x2000105c
 8008684:	20001c14 	.word	0x20001c14
 8008688:	20001c1c 	.word	0x20001c1c
 800868c:	20001c24 	.word	0x20001c24
 8008690:	20001c20 	.word	0x20001c20
 8008694:	20001c30 	.word	0x20001c30

08008698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086a0:	4b28      	ldr	r3, [pc, #160]	; (8008744 <prvInsertBlockIntoFreeList+0xac>)
 80086a2:	60fb      	str	r3, [r7, #12]
 80086a4:	e002      	b.n	80086ac <prvInsertBlockIntoFreeList+0x14>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d8f7      	bhi.n	80086a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	4413      	add	r3, r2
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d108      	bne.n	80086da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	441a      	add	r2, r3
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	441a      	add	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d118      	bne.n	8008720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	4b15      	ldr	r3, [pc, #84]	; (8008748 <prvInsertBlockIntoFreeList+0xb0>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d00d      	beq.n	8008716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	685a      	ldr	r2, [r3, #4]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	441a      	add	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	e008      	b.n	8008728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008716:	4b0c      	ldr	r3, [pc, #48]	; (8008748 <prvInsertBlockIntoFreeList+0xb0>)
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	601a      	str	r2, [r3, #0]
 800871e:	e003      	b.n	8008728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	429a      	cmp	r2, r3
 800872e:	d002      	beq.n	8008736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008736:	bf00      	nop
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	20001c14 	.word	0x20001c14
 8008748:	20001c1c 	.word	0x20001c1c

0800874c <_ZdlPvj>:
 800874c:	f000 b814 	b.w	8008778 <_ZdlPv>

08008750 <_Znwj>:
 8008750:	2801      	cmp	r0, #1
 8008752:	bf38      	it	cc
 8008754:	2001      	movcc	r0, #1
 8008756:	b510      	push	{r4, lr}
 8008758:	4604      	mov	r4, r0
 800875a:	4620      	mov	r0, r4
 800875c:	f000 f85a 	bl	8008814 <malloc>
 8008760:	b930      	cbnz	r0, 8008770 <_Znwj+0x20>
 8008762:	f000 f81d 	bl	80087a0 <_ZSt15get_new_handlerv>
 8008766:	b908      	cbnz	r0, 800876c <_Znwj+0x1c>
 8008768:	f000 f822 	bl	80087b0 <abort>
 800876c:	4780      	blx	r0
 800876e:	e7f4      	b.n	800875a <_Znwj+0xa>
 8008770:	bd10      	pop	{r4, pc}

08008772 <__cxa_pure_virtual>:
 8008772:	b508      	push	{r3, lr}
 8008774:	f000 f80e 	bl	8008794 <_ZSt9terminatev>

08008778 <_ZdlPv>:
 8008778:	f000 b854 	b.w	8008824 <free>

0800877c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800877c:	b508      	push	{r3, lr}
 800877e:	4780      	blx	r0
 8008780:	f000 f816 	bl	80087b0 <abort>

08008784 <_ZSt13get_terminatev>:
 8008784:	4b02      	ldr	r3, [pc, #8]	; (8008790 <_ZSt13get_terminatev+0xc>)
 8008786:	6818      	ldr	r0, [r3, #0]
 8008788:	f3bf 8f5b 	dmb	ish
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	20000010 	.word	0x20000010

08008794 <_ZSt9terminatev>:
 8008794:	b508      	push	{r3, lr}
 8008796:	f7ff fff5 	bl	8008784 <_ZSt13get_terminatev>
 800879a:	f7ff ffef 	bl	800877c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080087a0 <_ZSt15get_new_handlerv>:
 80087a0:	4b02      	ldr	r3, [pc, #8]	; (80087ac <_ZSt15get_new_handlerv+0xc>)
 80087a2:	6818      	ldr	r0, [r3, #0]
 80087a4:	f3bf 8f5b 	dmb	ish
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	20001c34 	.word	0x20001c34

080087b0 <abort>:
 80087b0:	b508      	push	{r3, lr}
 80087b2:	2006      	movs	r0, #6
 80087b4:	f000 f9fa 	bl	8008bac <raise>
 80087b8:	2001      	movs	r0, #1
 80087ba:	f7f9 f82b 	bl	8001814 <_exit>
	...

080087c0 <__errno>:
 80087c0:	4b01      	ldr	r3, [pc, #4]	; (80087c8 <__errno+0x8>)
 80087c2:	6818      	ldr	r0, [r3, #0]
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	20000014 	.word	0x20000014

080087cc <__libc_init_array>:
 80087cc:	b570      	push	{r4, r5, r6, lr}
 80087ce:	4d0d      	ldr	r5, [pc, #52]	; (8008804 <__libc_init_array+0x38>)
 80087d0:	4c0d      	ldr	r4, [pc, #52]	; (8008808 <__libc_init_array+0x3c>)
 80087d2:	1b64      	subs	r4, r4, r5
 80087d4:	10a4      	asrs	r4, r4, #2
 80087d6:	2600      	movs	r6, #0
 80087d8:	42a6      	cmp	r6, r4
 80087da:	d109      	bne.n	80087f0 <__libc_init_array+0x24>
 80087dc:	4d0b      	ldr	r5, [pc, #44]	; (800880c <__libc_init_array+0x40>)
 80087de:	4c0c      	ldr	r4, [pc, #48]	; (8008810 <__libc_init_array+0x44>)
 80087e0:	f001 fd82 	bl	800a2e8 <_init>
 80087e4:	1b64      	subs	r4, r4, r5
 80087e6:	10a4      	asrs	r4, r4, #2
 80087e8:	2600      	movs	r6, #0
 80087ea:	42a6      	cmp	r6, r4
 80087ec:	d105      	bne.n	80087fa <__libc_init_array+0x2e>
 80087ee:	bd70      	pop	{r4, r5, r6, pc}
 80087f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80087f4:	4798      	blx	r3
 80087f6:	3601      	adds	r6, #1
 80087f8:	e7ee      	b.n	80087d8 <__libc_init_array+0xc>
 80087fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80087fe:	4798      	blx	r3
 8008800:	3601      	adds	r6, #1
 8008802:	e7f2      	b.n	80087ea <__libc_init_array+0x1e>
 8008804:	0800a680 	.word	0x0800a680
 8008808:	0800a680 	.word	0x0800a680
 800880c:	0800a680 	.word	0x0800a680
 8008810:	0800a68c 	.word	0x0800a68c

08008814 <malloc>:
 8008814:	4b02      	ldr	r3, [pc, #8]	; (8008820 <malloc+0xc>)
 8008816:	4601      	mov	r1, r0
 8008818:	6818      	ldr	r0, [r3, #0]
 800881a:	f000 b88d 	b.w	8008938 <_malloc_r>
 800881e:	bf00      	nop
 8008820:	20000014 	.word	0x20000014

08008824 <free>:
 8008824:	4b02      	ldr	r3, [pc, #8]	; (8008830 <free+0xc>)
 8008826:	4601      	mov	r1, r0
 8008828:	6818      	ldr	r0, [r3, #0]
 800882a:	f000 b819 	b.w	8008860 <_free_r>
 800882e:	bf00      	nop
 8008830:	20000014 	.word	0x20000014

08008834 <memcpy>:
 8008834:	440a      	add	r2, r1
 8008836:	4291      	cmp	r1, r2
 8008838:	f100 33ff 	add.w	r3, r0, #4294967295
 800883c:	d100      	bne.n	8008840 <memcpy+0xc>
 800883e:	4770      	bx	lr
 8008840:	b510      	push	{r4, lr}
 8008842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800884a:	4291      	cmp	r1, r2
 800884c:	d1f9      	bne.n	8008842 <memcpy+0xe>
 800884e:	bd10      	pop	{r4, pc}

08008850 <memset>:
 8008850:	4402      	add	r2, r0
 8008852:	4603      	mov	r3, r0
 8008854:	4293      	cmp	r3, r2
 8008856:	d100      	bne.n	800885a <memset+0xa>
 8008858:	4770      	bx	lr
 800885a:	f803 1b01 	strb.w	r1, [r3], #1
 800885e:	e7f9      	b.n	8008854 <memset+0x4>

08008860 <_free_r>:
 8008860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008862:	2900      	cmp	r1, #0
 8008864:	d044      	beq.n	80088f0 <_free_r+0x90>
 8008866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800886a:	9001      	str	r0, [sp, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	f1a1 0404 	sub.w	r4, r1, #4
 8008872:	bfb8      	it	lt
 8008874:	18e4      	addlt	r4, r4, r3
 8008876:	f000 fd43 	bl	8009300 <__malloc_lock>
 800887a:	4a1e      	ldr	r2, [pc, #120]	; (80088f4 <_free_r+0x94>)
 800887c:	9801      	ldr	r0, [sp, #4]
 800887e:	6813      	ldr	r3, [r2, #0]
 8008880:	b933      	cbnz	r3, 8008890 <_free_r+0x30>
 8008882:	6063      	str	r3, [r4, #4]
 8008884:	6014      	str	r4, [r2, #0]
 8008886:	b003      	add	sp, #12
 8008888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800888c:	f000 bd3e 	b.w	800930c <__malloc_unlock>
 8008890:	42a3      	cmp	r3, r4
 8008892:	d908      	bls.n	80088a6 <_free_r+0x46>
 8008894:	6825      	ldr	r5, [r4, #0]
 8008896:	1961      	adds	r1, r4, r5
 8008898:	428b      	cmp	r3, r1
 800889a:	bf01      	itttt	eq
 800889c:	6819      	ldreq	r1, [r3, #0]
 800889e:	685b      	ldreq	r3, [r3, #4]
 80088a0:	1949      	addeq	r1, r1, r5
 80088a2:	6021      	streq	r1, [r4, #0]
 80088a4:	e7ed      	b.n	8008882 <_free_r+0x22>
 80088a6:	461a      	mov	r2, r3
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	b10b      	cbz	r3, 80088b0 <_free_r+0x50>
 80088ac:	42a3      	cmp	r3, r4
 80088ae:	d9fa      	bls.n	80088a6 <_free_r+0x46>
 80088b0:	6811      	ldr	r1, [r2, #0]
 80088b2:	1855      	adds	r5, r2, r1
 80088b4:	42a5      	cmp	r5, r4
 80088b6:	d10b      	bne.n	80088d0 <_free_r+0x70>
 80088b8:	6824      	ldr	r4, [r4, #0]
 80088ba:	4421      	add	r1, r4
 80088bc:	1854      	adds	r4, r2, r1
 80088be:	42a3      	cmp	r3, r4
 80088c0:	6011      	str	r1, [r2, #0]
 80088c2:	d1e0      	bne.n	8008886 <_free_r+0x26>
 80088c4:	681c      	ldr	r4, [r3, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	6053      	str	r3, [r2, #4]
 80088ca:	4421      	add	r1, r4
 80088cc:	6011      	str	r1, [r2, #0]
 80088ce:	e7da      	b.n	8008886 <_free_r+0x26>
 80088d0:	d902      	bls.n	80088d8 <_free_r+0x78>
 80088d2:	230c      	movs	r3, #12
 80088d4:	6003      	str	r3, [r0, #0]
 80088d6:	e7d6      	b.n	8008886 <_free_r+0x26>
 80088d8:	6825      	ldr	r5, [r4, #0]
 80088da:	1961      	adds	r1, r4, r5
 80088dc:	428b      	cmp	r3, r1
 80088de:	bf04      	itt	eq
 80088e0:	6819      	ldreq	r1, [r3, #0]
 80088e2:	685b      	ldreq	r3, [r3, #4]
 80088e4:	6063      	str	r3, [r4, #4]
 80088e6:	bf04      	itt	eq
 80088e8:	1949      	addeq	r1, r1, r5
 80088ea:	6021      	streq	r1, [r4, #0]
 80088ec:	6054      	str	r4, [r2, #4]
 80088ee:	e7ca      	b.n	8008886 <_free_r+0x26>
 80088f0:	b003      	add	sp, #12
 80088f2:	bd30      	pop	{r4, r5, pc}
 80088f4:	20001c38 	.word	0x20001c38

080088f8 <sbrk_aligned>:
 80088f8:	b570      	push	{r4, r5, r6, lr}
 80088fa:	4e0e      	ldr	r6, [pc, #56]	; (8008934 <sbrk_aligned+0x3c>)
 80088fc:	460c      	mov	r4, r1
 80088fe:	6831      	ldr	r1, [r6, #0]
 8008900:	4605      	mov	r5, r0
 8008902:	b911      	cbnz	r1, 800890a <sbrk_aligned+0x12>
 8008904:	f000 f91a 	bl	8008b3c <_sbrk_r>
 8008908:	6030      	str	r0, [r6, #0]
 800890a:	4621      	mov	r1, r4
 800890c:	4628      	mov	r0, r5
 800890e:	f000 f915 	bl	8008b3c <_sbrk_r>
 8008912:	1c43      	adds	r3, r0, #1
 8008914:	d00a      	beq.n	800892c <sbrk_aligned+0x34>
 8008916:	1cc4      	adds	r4, r0, #3
 8008918:	f024 0403 	bic.w	r4, r4, #3
 800891c:	42a0      	cmp	r0, r4
 800891e:	d007      	beq.n	8008930 <sbrk_aligned+0x38>
 8008920:	1a21      	subs	r1, r4, r0
 8008922:	4628      	mov	r0, r5
 8008924:	f000 f90a 	bl	8008b3c <_sbrk_r>
 8008928:	3001      	adds	r0, #1
 800892a:	d101      	bne.n	8008930 <sbrk_aligned+0x38>
 800892c:	f04f 34ff 	mov.w	r4, #4294967295
 8008930:	4620      	mov	r0, r4
 8008932:	bd70      	pop	{r4, r5, r6, pc}
 8008934:	20001c3c 	.word	0x20001c3c

08008938 <_malloc_r>:
 8008938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800893c:	1ccd      	adds	r5, r1, #3
 800893e:	f025 0503 	bic.w	r5, r5, #3
 8008942:	3508      	adds	r5, #8
 8008944:	2d0c      	cmp	r5, #12
 8008946:	bf38      	it	cc
 8008948:	250c      	movcc	r5, #12
 800894a:	2d00      	cmp	r5, #0
 800894c:	4607      	mov	r7, r0
 800894e:	db01      	blt.n	8008954 <_malloc_r+0x1c>
 8008950:	42a9      	cmp	r1, r5
 8008952:	d905      	bls.n	8008960 <_malloc_r+0x28>
 8008954:	230c      	movs	r3, #12
 8008956:	603b      	str	r3, [r7, #0]
 8008958:	2600      	movs	r6, #0
 800895a:	4630      	mov	r0, r6
 800895c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008960:	4e2e      	ldr	r6, [pc, #184]	; (8008a1c <_malloc_r+0xe4>)
 8008962:	f000 fccd 	bl	8009300 <__malloc_lock>
 8008966:	6833      	ldr	r3, [r6, #0]
 8008968:	461c      	mov	r4, r3
 800896a:	bb34      	cbnz	r4, 80089ba <_malloc_r+0x82>
 800896c:	4629      	mov	r1, r5
 800896e:	4638      	mov	r0, r7
 8008970:	f7ff ffc2 	bl	80088f8 <sbrk_aligned>
 8008974:	1c43      	adds	r3, r0, #1
 8008976:	4604      	mov	r4, r0
 8008978:	d14d      	bne.n	8008a16 <_malloc_r+0xde>
 800897a:	6834      	ldr	r4, [r6, #0]
 800897c:	4626      	mov	r6, r4
 800897e:	2e00      	cmp	r6, #0
 8008980:	d140      	bne.n	8008a04 <_malloc_r+0xcc>
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	4631      	mov	r1, r6
 8008986:	4638      	mov	r0, r7
 8008988:	eb04 0803 	add.w	r8, r4, r3
 800898c:	f000 f8d6 	bl	8008b3c <_sbrk_r>
 8008990:	4580      	cmp	r8, r0
 8008992:	d13a      	bne.n	8008a0a <_malloc_r+0xd2>
 8008994:	6821      	ldr	r1, [r4, #0]
 8008996:	3503      	adds	r5, #3
 8008998:	1a6d      	subs	r5, r5, r1
 800899a:	f025 0503 	bic.w	r5, r5, #3
 800899e:	3508      	adds	r5, #8
 80089a0:	2d0c      	cmp	r5, #12
 80089a2:	bf38      	it	cc
 80089a4:	250c      	movcc	r5, #12
 80089a6:	4629      	mov	r1, r5
 80089a8:	4638      	mov	r0, r7
 80089aa:	f7ff ffa5 	bl	80088f8 <sbrk_aligned>
 80089ae:	3001      	adds	r0, #1
 80089b0:	d02b      	beq.n	8008a0a <_malloc_r+0xd2>
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	442b      	add	r3, r5
 80089b6:	6023      	str	r3, [r4, #0]
 80089b8:	e00e      	b.n	80089d8 <_malloc_r+0xa0>
 80089ba:	6822      	ldr	r2, [r4, #0]
 80089bc:	1b52      	subs	r2, r2, r5
 80089be:	d41e      	bmi.n	80089fe <_malloc_r+0xc6>
 80089c0:	2a0b      	cmp	r2, #11
 80089c2:	d916      	bls.n	80089f2 <_malloc_r+0xba>
 80089c4:	1961      	adds	r1, r4, r5
 80089c6:	42a3      	cmp	r3, r4
 80089c8:	6025      	str	r5, [r4, #0]
 80089ca:	bf18      	it	ne
 80089cc:	6059      	strne	r1, [r3, #4]
 80089ce:	6863      	ldr	r3, [r4, #4]
 80089d0:	bf08      	it	eq
 80089d2:	6031      	streq	r1, [r6, #0]
 80089d4:	5162      	str	r2, [r4, r5]
 80089d6:	604b      	str	r3, [r1, #4]
 80089d8:	4638      	mov	r0, r7
 80089da:	f104 060b 	add.w	r6, r4, #11
 80089de:	f000 fc95 	bl	800930c <__malloc_unlock>
 80089e2:	f026 0607 	bic.w	r6, r6, #7
 80089e6:	1d23      	adds	r3, r4, #4
 80089e8:	1af2      	subs	r2, r6, r3
 80089ea:	d0b6      	beq.n	800895a <_malloc_r+0x22>
 80089ec:	1b9b      	subs	r3, r3, r6
 80089ee:	50a3      	str	r3, [r4, r2]
 80089f0:	e7b3      	b.n	800895a <_malloc_r+0x22>
 80089f2:	6862      	ldr	r2, [r4, #4]
 80089f4:	42a3      	cmp	r3, r4
 80089f6:	bf0c      	ite	eq
 80089f8:	6032      	streq	r2, [r6, #0]
 80089fa:	605a      	strne	r2, [r3, #4]
 80089fc:	e7ec      	b.n	80089d8 <_malloc_r+0xa0>
 80089fe:	4623      	mov	r3, r4
 8008a00:	6864      	ldr	r4, [r4, #4]
 8008a02:	e7b2      	b.n	800896a <_malloc_r+0x32>
 8008a04:	4634      	mov	r4, r6
 8008a06:	6876      	ldr	r6, [r6, #4]
 8008a08:	e7b9      	b.n	800897e <_malloc_r+0x46>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	603b      	str	r3, [r7, #0]
 8008a0e:	4638      	mov	r0, r7
 8008a10:	f000 fc7c 	bl	800930c <__malloc_unlock>
 8008a14:	e7a1      	b.n	800895a <_malloc_r+0x22>
 8008a16:	6025      	str	r5, [r4, #0]
 8008a18:	e7de      	b.n	80089d8 <_malloc_r+0xa0>
 8008a1a:	bf00      	nop
 8008a1c:	20001c38 	.word	0x20001c38

08008a20 <iprintf>:
 8008a20:	b40f      	push	{r0, r1, r2, r3}
 8008a22:	4b0a      	ldr	r3, [pc, #40]	; (8008a4c <iprintf+0x2c>)
 8008a24:	b513      	push	{r0, r1, r4, lr}
 8008a26:	681c      	ldr	r4, [r3, #0]
 8008a28:	b124      	cbz	r4, 8008a34 <iprintf+0x14>
 8008a2a:	69a3      	ldr	r3, [r4, #24]
 8008a2c:	b913      	cbnz	r3, 8008a34 <iprintf+0x14>
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 fb4e 	bl	80090d0 <__sinit>
 8008a34:	ab05      	add	r3, sp, #20
 8008a36:	9a04      	ldr	r2, [sp, #16]
 8008a38:	68a1      	ldr	r1, [r4, #8]
 8008a3a:	9301      	str	r3, [sp, #4]
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	f000 fe67 	bl	8009710 <_vfiprintf_r>
 8008a42:	b002      	add	sp, #8
 8008a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a48:	b004      	add	sp, #16
 8008a4a:	4770      	bx	lr
 8008a4c:	20000014 	.word	0x20000014

08008a50 <_puts_r>:
 8008a50:	b570      	push	{r4, r5, r6, lr}
 8008a52:	460e      	mov	r6, r1
 8008a54:	4605      	mov	r5, r0
 8008a56:	b118      	cbz	r0, 8008a60 <_puts_r+0x10>
 8008a58:	6983      	ldr	r3, [r0, #24]
 8008a5a:	b90b      	cbnz	r3, 8008a60 <_puts_r+0x10>
 8008a5c:	f000 fb38 	bl	80090d0 <__sinit>
 8008a60:	69ab      	ldr	r3, [r5, #24]
 8008a62:	68ac      	ldr	r4, [r5, #8]
 8008a64:	b913      	cbnz	r3, 8008a6c <_puts_r+0x1c>
 8008a66:	4628      	mov	r0, r5
 8008a68:	f000 fb32 	bl	80090d0 <__sinit>
 8008a6c:	4b2c      	ldr	r3, [pc, #176]	; (8008b20 <_puts_r+0xd0>)
 8008a6e:	429c      	cmp	r4, r3
 8008a70:	d120      	bne.n	8008ab4 <_puts_r+0x64>
 8008a72:	686c      	ldr	r4, [r5, #4]
 8008a74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a76:	07db      	lsls	r3, r3, #31
 8008a78:	d405      	bmi.n	8008a86 <_puts_r+0x36>
 8008a7a:	89a3      	ldrh	r3, [r4, #12]
 8008a7c:	0598      	lsls	r0, r3, #22
 8008a7e:	d402      	bmi.n	8008a86 <_puts_r+0x36>
 8008a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a82:	f000 fbc3 	bl	800920c <__retarget_lock_acquire_recursive>
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	0719      	lsls	r1, r3, #28
 8008a8a:	d51d      	bpl.n	8008ac8 <_puts_r+0x78>
 8008a8c:	6923      	ldr	r3, [r4, #16]
 8008a8e:	b1db      	cbz	r3, 8008ac8 <_puts_r+0x78>
 8008a90:	3e01      	subs	r6, #1
 8008a92:	68a3      	ldr	r3, [r4, #8]
 8008a94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	60a3      	str	r3, [r4, #8]
 8008a9c:	bb39      	cbnz	r1, 8008aee <_puts_r+0x9e>
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	da38      	bge.n	8008b14 <_puts_r+0xc4>
 8008aa2:	4622      	mov	r2, r4
 8008aa4:	210a      	movs	r1, #10
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	f000 f916 	bl	8008cd8 <__swbuf_r>
 8008aac:	3001      	adds	r0, #1
 8008aae:	d011      	beq.n	8008ad4 <_puts_r+0x84>
 8008ab0:	250a      	movs	r5, #10
 8008ab2:	e011      	b.n	8008ad8 <_puts_r+0x88>
 8008ab4:	4b1b      	ldr	r3, [pc, #108]	; (8008b24 <_puts_r+0xd4>)
 8008ab6:	429c      	cmp	r4, r3
 8008ab8:	d101      	bne.n	8008abe <_puts_r+0x6e>
 8008aba:	68ac      	ldr	r4, [r5, #8]
 8008abc:	e7da      	b.n	8008a74 <_puts_r+0x24>
 8008abe:	4b1a      	ldr	r3, [pc, #104]	; (8008b28 <_puts_r+0xd8>)
 8008ac0:	429c      	cmp	r4, r3
 8008ac2:	bf08      	it	eq
 8008ac4:	68ec      	ldreq	r4, [r5, #12]
 8008ac6:	e7d5      	b.n	8008a74 <_puts_r+0x24>
 8008ac8:	4621      	mov	r1, r4
 8008aca:	4628      	mov	r0, r5
 8008acc:	f000 f968 	bl	8008da0 <__swsetup_r>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d0dd      	beq.n	8008a90 <_puts_r+0x40>
 8008ad4:	f04f 35ff 	mov.w	r5, #4294967295
 8008ad8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ada:	07da      	lsls	r2, r3, #31
 8008adc:	d405      	bmi.n	8008aea <_puts_r+0x9a>
 8008ade:	89a3      	ldrh	r3, [r4, #12]
 8008ae0:	059b      	lsls	r3, r3, #22
 8008ae2:	d402      	bmi.n	8008aea <_puts_r+0x9a>
 8008ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ae6:	f000 fb92 	bl	800920e <__retarget_lock_release_recursive>
 8008aea:	4628      	mov	r0, r5
 8008aec:	bd70      	pop	{r4, r5, r6, pc}
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	da04      	bge.n	8008afc <_puts_r+0xac>
 8008af2:	69a2      	ldr	r2, [r4, #24]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	dc06      	bgt.n	8008b06 <_puts_r+0xb6>
 8008af8:	290a      	cmp	r1, #10
 8008afa:	d004      	beq.n	8008b06 <_puts_r+0xb6>
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	1c5a      	adds	r2, r3, #1
 8008b00:	6022      	str	r2, [r4, #0]
 8008b02:	7019      	strb	r1, [r3, #0]
 8008b04:	e7c5      	b.n	8008a92 <_puts_r+0x42>
 8008b06:	4622      	mov	r2, r4
 8008b08:	4628      	mov	r0, r5
 8008b0a:	f000 f8e5 	bl	8008cd8 <__swbuf_r>
 8008b0e:	3001      	adds	r0, #1
 8008b10:	d1bf      	bne.n	8008a92 <_puts_r+0x42>
 8008b12:	e7df      	b.n	8008ad4 <_puts_r+0x84>
 8008b14:	6823      	ldr	r3, [r4, #0]
 8008b16:	250a      	movs	r5, #10
 8008b18:	1c5a      	adds	r2, r3, #1
 8008b1a:	6022      	str	r2, [r4, #0]
 8008b1c:	701d      	strb	r5, [r3, #0]
 8008b1e:	e7db      	b.n	8008ad8 <_puts_r+0x88>
 8008b20:	0800a4e8 	.word	0x0800a4e8
 8008b24:	0800a508 	.word	0x0800a508
 8008b28:	0800a4c8 	.word	0x0800a4c8

08008b2c <puts>:
 8008b2c:	4b02      	ldr	r3, [pc, #8]	; (8008b38 <puts+0xc>)
 8008b2e:	4601      	mov	r1, r0
 8008b30:	6818      	ldr	r0, [r3, #0]
 8008b32:	f7ff bf8d 	b.w	8008a50 <_puts_r>
 8008b36:	bf00      	nop
 8008b38:	20000014 	.word	0x20000014

08008b3c <_sbrk_r>:
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	4d06      	ldr	r5, [pc, #24]	; (8008b58 <_sbrk_r+0x1c>)
 8008b40:	2300      	movs	r3, #0
 8008b42:	4604      	mov	r4, r0
 8008b44:	4608      	mov	r0, r1
 8008b46:	602b      	str	r3, [r5, #0]
 8008b48:	f7f8 fec0 	bl	80018cc <_sbrk>
 8008b4c:	1c43      	adds	r3, r0, #1
 8008b4e:	d102      	bne.n	8008b56 <_sbrk_r+0x1a>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	b103      	cbz	r3, 8008b56 <_sbrk_r+0x1a>
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	bd38      	pop	{r3, r4, r5, pc}
 8008b58:	20001c44 	.word	0x20001c44

08008b5c <_raise_r>:
 8008b5c:	291f      	cmp	r1, #31
 8008b5e:	b538      	push	{r3, r4, r5, lr}
 8008b60:	4604      	mov	r4, r0
 8008b62:	460d      	mov	r5, r1
 8008b64:	d904      	bls.n	8008b70 <_raise_r+0x14>
 8008b66:	2316      	movs	r3, #22
 8008b68:	6003      	str	r3, [r0, #0]
 8008b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6e:	bd38      	pop	{r3, r4, r5, pc}
 8008b70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008b72:	b112      	cbz	r2, 8008b7a <_raise_r+0x1e>
 8008b74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b78:	b94b      	cbnz	r3, 8008b8e <_raise_r+0x32>
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f000 f830 	bl	8008be0 <_getpid_r>
 8008b80:	462a      	mov	r2, r5
 8008b82:	4601      	mov	r1, r0
 8008b84:	4620      	mov	r0, r4
 8008b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b8a:	f000 b817 	b.w	8008bbc <_kill_r>
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d00a      	beq.n	8008ba8 <_raise_r+0x4c>
 8008b92:	1c59      	adds	r1, r3, #1
 8008b94:	d103      	bne.n	8008b9e <_raise_r+0x42>
 8008b96:	2316      	movs	r3, #22
 8008b98:	6003      	str	r3, [r0, #0]
 8008b9a:	2001      	movs	r0, #1
 8008b9c:	e7e7      	b.n	8008b6e <_raise_r+0x12>
 8008b9e:	2400      	movs	r4, #0
 8008ba0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	4798      	blx	r3
 8008ba8:	2000      	movs	r0, #0
 8008baa:	e7e0      	b.n	8008b6e <_raise_r+0x12>

08008bac <raise>:
 8008bac:	4b02      	ldr	r3, [pc, #8]	; (8008bb8 <raise+0xc>)
 8008bae:	4601      	mov	r1, r0
 8008bb0:	6818      	ldr	r0, [r3, #0]
 8008bb2:	f7ff bfd3 	b.w	8008b5c <_raise_r>
 8008bb6:	bf00      	nop
 8008bb8:	20000014 	.word	0x20000014

08008bbc <_kill_r>:
 8008bbc:	b538      	push	{r3, r4, r5, lr}
 8008bbe:	4d07      	ldr	r5, [pc, #28]	; (8008bdc <_kill_r+0x20>)
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	4608      	mov	r0, r1
 8008bc6:	4611      	mov	r1, r2
 8008bc8:	602b      	str	r3, [r5, #0]
 8008bca:	f7f8 fe13 	bl	80017f4 <_kill>
 8008bce:	1c43      	adds	r3, r0, #1
 8008bd0:	d102      	bne.n	8008bd8 <_kill_r+0x1c>
 8008bd2:	682b      	ldr	r3, [r5, #0]
 8008bd4:	b103      	cbz	r3, 8008bd8 <_kill_r+0x1c>
 8008bd6:	6023      	str	r3, [r4, #0]
 8008bd8:	bd38      	pop	{r3, r4, r5, pc}
 8008bda:	bf00      	nop
 8008bdc:	20001c44 	.word	0x20001c44

08008be0 <_getpid_r>:
 8008be0:	f7f8 be00 	b.w	80017e4 <_getpid>

08008be4 <siscanf>:
 8008be4:	b40e      	push	{r1, r2, r3}
 8008be6:	b510      	push	{r4, lr}
 8008be8:	b09f      	sub	sp, #124	; 0x7c
 8008bea:	ac21      	add	r4, sp, #132	; 0x84
 8008bec:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008bf0:	f854 2b04 	ldr.w	r2, [r4], #4
 8008bf4:	9201      	str	r2, [sp, #4]
 8008bf6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008bfa:	9004      	str	r0, [sp, #16]
 8008bfc:	9008      	str	r0, [sp, #32]
 8008bfe:	f7f7 faf1 	bl	80001e4 <strlen>
 8008c02:	4b0c      	ldr	r3, [pc, #48]	; (8008c34 <siscanf+0x50>)
 8008c04:	9005      	str	r0, [sp, #20]
 8008c06:	9009      	str	r0, [sp, #36]	; 0x24
 8008c08:	930d      	str	r3, [sp, #52]	; 0x34
 8008c0a:	480b      	ldr	r0, [pc, #44]	; (8008c38 <siscanf+0x54>)
 8008c0c:	9a01      	ldr	r2, [sp, #4]
 8008c0e:	6800      	ldr	r0, [r0, #0]
 8008c10:	9403      	str	r4, [sp, #12]
 8008c12:	2300      	movs	r3, #0
 8008c14:	9311      	str	r3, [sp, #68]	; 0x44
 8008c16:	9316      	str	r3, [sp, #88]	; 0x58
 8008c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008c1c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008c20:	a904      	add	r1, sp, #16
 8008c22:	4623      	mov	r3, r4
 8008c24:	f000 fbd2 	bl	80093cc <__ssvfiscanf_r>
 8008c28:	b01f      	add	sp, #124	; 0x7c
 8008c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c2e:	b003      	add	sp, #12
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	08008c5f 	.word	0x08008c5f
 8008c38:	20000014 	.word	0x20000014

08008c3c <__sread>:
 8008c3c:	b510      	push	{r4, lr}
 8008c3e:	460c      	mov	r4, r1
 8008c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c44:	f001 f97a 	bl	8009f3c <_read_r>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	bfab      	itete	ge
 8008c4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c4e:	89a3      	ldrhlt	r3, [r4, #12]
 8008c50:	181b      	addge	r3, r3, r0
 8008c52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c56:	bfac      	ite	ge
 8008c58:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c5a:	81a3      	strhlt	r3, [r4, #12]
 8008c5c:	bd10      	pop	{r4, pc}

08008c5e <__seofread>:
 8008c5e:	2000      	movs	r0, #0
 8008c60:	4770      	bx	lr

08008c62 <__swrite>:
 8008c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c66:	461f      	mov	r7, r3
 8008c68:	898b      	ldrh	r3, [r1, #12]
 8008c6a:	05db      	lsls	r3, r3, #23
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	460c      	mov	r4, r1
 8008c70:	4616      	mov	r6, r2
 8008c72:	d505      	bpl.n	8008c80 <__swrite+0x1e>
 8008c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c78:	2302      	movs	r3, #2
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f000 fac8 	bl	8009210 <_lseek_r>
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c8a:	81a3      	strh	r3, [r4, #12]
 8008c8c:	4632      	mov	r2, r6
 8008c8e:	463b      	mov	r3, r7
 8008c90:	4628      	mov	r0, r5
 8008c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c96:	f000 b871 	b.w	8008d7c <_write_r>

08008c9a <__sseek>:
 8008c9a:	b510      	push	{r4, lr}
 8008c9c:	460c      	mov	r4, r1
 8008c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ca2:	f000 fab5 	bl	8009210 <_lseek_r>
 8008ca6:	1c43      	adds	r3, r0, #1
 8008ca8:	89a3      	ldrh	r3, [r4, #12]
 8008caa:	bf15      	itete	ne
 8008cac:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cb6:	81a3      	strheq	r3, [r4, #12]
 8008cb8:	bf18      	it	ne
 8008cba:	81a3      	strhne	r3, [r4, #12]
 8008cbc:	bd10      	pop	{r4, pc}

08008cbe <__sclose>:
 8008cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc2:	f000 b8db 	b.w	8008e7c <_close_r>

08008cc6 <strcpy>:
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ccc:	f803 2b01 	strb.w	r2, [r3], #1
 8008cd0:	2a00      	cmp	r2, #0
 8008cd2:	d1f9      	bne.n	8008cc8 <strcpy+0x2>
 8008cd4:	4770      	bx	lr
	...

08008cd8 <__swbuf_r>:
 8008cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cda:	460e      	mov	r6, r1
 8008cdc:	4614      	mov	r4, r2
 8008cde:	4605      	mov	r5, r0
 8008ce0:	b118      	cbz	r0, 8008cea <__swbuf_r+0x12>
 8008ce2:	6983      	ldr	r3, [r0, #24]
 8008ce4:	b90b      	cbnz	r3, 8008cea <__swbuf_r+0x12>
 8008ce6:	f000 f9f3 	bl	80090d0 <__sinit>
 8008cea:	4b21      	ldr	r3, [pc, #132]	; (8008d70 <__swbuf_r+0x98>)
 8008cec:	429c      	cmp	r4, r3
 8008cee:	d12b      	bne.n	8008d48 <__swbuf_r+0x70>
 8008cf0:	686c      	ldr	r4, [r5, #4]
 8008cf2:	69a3      	ldr	r3, [r4, #24]
 8008cf4:	60a3      	str	r3, [r4, #8]
 8008cf6:	89a3      	ldrh	r3, [r4, #12]
 8008cf8:	071a      	lsls	r2, r3, #28
 8008cfa:	d52f      	bpl.n	8008d5c <__swbuf_r+0x84>
 8008cfc:	6923      	ldr	r3, [r4, #16]
 8008cfe:	b36b      	cbz	r3, 8008d5c <__swbuf_r+0x84>
 8008d00:	6923      	ldr	r3, [r4, #16]
 8008d02:	6820      	ldr	r0, [r4, #0]
 8008d04:	1ac0      	subs	r0, r0, r3
 8008d06:	6963      	ldr	r3, [r4, #20]
 8008d08:	b2f6      	uxtb	r6, r6
 8008d0a:	4283      	cmp	r3, r0
 8008d0c:	4637      	mov	r7, r6
 8008d0e:	dc04      	bgt.n	8008d1a <__swbuf_r+0x42>
 8008d10:	4621      	mov	r1, r4
 8008d12:	4628      	mov	r0, r5
 8008d14:	f000 f948 	bl	8008fa8 <_fflush_r>
 8008d18:	bb30      	cbnz	r0, 8008d68 <__swbuf_r+0x90>
 8008d1a:	68a3      	ldr	r3, [r4, #8]
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	60a3      	str	r3, [r4, #8]
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	1c5a      	adds	r2, r3, #1
 8008d24:	6022      	str	r2, [r4, #0]
 8008d26:	701e      	strb	r6, [r3, #0]
 8008d28:	6963      	ldr	r3, [r4, #20]
 8008d2a:	3001      	adds	r0, #1
 8008d2c:	4283      	cmp	r3, r0
 8008d2e:	d004      	beq.n	8008d3a <__swbuf_r+0x62>
 8008d30:	89a3      	ldrh	r3, [r4, #12]
 8008d32:	07db      	lsls	r3, r3, #31
 8008d34:	d506      	bpl.n	8008d44 <__swbuf_r+0x6c>
 8008d36:	2e0a      	cmp	r6, #10
 8008d38:	d104      	bne.n	8008d44 <__swbuf_r+0x6c>
 8008d3a:	4621      	mov	r1, r4
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	f000 f933 	bl	8008fa8 <_fflush_r>
 8008d42:	b988      	cbnz	r0, 8008d68 <__swbuf_r+0x90>
 8008d44:	4638      	mov	r0, r7
 8008d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d48:	4b0a      	ldr	r3, [pc, #40]	; (8008d74 <__swbuf_r+0x9c>)
 8008d4a:	429c      	cmp	r4, r3
 8008d4c:	d101      	bne.n	8008d52 <__swbuf_r+0x7a>
 8008d4e:	68ac      	ldr	r4, [r5, #8]
 8008d50:	e7cf      	b.n	8008cf2 <__swbuf_r+0x1a>
 8008d52:	4b09      	ldr	r3, [pc, #36]	; (8008d78 <__swbuf_r+0xa0>)
 8008d54:	429c      	cmp	r4, r3
 8008d56:	bf08      	it	eq
 8008d58:	68ec      	ldreq	r4, [r5, #12]
 8008d5a:	e7ca      	b.n	8008cf2 <__swbuf_r+0x1a>
 8008d5c:	4621      	mov	r1, r4
 8008d5e:	4628      	mov	r0, r5
 8008d60:	f000 f81e 	bl	8008da0 <__swsetup_r>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d0cb      	beq.n	8008d00 <__swbuf_r+0x28>
 8008d68:	f04f 37ff 	mov.w	r7, #4294967295
 8008d6c:	e7ea      	b.n	8008d44 <__swbuf_r+0x6c>
 8008d6e:	bf00      	nop
 8008d70:	0800a4e8 	.word	0x0800a4e8
 8008d74:	0800a508 	.word	0x0800a508
 8008d78:	0800a4c8 	.word	0x0800a4c8

08008d7c <_write_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4d07      	ldr	r5, [pc, #28]	; (8008d9c <_write_r+0x20>)
 8008d80:	4604      	mov	r4, r0
 8008d82:	4608      	mov	r0, r1
 8008d84:	4611      	mov	r1, r2
 8008d86:	2200      	movs	r2, #0
 8008d88:	602a      	str	r2, [r5, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f7f7 ff0e 	bl	8000bac <_write>
 8008d90:	1c43      	adds	r3, r0, #1
 8008d92:	d102      	bne.n	8008d9a <_write_r+0x1e>
 8008d94:	682b      	ldr	r3, [r5, #0]
 8008d96:	b103      	cbz	r3, 8008d9a <_write_r+0x1e>
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	bd38      	pop	{r3, r4, r5, pc}
 8008d9c:	20001c44 	.word	0x20001c44

08008da0 <__swsetup_r>:
 8008da0:	4b32      	ldr	r3, [pc, #200]	; (8008e6c <__swsetup_r+0xcc>)
 8008da2:	b570      	push	{r4, r5, r6, lr}
 8008da4:	681d      	ldr	r5, [r3, #0]
 8008da6:	4606      	mov	r6, r0
 8008da8:	460c      	mov	r4, r1
 8008daa:	b125      	cbz	r5, 8008db6 <__swsetup_r+0x16>
 8008dac:	69ab      	ldr	r3, [r5, #24]
 8008dae:	b913      	cbnz	r3, 8008db6 <__swsetup_r+0x16>
 8008db0:	4628      	mov	r0, r5
 8008db2:	f000 f98d 	bl	80090d0 <__sinit>
 8008db6:	4b2e      	ldr	r3, [pc, #184]	; (8008e70 <__swsetup_r+0xd0>)
 8008db8:	429c      	cmp	r4, r3
 8008dba:	d10f      	bne.n	8008ddc <__swsetup_r+0x3c>
 8008dbc:	686c      	ldr	r4, [r5, #4]
 8008dbe:	89a3      	ldrh	r3, [r4, #12]
 8008dc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dc4:	0719      	lsls	r1, r3, #28
 8008dc6:	d42c      	bmi.n	8008e22 <__swsetup_r+0x82>
 8008dc8:	06dd      	lsls	r5, r3, #27
 8008dca:	d411      	bmi.n	8008df0 <__swsetup_r+0x50>
 8008dcc:	2309      	movs	r3, #9
 8008dce:	6033      	str	r3, [r6, #0]
 8008dd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008dd4:	81a3      	strh	r3, [r4, #12]
 8008dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dda:	e03e      	b.n	8008e5a <__swsetup_r+0xba>
 8008ddc:	4b25      	ldr	r3, [pc, #148]	; (8008e74 <__swsetup_r+0xd4>)
 8008dde:	429c      	cmp	r4, r3
 8008de0:	d101      	bne.n	8008de6 <__swsetup_r+0x46>
 8008de2:	68ac      	ldr	r4, [r5, #8]
 8008de4:	e7eb      	b.n	8008dbe <__swsetup_r+0x1e>
 8008de6:	4b24      	ldr	r3, [pc, #144]	; (8008e78 <__swsetup_r+0xd8>)
 8008de8:	429c      	cmp	r4, r3
 8008dea:	bf08      	it	eq
 8008dec:	68ec      	ldreq	r4, [r5, #12]
 8008dee:	e7e6      	b.n	8008dbe <__swsetup_r+0x1e>
 8008df0:	0758      	lsls	r0, r3, #29
 8008df2:	d512      	bpl.n	8008e1a <__swsetup_r+0x7a>
 8008df4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008df6:	b141      	cbz	r1, 8008e0a <__swsetup_r+0x6a>
 8008df8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008dfc:	4299      	cmp	r1, r3
 8008dfe:	d002      	beq.n	8008e06 <__swsetup_r+0x66>
 8008e00:	4630      	mov	r0, r6
 8008e02:	f7ff fd2d 	bl	8008860 <_free_r>
 8008e06:	2300      	movs	r3, #0
 8008e08:	6363      	str	r3, [r4, #52]	; 0x34
 8008e0a:	89a3      	ldrh	r3, [r4, #12]
 8008e0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e10:	81a3      	strh	r3, [r4, #12]
 8008e12:	2300      	movs	r3, #0
 8008e14:	6063      	str	r3, [r4, #4]
 8008e16:	6923      	ldr	r3, [r4, #16]
 8008e18:	6023      	str	r3, [r4, #0]
 8008e1a:	89a3      	ldrh	r3, [r4, #12]
 8008e1c:	f043 0308 	orr.w	r3, r3, #8
 8008e20:	81a3      	strh	r3, [r4, #12]
 8008e22:	6923      	ldr	r3, [r4, #16]
 8008e24:	b94b      	cbnz	r3, 8008e3a <__swsetup_r+0x9a>
 8008e26:	89a3      	ldrh	r3, [r4, #12]
 8008e28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e30:	d003      	beq.n	8008e3a <__swsetup_r+0x9a>
 8008e32:	4621      	mov	r1, r4
 8008e34:	4630      	mov	r0, r6
 8008e36:	f000 fa23 	bl	8009280 <__smakebuf_r>
 8008e3a:	89a0      	ldrh	r0, [r4, #12]
 8008e3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e40:	f010 0301 	ands.w	r3, r0, #1
 8008e44:	d00a      	beq.n	8008e5c <__swsetup_r+0xbc>
 8008e46:	2300      	movs	r3, #0
 8008e48:	60a3      	str	r3, [r4, #8]
 8008e4a:	6963      	ldr	r3, [r4, #20]
 8008e4c:	425b      	negs	r3, r3
 8008e4e:	61a3      	str	r3, [r4, #24]
 8008e50:	6923      	ldr	r3, [r4, #16]
 8008e52:	b943      	cbnz	r3, 8008e66 <__swsetup_r+0xc6>
 8008e54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e58:	d1ba      	bne.n	8008dd0 <__swsetup_r+0x30>
 8008e5a:	bd70      	pop	{r4, r5, r6, pc}
 8008e5c:	0781      	lsls	r1, r0, #30
 8008e5e:	bf58      	it	pl
 8008e60:	6963      	ldrpl	r3, [r4, #20]
 8008e62:	60a3      	str	r3, [r4, #8]
 8008e64:	e7f4      	b.n	8008e50 <__swsetup_r+0xb0>
 8008e66:	2000      	movs	r0, #0
 8008e68:	e7f7      	b.n	8008e5a <__swsetup_r+0xba>
 8008e6a:	bf00      	nop
 8008e6c:	20000014 	.word	0x20000014
 8008e70:	0800a4e8 	.word	0x0800a4e8
 8008e74:	0800a508 	.word	0x0800a508
 8008e78:	0800a4c8 	.word	0x0800a4c8

08008e7c <_close_r>:
 8008e7c:	b538      	push	{r3, r4, r5, lr}
 8008e7e:	4d06      	ldr	r5, [pc, #24]	; (8008e98 <_close_r+0x1c>)
 8008e80:	2300      	movs	r3, #0
 8008e82:	4604      	mov	r4, r0
 8008e84:	4608      	mov	r0, r1
 8008e86:	602b      	str	r3, [r5, #0]
 8008e88:	f7f8 fceb 	bl	8001862 <_close>
 8008e8c:	1c43      	adds	r3, r0, #1
 8008e8e:	d102      	bne.n	8008e96 <_close_r+0x1a>
 8008e90:	682b      	ldr	r3, [r5, #0]
 8008e92:	b103      	cbz	r3, 8008e96 <_close_r+0x1a>
 8008e94:	6023      	str	r3, [r4, #0]
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	20001c44 	.word	0x20001c44

08008e9c <__sflush_r>:
 8008e9c:	898a      	ldrh	r2, [r1, #12]
 8008e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea2:	4605      	mov	r5, r0
 8008ea4:	0710      	lsls	r0, r2, #28
 8008ea6:	460c      	mov	r4, r1
 8008ea8:	d458      	bmi.n	8008f5c <__sflush_r+0xc0>
 8008eaa:	684b      	ldr	r3, [r1, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	dc05      	bgt.n	8008ebc <__sflush_r+0x20>
 8008eb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	dc02      	bgt.n	8008ebc <__sflush_r+0x20>
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ebe:	2e00      	cmp	r6, #0
 8008ec0:	d0f9      	beq.n	8008eb6 <__sflush_r+0x1a>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ec8:	682f      	ldr	r7, [r5, #0]
 8008eca:	602b      	str	r3, [r5, #0]
 8008ecc:	d032      	beq.n	8008f34 <__sflush_r+0x98>
 8008ece:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ed0:	89a3      	ldrh	r3, [r4, #12]
 8008ed2:	075a      	lsls	r2, r3, #29
 8008ed4:	d505      	bpl.n	8008ee2 <__sflush_r+0x46>
 8008ed6:	6863      	ldr	r3, [r4, #4]
 8008ed8:	1ac0      	subs	r0, r0, r3
 8008eda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008edc:	b10b      	cbz	r3, 8008ee2 <__sflush_r+0x46>
 8008ede:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ee0:	1ac0      	subs	r0, r0, r3
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ee8:	6a21      	ldr	r1, [r4, #32]
 8008eea:	4628      	mov	r0, r5
 8008eec:	47b0      	blx	r6
 8008eee:	1c43      	adds	r3, r0, #1
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	d106      	bne.n	8008f02 <__sflush_r+0x66>
 8008ef4:	6829      	ldr	r1, [r5, #0]
 8008ef6:	291d      	cmp	r1, #29
 8008ef8:	d82c      	bhi.n	8008f54 <__sflush_r+0xb8>
 8008efa:	4a2a      	ldr	r2, [pc, #168]	; (8008fa4 <__sflush_r+0x108>)
 8008efc:	40ca      	lsrs	r2, r1
 8008efe:	07d6      	lsls	r6, r2, #31
 8008f00:	d528      	bpl.n	8008f54 <__sflush_r+0xb8>
 8008f02:	2200      	movs	r2, #0
 8008f04:	6062      	str	r2, [r4, #4]
 8008f06:	04d9      	lsls	r1, r3, #19
 8008f08:	6922      	ldr	r2, [r4, #16]
 8008f0a:	6022      	str	r2, [r4, #0]
 8008f0c:	d504      	bpl.n	8008f18 <__sflush_r+0x7c>
 8008f0e:	1c42      	adds	r2, r0, #1
 8008f10:	d101      	bne.n	8008f16 <__sflush_r+0x7a>
 8008f12:	682b      	ldr	r3, [r5, #0]
 8008f14:	b903      	cbnz	r3, 8008f18 <__sflush_r+0x7c>
 8008f16:	6560      	str	r0, [r4, #84]	; 0x54
 8008f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f1a:	602f      	str	r7, [r5, #0]
 8008f1c:	2900      	cmp	r1, #0
 8008f1e:	d0ca      	beq.n	8008eb6 <__sflush_r+0x1a>
 8008f20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f24:	4299      	cmp	r1, r3
 8008f26:	d002      	beq.n	8008f2e <__sflush_r+0x92>
 8008f28:	4628      	mov	r0, r5
 8008f2a:	f7ff fc99 	bl	8008860 <_free_r>
 8008f2e:	2000      	movs	r0, #0
 8008f30:	6360      	str	r0, [r4, #52]	; 0x34
 8008f32:	e7c1      	b.n	8008eb8 <__sflush_r+0x1c>
 8008f34:	6a21      	ldr	r1, [r4, #32]
 8008f36:	2301      	movs	r3, #1
 8008f38:	4628      	mov	r0, r5
 8008f3a:	47b0      	blx	r6
 8008f3c:	1c41      	adds	r1, r0, #1
 8008f3e:	d1c7      	bne.n	8008ed0 <__sflush_r+0x34>
 8008f40:	682b      	ldr	r3, [r5, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d0c4      	beq.n	8008ed0 <__sflush_r+0x34>
 8008f46:	2b1d      	cmp	r3, #29
 8008f48:	d001      	beq.n	8008f4e <__sflush_r+0xb2>
 8008f4a:	2b16      	cmp	r3, #22
 8008f4c:	d101      	bne.n	8008f52 <__sflush_r+0xb6>
 8008f4e:	602f      	str	r7, [r5, #0]
 8008f50:	e7b1      	b.n	8008eb6 <__sflush_r+0x1a>
 8008f52:	89a3      	ldrh	r3, [r4, #12]
 8008f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f58:	81a3      	strh	r3, [r4, #12]
 8008f5a:	e7ad      	b.n	8008eb8 <__sflush_r+0x1c>
 8008f5c:	690f      	ldr	r7, [r1, #16]
 8008f5e:	2f00      	cmp	r7, #0
 8008f60:	d0a9      	beq.n	8008eb6 <__sflush_r+0x1a>
 8008f62:	0793      	lsls	r3, r2, #30
 8008f64:	680e      	ldr	r6, [r1, #0]
 8008f66:	bf08      	it	eq
 8008f68:	694b      	ldreq	r3, [r1, #20]
 8008f6a:	600f      	str	r7, [r1, #0]
 8008f6c:	bf18      	it	ne
 8008f6e:	2300      	movne	r3, #0
 8008f70:	eba6 0807 	sub.w	r8, r6, r7
 8008f74:	608b      	str	r3, [r1, #8]
 8008f76:	f1b8 0f00 	cmp.w	r8, #0
 8008f7a:	dd9c      	ble.n	8008eb6 <__sflush_r+0x1a>
 8008f7c:	6a21      	ldr	r1, [r4, #32]
 8008f7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f80:	4643      	mov	r3, r8
 8008f82:	463a      	mov	r2, r7
 8008f84:	4628      	mov	r0, r5
 8008f86:	47b0      	blx	r6
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	dc06      	bgt.n	8008f9a <__sflush_r+0xfe>
 8008f8c:	89a3      	ldrh	r3, [r4, #12]
 8008f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f92:	81a3      	strh	r3, [r4, #12]
 8008f94:	f04f 30ff 	mov.w	r0, #4294967295
 8008f98:	e78e      	b.n	8008eb8 <__sflush_r+0x1c>
 8008f9a:	4407      	add	r7, r0
 8008f9c:	eba8 0800 	sub.w	r8, r8, r0
 8008fa0:	e7e9      	b.n	8008f76 <__sflush_r+0xda>
 8008fa2:	bf00      	nop
 8008fa4:	20400001 	.word	0x20400001

08008fa8 <_fflush_r>:
 8008fa8:	b538      	push	{r3, r4, r5, lr}
 8008faa:	690b      	ldr	r3, [r1, #16]
 8008fac:	4605      	mov	r5, r0
 8008fae:	460c      	mov	r4, r1
 8008fb0:	b913      	cbnz	r3, 8008fb8 <_fflush_r+0x10>
 8008fb2:	2500      	movs	r5, #0
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	bd38      	pop	{r3, r4, r5, pc}
 8008fb8:	b118      	cbz	r0, 8008fc2 <_fflush_r+0x1a>
 8008fba:	6983      	ldr	r3, [r0, #24]
 8008fbc:	b90b      	cbnz	r3, 8008fc2 <_fflush_r+0x1a>
 8008fbe:	f000 f887 	bl	80090d0 <__sinit>
 8008fc2:	4b14      	ldr	r3, [pc, #80]	; (8009014 <_fflush_r+0x6c>)
 8008fc4:	429c      	cmp	r4, r3
 8008fc6:	d11b      	bne.n	8009000 <_fflush_r+0x58>
 8008fc8:	686c      	ldr	r4, [r5, #4]
 8008fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d0ef      	beq.n	8008fb2 <_fflush_r+0xa>
 8008fd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fd4:	07d0      	lsls	r0, r2, #31
 8008fd6:	d404      	bmi.n	8008fe2 <_fflush_r+0x3a>
 8008fd8:	0599      	lsls	r1, r3, #22
 8008fda:	d402      	bmi.n	8008fe2 <_fflush_r+0x3a>
 8008fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fde:	f000 f915 	bl	800920c <__retarget_lock_acquire_recursive>
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	f7ff ff59 	bl	8008e9c <__sflush_r>
 8008fea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fec:	07da      	lsls	r2, r3, #31
 8008fee:	4605      	mov	r5, r0
 8008ff0:	d4e0      	bmi.n	8008fb4 <_fflush_r+0xc>
 8008ff2:	89a3      	ldrh	r3, [r4, #12]
 8008ff4:	059b      	lsls	r3, r3, #22
 8008ff6:	d4dd      	bmi.n	8008fb4 <_fflush_r+0xc>
 8008ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ffa:	f000 f908 	bl	800920e <__retarget_lock_release_recursive>
 8008ffe:	e7d9      	b.n	8008fb4 <_fflush_r+0xc>
 8009000:	4b05      	ldr	r3, [pc, #20]	; (8009018 <_fflush_r+0x70>)
 8009002:	429c      	cmp	r4, r3
 8009004:	d101      	bne.n	800900a <_fflush_r+0x62>
 8009006:	68ac      	ldr	r4, [r5, #8]
 8009008:	e7df      	b.n	8008fca <_fflush_r+0x22>
 800900a:	4b04      	ldr	r3, [pc, #16]	; (800901c <_fflush_r+0x74>)
 800900c:	429c      	cmp	r4, r3
 800900e:	bf08      	it	eq
 8009010:	68ec      	ldreq	r4, [r5, #12]
 8009012:	e7da      	b.n	8008fca <_fflush_r+0x22>
 8009014:	0800a4e8 	.word	0x0800a4e8
 8009018:	0800a508 	.word	0x0800a508
 800901c:	0800a4c8 	.word	0x0800a4c8

08009020 <std>:
 8009020:	2300      	movs	r3, #0
 8009022:	b510      	push	{r4, lr}
 8009024:	4604      	mov	r4, r0
 8009026:	e9c0 3300 	strd	r3, r3, [r0]
 800902a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800902e:	6083      	str	r3, [r0, #8]
 8009030:	8181      	strh	r1, [r0, #12]
 8009032:	6643      	str	r3, [r0, #100]	; 0x64
 8009034:	81c2      	strh	r2, [r0, #14]
 8009036:	6183      	str	r3, [r0, #24]
 8009038:	4619      	mov	r1, r3
 800903a:	2208      	movs	r2, #8
 800903c:	305c      	adds	r0, #92	; 0x5c
 800903e:	f7ff fc07 	bl	8008850 <memset>
 8009042:	4b05      	ldr	r3, [pc, #20]	; (8009058 <std+0x38>)
 8009044:	6263      	str	r3, [r4, #36]	; 0x24
 8009046:	4b05      	ldr	r3, [pc, #20]	; (800905c <std+0x3c>)
 8009048:	62a3      	str	r3, [r4, #40]	; 0x28
 800904a:	4b05      	ldr	r3, [pc, #20]	; (8009060 <std+0x40>)
 800904c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800904e:	4b05      	ldr	r3, [pc, #20]	; (8009064 <std+0x44>)
 8009050:	6224      	str	r4, [r4, #32]
 8009052:	6323      	str	r3, [r4, #48]	; 0x30
 8009054:	bd10      	pop	{r4, pc}
 8009056:	bf00      	nop
 8009058:	08008c3d 	.word	0x08008c3d
 800905c:	08008c63 	.word	0x08008c63
 8009060:	08008c9b 	.word	0x08008c9b
 8009064:	08008cbf 	.word	0x08008cbf

08009068 <_cleanup_r>:
 8009068:	4901      	ldr	r1, [pc, #4]	; (8009070 <_cleanup_r+0x8>)
 800906a:	f000 b8af 	b.w	80091cc <_fwalk_reent>
 800906e:	bf00      	nop
 8009070:	08008fa9 	.word	0x08008fa9

08009074 <__sfmoreglue>:
 8009074:	b570      	push	{r4, r5, r6, lr}
 8009076:	2268      	movs	r2, #104	; 0x68
 8009078:	1e4d      	subs	r5, r1, #1
 800907a:	4355      	muls	r5, r2
 800907c:	460e      	mov	r6, r1
 800907e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009082:	f7ff fc59 	bl	8008938 <_malloc_r>
 8009086:	4604      	mov	r4, r0
 8009088:	b140      	cbz	r0, 800909c <__sfmoreglue+0x28>
 800908a:	2100      	movs	r1, #0
 800908c:	e9c0 1600 	strd	r1, r6, [r0]
 8009090:	300c      	adds	r0, #12
 8009092:	60a0      	str	r0, [r4, #8]
 8009094:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009098:	f7ff fbda 	bl	8008850 <memset>
 800909c:	4620      	mov	r0, r4
 800909e:	bd70      	pop	{r4, r5, r6, pc}

080090a0 <__sfp_lock_acquire>:
 80090a0:	4801      	ldr	r0, [pc, #4]	; (80090a8 <__sfp_lock_acquire+0x8>)
 80090a2:	f000 b8b3 	b.w	800920c <__retarget_lock_acquire_recursive>
 80090a6:	bf00      	nop
 80090a8:	20001c41 	.word	0x20001c41

080090ac <__sfp_lock_release>:
 80090ac:	4801      	ldr	r0, [pc, #4]	; (80090b4 <__sfp_lock_release+0x8>)
 80090ae:	f000 b8ae 	b.w	800920e <__retarget_lock_release_recursive>
 80090b2:	bf00      	nop
 80090b4:	20001c41 	.word	0x20001c41

080090b8 <__sinit_lock_acquire>:
 80090b8:	4801      	ldr	r0, [pc, #4]	; (80090c0 <__sinit_lock_acquire+0x8>)
 80090ba:	f000 b8a7 	b.w	800920c <__retarget_lock_acquire_recursive>
 80090be:	bf00      	nop
 80090c0:	20001c42 	.word	0x20001c42

080090c4 <__sinit_lock_release>:
 80090c4:	4801      	ldr	r0, [pc, #4]	; (80090cc <__sinit_lock_release+0x8>)
 80090c6:	f000 b8a2 	b.w	800920e <__retarget_lock_release_recursive>
 80090ca:	bf00      	nop
 80090cc:	20001c42 	.word	0x20001c42

080090d0 <__sinit>:
 80090d0:	b510      	push	{r4, lr}
 80090d2:	4604      	mov	r4, r0
 80090d4:	f7ff fff0 	bl	80090b8 <__sinit_lock_acquire>
 80090d8:	69a3      	ldr	r3, [r4, #24]
 80090da:	b11b      	cbz	r3, 80090e4 <__sinit+0x14>
 80090dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090e0:	f7ff bff0 	b.w	80090c4 <__sinit_lock_release>
 80090e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090e8:	6523      	str	r3, [r4, #80]	; 0x50
 80090ea:	4b13      	ldr	r3, [pc, #76]	; (8009138 <__sinit+0x68>)
 80090ec:	4a13      	ldr	r2, [pc, #76]	; (800913c <__sinit+0x6c>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80090f2:	42a3      	cmp	r3, r4
 80090f4:	bf04      	itt	eq
 80090f6:	2301      	moveq	r3, #1
 80090f8:	61a3      	streq	r3, [r4, #24]
 80090fa:	4620      	mov	r0, r4
 80090fc:	f000 f820 	bl	8009140 <__sfp>
 8009100:	6060      	str	r0, [r4, #4]
 8009102:	4620      	mov	r0, r4
 8009104:	f000 f81c 	bl	8009140 <__sfp>
 8009108:	60a0      	str	r0, [r4, #8]
 800910a:	4620      	mov	r0, r4
 800910c:	f000 f818 	bl	8009140 <__sfp>
 8009110:	2200      	movs	r2, #0
 8009112:	60e0      	str	r0, [r4, #12]
 8009114:	2104      	movs	r1, #4
 8009116:	6860      	ldr	r0, [r4, #4]
 8009118:	f7ff ff82 	bl	8009020 <std>
 800911c:	68a0      	ldr	r0, [r4, #8]
 800911e:	2201      	movs	r2, #1
 8009120:	2109      	movs	r1, #9
 8009122:	f7ff ff7d 	bl	8009020 <std>
 8009126:	68e0      	ldr	r0, [r4, #12]
 8009128:	2202      	movs	r2, #2
 800912a:	2112      	movs	r1, #18
 800912c:	f7ff ff78 	bl	8009020 <std>
 8009130:	2301      	movs	r3, #1
 8009132:	61a3      	str	r3, [r4, #24]
 8009134:	e7d2      	b.n	80090dc <__sinit+0xc>
 8009136:	bf00      	nop
 8009138:	0800a4c4 	.word	0x0800a4c4
 800913c:	08009069 	.word	0x08009069

08009140 <__sfp>:
 8009140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009142:	4607      	mov	r7, r0
 8009144:	f7ff ffac 	bl	80090a0 <__sfp_lock_acquire>
 8009148:	4b1e      	ldr	r3, [pc, #120]	; (80091c4 <__sfp+0x84>)
 800914a:	681e      	ldr	r6, [r3, #0]
 800914c:	69b3      	ldr	r3, [r6, #24]
 800914e:	b913      	cbnz	r3, 8009156 <__sfp+0x16>
 8009150:	4630      	mov	r0, r6
 8009152:	f7ff ffbd 	bl	80090d0 <__sinit>
 8009156:	3648      	adds	r6, #72	; 0x48
 8009158:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800915c:	3b01      	subs	r3, #1
 800915e:	d503      	bpl.n	8009168 <__sfp+0x28>
 8009160:	6833      	ldr	r3, [r6, #0]
 8009162:	b30b      	cbz	r3, 80091a8 <__sfp+0x68>
 8009164:	6836      	ldr	r6, [r6, #0]
 8009166:	e7f7      	b.n	8009158 <__sfp+0x18>
 8009168:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800916c:	b9d5      	cbnz	r5, 80091a4 <__sfp+0x64>
 800916e:	4b16      	ldr	r3, [pc, #88]	; (80091c8 <__sfp+0x88>)
 8009170:	60e3      	str	r3, [r4, #12]
 8009172:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009176:	6665      	str	r5, [r4, #100]	; 0x64
 8009178:	f000 f847 	bl	800920a <__retarget_lock_init_recursive>
 800917c:	f7ff ff96 	bl	80090ac <__sfp_lock_release>
 8009180:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009184:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009188:	6025      	str	r5, [r4, #0]
 800918a:	61a5      	str	r5, [r4, #24]
 800918c:	2208      	movs	r2, #8
 800918e:	4629      	mov	r1, r5
 8009190:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009194:	f7ff fb5c 	bl	8008850 <memset>
 8009198:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800919c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80091a0:	4620      	mov	r0, r4
 80091a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091a4:	3468      	adds	r4, #104	; 0x68
 80091a6:	e7d9      	b.n	800915c <__sfp+0x1c>
 80091a8:	2104      	movs	r1, #4
 80091aa:	4638      	mov	r0, r7
 80091ac:	f7ff ff62 	bl	8009074 <__sfmoreglue>
 80091b0:	4604      	mov	r4, r0
 80091b2:	6030      	str	r0, [r6, #0]
 80091b4:	2800      	cmp	r0, #0
 80091b6:	d1d5      	bne.n	8009164 <__sfp+0x24>
 80091b8:	f7ff ff78 	bl	80090ac <__sfp_lock_release>
 80091bc:	230c      	movs	r3, #12
 80091be:	603b      	str	r3, [r7, #0]
 80091c0:	e7ee      	b.n	80091a0 <__sfp+0x60>
 80091c2:	bf00      	nop
 80091c4:	0800a4c4 	.word	0x0800a4c4
 80091c8:	ffff0001 	.word	0xffff0001

080091cc <_fwalk_reent>:
 80091cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091d0:	4606      	mov	r6, r0
 80091d2:	4688      	mov	r8, r1
 80091d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091d8:	2700      	movs	r7, #0
 80091da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091de:	f1b9 0901 	subs.w	r9, r9, #1
 80091e2:	d505      	bpl.n	80091f0 <_fwalk_reent+0x24>
 80091e4:	6824      	ldr	r4, [r4, #0]
 80091e6:	2c00      	cmp	r4, #0
 80091e8:	d1f7      	bne.n	80091da <_fwalk_reent+0xe>
 80091ea:	4638      	mov	r0, r7
 80091ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091f0:	89ab      	ldrh	r3, [r5, #12]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d907      	bls.n	8009206 <_fwalk_reent+0x3a>
 80091f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091fa:	3301      	adds	r3, #1
 80091fc:	d003      	beq.n	8009206 <_fwalk_reent+0x3a>
 80091fe:	4629      	mov	r1, r5
 8009200:	4630      	mov	r0, r6
 8009202:	47c0      	blx	r8
 8009204:	4307      	orrs	r7, r0
 8009206:	3568      	adds	r5, #104	; 0x68
 8009208:	e7e9      	b.n	80091de <_fwalk_reent+0x12>

0800920a <__retarget_lock_init_recursive>:
 800920a:	4770      	bx	lr

0800920c <__retarget_lock_acquire_recursive>:
 800920c:	4770      	bx	lr

0800920e <__retarget_lock_release_recursive>:
 800920e:	4770      	bx	lr

08009210 <_lseek_r>:
 8009210:	b538      	push	{r3, r4, r5, lr}
 8009212:	4d07      	ldr	r5, [pc, #28]	; (8009230 <_lseek_r+0x20>)
 8009214:	4604      	mov	r4, r0
 8009216:	4608      	mov	r0, r1
 8009218:	4611      	mov	r1, r2
 800921a:	2200      	movs	r2, #0
 800921c:	602a      	str	r2, [r5, #0]
 800921e:	461a      	mov	r2, r3
 8009220:	f7f8 fb46 	bl	80018b0 <_lseek>
 8009224:	1c43      	adds	r3, r0, #1
 8009226:	d102      	bne.n	800922e <_lseek_r+0x1e>
 8009228:	682b      	ldr	r3, [r5, #0]
 800922a:	b103      	cbz	r3, 800922e <_lseek_r+0x1e>
 800922c:	6023      	str	r3, [r4, #0]
 800922e:	bd38      	pop	{r3, r4, r5, pc}
 8009230:	20001c44 	.word	0x20001c44

08009234 <__swhatbuf_r>:
 8009234:	b570      	push	{r4, r5, r6, lr}
 8009236:	460e      	mov	r6, r1
 8009238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800923c:	2900      	cmp	r1, #0
 800923e:	b096      	sub	sp, #88	; 0x58
 8009240:	4614      	mov	r4, r2
 8009242:	461d      	mov	r5, r3
 8009244:	da08      	bge.n	8009258 <__swhatbuf_r+0x24>
 8009246:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800924a:	2200      	movs	r2, #0
 800924c:	602a      	str	r2, [r5, #0]
 800924e:	061a      	lsls	r2, r3, #24
 8009250:	d410      	bmi.n	8009274 <__swhatbuf_r+0x40>
 8009252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009256:	e00e      	b.n	8009276 <__swhatbuf_r+0x42>
 8009258:	466a      	mov	r2, sp
 800925a:	f000 ffeb 	bl	800a234 <_fstat_r>
 800925e:	2800      	cmp	r0, #0
 8009260:	dbf1      	blt.n	8009246 <__swhatbuf_r+0x12>
 8009262:	9a01      	ldr	r2, [sp, #4]
 8009264:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009268:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800926c:	425a      	negs	r2, r3
 800926e:	415a      	adcs	r2, r3
 8009270:	602a      	str	r2, [r5, #0]
 8009272:	e7ee      	b.n	8009252 <__swhatbuf_r+0x1e>
 8009274:	2340      	movs	r3, #64	; 0x40
 8009276:	2000      	movs	r0, #0
 8009278:	6023      	str	r3, [r4, #0]
 800927a:	b016      	add	sp, #88	; 0x58
 800927c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009280 <__smakebuf_r>:
 8009280:	898b      	ldrh	r3, [r1, #12]
 8009282:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009284:	079d      	lsls	r5, r3, #30
 8009286:	4606      	mov	r6, r0
 8009288:	460c      	mov	r4, r1
 800928a:	d507      	bpl.n	800929c <__smakebuf_r+0x1c>
 800928c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	6123      	str	r3, [r4, #16]
 8009294:	2301      	movs	r3, #1
 8009296:	6163      	str	r3, [r4, #20]
 8009298:	b002      	add	sp, #8
 800929a:	bd70      	pop	{r4, r5, r6, pc}
 800929c:	ab01      	add	r3, sp, #4
 800929e:	466a      	mov	r2, sp
 80092a0:	f7ff ffc8 	bl	8009234 <__swhatbuf_r>
 80092a4:	9900      	ldr	r1, [sp, #0]
 80092a6:	4605      	mov	r5, r0
 80092a8:	4630      	mov	r0, r6
 80092aa:	f7ff fb45 	bl	8008938 <_malloc_r>
 80092ae:	b948      	cbnz	r0, 80092c4 <__smakebuf_r+0x44>
 80092b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092b4:	059a      	lsls	r2, r3, #22
 80092b6:	d4ef      	bmi.n	8009298 <__smakebuf_r+0x18>
 80092b8:	f023 0303 	bic.w	r3, r3, #3
 80092bc:	f043 0302 	orr.w	r3, r3, #2
 80092c0:	81a3      	strh	r3, [r4, #12]
 80092c2:	e7e3      	b.n	800928c <__smakebuf_r+0xc>
 80092c4:	4b0d      	ldr	r3, [pc, #52]	; (80092fc <__smakebuf_r+0x7c>)
 80092c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80092c8:	89a3      	ldrh	r3, [r4, #12]
 80092ca:	6020      	str	r0, [r4, #0]
 80092cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092d0:	81a3      	strh	r3, [r4, #12]
 80092d2:	9b00      	ldr	r3, [sp, #0]
 80092d4:	6163      	str	r3, [r4, #20]
 80092d6:	9b01      	ldr	r3, [sp, #4]
 80092d8:	6120      	str	r0, [r4, #16]
 80092da:	b15b      	cbz	r3, 80092f4 <__smakebuf_r+0x74>
 80092dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092e0:	4630      	mov	r0, r6
 80092e2:	f000 ffb9 	bl	800a258 <_isatty_r>
 80092e6:	b128      	cbz	r0, 80092f4 <__smakebuf_r+0x74>
 80092e8:	89a3      	ldrh	r3, [r4, #12]
 80092ea:	f023 0303 	bic.w	r3, r3, #3
 80092ee:	f043 0301 	orr.w	r3, r3, #1
 80092f2:	81a3      	strh	r3, [r4, #12]
 80092f4:	89a0      	ldrh	r0, [r4, #12]
 80092f6:	4305      	orrs	r5, r0
 80092f8:	81a5      	strh	r5, [r4, #12]
 80092fa:	e7cd      	b.n	8009298 <__smakebuf_r+0x18>
 80092fc:	08009069 	.word	0x08009069

08009300 <__malloc_lock>:
 8009300:	4801      	ldr	r0, [pc, #4]	; (8009308 <__malloc_lock+0x8>)
 8009302:	f7ff bf83 	b.w	800920c <__retarget_lock_acquire_recursive>
 8009306:	bf00      	nop
 8009308:	20001c40 	.word	0x20001c40

0800930c <__malloc_unlock>:
 800930c:	4801      	ldr	r0, [pc, #4]	; (8009314 <__malloc_unlock+0x8>)
 800930e:	f7ff bf7e 	b.w	800920e <__retarget_lock_release_recursive>
 8009312:	bf00      	nop
 8009314:	20001c40 	.word	0x20001c40

08009318 <_sungetc_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	1c4b      	adds	r3, r1, #1
 800931c:	4614      	mov	r4, r2
 800931e:	d103      	bne.n	8009328 <_sungetc_r+0x10>
 8009320:	f04f 35ff 	mov.w	r5, #4294967295
 8009324:	4628      	mov	r0, r5
 8009326:	bd38      	pop	{r3, r4, r5, pc}
 8009328:	8993      	ldrh	r3, [r2, #12]
 800932a:	f023 0320 	bic.w	r3, r3, #32
 800932e:	8193      	strh	r3, [r2, #12]
 8009330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009332:	6852      	ldr	r2, [r2, #4]
 8009334:	b2cd      	uxtb	r5, r1
 8009336:	b18b      	cbz	r3, 800935c <_sungetc_r+0x44>
 8009338:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800933a:	4293      	cmp	r3, r2
 800933c:	dd08      	ble.n	8009350 <_sungetc_r+0x38>
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	1e5a      	subs	r2, r3, #1
 8009342:	6022      	str	r2, [r4, #0]
 8009344:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009348:	6863      	ldr	r3, [r4, #4]
 800934a:	3301      	adds	r3, #1
 800934c:	6063      	str	r3, [r4, #4]
 800934e:	e7e9      	b.n	8009324 <_sungetc_r+0xc>
 8009350:	4621      	mov	r1, r4
 8009352:	f000 ff35 	bl	800a1c0 <__submore>
 8009356:	2800      	cmp	r0, #0
 8009358:	d0f1      	beq.n	800933e <_sungetc_r+0x26>
 800935a:	e7e1      	b.n	8009320 <_sungetc_r+0x8>
 800935c:	6921      	ldr	r1, [r4, #16]
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	b151      	cbz	r1, 8009378 <_sungetc_r+0x60>
 8009362:	4299      	cmp	r1, r3
 8009364:	d208      	bcs.n	8009378 <_sungetc_r+0x60>
 8009366:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800936a:	42a9      	cmp	r1, r5
 800936c:	d104      	bne.n	8009378 <_sungetc_r+0x60>
 800936e:	3b01      	subs	r3, #1
 8009370:	3201      	adds	r2, #1
 8009372:	6023      	str	r3, [r4, #0]
 8009374:	6062      	str	r2, [r4, #4]
 8009376:	e7d5      	b.n	8009324 <_sungetc_r+0xc>
 8009378:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800937c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009380:	6363      	str	r3, [r4, #52]	; 0x34
 8009382:	2303      	movs	r3, #3
 8009384:	63a3      	str	r3, [r4, #56]	; 0x38
 8009386:	4623      	mov	r3, r4
 8009388:	f803 5f46 	strb.w	r5, [r3, #70]!
 800938c:	6023      	str	r3, [r4, #0]
 800938e:	2301      	movs	r3, #1
 8009390:	e7dc      	b.n	800934c <_sungetc_r+0x34>

08009392 <__ssrefill_r>:
 8009392:	b510      	push	{r4, lr}
 8009394:	460c      	mov	r4, r1
 8009396:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009398:	b169      	cbz	r1, 80093b6 <__ssrefill_r+0x24>
 800939a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800939e:	4299      	cmp	r1, r3
 80093a0:	d001      	beq.n	80093a6 <__ssrefill_r+0x14>
 80093a2:	f7ff fa5d 	bl	8008860 <_free_r>
 80093a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093a8:	6063      	str	r3, [r4, #4]
 80093aa:	2000      	movs	r0, #0
 80093ac:	6360      	str	r0, [r4, #52]	; 0x34
 80093ae:	b113      	cbz	r3, 80093b6 <__ssrefill_r+0x24>
 80093b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80093b2:	6023      	str	r3, [r4, #0]
 80093b4:	bd10      	pop	{r4, pc}
 80093b6:	6923      	ldr	r3, [r4, #16]
 80093b8:	6023      	str	r3, [r4, #0]
 80093ba:	2300      	movs	r3, #0
 80093bc:	6063      	str	r3, [r4, #4]
 80093be:	89a3      	ldrh	r3, [r4, #12]
 80093c0:	f043 0320 	orr.w	r3, r3, #32
 80093c4:	81a3      	strh	r3, [r4, #12]
 80093c6:	f04f 30ff 	mov.w	r0, #4294967295
 80093ca:	e7f3      	b.n	80093b4 <__ssrefill_r+0x22>

080093cc <__ssvfiscanf_r>:
 80093cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d0:	460c      	mov	r4, r1
 80093d2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80093d6:	2100      	movs	r1, #0
 80093d8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80093dc:	49a6      	ldr	r1, [pc, #664]	; (8009678 <__ssvfiscanf_r+0x2ac>)
 80093de:	91a0      	str	r1, [sp, #640]	; 0x280
 80093e0:	f10d 0804 	add.w	r8, sp, #4
 80093e4:	49a5      	ldr	r1, [pc, #660]	; (800967c <__ssvfiscanf_r+0x2b0>)
 80093e6:	4fa6      	ldr	r7, [pc, #664]	; (8009680 <__ssvfiscanf_r+0x2b4>)
 80093e8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009684 <__ssvfiscanf_r+0x2b8>
 80093ec:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80093f0:	4606      	mov	r6, r0
 80093f2:	91a1      	str	r1, [sp, #644]	; 0x284
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	7813      	ldrb	r3, [r2, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f000 815a 	beq.w	80096b2 <__ssvfiscanf_r+0x2e6>
 80093fe:	5dd9      	ldrb	r1, [r3, r7]
 8009400:	f011 0108 	ands.w	r1, r1, #8
 8009404:	f102 0501 	add.w	r5, r2, #1
 8009408:	d019      	beq.n	800943e <__ssvfiscanf_r+0x72>
 800940a:	6863      	ldr	r3, [r4, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	dd0f      	ble.n	8009430 <__ssvfiscanf_r+0x64>
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	781a      	ldrb	r2, [r3, #0]
 8009414:	5cba      	ldrb	r2, [r7, r2]
 8009416:	0712      	lsls	r2, r2, #28
 8009418:	d401      	bmi.n	800941e <__ssvfiscanf_r+0x52>
 800941a:	462a      	mov	r2, r5
 800941c:	e7eb      	b.n	80093f6 <__ssvfiscanf_r+0x2a>
 800941e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009420:	3201      	adds	r2, #1
 8009422:	9245      	str	r2, [sp, #276]	; 0x114
 8009424:	6862      	ldr	r2, [r4, #4]
 8009426:	3301      	adds	r3, #1
 8009428:	3a01      	subs	r2, #1
 800942a:	6062      	str	r2, [r4, #4]
 800942c:	6023      	str	r3, [r4, #0]
 800942e:	e7ec      	b.n	800940a <__ssvfiscanf_r+0x3e>
 8009430:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009432:	4621      	mov	r1, r4
 8009434:	4630      	mov	r0, r6
 8009436:	4798      	blx	r3
 8009438:	2800      	cmp	r0, #0
 800943a:	d0e9      	beq.n	8009410 <__ssvfiscanf_r+0x44>
 800943c:	e7ed      	b.n	800941a <__ssvfiscanf_r+0x4e>
 800943e:	2b25      	cmp	r3, #37	; 0x25
 8009440:	d012      	beq.n	8009468 <__ssvfiscanf_r+0x9c>
 8009442:	469a      	mov	sl, r3
 8009444:	6863      	ldr	r3, [r4, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	f340 8091 	ble.w	800956e <__ssvfiscanf_r+0x1a2>
 800944c:	6822      	ldr	r2, [r4, #0]
 800944e:	7813      	ldrb	r3, [r2, #0]
 8009450:	4553      	cmp	r3, sl
 8009452:	f040 812e 	bne.w	80096b2 <__ssvfiscanf_r+0x2e6>
 8009456:	6863      	ldr	r3, [r4, #4]
 8009458:	3b01      	subs	r3, #1
 800945a:	6063      	str	r3, [r4, #4]
 800945c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800945e:	3201      	adds	r2, #1
 8009460:	3301      	adds	r3, #1
 8009462:	6022      	str	r2, [r4, #0]
 8009464:	9345      	str	r3, [sp, #276]	; 0x114
 8009466:	e7d8      	b.n	800941a <__ssvfiscanf_r+0x4e>
 8009468:	9141      	str	r1, [sp, #260]	; 0x104
 800946a:	9143      	str	r1, [sp, #268]	; 0x10c
 800946c:	7853      	ldrb	r3, [r2, #1]
 800946e:	2b2a      	cmp	r3, #42	; 0x2a
 8009470:	bf02      	ittt	eq
 8009472:	2310      	moveq	r3, #16
 8009474:	1c95      	addeq	r5, r2, #2
 8009476:	9341      	streq	r3, [sp, #260]	; 0x104
 8009478:	220a      	movs	r2, #10
 800947a:	46aa      	mov	sl, r5
 800947c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009480:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009484:	2b09      	cmp	r3, #9
 8009486:	d91d      	bls.n	80094c4 <__ssvfiscanf_r+0xf8>
 8009488:	487e      	ldr	r0, [pc, #504]	; (8009684 <__ssvfiscanf_r+0x2b8>)
 800948a:	2203      	movs	r2, #3
 800948c:	f7f6 feb8 	bl	8000200 <memchr>
 8009490:	b140      	cbz	r0, 80094a4 <__ssvfiscanf_r+0xd8>
 8009492:	2301      	movs	r3, #1
 8009494:	eba0 0009 	sub.w	r0, r0, r9
 8009498:	fa03 f000 	lsl.w	r0, r3, r0
 800949c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800949e:	4318      	orrs	r0, r3
 80094a0:	9041      	str	r0, [sp, #260]	; 0x104
 80094a2:	4655      	mov	r5, sl
 80094a4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80094a8:	2b78      	cmp	r3, #120	; 0x78
 80094aa:	d806      	bhi.n	80094ba <__ssvfiscanf_r+0xee>
 80094ac:	2b57      	cmp	r3, #87	; 0x57
 80094ae:	d810      	bhi.n	80094d2 <__ssvfiscanf_r+0x106>
 80094b0:	2b25      	cmp	r3, #37	; 0x25
 80094b2:	d0c6      	beq.n	8009442 <__ssvfiscanf_r+0x76>
 80094b4:	d856      	bhi.n	8009564 <__ssvfiscanf_r+0x198>
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d064      	beq.n	8009584 <__ssvfiscanf_r+0x1b8>
 80094ba:	2303      	movs	r3, #3
 80094bc:	9347      	str	r3, [sp, #284]	; 0x11c
 80094be:	230a      	movs	r3, #10
 80094c0:	9342      	str	r3, [sp, #264]	; 0x108
 80094c2:	e071      	b.n	80095a8 <__ssvfiscanf_r+0x1dc>
 80094c4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80094c6:	fb02 1103 	mla	r1, r2, r3, r1
 80094ca:	3930      	subs	r1, #48	; 0x30
 80094cc:	9143      	str	r1, [sp, #268]	; 0x10c
 80094ce:	4655      	mov	r5, sl
 80094d0:	e7d3      	b.n	800947a <__ssvfiscanf_r+0xae>
 80094d2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80094d6:	2a20      	cmp	r2, #32
 80094d8:	d8ef      	bhi.n	80094ba <__ssvfiscanf_r+0xee>
 80094da:	a101      	add	r1, pc, #4	; (adr r1, 80094e0 <__ssvfiscanf_r+0x114>)
 80094dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80094e0:	08009593 	.word	0x08009593
 80094e4:	080094bb 	.word	0x080094bb
 80094e8:	080094bb 	.word	0x080094bb
 80094ec:	080095f1 	.word	0x080095f1
 80094f0:	080094bb 	.word	0x080094bb
 80094f4:	080094bb 	.word	0x080094bb
 80094f8:	080094bb 	.word	0x080094bb
 80094fc:	080094bb 	.word	0x080094bb
 8009500:	080094bb 	.word	0x080094bb
 8009504:	080094bb 	.word	0x080094bb
 8009508:	080094bb 	.word	0x080094bb
 800950c:	08009607 	.word	0x08009607
 8009510:	080095dd 	.word	0x080095dd
 8009514:	0800956b 	.word	0x0800956b
 8009518:	0800956b 	.word	0x0800956b
 800951c:	0800956b 	.word	0x0800956b
 8009520:	080094bb 	.word	0x080094bb
 8009524:	080095e1 	.word	0x080095e1
 8009528:	080094bb 	.word	0x080094bb
 800952c:	080094bb 	.word	0x080094bb
 8009530:	080094bb 	.word	0x080094bb
 8009534:	080094bb 	.word	0x080094bb
 8009538:	08009617 	.word	0x08009617
 800953c:	080095e9 	.word	0x080095e9
 8009540:	0800958b 	.word	0x0800958b
 8009544:	080094bb 	.word	0x080094bb
 8009548:	080094bb 	.word	0x080094bb
 800954c:	08009613 	.word	0x08009613
 8009550:	080094bb 	.word	0x080094bb
 8009554:	080095dd 	.word	0x080095dd
 8009558:	080094bb 	.word	0x080094bb
 800955c:	080094bb 	.word	0x080094bb
 8009560:	08009593 	.word	0x08009593
 8009564:	3b45      	subs	r3, #69	; 0x45
 8009566:	2b02      	cmp	r3, #2
 8009568:	d8a7      	bhi.n	80094ba <__ssvfiscanf_r+0xee>
 800956a:	2305      	movs	r3, #5
 800956c:	e01b      	b.n	80095a6 <__ssvfiscanf_r+0x1da>
 800956e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009570:	4621      	mov	r1, r4
 8009572:	4630      	mov	r0, r6
 8009574:	4798      	blx	r3
 8009576:	2800      	cmp	r0, #0
 8009578:	f43f af68 	beq.w	800944c <__ssvfiscanf_r+0x80>
 800957c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800957e:	2800      	cmp	r0, #0
 8009580:	f040 808d 	bne.w	800969e <__ssvfiscanf_r+0x2d2>
 8009584:	f04f 30ff 	mov.w	r0, #4294967295
 8009588:	e08f      	b.n	80096aa <__ssvfiscanf_r+0x2de>
 800958a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800958c:	f042 0220 	orr.w	r2, r2, #32
 8009590:	9241      	str	r2, [sp, #260]	; 0x104
 8009592:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009598:	9241      	str	r2, [sp, #260]	; 0x104
 800959a:	2210      	movs	r2, #16
 800959c:	2b6f      	cmp	r3, #111	; 0x6f
 800959e:	9242      	str	r2, [sp, #264]	; 0x108
 80095a0:	bf34      	ite	cc
 80095a2:	2303      	movcc	r3, #3
 80095a4:	2304      	movcs	r3, #4
 80095a6:	9347      	str	r3, [sp, #284]	; 0x11c
 80095a8:	6863      	ldr	r3, [r4, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	dd42      	ble.n	8009634 <__ssvfiscanf_r+0x268>
 80095ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80095b0:	0659      	lsls	r1, r3, #25
 80095b2:	d404      	bmi.n	80095be <__ssvfiscanf_r+0x1f2>
 80095b4:	6823      	ldr	r3, [r4, #0]
 80095b6:	781a      	ldrb	r2, [r3, #0]
 80095b8:	5cba      	ldrb	r2, [r7, r2]
 80095ba:	0712      	lsls	r2, r2, #28
 80095bc:	d441      	bmi.n	8009642 <__ssvfiscanf_r+0x276>
 80095be:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	dc50      	bgt.n	8009666 <__ssvfiscanf_r+0x29a>
 80095c4:	466b      	mov	r3, sp
 80095c6:	4622      	mov	r2, r4
 80095c8:	a941      	add	r1, sp, #260	; 0x104
 80095ca:	4630      	mov	r0, r6
 80095cc:	f000 fb64 	bl	8009c98 <_scanf_chars>
 80095d0:	2801      	cmp	r0, #1
 80095d2:	d06e      	beq.n	80096b2 <__ssvfiscanf_r+0x2e6>
 80095d4:	2802      	cmp	r0, #2
 80095d6:	f47f af20 	bne.w	800941a <__ssvfiscanf_r+0x4e>
 80095da:	e7cf      	b.n	800957c <__ssvfiscanf_r+0x1b0>
 80095dc:	220a      	movs	r2, #10
 80095de:	e7dd      	b.n	800959c <__ssvfiscanf_r+0x1d0>
 80095e0:	2300      	movs	r3, #0
 80095e2:	9342      	str	r3, [sp, #264]	; 0x108
 80095e4:	2303      	movs	r3, #3
 80095e6:	e7de      	b.n	80095a6 <__ssvfiscanf_r+0x1da>
 80095e8:	2308      	movs	r3, #8
 80095ea:	9342      	str	r3, [sp, #264]	; 0x108
 80095ec:	2304      	movs	r3, #4
 80095ee:	e7da      	b.n	80095a6 <__ssvfiscanf_r+0x1da>
 80095f0:	4629      	mov	r1, r5
 80095f2:	4640      	mov	r0, r8
 80095f4:	f000 fcb4 	bl	8009f60 <__sccl>
 80095f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80095fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095fe:	9341      	str	r3, [sp, #260]	; 0x104
 8009600:	4605      	mov	r5, r0
 8009602:	2301      	movs	r3, #1
 8009604:	e7cf      	b.n	80095a6 <__ssvfiscanf_r+0x1da>
 8009606:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800960c:	9341      	str	r3, [sp, #260]	; 0x104
 800960e:	2300      	movs	r3, #0
 8009610:	e7c9      	b.n	80095a6 <__ssvfiscanf_r+0x1da>
 8009612:	2302      	movs	r3, #2
 8009614:	e7c7      	b.n	80095a6 <__ssvfiscanf_r+0x1da>
 8009616:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009618:	06c3      	lsls	r3, r0, #27
 800961a:	f53f aefe 	bmi.w	800941a <__ssvfiscanf_r+0x4e>
 800961e:	9b00      	ldr	r3, [sp, #0]
 8009620:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009622:	1d19      	adds	r1, r3, #4
 8009624:	9100      	str	r1, [sp, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f010 0f01 	tst.w	r0, #1
 800962c:	bf14      	ite	ne
 800962e:	801a      	strhne	r2, [r3, #0]
 8009630:	601a      	streq	r2, [r3, #0]
 8009632:	e6f2      	b.n	800941a <__ssvfiscanf_r+0x4e>
 8009634:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009636:	4621      	mov	r1, r4
 8009638:	4630      	mov	r0, r6
 800963a:	4798      	blx	r3
 800963c:	2800      	cmp	r0, #0
 800963e:	d0b6      	beq.n	80095ae <__ssvfiscanf_r+0x1e2>
 8009640:	e79c      	b.n	800957c <__ssvfiscanf_r+0x1b0>
 8009642:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009644:	3201      	adds	r2, #1
 8009646:	9245      	str	r2, [sp, #276]	; 0x114
 8009648:	6862      	ldr	r2, [r4, #4]
 800964a:	3a01      	subs	r2, #1
 800964c:	2a00      	cmp	r2, #0
 800964e:	6062      	str	r2, [r4, #4]
 8009650:	dd02      	ble.n	8009658 <__ssvfiscanf_r+0x28c>
 8009652:	3301      	adds	r3, #1
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	e7ad      	b.n	80095b4 <__ssvfiscanf_r+0x1e8>
 8009658:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800965a:	4621      	mov	r1, r4
 800965c:	4630      	mov	r0, r6
 800965e:	4798      	blx	r3
 8009660:	2800      	cmp	r0, #0
 8009662:	d0a7      	beq.n	80095b4 <__ssvfiscanf_r+0x1e8>
 8009664:	e78a      	b.n	800957c <__ssvfiscanf_r+0x1b0>
 8009666:	2b04      	cmp	r3, #4
 8009668:	dc0e      	bgt.n	8009688 <__ssvfiscanf_r+0x2bc>
 800966a:	466b      	mov	r3, sp
 800966c:	4622      	mov	r2, r4
 800966e:	a941      	add	r1, sp, #260	; 0x104
 8009670:	4630      	mov	r0, r6
 8009672:	f000 fb6b 	bl	8009d4c <_scanf_i>
 8009676:	e7ab      	b.n	80095d0 <__ssvfiscanf_r+0x204>
 8009678:	08009319 	.word	0x08009319
 800967c:	08009393 	.word	0x08009393
 8009680:	0800a577 	.word	0x0800a577
 8009684:	0800a528 	.word	0x0800a528
 8009688:	4b0b      	ldr	r3, [pc, #44]	; (80096b8 <__ssvfiscanf_r+0x2ec>)
 800968a:	2b00      	cmp	r3, #0
 800968c:	f43f aec5 	beq.w	800941a <__ssvfiscanf_r+0x4e>
 8009690:	466b      	mov	r3, sp
 8009692:	4622      	mov	r2, r4
 8009694:	a941      	add	r1, sp, #260	; 0x104
 8009696:	4630      	mov	r0, r6
 8009698:	f3af 8000 	nop.w
 800969c:	e798      	b.n	80095d0 <__ssvfiscanf_r+0x204>
 800969e:	89a3      	ldrh	r3, [r4, #12]
 80096a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80096a4:	bf18      	it	ne
 80096a6:	f04f 30ff 	movne.w	r0, #4294967295
 80096aa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80096ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096b2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80096b4:	e7f9      	b.n	80096aa <__ssvfiscanf_r+0x2de>
 80096b6:	bf00      	nop
 80096b8:	00000000 	.word	0x00000000

080096bc <__sfputc_r>:
 80096bc:	6893      	ldr	r3, [r2, #8]
 80096be:	3b01      	subs	r3, #1
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	b410      	push	{r4}
 80096c4:	6093      	str	r3, [r2, #8]
 80096c6:	da08      	bge.n	80096da <__sfputc_r+0x1e>
 80096c8:	6994      	ldr	r4, [r2, #24]
 80096ca:	42a3      	cmp	r3, r4
 80096cc:	db01      	blt.n	80096d2 <__sfputc_r+0x16>
 80096ce:	290a      	cmp	r1, #10
 80096d0:	d103      	bne.n	80096da <__sfputc_r+0x1e>
 80096d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096d6:	f7ff baff 	b.w	8008cd8 <__swbuf_r>
 80096da:	6813      	ldr	r3, [r2, #0]
 80096dc:	1c58      	adds	r0, r3, #1
 80096de:	6010      	str	r0, [r2, #0]
 80096e0:	7019      	strb	r1, [r3, #0]
 80096e2:	4608      	mov	r0, r1
 80096e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096e8:	4770      	bx	lr

080096ea <__sfputs_r>:
 80096ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ec:	4606      	mov	r6, r0
 80096ee:	460f      	mov	r7, r1
 80096f0:	4614      	mov	r4, r2
 80096f2:	18d5      	adds	r5, r2, r3
 80096f4:	42ac      	cmp	r4, r5
 80096f6:	d101      	bne.n	80096fc <__sfputs_r+0x12>
 80096f8:	2000      	movs	r0, #0
 80096fa:	e007      	b.n	800970c <__sfputs_r+0x22>
 80096fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009700:	463a      	mov	r2, r7
 8009702:	4630      	mov	r0, r6
 8009704:	f7ff ffda 	bl	80096bc <__sfputc_r>
 8009708:	1c43      	adds	r3, r0, #1
 800970a:	d1f3      	bne.n	80096f4 <__sfputs_r+0xa>
 800970c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009710 <_vfiprintf_r>:
 8009710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009714:	460d      	mov	r5, r1
 8009716:	b09d      	sub	sp, #116	; 0x74
 8009718:	4614      	mov	r4, r2
 800971a:	4698      	mov	r8, r3
 800971c:	4606      	mov	r6, r0
 800971e:	b118      	cbz	r0, 8009728 <_vfiprintf_r+0x18>
 8009720:	6983      	ldr	r3, [r0, #24]
 8009722:	b90b      	cbnz	r3, 8009728 <_vfiprintf_r+0x18>
 8009724:	f7ff fcd4 	bl	80090d0 <__sinit>
 8009728:	4b89      	ldr	r3, [pc, #548]	; (8009950 <_vfiprintf_r+0x240>)
 800972a:	429d      	cmp	r5, r3
 800972c:	d11b      	bne.n	8009766 <_vfiprintf_r+0x56>
 800972e:	6875      	ldr	r5, [r6, #4]
 8009730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009732:	07d9      	lsls	r1, r3, #31
 8009734:	d405      	bmi.n	8009742 <_vfiprintf_r+0x32>
 8009736:	89ab      	ldrh	r3, [r5, #12]
 8009738:	059a      	lsls	r2, r3, #22
 800973a:	d402      	bmi.n	8009742 <_vfiprintf_r+0x32>
 800973c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800973e:	f7ff fd65 	bl	800920c <__retarget_lock_acquire_recursive>
 8009742:	89ab      	ldrh	r3, [r5, #12]
 8009744:	071b      	lsls	r3, r3, #28
 8009746:	d501      	bpl.n	800974c <_vfiprintf_r+0x3c>
 8009748:	692b      	ldr	r3, [r5, #16]
 800974a:	b9eb      	cbnz	r3, 8009788 <_vfiprintf_r+0x78>
 800974c:	4629      	mov	r1, r5
 800974e:	4630      	mov	r0, r6
 8009750:	f7ff fb26 	bl	8008da0 <__swsetup_r>
 8009754:	b1c0      	cbz	r0, 8009788 <_vfiprintf_r+0x78>
 8009756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009758:	07dc      	lsls	r4, r3, #31
 800975a:	d50e      	bpl.n	800977a <_vfiprintf_r+0x6a>
 800975c:	f04f 30ff 	mov.w	r0, #4294967295
 8009760:	b01d      	add	sp, #116	; 0x74
 8009762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009766:	4b7b      	ldr	r3, [pc, #492]	; (8009954 <_vfiprintf_r+0x244>)
 8009768:	429d      	cmp	r5, r3
 800976a:	d101      	bne.n	8009770 <_vfiprintf_r+0x60>
 800976c:	68b5      	ldr	r5, [r6, #8]
 800976e:	e7df      	b.n	8009730 <_vfiprintf_r+0x20>
 8009770:	4b79      	ldr	r3, [pc, #484]	; (8009958 <_vfiprintf_r+0x248>)
 8009772:	429d      	cmp	r5, r3
 8009774:	bf08      	it	eq
 8009776:	68f5      	ldreq	r5, [r6, #12]
 8009778:	e7da      	b.n	8009730 <_vfiprintf_r+0x20>
 800977a:	89ab      	ldrh	r3, [r5, #12]
 800977c:	0598      	lsls	r0, r3, #22
 800977e:	d4ed      	bmi.n	800975c <_vfiprintf_r+0x4c>
 8009780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009782:	f7ff fd44 	bl	800920e <__retarget_lock_release_recursive>
 8009786:	e7e9      	b.n	800975c <_vfiprintf_r+0x4c>
 8009788:	2300      	movs	r3, #0
 800978a:	9309      	str	r3, [sp, #36]	; 0x24
 800978c:	2320      	movs	r3, #32
 800978e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009792:	f8cd 800c 	str.w	r8, [sp, #12]
 8009796:	2330      	movs	r3, #48	; 0x30
 8009798:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800995c <_vfiprintf_r+0x24c>
 800979c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097a0:	f04f 0901 	mov.w	r9, #1
 80097a4:	4623      	mov	r3, r4
 80097a6:	469a      	mov	sl, r3
 80097a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097ac:	b10a      	cbz	r2, 80097b2 <_vfiprintf_r+0xa2>
 80097ae:	2a25      	cmp	r2, #37	; 0x25
 80097b0:	d1f9      	bne.n	80097a6 <_vfiprintf_r+0x96>
 80097b2:	ebba 0b04 	subs.w	fp, sl, r4
 80097b6:	d00b      	beq.n	80097d0 <_vfiprintf_r+0xc0>
 80097b8:	465b      	mov	r3, fp
 80097ba:	4622      	mov	r2, r4
 80097bc:	4629      	mov	r1, r5
 80097be:	4630      	mov	r0, r6
 80097c0:	f7ff ff93 	bl	80096ea <__sfputs_r>
 80097c4:	3001      	adds	r0, #1
 80097c6:	f000 80aa 	beq.w	800991e <_vfiprintf_r+0x20e>
 80097ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097cc:	445a      	add	r2, fp
 80097ce:	9209      	str	r2, [sp, #36]	; 0x24
 80097d0:	f89a 3000 	ldrb.w	r3, [sl]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f000 80a2 	beq.w	800991e <_vfiprintf_r+0x20e>
 80097da:	2300      	movs	r3, #0
 80097dc:	f04f 32ff 	mov.w	r2, #4294967295
 80097e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097e4:	f10a 0a01 	add.w	sl, sl, #1
 80097e8:	9304      	str	r3, [sp, #16]
 80097ea:	9307      	str	r3, [sp, #28]
 80097ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097f0:	931a      	str	r3, [sp, #104]	; 0x68
 80097f2:	4654      	mov	r4, sl
 80097f4:	2205      	movs	r2, #5
 80097f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097fa:	4858      	ldr	r0, [pc, #352]	; (800995c <_vfiprintf_r+0x24c>)
 80097fc:	f7f6 fd00 	bl	8000200 <memchr>
 8009800:	9a04      	ldr	r2, [sp, #16]
 8009802:	b9d8      	cbnz	r0, 800983c <_vfiprintf_r+0x12c>
 8009804:	06d1      	lsls	r1, r2, #27
 8009806:	bf44      	itt	mi
 8009808:	2320      	movmi	r3, #32
 800980a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800980e:	0713      	lsls	r3, r2, #28
 8009810:	bf44      	itt	mi
 8009812:	232b      	movmi	r3, #43	; 0x2b
 8009814:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009818:	f89a 3000 	ldrb.w	r3, [sl]
 800981c:	2b2a      	cmp	r3, #42	; 0x2a
 800981e:	d015      	beq.n	800984c <_vfiprintf_r+0x13c>
 8009820:	9a07      	ldr	r2, [sp, #28]
 8009822:	4654      	mov	r4, sl
 8009824:	2000      	movs	r0, #0
 8009826:	f04f 0c0a 	mov.w	ip, #10
 800982a:	4621      	mov	r1, r4
 800982c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009830:	3b30      	subs	r3, #48	; 0x30
 8009832:	2b09      	cmp	r3, #9
 8009834:	d94e      	bls.n	80098d4 <_vfiprintf_r+0x1c4>
 8009836:	b1b0      	cbz	r0, 8009866 <_vfiprintf_r+0x156>
 8009838:	9207      	str	r2, [sp, #28]
 800983a:	e014      	b.n	8009866 <_vfiprintf_r+0x156>
 800983c:	eba0 0308 	sub.w	r3, r0, r8
 8009840:	fa09 f303 	lsl.w	r3, r9, r3
 8009844:	4313      	orrs	r3, r2
 8009846:	9304      	str	r3, [sp, #16]
 8009848:	46a2      	mov	sl, r4
 800984a:	e7d2      	b.n	80097f2 <_vfiprintf_r+0xe2>
 800984c:	9b03      	ldr	r3, [sp, #12]
 800984e:	1d19      	adds	r1, r3, #4
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	9103      	str	r1, [sp, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	bfbb      	ittet	lt
 8009858:	425b      	neglt	r3, r3
 800985a:	f042 0202 	orrlt.w	r2, r2, #2
 800985e:	9307      	strge	r3, [sp, #28]
 8009860:	9307      	strlt	r3, [sp, #28]
 8009862:	bfb8      	it	lt
 8009864:	9204      	strlt	r2, [sp, #16]
 8009866:	7823      	ldrb	r3, [r4, #0]
 8009868:	2b2e      	cmp	r3, #46	; 0x2e
 800986a:	d10c      	bne.n	8009886 <_vfiprintf_r+0x176>
 800986c:	7863      	ldrb	r3, [r4, #1]
 800986e:	2b2a      	cmp	r3, #42	; 0x2a
 8009870:	d135      	bne.n	80098de <_vfiprintf_r+0x1ce>
 8009872:	9b03      	ldr	r3, [sp, #12]
 8009874:	1d1a      	adds	r2, r3, #4
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	9203      	str	r2, [sp, #12]
 800987a:	2b00      	cmp	r3, #0
 800987c:	bfb8      	it	lt
 800987e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009882:	3402      	adds	r4, #2
 8009884:	9305      	str	r3, [sp, #20]
 8009886:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800996c <_vfiprintf_r+0x25c>
 800988a:	7821      	ldrb	r1, [r4, #0]
 800988c:	2203      	movs	r2, #3
 800988e:	4650      	mov	r0, sl
 8009890:	f7f6 fcb6 	bl	8000200 <memchr>
 8009894:	b140      	cbz	r0, 80098a8 <_vfiprintf_r+0x198>
 8009896:	2340      	movs	r3, #64	; 0x40
 8009898:	eba0 000a 	sub.w	r0, r0, sl
 800989c:	fa03 f000 	lsl.w	r0, r3, r0
 80098a0:	9b04      	ldr	r3, [sp, #16]
 80098a2:	4303      	orrs	r3, r0
 80098a4:	3401      	adds	r4, #1
 80098a6:	9304      	str	r3, [sp, #16]
 80098a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ac:	482c      	ldr	r0, [pc, #176]	; (8009960 <_vfiprintf_r+0x250>)
 80098ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098b2:	2206      	movs	r2, #6
 80098b4:	f7f6 fca4 	bl	8000200 <memchr>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	d03f      	beq.n	800993c <_vfiprintf_r+0x22c>
 80098bc:	4b29      	ldr	r3, [pc, #164]	; (8009964 <_vfiprintf_r+0x254>)
 80098be:	bb1b      	cbnz	r3, 8009908 <_vfiprintf_r+0x1f8>
 80098c0:	9b03      	ldr	r3, [sp, #12]
 80098c2:	3307      	adds	r3, #7
 80098c4:	f023 0307 	bic.w	r3, r3, #7
 80098c8:	3308      	adds	r3, #8
 80098ca:	9303      	str	r3, [sp, #12]
 80098cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ce:	443b      	add	r3, r7
 80098d0:	9309      	str	r3, [sp, #36]	; 0x24
 80098d2:	e767      	b.n	80097a4 <_vfiprintf_r+0x94>
 80098d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80098d8:	460c      	mov	r4, r1
 80098da:	2001      	movs	r0, #1
 80098dc:	e7a5      	b.n	800982a <_vfiprintf_r+0x11a>
 80098de:	2300      	movs	r3, #0
 80098e0:	3401      	adds	r4, #1
 80098e2:	9305      	str	r3, [sp, #20]
 80098e4:	4619      	mov	r1, r3
 80098e6:	f04f 0c0a 	mov.w	ip, #10
 80098ea:	4620      	mov	r0, r4
 80098ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098f0:	3a30      	subs	r2, #48	; 0x30
 80098f2:	2a09      	cmp	r2, #9
 80098f4:	d903      	bls.n	80098fe <_vfiprintf_r+0x1ee>
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d0c5      	beq.n	8009886 <_vfiprintf_r+0x176>
 80098fa:	9105      	str	r1, [sp, #20]
 80098fc:	e7c3      	b.n	8009886 <_vfiprintf_r+0x176>
 80098fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009902:	4604      	mov	r4, r0
 8009904:	2301      	movs	r3, #1
 8009906:	e7f0      	b.n	80098ea <_vfiprintf_r+0x1da>
 8009908:	ab03      	add	r3, sp, #12
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	462a      	mov	r2, r5
 800990e:	4b16      	ldr	r3, [pc, #88]	; (8009968 <_vfiprintf_r+0x258>)
 8009910:	a904      	add	r1, sp, #16
 8009912:	4630      	mov	r0, r6
 8009914:	f3af 8000 	nop.w
 8009918:	4607      	mov	r7, r0
 800991a:	1c78      	adds	r0, r7, #1
 800991c:	d1d6      	bne.n	80098cc <_vfiprintf_r+0x1bc>
 800991e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009920:	07d9      	lsls	r1, r3, #31
 8009922:	d405      	bmi.n	8009930 <_vfiprintf_r+0x220>
 8009924:	89ab      	ldrh	r3, [r5, #12]
 8009926:	059a      	lsls	r2, r3, #22
 8009928:	d402      	bmi.n	8009930 <_vfiprintf_r+0x220>
 800992a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800992c:	f7ff fc6f 	bl	800920e <__retarget_lock_release_recursive>
 8009930:	89ab      	ldrh	r3, [r5, #12]
 8009932:	065b      	lsls	r3, r3, #25
 8009934:	f53f af12 	bmi.w	800975c <_vfiprintf_r+0x4c>
 8009938:	9809      	ldr	r0, [sp, #36]	; 0x24
 800993a:	e711      	b.n	8009760 <_vfiprintf_r+0x50>
 800993c:	ab03      	add	r3, sp, #12
 800993e:	9300      	str	r3, [sp, #0]
 8009940:	462a      	mov	r2, r5
 8009942:	4b09      	ldr	r3, [pc, #36]	; (8009968 <_vfiprintf_r+0x258>)
 8009944:	a904      	add	r1, sp, #16
 8009946:	4630      	mov	r0, r6
 8009948:	f000 f880 	bl	8009a4c <_printf_i>
 800994c:	e7e4      	b.n	8009918 <_vfiprintf_r+0x208>
 800994e:	bf00      	nop
 8009950:	0800a4e8 	.word	0x0800a4e8
 8009954:	0800a508 	.word	0x0800a508
 8009958:	0800a4c8 	.word	0x0800a4c8
 800995c:	0800a52c 	.word	0x0800a52c
 8009960:	0800a532 	.word	0x0800a532
 8009964:	00000000 	.word	0x00000000
 8009968:	080096eb 	.word	0x080096eb
 800996c:	0800a528 	.word	0x0800a528

08009970 <_printf_common>:
 8009970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009974:	4616      	mov	r6, r2
 8009976:	4699      	mov	r9, r3
 8009978:	688a      	ldr	r2, [r1, #8]
 800997a:	690b      	ldr	r3, [r1, #16]
 800997c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009980:	4293      	cmp	r3, r2
 8009982:	bfb8      	it	lt
 8009984:	4613      	movlt	r3, r2
 8009986:	6033      	str	r3, [r6, #0]
 8009988:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800998c:	4607      	mov	r7, r0
 800998e:	460c      	mov	r4, r1
 8009990:	b10a      	cbz	r2, 8009996 <_printf_common+0x26>
 8009992:	3301      	adds	r3, #1
 8009994:	6033      	str	r3, [r6, #0]
 8009996:	6823      	ldr	r3, [r4, #0]
 8009998:	0699      	lsls	r1, r3, #26
 800999a:	bf42      	ittt	mi
 800999c:	6833      	ldrmi	r3, [r6, #0]
 800999e:	3302      	addmi	r3, #2
 80099a0:	6033      	strmi	r3, [r6, #0]
 80099a2:	6825      	ldr	r5, [r4, #0]
 80099a4:	f015 0506 	ands.w	r5, r5, #6
 80099a8:	d106      	bne.n	80099b8 <_printf_common+0x48>
 80099aa:	f104 0a19 	add.w	sl, r4, #25
 80099ae:	68e3      	ldr	r3, [r4, #12]
 80099b0:	6832      	ldr	r2, [r6, #0]
 80099b2:	1a9b      	subs	r3, r3, r2
 80099b4:	42ab      	cmp	r3, r5
 80099b6:	dc26      	bgt.n	8009a06 <_printf_common+0x96>
 80099b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099bc:	1e13      	subs	r3, r2, #0
 80099be:	6822      	ldr	r2, [r4, #0]
 80099c0:	bf18      	it	ne
 80099c2:	2301      	movne	r3, #1
 80099c4:	0692      	lsls	r2, r2, #26
 80099c6:	d42b      	bmi.n	8009a20 <_printf_common+0xb0>
 80099c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099cc:	4649      	mov	r1, r9
 80099ce:	4638      	mov	r0, r7
 80099d0:	47c0      	blx	r8
 80099d2:	3001      	adds	r0, #1
 80099d4:	d01e      	beq.n	8009a14 <_printf_common+0xa4>
 80099d6:	6823      	ldr	r3, [r4, #0]
 80099d8:	68e5      	ldr	r5, [r4, #12]
 80099da:	6832      	ldr	r2, [r6, #0]
 80099dc:	f003 0306 	and.w	r3, r3, #6
 80099e0:	2b04      	cmp	r3, #4
 80099e2:	bf08      	it	eq
 80099e4:	1aad      	subeq	r5, r5, r2
 80099e6:	68a3      	ldr	r3, [r4, #8]
 80099e8:	6922      	ldr	r2, [r4, #16]
 80099ea:	bf0c      	ite	eq
 80099ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099f0:	2500      	movne	r5, #0
 80099f2:	4293      	cmp	r3, r2
 80099f4:	bfc4      	itt	gt
 80099f6:	1a9b      	subgt	r3, r3, r2
 80099f8:	18ed      	addgt	r5, r5, r3
 80099fa:	2600      	movs	r6, #0
 80099fc:	341a      	adds	r4, #26
 80099fe:	42b5      	cmp	r5, r6
 8009a00:	d11a      	bne.n	8009a38 <_printf_common+0xc8>
 8009a02:	2000      	movs	r0, #0
 8009a04:	e008      	b.n	8009a18 <_printf_common+0xa8>
 8009a06:	2301      	movs	r3, #1
 8009a08:	4652      	mov	r2, sl
 8009a0a:	4649      	mov	r1, r9
 8009a0c:	4638      	mov	r0, r7
 8009a0e:	47c0      	blx	r8
 8009a10:	3001      	adds	r0, #1
 8009a12:	d103      	bne.n	8009a1c <_printf_common+0xac>
 8009a14:	f04f 30ff 	mov.w	r0, #4294967295
 8009a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a1c:	3501      	adds	r5, #1
 8009a1e:	e7c6      	b.n	80099ae <_printf_common+0x3e>
 8009a20:	18e1      	adds	r1, r4, r3
 8009a22:	1c5a      	adds	r2, r3, #1
 8009a24:	2030      	movs	r0, #48	; 0x30
 8009a26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a2a:	4422      	add	r2, r4
 8009a2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a34:	3302      	adds	r3, #2
 8009a36:	e7c7      	b.n	80099c8 <_printf_common+0x58>
 8009a38:	2301      	movs	r3, #1
 8009a3a:	4622      	mov	r2, r4
 8009a3c:	4649      	mov	r1, r9
 8009a3e:	4638      	mov	r0, r7
 8009a40:	47c0      	blx	r8
 8009a42:	3001      	adds	r0, #1
 8009a44:	d0e6      	beq.n	8009a14 <_printf_common+0xa4>
 8009a46:	3601      	adds	r6, #1
 8009a48:	e7d9      	b.n	80099fe <_printf_common+0x8e>
	...

08009a4c <_printf_i>:
 8009a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a50:	7e0f      	ldrb	r7, [r1, #24]
 8009a52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a54:	2f78      	cmp	r7, #120	; 0x78
 8009a56:	4691      	mov	r9, r2
 8009a58:	4680      	mov	r8, r0
 8009a5a:	460c      	mov	r4, r1
 8009a5c:	469a      	mov	sl, r3
 8009a5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a62:	d807      	bhi.n	8009a74 <_printf_i+0x28>
 8009a64:	2f62      	cmp	r7, #98	; 0x62
 8009a66:	d80a      	bhi.n	8009a7e <_printf_i+0x32>
 8009a68:	2f00      	cmp	r7, #0
 8009a6a:	f000 80d8 	beq.w	8009c1e <_printf_i+0x1d2>
 8009a6e:	2f58      	cmp	r7, #88	; 0x58
 8009a70:	f000 80a3 	beq.w	8009bba <_printf_i+0x16e>
 8009a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a7c:	e03a      	b.n	8009af4 <_printf_i+0xa8>
 8009a7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a82:	2b15      	cmp	r3, #21
 8009a84:	d8f6      	bhi.n	8009a74 <_printf_i+0x28>
 8009a86:	a101      	add	r1, pc, #4	; (adr r1, 8009a8c <_printf_i+0x40>)
 8009a88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a8c:	08009ae5 	.word	0x08009ae5
 8009a90:	08009af9 	.word	0x08009af9
 8009a94:	08009a75 	.word	0x08009a75
 8009a98:	08009a75 	.word	0x08009a75
 8009a9c:	08009a75 	.word	0x08009a75
 8009aa0:	08009a75 	.word	0x08009a75
 8009aa4:	08009af9 	.word	0x08009af9
 8009aa8:	08009a75 	.word	0x08009a75
 8009aac:	08009a75 	.word	0x08009a75
 8009ab0:	08009a75 	.word	0x08009a75
 8009ab4:	08009a75 	.word	0x08009a75
 8009ab8:	08009c05 	.word	0x08009c05
 8009abc:	08009b29 	.word	0x08009b29
 8009ac0:	08009be7 	.word	0x08009be7
 8009ac4:	08009a75 	.word	0x08009a75
 8009ac8:	08009a75 	.word	0x08009a75
 8009acc:	08009c27 	.word	0x08009c27
 8009ad0:	08009a75 	.word	0x08009a75
 8009ad4:	08009b29 	.word	0x08009b29
 8009ad8:	08009a75 	.word	0x08009a75
 8009adc:	08009a75 	.word	0x08009a75
 8009ae0:	08009bef 	.word	0x08009bef
 8009ae4:	682b      	ldr	r3, [r5, #0]
 8009ae6:	1d1a      	adds	r2, r3, #4
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	602a      	str	r2, [r5, #0]
 8009aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009af0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009af4:	2301      	movs	r3, #1
 8009af6:	e0a3      	b.n	8009c40 <_printf_i+0x1f4>
 8009af8:	6820      	ldr	r0, [r4, #0]
 8009afa:	6829      	ldr	r1, [r5, #0]
 8009afc:	0606      	lsls	r6, r0, #24
 8009afe:	f101 0304 	add.w	r3, r1, #4
 8009b02:	d50a      	bpl.n	8009b1a <_printf_i+0xce>
 8009b04:	680e      	ldr	r6, [r1, #0]
 8009b06:	602b      	str	r3, [r5, #0]
 8009b08:	2e00      	cmp	r6, #0
 8009b0a:	da03      	bge.n	8009b14 <_printf_i+0xc8>
 8009b0c:	232d      	movs	r3, #45	; 0x2d
 8009b0e:	4276      	negs	r6, r6
 8009b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b14:	485e      	ldr	r0, [pc, #376]	; (8009c90 <_printf_i+0x244>)
 8009b16:	230a      	movs	r3, #10
 8009b18:	e019      	b.n	8009b4e <_printf_i+0x102>
 8009b1a:	680e      	ldr	r6, [r1, #0]
 8009b1c:	602b      	str	r3, [r5, #0]
 8009b1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b22:	bf18      	it	ne
 8009b24:	b236      	sxthne	r6, r6
 8009b26:	e7ef      	b.n	8009b08 <_printf_i+0xbc>
 8009b28:	682b      	ldr	r3, [r5, #0]
 8009b2a:	6820      	ldr	r0, [r4, #0]
 8009b2c:	1d19      	adds	r1, r3, #4
 8009b2e:	6029      	str	r1, [r5, #0]
 8009b30:	0601      	lsls	r1, r0, #24
 8009b32:	d501      	bpl.n	8009b38 <_printf_i+0xec>
 8009b34:	681e      	ldr	r6, [r3, #0]
 8009b36:	e002      	b.n	8009b3e <_printf_i+0xf2>
 8009b38:	0646      	lsls	r6, r0, #25
 8009b3a:	d5fb      	bpl.n	8009b34 <_printf_i+0xe8>
 8009b3c:	881e      	ldrh	r6, [r3, #0]
 8009b3e:	4854      	ldr	r0, [pc, #336]	; (8009c90 <_printf_i+0x244>)
 8009b40:	2f6f      	cmp	r7, #111	; 0x6f
 8009b42:	bf0c      	ite	eq
 8009b44:	2308      	moveq	r3, #8
 8009b46:	230a      	movne	r3, #10
 8009b48:	2100      	movs	r1, #0
 8009b4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b4e:	6865      	ldr	r5, [r4, #4]
 8009b50:	60a5      	str	r5, [r4, #8]
 8009b52:	2d00      	cmp	r5, #0
 8009b54:	bfa2      	ittt	ge
 8009b56:	6821      	ldrge	r1, [r4, #0]
 8009b58:	f021 0104 	bicge.w	r1, r1, #4
 8009b5c:	6021      	strge	r1, [r4, #0]
 8009b5e:	b90e      	cbnz	r6, 8009b64 <_printf_i+0x118>
 8009b60:	2d00      	cmp	r5, #0
 8009b62:	d04d      	beq.n	8009c00 <_printf_i+0x1b4>
 8009b64:	4615      	mov	r5, r2
 8009b66:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b6a:	fb03 6711 	mls	r7, r3, r1, r6
 8009b6e:	5dc7      	ldrb	r7, [r0, r7]
 8009b70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b74:	4637      	mov	r7, r6
 8009b76:	42bb      	cmp	r3, r7
 8009b78:	460e      	mov	r6, r1
 8009b7a:	d9f4      	bls.n	8009b66 <_printf_i+0x11a>
 8009b7c:	2b08      	cmp	r3, #8
 8009b7e:	d10b      	bne.n	8009b98 <_printf_i+0x14c>
 8009b80:	6823      	ldr	r3, [r4, #0]
 8009b82:	07de      	lsls	r6, r3, #31
 8009b84:	d508      	bpl.n	8009b98 <_printf_i+0x14c>
 8009b86:	6923      	ldr	r3, [r4, #16]
 8009b88:	6861      	ldr	r1, [r4, #4]
 8009b8a:	4299      	cmp	r1, r3
 8009b8c:	bfde      	ittt	le
 8009b8e:	2330      	movle	r3, #48	; 0x30
 8009b90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b98:	1b52      	subs	r2, r2, r5
 8009b9a:	6122      	str	r2, [r4, #16]
 8009b9c:	f8cd a000 	str.w	sl, [sp]
 8009ba0:	464b      	mov	r3, r9
 8009ba2:	aa03      	add	r2, sp, #12
 8009ba4:	4621      	mov	r1, r4
 8009ba6:	4640      	mov	r0, r8
 8009ba8:	f7ff fee2 	bl	8009970 <_printf_common>
 8009bac:	3001      	adds	r0, #1
 8009bae:	d14c      	bne.n	8009c4a <_printf_i+0x1fe>
 8009bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb4:	b004      	add	sp, #16
 8009bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bba:	4835      	ldr	r0, [pc, #212]	; (8009c90 <_printf_i+0x244>)
 8009bbc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009bc0:	6829      	ldr	r1, [r5, #0]
 8009bc2:	6823      	ldr	r3, [r4, #0]
 8009bc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8009bc8:	6029      	str	r1, [r5, #0]
 8009bca:	061d      	lsls	r5, r3, #24
 8009bcc:	d514      	bpl.n	8009bf8 <_printf_i+0x1ac>
 8009bce:	07df      	lsls	r7, r3, #31
 8009bd0:	bf44      	itt	mi
 8009bd2:	f043 0320 	orrmi.w	r3, r3, #32
 8009bd6:	6023      	strmi	r3, [r4, #0]
 8009bd8:	b91e      	cbnz	r6, 8009be2 <_printf_i+0x196>
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	f023 0320 	bic.w	r3, r3, #32
 8009be0:	6023      	str	r3, [r4, #0]
 8009be2:	2310      	movs	r3, #16
 8009be4:	e7b0      	b.n	8009b48 <_printf_i+0xfc>
 8009be6:	6823      	ldr	r3, [r4, #0]
 8009be8:	f043 0320 	orr.w	r3, r3, #32
 8009bec:	6023      	str	r3, [r4, #0]
 8009bee:	2378      	movs	r3, #120	; 0x78
 8009bf0:	4828      	ldr	r0, [pc, #160]	; (8009c94 <_printf_i+0x248>)
 8009bf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009bf6:	e7e3      	b.n	8009bc0 <_printf_i+0x174>
 8009bf8:	0659      	lsls	r1, r3, #25
 8009bfa:	bf48      	it	mi
 8009bfc:	b2b6      	uxthmi	r6, r6
 8009bfe:	e7e6      	b.n	8009bce <_printf_i+0x182>
 8009c00:	4615      	mov	r5, r2
 8009c02:	e7bb      	b.n	8009b7c <_printf_i+0x130>
 8009c04:	682b      	ldr	r3, [r5, #0]
 8009c06:	6826      	ldr	r6, [r4, #0]
 8009c08:	6961      	ldr	r1, [r4, #20]
 8009c0a:	1d18      	adds	r0, r3, #4
 8009c0c:	6028      	str	r0, [r5, #0]
 8009c0e:	0635      	lsls	r5, r6, #24
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	d501      	bpl.n	8009c18 <_printf_i+0x1cc>
 8009c14:	6019      	str	r1, [r3, #0]
 8009c16:	e002      	b.n	8009c1e <_printf_i+0x1d2>
 8009c18:	0670      	lsls	r0, r6, #25
 8009c1a:	d5fb      	bpl.n	8009c14 <_printf_i+0x1c8>
 8009c1c:	8019      	strh	r1, [r3, #0]
 8009c1e:	2300      	movs	r3, #0
 8009c20:	6123      	str	r3, [r4, #16]
 8009c22:	4615      	mov	r5, r2
 8009c24:	e7ba      	b.n	8009b9c <_printf_i+0x150>
 8009c26:	682b      	ldr	r3, [r5, #0]
 8009c28:	1d1a      	adds	r2, r3, #4
 8009c2a:	602a      	str	r2, [r5, #0]
 8009c2c:	681d      	ldr	r5, [r3, #0]
 8009c2e:	6862      	ldr	r2, [r4, #4]
 8009c30:	2100      	movs	r1, #0
 8009c32:	4628      	mov	r0, r5
 8009c34:	f7f6 fae4 	bl	8000200 <memchr>
 8009c38:	b108      	cbz	r0, 8009c3e <_printf_i+0x1f2>
 8009c3a:	1b40      	subs	r0, r0, r5
 8009c3c:	6060      	str	r0, [r4, #4]
 8009c3e:	6863      	ldr	r3, [r4, #4]
 8009c40:	6123      	str	r3, [r4, #16]
 8009c42:	2300      	movs	r3, #0
 8009c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c48:	e7a8      	b.n	8009b9c <_printf_i+0x150>
 8009c4a:	6923      	ldr	r3, [r4, #16]
 8009c4c:	462a      	mov	r2, r5
 8009c4e:	4649      	mov	r1, r9
 8009c50:	4640      	mov	r0, r8
 8009c52:	47d0      	blx	sl
 8009c54:	3001      	adds	r0, #1
 8009c56:	d0ab      	beq.n	8009bb0 <_printf_i+0x164>
 8009c58:	6823      	ldr	r3, [r4, #0]
 8009c5a:	079b      	lsls	r3, r3, #30
 8009c5c:	d413      	bmi.n	8009c86 <_printf_i+0x23a>
 8009c5e:	68e0      	ldr	r0, [r4, #12]
 8009c60:	9b03      	ldr	r3, [sp, #12]
 8009c62:	4298      	cmp	r0, r3
 8009c64:	bfb8      	it	lt
 8009c66:	4618      	movlt	r0, r3
 8009c68:	e7a4      	b.n	8009bb4 <_printf_i+0x168>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	4632      	mov	r2, r6
 8009c6e:	4649      	mov	r1, r9
 8009c70:	4640      	mov	r0, r8
 8009c72:	47d0      	blx	sl
 8009c74:	3001      	adds	r0, #1
 8009c76:	d09b      	beq.n	8009bb0 <_printf_i+0x164>
 8009c78:	3501      	adds	r5, #1
 8009c7a:	68e3      	ldr	r3, [r4, #12]
 8009c7c:	9903      	ldr	r1, [sp, #12]
 8009c7e:	1a5b      	subs	r3, r3, r1
 8009c80:	42ab      	cmp	r3, r5
 8009c82:	dcf2      	bgt.n	8009c6a <_printf_i+0x21e>
 8009c84:	e7eb      	b.n	8009c5e <_printf_i+0x212>
 8009c86:	2500      	movs	r5, #0
 8009c88:	f104 0619 	add.w	r6, r4, #25
 8009c8c:	e7f5      	b.n	8009c7a <_printf_i+0x22e>
 8009c8e:	bf00      	nop
 8009c90:	0800a539 	.word	0x0800a539
 8009c94:	0800a54a 	.word	0x0800a54a

08009c98 <_scanf_chars>:
 8009c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c9c:	4615      	mov	r5, r2
 8009c9e:	688a      	ldr	r2, [r1, #8]
 8009ca0:	4680      	mov	r8, r0
 8009ca2:	460c      	mov	r4, r1
 8009ca4:	b932      	cbnz	r2, 8009cb4 <_scanf_chars+0x1c>
 8009ca6:	698a      	ldr	r2, [r1, #24]
 8009ca8:	2a00      	cmp	r2, #0
 8009caa:	bf0c      	ite	eq
 8009cac:	2201      	moveq	r2, #1
 8009cae:	f04f 32ff 	movne.w	r2, #4294967295
 8009cb2:	608a      	str	r2, [r1, #8]
 8009cb4:	6822      	ldr	r2, [r4, #0]
 8009cb6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009d48 <_scanf_chars+0xb0>
 8009cba:	06d1      	lsls	r1, r2, #27
 8009cbc:	bf5f      	itttt	pl
 8009cbe:	681a      	ldrpl	r2, [r3, #0]
 8009cc0:	1d11      	addpl	r1, r2, #4
 8009cc2:	6019      	strpl	r1, [r3, #0]
 8009cc4:	6816      	ldrpl	r6, [r2, #0]
 8009cc6:	2700      	movs	r7, #0
 8009cc8:	69a0      	ldr	r0, [r4, #24]
 8009cca:	b188      	cbz	r0, 8009cf0 <_scanf_chars+0x58>
 8009ccc:	2801      	cmp	r0, #1
 8009cce:	d107      	bne.n	8009ce0 <_scanf_chars+0x48>
 8009cd0:	682a      	ldr	r2, [r5, #0]
 8009cd2:	7811      	ldrb	r1, [r2, #0]
 8009cd4:	6962      	ldr	r2, [r4, #20]
 8009cd6:	5c52      	ldrb	r2, [r2, r1]
 8009cd8:	b952      	cbnz	r2, 8009cf0 <_scanf_chars+0x58>
 8009cda:	2f00      	cmp	r7, #0
 8009cdc:	d031      	beq.n	8009d42 <_scanf_chars+0xaa>
 8009cde:	e022      	b.n	8009d26 <_scanf_chars+0x8e>
 8009ce0:	2802      	cmp	r0, #2
 8009ce2:	d120      	bne.n	8009d26 <_scanf_chars+0x8e>
 8009ce4:	682b      	ldr	r3, [r5, #0]
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009cec:	071b      	lsls	r3, r3, #28
 8009cee:	d41a      	bmi.n	8009d26 <_scanf_chars+0x8e>
 8009cf0:	6823      	ldr	r3, [r4, #0]
 8009cf2:	06da      	lsls	r2, r3, #27
 8009cf4:	bf5e      	ittt	pl
 8009cf6:	682b      	ldrpl	r3, [r5, #0]
 8009cf8:	781b      	ldrbpl	r3, [r3, #0]
 8009cfa:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009cfe:	682a      	ldr	r2, [r5, #0]
 8009d00:	686b      	ldr	r3, [r5, #4]
 8009d02:	3201      	adds	r2, #1
 8009d04:	602a      	str	r2, [r5, #0]
 8009d06:	68a2      	ldr	r2, [r4, #8]
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	3a01      	subs	r2, #1
 8009d0c:	606b      	str	r3, [r5, #4]
 8009d0e:	3701      	adds	r7, #1
 8009d10:	60a2      	str	r2, [r4, #8]
 8009d12:	b142      	cbz	r2, 8009d26 <_scanf_chars+0x8e>
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	dcd7      	bgt.n	8009cc8 <_scanf_chars+0x30>
 8009d18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	4640      	mov	r0, r8
 8009d20:	4798      	blx	r3
 8009d22:	2800      	cmp	r0, #0
 8009d24:	d0d0      	beq.n	8009cc8 <_scanf_chars+0x30>
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	f013 0310 	ands.w	r3, r3, #16
 8009d2c:	d105      	bne.n	8009d3a <_scanf_chars+0xa2>
 8009d2e:	68e2      	ldr	r2, [r4, #12]
 8009d30:	3201      	adds	r2, #1
 8009d32:	60e2      	str	r2, [r4, #12]
 8009d34:	69a2      	ldr	r2, [r4, #24]
 8009d36:	b102      	cbz	r2, 8009d3a <_scanf_chars+0xa2>
 8009d38:	7033      	strb	r3, [r6, #0]
 8009d3a:	6923      	ldr	r3, [r4, #16]
 8009d3c:	443b      	add	r3, r7
 8009d3e:	6123      	str	r3, [r4, #16]
 8009d40:	2000      	movs	r0, #0
 8009d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d46:	bf00      	nop
 8009d48:	0800a577 	.word	0x0800a577

08009d4c <_scanf_i>:
 8009d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d50:	4698      	mov	r8, r3
 8009d52:	4b76      	ldr	r3, [pc, #472]	; (8009f2c <_scanf_i+0x1e0>)
 8009d54:	460c      	mov	r4, r1
 8009d56:	4682      	mov	sl, r0
 8009d58:	4616      	mov	r6, r2
 8009d5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009d5e:	b087      	sub	sp, #28
 8009d60:	ab03      	add	r3, sp, #12
 8009d62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009d66:	4b72      	ldr	r3, [pc, #456]	; (8009f30 <_scanf_i+0x1e4>)
 8009d68:	69a1      	ldr	r1, [r4, #24]
 8009d6a:	4a72      	ldr	r2, [pc, #456]	; (8009f34 <_scanf_i+0x1e8>)
 8009d6c:	2903      	cmp	r1, #3
 8009d6e:	bf18      	it	ne
 8009d70:	461a      	movne	r2, r3
 8009d72:	68a3      	ldr	r3, [r4, #8]
 8009d74:	9201      	str	r2, [sp, #4]
 8009d76:	1e5a      	subs	r2, r3, #1
 8009d78:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009d7c:	bf88      	it	hi
 8009d7e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009d82:	4627      	mov	r7, r4
 8009d84:	bf82      	ittt	hi
 8009d86:	eb03 0905 	addhi.w	r9, r3, r5
 8009d8a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009d8e:	60a3      	strhi	r3, [r4, #8]
 8009d90:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009d94:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009d98:	bf98      	it	ls
 8009d9a:	f04f 0900 	movls.w	r9, #0
 8009d9e:	6023      	str	r3, [r4, #0]
 8009da0:	463d      	mov	r5, r7
 8009da2:	f04f 0b00 	mov.w	fp, #0
 8009da6:	6831      	ldr	r1, [r6, #0]
 8009da8:	ab03      	add	r3, sp, #12
 8009daa:	7809      	ldrb	r1, [r1, #0]
 8009dac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009db0:	2202      	movs	r2, #2
 8009db2:	f7f6 fa25 	bl	8000200 <memchr>
 8009db6:	b328      	cbz	r0, 8009e04 <_scanf_i+0xb8>
 8009db8:	f1bb 0f01 	cmp.w	fp, #1
 8009dbc:	d159      	bne.n	8009e72 <_scanf_i+0x126>
 8009dbe:	6862      	ldr	r2, [r4, #4]
 8009dc0:	b92a      	cbnz	r2, 8009dce <_scanf_i+0x82>
 8009dc2:	6822      	ldr	r2, [r4, #0]
 8009dc4:	2308      	movs	r3, #8
 8009dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dca:	6063      	str	r3, [r4, #4]
 8009dcc:	6022      	str	r2, [r4, #0]
 8009dce:	6822      	ldr	r2, [r4, #0]
 8009dd0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009dd4:	6022      	str	r2, [r4, #0]
 8009dd6:	68a2      	ldr	r2, [r4, #8]
 8009dd8:	1e51      	subs	r1, r2, #1
 8009dda:	60a1      	str	r1, [r4, #8]
 8009ddc:	b192      	cbz	r2, 8009e04 <_scanf_i+0xb8>
 8009dde:	6832      	ldr	r2, [r6, #0]
 8009de0:	1c51      	adds	r1, r2, #1
 8009de2:	6031      	str	r1, [r6, #0]
 8009de4:	7812      	ldrb	r2, [r2, #0]
 8009de6:	f805 2b01 	strb.w	r2, [r5], #1
 8009dea:	6872      	ldr	r2, [r6, #4]
 8009dec:	3a01      	subs	r2, #1
 8009dee:	2a00      	cmp	r2, #0
 8009df0:	6072      	str	r2, [r6, #4]
 8009df2:	dc07      	bgt.n	8009e04 <_scanf_i+0xb8>
 8009df4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009df8:	4631      	mov	r1, r6
 8009dfa:	4650      	mov	r0, sl
 8009dfc:	4790      	blx	r2
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	f040 8085 	bne.w	8009f0e <_scanf_i+0x1c2>
 8009e04:	f10b 0b01 	add.w	fp, fp, #1
 8009e08:	f1bb 0f03 	cmp.w	fp, #3
 8009e0c:	d1cb      	bne.n	8009da6 <_scanf_i+0x5a>
 8009e0e:	6863      	ldr	r3, [r4, #4]
 8009e10:	b90b      	cbnz	r3, 8009e16 <_scanf_i+0xca>
 8009e12:	230a      	movs	r3, #10
 8009e14:	6063      	str	r3, [r4, #4]
 8009e16:	6863      	ldr	r3, [r4, #4]
 8009e18:	4947      	ldr	r1, [pc, #284]	; (8009f38 <_scanf_i+0x1ec>)
 8009e1a:	6960      	ldr	r0, [r4, #20]
 8009e1c:	1ac9      	subs	r1, r1, r3
 8009e1e:	f000 f89f 	bl	8009f60 <__sccl>
 8009e22:	f04f 0b00 	mov.w	fp, #0
 8009e26:	68a3      	ldr	r3, [r4, #8]
 8009e28:	6822      	ldr	r2, [r4, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d03d      	beq.n	8009eaa <_scanf_i+0x15e>
 8009e2e:	6831      	ldr	r1, [r6, #0]
 8009e30:	6960      	ldr	r0, [r4, #20]
 8009e32:	f891 c000 	ldrb.w	ip, [r1]
 8009e36:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d035      	beq.n	8009eaa <_scanf_i+0x15e>
 8009e3e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009e42:	d124      	bne.n	8009e8e <_scanf_i+0x142>
 8009e44:	0510      	lsls	r0, r2, #20
 8009e46:	d522      	bpl.n	8009e8e <_scanf_i+0x142>
 8009e48:	f10b 0b01 	add.w	fp, fp, #1
 8009e4c:	f1b9 0f00 	cmp.w	r9, #0
 8009e50:	d003      	beq.n	8009e5a <_scanf_i+0x10e>
 8009e52:	3301      	adds	r3, #1
 8009e54:	f109 39ff 	add.w	r9, r9, #4294967295
 8009e58:	60a3      	str	r3, [r4, #8]
 8009e5a:	6873      	ldr	r3, [r6, #4]
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	6073      	str	r3, [r6, #4]
 8009e62:	dd1b      	ble.n	8009e9c <_scanf_i+0x150>
 8009e64:	6833      	ldr	r3, [r6, #0]
 8009e66:	3301      	adds	r3, #1
 8009e68:	6033      	str	r3, [r6, #0]
 8009e6a:	68a3      	ldr	r3, [r4, #8]
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	60a3      	str	r3, [r4, #8]
 8009e70:	e7d9      	b.n	8009e26 <_scanf_i+0xda>
 8009e72:	f1bb 0f02 	cmp.w	fp, #2
 8009e76:	d1ae      	bne.n	8009dd6 <_scanf_i+0x8a>
 8009e78:	6822      	ldr	r2, [r4, #0]
 8009e7a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009e7e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009e82:	d1bf      	bne.n	8009e04 <_scanf_i+0xb8>
 8009e84:	2310      	movs	r3, #16
 8009e86:	6063      	str	r3, [r4, #4]
 8009e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e8c:	e7a2      	b.n	8009dd4 <_scanf_i+0x88>
 8009e8e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009e92:	6022      	str	r2, [r4, #0]
 8009e94:	780b      	ldrb	r3, [r1, #0]
 8009e96:	f805 3b01 	strb.w	r3, [r5], #1
 8009e9a:	e7de      	b.n	8009e5a <_scanf_i+0x10e>
 8009e9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009ea0:	4631      	mov	r1, r6
 8009ea2:	4650      	mov	r0, sl
 8009ea4:	4798      	blx	r3
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d0df      	beq.n	8009e6a <_scanf_i+0x11e>
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	05db      	lsls	r3, r3, #23
 8009eae:	d50d      	bpl.n	8009ecc <_scanf_i+0x180>
 8009eb0:	42bd      	cmp	r5, r7
 8009eb2:	d909      	bls.n	8009ec8 <_scanf_i+0x17c>
 8009eb4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009eb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ebc:	4632      	mov	r2, r6
 8009ebe:	4650      	mov	r0, sl
 8009ec0:	4798      	blx	r3
 8009ec2:	f105 39ff 	add.w	r9, r5, #4294967295
 8009ec6:	464d      	mov	r5, r9
 8009ec8:	42bd      	cmp	r5, r7
 8009eca:	d02d      	beq.n	8009f28 <_scanf_i+0x1dc>
 8009ecc:	6822      	ldr	r2, [r4, #0]
 8009ece:	f012 0210 	ands.w	r2, r2, #16
 8009ed2:	d113      	bne.n	8009efc <_scanf_i+0x1b0>
 8009ed4:	702a      	strb	r2, [r5, #0]
 8009ed6:	6863      	ldr	r3, [r4, #4]
 8009ed8:	9e01      	ldr	r6, [sp, #4]
 8009eda:	4639      	mov	r1, r7
 8009edc:	4650      	mov	r0, sl
 8009ede:	47b0      	blx	r6
 8009ee0:	6821      	ldr	r1, [r4, #0]
 8009ee2:	f8d8 3000 	ldr.w	r3, [r8]
 8009ee6:	f011 0f20 	tst.w	r1, #32
 8009eea:	d013      	beq.n	8009f14 <_scanf_i+0x1c8>
 8009eec:	1d1a      	adds	r2, r3, #4
 8009eee:	f8c8 2000 	str.w	r2, [r8]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	6018      	str	r0, [r3, #0]
 8009ef6:	68e3      	ldr	r3, [r4, #12]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	60e3      	str	r3, [r4, #12]
 8009efc:	1bed      	subs	r5, r5, r7
 8009efe:	44ab      	add	fp, r5
 8009f00:	6925      	ldr	r5, [r4, #16]
 8009f02:	445d      	add	r5, fp
 8009f04:	6125      	str	r5, [r4, #16]
 8009f06:	2000      	movs	r0, #0
 8009f08:	b007      	add	sp, #28
 8009f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0e:	f04f 0b00 	mov.w	fp, #0
 8009f12:	e7ca      	b.n	8009eaa <_scanf_i+0x15e>
 8009f14:	1d1a      	adds	r2, r3, #4
 8009f16:	f8c8 2000 	str.w	r2, [r8]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f011 0f01 	tst.w	r1, #1
 8009f20:	bf14      	ite	ne
 8009f22:	8018      	strhne	r0, [r3, #0]
 8009f24:	6018      	streq	r0, [r3, #0]
 8009f26:	e7e6      	b.n	8009ef6 <_scanf_i+0x1aa>
 8009f28:	2001      	movs	r0, #1
 8009f2a:	e7ed      	b.n	8009f08 <_scanf_i+0x1bc>
 8009f2c:	0800a3a0 	.word	0x0800a3a0
 8009f30:	0800a1bd 	.word	0x0800a1bd
 8009f34:	0800a0d5 	.word	0x0800a0d5
 8009f38:	0800a574 	.word	0x0800a574

08009f3c <_read_r>:
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4d07      	ldr	r5, [pc, #28]	; (8009f5c <_read_r+0x20>)
 8009f40:	4604      	mov	r4, r0
 8009f42:	4608      	mov	r0, r1
 8009f44:	4611      	mov	r1, r2
 8009f46:	2200      	movs	r2, #0
 8009f48:	602a      	str	r2, [r5, #0]
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	f7f7 fc6c 	bl	8001828 <_read>
 8009f50:	1c43      	adds	r3, r0, #1
 8009f52:	d102      	bne.n	8009f5a <_read_r+0x1e>
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	b103      	cbz	r3, 8009f5a <_read_r+0x1e>
 8009f58:	6023      	str	r3, [r4, #0]
 8009f5a:	bd38      	pop	{r3, r4, r5, pc}
 8009f5c:	20001c44 	.word	0x20001c44

08009f60 <__sccl>:
 8009f60:	b570      	push	{r4, r5, r6, lr}
 8009f62:	780b      	ldrb	r3, [r1, #0]
 8009f64:	4604      	mov	r4, r0
 8009f66:	2b5e      	cmp	r3, #94	; 0x5e
 8009f68:	bf0b      	itete	eq
 8009f6a:	784b      	ldrbeq	r3, [r1, #1]
 8009f6c:	1c48      	addne	r0, r1, #1
 8009f6e:	1c88      	addeq	r0, r1, #2
 8009f70:	2200      	movne	r2, #0
 8009f72:	bf08      	it	eq
 8009f74:	2201      	moveq	r2, #1
 8009f76:	1e61      	subs	r1, r4, #1
 8009f78:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009f7c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009f80:	42a9      	cmp	r1, r5
 8009f82:	d1fb      	bne.n	8009f7c <__sccl+0x1c>
 8009f84:	b90b      	cbnz	r3, 8009f8a <__sccl+0x2a>
 8009f86:	3801      	subs	r0, #1
 8009f88:	bd70      	pop	{r4, r5, r6, pc}
 8009f8a:	f082 0201 	eor.w	r2, r2, #1
 8009f8e:	54e2      	strb	r2, [r4, r3]
 8009f90:	4605      	mov	r5, r0
 8009f92:	4628      	mov	r0, r5
 8009f94:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009f98:	292d      	cmp	r1, #45	; 0x2d
 8009f9a:	d006      	beq.n	8009faa <__sccl+0x4a>
 8009f9c:	295d      	cmp	r1, #93	; 0x5d
 8009f9e:	d0f3      	beq.n	8009f88 <__sccl+0x28>
 8009fa0:	b909      	cbnz	r1, 8009fa6 <__sccl+0x46>
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	e7f0      	b.n	8009f88 <__sccl+0x28>
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	e7f1      	b.n	8009f8e <__sccl+0x2e>
 8009faa:	786e      	ldrb	r6, [r5, #1]
 8009fac:	2e5d      	cmp	r6, #93	; 0x5d
 8009fae:	d0fa      	beq.n	8009fa6 <__sccl+0x46>
 8009fb0:	42b3      	cmp	r3, r6
 8009fb2:	dcf8      	bgt.n	8009fa6 <__sccl+0x46>
 8009fb4:	3502      	adds	r5, #2
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	3101      	adds	r1, #1
 8009fba:	428e      	cmp	r6, r1
 8009fbc:	5462      	strb	r2, [r4, r1]
 8009fbe:	dcfb      	bgt.n	8009fb8 <__sccl+0x58>
 8009fc0:	1af1      	subs	r1, r6, r3
 8009fc2:	3901      	subs	r1, #1
 8009fc4:	1c58      	adds	r0, r3, #1
 8009fc6:	42b3      	cmp	r3, r6
 8009fc8:	bfa8      	it	ge
 8009fca:	2100      	movge	r1, #0
 8009fcc:	1843      	adds	r3, r0, r1
 8009fce:	e7e0      	b.n	8009f92 <__sccl+0x32>

08009fd0 <_strtol_l.constprop.0>:
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd6:	d001      	beq.n	8009fdc <_strtol_l.constprop.0+0xc>
 8009fd8:	2b24      	cmp	r3, #36	; 0x24
 8009fda:	d906      	bls.n	8009fea <_strtol_l.constprop.0+0x1a>
 8009fdc:	f7fe fbf0 	bl	80087c0 <__errno>
 8009fe0:	2316      	movs	r3, #22
 8009fe2:	6003      	str	r3, [r0, #0]
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a0d0 <_strtol_l.constprop.0+0x100>
 8009fee:	460d      	mov	r5, r1
 8009ff0:	462e      	mov	r6, r5
 8009ff2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ff6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009ffa:	f017 0708 	ands.w	r7, r7, #8
 8009ffe:	d1f7      	bne.n	8009ff0 <_strtol_l.constprop.0+0x20>
 800a000:	2c2d      	cmp	r4, #45	; 0x2d
 800a002:	d132      	bne.n	800a06a <_strtol_l.constprop.0+0x9a>
 800a004:	782c      	ldrb	r4, [r5, #0]
 800a006:	2701      	movs	r7, #1
 800a008:	1cb5      	adds	r5, r6, #2
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d05b      	beq.n	800a0c6 <_strtol_l.constprop.0+0xf6>
 800a00e:	2b10      	cmp	r3, #16
 800a010:	d109      	bne.n	800a026 <_strtol_l.constprop.0+0x56>
 800a012:	2c30      	cmp	r4, #48	; 0x30
 800a014:	d107      	bne.n	800a026 <_strtol_l.constprop.0+0x56>
 800a016:	782c      	ldrb	r4, [r5, #0]
 800a018:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a01c:	2c58      	cmp	r4, #88	; 0x58
 800a01e:	d14d      	bne.n	800a0bc <_strtol_l.constprop.0+0xec>
 800a020:	786c      	ldrb	r4, [r5, #1]
 800a022:	2310      	movs	r3, #16
 800a024:	3502      	adds	r5, #2
 800a026:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a02a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a02e:	f04f 0c00 	mov.w	ip, #0
 800a032:	fbb8 f9f3 	udiv	r9, r8, r3
 800a036:	4666      	mov	r6, ip
 800a038:	fb03 8a19 	mls	sl, r3, r9, r8
 800a03c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a040:	f1be 0f09 	cmp.w	lr, #9
 800a044:	d816      	bhi.n	800a074 <_strtol_l.constprop.0+0xa4>
 800a046:	4674      	mov	r4, lr
 800a048:	42a3      	cmp	r3, r4
 800a04a:	dd24      	ble.n	800a096 <_strtol_l.constprop.0+0xc6>
 800a04c:	f1bc 0f00 	cmp.w	ip, #0
 800a050:	db1e      	blt.n	800a090 <_strtol_l.constprop.0+0xc0>
 800a052:	45b1      	cmp	r9, r6
 800a054:	d31c      	bcc.n	800a090 <_strtol_l.constprop.0+0xc0>
 800a056:	d101      	bne.n	800a05c <_strtol_l.constprop.0+0x8c>
 800a058:	45a2      	cmp	sl, r4
 800a05a:	db19      	blt.n	800a090 <_strtol_l.constprop.0+0xc0>
 800a05c:	fb06 4603 	mla	r6, r6, r3, r4
 800a060:	f04f 0c01 	mov.w	ip, #1
 800a064:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a068:	e7e8      	b.n	800a03c <_strtol_l.constprop.0+0x6c>
 800a06a:	2c2b      	cmp	r4, #43	; 0x2b
 800a06c:	bf04      	itt	eq
 800a06e:	782c      	ldrbeq	r4, [r5, #0]
 800a070:	1cb5      	addeq	r5, r6, #2
 800a072:	e7ca      	b.n	800a00a <_strtol_l.constprop.0+0x3a>
 800a074:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a078:	f1be 0f19 	cmp.w	lr, #25
 800a07c:	d801      	bhi.n	800a082 <_strtol_l.constprop.0+0xb2>
 800a07e:	3c37      	subs	r4, #55	; 0x37
 800a080:	e7e2      	b.n	800a048 <_strtol_l.constprop.0+0x78>
 800a082:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a086:	f1be 0f19 	cmp.w	lr, #25
 800a08a:	d804      	bhi.n	800a096 <_strtol_l.constprop.0+0xc6>
 800a08c:	3c57      	subs	r4, #87	; 0x57
 800a08e:	e7db      	b.n	800a048 <_strtol_l.constprop.0+0x78>
 800a090:	f04f 3cff 	mov.w	ip, #4294967295
 800a094:	e7e6      	b.n	800a064 <_strtol_l.constprop.0+0x94>
 800a096:	f1bc 0f00 	cmp.w	ip, #0
 800a09a:	da05      	bge.n	800a0a8 <_strtol_l.constprop.0+0xd8>
 800a09c:	2322      	movs	r3, #34	; 0x22
 800a09e:	6003      	str	r3, [r0, #0]
 800a0a0:	4646      	mov	r6, r8
 800a0a2:	b942      	cbnz	r2, 800a0b6 <_strtol_l.constprop.0+0xe6>
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	e79e      	b.n	8009fe6 <_strtol_l.constprop.0+0x16>
 800a0a8:	b107      	cbz	r7, 800a0ac <_strtol_l.constprop.0+0xdc>
 800a0aa:	4276      	negs	r6, r6
 800a0ac:	2a00      	cmp	r2, #0
 800a0ae:	d0f9      	beq.n	800a0a4 <_strtol_l.constprop.0+0xd4>
 800a0b0:	f1bc 0f00 	cmp.w	ip, #0
 800a0b4:	d000      	beq.n	800a0b8 <_strtol_l.constprop.0+0xe8>
 800a0b6:	1e69      	subs	r1, r5, #1
 800a0b8:	6011      	str	r1, [r2, #0]
 800a0ba:	e7f3      	b.n	800a0a4 <_strtol_l.constprop.0+0xd4>
 800a0bc:	2430      	movs	r4, #48	; 0x30
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1b1      	bne.n	800a026 <_strtol_l.constprop.0+0x56>
 800a0c2:	2308      	movs	r3, #8
 800a0c4:	e7af      	b.n	800a026 <_strtol_l.constprop.0+0x56>
 800a0c6:	2c30      	cmp	r4, #48	; 0x30
 800a0c8:	d0a5      	beq.n	800a016 <_strtol_l.constprop.0+0x46>
 800a0ca:	230a      	movs	r3, #10
 800a0cc:	e7ab      	b.n	800a026 <_strtol_l.constprop.0+0x56>
 800a0ce:	bf00      	nop
 800a0d0:	0800a577 	.word	0x0800a577

0800a0d4 <_strtol_r>:
 800a0d4:	f7ff bf7c 	b.w	8009fd0 <_strtol_l.constprop.0>

0800a0d8 <_strtoul_l.constprop.0>:
 800a0d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0dc:	4f36      	ldr	r7, [pc, #216]	; (800a1b8 <_strtoul_l.constprop.0+0xe0>)
 800a0de:	4686      	mov	lr, r0
 800a0e0:	460d      	mov	r5, r1
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0e8:	5de6      	ldrb	r6, [r4, r7]
 800a0ea:	f016 0608 	ands.w	r6, r6, #8
 800a0ee:	d1f8      	bne.n	800a0e2 <_strtoul_l.constprop.0+0xa>
 800a0f0:	2c2d      	cmp	r4, #45	; 0x2d
 800a0f2:	d12f      	bne.n	800a154 <_strtoul_l.constprop.0+0x7c>
 800a0f4:	782c      	ldrb	r4, [r5, #0]
 800a0f6:	2601      	movs	r6, #1
 800a0f8:	1c85      	adds	r5, r0, #2
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d057      	beq.n	800a1ae <_strtoul_l.constprop.0+0xd6>
 800a0fe:	2b10      	cmp	r3, #16
 800a100:	d109      	bne.n	800a116 <_strtoul_l.constprop.0+0x3e>
 800a102:	2c30      	cmp	r4, #48	; 0x30
 800a104:	d107      	bne.n	800a116 <_strtoul_l.constprop.0+0x3e>
 800a106:	7828      	ldrb	r0, [r5, #0]
 800a108:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a10c:	2858      	cmp	r0, #88	; 0x58
 800a10e:	d149      	bne.n	800a1a4 <_strtoul_l.constprop.0+0xcc>
 800a110:	786c      	ldrb	r4, [r5, #1]
 800a112:	2310      	movs	r3, #16
 800a114:	3502      	adds	r5, #2
 800a116:	f04f 38ff 	mov.w	r8, #4294967295
 800a11a:	2700      	movs	r7, #0
 800a11c:	fbb8 f8f3 	udiv	r8, r8, r3
 800a120:	fb03 f908 	mul.w	r9, r3, r8
 800a124:	ea6f 0909 	mvn.w	r9, r9
 800a128:	4638      	mov	r0, r7
 800a12a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a12e:	f1bc 0f09 	cmp.w	ip, #9
 800a132:	d814      	bhi.n	800a15e <_strtoul_l.constprop.0+0x86>
 800a134:	4664      	mov	r4, ip
 800a136:	42a3      	cmp	r3, r4
 800a138:	dd22      	ble.n	800a180 <_strtoul_l.constprop.0+0xa8>
 800a13a:	2f00      	cmp	r7, #0
 800a13c:	db1d      	blt.n	800a17a <_strtoul_l.constprop.0+0xa2>
 800a13e:	4580      	cmp	r8, r0
 800a140:	d31b      	bcc.n	800a17a <_strtoul_l.constprop.0+0xa2>
 800a142:	d101      	bne.n	800a148 <_strtoul_l.constprop.0+0x70>
 800a144:	45a1      	cmp	r9, r4
 800a146:	db18      	blt.n	800a17a <_strtoul_l.constprop.0+0xa2>
 800a148:	fb00 4003 	mla	r0, r0, r3, r4
 800a14c:	2701      	movs	r7, #1
 800a14e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a152:	e7ea      	b.n	800a12a <_strtoul_l.constprop.0+0x52>
 800a154:	2c2b      	cmp	r4, #43	; 0x2b
 800a156:	bf04      	itt	eq
 800a158:	782c      	ldrbeq	r4, [r5, #0]
 800a15a:	1c85      	addeq	r5, r0, #2
 800a15c:	e7cd      	b.n	800a0fa <_strtoul_l.constprop.0+0x22>
 800a15e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a162:	f1bc 0f19 	cmp.w	ip, #25
 800a166:	d801      	bhi.n	800a16c <_strtoul_l.constprop.0+0x94>
 800a168:	3c37      	subs	r4, #55	; 0x37
 800a16a:	e7e4      	b.n	800a136 <_strtoul_l.constprop.0+0x5e>
 800a16c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a170:	f1bc 0f19 	cmp.w	ip, #25
 800a174:	d804      	bhi.n	800a180 <_strtoul_l.constprop.0+0xa8>
 800a176:	3c57      	subs	r4, #87	; 0x57
 800a178:	e7dd      	b.n	800a136 <_strtoul_l.constprop.0+0x5e>
 800a17a:	f04f 37ff 	mov.w	r7, #4294967295
 800a17e:	e7e6      	b.n	800a14e <_strtoul_l.constprop.0+0x76>
 800a180:	2f00      	cmp	r7, #0
 800a182:	da07      	bge.n	800a194 <_strtoul_l.constprop.0+0xbc>
 800a184:	2322      	movs	r3, #34	; 0x22
 800a186:	f8ce 3000 	str.w	r3, [lr]
 800a18a:	f04f 30ff 	mov.w	r0, #4294967295
 800a18e:	b932      	cbnz	r2, 800a19e <_strtoul_l.constprop.0+0xc6>
 800a190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a194:	b106      	cbz	r6, 800a198 <_strtoul_l.constprop.0+0xc0>
 800a196:	4240      	negs	r0, r0
 800a198:	2a00      	cmp	r2, #0
 800a19a:	d0f9      	beq.n	800a190 <_strtoul_l.constprop.0+0xb8>
 800a19c:	b107      	cbz	r7, 800a1a0 <_strtoul_l.constprop.0+0xc8>
 800a19e:	1e69      	subs	r1, r5, #1
 800a1a0:	6011      	str	r1, [r2, #0]
 800a1a2:	e7f5      	b.n	800a190 <_strtoul_l.constprop.0+0xb8>
 800a1a4:	2430      	movs	r4, #48	; 0x30
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d1b5      	bne.n	800a116 <_strtoul_l.constprop.0+0x3e>
 800a1aa:	2308      	movs	r3, #8
 800a1ac:	e7b3      	b.n	800a116 <_strtoul_l.constprop.0+0x3e>
 800a1ae:	2c30      	cmp	r4, #48	; 0x30
 800a1b0:	d0a9      	beq.n	800a106 <_strtoul_l.constprop.0+0x2e>
 800a1b2:	230a      	movs	r3, #10
 800a1b4:	e7af      	b.n	800a116 <_strtoul_l.constprop.0+0x3e>
 800a1b6:	bf00      	nop
 800a1b8:	0800a577 	.word	0x0800a577

0800a1bc <_strtoul_r>:
 800a1bc:	f7ff bf8c 	b.w	800a0d8 <_strtoul_l.constprop.0>

0800a1c0 <__submore>:
 800a1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c4:	460c      	mov	r4, r1
 800a1c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a1c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1cc:	4299      	cmp	r1, r3
 800a1ce:	d11d      	bne.n	800a20c <__submore+0x4c>
 800a1d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a1d4:	f7fe fbb0 	bl	8008938 <_malloc_r>
 800a1d8:	b918      	cbnz	r0, 800a1e2 <__submore+0x22>
 800a1da:	f04f 30ff 	mov.w	r0, #4294967295
 800a1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1e6:	63a3      	str	r3, [r4, #56]	; 0x38
 800a1e8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a1ec:	6360      	str	r0, [r4, #52]	; 0x34
 800a1ee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a1f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a1f6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a1fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a1fe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a202:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a206:	6020      	str	r0, [r4, #0]
 800a208:	2000      	movs	r0, #0
 800a20a:	e7e8      	b.n	800a1de <__submore+0x1e>
 800a20c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a20e:	0077      	lsls	r7, r6, #1
 800a210:	463a      	mov	r2, r7
 800a212:	f000 f831 	bl	800a278 <_realloc_r>
 800a216:	4605      	mov	r5, r0
 800a218:	2800      	cmp	r0, #0
 800a21a:	d0de      	beq.n	800a1da <__submore+0x1a>
 800a21c:	eb00 0806 	add.w	r8, r0, r6
 800a220:	4601      	mov	r1, r0
 800a222:	4632      	mov	r2, r6
 800a224:	4640      	mov	r0, r8
 800a226:	f7fe fb05 	bl	8008834 <memcpy>
 800a22a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a22e:	f8c4 8000 	str.w	r8, [r4]
 800a232:	e7e9      	b.n	800a208 <__submore+0x48>

0800a234 <_fstat_r>:
 800a234:	b538      	push	{r3, r4, r5, lr}
 800a236:	4d07      	ldr	r5, [pc, #28]	; (800a254 <_fstat_r+0x20>)
 800a238:	2300      	movs	r3, #0
 800a23a:	4604      	mov	r4, r0
 800a23c:	4608      	mov	r0, r1
 800a23e:	4611      	mov	r1, r2
 800a240:	602b      	str	r3, [r5, #0]
 800a242:	f7f7 fb1a 	bl	800187a <_fstat>
 800a246:	1c43      	adds	r3, r0, #1
 800a248:	d102      	bne.n	800a250 <_fstat_r+0x1c>
 800a24a:	682b      	ldr	r3, [r5, #0]
 800a24c:	b103      	cbz	r3, 800a250 <_fstat_r+0x1c>
 800a24e:	6023      	str	r3, [r4, #0]
 800a250:	bd38      	pop	{r3, r4, r5, pc}
 800a252:	bf00      	nop
 800a254:	20001c44 	.word	0x20001c44

0800a258 <_isatty_r>:
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	4d06      	ldr	r5, [pc, #24]	; (800a274 <_isatty_r+0x1c>)
 800a25c:	2300      	movs	r3, #0
 800a25e:	4604      	mov	r4, r0
 800a260:	4608      	mov	r0, r1
 800a262:	602b      	str	r3, [r5, #0]
 800a264:	f7f7 fb19 	bl	800189a <_isatty>
 800a268:	1c43      	adds	r3, r0, #1
 800a26a:	d102      	bne.n	800a272 <_isatty_r+0x1a>
 800a26c:	682b      	ldr	r3, [r5, #0]
 800a26e:	b103      	cbz	r3, 800a272 <_isatty_r+0x1a>
 800a270:	6023      	str	r3, [r4, #0]
 800a272:	bd38      	pop	{r3, r4, r5, pc}
 800a274:	20001c44 	.word	0x20001c44

0800a278 <_realloc_r>:
 800a278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a27c:	4680      	mov	r8, r0
 800a27e:	4614      	mov	r4, r2
 800a280:	460e      	mov	r6, r1
 800a282:	b921      	cbnz	r1, 800a28e <_realloc_r+0x16>
 800a284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a288:	4611      	mov	r1, r2
 800a28a:	f7fe bb55 	b.w	8008938 <_malloc_r>
 800a28e:	b92a      	cbnz	r2, 800a29c <_realloc_r+0x24>
 800a290:	f7fe fae6 	bl	8008860 <_free_r>
 800a294:	4625      	mov	r5, r4
 800a296:	4628      	mov	r0, r5
 800a298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a29c:	f000 f81b 	bl	800a2d6 <_malloc_usable_size_r>
 800a2a0:	4284      	cmp	r4, r0
 800a2a2:	4607      	mov	r7, r0
 800a2a4:	d802      	bhi.n	800a2ac <_realloc_r+0x34>
 800a2a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2aa:	d812      	bhi.n	800a2d2 <_realloc_r+0x5a>
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	4640      	mov	r0, r8
 800a2b0:	f7fe fb42 	bl	8008938 <_malloc_r>
 800a2b4:	4605      	mov	r5, r0
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	d0ed      	beq.n	800a296 <_realloc_r+0x1e>
 800a2ba:	42bc      	cmp	r4, r7
 800a2bc:	4622      	mov	r2, r4
 800a2be:	4631      	mov	r1, r6
 800a2c0:	bf28      	it	cs
 800a2c2:	463a      	movcs	r2, r7
 800a2c4:	f7fe fab6 	bl	8008834 <memcpy>
 800a2c8:	4631      	mov	r1, r6
 800a2ca:	4640      	mov	r0, r8
 800a2cc:	f7fe fac8 	bl	8008860 <_free_r>
 800a2d0:	e7e1      	b.n	800a296 <_realloc_r+0x1e>
 800a2d2:	4635      	mov	r5, r6
 800a2d4:	e7df      	b.n	800a296 <_realloc_r+0x1e>

0800a2d6 <_malloc_usable_size_r>:
 800a2d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2da:	1f18      	subs	r0, r3, #4
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	bfbc      	itt	lt
 800a2e0:	580b      	ldrlt	r3, [r1, r0]
 800a2e2:	18c0      	addlt	r0, r0, r3
 800a2e4:	4770      	bx	lr
	...

0800a2e8 <_init>:
 800a2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ea:	bf00      	nop
 800a2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ee:	bc08      	pop	{r3}
 800a2f0:	469e      	mov	lr, r3
 800a2f2:	4770      	bx	lr

0800a2f4 <_fini>:
 800a2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f6:	bf00      	nop
 800a2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2fa:	bc08      	pop	{r3}
 800a2fc:	469e      	mov	lr, r3
 800a2fe:	4770      	bx	lr
