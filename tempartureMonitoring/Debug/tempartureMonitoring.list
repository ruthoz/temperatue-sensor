
tempartureMonitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007658  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080077e8  080077e8  000177e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007878  08007878  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007878  08007878  00017878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007880  08007880  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007880  08007880  00017880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007884  08007884  00017884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a9c  20000010  08007898  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001aac  08007898  00021aac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f017  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b0a  00000000  00000000  0003f057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  00042b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018f0  00000000  00000000  000445b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003920  00000000  00000000  00045ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d7bb  00000000  00000000  000497c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff029  00000000  00000000  00066f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00165fa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000703c  00000000  00000000  00165ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080077d0 	.word	0x080077d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080077d0 	.word	0x080077d0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fbf6 	bl	8000cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f81e 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f970 	bl	80007c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f93e 	bl	8000764 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004e8:	f000 f86a 	bl	80005c0 <MX_I2C1_Init>
  MX_TIM3_Init();
 80004ec:	f000 f8a8 	bl	8000640 <MX_TIM3_Init>
  MX_TIM6_Init();
 80004f0:	f000 f900 	bl	80006f4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f004 fbe2 	bl	8004cbc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f8:	4a05      	ldr	r2, [pc, #20]	; (8000510 <main+0x3c>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4805      	ldr	r0, [pc, #20]	; (8000514 <main+0x40>)
 80004fe:	f004 fc27 	bl	8004d50 <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <main+0x44>)
 8000506:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000508:	f004 fbfc 	bl	8004d04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050c:	e7fe      	b.n	800050c <main+0x38>
 800050e:	bf00      	nop
 8000510:	0800780c 	.word	0x0800780c
 8000514:	080008dd 	.word	0x080008dd
 8000518:	2000019c 	.word	0x2000019c

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b096      	sub	sp, #88	; 0x58
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2244      	movs	r2, #68	; 0x44
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f007 f948 	bl	80077c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	463b      	mov	r3, r7
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800053e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000542:	f001 f8e7 	bl	8001714 <HAL_PWREx_ControlVoltageScaling>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800054c:	f000 f9ce 	bl	80008ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000550:	2302      	movs	r3, #2
 8000552:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000558:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055a:	2310      	movs	r3, #16
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000562:	2302      	movs	r3, #2
 8000564:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000566:	2301      	movs	r3, #1
 8000568:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800056a:	230a      	movs	r3, #10
 800056c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800056e:	2307      	movs	r3, #7
 8000570:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000572:	2302      	movs	r3, #2
 8000574:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4618      	mov	r0, r3
 8000580:	f001 f91e 	bl	80017c0 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800058a:	f000 f9af 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	2303      	movs	r3, #3
 8000594:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a2:	463b      	mov	r3, r7
 80005a4:	2104      	movs	r1, #4
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fce6 	bl	8001f78 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005b2:	f000 f99b 	bl	80008ec <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3758      	adds	r7, #88	; 0x58
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <MX_I2C1_Init+0x74>)
 80005c6:	4a1c      	ldr	r2, [pc, #112]	; (8000638 <MX_I2C1_Init+0x78>)
 80005c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_I2C1_Init+0x74>)
 80005cc:	4a1b      	ldr	r2, [pc, #108]	; (800063c <MX_I2C1_Init+0x7c>)
 80005ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <MX_I2C1_Init+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_I2C1_Init+0x74>)
 80005d8:	2201      	movs	r2, #1
 80005da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <MX_I2C1_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_I2C1_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_I2C1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_I2C1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_I2C1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005fa:	480e      	ldr	r0, [pc, #56]	; (8000634 <MX_I2C1_Init+0x74>)
 80005fc:	f000 ff55 	bl	80014aa <HAL_I2C_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000606:	f000 f971 	bl	80008ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800060a:	2100      	movs	r1, #0
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <MX_I2C1_Init+0x74>)
 800060e:	f000 ffdb 	bl	80015c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000618:	f000 f968 	bl	80008ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800061c:	2100      	movs	r1, #0
 800061e:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_I2C1_Init+0x74>)
 8000620:	f001 f81d 	bl	800165e <HAL_I2CEx_ConfigDigitalFilter>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800062a:	f000 f95f 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	2000002c 	.word	0x2000002c
 8000638:	40005400 	.word	0x40005400
 800063c:	10909cec 	.word	0x10909cec

08000640 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000652:	463b      	mov	r3, r7
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
 8000660:	615a      	str	r2, [r3, #20]
 8000662:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000664:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MX_TIM3_Init+0xac>)
 8000666:	4a22      	ldr	r2, [pc, #136]	; (80006f0 <MX_TIM3_Init+0xb0>)
 8000668:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <MX_TIM3_Init+0xac>)
 800066c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000670:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_TIM3_Init+0xac>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_TIM3_Init+0xac>)
 800067a:	2264      	movs	r2, #100	; 0x64
 800067c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_TIM3_Init+0xac>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_TIM3_Init+0xac>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800068a:	4818      	ldr	r0, [pc, #96]	; (80006ec <MX_TIM3_Init+0xac>)
 800068c:	f002 fbab 	bl	8002de6 <HAL_TIM_PWM_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000696:	f000 f929 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4619      	mov	r1, r3
 80006a8:	4810      	ldr	r0, [pc, #64]	; (80006ec <MX_TIM3_Init+0xac>)
 80006aa:	f003 f9c9 	bl	8003a40 <HAL_TIMEx_MasterConfigSynchronization>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80006b4:	f000 f91a 	bl	80008ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006b8:	2360      	movs	r3, #96	; 0x60
 80006ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80006bc:	2332      	movs	r3, #50	; 0x32
 80006be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006c8:	463b      	mov	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	4619      	mov	r1, r3
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <MX_TIM3_Init+0xac>)
 80006d0:	f002 fd00 	bl	80030d4 <HAL_TIM_PWM_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80006da:	f000 f907 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006de:	4803      	ldr	r0, [pc, #12]	; (80006ec <MX_TIM3_Init+0xac>)
 80006e0:	f000 f9d6 	bl	8000a90 <HAL_TIM_MspPostInit>

}
 80006e4:	bf00      	nop
 80006e6:	3728      	adds	r7, #40	; 0x28
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000080 	.word	0x20000080
 80006f0:	40000400 	.word	0x40000400

080006f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_TIM6_Init+0x68>)
 8000706:	4a16      	ldr	r2, [pc, #88]	; (8000760 <MX_TIM6_Init+0x6c>)
 8000708:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_TIM6_Init+0x68>)
 800070c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000710:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_TIM6_Init+0x68>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_TIM6_Init+0x68>)
 800071a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800071e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_TIM6_Init+0x68>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000726:	480d      	ldr	r0, [pc, #52]	; (800075c <MX_TIM6_Init+0x68>)
 8000728:	f002 fb06 	bl	8002d38 <HAL_TIM_Base_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000732:	f000 f8db 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	4619      	mov	r1, r3
 8000742:	4806      	ldr	r0, [pc, #24]	; (800075c <MX_TIM6_Init+0x68>)
 8000744:	f003 f97c 	bl	8003a40 <HAL_TIMEx_MasterConfigSynchronization>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800074e:	f000 f8cd 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200000cc 	.word	0x200000cc
 8000760:	40001000 	.word	0x40001000

08000764 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_USART2_UART_Init+0x58>)
 800076a:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <MX_USART2_UART_Init+0x5c>)
 800076c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_USART2_UART_Init+0x58>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_USART2_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART2_UART_Init+0x58>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART2_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USART2_UART_Init+0x58>)
 80007a8:	f003 f9f0 	bl	8003b8c <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007b2:	f000 f89b 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000118 	.word	0x20000118
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	4b3d      	ldr	r3, [pc, #244]	; (80008d0 <MX_GPIO_Init+0x10c>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a3c      	ldr	r2, [pc, #240]	; (80008d0 <MX_GPIO_Init+0x10c>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b3a      	ldr	r3, [pc, #232]	; (80008d0 <MX_GPIO_Init+0x10c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f2:	4b37      	ldr	r3, [pc, #220]	; (80008d0 <MX_GPIO_Init+0x10c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a36      	ldr	r2, [pc, #216]	; (80008d0 <MX_GPIO_Init+0x10c>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b34      	ldr	r3, [pc, #208]	; (80008d0 <MX_GPIO_Init+0x10c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b31      	ldr	r3, [pc, #196]	; (80008d0 <MX_GPIO_Init+0x10c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a30      	ldr	r2, [pc, #192]	; (80008d0 <MX_GPIO_Init+0x10c>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <MX_GPIO_Init+0x10c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b2b      	ldr	r3, [pc, #172]	; (80008d0 <MX_GPIO_Init+0x10c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a2a      	ldr	r2, [pc, #168]	; (80008d0 <MX_GPIO_Init+0x10c>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <MX_GPIO_Init+0x10c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2120      	movs	r1, #32
 800083e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000842:	f000 fdf7 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800084c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	481d      	ldr	r0, [pc, #116]	; (80008d4 <MX_GPIO_Init+0x110>)
 800085e:	f000 fc3f 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000862:	2320      	movs	r3, #32
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087c:	f000 fc30 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000886:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089a:	f000 fc21 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800089e:	2320      	movs	r3, #32
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	4809      	ldr	r0, [pc, #36]	; (80008d8 <MX_GPIO_Init+0x114>)
 80008b4:	f000 fc14 	bl	80010e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2105      	movs	r1, #5
 80008bc:	2028      	movs	r0, #40	; 0x28
 80008be:	f000 fb5a 	bl	8000f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008c2:	2028      	movs	r0, #40	; 0x28
 80008c4:	f000 fb73 	bl	8000fae <HAL_NVIC_EnableIRQ>

}
 80008c8:	bf00      	nop
 80008ca:	3728      	adds	r7, #40	; 0x28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40021000 	.word	0x40021000
 80008d4:	48000800 	.word	0x48000800
 80008d8:	48000400 	.word	0x48000400

080008dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f004 fac5 	bl	8004e74 <osDelay>
 80008ea:	e7fb      	b.n	80008e4 <StartDefaultTask+0x8>

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <Error_Handler+0x8>
	...

080008f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_MspInit+0x4c>)
 8000900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000902:	4a10      	ldr	r2, [pc, #64]	; (8000944 <HAL_MspInit+0x4c>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6613      	str	r3, [r2, #96]	; 0x60
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <HAL_MspInit+0x4c>)
 800090c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <HAL_MspInit+0x4c>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <HAL_MspInit+0x4c>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	6593      	str	r3, [r2, #88]	; 0x58
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_MspInit+0x4c>)
 8000924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	210f      	movs	r1, #15
 8000932:	f06f 0001 	mvn.w	r0, #1
 8000936:	f000 fb1e 	bl	8000f76 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000

08000948 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b0ac      	sub	sp, #176	; 0xb0
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2288      	movs	r2, #136	; 0x88
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f006 ff29 	bl	80077c0 <memset>
  if(hi2c->Instance==I2C1)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <HAL_I2C_MspInit+0xb0>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d13b      	bne.n	80009f0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000978:	2340      	movs	r3, #64	; 0x40
 800097a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800097c:	2300      	movs	r3, #0
 800097e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4618      	mov	r0, r3
 8000986:	f001 fd1b 	bl	80023c0 <HAL_RCCEx_PeriphCLKConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000990:	f7ff ffac 	bl	80008ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <HAL_I2C_MspInit+0xb4>)
 8000996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000998:	4a18      	ldr	r2, [pc, #96]	; (80009fc <HAL_I2C_MspInit+0xb4>)
 800099a:	f043 0302 	orr.w	r3, r3, #2
 800099e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <HAL_I2C_MspInit+0xb4>)
 80009a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b4:	2312      	movs	r3, #18
 80009b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c6:	2304      	movs	r3, #4
 80009c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009d0:	4619      	mov	r1, r3
 80009d2:	480b      	ldr	r0, [pc, #44]	; (8000a00 <HAL_I2C_MspInit+0xb8>)
 80009d4:	f000 fb84 	bl	80010e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <HAL_I2C_MspInit+0xb4>)
 80009da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009dc:	4a07      	ldr	r2, [pc, #28]	; (80009fc <HAL_I2C_MspInit+0xb4>)
 80009de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e2:	6593      	str	r3, [r2, #88]	; 0x58
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <HAL_I2C_MspInit+0xb4>)
 80009e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009f0:	bf00      	nop
 80009f2:	37b0      	adds	r7, #176	; 0xb0
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40005400 	.word	0x40005400
 80009fc:	40021000 	.word	0x40021000
 8000a00:	48000400 	.word	0x48000400

08000a04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <HAL_TIM_PWM_MspInit+0x38>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d10b      	bne.n	8000a2e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1a:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6593      	str	r3, [r2, #88]	; 0x58
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a2e:	bf00      	nop
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40000400 	.word	0x40000400
 8000a40:	40021000 	.word	0x40021000

08000a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0d      	ldr	r2, [pc, #52]	; (8000a88 <HAL_TIM_Base_MspInit+0x44>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d113      	bne.n	8000a7e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <HAL_TIM_Base_MspInit+0x48>)
 8000a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5a:	4a0c      	ldr	r2, [pc, #48]	; (8000a8c <HAL_TIM_Base_MspInit+0x48>)
 8000a5c:	f043 0310 	orr.w	r3, r3, #16
 8000a60:	6593      	str	r3, [r2, #88]	; 0x58
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <HAL_TIM_Base_MspInit+0x48>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a66:	f003 0310 	and.w	r3, r3, #16
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2105      	movs	r1, #5
 8000a72:	2036      	movs	r0, #54	; 0x36
 8000a74:	f000 fa7f 	bl	8000f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a78:	2036      	movs	r0, #54	; 0x36
 8000a7a:	f000 fa98 	bl	8000fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40001000 	.word	0x40001000
 8000a8c:	40021000 	.word	0x40021000

08000a90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a11      	ldr	r2, [pc, #68]	; (8000af4 <HAL_TIM_MspPostInit+0x64>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d11b      	bne.n	8000aea <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <HAL_TIM_MspPostInit+0x68>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <HAL_TIM_MspPostInit+0x68>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <HAL_TIM_MspPostInit+0x68>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000aca:	2310      	movs	r3, #16
 8000acc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <HAL_TIM_MspPostInit+0x6c>)
 8000ae6:	f000 fafb 	bl	80010e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3720      	adds	r7, #32
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40000400 	.word	0x40000400
 8000af8:	40021000 	.word	0x40021000
 8000afc:	48000400 	.word	0x48000400

08000b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b0ac      	sub	sp, #176	; 0xb0
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2288      	movs	r2, #136	; 0x88
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f006 fe4d 	bl	80077c0 <memset>
  if(huart->Instance==USART2)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a25      	ldr	r2, [pc, #148]	; (8000bc0 <HAL_UART_MspInit+0xc0>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d143      	bne.n	8000bb8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 fc3f 	bl	80023c0 <HAL_RCCEx_PeriphCLKConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b48:	f7ff fed0 	bl	80008ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <HAL_UART_MspInit+0xc4>)
 8000b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b50:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <HAL_UART_MspInit+0xc4>)
 8000b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b56:	6593      	str	r3, [r2, #88]	; 0x58
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <HAL_UART_MspInit+0xc4>)
 8000b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <HAL_UART_MspInit+0xc4>)
 8000b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b68:	4a16      	ldr	r2, [pc, #88]	; (8000bc4 <HAL_UART_MspInit+0xc4>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <HAL_UART_MspInit+0xc4>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b7c:	230c      	movs	r3, #12
 8000b7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b94:	2307      	movs	r3, #7
 8000b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba4:	f000 fa9c 	bl	80010e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2105      	movs	r1, #5
 8000bac:	2026      	movs	r0, #38	; 0x26
 8000bae:	f000 f9e2 	bl	8000f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bb2:	2026      	movs	r0, #38	; 0x26
 8000bb4:	f000 f9fb 	bl	8000fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bb8:	bf00      	nop
 8000bba:	37b0      	adds	r7, #176	; 0xb0
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40004400 	.word	0x40004400
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf8:	f000 f8c2 	bl	8000d80 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bfc:	f005 fd48 	bl	8006690 <xTaskGetSchedulerState>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d001      	beq.n	8000c0a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c06:	f006 fb2f 	bl	8007268 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <USART2_IRQHandler+0x10>)
 8000c16:	f003 f807 	bl	8003c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000118 	.word	0x20000118

08000c24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000c28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c2c:	f000 fc1a 	bl	8001464 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c34:	f000 fc16 	bl	8001464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <TIM6_DAC_IRQHandler+0x10>)
 8000c42:	f002 f927 	bl	8002e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200000cc 	.word	0x200000cc

08000c50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <SystemInit+0x20>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <SystemInit+0x20>)
 8000c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c78:	f7ff ffea 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c7c:	480c      	ldr	r0, [pc, #48]	; (8000cb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7e:	490d      	ldr	r1, [pc, #52]	; (8000cb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c80:	4a0d      	ldr	r2, [pc, #52]	; (8000cb8 <LoopForever+0xe>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c94:	4c0a      	ldr	r4, [pc, #40]	; (8000cc0 <LoopForever+0x16>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f006 fd5b 	bl	800775c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ca6:	f7ff fc15 	bl	80004d4 <main>

08000caa <LoopForever>:

LoopForever:
    b LoopForever
 8000caa:	e7fe      	b.n	8000caa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000cb8:	08007888 	.word	0x08007888
  ldr r2, =_sbss
 8000cbc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cc0:	20001aac 	.word	0x20001aac

08000cc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC1_2_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <HAL_Init+0x3c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <HAL_Init+0x3c>)
 8000cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cdc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f000 f93e 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce4:	200f      	movs	r0, #15
 8000ce6:	f000 f80f 	bl	8000d08 <HAL_InitTick>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d002      	beq.n	8000cf6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	e001      	b.n	8000cfa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf6:	f7ff fdff 	bl	80008f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40022000 	.word	0x40022000

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <HAL_InitTick+0x6c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d023      	beq.n	8000d64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <HAL_InitTick+0x70>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_InitTick+0x6c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f949 	bl	8000fca <HAL_SYSTICK_Config>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10f      	bne.n	8000d5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d809      	bhi.n	8000d58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f000 f913 	bl	8000f76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_InitTick+0x74>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	e007      	b.n	8000d68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	73fb      	strb	r3, [r7, #15]
 8000d5c:	e004      	b.n	8000d68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	73fb      	strb	r3, [r7, #15]
 8000d62:	e001      	b.n	8000d68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	20000004 	.word	0x20000004

08000d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x20>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x24>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <HAL_IncTick+0x24>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008
 8000da4:	200001a0 	.word	0x200001a0

08000da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <HAL_GetTick+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	200001a0 	.word	0x200001a0

08000dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df2:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	60d3      	str	r3, [r2, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <__NVIC_GetPriorityGrouping+0x18>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	f003 0307 	and.w	r3, r3, #7
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	db0b      	blt.n	8000e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	f003 021f 	and.w	r2, r3, #31
 8000e3c:	4907      	ldr	r1, [pc, #28]	; (8000e5c <__NVIC_EnableIRQ+0x38>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	095b      	lsrs	r3, r3, #5
 8000e44:	2001      	movs	r0, #1
 8000e46:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000e100 	.word	0xe000e100

08000e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db0a      	blt.n	8000e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	490c      	ldr	r1, [pc, #48]	; (8000eac <__NVIC_SetPriority+0x4c>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	0112      	lsls	r2, r2, #4
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	440b      	add	r3, r1
 8000e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e88:	e00a      	b.n	8000ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <__NVIC_SetPriority+0x50>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	3b04      	subs	r3, #4
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	761a      	strb	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000e100 	.word	0xe000e100
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f1c3 0307 	rsb	r3, r3, #7
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	bf28      	it	cs
 8000ed2:	2304      	movcs	r3, #4
 8000ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d902      	bls.n	8000ee4 <NVIC_EncodePriority+0x30>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	e000      	b.n	8000ee6 <NVIC_EncodePriority+0x32>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43d9      	mvns	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	4313      	orrs	r3, r2
         );
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3724      	adds	r7, #36	; 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f2c:	d301      	bcc.n	8000f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00f      	b.n	8000f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <SysTick_Config+0x40>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f7ff ff8e 	bl	8000e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <SysTick_Config+0x40>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4a:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <SysTick_Config+0x40>)
 8000f4c:	2207      	movs	r2, #7
 8000f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ff29 	bl	8000dc0 <__NVIC_SetPriorityGrouping>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f88:	f7ff ff3e 	bl	8000e08 <__NVIC_GetPriorityGrouping>
 8000f8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff ff8e 	bl	8000eb4 <NVIC_EncodePriority>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff5d 	bl	8000e60 <__NVIC_SetPriority>
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff31 	bl	8000e24 <__NVIC_EnableIRQ>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffa2 	bl	8000f1c <SysTick_Config>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b085      	sub	sp, #20
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d008      	beq.n	800100c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e022      	b.n	8001052 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 020e 	bic.w	r2, r2, #14
 800101a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0201 	bic.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001030:	f003 021c 	and.w	r2, r3, #28
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	2101      	movs	r1, #1
 800103a:	fa01 f202 	lsl.w	r2, r1, r2
 800103e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d005      	beq.n	8001082 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2204      	movs	r2, #4
 800107a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	e029      	b.n	80010d6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f022 020e 	bic.w	r2, r2, #14
 8001090:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f022 0201 	bic.w	r2, r2, #1
 80010a0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f003 021c 	and.w	r2, r3, #28
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	2101      	movs	r1, #1
 80010b0:	fa01 f202 	lsl.w	r2, r1, r2
 80010b4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2201      	movs	r2, #1
 80010ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	4798      	blx	r3
    }
  }
  return status;
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ee:	e17f      	b.n	80013f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	2101      	movs	r1, #1
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	4013      	ands	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 8171 	beq.w	80013ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b01      	cmp	r3, #1
 8001112:	d005      	beq.n	8001120 <HAL_GPIO_Init+0x40>
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d130      	bne.n	8001182 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68da      	ldr	r2, [r3, #12]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001156:	2201      	movs	r2, #1
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	091b      	lsrs	r3, r3, #4
 800116c:	f003 0201 	and.w	r2, r3, #1
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	2b03      	cmp	r3, #3
 800118c:	d118      	bne.n	80011c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001194:	2201      	movs	r2, #1
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	f003 0201 	and.w	r2, r3, #1
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d017      	beq.n	80011fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d123      	bne.n	8001250 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	08da      	lsrs	r2, r3, #3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3208      	adds	r2, #8
 8001210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	08da      	lsrs	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3208      	adds	r2, #8
 800124a:	6939      	ldr	r1, [r7, #16]
 800124c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0203 	and.w	r2, r3, #3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 80ac 	beq.w	80013ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	4b5f      	ldr	r3, [pc, #380]	; (8001410 <HAL_GPIO_Init+0x330>)
 8001294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001296:	4a5e      	ldr	r2, [pc, #376]	; (8001410 <HAL_GPIO_Init+0x330>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6613      	str	r3, [r2, #96]	; 0x60
 800129e:	4b5c      	ldr	r3, [pc, #368]	; (8001410 <HAL_GPIO_Init+0x330>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012aa:	4a5a      	ldr	r2, [pc, #360]	; (8001414 <HAL_GPIO_Init+0x334>)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	220f      	movs	r2, #15
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012d4:	d025      	beq.n	8001322 <HAL_GPIO_Init+0x242>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4f      	ldr	r2, [pc, #316]	; (8001418 <HAL_GPIO_Init+0x338>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d01f      	beq.n	800131e <HAL_GPIO_Init+0x23e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4e      	ldr	r2, [pc, #312]	; (800141c <HAL_GPIO_Init+0x33c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d019      	beq.n	800131a <HAL_GPIO_Init+0x23a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4d      	ldr	r2, [pc, #308]	; (8001420 <HAL_GPIO_Init+0x340>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0x236>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4c      	ldr	r2, [pc, #304]	; (8001424 <HAL_GPIO_Init+0x344>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00d      	beq.n	8001312 <HAL_GPIO_Init+0x232>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4b      	ldr	r2, [pc, #300]	; (8001428 <HAL_GPIO_Init+0x348>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d007      	beq.n	800130e <HAL_GPIO_Init+0x22e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4a      	ldr	r2, [pc, #296]	; (800142c <HAL_GPIO_Init+0x34c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_GPIO_Init+0x22a>
 8001306:	2306      	movs	r3, #6
 8001308:	e00c      	b.n	8001324 <HAL_GPIO_Init+0x244>
 800130a:	2307      	movs	r3, #7
 800130c:	e00a      	b.n	8001324 <HAL_GPIO_Init+0x244>
 800130e:	2305      	movs	r3, #5
 8001310:	e008      	b.n	8001324 <HAL_GPIO_Init+0x244>
 8001312:	2304      	movs	r3, #4
 8001314:	e006      	b.n	8001324 <HAL_GPIO_Init+0x244>
 8001316:	2303      	movs	r3, #3
 8001318:	e004      	b.n	8001324 <HAL_GPIO_Init+0x244>
 800131a:	2302      	movs	r3, #2
 800131c:	e002      	b.n	8001324 <HAL_GPIO_Init+0x244>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <HAL_GPIO_Init+0x244>
 8001322:	2300      	movs	r3, #0
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	f002 0203 	and.w	r2, r2, #3
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	4093      	lsls	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001334:	4937      	ldr	r1, [pc, #220]	; (8001414 <HAL_GPIO_Init+0x334>)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	3302      	adds	r3, #2
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001342:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <HAL_GPIO_Init+0x350>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4313      	orrs	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001366:	4a32      	ldr	r2, [pc, #200]	; (8001430 <HAL_GPIO_Init+0x350>)
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800136c:	4b30      	ldr	r3, [pc, #192]	; (8001430 <HAL_GPIO_Init+0x350>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001390:	4a27      	ldr	r2, [pc, #156]	; (8001430 <HAL_GPIO_Init+0x350>)
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001396:	4b26      	ldr	r3, [pc, #152]	; (8001430 <HAL_GPIO_Init+0x350>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	43db      	mvns	r3, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013ba:	4a1d      	ldr	r2, [pc, #116]	; (8001430 <HAL_GPIO_Init+0x350>)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <HAL_GPIO_Init+0x350>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013e4:	4a12      	ldr	r2, [pc, #72]	; (8001430 <HAL_GPIO_Init+0x350>)
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa22 f303 	lsr.w	r3, r2, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f47f ae78 	bne.w	80010f0 <HAL_GPIO_Init+0x10>
  }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	371c      	adds	r7, #28
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000
 8001414:	40010000 	.word	0x40010000
 8001418:	48000400 	.word	0x48000400
 800141c:	48000800 	.word	0x48000800
 8001420:	48000c00 	.word	0x48000c00
 8001424:	48001000 	.word	0x48001000
 8001428:	48001400 	.word	0x48001400
 800142c:	48001800 	.word	0x48001800
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001450:	e002      	b.n	8001458 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001470:	695a      	ldr	r2, [r3, #20]
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	4013      	ands	r3, r2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d006      	beq.n	8001488 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800147a:	4a05      	ldr	r2, [pc, #20]	; (8001490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f806 	bl	8001494 <HAL_GPIO_EXTI_Callback>
  }
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40010400 	.word	0x40010400

08001494 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e081      	b.n	80015c0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d106      	bne.n	80014d6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff fa39 	bl	8000948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2224      	movs	r2, #36	; 0x24
 80014da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0201 	bic.w	r2, r2, #1
 80014ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800150a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d107      	bne.n	8001524 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	e006      	b.n	8001532 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001530:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d104      	bne.n	8001544 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001542:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001556:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001566:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69d9      	ldr	r1, [r3, #28]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1a      	ldr	r2, [r3, #32]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0201 	orr.w	r2, r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2220      	movs	r2, #32
 80015ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b20      	cmp	r3, #32
 80015dc:	d138      	bne.n	8001650 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e032      	b.n	8001652 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2224      	movs	r2, #36	; 0x24
 80015f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0201 	bic.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800161a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6819      	ldr	r1, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0201 	orr.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2220      	movs	r2, #32
 8001640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	e000      	b.n	8001652 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001650:	2302      	movs	r3, #2
  }
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800165e:	b480      	push	{r7}
 8001660:	b085      	sub	sp, #20
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b20      	cmp	r3, #32
 8001672:	d139      	bne.n	80016e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800167e:	2302      	movs	r3, #2
 8001680:	e033      	b.n	80016ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2224      	movs	r2, #36	; 0x24
 800168e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0201 	bic.w	r2, r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0201 	orr.w	r2, r2, #1
 80016d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2220      	movs	r2, #32
 80016d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	e000      	b.n	80016ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80016e8:	2302      	movs	r3, #2
  }
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <HAL_PWREx_GetVoltageRange+0x18>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40007000 	.word	0x40007000

08001714 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001722:	d130      	bne.n	8001786 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001724:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800172c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001730:	d038      	beq.n	80017a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800173a:	4a1e      	ldr	r2, [pc, #120]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800173c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001740:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001742:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2232      	movs	r2, #50	; 0x32
 8001748:	fb02 f303 	mul.w	r3, r2, r3
 800174c:	4a1b      	ldr	r2, [pc, #108]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	0c9b      	lsrs	r3, r3, #18
 8001754:	3301      	adds	r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001758:	e002      	b.n	8001760 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	3b01      	subs	r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800176c:	d102      	bne.n	8001774 <HAL_PWREx_ControlVoltageScaling+0x60>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f2      	bne.n	800175a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800177c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001780:	d110      	bne.n	80017a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e00f      	b.n	80017a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800178e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001792:	d007      	beq.n	80017a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800179c:	4a05      	ldr	r2, [pc, #20]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800179e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40007000 	.word	0x40007000
 80017b8:	20000000 	.word	0x20000000
 80017bc:	431bde83 	.word	0x431bde83

080017c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e3ca      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d2:	4b97      	ldr	r3, [pc, #604]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017dc:	4b94      	ldr	r3, [pc, #592]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0310 	and.w	r3, r3, #16
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 80e4 	beq.w	80019bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d007      	beq.n	800180a <HAL_RCC_OscConfig+0x4a>
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	2b0c      	cmp	r3, #12
 80017fe:	f040 808b 	bne.w	8001918 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2b01      	cmp	r3, #1
 8001806:	f040 8087 	bne.w	8001918 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800180a:	4b89      	ldr	r3, [pc, #548]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d005      	beq.n	8001822 <HAL_RCC_OscConfig+0x62>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e3a2      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1a      	ldr	r2, [r3, #32]
 8001826:	4b82      	ldr	r3, [pc, #520]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d004      	beq.n	800183c <HAL_RCC_OscConfig+0x7c>
 8001832:	4b7f      	ldr	r3, [pc, #508]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800183a:	e005      	b.n	8001848 <HAL_RCC_OscConfig+0x88>
 800183c:	4b7c      	ldr	r3, [pc, #496]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 800183e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001842:	091b      	lsrs	r3, r3, #4
 8001844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001848:	4293      	cmp	r3, r2
 800184a:	d223      	bcs.n	8001894 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	4618      	mov	r0, r3
 8001852:	f000 fd55 	bl	8002300 <RCC_SetFlashLatencyFromMSIRange>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e383      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001860:	4b73      	ldr	r3, [pc, #460]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a72      	ldr	r2, [pc, #456]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001866:	f043 0308 	orr.w	r3, r3, #8
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b70      	ldr	r3, [pc, #448]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	496d      	ldr	r1, [pc, #436]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800187e:	4b6c      	ldr	r3, [pc, #432]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	4968      	ldr	r1, [pc, #416]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 800188e:	4313      	orrs	r3, r2
 8001890:	604b      	str	r3, [r1, #4]
 8001892:	e025      	b.n	80018e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001894:	4b66      	ldr	r3, [pc, #408]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a65      	ldr	r2, [pc, #404]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 800189a:	f043 0308 	orr.w	r3, r3, #8
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4960      	ldr	r1, [pc, #384]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018b2:	4b5f      	ldr	r3, [pc, #380]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	021b      	lsls	r3, r3, #8
 80018c0:	495b      	ldr	r1, [pc, #364]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d109      	bne.n	80018e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 fd15 	bl	8002300 <RCC_SetFlashLatencyFromMSIRange>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e343      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018e0:	f000 fc4a 	bl	8002178 <HAL_RCC_GetSysClockFreq>
 80018e4:	4602      	mov	r2, r0
 80018e6:	4b52      	ldr	r3, [pc, #328]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	091b      	lsrs	r3, r3, #4
 80018ec:	f003 030f 	and.w	r3, r3, #15
 80018f0:	4950      	ldr	r1, [pc, #320]	; (8001a34 <HAL_RCC_OscConfig+0x274>)
 80018f2:	5ccb      	ldrb	r3, [r1, r3]
 80018f4:	f003 031f 	and.w	r3, r3, #31
 80018f8:	fa22 f303 	lsr.w	r3, r2, r3
 80018fc:	4a4e      	ldr	r2, [pc, #312]	; (8001a38 <HAL_RCC_OscConfig+0x278>)
 80018fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001900:	4b4e      	ldr	r3, [pc, #312]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff f9ff 	bl	8000d08 <HAL_InitTick>
 800190a:	4603      	mov	r3, r0
 800190c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d052      	beq.n	80019ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	e327      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d032      	beq.n	8001986 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001920:	4b43      	ldr	r3, [pc, #268]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a42      	ldr	r2, [pc, #264]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800192c:	f7ff fa3c 	bl	8000da8 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001934:	f7ff fa38 	bl	8000da8 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e310      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001946:	4b3a      	ldr	r3, [pc, #232]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001952:	4b37      	ldr	r3, [pc, #220]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a36      	ldr	r2, [pc, #216]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001958:	f043 0308 	orr.w	r3, r3, #8
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	4b34      	ldr	r3, [pc, #208]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	4931      	ldr	r1, [pc, #196]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 800196c:	4313      	orrs	r3, r2
 800196e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001970:	4b2f      	ldr	r3, [pc, #188]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	021b      	lsls	r3, r3, #8
 800197e:	492c      	ldr	r1, [pc, #176]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
 8001984:	e01a      	b.n	80019bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001986:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a29      	ldr	r2, [pc, #164]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 800198c:	f023 0301 	bic.w	r3, r3, #1
 8001990:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001992:	f7ff fa09 	bl	8000da8 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800199a:	f7ff fa05 	bl	8000da8 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e2dd      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019ac:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1f0      	bne.n	800199a <HAL_RCC_OscConfig+0x1da>
 80019b8:	e000      	b.n	80019bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d074      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d005      	beq.n	80019da <HAL_RCC_OscConfig+0x21a>
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	2b0c      	cmp	r3, #12
 80019d2:	d10e      	bne.n	80019f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d10b      	bne.n	80019f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d064      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x2f0>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d160      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e2ba      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x24a>
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	e026      	b.n	8001a58 <HAL_RCC_OscConfig+0x298>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a12:	d115      	bne.n	8001a40 <HAL_RCC_OscConfig+0x280>
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001a1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a02      	ldr	r2, [pc, #8]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	e014      	b.n	8001a58 <HAL_RCC_OscConfig+0x298>
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000
 8001a34:	08007830 	.word	0x08007830
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000004 	.word	0x20000004
 8001a40:	4ba0      	ldr	r3, [pc, #640]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a9f      	ldr	r2, [pc, #636]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b9d      	ldr	r3, [pc, #628]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a9c      	ldr	r2, [pc, #624]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d013      	beq.n	8001a88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7ff f9a2 	bl	8000da8 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff f99e 	bl	8000da8 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e276      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a7a:	4b92      	ldr	r3, [pc, #584]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x2a8>
 8001a86:	e014      	b.n	8001ab2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a88:	f7ff f98e 	bl	8000da8 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a90:	f7ff f98a 	bl	8000da8 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	; 0x64
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e262      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aa2:	4b88      	ldr	r3, [pc, #544]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x2d0>
 8001aae:	e000      	b.n	8001ab2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d060      	beq.n	8001b80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x310>
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	2b0c      	cmp	r3, #12
 8001ac8:	d119      	bne.n	8001afe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d116      	bne.n	8001afe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad0:	4b7c      	ldr	r3, [pc, #496]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x328>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e23f      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae8:	4b76      	ldr	r3, [pc, #472]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	061b      	lsls	r3, r3, #24
 8001af6:	4973      	ldr	r1, [pc, #460]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001afc:	e040      	b.n	8001b80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d023      	beq.n	8001b4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b06:	4b6f      	ldr	r3, [pc, #444]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a6e      	ldr	r2, [pc, #440]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b12:	f7ff f949 	bl	8000da8 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1a:	f7ff f945 	bl	8000da8 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e21d      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b2c:	4b65      	ldr	r3, [pc, #404]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b38:	4b62      	ldr	r3, [pc, #392]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	061b      	lsls	r3, r3, #24
 8001b46:	495f      	ldr	r1, [pc, #380]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
 8001b4c:	e018      	b.n	8001b80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b4e:	4b5d      	ldr	r3, [pc, #372]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a5c      	ldr	r2, [pc, #368]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5a:	f7ff f925 	bl	8000da8 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b62:	f7ff f921 	bl	8000da8 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e1f9      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b74:	4b53      	ldr	r3, [pc, #332]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f0      	bne.n	8001b62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d03c      	beq.n	8001c06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d01c      	beq.n	8001bce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b94:	4b4b      	ldr	r3, [pc, #300]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b9a:	4a4a      	ldr	r2, [pc, #296]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7ff f900 	bl	8000da8 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff f8fc 	bl	8000da8 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e1d4      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bbe:	4b41      	ldr	r3, [pc, #260]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0ef      	beq.n	8001bac <HAL_RCC_OscConfig+0x3ec>
 8001bcc:	e01b      	b.n	8001c06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bce:	4b3d      	ldr	r3, [pc, #244]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd4:	4a3b      	ldr	r2, [pc, #236]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	f023 0301 	bic.w	r3, r3, #1
 8001bda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bde:	f7ff f8e3 	bl	8000da8 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be6:	f7ff f8df 	bl	8000da8 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e1b7      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bf8:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1ef      	bne.n	8001be6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 80a6 	beq.w	8001d60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c18:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10d      	bne.n	8001c40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c24:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c28:	4a26      	ldr	r2, [pc, #152]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c30:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d118      	bne.n	8001c7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c4c:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1d      	ldr	r2, [pc, #116]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c58:	f7ff f8a6 	bl	8000da8 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c60:	f7ff f8a2 	bl	8000da8 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e17a      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <HAL_RCC_OscConfig+0x508>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d108      	bne.n	8001c98 <HAL_RCC_OscConfig+0x4d8>
 8001c86:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c96:	e029      	b.n	8001cec <HAL_RCC_OscConfig+0x52c>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b05      	cmp	r3, #5
 8001c9e:	d115      	bne.n	8001ccc <HAL_RCC_OscConfig+0x50c>
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca6:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb6:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <HAL_RCC_OscConfig+0x504>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cc0:	e014      	b.n	8001cec <HAL_RCC_OscConfig+0x52c>
 8001cc2:	bf00      	nop
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	4b9c      	ldr	r3, [pc, #624]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd2:	4a9b      	ldr	r2, [pc, #620]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cdc:	4b98      	ldr	r3, [pc, #608]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce2:	4a97      	ldr	r2, [pc, #604]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001ce4:	f023 0304 	bic.w	r3, r3, #4
 8001ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d016      	beq.n	8001d22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf4:	f7ff f858 	bl	8000da8 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfc:	f7ff f854 	bl	8000da8 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e12a      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d12:	4b8b      	ldr	r3, [pc, #556]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0ed      	beq.n	8001cfc <HAL_RCC_OscConfig+0x53c>
 8001d20:	e015      	b.n	8001d4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d22:	f7ff f841 	bl	8000da8 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7ff f83d 	bl	8000da8 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e113      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d40:	4b7f      	ldr	r3, [pc, #508]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1ed      	bne.n	8001d2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d4e:	7ffb      	ldrb	r3, [r7, #31]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d105      	bne.n	8001d60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d54:	4b7a      	ldr	r3, [pc, #488]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d58:	4a79      	ldr	r2, [pc, #484]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80fe 	beq.w	8001f66 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	f040 80d0 	bne.w	8001f14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d74:	4b72      	ldr	r3, [pc, #456]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d130      	bne.n	8001dea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	3b01      	subs	r3, #1
 8001d94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d127      	bne.n	8001dea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d11f      	bne.n	8001dea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001db4:	2a07      	cmp	r2, #7
 8001db6:	bf14      	ite	ne
 8001db8:	2201      	movne	r2, #1
 8001dba:	2200      	moveq	r2, #0
 8001dbc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d113      	bne.n	8001dea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dcc:	085b      	lsrs	r3, r3, #1
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d109      	bne.n	8001dea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	085b      	lsrs	r3, r3, #1
 8001de2:	3b01      	subs	r3, #1
 8001de4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d06e      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	2b0c      	cmp	r3, #12
 8001dee:	d069      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001df0:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d105      	bne.n	8001e08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001dfc:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0ad      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e0c:	4b4c      	ldr	r3, [pc, #304]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a4b      	ldr	r2, [pc, #300]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001e12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e18:	f7fe ffc6 	bl	8000da8 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7fe ffc2 	bl	8000da8 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e09a      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e32:	4b43      	ldr	r3, [pc, #268]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e3e:	4b40      	ldr	r3, [pc, #256]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	4b40      	ldr	r3, [pc, #256]	; (8001f44 <HAL_RCC_OscConfig+0x784>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e4e:	3a01      	subs	r2, #1
 8001e50:	0112      	lsls	r2, r2, #4
 8001e52:	4311      	orrs	r1, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e58:	0212      	lsls	r2, r2, #8
 8001e5a:	4311      	orrs	r1, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e60:	0852      	lsrs	r2, r2, #1
 8001e62:	3a01      	subs	r2, #1
 8001e64:	0552      	lsls	r2, r2, #21
 8001e66:	4311      	orrs	r1, r2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e6c:	0852      	lsrs	r2, r2, #1
 8001e6e:	3a01      	subs	r2, #1
 8001e70:	0652      	lsls	r2, r2, #25
 8001e72:	4311      	orrs	r1, r2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e78:	0912      	lsrs	r2, r2, #4
 8001e7a:	0452      	lsls	r2, r2, #17
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	4930      	ldr	r1, [pc, #192]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e84:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a2d      	ldr	r2, [pc, #180]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e90:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4a2a      	ldr	r2, [pc, #168]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e9c:	f7fe ff84 	bl	8000da8 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7fe ff80 	bl	8000da8 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e058      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb6:	4b22      	ldr	r3, [pc, #136]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ec2:	e050      	b.n	8001f66 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e04f      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d148      	bne.n	8001f66 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a19      	ldr	r2, [pc, #100]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ede:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ee0:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4a16      	ldr	r2, [pc, #88]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001eec:	f7fe ff5c 	bl	8000da8 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef4:	f7fe ff58 	bl	8000da8 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e030      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x734>
 8001f12:	e028      	b.n	8001f66 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b0c      	cmp	r3, #12
 8001f18:	d023      	beq.n	8001f62 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a08      	ldr	r2, [pc, #32]	; (8001f40 <HAL_RCC_OscConfig+0x780>)
 8001f20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f26:	f7fe ff3f 	bl	8000da8 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f2c:	e00c      	b.n	8001f48 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7fe ff3b 	bl	8000da8 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d905      	bls.n	8001f48 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e013      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
 8001f40:	40021000 	.word	0x40021000
 8001f44:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_RCC_OscConfig+0x7b0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1ec      	bne.n	8001f2e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_RCC_OscConfig+0x7b0>)
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	4905      	ldr	r1, [pc, #20]	; (8001f70 <HAL_RCC_OscConfig+0x7b0>)
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_RCC_OscConfig+0x7b4>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60cb      	str	r3, [r1, #12]
 8001f60:	e001      	b.n	8001f66 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40021000 	.word	0x40021000
 8001f74:	feeefffc 	.word	0xfeeefffc

08001f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0e7      	b.n	800215c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b75      	ldr	r3, [pc, #468]	; (8002164 <HAL_RCC_ClockConfig+0x1ec>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d910      	bls.n	8001fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b72      	ldr	r3, [pc, #456]	; (8002164 <HAL_RCC_ClockConfig+0x1ec>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 0207 	bic.w	r2, r3, #7
 8001fa2:	4970      	ldr	r1, [pc, #448]	; (8002164 <HAL_RCC_ClockConfig+0x1ec>)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b6e      	ldr	r3, [pc, #440]	; (8002164 <HAL_RCC_ClockConfig+0x1ec>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0cf      	b.n	800215c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d010      	beq.n	8001fea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	4b66      	ldr	r3, [pc, #408]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d908      	bls.n	8001fea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd8:	4b63      	ldr	r3, [pc, #396]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	4960      	ldr	r1, [pc, #384]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d04c      	beq.n	8002090 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d107      	bne.n	800200e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffe:	4b5a      	ldr	r3, [pc, #360]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d121      	bne.n	800204e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e0a6      	b.n	800215c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002016:	4b54      	ldr	r3, [pc, #336]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d115      	bne.n	800204e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e09a      	b.n	800215c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800202e:	4b4e      	ldr	r3, [pc, #312]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e08e      	b.n	800215c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800203e:	4b4a      	ldr	r3, [pc, #296]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e086      	b.n	800215c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800204e:	4b46      	ldr	r3, [pc, #280]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f023 0203 	bic.w	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4943      	ldr	r1, [pc, #268]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002060:	f7fe fea2 	bl	8000da8 <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	e00a      	b.n	800207e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002068:	f7fe fe9e 	bl	8000da8 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	; 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e06e      	b.n	800215c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	4b3a      	ldr	r3, [pc, #232]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 020c 	and.w	r2, r3, #12
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	429a      	cmp	r2, r3
 800208e:	d1eb      	bne.n	8002068 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d010      	beq.n	80020be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	4b31      	ldr	r3, [pc, #196]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d208      	bcs.n	80020be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ac:	4b2e      	ldr	r3, [pc, #184]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	492b      	ldr	r1, [pc, #172]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020be:	4b29      	ldr	r3, [pc, #164]	; (8002164 <HAL_RCC_ClockConfig+0x1ec>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d210      	bcs.n	80020ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020cc:	4b25      	ldr	r3, [pc, #148]	; (8002164 <HAL_RCC_ClockConfig+0x1ec>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f023 0207 	bic.w	r2, r3, #7
 80020d4:	4923      	ldr	r1, [pc, #140]	; (8002164 <HAL_RCC_ClockConfig+0x1ec>)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	4313      	orrs	r3, r2
 80020da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020dc:	4b21      	ldr	r3, [pc, #132]	; (8002164 <HAL_RCC_ClockConfig+0x1ec>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d001      	beq.n	80020ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e036      	b.n	800215c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d008      	beq.n	800210c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020fa:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	4918      	ldr	r1, [pc, #96]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8002108:	4313      	orrs	r3, r2
 800210a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d009      	beq.n	800212c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4910      	ldr	r1, [pc, #64]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8002128:	4313      	orrs	r3, r2
 800212a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800212c:	f000 f824 	bl	8002178 <HAL_RCC_GetSysClockFreq>
 8002130:	4602      	mov	r2, r0
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	091b      	lsrs	r3, r3, #4
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	490b      	ldr	r1, [pc, #44]	; (800216c <HAL_RCC_ClockConfig+0x1f4>)
 800213e:	5ccb      	ldrb	r3, [r1, r3]
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
 8002148:	4a09      	ldr	r2, [pc, #36]	; (8002170 <HAL_RCC_ClockConfig+0x1f8>)
 800214a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_RCC_ClockConfig+0x1fc>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe fdd9 	bl	8000d08 <HAL_InitTick>
 8002156:	4603      	mov	r3, r0
 8002158:	72fb      	strb	r3, [r7, #11]

  return status;
 800215a:	7afb      	ldrb	r3, [r7, #11]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40022000 	.word	0x40022000
 8002168:	40021000 	.word	0x40021000
 800216c:	08007830 	.word	0x08007830
 8002170:	20000000 	.word	0x20000000
 8002174:	20000004 	.word	0x20000004

08002178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002178:	b480      	push	{r7}
 800217a:	b089      	sub	sp, #36	; 0x24
 800217c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002186:	4b3e      	ldr	r3, [pc, #248]	; (8002280 <HAL_RCC_GetSysClockFreq+0x108>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002190:	4b3b      	ldr	r3, [pc, #236]	; (8002280 <HAL_RCC_GetSysClockFreq+0x108>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_RCC_GetSysClockFreq+0x34>
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	2b0c      	cmp	r3, #12
 80021a4:	d121      	bne.n	80021ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d11e      	bne.n	80021ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021ac:	4b34      	ldr	r3, [pc, #208]	; (8002280 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d107      	bne.n	80021c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021b8:	4b31      	ldr	r3, [pc, #196]	; (8002280 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	e005      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021c8:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021d4:	4a2b      	ldr	r2, [pc, #172]	; (8002284 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10d      	bne.n	8002200 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021e8:	e00a      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d102      	bne.n	80021f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021f0:	4b25      	ldr	r3, [pc, #148]	; (8002288 <HAL_RCC_GetSysClockFreq+0x110>)
 80021f2:	61bb      	str	r3, [r7, #24]
 80021f4:	e004      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021fc:	4b23      	ldr	r3, [pc, #140]	; (800228c <HAL_RCC_GetSysClockFreq+0x114>)
 80021fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	2b0c      	cmp	r3, #12
 8002204:	d134      	bne.n	8002270 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002206:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <HAL_RCC_GetSysClockFreq+0x108>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d003      	beq.n	800221e <HAL_RCC_GetSysClockFreq+0xa6>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b03      	cmp	r3, #3
 800221a:	d003      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0xac>
 800221c:	e005      	b.n	800222a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <HAL_RCC_GetSysClockFreq+0x110>)
 8002220:	617b      	str	r3, [r7, #20]
      break;
 8002222:	e005      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002224:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_RCC_GetSysClockFreq+0x114>)
 8002226:	617b      	str	r3, [r7, #20]
      break;
 8002228:	e002      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	617b      	str	r3, [r7, #20]
      break;
 800222e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002230:	4b13      	ldr	r3, [pc, #76]	; (8002280 <HAL_RCC_GetSysClockFreq+0x108>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	3301      	adds	r3, #1
 800223c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <HAL_RCC_GetSysClockFreq+0x108>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	0a1b      	lsrs	r3, r3, #8
 8002244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	fb03 f202 	mul.w	r2, r3, r2
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	fbb2 f3f3 	udiv	r3, r2, r3
 8002254:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_RCC_GetSysClockFreq+0x108>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	0e5b      	lsrs	r3, r3, #25
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	3301      	adds	r3, #1
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002270:	69bb      	ldr	r3, [r7, #24]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	; 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	08007848 	.word	0x08007848
 8002288:	00f42400 	.word	0x00f42400
 800228c:	007a1200 	.word	0x007a1200

08002290 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002294:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	20000000 	.word	0x20000000

080022a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022ac:	f7ff fff0 	bl	8002290 <HAL_RCC_GetHCLKFreq>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	4904      	ldr	r1, [pc, #16]	; (80022d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022be:	5ccb      	ldrb	r3, [r1, r3]
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08007840 	.word	0x08007840

080022d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022d8:	f7ff ffda 	bl	8002290 <HAL_RCC_GetHCLKFreq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	0adb      	lsrs	r3, r3, #11
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	4904      	ldr	r1, [pc, #16]	; (80022fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80022ea:	5ccb      	ldrb	r3, [r1, r3]
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	08007840 	.word	0x08007840

08002300 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002308:	2300      	movs	r3, #0
 800230a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800230c:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002318:	f7ff f9ee 	bl	80016f8 <HAL_PWREx_GetVoltageRange>
 800231c:	6178      	str	r0, [r7, #20]
 800231e:	e014      	b.n	800234a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002320:	4b25      	ldr	r3, [pc, #148]	; (80023b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002324:	4a24      	ldr	r2, [pc, #144]	; (80023b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232a:	6593      	str	r3, [r2, #88]	; 0x58
 800232c:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002338:	f7ff f9de 	bl	80016f8 <HAL_PWREx_GetVoltageRange>
 800233c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800233e:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	4a1d      	ldr	r2, [pc, #116]	; (80023b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002348:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002350:	d10b      	bne.n	800236a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b80      	cmp	r3, #128	; 0x80
 8002356:	d919      	bls.n	800238c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2ba0      	cmp	r3, #160	; 0xa0
 800235c:	d902      	bls.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800235e:	2302      	movs	r3, #2
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	e013      	b.n	800238c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002364:	2301      	movs	r3, #1
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	e010      	b.n	800238c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b80      	cmp	r3, #128	; 0x80
 800236e:	d902      	bls.n	8002376 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002370:	2303      	movs	r3, #3
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	e00a      	b.n	800238c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b80      	cmp	r3, #128	; 0x80
 800237a:	d102      	bne.n	8002382 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800237c:	2302      	movs	r3, #2
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	e004      	b.n	800238c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b70      	cmp	r3, #112	; 0x70
 8002386:	d101      	bne.n	800238c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002388:	2301      	movs	r3, #1
 800238a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f023 0207 	bic.w	r2, r3, #7
 8002394:	4909      	ldr	r1, [pc, #36]	; (80023bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d001      	beq.n	80023ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40022000 	.word	0x40022000

080023c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023c8:	2300      	movs	r3, #0
 80023ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023cc:	2300      	movs	r3, #0
 80023ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d041      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023e4:	d02a      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80023e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023ea:	d824      	bhi.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023f0:	d008      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023f6:	d81e      	bhi.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00a      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002400:	d010      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002402:	e018      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002404:	4b86      	ldr	r3, [pc, #536]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a85      	ldr	r2, [pc, #532]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002410:	e015      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3304      	adds	r3, #4
 8002416:	2100      	movs	r1, #0
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fabb 	bl	8002994 <RCCEx_PLLSAI1_Config>
 800241e:	4603      	mov	r3, r0
 8002420:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002422:	e00c      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3320      	adds	r3, #32
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fba6 	bl	8002b7c <RCCEx_PLLSAI2_Config>
 8002430:	4603      	mov	r3, r0
 8002432:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002434:	e003      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	74fb      	strb	r3, [r7, #19]
      break;
 800243a:	e000      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800243c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800243e:	7cfb      	ldrb	r3, [r7, #19]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10b      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002444:	4b76      	ldr	r3, [pc, #472]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002452:	4973      	ldr	r1, [pc, #460]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800245a:	e001      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800245c:	7cfb      	ldrb	r3, [r7, #19]
 800245e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d041      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002470:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002474:	d02a      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002476:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800247a:	d824      	bhi.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800247c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002480:	d008      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002482:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002486:	d81e      	bhi.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00a      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800248c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002490:	d010      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002492:	e018      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002494:	4b62      	ldr	r3, [pc, #392]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4a61      	ldr	r2, [pc, #388]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024a0:	e015      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3304      	adds	r3, #4
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fa73 	bl	8002994 <RCCEx_PLLSAI1_Config>
 80024ae:	4603      	mov	r3, r0
 80024b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024b2:	e00c      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3320      	adds	r3, #32
 80024b8:	2100      	movs	r1, #0
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 fb5e 	bl	8002b7c <RCCEx_PLLSAI2_Config>
 80024c0:	4603      	mov	r3, r0
 80024c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024c4:	e003      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	74fb      	strb	r3, [r7, #19]
      break;
 80024ca:	e000      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80024cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ce:	7cfb      	ldrb	r3, [r7, #19]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10b      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024d4:	4b52      	ldr	r3, [pc, #328]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024e2:	494f      	ldr	r1, [pc, #316]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024ea:	e001      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80a0 	beq.w	800263e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002502:	4b47      	ldr	r3, [pc, #284]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002512:	2300      	movs	r3, #0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00d      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002518:	4b41      	ldr	r3, [pc, #260]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251c:	4a40      	ldr	r2, [pc, #256]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002522:	6593      	str	r3, [r2, #88]	; 0x58
 8002524:	4b3e      	ldr	r3, [pc, #248]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002530:	2301      	movs	r3, #1
 8002532:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002534:	4b3b      	ldr	r3, [pc, #236]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a3a      	ldr	r2, [pc, #232]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800253a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002540:	f7fe fc32 	bl	8000da8 <HAL_GetTick>
 8002544:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002546:	e009      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002548:	f7fe fc2e 	bl	8000da8 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d902      	bls.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	74fb      	strb	r3, [r7, #19]
        break;
 800255a:	e005      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800255c:	4b31      	ldr	r3, [pc, #196]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0ef      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002568:	7cfb      	ldrb	r3, [r7, #19]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d15c      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800256e:	4b2c      	ldr	r3, [pc, #176]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002578:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01f      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	429a      	cmp	r2, r3
 800258a:	d019      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800258c:	4b24      	ldr	r3, [pc, #144]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002596:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	4a20      	ldr	r2, [pc, #128]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025a8:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ae:	4a1c      	ldr	r2, [pc, #112]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025b8:	4a19      	ldr	r2, [pc, #100]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d016      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ca:	f7fe fbed 	bl	8000da8 <HAL_GetTick>
 80025ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d0:	e00b      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7fe fbe9 	bl	8000da8 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d902      	bls.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	74fb      	strb	r3, [r7, #19]
            break;
 80025e8:	e006      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ea:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ec      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10c      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800260e:	4904      	ldr	r1, [pc, #16]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002616:	e009      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002618:	7cfb      	ldrb	r3, [r7, #19]
 800261a:	74bb      	strb	r3, [r7, #18]
 800261c:	e006      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000
 8002624:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002628:	7cfb      	ldrb	r3, [r7, #19]
 800262a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800262c:	7c7b      	ldrb	r3, [r7, #17]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d105      	bne.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002632:	4b9e      	ldr	r3, [pc, #632]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002636:	4a9d      	ldr	r2, [pc, #628]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800264a:	4b98      	ldr	r3, [pc, #608]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002650:	f023 0203 	bic.w	r2, r3, #3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002658:	4994      	ldr	r1, [pc, #592]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800266c:	4b8f      	ldr	r3, [pc, #572]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	f023 020c 	bic.w	r2, r3, #12
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	498c      	ldr	r1, [pc, #560]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800268e:	4b87      	ldr	r3, [pc, #540]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002694:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	4983      	ldr	r1, [pc, #524]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026b0:	4b7e      	ldr	r3, [pc, #504]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	497b      	ldr	r1, [pc, #492]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026d2:	4b76      	ldr	r3, [pc, #472]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e0:	4972      	ldr	r1, [pc, #456]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0320 	and.w	r3, r3, #32
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026f4:	4b6d      	ldr	r3, [pc, #436]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002702:	496a      	ldr	r1, [pc, #424]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002716:	4b65      	ldr	r3, [pc, #404]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002724:	4961      	ldr	r1, [pc, #388]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002738:	4b5c      	ldr	r3, [pc, #368]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002746:	4959      	ldr	r1, [pc, #356]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800275a:	4b54      	ldr	r3, [pc, #336]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002760:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002768:	4950      	ldr	r1, [pc, #320]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800277c:	4b4b      	ldr	r3, [pc, #300]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	4948      	ldr	r1, [pc, #288]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800279e:	4b43      	ldr	r3, [pc, #268]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	493f      	ldr	r1, [pc, #252]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d028      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027c0:	4b3a      	ldr	r3, [pc, #232]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ce:	4937      	ldr	r1, [pc, #220]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027de:	d106      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027e0:	4b32      	ldr	r3, [pc, #200]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4a31      	ldr	r2, [pc, #196]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ea:	60d3      	str	r3, [r2, #12]
 80027ec:	e011      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027f6:	d10c      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3304      	adds	r3, #4
 80027fc:	2101      	movs	r1, #1
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f8c8 	bl	8002994 <RCCEx_PLLSAI1_Config>
 8002804:	4603      	mov	r3, r0
 8002806:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002808:	7cfb      	ldrb	r3, [r7, #19]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800280e:	7cfb      	ldrb	r3, [r7, #19]
 8002810:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d028      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800281e:	4b23      	ldr	r3, [pc, #140]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002824:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282c:	491f      	ldr	r1, [pc, #124]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800283c:	d106      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800283e:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	4a1a      	ldr	r2, [pc, #104]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002844:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002848:	60d3      	str	r3, [r2, #12]
 800284a:	e011      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002850:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002854:	d10c      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3304      	adds	r3, #4
 800285a:	2101      	movs	r1, #1
 800285c:	4618      	mov	r0, r3
 800285e:	f000 f899 	bl	8002994 <RCCEx_PLLSAI1_Config>
 8002862:	4603      	mov	r3, r0
 8002864:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002866:	7cfb      	ldrb	r3, [r7, #19]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800286c:	7cfb      	ldrb	r3, [r7, #19]
 800286e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d02b      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002882:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288a:	4908      	ldr	r1, [pc, #32]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002896:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800289a:	d109      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4a02      	ldr	r2, [pc, #8]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028a6:	60d3      	str	r3, [r2, #12]
 80028a8:	e014      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3304      	adds	r3, #4
 80028be:	2101      	movs	r1, #1
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 f867 	bl	8002994 <RCCEx_PLLSAI1_Config>
 80028c6:	4603      	mov	r3, r0
 80028c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ca:	7cfb      	ldrb	r3, [r7, #19]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80028d0:	7cfb      	ldrb	r3, [r7, #19]
 80028d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d02f      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028e0:	4b2b      	ldr	r3, [pc, #172]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028ee:	4928      	ldr	r1, [pc, #160]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028fe:	d10d      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3304      	adds	r3, #4
 8002904:	2102      	movs	r1, #2
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f844 	bl	8002994 <RCCEx_PLLSAI1_Config>
 800290c:	4603      	mov	r3, r0
 800290e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002910:	7cfb      	ldrb	r3, [r7, #19]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d014      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002916:	7cfb      	ldrb	r3, [r7, #19]
 8002918:	74bb      	strb	r3, [r7, #18]
 800291a:	e011      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002924:	d10c      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3320      	adds	r3, #32
 800292a:	2102      	movs	r1, #2
 800292c:	4618      	mov	r0, r3
 800292e:	f000 f925 	bl	8002b7c <RCCEx_PLLSAI2_Config>
 8002932:	4603      	mov	r3, r0
 8002934:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002936:	7cfb      	ldrb	r3, [r7, #19]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800293c:	7cfb      	ldrb	r3, [r7, #19]
 800293e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800295a:	490d      	ldr	r1, [pc, #52]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00b      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002974:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800297e:	4904      	ldr	r1, [pc, #16]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002986:	7cbb      	ldrb	r3, [r7, #18]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40021000 	.word	0x40021000

08002994 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029a2:	4b75      	ldr	r3, [pc, #468]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d018      	beq.n	80029e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029ae:	4b72      	ldr	r3, [pc, #456]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f003 0203 	and.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d10d      	bne.n	80029da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
       ||
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029c6:	4b6c      	ldr	r3, [pc, #432]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
       ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d047      	beq.n	8002a6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
 80029de:	e044      	b.n	8002a6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d018      	beq.n	8002a1a <RCCEx_PLLSAI1_Config+0x86>
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d825      	bhi.n	8002a38 <RCCEx_PLLSAI1_Config+0xa4>
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d002      	beq.n	80029f6 <RCCEx_PLLSAI1_Config+0x62>
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d009      	beq.n	8002a08 <RCCEx_PLLSAI1_Config+0x74>
 80029f4:	e020      	b.n	8002a38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029f6:	4b60      	ldr	r3, [pc, #384]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d11d      	bne.n	8002a3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a06:	e01a      	b.n	8002a3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a08:	4b5b      	ldr	r3, [pc, #364]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d116      	bne.n	8002a42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a18:	e013      	b.n	8002a42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a1a:	4b57      	ldr	r3, [pc, #348]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10f      	bne.n	8002a46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a26:	4b54      	ldr	r3, [pc, #336]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a36:	e006      	b.n	8002a46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a3c:	e004      	b.n	8002a48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a3e:	bf00      	nop
 8002a40:	e002      	b.n	8002a48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a42:	bf00      	nop
 8002a44:	e000      	b.n	8002a48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a46:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10d      	bne.n	8002a6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a4e:	4b4a      	ldr	r3, [pc, #296]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6819      	ldr	r1, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	430b      	orrs	r3, r1
 8002a64:	4944      	ldr	r1, [pc, #272]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d17d      	bne.n	8002b6c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a70:	4b41      	ldr	r3, [pc, #260]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a40      	ldr	r2, [pc, #256]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a7c:	f7fe f994 	bl	8000da8 <HAL_GetTick>
 8002a80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a82:	e009      	b.n	8002a98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a84:	f7fe f990 	bl	8000da8 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d902      	bls.n	8002a98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	73fb      	strb	r3, [r7, #15]
        break;
 8002a96:	e005      	b.n	8002aa4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a98:	4b37      	ldr	r3, [pc, #220]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1ef      	bne.n	8002a84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d160      	bne.n	8002b6c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d111      	bne.n	8002ad4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ab0:	4b31      	ldr	r3, [pc, #196]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6892      	ldr	r2, [r2, #8]
 8002ac0:	0211      	lsls	r1, r2, #8
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68d2      	ldr	r2, [r2, #12]
 8002ac6:	0912      	lsrs	r2, r2, #4
 8002ac8:	0452      	lsls	r2, r2, #17
 8002aca:	430a      	orrs	r2, r1
 8002acc:	492a      	ldr	r1, [pc, #168]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	610b      	str	r3, [r1, #16]
 8002ad2:	e027      	b.n	8002b24 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d112      	bne.n	8002b00 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ada:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ae2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6892      	ldr	r2, [r2, #8]
 8002aea:	0211      	lsls	r1, r2, #8
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6912      	ldr	r2, [r2, #16]
 8002af0:	0852      	lsrs	r2, r2, #1
 8002af2:	3a01      	subs	r2, #1
 8002af4:	0552      	lsls	r2, r2, #21
 8002af6:	430a      	orrs	r2, r1
 8002af8:	491f      	ldr	r1, [pc, #124]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	610b      	str	r3, [r1, #16]
 8002afe:	e011      	b.n	8002b24 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b00:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6892      	ldr	r2, [r2, #8]
 8002b10:	0211      	lsls	r1, r2, #8
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6952      	ldr	r2, [r2, #20]
 8002b16:	0852      	lsrs	r2, r2, #1
 8002b18:	3a01      	subs	r2, #1
 8002b1a:	0652      	lsls	r2, r2, #25
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	4916      	ldr	r1, [pc, #88]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b24:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a13      	ldr	r2, [pc, #76]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b30:	f7fe f93a 	bl	8000da8 <HAL_GetTick>
 8002b34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b36:	e009      	b.n	8002b4c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b38:	f7fe f936 	bl	8000da8 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d902      	bls.n	8002b4c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	73fb      	strb	r3, [r7, #15]
          break;
 8002b4a:	e005      	b.n	8002b58 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b4c:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0ef      	beq.n	8002b38 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b60:	691a      	ldr	r2, [r3, #16]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	4904      	ldr	r1, [pc, #16]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000

08002b7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b8a:	4b6a      	ldr	r3, [pc, #424]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d018      	beq.n	8002bc8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b96:	4b67      	ldr	r3, [pc, #412]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f003 0203 	and.w	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d10d      	bne.n	8002bc2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
       ||
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002bae:	4b61      	ldr	r3, [pc, #388]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	091b      	lsrs	r3, r3, #4
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
       ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d047      	beq.n	8002c52 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
 8002bc6:	e044      	b.n	8002c52 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d018      	beq.n	8002c02 <RCCEx_PLLSAI2_Config+0x86>
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d825      	bhi.n	8002c20 <RCCEx_PLLSAI2_Config+0xa4>
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d002      	beq.n	8002bde <RCCEx_PLLSAI2_Config+0x62>
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d009      	beq.n	8002bf0 <RCCEx_PLLSAI2_Config+0x74>
 8002bdc:	e020      	b.n	8002c20 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bde:	4b55      	ldr	r3, [pc, #340]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d11d      	bne.n	8002c26 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bee:	e01a      	b.n	8002c26 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bf0:	4b50      	ldr	r3, [pc, #320]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d116      	bne.n	8002c2a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c00:	e013      	b.n	8002c2a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c02:	4b4c      	ldr	r3, [pc, #304]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10f      	bne.n	8002c2e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c0e:	4b49      	ldr	r3, [pc, #292]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c1e:	e006      	b.n	8002c2e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
      break;
 8002c24:	e004      	b.n	8002c30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c26:	bf00      	nop
 8002c28:	e002      	b.n	8002c30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c2a:	bf00      	nop
 8002c2c:	e000      	b.n	8002c30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10d      	bne.n	8002c52 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c36:	4b3f      	ldr	r3, [pc, #252]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6819      	ldr	r1, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	430b      	orrs	r3, r1
 8002c4c:	4939      	ldr	r1, [pc, #228]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d167      	bne.n	8002d28 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c58:	4b36      	ldr	r3, [pc, #216]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a35      	ldr	r2, [pc, #212]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c64:	f7fe f8a0 	bl	8000da8 <HAL_GetTick>
 8002c68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c6a:	e009      	b.n	8002c80 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c6c:	f7fe f89c 	bl	8000da8 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d902      	bls.n	8002c80 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c7e:	e005      	b.n	8002c8c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c80:	4b2c      	ldr	r3, [pc, #176]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1ef      	bne.n	8002c6c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d14a      	bne.n	8002d28 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d111      	bne.n	8002cbc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c98:	4b26      	ldr	r3, [pc, #152]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6892      	ldr	r2, [r2, #8]
 8002ca8:	0211      	lsls	r1, r2, #8
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68d2      	ldr	r2, [r2, #12]
 8002cae:	0912      	lsrs	r2, r2, #4
 8002cb0:	0452      	lsls	r2, r2, #17
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	491f      	ldr	r1, [pc, #124]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	614b      	str	r3, [r1, #20]
 8002cba:	e011      	b.n	8002ce0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6892      	ldr	r2, [r2, #8]
 8002ccc:	0211      	lsls	r1, r2, #8
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6912      	ldr	r2, [r2, #16]
 8002cd2:	0852      	lsrs	r2, r2, #1
 8002cd4:	3a01      	subs	r2, #1
 8002cd6:	0652      	lsls	r2, r2, #25
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	4916      	ldr	r1, [pc, #88]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a13      	ldr	r2, [pc, #76]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cec:	f7fe f85c 	bl	8000da8 <HAL_GetTick>
 8002cf0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cf2:	e009      	b.n	8002d08 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cf4:	f7fe f858 	bl	8000da8 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d902      	bls.n	8002d08 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	73fb      	strb	r3, [r7, #15]
          break;
 8002d06:	e005      	b.n	8002d14 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d08:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0ef      	beq.n	8002cf4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	4904      	ldr	r1, [pc, #16]	; (8002d34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000

08002d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e049      	b.n	8002dde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fd fe70 	bl	8000a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3304      	adds	r3, #4
 8002d74:	4619      	mov	r1, r3
 8002d76:	4610      	mov	r0, r2
 8002d78:	f000 faf2 	bl	8003360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e049      	b.n	8002e8c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d106      	bne.n	8002e12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7fd fdf9 	bl	8000a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2202      	movs	r2, #2
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3304      	adds	r3, #4
 8002e22:	4619      	mov	r1, r3
 8002e24:	4610      	mov	r0, r2
 8002e26:	f000 fa9b 	bl	8003360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d122      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d11b      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0202 	mvn.w	r2, #2
 8002ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fa24 	bl	8003324 <HAL_TIM_IC_CaptureCallback>
 8002edc:	e005      	b.n	8002eea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fa16 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fa27 	bl	8003338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d122      	bne.n	8002f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d11b      	bne.n	8002f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0204 	mvn.w	r2, #4
 8002f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f9fa 	bl	8003324 <HAL_TIM_IC_CaptureCallback>
 8002f30:	e005      	b.n	8002f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f9ec 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f9fd 	bl	8003338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d122      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d11b      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0208 	mvn.w	r2, #8
 8002f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f9d0 	bl	8003324 <HAL_TIM_IC_CaptureCallback>
 8002f84:	e005      	b.n	8002f92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f9c2 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f9d3 	bl	8003338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b10      	cmp	r3, #16
 8002fa4:	d122      	bne.n	8002fec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d11b      	bne.n	8002fec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0210 	mvn.w	r2, #16
 8002fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f9a6 	bl	8003324 <HAL_TIM_IC_CaptureCallback>
 8002fd8:	e005      	b.n	8002fe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f998 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f9a9 	bl	8003338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d10e      	bne.n	8003018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b01      	cmp	r3, #1
 8003006:	d107      	bne.n	8003018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0201 	mvn.w	r2, #1
 8003010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f972 	bl	80032fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003022:	2b80      	cmp	r3, #128	; 0x80
 8003024:	d10e      	bne.n	8003044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003030:	2b80      	cmp	r3, #128	; 0x80
 8003032:	d107      	bne.n	8003044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800303c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fd90 	bl	8003b64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003052:	d10e      	bne.n	8003072 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305e:	2b80      	cmp	r3, #128	; 0x80
 8003060:	d107      	bne.n	8003072 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800306a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 fd83 	bl	8003b78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307c:	2b40      	cmp	r3, #64	; 0x40
 800307e:	d10e      	bne.n	800309e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308a:	2b40      	cmp	r3, #64	; 0x40
 800308c:	d107      	bne.n	800309e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f957 	bl	800334c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f003 0320 	and.w	r3, r3, #32
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d10e      	bne.n	80030ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f003 0320 	and.w	r3, r3, #32
 80030b6:	2b20      	cmp	r3, #32
 80030b8:	d107      	bne.n	80030ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f06f 0220 	mvn.w	r2, #32
 80030c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fd43 	bl	8003b50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e0ff      	b.n	80032f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b14      	cmp	r3, #20
 80030fe:	f200 80f0 	bhi.w	80032e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003102:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	0800315d 	.word	0x0800315d
 800310c:	080032e3 	.word	0x080032e3
 8003110:	080032e3 	.word	0x080032e3
 8003114:	080032e3 	.word	0x080032e3
 8003118:	0800319d 	.word	0x0800319d
 800311c:	080032e3 	.word	0x080032e3
 8003120:	080032e3 	.word	0x080032e3
 8003124:	080032e3 	.word	0x080032e3
 8003128:	080031df 	.word	0x080031df
 800312c:	080032e3 	.word	0x080032e3
 8003130:	080032e3 	.word	0x080032e3
 8003134:	080032e3 	.word	0x080032e3
 8003138:	0800321f 	.word	0x0800321f
 800313c:	080032e3 	.word	0x080032e3
 8003140:	080032e3 	.word	0x080032e3
 8003144:	080032e3 	.word	0x080032e3
 8003148:	08003261 	.word	0x08003261
 800314c:	080032e3 	.word	0x080032e3
 8003150:	080032e3 	.word	0x080032e3
 8003154:	080032e3 	.word	0x080032e3
 8003158:	080032a1 	.word	0x080032a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f996 	bl	8003494 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0208 	orr.w	r2, r2, #8
 8003176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0204 	bic.w	r2, r2, #4
 8003186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6999      	ldr	r1, [r3, #24]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	619a      	str	r2, [r3, #24]
      break;
 800319a:	e0a5      	b.n	80032e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fa06 	bl	80035b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6999      	ldr	r1, [r3, #24]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	021a      	lsls	r2, r3, #8
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	619a      	str	r2, [r3, #24]
      break;
 80031dc:	e084      	b.n	80032e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 fa6f 	bl	80036c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 0208 	orr.w	r2, r2, #8
 80031f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69da      	ldr	r2, [r3, #28]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0204 	bic.w	r2, r2, #4
 8003208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69d9      	ldr	r1, [r3, #28]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	61da      	str	r2, [r3, #28]
      break;
 800321c:	e064      	b.n	80032e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68b9      	ldr	r1, [r7, #8]
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fad7 	bl	80037d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69da      	ldr	r2, [r3, #28]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69da      	ldr	r2, [r3, #28]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69d9      	ldr	r1, [r3, #28]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	021a      	lsls	r2, r3, #8
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	61da      	str	r2, [r3, #28]
      break;
 800325e:	e043      	b.n	80032e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fb20 	bl	80038ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0208 	orr.w	r2, r2, #8
 800327a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0204 	bic.w	r2, r2, #4
 800328a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800329e:	e023      	b.n	80032e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fb64 	bl	8003974 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	021a      	lsls	r2, r3, #8
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80032e0:	e002      	b.n	80032e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	75fb      	strb	r3, [r7, #23]
      break;
 80032e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop

080032fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a40      	ldr	r2, [pc, #256]	; (8003474 <TIM_Base_SetConfig+0x114>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d013      	beq.n	80033a0 <TIM_Base_SetConfig+0x40>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337e:	d00f      	beq.n	80033a0 <TIM_Base_SetConfig+0x40>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a3d      	ldr	r2, [pc, #244]	; (8003478 <TIM_Base_SetConfig+0x118>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00b      	beq.n	80033a0 <TIM_Base_SetConfig+0x40>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a3c      	ldr	r2, [pc, #240]	; (800347c <TIM_Base_SetConfig+0x11c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d007      	beq.n	80033a0 <TIM_Base_SetConfig+0x40>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a3b      	ldr	r2, [pc, #236]	; (8003480 <TIM_Base_SetConfig+0x120>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d003      	beq.n	80033a0 <TIM_Base_SetConfig+0x40>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a3a      	ldr	r2, [pc, #232]	; (8003484 <TIM_Base_SetConfig+0x124>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d108      	bne.n	80033b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a2f      	ldr	r2, [pc, #188]	; (8003474 <TIM_Base_SetConfig+0x114>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d01f      	beq.n	80033fa <TIM_Base_SetConfig+0x9a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c0:	d01b      	beq.n	80033fa <TIM_Base_SetConfig+0x9a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a2c      	ldr	r2, [pc, #176]	; (8003478 <TIM_Base_SetConfig+0x118>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d017      	beq.n	80033fa <TIM_Base_SetConfig+0x9a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a2b      	ldr	r2, [pc, #172]	; (800347c <TIM_Base_SetConfig+0x11c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d013      	beq.n	80033fa <TIM_Base_SetConfig+0x9a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a2a      	ldr	r2, [pc, #168]	; (8003480 <TIM_Base_SetConfig+0x120>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00f      	beq.n	80033fa <TIM_Base_SetConfig+0x9a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a29      	ldr	r2, [pc, #164]	; (8003484 <TIM_Base_SetConfig+0x124>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00b      	beq.n	80033fa <TIM_Base_SetConfig+0x9a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a28      	ldr	r2, [pc, #160]	; (8003488 <TIM_Base_SetConfig+0x128>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <TIM_Base_SetConfig+0x9a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a27      	ldr	r2, [pc, #156]	; (800348c <TIM_Base_SetConfig+0x12c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d003      	beq.n	80033fa <TIM_Base_SetConfig+0x9a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a26      	ldr	r2, [pc, #152]	; (8003490 <TIM_Base_SetConfig+0x130>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d108      	bne.n	800340c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a10      	ldr	r2, [pc, #64]	; (8003474 <TIM_Base_SetConfig+0x114>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00f      	beq.n	8003458 <TIM_Base_SetConfig+0xf8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a12      	ldr	r2, [pc, #72]	; (8003484 <TIM_Base_SetConfig+0x124>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00b      	beq.n	8003458 <TIM_Base_SetConfig+0xf8>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a11      	ldr	r2, [pc, #68]	; (8003488 <TIM_Base_SetConfig+0x128>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d007      	beq.n	8003458 <TIM_Base_SetConfig+0xf8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a10      	ldr	r2, [pc, #64]	; (800348c <TIM_Base_SetConfig+0x12c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d003      	beq.n	8003458 <TIM_Base_SetConfig+0xf8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a0f      	ldr	r2, [pc, #60]	; (8003490 <TIM_Base_SetConfig+0x130>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d103      	bne.n	8003460 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	615a      	str	r2, [r3, #20]
}
 8003466:	bf00      	nop
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40012c00 	.word	0x40012c00
 8003478:	40000400 	.word	0x40000400
 800347c:	40000800 	.word	0x40000800
 8003480:	40000c00 	.word	0x40000c00
 8003484:	40013400 	.word	0x40013400
 8003488:	40014000 	.word	0x40014000
 800348c:	40014400 	.word	0x40014400
 8003490:	40014800 	.word	0x40014800

08003494 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	f023 0201 	bic.w	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0303 	bic.w	r3, r3, #3
 80034ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f023 0302 	bic.w	r3, r3, #2
 80034e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a2c      	ldr	r2, [pc, #176]	; (80035a0 <TIM_OC1_SetConfig+0x10c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00f      	beq.n	8003514 <TIM_OC1_SetConfig+0x80>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a2b      	ldr	r2, [pc, #172]	; (80035a4 <TIM_OC1_SetConfig+0x110>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00b      	beq.n	8003514 <TIM_OC1_SetConfig+0x80>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a2a      	ldr	r2, [pc, #168]	; (80035a8 <TIM_OC1_SetConfig+0x114>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d007      	beq.n	8003514 <TIM_OC1_SetConfig+0x80>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a29      	ldr	r2, [pc, #164]	; (80035ac <TIM_OC1_SetConfig+0x118>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d003      	beq.n	8003514 <TIM_OC1_SetConfig+0x80>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a28      	ldr	r2, [pc, #160]	; (80035b0 <TIM_OC1_SetConfig+0x11c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d10c      	bne.n	800352e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f023 0308 	bic.w	r3, r3, #8
 800351a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f023 0304 	bic.w	r3, r3, #4
 800352c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <TIM_OC1_SetConfig+0x10c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00f      	beq.n	8003556 <TIM_OC1_SetConfig+0xc2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a1a      	ldr	r2, [pc, #104]	; (80035a4 <TIM_OC1_SetConfig+0x110>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00b      	beq.n	8003556 <TIM_OC1_SetConfig+0xc2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a19      	ldr	r2, [pc, #100]	; (80035a8 <TIM_OC1_SetConfig+0x114>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d007      	beq.n	8003556 <TIM_OC1_SetConfig+0xc2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a18      	ldr	r2, [pc, #96]	; (80035ac <TIM_OC1_SetConfig+0x118>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d003      	beq.n	8003556 <TIM_OC1_SetConfig+0xc2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a17      	ldr	r2, [pc, #92]	; (80035b0 <TIM_OC1_SetConfig+0x11c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d111      	bne.n	800357a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800355c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	621a      	str	r2, [r3, #32]
}
 8003594:	bf00      	nop
 8003596:	371c      	adds	r7, #28
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	40012c00 	.word	0x40012c00
 80035a4:	40013400 	.word	0x40013400
 80035a8:	40014000 	.word	0x40014000
 80035ac:	40014400 	.word	0x40014400
 80035b0:	40014800 	.word	0x40014800

080035b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f023 0210 	bic.w	r2, r3, #16
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	021b      	lsls	r3, r3, #8
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f023 0320 	bic.w	r3, r3, #32
 8003602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a28      	ldr	r2, [pc, #160]	; (80036b4 <TIM_OC2_SetConfig+0x100>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d003      	beq.n	8003620 <TIM_OC2_SetConfig+0x6c>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a27      	ldr	r2, [pc, #156]	; (80036b8 <TIM_OC2_SetConfig+0x104>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d10d      	bne.n	800363c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800363a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a1d      	ldr	r2, [pc, #116]	; (80036b4 <TIM_OC2_SetConfig+0x100>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00f      	beq.n	8003664 <TIM_OC2_SetConfig+0xb0>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a1c      	ldr	r2, [pc, #112]	; (80036b8 <TIM_OC2_SetConfig+0x104>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00b      	beq.n	8003664 <TIM_OC2_SetConfig+0xb0>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a1b      	ldr	r2, [pc, #108]	; (80036bc <TIM_OC2_SetConfig+0x108>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d007      	beq.n	8003664 <TIM_OC2_SetConfig+0xb0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a1a      	ldr	r2, [pc, #104]	; (80036c0 <TIM_OC2_SetConfig+0x10c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d003      	beq.n	8003664 <TIM_OC2_SetConfig+0xb0>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a19      	ldr	r2, [pc, #100]	; (80036c4 <TIM_OC2_SetConfig+0x110>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d113      	bne.n	800368c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800366a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003672:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	621a      	str	r2, [r3, #32]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40012c00 	.word	0x40012c00
 80036b8:	40013400 	.word	0x40013400
 80036bc:	40014000 	.word	0x40014000
 80036c0:	40014400 	.word	0x40014400
 80036c4:	40014800 	.word	0x40014800

080036c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0303 	bic.w	r3, r3, #3
 8003702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	4313      	orrs	r3, r2
 8003720:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a27      	ldr	r2, [pc, #156]	; (80037c4 <TIM_OC3_SetConfig+0xfc>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d003      	beq.n	8003732 <TIM_OC3_SetConfig+0x6a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a26      	ldr	r2, [pc, #152]	; (80037c8 <TIM_OC3_SetConfig+0x100>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d10d      	bne.n	800374e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003738:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800374c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a1c      	ldr	r2, [pc, #112]	; (80037c4 <TIM_OC3_SetConfig+0xfc>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00f      	beq.n	8003776 <TIM_OC3_SetConfig+0xae>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a1b      	ldr	r2, [pc, #108]	; (80037c8 <TIM_OC3_SetConfig+0x100>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00b      	beq.n	8003776 <TIM_OC3_SetConfig+0xae>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a1a      	ldr	r2, [pc, #104]	; (80037cc <TIM_OC3_SetConfig+0x104>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d007      	beq.n	8003776 <TIM_OC3_SetConfig+0xae>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a19      	ldr	r2, [pc, #100]	; (80037d0 <TIM_OC3_SetConfig+0x108>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d003      	beq.n	8003776 <TIM_OC3_SetConfig+0xae>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <TIM_OC3_SetConfig+0x10c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d113      	bne.n	800379e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800377c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	621a      	str	r2, [r3, #32]
}
 80037b8:	bf00      	nop
 80037ba:	371c      	adds	r7, #28
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	40012c00 	.word	0x40012c00
 80037c8:	40013400 	.word	0x40013400
 80037cc:	40014000 	.word	0x40014000
 80037d0:	40014400 	.word	0x40014400
 80037d4:	40014800 	.word	0x40014800

080037d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800380a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003826:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	031b      	lsls	r3, r3, #12
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a18      	ldr	r2, [pc, #96]	; (8003898 <TIM_OC4_SetConfig+0xc0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d00f      	beq.n	800385c <TIM_OC4_SetConfig+0x84>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a17      	ldr	r2, [pc, #92]	; (800389c <TIM_OC4_SetConfig+0xc4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d00b      	beq.n	800385c <TIM_OC4_SetConfig+0x84>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a16      	ldr	r2, [pc, #88]	; (80038a0 <TIM_OC4_SetConfig+0xc8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d007      	beq.n	800385c <TIM_OC4_SetConfig+0x84>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a15      	ldr	r2, [pc, #84]	; (80038a4 <TIM_OC4_SetConfig+0xcc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d003      	beq.n	800385c <TIM_OC4_SetConfig+0x84>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a14      	ldr	r2, [pc, #80]	; (80038a8 <TIM_OC4_SetConfig+0xd0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d109      	bne.n	8003870 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003862:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	019b      	lsls	r3, r3, #6
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	621a      	str	r2, [r3, #32]
}
 800388a:	bf00      	nop
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40012c00 	.word	0x40012c00
 800389c:	40013400 	.word	0x40013400
 80038a0:	40014000 	.word	0x40014000
 80038a4:	40014400 	.word	0x40014400
 80038a8:	40014800 	.word	0x40014800

080038ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80038f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	041b      	lsls	r3, r3, #16
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a17      	ldr	r2, [pc, #92]	; (8003960 <TIM_OC5_SetConfig+0xb4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00f      	beq.n	8003926 <TIM_OC5_SetConfig+0x7a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a16      	ldr	r2, [pc, #88]	; (8003964 <TIM_OC5_SetConfig+0xb8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d00b      	beq.n	8003926 <TIM_OC5_SetConfig+0x7a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a15      	ldr	r2, [pc, #84]	; (8003968 <TIM_OC5_SetConfig+0xbc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d007      	beq.n	8003926 <TIM_OC5_SetConfig+0x7a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a14      	ldr	r2, [pc, #80]	; (800396c <TIM_OC5_SetConfig+0xc0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d003      	beq.n	8003926 <TIM_OC5_SetConfig+0x7a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a13      	ldr	r2, [pc, #76]	; (8003970 <TIM_OC5_SetConfig+0xc4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d109      	bne.n	800393a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	021b      	lsls	r3, r3, #8
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	621a      	str	r2, [r3, #32]
}
 8003954:	bf00      	nop
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	40012c00 	.word	0x40012c00
 8003964:	40013400 	.word	0x40013400
 8003968:	40014000 	.word	0x40014000
 800396c:	40014400 	.word	0x40014400
 8003970:	40014800 	.word	0x40014800

08003974 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	021b      	lsls	r3, r3, #8
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	051b      	lsls	r3, r3, #20
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a18      	ldr	r2, [pc, #96]	; (8003a2c <TIM_OC6_SetConfig+0xb8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d00f      	beq.n	80039f0 <TIM_OC6_SetConfig+0x7c>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a17      	ldr	r2, [pc, #92]	; (8003a30 <TIM_OC6_SetConfig+0xbc>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d00b      	beq.n	80039f0 <TIM_OC6_SetConfig+0x7c>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a16      	ldr	r2, [pc, #88]	; (8003a34 <TIM_OC6_SetConfig+0xc0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d007      	beq.n	80039f0 <TIM_OC6_SetConfig+0x7c>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a15      	ldr	r2, [pc, #84]	; (8003a38 <TIM_OC6_SetConfig+0xc4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d003      	beq.n	80039f0 <TIM_OC6_SetConfig+0x7c>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <TIM_OC6_SetConfig+0xc8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d109      	bne.n	8003a04 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	029b      	lsls	r3, r3, #10
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	621a      	str	r2, [r3, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40012c00 	.word	0x40012c00
 8003a30:	40013400 	.word	0x40013400
 8003a34:	40014000 	.word	0x40014000
 8003a38:	40014400 	.word	0x40014400
 8003a3c:	40014800 	.word	0x40014800

08003a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e068      	b.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a2e      	ldr	r2, [pc, #184]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d004      	beq.n	8003a8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2d      	ldr	r2, [pc, #180]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d108      	bne.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1e      	ldr	r2, [pc, #120]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01d      	beq.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aca:	d018      	beq.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a1b      	ldr	r2, [pc, #108]	; (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a1a      	ldr	r2, [pc, #104]	; (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a18      	ldr	r2, [pc, #96]	; (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a13      	ldr	r2, [pc, #76]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a14      	ldr	r2, [pc, #80]	; (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d10c      	bne.n	8003b18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40012c00 	.word	0x40012c00
 8003b3c:	40013400 	.word	0x40013400
 8003b40:	40000400 	.word	0x40000400
 8003b44:	40000800 	.word	0x40000800
 8003b48:	40000c00 	.word	0x40000c00
 8003b4c:	40014000 	.word	0x40014000

08003b50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e040      	b.n	8003c20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7fc ffa6 	bl	8000b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2224      	movs	r2, #36	; 0x24
 8003bb8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0201 	bic.w	r2, r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fb2e 	bl	800422c <UART_SetConfig>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e022      	b.n	8003c20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fdda 	bl	800479c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 fe61 	bl	80048e0 <UART_CheckIdleState>
 8003c1e:	4603      	mov	r3, r0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b0ba      	sub	sp, #232	; 0xe8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c52:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c56:	4013      	ands	r3, r2
 8003c58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003c5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d115      	bne.n	8003c90 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00f      	beq.n	8003c90 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d009      	beq.n	8003c90 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 82a6 	beq.w	80041d2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	4798      	blx	r3
      }
      return;
 8003c8e:	e2a0      	b.n	80041d2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003c90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8117 	beq.w	8003ec8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003ca6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003caa:	4b85      	ldr	r3, [pc, #532]	; (8003ec0 <HAL_UART_IRQHandler+0x298>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 810a 	beq.w	8003ec8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d011      	beq.n	8003ce4 <HAL_UART_IRQHandler+0xbc>
 8003cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00b      	beq.n	8003ce4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cda:	f043 0201 	orr.w	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d011      	beq.n	8003d14 <HAL_UART_IRQHandler+0xec>
 8003cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00b      	beq.n	8003d14 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2202      	movs	r2, #2
 8003d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d0a:	f043 0204 	orr.w	r2, r3, #4
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d011      	beq.n	8003d44 <HAL_UART_IRQHandler+0x11c>
 8003d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00b      	beq.n	8003d44 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2204      	movs	r2, #4
 8003d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d3a:	f043 0202 	orr.w	r2, r3, #2
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d017      	beq.n	8003d80 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d105      	bne.n	8003d68 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d60:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00b      	beq.n	8003d80 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d76:	f043 0208 	orr.w	r2, r3, #8
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d012      	beq.n	8003db2 <HAL_UART_IRQHandler+0x18a>
 8003d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00c      	beq.n	8003db2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003da0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da8:	f043 0220 	orr.w	r2, r3, #32
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 820c 	beq.w	80041d6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00d      	beq.n	8003de6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d007      	beq.n	8003de6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfa:	2b40      	cmp	r3, #64	; 0x40
 8003dfc:	d005      	beq.n	8003e0a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d04f      	beq.n	8003eaa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fe75 	bl	8004afa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1a:	2b40      	cmp	r3, #64	; 0x40
 8003e1c:	d141      	bne.n	8003ea2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3308      	adds	r3, #8
 8003e24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3308      	adds	r3, #8
 8003e46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e5a:	e841 2300 	strex	r3, r2, [r1]
 8003e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1d9      	bne.n	8003e1e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d013      	beq.n	8003e9a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	4a13      	ldr	r2, [pc, #76]	; (8003ec4 <HAL_UART_IRQHandler+0x29c>)
 8003e78:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fd f8ed 	bl	800105e <HAL_DMA_Abort_IT>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d017      	beq.n	8003eba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003e94:	4610      	mov	r0, r2
 8003e96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e98:	e00f      	b.n	8003eba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f9b0 	bl	8004200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea0:	e00b      	b.n	8003eba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f9ac 	bl	8004200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea8:	e007      	b.n	8003eba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f9a8 	bl	8004200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003eb8:	e18d      	b.n	80041d6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eba:	bf00      	nop
    return;
 8003ebc:	e18b      	b.n	80041d6 <HAL_UART_IRQHandler+0x5ae>
 8003ebe:	bf00      	nop
 8003ec0:	04000120 	.word	0x04000120
 8003ec4:	08004bc1 	.word	0x08004bc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	f040 8146 	bne.w	800415e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed6:	f003 0310 	and.w	r3, r3, #16
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 813f 	beq.w	800415e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 8138 	beq.w	800415e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2210      	movs	r2, #16
 8003ef4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f00:	2b40      	cmp	r3, #64	; 0x40
 8003f02:	f040 80b4 	bne.w	800406e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f12:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 815f 	beq.w	80041da <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f26:	429a      	cmp	r2, r3
 8003f28:	f080 8157 	bcs.w	80041da <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f040 8085 	bne.w	8004052 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f76:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f82:	e841 2300 	strex	r3, r2, [r1]
 8003f86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1da      	bne.n	8003f48 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3308      	adds	r3, #8
 8003f98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fa4:	f023 0301 	bic.w	r3, r3, #1
 8003fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3308      	adds	r3, #8
 8003fb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fc2:	e841 2300 	strex	r3, r2, [r1]
 8003fc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1e1      	bne.n	8003f92 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3308      	adds	r3, #8
 8003fd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fd8:	e853 3f00 	ldrex	r3, [r3]
 8003fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3308      	adds	r3, #8
 8003fee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ff2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ff4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ff8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ffa:	e841 2300 	strex	r3, r2, [r1]
 8003ffe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1e3      	bne.n	8003fce <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2220      	movs	r2, #32
 800400a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800401a:	e853 3f00 	ldrex	r3, [r3]
 800401e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004022:	f023 0310 	bic.w	r3, r3, #16
 8004026:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004034:	65bb      	str	r3, [r7, #88]	; 0x58
 8004036:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004038:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800403a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800403c:	e841 2300 	strex	r3, r2, [r1]
 8004040:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e4      	bne.n	8004012 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404c:	4618      	mov	r0, r3
 800404e:	f7fc ffc8 	bl	8000fe2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800405e:	b29b      	uxth	r3, r3
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	b29b      	uxth	r3, r3
 8004064:	4619      	mov	r1, r3
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f8d4 	bl	8004214 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800406c:	e0b5      	b.n	80041da <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800407a:	b29b      	uxth	r3, r3
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 80a7 	beq.w	80041de <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004090:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80a2 	beq.w	80041de <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040bc:	647b      	str	r3, [r7, #68]	; 0x44
 80040be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040c4:	e841 2300 	strex	r3, r2, [r1]
 80040c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e4      	bne.n	800409a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3308      	adds	r3, #8
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	623b      	str	r3, [r7, #32]
   return(result);
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	f023 0301 	bic.w	r3, r3, #1
 80040e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3308      	adds	r3, #8
 80040f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040f4:	633a      	str	r2, [r7, #48]	; 0x30
 80040f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e3      	bne.n	80040d0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	60fb      	str	r3, [r7, #12]
   return(result);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0310 	bic.w	r3, r3, #16
 800412e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004140:	69b9      	ldr	r1, [r7, #24]
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	e841 2300 	strex	r3, r2, [r1]
 8004148:	617b      	str	r3, [r7, #20]
   return(result);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e4      	bne.n	800411a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004150:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004154:	4619      	mov	r1, r3
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f85c 	bl	8004214 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800415c:	e03f      	b.n	80041de <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800415e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00e      	beq.n	8004188 <HAL_UART_IRQHandler+0x560>
 800416a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800416e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d008      	beq.n	8004188 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800417e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fd5d 	bl	8004c40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004186:	e02d      	b.n	80041e4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00e      	beq.n	80041b2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d01c      	beq.n	80041e2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	4798      	blx	r3
    }
    return;
 80041b0:	e017      	b.n	80041e2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d012      	beq.n	80041e4 <HAL_UART_IRQHandler+0x5bc>
 80041be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00c      	beq.n	80041e4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fd0e 	bl	8004bec <UART_EndTransmit_IT>
    return;
 80041d0:	e008      	b.n	80041e4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80041d2:	bf00      	nop
 80041d4:	e006      	b.n	80041e4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80041d6:	bf00      	nop
 80041d8:	e004      	b.n	80041e4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80041da:	bf00      	nop
 80041dc:	e002      	b.n	80041e4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80041de:	bf00      	nop
 80041e0:	e000      	b.n	80041e4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80041e2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80041e4:	37e8      	adds	r7, #232	; 0xe8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop

080041ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800422c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004230:	b08a      	sub	sp, #40	; 0x28
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	431a      	orrs	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	431a      	orrs	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	4313      	orrs	r3, r2
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	4ba4      	ldr	r3, [pc, #656]	; (80044ec <UART_SetConfig+0x2c0>)
 800425c:	4013      	ands	r3, r2
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	6812      	ldr	r2, [r2, #0]
 8004262:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004264:	430b      	orrs	r3, r1
 8004266:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a99      	ldr	r2, [pc, #612]	; (80044f0 <UART_SetConfig+0x2c4>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d004      	beq.n	8004298 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004294:	4313      	orrs	r3, r2
 8004296:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a8:	430a      	orrs	r2, r1
 80042aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a90      	ldr	r2, [pc, #576]	; (80044f4 <UART_SetConfig+0x2c8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d126      	bne.n	8004304 <UART_SetConfig+0xd8>
 80042b6:	4b90      	ldr	r3, [pc, #576]	; (80044f8 <UART_SetConfig+0x2cc>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d81b      	bhi.n	80042fc <UART_SetConfig+0xd0>
 80042c4:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <UART_SetConfig+0xa0>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	080042dd 	.word	0x080042dd
 80042d0:	080042ed 	.word	0x080042ed
 80042d4:	080042e5 	.word	0x080042e5
 80042d8:	080042f5 	.word	0x080042f5
 80042dc:	2301      	movs	r3, #1
 80042de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e2:	e116      	b.n	8004512 <UART_SetConfig+0x2e6>
 80042e4:	2302      	movs	r3, #2
 80042e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ea:	e112      	b.n	8004512 <UART_SetConfig+0x2e6>
 80042ec:	2304      	movs	r3, #4
 80042ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f2:	e10e      	b.n	8004512 <UART_SetConfig+0x2e6>
 80042f4:	2308      	movs	r3, #8
 80042f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fa:	e10a      	b.n	8004512 <UART_SetConfig+0x2e6>
 80042fc:	2310      	movs	r3, #16
 80042fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004302:	e106      	b.n	8004512 <UART_SetConfig+0x2e6>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a7c      	ldr	r2, [pc, #496]	; (80044fc <UART_SetConfig+0x2d0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d138      	bne.n	8004380 <UART_SetConfig+0x154>
 800430e:	4b7a      	ldr	r3, [pc, #488]	; (80044f8 <UART_SetConfig+0x2cc>)
 8004310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004314:	f003 030c 	and.w	r3, r3, #12
 8004318:	2b0c      	cmp	r3, #12
 800431a:	d82d      	bhi.n	8004378 <UART_SetConfig+0x14c>
 800431c:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <UART_SetConfig+0xf8>)
 800431e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004322:	bf00      	nop
 8004324:	08004359 	.word	0x08004359
 8004328:	08004379 	.word	0x08004379
 800432c:	08004379 	.word	0x08004379
 8004330:	08004379 	.word	0x08004379
 8004334:	08004369 	.word	0x08004369
 8004338:	08004379 	.word	0x08004379
 800433c:	08004379 	.word	0x08004379
 8004340:	08004379 	.word	0x08004379
 8004344:	08004361 	.word	0x08004361
 8004348:	08004379 	.word	0x08004379
 800434c:	08004379 	.word	0x08004379
 8004350:	08004379 	.word	0x08004379
 8004354:	08004371 	.word	0x08004371
 8004358:	2300      	movs	r3, #0
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435e:	e0d8      	b.n	8004512 <UART_SetConfig+0x2e6>
 8004360:	2302      	movs	r3, #2
 8004362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004366:	e0d4      	b.n	8004512 <UART_SetConfig+0x2e6>
 8004368:	2304      	movs	r3, #4
 800436a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436e:	e0d0      	b.n	8004512 <UART_SetConfig+0x2e6>
 8004370:	2308      	movs	r3, #8
 8004372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004376:	e0cc      	b.n	8004512 <UART_SetConfig+0x2e6>
 8004378:	2310      	movs	r3, #16
 800437a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437e:	e0c8      	b.n	8004512 <UART_SetConfig+0x2e6>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a5e      	ldr	r2, [pc, #376]	; (8004500 <UART_SetConfig+0x2d4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d125      	bne.n	80043d6 <UART_SetConfig+0x1aa>
 800438a:	4b5b      	ldr	r3, [pc, #364]	; (80044f8 <UART_SetConfig+0x2cc>)
 800438c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004390:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004394:	2b30      	cmp	r3, #48	; 0x30
 8004396:	d016      	beq.n	80043c6 <UART_SetConfig+0x19a>
 8004398:	2b30      	cmp	r3, #48	; 0x30
 800439a:	d818      	bhi.n	80043ce <UART_SetConfig+0x1a2>
 800439c:	2b20      	cmp	r3, #32
 800439e:	d00a      	beq.n	80043b6 <UART_SetConfig+0x18a>
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	d814      	bhi.n	80043ce <UART_SetConfig+0x1a2>
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <UART_SetConfig+0x182>
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d008      	beq.n	80043be <UART_SetConfig+0x192>
 80043ac:	e00f      	b.n	80043ce <UART_SetConfig+0x1a2>
 80043ae:	2300      	movs	r3, #0
 80043b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b4:	e0ad      	b.n	8004512 <UART_SetConfig+0x2e6>
 80043b6:	2302      	movs	r3, #2
 80043b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043bc:	e0a9      	b.n	8004512 <UART_SetConfig+0x2e6>
 80043be:	2304      	movs	r3, #4
 80043c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c4:	e0a5      	b.n	8004512 <UART_SetConfig+0x2e6>
 80043c6:	2308      	movs	r3, #8
 80043c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043cc:	e0a1      	b.n	8004512 <UART_SetConfig+0x2e6>
 80043ce:	2310      	movs	r3, #16
 80043d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d4:	e09d      	b.n	8004512 <UART_SetConfig+0x2e6>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a4a      	ldr	r2, [pc, #296]	; (8004504 <UART_SetConfig+0x2d8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d125      	bne.n	800442c <UART_SetConfig+0x200>
 80043e0:	4b45      	ldr	r3, [pc, #276]	; (80044f8 <UART_SetConfig+0x2cc>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043ea:	2bc0      	cmp	r3, #192	; 0xc0
 80043ec:	d016      	beq.n	800441c <UART_SetConfig+0x1f0>
 80043ee:	2bc0      	cmp	r3, #192	; 0xc0
 80043f0:	d818      	bhi.n	8004424 <UART_SetConfig+0x1f8>
 80043f2:	2b80      	cmp	r3, #128	; 0x80
 80043f4:	d00a      	beq.n	800440c <UART_SetConfig+0x1e0>
 80043f6:	2b80      	cmp	r3, #128	; 0x80
 80043f8:	d814      	bhi.n	8004424 <UART_SetConfig+0x1f8>
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <UART_SetConfig+0x1d8>
 80043fe:	2b40      	cmp	r3, #64	; 0x40
 8004400:	d008      	beq.n	8004414 <UART_SetConfig+0x1e8>
 8004402:	e00f      	b.n	8004424 <UART_SetConfig+0x1f8>
 8004404:	2300      	movs	r3, #0
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440a:	e082      	b.n	8004512 <UART_SetConfig+0x2e6>
 800440c:	2302      	movs	r3, #2
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004412:	e07e      	b.n	8004512 <UART_SetConfig+0x2e6>
 8004414:	2304      	movs	r3, #4
 8004416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441a:	e07a      	b.n	8004512 <UART_SetConfig+0x2e6>
 800441c:	2308      	movs	r3, #8
 800441e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004422:	e076      	b.n	8004512 <UART_SetConfig+0x2e6>
 8004424:	2310      	movs	r3, #16
 8004426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442a:	e072      	b.n	8004512 <UART_SetConfig+0x2e6>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a35      	ldr	r2, [pc, #212]	; (8004508 <UART_SetConfig+0x2dc>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d12a      	bne.n	800448c <UART_SetConfig+0x260>
 8004436:	4b30      	ldr	r3, [pc, #192]	; (80044f8 <UART_SetConfig+0x2cc>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004440:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004444:	d01a      	beq.n	800447c <UART_SetConfig+0x250>
 8004446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800444a:	d81b      	bhi.n	8004484 <UART_SetConfig+0x258>
 800444c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004450:	d00c      	beq.n	800446c <UART_SetConfig+0x240>
 8004452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004456:	d815      	bhi.n	8004484 <UART_SetConfig+0x258>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <UART_SetConfig+0x238>
 800445c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004460:	d008      	beq.n	8004474 <UART_SetConfig+0x248>
 8004462:	e00f      	b.n	8004484 <UART_SetConfig+0x258>
 8004464:	2300      	movs	r3, #0
 8004466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446a:	e052      	b.n	8004512 <UART_SetConfig+0x2e6>
 800446c:	2302      	movs	r3, #2
 800446e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004472:	e04e      	b.n	8004512 <UART_SetConfig+0x2e6>
 8004474:	2304      	movs	r3, #4
 8004476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447a:	e04a      	b.n	8004512 <UART_SetConfig+0x2e6>
 800447c:	2308      	movs	r3, #8
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004482:	e046      	b.n	8004512 <UART_SetConfig+0x2e6>
 8004484:	2310      	movs	r3, #16
 8004486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448a:	e042      	b.n	8004512 <UART_SetConfig+0x2e6>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a17      	ldr	r2, [pc, #92]	; (80044f0 <UART_SetConfig+0x2c4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d13a      	bne.n	800450c <UART_SetConfig+0x2e0>
 8004496:	4b18      	ldr	r3, [pc, #96]	; (80044f8 <UART_SetConfig+0x2cc>)
 8004498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044a4:	d01a      	beq.n	80044dc <UART_SetConfig+0x2b0>
 80044a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044aa:	d81b      	bhi.n	80044e4 <UART_SetConfig+0x2b8>
 80044ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b0:	d00c      	beq.n	80044cc <UART_SetConfig+0x2a0>
 80044b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b6:	d815      	bhi.n	80044e4 <UART_SetConfig+0x2b8>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <UART_SetConfig+0x298>
 80044bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c0:	d008      	beq.n	80044d4 <UART_SetConfig+0x2a8>
 80044c2:	e00f      	b.n	80044e4 <UART_SetConfig+0x2b8>
 80044c4:	2300      	movs	r3, #0
 80044c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ca:	e022      	b.n	8004512 <UART_SetConfig+0x2e6>
 80044cc:	2302      	movs	r3, #2
 80044ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d2:	e01e      	b.n	8004512 <UART_SetConfig+0x2e6>
 80044d4:	2304      	movs	r3, #4
 80044d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044da:	e01a      	b.n	8004512 <UART_SetConfig+0x2e6>
 80044dc:	2308      	movs	r3, #8
 80044de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e2:	e016      	b.n	8004512 <UART_SetConfig+0x2e6>
 80044e4:	2310      	movs	r3, #16
 80044e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ea:	e012      	b.n	8004512 <UART_SetConfig+0x2e6>
 80044ec:	efff69f3 	.word	0xefff69f3
 80044f0:	40008000 	.word	0x40008000
 80044f4:	40013800 	.word	0x40013800
 80044f8:	40021000 	.word	0x40021000
 80044fc:	40004400 	.word	0x40004400
 8004500:	40004800 	.word	0x40004800
 8004504:	40004c00 	.word	0x40004c00
 8004508:	40005000 	.word	0x40005000
 800450c:	2310      	movs	r3, #16
 800450e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a9f      	ldr	r2, [pc, #636]	; (8004794 <UART_SetConfig+0x568>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d17a      	bne.n	8004612 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800451c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004520:	2b08      	cmp	r3, #8
 8004522:	d824      	bhi.n	800456e <UART_SetConfig+0x342>
 8004524:	a201      	add	r2, pc, #4	; (adr r2, 800452c <UART_SetConfig+0x300>)
 8004526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452a:	bf00      	nop
 800452c:	08004551 	.word	0x08004551
 8004530:	0800456f 	.word	0x0800456f
 8004534:	08004559 	.word	0x08004559
 8004538:	0800456f 	.word	0x0800456f
 800453c:	0800455f 	.word	0x0800455f
 8004540:	0800456f 	.word	0x0800456f
 8004544:	0800456f 	.word	0x0800456f
 8004548:	0800456f 	.word	0x0800456f
 800454c:	08004567 	.word	0x08004567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004550:	f7fd feaa 	bl	80022a8 <HAL_RCC_GetPCLK1Freq>
 8004554:	61f8      	str	r0, [r7, #28]
        break;
 8004556:	e010      	b.n	800457a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004558:	4b8f      	ldr	r3, [pc, #572]	; (8004798 <UART_SetConfig+0x56c>)
 800455a:	61fb      	str	r3, [r7, #28]
        break;
 800455c:	e00d      	b.n	800457a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800455e:	f7fd fe0b 	bl	8002178 <HAL_RCC_GetSysClockFreq>
 8004562:	61f8      	str	r0, [r7, #28]
        break;
 8004564:	e009      	b.n	800457a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800456a:	61fb      	str	r3, [r7, #28]
        break;
 800456c:	e005      	b.n	800457a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004578:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80fb 	beq.w	8004778 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	4413      	add	r3, r2
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	429a      	cmp	r2, r3
 8004590:	d305      	bcc.n	800459e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	429a      	cmp	r2, r3
 800459c:	d903      	bls.n	80045a6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045a4:	e0e8      	b.n	8004778 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	2200      	movs	r2, #0
 80045aa:	461c      	mov	r4, r3
 80045ac:	4615      	mov	r5, r2
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	022b      	lsls	r3, r5, #8
 80045b8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80045bc:	0222      	lsls	r2, r4, #8
 80045be:	68f9      	ldr	r1, [r7, #12]
 80045c0:	6849      	ldr	r1, [r1, #4]
 80045c2:	0849      	lsrs	r1, r1, #1
 80045c4:	2000      	movs	r0, #0
 80045c6:	4688      	mov	r8, r1
 80045c8:	4681      	mov	r9, r0
 80045ca:	eb12 0a08 	adds.w	sl, r2, r8
 80045ce:	eb43 0b09 	adc.w	fp, r3, r9
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	603b      	str	r3, [r7, #0]
 80045da:	607a      	str	r2, [r7, #4]
 80045dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045e0:	4650      	mov	r0, sl
 80045e2:	4659      	mov	r1, fp
 80045e4:	f7fb fdf4 	bl	80001d0 <__aeabi_uldivmod>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4613      	mov	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045f6:	d308      	bcc.n	800460a <UART_SetConfig+0x3de>
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045fe:	d204      	bcs.n	800460a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	60da      	str	r2, [r3, #12]
 8004608:	e0b6      	b.n	8004778 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004610:	e0b2      	b.n	8004778 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800461a:	d15e      	bne.n	80046da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800461c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004620:	2b08      	cmp	r3, #8
 8004622:	d828      	bhi.n	8004676 <UART_SetConfig+0x44a>
 8004624:	a201      	add	r2, pc, #4	; (adr r2, 800462c <UART_SetConfig+0x400>)
 8004626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462a:	bf00      	nop
 800462c:	08004651 	.word	0x08004651
 8004630:	08004659 	.word	0x08004659
 8004634:	08004661 	.word	0x08004661
 8004638:	08004677 	.word	0x08004677
 800463c:	08004667 	.word	0x08004667
 8004640:	08004677 	.word	0x08004677
 8004644:	08004677 	.word	0x08004677
 8004648:	08004677 	.word	0x08004677
 800464c:	0800466f 	.word	0x0800466f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004650:	f7fd fe2a 	bl	80022a8 <HAL_RCC_GetPCLK1Freq>
 8004654:	61f8      	str	r0, [r7, #28]
        break;
 8004656:	e014      	b.n	8004682 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004658:	f7fd fe3c 	bl	80022d4 <HAL_RCC_GetPCLK2Freq>
 800465c:	61f8      	str	r0, [r7, #28]
        break;
 800465e:	e010      	b.n	8004682 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004660:	4b4d      	ldr	r3, [pc, #308]	; (8004798 <UART_SetConfig+0x56c>)
 8004662:	61fb      	str	r3, [r7, #28]
        break;
 8004664:	e00d      	b.n	8004682 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004666:	f7fd fd87 	bl	8002178 <HAL_RCC_GetSysClockFreq>
 800466a:	61f8      	str	r0, [r7, #28]
        break;
 800466c:	e009      	b.n	8004682 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800466e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004672:	61fb      	str	r3, [r7, #28]
        break;
 8004674:	e005      	b.n	8004682 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004680:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d077      	beq.n	8004778 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	005a      	lsls	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	085b      	lsrs	r3, r3, #1
 8004692:	441a      	add	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	fbb2 f3f3 	udiv	r3, r2, r3
 800469c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	2b0f      	cmp	r3, #15
 80046a2:	d916      	bls.n	80046d2 <UART_SetConfig+0x4a6>
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046aa:	d212      	bcs.n	80046d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f023 030f 	bic.w	r3, r3, #15
 80046b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	085b      	lsrs	r3, r3, #1
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	8afb      	ldrh	r3, [r7, #22]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	8afa      	ldrh	r2, [r7, #22]
 80046ce:	60da      	str	r2, [r3, #12]
 80046d0:	e052      	b.n	8004778 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046d8:	e04e      	b.n	8004778 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d827      	bhi.n	8004732 <UART_SetConfig+0x506>
 80046e2:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <UART_SetConfig+0x4bc>)
 80046e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e8:	0800470d 	.word	0x0800470d
 80046ec:	08004715 	.word	0x08004715
 80046f0:	0800471d 	.word	0x0800471d
 80046f4:	08004733 	.word	0x08004733
 80046f8:	08004723 	.word	0x08004723
 80046fc:	08004733 	.word	0x08004733
 8004700:	08004733 	.word	0x08004733
 8004704:	08004733 	.word	0x08004733
 8004708:	0800472b 	.word	0x0800472b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800470c:	f7fd fdcc 	bl	80022a8 <HAL_RCC_GetPCLK1Freq>
 8004710:	61f8      	str	r0, [r7, #28]
        break;
 8004712:	e014      	b.n	800473e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004714:	f7fd fdde 	bl	80022d4 <HAL_RCC_GetPCLK2Freq>
 8004718:	61f8      	str	r0, [r7, #28]
        break;
 800471a:	e010      	b.n	800473e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800471c:	4b1e      	ldr	r3, [pc, #120]	; (8004798 <UART_SetConfig+0x56c>)
 800471e:	61fb      	str	r3, [r7, #28]
        break;
 8004720:	e00d      	b.n	800473e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004722:	f7fd fd29 	bl	8002178 <HAL_RCC_GetSysClockFreq>
 8004726:	61f8      	str	r0, [r7, #28]
        break;
 8004728:	e009      	b.n	800473e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800472a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800472e:	61fb      	str	r3, [r7, #28]
        break;
 8004730:	e005      	b.n	800473e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800473c:	bf00      	nop
    }

    if (pclk != 0U)
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d019      	beq.n	8004778 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	085a      	lsrs	r2, r3, #1
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	441a      	add	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	fbb2 f3f3 	udiv	r3, r2, r3
 8004756:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2b0f      	cmp	r3, #15
 800475c:	d909      	bls.n	8004772 <UART_SetConfig+0x546>
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004764:	d205      	bcs.n	8004772 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60da      	str	r2, [r3, #12]
 8004770:	e002      	b.n	8004778 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004784:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004788:	4618      	mov	r0, r3
 800478a:	3728      	adds	r7, #40	; 0x28
 800478c:	46bd      	mov	sp, r7
 800478e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004792:	bf00      	nop
 8004794:	40008000 	.word	0x40008000
 8004798:	00f42400 	.word	0x00f42400

0800479c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	f003 0310 	and.w	r3, r3, #16
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01a      	beq.n	80048b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800489a:	d10a      	bne.n	80048b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	605a      	str	r2, [r3, #4]
  }
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048f0:	f7fc fa5a 	bl	8000da8 <HAL_GetTick>
 80048f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b08      	cmp	r3, #8
 8004902:	d10e      	bne.n	8004922 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f82d 	bl	8004972 <UART_WaitOnFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e023      	b.n	800496a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b04      	cmp	r3, #4
 800492e:	d10e      	bne.n	800494e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f817 	bl	8004972 <UART_WaitOnFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e00d      	b.n	800496a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2220      	movs	r2, #32
 8004952:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2220      	movs	r2, #32
 8004958:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b09c      	sub	sp, #112	; 0x70
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	4613      	mov	r3, r2
 8004980:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004982:	e0a5      	b.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498a:	f000 80a1 	beq.w	8004ad0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498e:	f7fc fa0b 	bl	8000da8 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800499a:	429a      	cmp	r2, r3
 800499c:	d302      	bcc.n	80049a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800499e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d13e      	bne.n	8004a22 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049b8:	667b      	str	r3, [r7, #100]	; 0x64
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049c4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049ca:	e841 2300 	strex	r3, r2, [r1]
 80049ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80049d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1e6      	bne.n	80049a4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3308      	adds	r3, #8
 80049dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	663b      	str	r3, [r7, #96]	; 0x60
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3308      	adds	r3, #8
 80049f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80049f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e5      	bne.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e067      	b.n	8004af2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d04f      	beq.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a3e:	d147      	bne.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a48:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	e853 3f00 	ldrex	r3, [r3]
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a68:	637b      	str	r3, [r7, #52]	; 0x34
 8004a6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a70:	e841 2300 	strex	r3, r2, [r1]
 8004a74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e6      	bne.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3308      	adds	r3, #8
 8004a82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	e853 3f00 	ldrex	r3, [r3]
 8004a8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f023 0301 	bic.w	r3, r3, #1
 8004a92:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3308      	adds	r3, #8
 8004a9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a9c:	623a      	str	r2, [r7, #32]
 8004a9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa0:	69f9      	ldr	r1, [r7, #28]
 8004aa2:	6a3a      	ldr	r2, [r7, #32]
 8004aa4:	e841 2300 	strex	r3, r2, [r1]
 8004aa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1e5      	bne.n	8004a7c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e010      	b.n	8004af2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	69da      	ldr	r2, [r3, #28]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	f43f af4a 	beq.w	8004984 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3770      	adds	r7, #112	; 0x70
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b095      	sub	sp, #84	; 0x54
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b20:	643b      	str	r3, [r7, #64]	; 0x40
 8004b22:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e6      	bne.n	8004b02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3308      	adds	r3, #8
 8004b3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	e853 3f00 	ldrex	r3, [r3]
 8004b42:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	f023 0301 	bic.w	r3, r3, #1
 8004b4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3308      	adds	r3, #8
 8004b52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b5c:	e841 2300 	strex	r3, r2, [r1]
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e5      	bne.n	8004b34 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d118      	bne.n	8004ba2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f023 0310 	bic.w	r3, r3, #16
 8004b84:	647b      	str	r3, [r7, #68]	; 0x44
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b8e:	61bb      	str	r3, [r7, #24]
 8004b90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	6979      	ldr	r1, [r7, #20]
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e6      	bne.n	8004b70 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004bb4:	bf00      	nop
 8004bb6:	3754      	adds	r7, #84	; 0x54
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7ff fb0e 	bl	8004200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004be4:	bf00      	nop
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c08:	61fb      	str	r3, [r7, #28]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	61bb      	str	r3, [r7, #24]
 8004c14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c16:	6979      	ldr	r1, [r7, #20]
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	e841 2300 	strex	r3, r2, [r1]
 8004c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e6      	bne.n	8004bf4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff fada 	bl	80041ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c38:	bf00      	nop
 8004c3a:	3720      	adds	r7, #32
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <__NVIC_SetPriority>:
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	6039      	str	r1, [r7, #0]
 8004c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	db0a      	blt.n	8004c7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	490c      	ldr	r1, [pc, #48]	; (8004ca0 <__NVIC_SetPriority+0x4c>)
 8004c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c72:	0112      	lsls	r2, r2, #4
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	440b      	add	r3, r1
 8004c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c7c:	e00a      	b.n	8004c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	4908      	ldr	r1, [pc, #32]	; (8004ca4 <__NVIC_SetPriority+0x50>)
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	3b04      	subs	r3, #4
 8004c8c:	0112      	lsls	r2, r2, #4
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	440b      	add	r3, r1
 8004c92:	761a      	strb	r2, [r3, #24]
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	e000e100 	.word	0xe000e100
 8004ca4:	e000ed00 	.word	0xe000ed00

08004ca8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004cac:	2100      	movs	r1, #0
 8004cae:	f06f 0004 	mvn.w	r0, #4
 8004cb2:	f7ff ffcf 	bl	8004c54 <__NVIC_SetPriority>
#endif
}
 8004cb6:	bf00      	nop
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cc2:	f3ef 8305 	mrs	r3, IPSR
 8004cc6:	603b      	str	r3, [r7, #0]
  return(result);
 8004cc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004cce:	f06f 0305 	mvn.w	r3, #5
 8004cd2:	607b      	str	r3, [r7, #4]
 8004cd4:	e00c      	b.n	8004cf0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004cd6:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <osKernelInitialize+0x44>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d105      	bne.n	8004cea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004cde:	4b08      	ldr	r3, [pc, #32]	; (8004d00 <osKernelInitialize+0x44>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	607b      	str	r3, [r7, #4]
 8004ce8:	e002      	b.n	8004cf0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004cea:	f04f 33ff 	mov.w	r3, #4294967295
 8004cee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004cf0:	687b      	ldr	r3, [r7, #4]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	200001a4 	.word	0x200001a4

08004d04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d0a:	f3ef 8305 	mrs	r3, IPSR
 8004d0e:	603b      	str	r3, [r7, #0]
  return(result);
 8004d10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004d16:	f06f 0305 	mvn.w	r3, #5
 8004d1a:	607b      	str	r3, [r7, #4]
 8004d1c:	e010      	b.n	8004d40 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d1e:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <osKernelStart+0x48>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d109      	bne.n	8004d3a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004d26:	f7ff ffbf 	bl	8004ca8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004d2a:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <osKernelStart+0x48>)
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004d30:	f001 f866 	bl	8005e00 <vTaskStartScheduler>
      stat = osOK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	607b      	str	r3, [r7, #4]
 8004d38:	e002      	b.n	8004d40 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d40:	687b      	ldr	r3, [r7, #4]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	200001a4 	.word	0x200001a4

08004d50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08e      	sub	sp, #56	; 0x38
 8004d54:	af04      	add	r7, sp, #16
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d60:	f3ef 8305 	mrs	r3, IPSR
 8004d64:	617b      	str	r3, [r7, #20]
  return(result);
 8004d66:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d17e      	bne.n	8004e6a <osThreadNew+0x11a>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d07b      	beq.n	8004e6a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004d72:	2380      	movs	r3, #128	; 0x80
 8004d74:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004d76:	2318      	movs	r3, #24
 8004d78:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d045      	beq.n	8004e16 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <osThreadNew+0x48>
        name = attr->name;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d002      	beq.n	8004da6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d008      	beq.n	8004dbe <osThreadNew+0x6e>
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	2b38      	cmp	r3, #56	; 0x38
 8004db0:	d805      	bhi.n	8004dbe <osThreadNew+0x6e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <osThreadNew+0x72>
        return (NULL);
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e054      	b.n	8004e6c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	089b      	lsrs	r3, r3, #2
 8004dd0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00e      	beq.n	8004df8 <osThreadNew+0xa8>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	2b5b      	cmp	r3, #91	; 0x5b
 8004de0:	d90a      	bls.n	8004df8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d006      	beq.n	8004df8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <osThreadNew+0xa8>
        mem = 1;
 8004df2:	2301      	movs	r3, #1
 8004df4:	61bb      	str	r3, [r7, #24]
 8004df6:	e010      	b.n	8004e1a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10c      	bne.n	8004e1a <osThreadNew+0xca>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d108      	bne.n	8004e1a <osThreadNew+0xca>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d104      	bne.n	8004e1a <osThreadNew+0xca>
          mem = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	61bb      	str	r3, [r7, #24]
 8004e14:	e001      	b.n	8004e1a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004e16:	2300      	movs	r3, #0
 8004e18:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d110      	bne.n	8004e42 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e28:	9202      	str	r2, [sp, #8]
 8004e2a:	9301      	str	r3, [sp, #4]
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	6a3a      	ldr	r2, [r7, #32]
 8004e34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 fe0c 	bl	8005a54 <xTaskCreateStatic>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	e013      	b.n	8004e6a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d110      	bne.n	8004e6a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	f107 0310 	add.w	r3, r7, #16
 8004e50:	9301      	str	r3, [sp, #4]
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 fe57 	bl	8005b0e <xTaskCreate>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d001      	beq.n	8004e6a <osThreadNew+0x11a>
            hTask = NULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e6a:	693b      	ldr	r3, [r7, #16]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3728      	adds	r7, #40	; 0x28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e7c:	f3ef 8305 	mrs	r3, IPSR
 8004e80:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e82:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <osDelay+0x1c>
    stat = osErrorISR;
 8004e88:	f06f 0305 	mvn.w	r3, #5
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	e007      	b.n	8004ea0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 ff7c 	bl	8005d98 <vTaskDelay>
    }
  }

  return (stat);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4a07      	ldr	r2, [pc, #28]	; (8004ed8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ebc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	4a06      	ldr	r2, [pc, #24]	; (8004edc <vApplicationGetIdleTaskMemory+0x30>)
 8004ec2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2280      	movs	r2, #128	; 0x80
 8004ec8:	601a      	str	r2, [r3, #0]
}
 8004eca:	bf00      	nop
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	200001a8 	.word	0x200001a8
 8004edc:	20000204 	.word	0x20000204

08004ee0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4a07      	ldr	r2, [pc, #28]	; (8004f0c <vApplicationGetTimerTaskMemory+0x2c>)
 8004ef0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	4a06      	ldr	r2, [pc, #24]	; (8004f10 <vApplicationGetTimerTaskMemory+0x30>)
 8004ef6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004efe:	601a      	str	r2, [r3, #0]
}
 8004f00:	bf00      	nop
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	20000404 	.word	0x20000404
 8004f10:	20000460 	.word	0x20000460

08004f14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f103 0208 	add.w	r2, r3, #8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f103 0208 	add.w	r2, r3, #8
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f103 0208 	add.w	r2, r3, #8
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	601a      	str	r2, [r3, #0]
}
 8004faa:	bf00      	nop
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fcc:	d103      	bne.n	8004fd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	e00c      	b.n	8004ff0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3308      	adds	r3, #8
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	e002      	b.n	8004fe4 <vListInsert+0x2e>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d2f6      	bcs.n	8004fde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	601a      	str	r2, [r3, #0]
}
 800501c:	bf00      	nop
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6892      	ldr	r2, [r2, #8]
 800503e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6852      	ldr	r2, [r2, #4]
 8005048:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	429a      	cmp	r2, r3
 8005052:	d103      	bne.n	800505c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	1e5a      	subs	r2, r3, #1
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050a2:	bf00      	nop
 80050a4:	e7fe      	b.n	80050a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050a6:	f002 f84d 	bl	8007144 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b2:	68f9      	ldr	r1, [r7, #12]
 80050b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050b6:	fb01 f303 	mul.w	r3, r1, r3
 80050ba:	441a      	add	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d6:	3b01      	subs	r3, #1
 80050d8:	68f9      	ldr	r1, [r7, #12]
 80050da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050dc:	fb01 f303 	mul.w	r3, r1, r3
 80050e0:	441a      	add	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	22ff      	movs	r2, #255	; 0xff
 80050ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	22ff      	movs	r2, #255	; 0xff
 80050f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d114      	bne.n	8005126 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01a      	beq.n	800513a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	3310      	adds	r3, #16
 8005108:	4618      	mov	r0, r3
 800510a:	f001 f903 	bl	8006314 <xTaskRemoveFromEventList>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d012      	beq.n	800513a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005114:	4b0c      	ldr	r3, [pc, #48]	; (8005148 <xQueueGenericReset+0xcc>)
 8005116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	e009      	b.n	800513a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	3310      	adds	r3, #16
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff fef2 	bl	8004f14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	3324      	adds	r3, #36	; 0x24
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff feed 	bl	8004f14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800513a:	f002 f833 	bl	80071a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800513e:	2301      	movs	r3, #1
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	e000ed04 	.word	0xe000ed04

0800514c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800514c:	b580      	push	{r7, lr}
 800514e:	b08e      	sub	sp, #56	; 0x38
 8005150:	af02      	add	r7, sp, #8
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10a      	bne.n	8005176 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005172:	bf00      	nop
 8005174:	e7fe      	b.n	8005174 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10a      	bne.n	8005192 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800518e:	bf00      	nop
 8005190:	e7fe      	b.n	8005190 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <xQueueGenericCreateStatic+0x52>
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <xQueueGenericCreateStatic+0x56>
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <xQueueGenericCreateStatic+0x58>
 80051a2:	2300      	movs	r3, #0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	623b      	str	r3, [r7, #32]
}
 80051ba:	bf00      	nop
 80051bc:	e7fe      	b.n	80051bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d102      	bne.n	80051ca <xQueueGenericCreateStatic+0x7e>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <xQueueGenericCreateStatic+0x82>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <xQueueGenericCreateStatic+0x84>
 80051ce:	2300      	movs	r3, #0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10a      	bne.n	80051ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	61fb      	str	r3, [r7, #28]
}
 80051e6:	bf00      	nop
 80051e8:	e7fe      	b.n	80051e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051ea:	2350      	movs	r3, #80	; 0x50
 80051ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b50      	cmp	r3, #80	; 0x50
 80051f2:	d00a      	beq.n	800520a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	61bb      	str	r3, [r7, #24]
}
 8005206:	bf00      	nop
 8005208:	e7fe      	b.n	8005208 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800520a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00d      	beq.n	8005232 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800521e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	4613      	mov	r3, r2
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	68b9      	ldr	r1, [r7, #8]
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 f805 	bl	800523c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005234:	4618      	mov	r0, r3
 8005236:	3730      	adds	r7, #48	; 0x30
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d103      	bne.n	8005258 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	e002      	b.n	800525e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800526a:	2101      	movs	r1, #1
 800526c:	69b8      	ldr	r0, [r7, #24]
 800526e:	f7ff ff05 	bl	800507c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	78fa      	ldrb	r2, [r7, #3]
 8005276:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800527a:	bf00      	nop
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
	...

08005284 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08e      	sub	sp, #56	; 0x38
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005292:	2300      	movs	r3, #0
 8005294:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <xQueueGenericSend+0x32>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d103      	bne.n	80052c4 <xQueueGenericSend+0x40>
 80052bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <xQueueGenericSend+0x44>
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <xQueueGenericSend+0x46>
 80052c8:	2300      	movs	r3, #0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10a      	bne.n	80052e4 <xQueueGenericSend+0x60>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052e0:	bf00      	nop
 80052e2:	e7fe      	b.n	80052e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d103      	bne.n	80052f2 <xQueueGenericSend+0x6e>
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <xQueueGenericSend+0x72>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <xQueueGenericSend+0x74>
 80052f6:	2300      	movs	r3, #0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <xQueueGenericSend+0x8e>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	623b      	str	r3, [r7, #32]
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005312:	f001 f9bd 	bl	8006690 <xTaskGetSchedulerState>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d102      	bne.n	8005322 <xQueueGenericSend+0x9e>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <xQueueGenericSend+0xa2>
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <xQueueGenericSend+0xa4>
 8005326:	2300      	movs	r3, #0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10a      	bne.n	8005342 <xQueueGenericSend+0xbe>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	61fb      	str	r3, [r7, #28]
}
 800533e:	bf00      	nop
 8005340:	e7fe      	b.n	8005340 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005342:	f001 feff 	bl	8007144 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534e:	429a      	cmp	r2, r3
 8005350:	d302      	bcc.n	8005358 <xQueueGenericSend+0xd4>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b02      	cmp	r3, #2
 8005356:	d129      	bne.n	80053ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	68b9      	ldr	r1, [r7, #8]
 800535c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800535e:	f000 fa0b 	bl	8005778 <prvCopyDataToQueue>
 8005362:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	2b00      	cmp	r3, #0
 800536a:	d010      	beq.n	800538e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	3324      	adds	r3, #36	; 0x24
 8005370:	4618      	mov	r0, r3
 8005372:	f000 ffcf 	bl	8006314 <xTaskRemoveFromEventList>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d013      	beq.n	80053a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800537c:	4b3f      	ldr	r3, [pc, #252]	; (800547c <xQueueGenericSend+0x1f8>)
 800537e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	e00a      	b.n	80053a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800538e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005390:	2b00      	cmp	r3, #0
 8005392:	d007      	beq.n	80053a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005394:	4b39      	ldr	r3, [pc, #228]	; (800547c <xQueueGenericSend+0x1f8>)
 8005396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80053a4:	f001 fefe 	bl	80071a4 <vPortExitCritical>
				return pdPASS;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e063      	b.n	8005474 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d103      	bne.n	80053ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053b2:	f001 fef7 	bl	80071a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	e05c      	b.n	8005474 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d106      	bne.n	80053ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053c0:	f107 0314 	add.w	r3, r7, #20
 80053c4:	4618      	mov	r0, r3
 80053c6:	f001 f809 	bl	80063dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053ca:	2301      	movs	r3, #1
 80053cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053ce:	f001 fee9 	bl	80071a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053d2:	f000 fd7b 	bl	8005ecc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053d6:	f001 feb5 	bl	8007144 <vPortEnterCritical>
 80053da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053e0:	b25b      	sxtb	r3, r3
 80053e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e6:	d103      	bne.n	80053f0 <xQueueGenericSend+0x16c>
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053f6:	b25b      	sxtb	r3, r3
 80053f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fc:	d103      	bne.n	8005406 <xQueueGenericSend+0x182>
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005406:	f001 fecd 	bl	80071a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800540a:	1d3a      	adds	r2, r7, #4
 800540c:	f107 0314 	add.w	r3, r7, #20
 8005410:	4611      	mov	r1, r2
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fff8 	bl	8006408 <xTaskCheckForTimeOut>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d124      	bne.n	8005468 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800541e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005420:	f000 faa2 	bl	8005968 <prvIsQueueFull>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d018      	beq.n	800545c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	3310      	adds	r3, #16
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	4611      	mov	r1, r2
 8005432:	4618      	mov	r0, r3
 8005434:	f000 ff1e 	bl	8006274 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800543a:	f000 fa2d 	bl	8005898 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800543e:	f000 fd53 	bl	8005ee8 <xTaskResumeAll>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	f47f af7c 	bne.w	8005342 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800544a:	4b0c      	ldr	r3, [pc, #48]	; (800547c <xQueueGenericSend+0x1f8>)
 800544c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	e772      	b.n	8005342 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800545c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800545e:	f000 fa1b 	bl	8005898 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005462:	f000 fd41 	bl	8005ee8 <xTaskResumeAll>
 8005466:	e76c      	b.n	8005342 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800546a:	f000 fa15 	bl	8005898 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800546e:	f000 fd3b 	bl	8005ee8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005472:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005474:	4618      	mov	r0, r3
 8005476:	3738      	adds	r7, #56	; 0x38
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	e000ed04 	.word	0xe000ed04

08005480 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b090      	sub	sp, #64	; 0x40
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10a      	bne.n	80054ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054aa:	bf00      	nop
 80054ac:	e7fe      	b.n	80054ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d103      	bne.n	80054bc <xQueueGenericSendFromISR+0x3c>
 80054b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <xQueueGenericSendFromISR+0x40>
 80054bc:	2301      	movs	r3, #1
 80054be:	e000      	b.n	80054c2 <xQueueGenericSendFromISR+0x42>
 80054c0:	2300      	movs	r3, #0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10a      	bne.n	80054dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054d8:	bf00      	nop
 80054da:	e7fe      	b.n	80054da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d103      	bne.n	80054ea <xQueueGenericSendFromISR+0x6a>
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <xQueueGenericSendFromISR+0x6e>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <xQueueGenericSendFromISR+0x70>
 80054ee:	2300      	movs	r3, #0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10a      	bne.n	800550a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	623b      	str	r3, [r7, #32]
}
 8005506:	bf00      	nop
 8005508:	e7fe      	b.n	8005508 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800550a:	f001 fefd 	bl	8007308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800550e:	f3ef 8211 	mrs	r2, BASEPRI
 8005512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	61fa      	str	r2, [r7, #28]
 8005524:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005526:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005528:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800552a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005532:	429a      	cmp	r2, r3
 8005534:	d302      	bcc.n	800553c <xQueueGenericSendFromISR+0xbc>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b02      	cmp	r3, #2
 800553a:	d12f      	bne.n	800559c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800553c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005552:	f000 f911 	bl	8005778 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005556:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800555a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555e:	d112      	bne.n	8005586 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	2b00      	cmp	r3, #0
 8005566:	d016      	beq.n	8005596 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556a:	3324      	adds	r3, #36	; 0x24
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fed1 	bl	8006314 <xTaskRemoveFromEventList>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00e      	beq.n	8005596 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00b      	beq.n	8005596 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	e007      	b.n	8005596 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005586:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800558a:	3301      	adds	r3, #1
 800558c:	b2db      	uxtb	r3, r3
 800558e:	b25a      	sxtb	r2, r3
 8005590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005596:	2301      	movs	r3, #1
 8005598:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800559a:	e001      	b.n	80055a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800559c:	2300      	movs	r3, #0
 800559e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3740      	adds	r7, #64	; 0x40
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
	...

080055b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08c      	sub	sp, #48	; 0x30
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055c4:	2300      	movs	r3, #0
 80055c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <xQueueReceive+0x30>
	__asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	623b      	str	r3, [r7, #32]
}
 80055e4:	bf00      	nop
 80055e6:	e7fe      	b.n	80055e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d103      	bne.n	80055f6 <xQueueReceive+0x3e>
 80055ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <xQueueReceive+0x42>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e000      	b.n	80055fc <xQueueReceive+0x44>
 80055fa:	2300      	movs	r3, #0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10a      	bne.n	8005616 <xQueueReceive+0x5e>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	61fb      	str	r3, [r7, #28]
}
 8005612:	bf00      	nop
 8005614:	e7fe      	b.n	8005614 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005616:	f001 f83b 	bl	8006690 <xTaskGetSchedulerState>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d102      	bne.n	8005626 <xQueueReceive+0x6e>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <xQueueReceive+0x72>
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <xQueueReceive+0x74>
 800562a:	2300      	movs	r3, #0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10a      	bne.n	8005646 <xQueueReceive+0x8e>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	61bb      	str	r3, [r7, #24]
}
 8005642:	bf00      	nop
 8005644:	e7fe      	b.n	8005644 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005646:	f001 fd7d 	bl	8007144 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	2b00      	cmp	r3, #0
 8005654:	d01f      	beq.n	8005696 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005656:	68b9      	ldr	r1, [r7, #8]
 8005658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800565a:	f000 f8f7 	bl	800584c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	1e5a      	subs	r2, r3, #1
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005664:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00f      	beq.n	800568e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800566e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005670:	3310      	adds	r3, #16
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fe4e 	bl	8006314 <xTaskRemoveFromEventList>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d007      	beq.n	800568e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800567e:	4b3d      	ldr	r3, [pc, #244]	; (8005774 <xQueueReceive+0x1bc>)
 8005680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800568e:	f001 fd89 	bl	80071a4 <vPortExitCritical>
				return pdPASS;
 8005692:	2301      	movs	r3, #1
 8005694:	e069      	b.n	800576a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d103      	bne.n	80056a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800569c:	f001 fd82 	bl	80071a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056a0:	2300      	movs	r3, #0
 80056a2:	e062      	b.n	800576a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056aa:	f107 0310 	add.w	r3, r7, #16
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fe94 	bl	80063dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056b4:	2301      	movs	r3, #1
 80056b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056b8:	f001 fd74 	bl	80071a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056bc:	f000 fc06 	bl	8005ecc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056c0:	f001 fd40 	bl	8007144 <vPortEnterCritical>
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056ca:	b25b      	sxtb	r3, r3
 80056cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d0:	d103      	bne.n	80056da <xQueueReceive+0x122>
 80056d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056e0:	b25b      	sxtb	r3, r3
 80056e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e6:	d103      	bne.n	80056f0 <xQueueReceive+0x138>
 80056e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056f0:	f001 fd58 	bl	80071a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056f4:	1d3a      	adds	r2, r7, #4
 80056f6:	f107 0310 	add.w	r3, r7, #16
 80056fa:	4611      	mov	r1, r2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 fe83 	bl	8006408 <xTaskCheckForTimeOut>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d123      	bne.n	8005750 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800570a:	f000 f917 	bl	800593c <prvIsQueueEmpty>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d017      	beq.n	8005744 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005716:	3324      	adds	r3, #36	; 0x24
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	4611      	mov	r1, r2
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fda9 	bl	8006274 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005724:	f000 f8b8 	bl	8005898 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005728:	f000 fbde 	bl	8005ee8 <xTaskResumeAll>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d189      	bne.n	8005646 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005732:	4b10      	ldr	r3, [pc, #64]	; (8005774 <xQueueReceive+0x1bc>)
 8005734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	e780      	b.n	8005646 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005746:	f000 f8a7 	bl	8005898 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800574a:	f000 fbcd 	bl	8005ee8 <xTaskResumeAll>
 800574e:	e77a      	b.n	8005646 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005752:	f000 f8a1 	bl	8005898 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005756:	f000 fbc7 	bl	8005ee8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800575a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800575c:	f000 f8ee 	bl	800593c <prvIsQueueEmpty>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	f43f af6f 	beq.w	8005646 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005768:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800576a:	4618      	mov	r0, r3
 800576c:	3730      	adds	r7, #48	; 0x30
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	e000ed04 	.word	0xe000ed04

08005778 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10d      	bne.n	80057b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d14d      	bne.n	800583a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 ff92 	bl	80066cc <xTaskPriorityDisinherit>
 80057a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	609a      	str	r2, [r3, #8]
 80057b0:	e043      	b.n	800583a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d119      	bne.n	80057ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6858      	ldr	r0, [r3, #4]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c0:	461a      	mov	r2, r3
 80057c2:	68b9      	ldr	r1, [r7, #8]
 80057c4:	f001 ffee 	bl	80077a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d0:	441a      	add	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d32b      	bcc.n	800583a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	605a      	str	r2, [r3, #4]
 80057ea:	e026      	b.n	800583a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	68d8      	ldr	r0, [r3, #12]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f4:	461a      	mov	r2, r3
 80057f6:	68b9      	ldr	r1, [r7, #8]
 80057f8:	f001 ffd4 	bl	80077a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005804:	425b      	negs	r3, r3
 8005806:	441a      	add	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d207      	bcs.n	8005828 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	425b      	negs	r3, r3
 8005822:	441a      	add	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b02      	cmp	r3, #2
 800582c:	d105      	bne.n	800583a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	3b01      	subs	r3, #1
 8005838:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005842:	697b      	ldr	r3, [r7, #20]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	2b00      	cmp	r3, #0
 800585c:	d018      	beq.n	8005890 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	441a      	add	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	429a      	cmp	r2, r3
 8005876:	d303      	bcc.n	8005880 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68d9      	ldr	r1, [r3, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005888:	461a      	mov	r2, r3
 800588a:	6838      	ldr	r0, [r7, #0]
 800588c:	f001 ff8a 	bl	80077a4 <memcpy>
	}
}
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058a0:	f001 fc50 	bl	8007144 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058ac:	e011      	b.n	80058d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d012      	beq.n	80058dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3324      	adds	r3, #36	; 0x24
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fd2a 	bl	8006314 <xTaskRemoveFromEventList>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058c6:	f000 fe01 	bl	80064cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	dce9      	bgt.n	80058ae <prvUnlockQueue+0x16>
 80058da:	e000      	b.n	80058de <prvUnlockQueue+0x46>
					break;
 80058dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	22ff      	movs	r2, #255	; 0xff
 80058e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80058e6:	f001 fc5d 	bl	80071a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058ea:	f001 fc2b 	bl	8007144 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058f6:	e011      	b.n	800591c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d012      	beq.n	8005926 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3310      	adds	r3, #16
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fd05 	bl	8006314 <xTaskRemoveFromEventList>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005910:	f000 fddc 	bl	80064cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005914:	7bbb      	ldrb	r3, [r7, #14]
 8005916:	3b01      	subs	r3, #1
 8005918:	b2db      	uxtb	r3, r3
 800591a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800591c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005920:	2b00      	cmp	r3, #0
 8005922:	dce9      	bgt.n	80058f8 <prvUnlockQueue+0x60>
 8005924:	e000      	b.n	8005928 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005926:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	22ff      	movs	r2, #255	; 0xff
 800592c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005930:	f001 fc38 	bl	80071a4 <vPortExitCritical>
}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005944:	f001 fbfe 	bl	8007144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	2b00      	cmp	r3, #0
 800594e:	d102      	bne.n	8005956 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005950:	2301      	movs	r3, #1
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	e001      	b.n	800595a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800595a:	f001 fc23 	bl	80071a4 <vPortExitCritical>

	return xReturn;
 800595e:	68fb      	ldr	r3, [r7, #12]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005970:	f001 fbe8 	bl	8007144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597c:	429a      	cmp	r2, r3
 800597e:	d102      	bne.n	8005986 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005980:	2301      	movs	r3, #1
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	e001      	b.n	800598a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800598a:	f001 fc0b 	bl	80071a4 <vPortExitCritical>

	return xReturn;
 800598e:	68fb      	ldr	r3, [r7, #12]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	e014      	b.n	80059d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80059a8:	4a0f      	ldr	r2, [pc, #60]	; (80059e8 <vQueueAddToRegistry+0x50>)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10b      	bne.n	80059cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80059b4:	490c      	ldr	r1, [pc, #48]	; (80059e8 <vQueueAddToRegistry+0x50>)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80059be:	4a0a      	ldr	r2, [pc, #40]	; (80059e8 <vQueueAddToRegistry+0x50>)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	4413      	add	r3, r2
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80059ca:	e006      	b.n	80059da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3301      	adds	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b07      	cmp	r3, #7
 80059d6:	d9e7      	bls.n	80059a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059d8:	bf00      	nop
 80059da:	bf00      	nop
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	20000860 	.word	0x20000860

080059ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80059fc:	f001 fba2 	bl	8007144 <vPortEnterCritical>
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a06:	b25b      	sxtb	r3, r3
 8005a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0c:	d103      	bne.n	8005a16 <vQueueWaitForMessageRestricted+0x2a>
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a1c:	b25b      	sxtb	r3, r3
 8005a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a22:	d103      	bne.n	8005a2c <vQueueWaitForMessageRestricted+0x40>
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a2c:	f001 fbba 	bl	80071a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d106      	bne.n	8005a46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	3324      	adds	r3, #36	; 0x24
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fc3b 	bl	80062bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a46:	6978      	ldr	r0, [r7, #20]
 8005a48:	f7ff ff26 	bl	8005898 <prvUnlockQueue>
	}
 8005a4c:	bf00      	nop
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b08e      	sub	sp, #56	; 0x38
 8005a58:	af04      	add	r7, sp, #16
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
 8005a60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10a      	bne.n	8005a7e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	623b      	str	r3, [r7, #32]
}
 8005a7a:	bf00      	nop
 8005a7c:	e7fe      	b.n	8005a7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10a      	bne.n	8005a9a <xTaskCreateStatic+0x46>
	__asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	61fb      	str	r3, [r7, #28]
}
 8005a96:	bf00      	nop
 8005a98:	e7fe      	b.n	8005a98 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a9a:	235c      	movs	r3, #92	; 0x5c
 8005a9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	2b5c      	cmp	r3, #92	; 0x5c
 8005aa2:	d00a      	beq.n	8005aba <xTaskCreateStatic+0x66>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	61bb      	str	r3, [r7, #24]
}
 8005ab6:	bf00      	nop
 8005ab8:	e7fe      	b.n	8005ab8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005aba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d01e      	beq.n	8005b00 <xTaskCreateStatic+0xac>
 8005ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01b      	beq.n	8005b00 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ad0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ada:	2300      	movs	r3, #0
 8005adc:	9303      	str	r3, [sp, #12]
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	9302      	str	r3, [sp, #8]
 8005ae2:	f107 0314 	add.w	r3, r7, #20
 8005ae6:	9301      	str	r3, [sp, #4]
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	68b9      	ldr	r1, [r7, #8]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 f850 	bl	8005b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005af8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005afa:	f000 f8dd 	bl	8005cb8 <prvAddNewTaskToReadyList>
 8005afe:	e001      	b.n	8005b04 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b04:	697b      	ldr	r3, [r7, #20]
	}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3728      	adds	r7, #40	; 0x28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b08c      	sub	sp, #48	; 0x30
 8005b12:	af04      	add	r7, sp, #16
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	603b      	str	r3, [r7, #0]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b1e:	88fb      	ldrh	r3, [r7, #6]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4618      	mov	r0, r3
 8005b24:	f001 fc30 	bl	8007388 <pvPortMalloc>
 8005b28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00e      	beq.n	8005b4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b30:	205c      	movs	r0, #92	; 0x5c
 8005b32:	f001 fc29 	bl	8007388 <pvPortMalloc>
 8005b36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	631a      	str	r2, [r3, #48]	; 0x30
 8005b44:	e005      	b.n	8005b52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b46:	6978      	ldr	r0, [r7, #20]
 8005b48:	f001 fcea 	bl	8007520 <vPortFree>
 8005b4c:	e001      	b.n	8005b52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d017      	beq.n	8005b88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b60:	88fa      	ldrh	r2, [r7, #6]
 8005b62:	2300      	movs	r3, #0
 8005b64:	9303      	str	r3, [sp, #12]
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	9302      	str	r3, [sp, #8]
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	9301      	str	r3, [sp, #4]
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68b9      	ldr	r1, [r7, #8]
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 f80e 	bl	8005b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b7c:	69f8      	ldr	r0, [r7, #28]
 8005b7e:	f000 f89b 	bl	8005cb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b82:	2301      	movs	r3, #1
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	e002      	b.n	8005b8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b88:	f04f 33ff 	mov.w	r3, #4294967295
 8005b8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b8e:	69bb      	ldr	r3, [r7, #24]
	}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3720      	adds	r7, #32
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	461a      	mov	r2, r3
 8005bb0:	21a5      	movs	r1, #165	; 0xa5
 8005bb2:	f001 fe05 	bl	80077c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	f023 0307 	bic.w	r3, r3, #7
 8005bce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	f003 0307 	and.w	r3, r3, #7
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	617b      	str	r3, [r7, #20]
}
 8005bec:	bf00      	nop
 8005bee:	e7fe      	b.n	8005bee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d01f      	beq.n	8005c36 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61fb      	str	r3, [r7, #28]
 8005bfa:	e012      	b.n	8005c22 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	4413      	add	r3, r2
 8005c02:	7819      	ldrb	r1, [r3, #0]
 8005c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	4413      	add	r3, r2
 8005c0a:	3334      	adds	r3, #52	; 0x34
 8005c0c:	460a      	mov	r2, r1
 8005c0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	4413      	add	r3, r2
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d006      	beq.n	8005c2a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	61fb      	str	r3, [r7, #28]
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	2b0f      	cmp	r3, #15
 8005c26:	d9e9      	bls.n	8005bfc <prvInitialiseNewTask+0x64>
 8005c28:	e000      	b.n	8005c2c <prvInitialiseNewTask+0x94>
			{
				break;
 8005c2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c34:	e003      	b.n	8005c3e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c40:	2b37      	cmp	r3, #55	; 0x37
 8005c42:	d901      	bls.n	8005c48 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c44:	2337      	movs	r3, #55	; 0x37
 8005c46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c52:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	2200      	movs	r2, #0
 8005c58:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff f978 	bl	8004f54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c66:	3318      	adds	r3, #24
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff f973 	bl	8004f54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	2200      	movs	r2, #0
 8005c88:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	68f9      	ldr	r1, [r7, #12]
 8005c96:	69b8      	ldr	r0, [r7, #24]
 8005c98:	f001 f928 	bl	8006eec <pxPortInitialiseStack>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cae:	bf00      	nop
 8005cb0:	3720      	adds	r7, #32
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005cc0:	f001 fa40 	bl	8007144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005cc4:	4b2d      	ldr	r3, [pc, #180]	; (8005d7c <prvAddNewTaskToReadyList+0xc4>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	4a2c      	ldr	r2, [pc, #176]	; (8005d7c <prvAddNewTaskToReadyList+0xc4>)
 8005ccc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005cce:	4b2c      	ldr	r3, [pc, #176]	; (8005d80 <prvAddNewTaskToReadyList+0xc8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d109      	bne.n	8005cea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005cd6:	4a2a      	ldr	r2, [pc, #168]	; (8005d80 <prvAddNewTaskToReadyList+0xc8>)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005cdc:	4b27      	ldr	r3, [pc, #156]	; (8005d7c <prvAddNewTaskToReadyList+0xc4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d110      	bne.n	8005d06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ce4:	f000 fc16 	bl	8006514 <prvInitialiseTaskLists>
 8005ce8:	e00d      	b.n	8005d06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005cea:	4b26      	ldr	r3, [pc, #152]	; (8005d84 <prvAddNewTaskToReadyList+0xcc>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d109      	bne.n	8005d06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005cf2:	4b23      	ldr	r3, [pc, #140]	; (8005d80 <prvAddNewTaskToReadyList+0xc8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d802      	bhi.n	8005d06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d00:	4a1f      	ldr	r2, [pc, #124]	; (8005d80 <prvAddNewTaskToReadyList+0xc8>)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d06:	4b20      	ldr	r3, [pc, #128]	; (8005d88 <prvAddNewTaskToReadyList+0xd0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	4a1e      	ldr	r2, [pc, #120]	; (8005d88 <prvAddNewTaskToReadyList+0xd0>)
 8005d0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d10:	4b1d      	ldr	r3, [pc, #116]	; (8005d88 <prvAddNewTaskToReadyList+0xd0>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	; (8005d8c <prvAddNewTaskToReadyList+0xd4>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d903      	bls.n	8005d2c <prvAddNewTaskToReadyList+0x74>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d28:	4a18      	ldr	r2, [pc, #96]	; (8005d8c <prvAddNewTaskToReadyList+0xd4>)
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <prvAddNewTaskToReadyList+0xd8>)
 8005d3a:	441a      	add	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3304      	adds	r3, #4
 8005d40:	4619      	mov	r1, r3
 8005d42:	4610      	mov	r0, r2
 8005d44:	f7ff f913 	bl	8004f6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d48:	f001 fa2c 	bl	80071a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d4c:	4b0d      	ldr	r3, [pc, #52]	; (8005d84 <prvAddNewTaskToReadyList+0xcc>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00e      	beq.n	8005d72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d54:	4b0a      	ldr	r3, [pc, #40]	; (8005d80 <prvAddNewTaskToReadyList+0xc8>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d207      	bcs.n	8005d72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d62:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <prvAddNewTaskToReadyList+0xdc>)
 8005d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d72:	bf00      	nop
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000d74 	.word	0x20000d74
 8005d80:	200008a0 	.word	0x200008a0
 8005d84:	20000d80 	.word	0x20000d80
 8005d88:	20000d90 	.word	0x20000d90
 8005d8c:	20000d7c 	.word	0x20000d7c
 8005d90:	200008a4 	.word	0x200008a4
 8005d94:	e000ed04 	.word	0xe000ed04

08005d98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005da0:	2300      	movs	r3, #0
 8005da2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d017      	beq.n	8005dda <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005daa:	4b13      	ldr	r3, [pc, #76]	; (8005df8 <vTaskDelay+0x60>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <vTaskDelay+0x30>
	__asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	60bb      	str	r3, [r7, #8]
}
 8005dc4:	bf00      	nop
 8005dc6:	e7fe      	b.n	8005dc6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005dc8:	f000 f880 	bl	8005ecc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005dcc:	2100      	movs	r1, #0
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fcea 	bl	80067a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005dd4:	f000 f888 	bl	8005ee8 <xTaskResumeAll>
 8005dd8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d107      	bne.n	8005df0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005de0:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <vTaskDelay+0x64>)
 8005de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005df0:	bf00      	nop
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	20000d9c 	.word	0x20000d9c
 8005dfc:	e000ed04 	.word	0xe000ed04

08005e00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08a      	sub	sp, #40	; 0x28
 8005e04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e0e:	463a      	mov	r2, r7
 8005e10:	1d39      	adds	r1, r7, #4
 8005e12:	f107 0308 	add.w	r3, r7, #8
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7ff f848 	bl	8004eac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e1c:	6839      	ldr	r1, [r7, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	9202      	str	r2, [sp, #8]
 8005e24:	9301      	str	r3, [sp, #4]
 8005e26:	2300      	movs	r3, #0
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	460a      	mov	r2, r1
 8005e2e:	4921      	ldr	r1, [pc, #132]	; (8005eb4 <vTaskStartScheduler+0xb4>)
 8005e30:	4821      	ldr	r0, [pc, #132]	; (8005eb8 <vTaskStartScheduler+0xb8>)
 8005e32:	f7ff fe0f 	bl	8005a54 <xTaskCreateStatic>
 8005e36:	4603      	mov	r3, r0
 8005e38:	4a20      	ldr	r2, [pc, #128]	; (8005ebc <vTaskStartScheduler+0xbc>)
 8005e3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e3c:	4b1f      	ldr	r3, [pc, #124]	; (8005ebc <vTaskStartScheduler+0xbc>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e44:	2301      	movs	r3, #1
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	e001      	b.n	8005e4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d102      	bne.n	8005e5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e54:	f000 fcfc 	bl	8006850 <xTimerCreateTimerTask>
 8005e58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d116      	bne.n	8005e8e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	613b      	str	r3, [r7, #16]
}
 8005e72:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e74:	4b12      	ldr	r3, [pc, #72]	; (8005ec0 <vTaskStartScheduler+0xc0>)
 8005e76:	f04f 32ff 	mov.w	r2, #4294967295
 8005e7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e7c:	4b11      	ldr	r3, [pc, #68]	; (8005ec4 <vTaskStartScheduler+0xc4>)
 8005e7e:	2201      	movs	r2, #1
 8005e80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e82:	4b11      	ldr	r3, [pc, #68]	; (8005ec8 <vTaskStartScheduler+0xc8>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e88:	f001 f8ba 	bl	8007000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e8c:	e00e      	b.n	8005eac <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e94:	d10a      	bne.n	8005eac <vTaskStartScheduler+0xac>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	60fb      	str	r3, [r7, #12]
}
 8005ea8:	bf00      	nop
 8005eaa:	e7fe      	b.n	8005eaa <vTaskStartScheduler+0xaa>
}
 8005eac:	bf00      	nop
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	080077f4 	.word	0x080077f4
 8005eb8:	080064e5 	.word	0x080064e5
 8005ebc:	20000d98 	.word	0x20000d98
 8005ec0:	20000d94 	.word	0x20000d94
 8005ec4:	20000d80 	.word	0x20000d80
 8005ec8:	20000d78 	.word	0x20000d78

08005ecc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ed0:	4b04      	ldr	r3, [pc, #16]	; (8005ee4 <vTaskSuspendAll+0x18>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	4a03      	ldr	r2, [pc, #12]	; (8005ee4 <vTaskSuspendAll+0x18>)
 8005ed8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005eda:	bf00      	nop
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	20000d9c 	.word	0x20000d9c

08005ee8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ef6:	4b42      	ldr	r3, [pc, #264]	; (8006000 <xTaskResumeAll+0x118>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10a      	bne.n	8005f14 <xTaskResumeAll+0x2c>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	603b      	str	r3, [r7, #0]
}
 8005f10:	bf00      	nop
 8005f12:	e7fe      	b.n	8005f12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f14:	f001 f916 	bl	8007144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f18:	4b39      	ldr	r3, [pc, #228]	; (8006000 <xTaskResumeAll+0x118>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	4a38      	ldr	r2, [pc, #224]	; (8006000 <xTaskResumeAll+0x118>)
 8005f20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f22:	4b37      	ldr	r3, [pc, #220]	; (8006000 <xTaskResumeAll+0x118>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d162      	bne.n	8005ff0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f2a:	4b36      	ldr	r3, [pc, #216]	; (8006004 <xTaskResumeAll+0x11c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d05e      	beq.n	8005ff0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f32:	e02f      	b.n	8005f94 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f34:	4b34      	ldr	r3, [pc, #208]	; (8006008 <xTaskResumeAll+0x120>)
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	3318      	adds	r3, #24
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff f871 	bl	8005028 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7ff f86c 	bl	8005028 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f54:	4b2d      	ldr	r3, [pc, #180]	; (800600c <xTaskResumeAll+0x124>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d903      	bls.n	8005f64 <xTaskResumeAll+0x7c>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	4a2a      	ldr	r2, [pc, #168]	; (800600c <xTaskResumeAll+0x124>)
 8005f62:	6013      	str	r3, [r2, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f68:	4613      	mov	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4a27      	ldr	r2, [pc, #156]	; (8006010 <xTaskResumeAll+0x128>)
 8005f72:	441a      	add	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	3304      	adds	r3, #4
 8005f78:	4619      	mov	r1, r3
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	f7fe fff7 	bl	8004f6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f84:	4b23      	ldr	r3, [pc, #140]	; (8006014 <xTaskResumeAll+0x12c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d302      	bcc.n	8005f94 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005f8e:	4b22      	ldr	r3, [pc, #136]	; (8006018 <xTaskResumeAll+0x130>)
 8005f90:	2201      	movs	r2, #1
 8005f92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f94:	4b1c      	ldr	r3, [pc, #112]	; (8006008 <xTaskResumeAll+0x120>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1cb      	bne.n	8005f34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fa2:	f000 fb55 	bl	8006650 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005fa6:	4b1d      	ldr	r3, [pc, #116]	; (800601c <xTaskResumeAll+0x134>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d010      	beq.n	8005fd4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fb2:	f000 f847 	bl	8006044 <xTaskIncrementTick>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005fbc:	4b16      	ldr	r3, [pc, #88]	; (8006018 <xTaskResumeAll+0x130>)
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1f1      	bne.n	8005fb2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005fce:	4b13      	ldr	r3, [pc, #76]	; (800601c <xTaskResumeAll+0x134>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005fd4:	4b10      	ldr	r3, [pc, #64]	; (8006018 <xTaskResumeAll+0x130>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d009      	beq.n	8005ff0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005fe0:	4b0f      	ldr	r3, [pc, #60]	; (8006020 <xTaskResumeAll+0x138>)
 8005fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ff0:	f001 f8d8 	bl	80071a4 <vPortExitCritical>

	return xAlreadyYielded;
 8005ff4:	68bb      	ldr	r3, [r7, #8]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000d9c 	.word	0x20000d9c
 8006004:	20000d74 	.word	0x20000d74
 8006008:	20000d34 	.word	0x20000d34
 800600c:	20000d7c 	.word	0x20000d7c
 8006010:	200008a4 	.word	0x200008a4
 8006014:	200008a0 	.word	0x200008a0
 8006018:	20000d88 	.word	0x20000d88
 800601c:	20000d84 	.word	0x20000d84
 8006020:	e000ed04 	.word	0xe000ed04

08006024 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800602a:	4b05      	ldr	r3, [pc, #20]	; (8006040 <xTaskGetTickCount+0x1c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006030:	687b      	ldr	r3, [r7, #4]
}
 8006032:	4618      	mov	r0, r3
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	20000d78 	.word	0x20000d78

08006044 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800604a:	2300      	movs	r3, #0
 800604c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800604e:	4b4f      	ldr	r3, [pc, #316]	; (800618c <xTaskIncrementTick+0x148>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	f040 808f 	bne.w	8006176 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006058:	4b4d      	ldr	r3, [pc, #308]	; (8006190 <xTaskIncrementTick+0x14c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3301      	adds	r3, #1
 800605e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006060:	4a4b      	ldr	r2, [pc, #300]	; (8006190 <xTaskIncrementTick+0x14c>)
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d120      	bne.n	80060ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800606c:	4b49      	ldr	r3, [pc, #292]	; (8006194 <xTaskIncrementTick+0x150>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <xTaskIncrementTick+0x48>
	__asm volatile
 8006076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	603b      	str	r3, [r7, #0]
}
 8006088:	bf00      	nop
 800608a:	e7fe      	b.n	800608a <xTaskIncrementTick+0x46>
 800608c:	4b41      	ldr	r3, [pc, #260]	; (8006194 <xTaskIncrementTick+0x150>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	4b41      	ldr	r3, [pc, #260]	; (8006198 <xTaskIncrementTick+0x154>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a3f      	ldr	r2, [pc, #252]	; (8006194 <xTaskIncrementTick+0x150>)
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	4a3f      	ldr	r2, [pc, #252]	; (8006198 <xTaskIncrementTick+0x154>)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	4b3e      	ldr	r3, [pc, #248]	; (800619c <xTaskIncrementTick+0x158>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3301      	adds	r3, #1
 80060a6:	4a3d      	ldr	r2, [pc, #244]	; (800619c <xTaskIncrementTick+0x158>)
 80060a8:	6013      	str	r3, [r2, #0]
 80060aa:	f000 fad1 	bl	8006650 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060ae:	4b3c      	ldr	r3, [pc, #240]	; (80061a0 <xTaskIncrementTick+0x15c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d349      	bcc.n	800614c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060b8:	4b36      	ldr	r3, [pc, #216]	; (8006194 <xTaskIncrementTick+0x150>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d104      	bne.n	80060cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060c2:	4b37      	ldr	r3, [pc, #220]	; (80061a0 <xTaskIncrementTick+0x15c>)
 80060c4:	f04f 32ff 	mov.w	r2, #4294967295
 80060c8:	601a      	str	r2, [r3, #0]
					break;
 80060ca:	e03f      	b.n	800614c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060cc:	4b31      	ldr	r3, [pc, #196]	; (8006194 <xTaskIncrementTick+0x150>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d203      	bcs.n	80060ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060e4:	4a2e      	ldr	r2, [pc, #184]	; (80061a0 <xTaskIncrementTick+0x15c>)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80060ea:	e02f      	b.n	800614c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	3304      	adds	r3, #4
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fe ff99 	bl	8005028 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d004      	beq.n	8006108 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	3318      	adds	r3, #24
 8006102:	4618      	mov	r0, r3
 8006104:	f7fe ff90 	bl	8005028 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610c:	4b25      	ldr	r3, [pc, #148]	; (80061a4 <xTaskIncrementTick+0x160>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	429a      	cmp	r2, r3
 8006112:	d903      	bls.n	800611c <xTaskIncrementTick+0xd8>
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	4a22      	ldr	r2, [pc, #136]	; (80061a4 <xTaskIncrementTick+0x160>)
 800611a:	6013      	str	r3, [r2, #0]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006120:	4613      	mov	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4a1f      	ldr	r2, [pc, #124]	; (80061a8 <xTaskIncrementTick+0x164>)
 800612a:	441a      	add	r2, r3
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	3304      	adds	r3, #4
 8006130:	4619      	mov	r1, r3
 8006132:	4610      	mov	r0, r2
 8006134:	f7fe ff1b 	bl	8004f6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613c:	4b1b      	ldr	r3, [pc, #108]	; (80061ac <xTaskIncrementTick+0x168>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006142:	429a      	cmp	r2, r3
 8006144:	d3b8      	bcc.n	80060b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006146:	2301      	movs	r3, #1
 8006148:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800614a:	e7b5      	b.n	80060b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800614c:	4b17      	ldr	r3, [pc, #92]	; (80061ac <xTaskIncrementTick+0x168>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006152:	4915      	ldr	r1, [pc, #84]	; (80061a8 <xTaskIncrementTick+0x164>)
 8006154:	4613      	mov	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d901      	bls.n	8006168 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006164:	2301      	movs	r3, #1
 8006166:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006168:	4b11      	ldr	r3, [pc, #68]	; (80061b0 <xTaskIncrementTick+0x16c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d007      	beq.n	8006180 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006170:	2301      	movs	r3, #1
 8006172:	617b      	str	r3, [r7, #20]
 8006174:	e004      	b.n	8006180 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006176:	4b0f      	ldr	r3, [pc, #60]	; (80061b4 <xTaskIncrementTick+0x170>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3301      	adds	r3, #1
 800617c:	4a0d      	ldr	r2, [pc, #52]	; (80061b4 <xTaskIncrementTick+0x170>)
 800617e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006180:	697b      	ldr	r3, [r7, #20]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000d9c 	.word	0x20000d9c
 8006190:	20000d78 	.word	0x20000d78
 8006194:	20000d2c 	.word	0x20000d2c
 8006198:	20000d30 	.word	0x20000d30
 800619c:	20000d8c 	.word	0x20000d8c
 80061a0:	20000d94 	.word	0x20000d94
 80061a4:	20000d7c 	.word	0x20000d7c
 80061a8:	200008a4 	.word	0x200008a4
 80061ac:	200008a0 	.word	0x200008a0
 80061b0:	20000d88 	.word	0x20000d88
 80061b4:	20000d84 	.word	0x20000d84

080061b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061be:	4b28      	ldr	r3, [pc, #160]	; (8006260 <vTaskSwitchContext+0xa8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061c6:	4b27      	ldr	r3, [pc, #156]	; (8006264 <vTaskSwitchContext+0xac>)
 80061c8:	2201      	movs	r2, #1
 80061ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061cc:	e041      	b.n	8006252 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80061ce:	4b25      	ldr	r3, [pc, #148]	; (8006264 <vTaskSwitchContext+0xac>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d4:	4b24      	ldr	r3, [pc, #144]	; (8006268 <vTaskSwitchContext+0xb0>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	60fb      	str	r3, [r7, #12]
 80061da:	e010      	b.n	80061fe <vTaskSwitchContext+0x46>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <vTaskSwitchContext+0x40>
	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	607b      	str	r3, [r7, #4]
}
 80061f4:	bf00      	nop
 80061f6:	e7fe      	b.n	80061f6 <vTaskSwitchContext+0x3e>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	491b      	ldr	r1, [pc, #108]	; (800626c <vTaskSwitchContext+0xb4>)
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	440b      	add	r3, r1
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0e4      	beq.n	80061dc <vTaskSwitchContext+0x24>
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4a13      	ldr	r2, [pc, #76]	; (800626c <vTaskSwitchContext+0xb4>)
 800621e:	4413      	add	r3, r2
 8006220:	60bb      	str	r3, [r7, #8]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	605a      	str	r2, [r3, #4]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	3308      	adds	r3, #8
 8006234:	429a      	cmp	r2, r3
 8006236:	d104      	bne.n	8006242 <vTaskSwitchContext+0x8a>
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	605a      	str	r2, [r3, #4]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	4a09      	ldr	r2, [pc, #36]	; (8006270 <vTaskSwitchContext+0xb8>)
 800624a:	6013      	str	r3, [r2, #0]
 800624c:	4a06      	ldr	r2, [pc, #24]	; (8006268 <vTaskSwitchContext+0xb0>)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6013      	str	r3, [r2, #0]
}
 8006252:	bf00      	nop
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	20000d9c 	.word	0x20000d9c
 8006264:	20000d88 	.word	0x20000d88
 8006268:	20000d7c 	.word	0x20000d7c
 800626c:	200008a4 	.word	0x200008a4
 8006270:	200008a0 	.word	0x200008a0

08006274 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10a      	bne.n	800629a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	60fb      	str	r3, [r7, #12]
}
 8006296:	bf00      	nop
 8006298:	e7fe      	b.n	8006298 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800629a:	4b07      	ldr	r3, [pc, #28]	; (80062b8 <vTaskPlaceOnEventList+0x44>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3318      	adds	r3, #24
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7fe fe87 	bl	8004fb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062a8:	2101      	movs	r1, #1
 80062aa:	6838      	ldr	r0, [r7, #0]
 80062ac:	f000 fa7c 	bl	80067a8 <prvAddCurrentTaskToDelayedList>
}
 80062b0:	bf00      	nop
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	200008a0 	.word	0x200008a0

080062bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10a      	bne.n	80062e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	617b      	str	r3, [r7, #20]
}
 80062e0:	bf00      	nop
 80062e2:	e7fe      	b.n	80062e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062e4:	4b0a      	ldr	r3, [pc, #40]	; (8006310 <vTaskPlaceOnEventListRestricted+0x54>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3318      	adds	r3, #24
 80062ea:	4619      	mov	r1, r3
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f7fe fe3e 	bl	8004f6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80062f8:	f04f 33ff 	mov.w	r3, #4294967295
 80062fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	68b8      	ldr	r0, [r7, #8]
 8006302:	f000 fa51 	bl	80067a8 <prvAddCurrentTaskToDelayedList>
	}
 8006306:	bf00      	nop
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	200008a0 	.word	0x200008a0

08006314 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10a      	bne.n	8006340 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	60fb      	str	r3, [r7, #12]
}
 800633c:	bf00      	nop
 800633e:	e7fe      	b.n	800633e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	3318      	adds	r3, #24
 8006344:	4618      	mov	r0, r3
 8006346:	f7fe fe6f 	bl	8005028 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800634a:	4b1e      	ldr	r3, [pc, #120]	; (80063c4 <xTaskRemoveFromEventList+0xb0>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d11d      	bne.n	800638e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	3304      	adds	r3, #4
 8006356:	4618      	mov	r0, r3
 8006358:	f7fe fe66 	bl	8005028 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006360:	4b19      	ldr	r3, [pc, #100]	; (80063c8 <xTaskRemoveFromEventList+0xb4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	429a      	cmp	r2, r3
 8006366:	d903      	bls.n	8006370 <xTaskRemoveFromEventList+0x5c>
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	4a16      	ldr	r2, [pc, #88]	; (80063c8 <xTaskRemoveFromEventList+0xb4>)
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006374:	4613      	mov	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4a13      	ldr	r2, [pc, #76]	; (80063cc <xTaskRemoveFromEventList+0xb8>)
 800637e:	441a      	add	r2, r3
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	3304      	adds	r3, #4
 8006384:	4619      	mov	r1, r3
 8006386:	4610      	mov	r0, r2
 8006388:	f7fe fdf1 	bl	8004f6e <vListInsertEnd>
 800638c:	e005      	b.n	800639a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	3318      	adds	r3, #24
 8006392:	4619      	mov	r1, r3
 8006394:	480e      	ldr	r0, [pc, #56]	; (80063d0 <xTaskRemoveFromEventList+0xbc>)
 8006396:	f7fe fdea 	bl	8004f6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639e:	4b0d      	ldr	r3, [pc, #52]	; (80063d4 <xTaskRemoveFromEventList+0xc0>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d905      	bls.n	80063b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063a8:	2301      	movs	r3, #1
 80063aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063ac:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <xTaskRemoveFromEventList+0xc4>)
 80063ae:	2201      	movs	r2, #1
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	e001      	b.n	80063b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80063b4:	2300      	movs	r3, #0
 80063b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80063b8:	697b      	ldr	r3, [r7, #20]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20000d9c 	.word	0x20000d9c
 80063c8:	20000d7c 	.word	0x20000d7c
 80063cc:	200008a4 	.word	0x200008a4
 80063d0:	20000d34 	.word	0x20000d34
 80063d4:	200008a0 	.word	0x200008a0
 80063d8:	20000d88 	.word	0x20000d88

080063dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063e4:	4b06      	ldr	r3, [pc, #24]	; (8006400 <vTaskInternalSetTimeOutState+0x24>)
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80063ec:	4b05      	ldr	r3, [pc, #20]	; (8006404 <vTaskInternalSetTimeOutState+0x28>)
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	605a      	str	r2, [r3, #4]
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	20000d8c 	.word	0x20000d8c
 8006404:	20000d78 	.word	0x20000d78

08006408 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b088      	sub	sp, #32
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10a      	bne.n	800642e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	613b      	str	r3, [r7, #16]
}
 800642a:	bf00      	nop
 800642c:	e7fe      	b.n	800642c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10a      	bne.n	800644a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	60fb      	str	r3, [r7, #12]
}
 8006446:	bf00      	nop
 8006448:	e7fe      	b.n	8006448 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800644a:	f000 fe7b 	bl	8007144 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800644e:	4b1d      	ldr	r3, [pc, #116]	; (80064c4 <xTaskCheckForTimeOut+0xbc>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006466:	d102      	bne.n	800646e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006468:	2300      	movs	r3, #0
 800646a:	61fb      	str	r3, [r7, #28]
 800646c:	e023      	b.n	80064b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	4b15      	ldr	r3, [pc, #84]	; (80064c8 <xTaskCheckForTimeOut+0xc0>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d007      	beq.n	800648a <xTaskCheckForTimeOut+0x82>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	429a      	cmp	r2, r3
 8006482:	d302      	bcc.n	800648a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006484:	2301      	movs	r3, #1
 8006486:	61fb      	str	r3, [r7, #28]
 8006488:	e015      	b.n	80064b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	429a      	cmp	r2, r3
 8006492:	d20b      	bcs.n	80064ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	1ad2      	subs	r2, r2, r3
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7ff ff9b 	bl	80063dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064a6:	2300      	movs	r3, #0
 80064a8:	61fb      	str	r3, [r7, #28]
 80064aa:	e004      	b.n	80064b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064b2:	2301      	movs	r3, #1
 80064b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064b6:	f000 fe75 	bl	80071a4 <vPortExitCritical>

	return xReturn;
 80064ba:	69fb      	ldr	r3, [r7, #28]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3720      	adds	r7, #32
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	20000d78 	.word	0x20000d78
 80064c8:	20000d8c 	.word	0x20000d8c

080064cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064d0:	4b03      	ldr	r3, [pc, #12]	; (80064e0 <vTaskMissedYield+0x14>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
}
 80064d6:	bf00      	nop
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	20000d88 	.word	0x20000d88

080064e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064ec:	f000 f852 	bl	8006594 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064f0:	4b06      	ldr	r3, [pc, #24]	; (800650c <prvIdleTask+0x28>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d9f9      	bls.n	80064ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80064f8:	4b05      	ldr	r3, [pc, #20]	; (8006510 <prvIdleTask+0x2c>)
 80064fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006508:	e7f0      	b.n	80064ec <prvIdleTask+0x8>
 800650a:	bf00      	nop
 800650c:	200008a4 	.word	0x200008a4
 8006510:	e000ed04 	.word	0xe000ed04

08006514 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800651a:	2300      	movs	r3, #0
 800651c:	607b      	str	r3, [r7, #4]
 800651e:	e00c      	b.n	800653a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	4613      	mov	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4a12      	ldr	r2, [pc, #72]	; (8006574 <prvInitialiseTaskLists+0x60>)
 800652c:	4413      	add	r3, r2
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe fcf0 	bl	8004f14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3301      	adds	r3, #1
 8006538:	607b      	str	r3, [r7, #4]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b37      	cmp	r3, #55	; 0x37
 800653e:	d9ef      	bls.n	8006520 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006540:	480d      	ldr	r0, [pc, #52]	; (8006578 <prvInitialiseTaskLists+0x64>)
 8006542:	f7fe fce7 	bl	8004f14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006546:	480d      	ldr	r0, [pc, #52]	; (800657c <prvInitialiseTaskLists+0x68>)
 8006548:	f7fe fce4 	bl	8004f14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800654c:	480c      	ldr	r0, [pc, #48]	; (8006580 <prvInitialiseTaskLists+0x6c>)
 800654e:	f7fe fce1 	bl	8004f14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006552:	480c      	ldr	r0, [pc, #48]	; (8006584 <prvInitialiseTaskLists+0x70>)
 8006554:	f7fe fcde 	bl	8004f14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006558:	480b      	ldr	r0, [pc, #44]	; (8006588 <prvInitialiseTaskLists+0x74>)
 800655a:	f7fe fcdb 	bl	8004f14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800655e:	4b0b      	ldr	r3, [pc, #44]	; (800658c <prvInitialiseTaskLists+0x78>)
 8006560:	4a05      	ldr	r2, [pc, #20]	; (8006578 <prvInitialiseTaskLists+0x64>)
 8006562:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006564:	4b0a      	ldr	r3, [pc, #40]	; (8006590 <prvInitialiseTaskLists+0x7c>)
 8006566:	4a05      	ldr	r2, [pc, #20]	; (800657c <prvInitialiseTaskLists+0x68>)
 8006568:	601a      	str	r2, [r3, #0]
}
 800656a:	bf00      	nop
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	200008a4 	.word	0x200008a4
 8006578:	20000d04 	.word	0x20000d04
 800657c:	20000d18 	.word	0x20000d18
 8006580:	20000d34 	.word	0x20000d34
 8006584:	20000d48 	.word	0x20000d48
 8006588:	20000d60 	.word	0x20000d60
 800658c:	20000d2c 	.word	0x20000d2c
 8006590:	20000d30 	.word	0x20000d30

08006594 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800659a:	e019      	b.n	80065d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800659c:	f000 fdd2 	bl	8007144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065a0:	4b10      	ldr	r3, [pc, #64]	; (80065e4 <prvCheckTasksWaitingTermination+0x50>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	3304      	adds	r3, #4
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fe fd3b 	bl	8005028 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065b2:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <prvCheckTasksWaitingTermination+0x54>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	4a0b      	ldr	r2, [pc, #44]	; (80065e8 <prvCheckTasksWaitingTermination+0x54>)
 80065ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065bc:	4b0b      	ldr	r3, [pc, #44]	; (80065ec <prvCheckTasksWaitingTermination+0x58>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3b01      	subs	r3, #1
 80065c2:	4a0a      	ldr	r2, [pc, #40]	; (80065ec <prvCheckTasksWaitingTermination+0x58>)
 80065c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065c6:	f000 fded 	bl	80071a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f810 	bl	80065f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065d0:	4b06      	ldr	r3, [pc, #24]	; (80065ec <prvCheckTasksWaitingTermination+0x58>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e1      	bne.n	800659c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065d8:	bf00      	nop
 80065da:	bf00      	nop
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	20000d48 	.word	0x20000d48
 80065e8:	20000d74 	.word	0x20000d74
 80065ec:	20000d5c 	.word	0x20000d5c

080065f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d108      	bne.n	8006614 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006606:	4618      	mov	r0, r3
 8006608:	f000 ff8a 	bl	8007520 <vPortFree>
				vPortFree( pxTCB );
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 ff87 	bl	8007520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006612:	e018      	b.n	8006646 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800661a:	2b01      	cmp	r3, #1
 800661c:	d103      	bne.n	8006626 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 ff7e 	bl	8007520 <vPortFree>
	}
 8006624:	e00f      	b.n	8006646 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800662c:	2b02      	cmp	r3, #2
 800662e:	d00a      	beq.n	8006646 <prvDeleteTCB+0x56>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	60fb      	str	r3, [r7, #12]
}
 8006642:	bf00      	nop
 8006644:	e7fe      	b.n	8006644 <prvDeleteTCB+0x54>
	}
 8006646:	bf00      	nop
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
	...

08006650 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006656:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <prvResetNextTaskUnblockTime+0x38>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d104      	bne.n	800666a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006660:	4b0a      	ldr	r3, [pc, #40]	; (800668c <prvResetNextTaskUnblockTime+0x3c>)
 8006662:	f04f 32ff 	mov.w	r2, #4294967295
 8006666:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006668:	e008      	b.n	800667c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800666a:	4b07      	ldr	r3, [pc, #28]	; (8006688 <prvResetNextTaskUnblockTime+0x38>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	4a04      	ldr	r2, [pc, #16]	; (800668c <prvResetNextTaskUnblockTime+0x3c>)
 800667a:	6013      	str	r3, [r2, #0]
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	20000d2c 	.word	0x20000d2c
 800668c:	20000d94 	.word	0x20000d94

08006690 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006696:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <xTaskGetSchedulerState+0x34>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d102      	bne.n	80066a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800669e:	2301      	movs	r3, #1
 80066a0:	607b      	str	r3, [r7, #4]
 80066a2:	e008      	b.n	80066b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066a4:	4b08      	ldr	r3, [pc, #32]	; (80066c8 <xTaskGetSchedulerState+0x38>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d102      	bne.n	80066b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066ac:	2302      	movs	r3, #2
 80066ae:	607b      	str	r3, [r7, #4]
 80066b0:	e001      	b.n	80066b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066b2:	2300      	movs	r3, #0
 80066b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066b6:	687b      	ldr	r3, [r7, #4]
	}
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	20000d80 	.word	0x20000d80
 80066c8:	20000d9c 	.word	0x20000d9c

080066cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80066d8:	2300      	movs	r3, #0
 80066da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d056      	beq.n	8006790 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80066e2:	4b2e      	ldr	r3, [pc, #184]	; (800679c <xTaskPriorityDisinherit+0xd0>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d00a      	beq.n	8006702 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	60fb      	str	r3, [r7, #12]
}
 80066fe:	bf00      	nop
 8006700:	e7fe      	b.n	8006700 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10a      	bne.n	8006720 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	60bb      	str	r3, [r7, #8]
}
 800671c:	bf00      	nop
 800671e:	e7fe      	b.n	800671e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006724:	1e5a      	subs	r2, r3, #1
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006732:	429a      	cmp	r2, r3
 8006734:	d02c      	beq.n	8006790 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673a:	2b00      	cmp	r3, #0
 800673c:	d128      	bne.n	8006790 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	3304      	adds	r3, #4
 8006742:	4618      	mov	r0, r3
 8006744:	f7fe fc70 	bl	8005028 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006760:	4b0f      	ldr	r3, [pc, #60]	; (80067a0 <xTaskPriorityDisinherit+0xd4>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	429a      	cmp	r2, r3
 8006766:	d903      	bls.n	8006770 <xTaskPriorityDisinherit+0xa4>
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	4a0c      	ldr	r2, [pc, #48]	; (80067a0 <xTaskPriorityDisinherit+0xd4>)
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006774:	4613      	mov	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4a09      	ldr	r2, [pc, #36]	; (80067a4 <xTaskPriorityDisinherit+0xd8>)
 800677e:	441a      	add	r2, r3
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	3304      	adds	r3, #4
 8006784:	4619      	mov	r1, r3
 8006786:	4610      	mov	r0, r2
 8006788:	f7fe fbf1 	bl	8004f6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800678c:	2301      	movs	r3, #1
 800678e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006790:	697b      	ldr	r3, [r7, #20]
	}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	200008a0 	.word	0x200008a0
 80067a0:	20000d7c 	.word	0x20000d7c
 80067a4:	200008a4 	.word	0x200008a4

080067a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067b2:	4b21      	ldr	r3, [pc, #132]	; (8006838 <prvAddCurrentTaskToDelayedList+0x90>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067b8:	4b20      	ldr	r3, [pc, #128]	; (800683c <prvAddCurrentTaskToDelayedList+0x94>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3304      	adds	r3, #4
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fe fc32 	bl	8005028 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ca:	d10a      	bne.n	80067e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d007      	beq.n	80067e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067d2:	4b1a      	ldr	r3, [pc, #104]	; (800683c <prvAddCurrentTaskToDelayedList+0x94>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3304      	adds	r3, #4
 80067d8:	4619      	mov	r1, r3
 80067da:	4819      	ldr	r0, [pc, #100]	; (8006840 <prvAddCurrentTaskToDelayedList+0x98>)
 80067dc:	f7fe fbc7 	bl	8004f6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067e0:	e026      	b.n	8006830 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4413      	add	r3, r2
 80067e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067ea:	4b14      	ldr	r3, [pc, #80]	; (800683c <prvAddCurrentTaskToDelayedList+0x94>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d209      	bcs.n	800680e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067fa:	4b12      	ldr	r3, [pc, #72]	; (8006844 <prvAddCurrentTaskToDelayedList+0x9c>)
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	4b0f      	ldr	r3, [pc, #60]	; (800683c <prvAddCurrentTaskToDelayedList+0x94>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3304      	adds	r3, #4
 8006804:	4619      	mov	r1, r3
 8006806:	4610      	mov	r0, r2
 8006808:	f7fe fbd5 	bl	8004fb6 <vListInsert>
}
 800680c:	e010      	b.n	8006830 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800680e:	4b0e      	ldr	r3, [pc, #56]	; (8006848 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	4b0a      	ldr	r3, [pc, #40]	; (800683c <prvAddCurrentTaskToDelayedList+0x94>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3304      	adds	r3, #4
 8006818:	4619      	mov	r1, r3
 800681a:	4610      	mov	r0, r2
 800681c:	f7fe fbcb 	bl	8004fb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006820:	4b0a      	ldr	r3, [pc, #40]	; (800684c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	429a      	cmp	r2, r3
 8006828:	d202      	bcs.n	8006830 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800682a:	4a08      	ldr	r2, [pc, #32]	; (800684c <prvAddCurrentTaskToDelayedList+0xa4>)
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	6013      	str	r3, [r2, #0]
}
 8006830:	bf00      	nop
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	20000d78 	.word	0x20000d78
 800683c:	200008a0 	.word	0x200008a0
 8006840:	20000d60 	.word	0x20000d60
 8006844:	20000d30 	.word	0x20000d30
 8006848:	20000d2c 	.word	0x20000d2c
 800684c:	20000d94 	.word	0x20000d94

08006850 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08a      	sub	sp, #40	; 0x28
 8006854:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006856:	2300      	movs	r3, #0
 8006858:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800685a:	f000 fb07 	bl	8006e6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800685e:	4b1c      	ldr	r3, [pc, #112]	; (80068d0 <xTimerCreateTimerTask+0x80>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d021      	beq.n	80068aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006866:	2300      	movs	r3, #0
 8006868:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800686e:	1d3a      	adds	r2, r7, #4
 8006870:	f107 0108 	add.w	r1, r7, #8
 8006874:	f107 030c 	add.w	r3, r7, #12
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe fb31 	bl	8004ee0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800687e:	6879      	ldr	r1, [r7, #4]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	9202      	str	r2, [sp, #8]
 8006886:	9301      	str	r3, [sp, #4]
 8006888:	2302      	movs	r3, #2
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	2300      	movs	r3, #0
 800688e:	460a      	mov	r2, r1
 8006890:	4910      	ldr	r1, [pc, #64]	; (80068d4 <xTimerCreateTimerTask+0x84>)
 8006892:	4811      	ldr	r0, [pc, #68]	; (80068d8 <xTimerCreateTimerTask+0x88>)
 8006894:	f7ff f8de 	bl	8005a54 <xTaskCreateStatic>
 8006898:	4603      	mov	r3, r0
 800689a:	4a10      	ldr	r2, [pc, #64]	; (80068dc <xTimerCreateTimerTask+0x8c>)
 800689c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800689e:	4b0f      	ldr	r3, [pc, #60]	; (80068dc <xTimerCreateTimerTask+0x8c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80068a6:	2301      	movs	r3, #1
 80068a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10a      	bne.n	80068c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	613b      	str	r3, [r7, #16]
}
 80068c2:	bf00      	nop
 80068c4:	e7fe      	b.n	80068c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80068c6:	697b      	ldr	r3, [r7, #20]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	20000dd0 	.word	0x20000dd0
 80068d4:	080077fc 	.word	0x080077fc
 80068d8:	08006a15 	.word	0x08006a15
 80068dc:	20000dd4 	.word	0x20000dd4

080068e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08a      	sub	sp, #40	; 0x28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80068ee:	2300      	movs	r3, #0
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10a      	bne.n	800690e <xTimerGenericCommand+0x2e>
	__asm volatile
 80068f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fc:	f383 8811 	msr	BASEPRI, r3
 8006900:	f3bf 8f6f 	isb	sy
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	623b      	str	r3, [r7, #32]
}
 800690a:	bf00      	nop
 800690c:	e7fe      	b.n	800690c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800690e:	4b1a      	ldr	r3, [pc, #104]	; (8006978 <xTimerGenericCommand+0x98>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d02a      	beq.n	800696c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b05      	cmp	r3, #5
 8006926:	dc18      	bgt.n	800695a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006928:	f7ff feb2 	bl	8006690 <xTaskGetSchedulerState>
 800692c:	4603      	mov	r3, r0
 800692e:	2b02      	cmp	r3, #2
 8006930:	d109      	bne.n	8006946 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006932:	4b11      	ldr	r3, [pc, #68]	; (8006978 <xTimerGenericCommand+0x98>)
 8006934:	6818      	ldr	r0, [r3, #0]
 8006936:	f107 0110 	add.w	r1, r7, #16
 800693a:	2300      	movs	r3, #0
 800693c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800693e:	f7fe fca1 	bl	8005284 <xQueueGenericSend>
 8006942:	6278      	str	r0, [r7, #36]	; 0x24
 8006944:	e012      	b.n	800696c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006946:	4b0c      	ldr	r3, [pc, #48]	; (8006978 <xTimerGenericCommand+0x98>)
 8006948:	6818      	ldr	r0, [r3, #0]
 800694a:	f107 0110 	add.w	r1, r7, #16
 800694e:	2300      	movs	r3, #0
 8006950:	2200      	movs	r2, #0
 8006952:	f7fe fc97 	bl	8005284 <xQueueGenericSend>
 8006956:	6278      	str	r0, [r7, #36]	; 0x24
 8006958:	e008      	b.n	800696c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800695a:	4b07      	ldr	r3, [pc, #28]	; (8006978 <xTimerGenericCommand+0x98>)
 800695c:	6818      	ldr	r0, [r3, #0]
 800695e:	f107 0110 	add.w	r1, r7, #16
 8006962:	2300      	movs	r3, #0
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	f7fe fd8b 	bl	8005480 <xQueueGenericSendFromISR>
 800696a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800696e:	4618      	mov	r0, r3
 8006970:	3728      	adds	r7, #40	; 0x28
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20000dd0 	.word	0x20000dd0

0800697c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af02      	add	r7, sp, #8
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006986:	4b22      	ldr	r3, [pc, #136]	; (8006a10 <prvProcessExpiredTimer+0x94>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	3304      	adds	r3, #4
 8006994:	4618      	mov	r0, r3
 8006996:	f7fe fb47 	bl	8005028 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069a0:	f003 0304 	and.w	r3, r3, #4
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d022      	beq.n	80069ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	699a      	ldr	r2, [r3, #24]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	18d1      	adds	r1, r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	6978      	ldr	r0, [r7, #20]
 80069b6:	f000 f8d1 	bl	8006b5c <prvInsertTimerInActiveList>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d01f      	beq.n	8006a00 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069c0:	2300      	movs	r3, #0
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	2300      	movs	r3, #0
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	2100      	movs	r1, #0
 80069ca:	6978      	ldr	r0, [r7, #20]
 80069cc:	f7ff ff88 	bl	80068e0 <xTimerGenericCommand>
 80069d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d113      	bne.n	8006a00 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	60fb      	str	r3, [r7, #12]
}
 80069ea:	bf00      	nop
 80069ec:	e7fe      	b.n	80069ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069f4:	f023 0301 	bic.w	r3, r3, #1
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	6978      	ldr	r0, [r7, #20]
 8006a06:	4798      	blx	r3
}
 8006a08:	bf00      	nop
 8006a0a:	3718      	adds	r7, #24
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20000dc8 	.word	0x20000dc8

08006a14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a1c:	f107 0308 	add.w	r3, r7, #8
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 f857 	bl	8006ad4 <prvGetNextExpireTime>
 8006a26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 f803 	bl	8006a38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a32:	f000 f8d5 	bl	8006be0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a36:	e7f1      	b.n	8006a1c <prvTimerTask+0x8>

08006a38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a42:	f7ff fa43 	bl	8005ecc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a46:	f107 0308 	add.w	r3, r7, #8
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 f866 	bl	8006b1c <prvSampleTimeNow>
 8006a50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d130      	bne.n	8006aba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10a      	bne.n	8006a74 <prvProcessTimerOrBlockTask+0x3c>
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d806      	bhi.n	8006a74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a66:	f7ff fa3f 	bl	8005ee8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a6a:	68f9      	ldr	r1, [r7, #12]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7ff ff85 	bl	800697c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a72:	e024      	b.n	8006abe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d008      	beq.n	8006a8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a7a:	4b13      	ldr	r3, [pc, #76]	; (8006ac8 <prvProcessTimerOrBlockTask+0x90>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <prvProcessTimerOrBlockTask+0x50>
 8006a84:	2301      	movs	r3, #1
 8006a86:	e000      	b.n	8006a8a <prvProcessTimerOrBlockTask+0x52>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a8c:	4b0f      	ldr	r3, [pc, #60]	; (8006acc <prvProcessTimerOrBlockTask+0x94>)
 8006a8e:	6818      	ldr	r0, [r3, #0]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	f7fe ffa7 	bl	80059ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a9e:	f7ff fa23 	bl	8005ee8 <xTaskResumeAll>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10a      	bne.n	8006abe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006aa8:	4b09      	ldr	r3, [pc, #36]	; (8006ad0 <prvProcessTimerOrBlockTask+0x98>)
 8006aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aae:	601a      	str	r2, [r3, #0]
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	f3bf 8f6f 	isb	sy
}
 8006ab8:	e001      	b.n	8006abe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006aba:	f7ff fa15 	bl	8005ee8 <xTaskResumeAll>
}
 8006abe:	bf00      	nop
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000dcc 	.word	0x20000dcc
 8006acc:	20000dd0 	.word	0x20000dd0
 8006ad0:	e000ed04 	.word	0xe000ed04

08006ad4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006adc:	4b0e      	ldr	r3, [pc, #56]	; (8006b18 <prvGetNextExpireTime+0x44>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <prvGetNextExpireTime+0x16>
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	e000      	b.n	8006aec <prvGetNextExpireTime+0x18>
 8006aea:	2200      	movs	r2, #0
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d105      	bne.n	8006b04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006af8:	4b07      	ldr	r3, [pc, #28]	; (8006b18 <prvGetNextExpireTime+0x44>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	e001      	b.n	8006b08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b04:	2300      	movs	r3, #0
 8006b06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b08:	68fb      	ldr	r3, [r7, #12]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	20000dc8 	.word	0x20000dc8

08006b1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b24:	f7ff fa7e 	bl	8006024 <xTaskGetTickCount>
 8006b28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b2a:	4b0b      	ldr	r3, [pc, #44]	; (8006b58 <prvSampleTimeNow+0x3c>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d205      	bcs.n	8006b40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b34:	f000 f936 	bl	8006da4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	e002      	b.n	8006b46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b46:	4a04      	ldr	r2, [pc, #16]	; (8006b58 <prvSampleTimeNow+0x3c>)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20000dd8 	.word	0x20000dd8

08006b5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d812      	bhi.n	8006ba8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	1ad2      	subs	r2, r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d302      	bcc.n	8006b96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b90:	2301      	movs	r3, #1
 8006b92:	617b      	str	r3, [r7, #20]
 8006b94:	e01b      	b.n	8006bce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b96:	4b10      	ldr	r3, [pc, #64]	; (8006bd8 <prvInsertTimerInActiveList+0x7c>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	f7fe fa08 	bl	8004fb6 <vListInsert>
 8006ba6:	e012      	b.n	8006bce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d206      	bcs.n	8006bbe <prvInsertTimerInActiveList+0x62>
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d302      	bcc.n	8006bbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	e007      	b.n	8006bce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bbe:	4b07      	ldr	r3, [pc, #28]	; (8006bdc <prvInsertTimerInActiveList+0x80>)
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4610      	mov	r0, r2
 8006bca:	f7fe f9f4 	bl	8004fb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006bce:	697b      	ldr	r3, [r7, #20]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	20000dcc 	.word	0x20000dcc
 8006bdc:	20000dc8 	.word	0x20000dc8

08006be0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08e      	sub	sp, #56	; 0x38
 8006be4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006be6:	e0ca      	b.n	8006d7e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	da18      	bge.n	8006c20 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006bee:	1d3b      	adds	r3, r7, #4
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10a      	bne.n	8006c10 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	61fb      	str	r3, [r7, #28]
}
 8006c0c:	bf00      	nop
 8006c0e:	e7fe      	b.n	8006c0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c16:	6850      	ldr	r0, [r2, #4]
 8006c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c1a:	6892      	ldr	r2, [r2, #8]
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f2c0 80aa 	blt.w	8006d7c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d004      	beq.n	8006c3e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c36:	3304      	adds	r3, #4
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fe f9f5 	bl	8005028 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c3e:	463b      	mov	r3, r7
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7ff ff6b 	bl	8006b1c <prvSampleTimeNow>
 8006c46:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b09      	cmp	r3, #9
 8006c4c:	f200 8097 	bhi.w	8006d7e <prvProcessReceivedCommands+0x19e>
 8006c50:	a201      	add	r2, pc, #4	; (adr r2, 8006c58 <prvProcessReceivedCommands+0x78>)
 8006c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c56:	bf00      	nop
 8006c58:	08006c81 	.word	0x08006c81
 8006c5c:	08006c81 	.word	0x08006c81
 8006c60:	08006c81 	.word	0x08006c81
 8006c64:	08006cf5 	.word	0x08006cf5
 8006c68:	08006d09 	.word	0x08006d09
 8006c6c:	08006d53 	.word	0x08006d53
 8006c70:	08006c81 	.word	0x08006c81
 8006c74:	08006c81 	.word	0x08006c81
 8006c78:	08006cf5 	.word	0x08006cf5
 8006c7c:	08006d09 	.word	0x08006d09
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c86:	f043 0301 	orr.w	r3, r3, #1
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	18d1      	adds	r1, r2, r3
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ca0:	f7ff ff5c 	bl	8006b5c <prvInsertTimerInActiveList>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d069      	beq.n	8006d7e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cb0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d05e      	beq.n	8006d7e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	441a      	add	r2, r3
 8006cc8:	2300      	movs	r3, #0
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	2300      	movs	r3, #0
 8006cce:	2100      	movs	r1, #0
 8006cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cd2:	f7ff fe05 	bl	80068e0 <xTimerGenericCommand>
 8006cd6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d14f      	bne.n	8006d7e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	61bb      	str	r3, [r7, #24]
}
 8006cf0:	bf00      	nop
 8006cf2:	e7fe      	b.n	8006cf2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cfa:	f023 0301 	bic.w	r3, r3, #1
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006d06:	e03a      	b.n	8006d7e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d0e:	f043 0301 	orr.w	r3, r3, #1
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10a      	bne.n	8006d3e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	617b      	str	r3, [r7, #20]
}
 8006d3a:	bf00      	nop
 8006d3c:	e7fe      	b.n	8006d3c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d40:	699a      	ldr	r2, [r3, #24]
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	18d1      	adds	r1, r2, r3
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d4c:	f7ff ff06 	bl	8006b5c <prvInsertTimerInActiveList>
					break;
 8006d50:	e015      	b.n	8006d7e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d103      	bne.n	8006d68 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d62:	f000 fbdd 	bl	8007520 <vPortFree>
 8006d66:	e00a      	b.n	8006d7e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d6e:	f023 0301 	bic.w	r3, r3, #1
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d7a:	e000      	b.n	8006d7e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006d7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d7e:	4b08      	ldr	r3, [pc, #32]	; (8006da0 <prvProcessReceivedCommands+0x1c0>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	1d39      	adds	r1, r7, #4
 8006d84:	2200      	movs	r2, #0
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fe fc16 	bl	80055b8 <xQueueReceive>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f47f af2a 	bne.w	8006be8 <prvProcessReceivedCommands+0x8>
	}
}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop
 8006d98:	3730      	adds	r7, #48	; 0x30
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20000dd0 	.word	0x20000dd0

08006da4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b088      	sub	sp, #32
 8006da8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006daa:	e048      	b.n	8006e3e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dac:	4b2d      	ldr	r3, [pc, #180]	; (8006e64 <prvSwitchTimerLists+0xc0>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006db6:	4b2b      	ldr	r3, [pc, #172]	; (8006e64 <prvSwitchTimerLists+0xc0>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fe f92f 	bl	8005028 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d02e      	beq.n	8006e3e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	4413      	add	r3, r2
 8006de8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d90e      	bls.n	8006e10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dfe:	4b19      	ldr	r3, [pc, #100]	; (8006e64 <prvSwitchTimerLists+0xc0>)
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3304      	adds	r3, #4
 8006e06:	4619      	mov	r1, r3
 8006e08:	4610      	mov	r0, r2
 8006e0a:	f7fe f8d4 	bl	8004fb6 <vListInsert>
 8006e0e:	e016      	b.n	8006e3e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e10:	2300      	movs	r3, #0
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	2300      	movs	r3, #0
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	2100      	movs	r1, #0
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f7ff fd60 	bl	80068e0 <xTimerGenericCommand>
 8006e20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10a      	bne.n	8006e3e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	603b      	str	r3, [r7, #0]
}
 8006e3a:	bf00      	nop
 8006e3c:	e7fe      	b.n	8006e3c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e3e:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <prvSwitchTimerLists+0xc0>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1b1      	bne.n	8006dac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e48:	4b06      	ldr	r3, [pc, #24]	; (8006e64 <prvSwitchTimerLists+0xc0>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e4e:	4b06      	ldr	r3, [pc, #24]	; (8006e68 <prvSwitchTimerLists+0xc4>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a04      	ldr	r2, [pc, #16]	; (8006e64 <prvSwitchTimerLists+0xc0>)
 8006e54:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e56:	4a04      	ldr	r2, [pc, #16]	; (8006e68 <prvSwitchTimerLists+0xc4>)
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	6013      	str	r3, [r2, #0]
}
 8006e5c:	bf00      	nop
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	20000dc8 	.word	0x20000dc8
 8006e68:	20000dcc 	.word	0x20000dcc

08006e6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e72:	f000 f967 	bl	8007144 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e76:	4b15      	ldr	r3, [pc, #84]	; (8006ecc <prvCheckForValidListAndQueue+0x60>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d120      	bne.n	8006ec0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e7e:	4814      	ldr	r0, [pc, #80]	; (8006ed0 <prvCheckForValidListAndQueue+0x64>)
 8006e80:	f7fe f848 	bl	8004f14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e84:	4813      	ldr	r0, [pc, #76]	; (8006ed4 <prvCheckForValidListAndQueue+0x68>)
 8006e86:	f7fe f845 	bl	8004f14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e8a:	4b13      	ldr	r3, [pc, #76]	; (8006ed8 <prvCheckForValidListAndQueue+0x6c>)
 8006e8c:	4a10      	ldr	r2, [pc, #64]	; (8006ed0 <prvCheckForValidListAndQueue+0x64>)
 8006e8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e90:	4b12      	ldr	r3, [pc, #72]	; (8006edc <prvCheckForValidListAndQueue+0x70>)
 8006e92:	4a10      	ldr	r2, [pc, #64]	; (8006ed4 <prvCheckForValidListAndQueue+0x68>)
 8006e94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e96:	2300      	movs	r3, #0
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	4b11      	ldr	r3, [pc, #68]	; (8006ee0 <prvCheckForValidListAndQueue+0x74>)
 8006e9c:	4a11      	ldr	r2, [pc, #68]	; (8006ee4 <prvCheckForValidListAndQueue+0x78>)
 8006e9e:	2110      	movs	r1, #16
 8006ea0:	200a      	movs	r0, #10
 8006ea2:	f7fe f953 	bl	800514c <xQueueGenericCreateStatic>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	4a08      	ldr	r2, [pc, #32]	; (8006ecc <prvCheckForValidListAndQueue+0x60>)
 8006eaa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006eac:	4b07      	ldr	r3, [pc, #28]	; (8006ecc <prvCheckForValidListAndQueue+0x60>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006eb4:	4b05      	ldr	r3, [pc, #20]	; (8006ecc <prvCheckForValidListAndQueue+0x60>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	490b      	ldr	r1, [pc, #44]	; (8006ee8 <prvCheckForValidListAndQueue+0x7c>)
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe fd6c 	bl	8005998 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ec0:	f000 f970 	bl	80071a4 <vPortExitCritical>
}
 8006ec4:	bf00      	nop
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000dd0 	.word	0x20000dd0
 8006ed0:	20000da0 	.word	0x20000da0
 8006ed4:	20000db4 	.word	0x20000db4
 8006ed8:	20000dc8 	.word	0x20000dc8
 8006edc:	20000dcc 	.word	0x20000dcc
 8006ee0:	20000e7c 	.word	0x20000e7c
 8006ee4:	20000ddc 	.word	0x20000ddc
 8006ee8:	08007804 	.word	0x08007804

08006eec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3b04      	subs	r3, #4
 8006efc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3b04      	subs	r3, #4
 8006f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	f023 0201 	bic.w	r2, r3, #1
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3b04      	subs	r3, #4
 8006f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f1c:	4a0c      	ldr	r2, [pc, #48]	; (8006f50 <pxPortInitialiseStack+0x64>)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3b14      	subs	r3, #20
 8006f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	3b04      	subs	r3, #4
 8006f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f06f 0202 	mvn.w	r2, #2
 8006f3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3b20      	subs	r3, #32
 8006f40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f42:	68fb      	ldr	r3, [r7, #12]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	08006f55 	.word	0x08006f55

08006f54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f5e:	4b12      	ldr	r3, [pc, #72]	; (8006fa8 <prvTaskExitError+0x54>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f66:	d00a      	beq.n	8006f7e <prvTaskExitError+0x2a>
	__asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	60fb      	str	r3, [r7, #12]
}
 8006f7a:	bf00      	nop
 8006f7c:	e7fe      	b.n	8006f7c <prvTaskExitError+0x28>
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	60bb      	str	r3, [r7, #8]
}
 8006f90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f92:	bf00      	nop
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d0fc      	beq.n	8006f94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f9a:	bf00      	nop
 8006f9c:	bf00      	nop
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	2000000c 	.word	0x2000000c
 8006fac:	00000000 	.word	0x00000000

08006fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006fb0:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <pxCurrentTCBConst2>)
 8006fb2:	6819      	ldr	r1, [r3, #0]
 8006fb4:	6808      	ldr	r0, [r1, #0]
 8006fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fba:	f380 8809 	msr	PSP, r0
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f04f 0000 	mov.w	r0, #0
 8006fc6:	f380 8811 	msr	BASEPRI, r0
 8006fca:	4770      	bx	lr
 8006fcc:	f3af 8000 	nop.w

08006fd0 <pxCurrentTCBConst2>:
 8006fd0:	200008a0 	.word	0x200008a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop

08006fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fd8:	4808      	ldr	r0, [pc, #32]	; (8006ffc <prvPortStartFirstTask+0x24>)
 8006fda:	6800      	ldr	r0, [r0, #0]
 8006fdc:	6800      	ldr	r0, [r0, #0]
 8006fde:	f380 8808 	msr	MSP, r0
 8006fe2:	f04f 0000 	mov.w	r0, #0
 8006fe6:	f380 8814 	msr	CONTROL, r0
 8006fea:	b662      	cpsie	i
 8006fec:	b661      	cpsie	f
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	df00      	svc	0
 8006ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006ffa:	bf00      	nop
 8006ffc:	e000ed08 	.word	0xe000ed08

08007000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007006:	4b46      	ldr	r3, [pc, #280]	; (8007120 <xPortStartScheduler+0x120>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a46      	ldr	r2, [pc, #280]	; (8007124 <xPortStartScheduler+0x124>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d10a      	bne.n	8007026 <xPortStartScheduler+0x26>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	613b      	str	r3, [r7, #16]
}
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007026:	4b3e      	ldr	r3, [pc, #248]	; (8007120 <xPortStartScheduler+0x120>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a3f      	ldr	r2, [pc, #252]	; (8007128 <xPortStartScheduler+0x128>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d10a      	bne.n	8007046 <xPortStartScheduler+0x46>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	60fb      	str	r3, [r7, #12]
}
 8007042:	bf00      	nop
 8007044:	e7fe      	b.n	8007044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007046:	4b39      	ldr	r3, [pc, #228]	; (800712c <xPortStartScheduler+0x12c>)
 8007048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	b2db      	uxtb	r3, r3
 8007050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	22ff      	movs	r2, #255	; 0xff
 8007056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	b2db      	uxtb	r3, r3
 8007064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007068:	b2da      	uxtb	r2, r3
 800706a:	4b31      	ldr	r3, [pc, #196]	; (8007130 <xPortStartScheduler+0x130>)
 800706c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800706e:	4b31      	ldr	r3, [pc, #196]	; (8007134 <xPortStartScheduler+0x134>)
 8007070:	2207      	movs	r2, #7
 8007072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007074:	e009      	b.n	800708a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007076:	4b2f      	ldr	r3, [pc, #188]	; (8007134 <xPortStartScheduler+0x134>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3b01      	subs	r3, #1
 800707c:	4a2d      	ldr	r2, [pc, #180]	; (8007134 <xPortStartScheduler+0x134>)
 800707e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	b2db      	uxtb	r3, r3
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	b2db      	uxtb	r3, r3
 8007088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800708a:	78fb      	ldrb	r3, [r7, #3]
 800708c:	b2db      	uxtb	r3, r3
 800708e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007092:	2b80      	cmp	r3, #128	; 0x80
 8007094:	d0ef      	beq.n	8007076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007096:	4b27      	ldr	r3, [pc, #156]	; (8007134 <xPortStartScheduler+0x134>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f1c3 0307 	rsb	r3, r3, #7
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d00a      	beq.n	80070b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	60bb      	str	r3, [r7, #8]
}
 80070b4:	bf00      	nop
 80070b6:	e7fe      	b.n	80070b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070b8:	4b1e      	ldr	r3, [pc, #120]	; (8007134 <xPortStartScheduler+0x134>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	021b      	lsls	r3, r3, #8
 80070be:	4a1d      	ldr	r2, [pc, #116]	; (8007134 <xPortStartScheduler+0x134>)
 80070c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070c2:	4b1c      	ldr	r3, [pc, #112]	; (8007134 <xPortStartScheduler+0x134>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070ca:	4a1a      	ldr	r2, [pc, #104]	; (8007134 <xPortStartScheduler+0x134>)
 80070cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070d6:	4b18      	ldr	r3, [pc, #96]	; (8007138 <xPortStartScheduler+0x138>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a17      	ldr	r2, [pc, #92]	; (8007138 <xPortStartScheduler+0x138>)
 80070dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070e2:	4b15      	ldr	r3, [pc, #84]	; (8007138 <xPortStartScheduler+0x138>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a14      	ldr	r2, [pc, #80]	; (8007138 <xPortStartScheduler+0x138>)
 80070e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070ee:	f000 f8dd 	bl	80072ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070f2:	4b12      	ldr	r3, [pc, #72]	; (800713c <xPortStartScheduler+0x13c>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070f8:	f000 f8fc 	bl	80072f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070fc:	4b10      	ldr	r3, [pc, #64]	; (8007140 <xPortStartScheduler+0x140>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a0f      	ldr	r2, [pc, #60]	; (8007140 <xPortStartScheduler+0x140>)
 8007102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007108:	f7ff ff66 	bl	8006fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800710c:	f7ff f854 	bl	80061b8 <vTaskSwitchContext>
	prvTaskExitError();
 8007110:	f7ff ff20 	bl	8006f54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	e000ed00 	.word	0xe000ed00
 8007124:	410fc271 	.word	0x410fc271
 8007128:	410fc270 	.word	0x410fc270
 800712c:	e000e400 	.word	0xe000e400
 8007130:	20000ecc 	.word	0x20000ecc
 8007134:	20000ed0 	.word	0x20000ed0
 8007138:	e000ed20 	.word	0xe000ed20
 800713c:	2000000c 	.word	0x2000000c
 8007140:	e000ef34 	.word	0xe000ef34

08007144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	607b      	str	r3, [r7, #4]
}
 800715c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800715e:	4b0f      	ldr	r3, [pc, #60]	; (800719c <vPortEnterCritical+0x58>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3301      	adds	r3, #1
 8007164:	4a0d      	ldr	r2, [pc, #52]	; (800719c <vPortEnterCritical+0x58>)
 8007166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007168:	4b0c      	ldr	r3, [pc, #48]	; (800719c <vPortEnterCritical+0x58>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d10f      	bne.n	8007190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007170:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <vPortEnterCritical+0x5c>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00a      	beq.n	8007190 <vPortEnterCritical+0x4c>
	__asm volatile
 800717a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	603b      	str	r3, [r7, #0]
}
 800718c:	bf00      	nop
 800718e:	e7fe      	b.n	800718e <vPortEnterCritical+0x4a>
	}
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	2000000c 	.word	0x2000000c
 80071a0:	e000ed04 	.word	0xe000ed04

080071a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071aa:	4b12      	ldr	r3, [pc, #72]	; (80071f4 <vPortExitCritical+0x50>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10a      	bne.n	80071c8 <vPortExitCritical+0x24>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	607b      	str	r3, [r7, #4]
}
 80071c4:	bf00      	nop
 80071c6:	e7fe      	b.n	80071c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071c8:	4b0a      	ldr	r3, [pc, #40]	; (80071f4 <vPortExitCritical+0x50>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	3b01      	subs	r3, #1
 80071ce:	4a09      	ldr	r2, [pc, #36]	; (80071f4 <vPortExitCritical+0x50>)
 80071d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071d2:	4b08      	ldr	r3, [pc, #32]	; (80071f4 <vPortExitCritical+0x50>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d105      	bne.n	80071e6 <vPortExitCritical+0x42>
 80071da:	2300      	movs	r3, #0
 80071dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	f383 8811 	msr	BASEPRI, r3
}
 80071e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	2000000c 	.word	0x2000000c
	...

08007200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007200:	f3ef 8009 	mrs	r0, PSP
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	4b15      	ldr	r3, [pc, #84]	; (8007260 <pxCurrentTCBConst>)
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	f01e 0f10 	tst.w	lr, #16
 8007210:	bf08      	it	eq
 8007212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721a:	6010      	str	r0, [r2, #0]
 800721c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007224:	f380 8811 	msr	BASEPRI, r0
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f7fe ffc2 	bl	80061b8 <vTaskSwitchContext>
 8007234:	f04f 0000 	mov.w	r0, #0
 8007238:	f380 8811 	msr	BASEPRI, r0
 800723c:	bc09      	pop	{r0, r3}
 800723e:	6819      	ldr	r1, [r3, #0]
 8007240:	6808      	ldr	r0, [r1, #0]
 8007242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007246:	f01e 0f10 	tst.w	lr, #16
 800724a:	bf08      	it	eq
 800724c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007250:	f380 8809 	msr	PSP, r0
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	f3af 8000 	nop.w

08007260 <pxCurrentTCBConst>:
 8007260:	200008a0 	.word	0x200008a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007264:	bf00      	nop
 8007266:	bf00      	nop

08007268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	607b      	str	r3, [r7, #4]
}
 8007280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007282:	f7fe fedf 	bl	8006044 <xTaskIncrementTick>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d003      	beq.n	8007294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800728c:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <xPortSysTickHandler+0x40>)
 800728e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	2300      	movs	r3, #0
 8007296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	f383 8811 	msr	BASEPRI, r3
}
 800729e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80072a0:	bf00      	nop
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072ac:	b480      	push	{r7}
 80072ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072b0:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <vPortSetupTimerInterrupt+0x34>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072b6:	4b0b      	ldr	r3, [pc, #44]	; (80072e4 <vPortSetupTimerInterrupt+0x38>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072bc:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <vPortSetupTimerInterrupt+0x3c>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a0a      	ldr	r2, [pc, #40]	; (80072ec <vPortSetupTimerInterrupt+0x40>)
 80072c2:	fba2 2303 	umull	r2, r3, r2, r3
 80072c6:	099b      	lsrs	r3, r3, #6
 80072c8:	4a09      	ldr	r2, [pc, #36]	; (80072f0 <vPortSetupTimerInterrupt+0x44>)
 80072ca:	3b01      	subs	r3, #1
 80072cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072ce:	4b04      	ldr	r3, [pc, #16]	; (80072e0 <vPortSetupTimerInterrupt+0x34>)
 80072d0:	2207      	movs	r2, #7
 80072d2:	601a      	str	r2, [r3, #0]
}
 80072d4:	bf00      	nop
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	e000e010 	.word	0xe000e010
 80072e4:	e000e018 	.word	0xe000e018
 80072e8:	20000000 	.word	0x20000000
 80072ec:	10624dd3 	.word	0x10624dd3
 80072f0:	e000e014 	.word	0xe000e014

080072f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007304 <vPortEnableVFP+0x10>
 80072f8:	6801      	ldr	r1, [r0, #0]
 80072fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072fe:	6001      	str	r1, [r0, #0]
 8007300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007302:	bf00      	nop
 8007304:	e000ed88 	.word	0xe000ed88

08007308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800730e:	f3ef 8305 	mrs	r3, IPSR
 8007312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2b0f      	cmp	r3, #15
 8007318:	d914      	bls.n	8007344 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800731a:	4a17      	ldr	r2, [pc, #92]	; (8007378 <vPortValidateInterruptPriority+0x70>)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4413      	add	r3, r2
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007324:	4b15      	ldr	r3, [pc, #84]	; (800737c <vPortValidateInterruptPriority+0x74>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	7afa      	ldrb	r2, [r7, #11]
 800732a:	429a      	cmp	r2, r3
 800732c:	d20a      	bcs.n	8007344 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	607b      	str	r3, [r7, #4]
}
 8007340:	bf00      	nop
 8007342:	e7fe      	b.n	8007342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007344:	4b0e      	ldr	r3, [pc, #56]	; (8007380 <vPortValidateInterruptPriority+0x78>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800734c:	4b0d      	ldr	r3, [pc, #52]	; (8007384 <vPortValidateInterruptPriority+0x7c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	429a      	cmp	r2, r3
 8007352:	d90a      	bls.n	800736a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007358:	f383 8811 	msr	BASEPRI, r3
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	603b      	str	r3, [r7, #0]
}
 8007366:	bf00      	nop
 8007368:	e7fe      	b.n	8007368 <vPortValidateInterruptPriority+0x60>
	}
 800736a:	bf00      	nop
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	e000e3f0 	.word	0xe000e3f0
 800737c:	20000ecc 	.word	0x20000ecc
 8007380:	e000ed0c 	.word	0xe000ed0c
 8007384:	20000ed0 	.word	0x20000ed0

08007388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08a      	sub	sp, #40	; 0x28
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007390:	2300      	movs	r3, #0
 8007392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007394:	f7fe fd9a 	bl	8005ecc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007398:	4b5b      	ldr	r3, [pc, #364]	; (8007508 <pvPortMalloc+0x180>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073a0:	f000 f920 	bl	80075e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073a4:	4b59      	ldr	r3, [pc, #356]	; (800750c <pvPortMalloc+0x184>)
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4013      	ands	r3, r2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f040 8093 	bne.w	80074d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d01d      	beq.n	80073f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80073b8:	2208      	movs	r2, #8
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d014      	beq.n	80073f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f023 0307 	bic.w	r3, r3, #7
 80073d0:	3308      	adds	r3, #8
 80073d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f003 0307 	and.w	r3, r3, #7
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <pvPortMalloc+0x6c>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	617b      	str	r3, [r7, #20]
}
 80073f0:	bf00      	nop
 80073f2:	e7fe      	b.n	80073f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d06e      	beq.n	80074d8 <pvPortMalloc+0x150>
 80073fa:	4b45      	ldr	r3, [pc, #276]	; (8007510 <pvPortMalloc+0x188>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	429a      	cmp	r2, r3
 8007402:	d869      	bhi.n	80074d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007404:	4b43      	ldr	r3, [pc, #268]	; (8007514 <pvPortMalloc+0x18c>)
 8007406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007408:	4b42      	ldr	r3, [pc, #264]	; (8007514 <pvPortMalloc+0x18c>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800740e:	e004      	b.n	800741a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	429a      	cmp	r2, r3
 8007422:	d903      	bls.n	800742c <pvPortMalloc+0xa4>
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1f1      	bne.n	8007410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800742c:	4b36      	ldr	r3, [pc, #216]	; (8007508 <pvPortMalloc+0x180>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007432:	429a      	cmp	r2, r3
 8007434:	d050      	beq.n	80074d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2208      	movs	r2, #8
 800743c:	4413      	add	r3, r2
 800743e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	1ad2      	subs	r2, r2, r3
 8007450:	2308      	movs	r3, #8
 8007452:	005b      	lsls	r3, r3, #1
 8007454:	429a      	cmp	r2, r3
 8007456:	d91f      	bls.n	8007498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4413      	add	r3, r2
 800745e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <pvPortMalloc+0xf8>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	613b      	str	r3, [r7, #16]
}
 800747c:	bf00      	nop
 800747e:	e7fe      	b.n	800747e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	1ad2      	subs	r2, r2, r3
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007492:	69b8      	ldr	r0, [r7, #24]
 8007494:	f000 f908 	bl	80076a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007498:	4b1d      	ldr	r3, [pc, #116]	; (8007510 <pvPortMalloc+0x188>)
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	4a1b      	ldr	r2, [pc, #108]	; (8007510 <pvPortMalloc+0x188>)
 80074a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074a6:	4b1a      	ldr	r3, [pc, #104]	; (8007510 <pvPortMalloc+0x188>)
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	4b1b      	ldr	r3, [pc, #108]	; (8007518 <pvPortMalloc+0x190>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d203      	bcs.n	80074ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074b2:	4b17      	ldr	r3, [pc, #92]	; (8007510 <pvPortMalloc+0x188>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a18      	ldr	r2, [pc, #96]	; (8007518 <pvPortMalloc+0x190>)
 80074b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	4b13      	ldr	r3, [pc, #76]	; (800750c <pvPortMalloc+0x184>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	431a      	orrs	r2, r3
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80074ce:	4b13      	ldr	r3, [pc, #76]	; (800751c <pvPortMalloc+0x194>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3301      	adds	r3, #1
 80074d4:	4a11      	ldr	r2, [pc, #68]	; (800751c <pvPortMalloc+0x194>)
 80074d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074d8:	f7fe fd06 	bl	8005ee8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	f003 0307 	and.w	r3, r3, #7
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <pvPortMalloc+0x174>
	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	60fb      	str	r3, [r7, #12]
}
 80074f8:	bf00      	nop
 80074fa:	e7fe      	b.n	80074fa <pvPortMalloc+0x172>
	return pvReturn;
 80074fc:	69fb      	ldr	r3, [r7, #28]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3728      	adds	r7, #40	; 0x28
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20001a94 	.word	0x20001a94
 800750c:	20001aa8 	.word	0x20001aa8
 8007510:	20001a98 	.word	0x20001a98
 8007514:	20001a8c 	.word	0x20001a8c
 8007518:	20001a9c 	.word	0x20001a9c
 800751c:	20001aa0 	.word	0x20001aa0

08007520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d04d      	beq.n	80075ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007532:	2308      	movs	r3, #8
 8007534:	425b      	negs	r3, r3
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	4413      	add	r3, r2
 800753a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	4b24      	ldr	r3, [pc, #144]	; (80075d8 <vPortFree+0xb8>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4013      	ands	r3, r2
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10a      	bne.n	8007564 <vPortFree+0x44>
	__asm volatile
 800754e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	60fb      	str	r3, [r7, #12]
}
 8007560:	bf00      	nop
 8007562:	e7fe      	b.n	8007562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00a      	beq.n	8007582 <vPortFree+0x62>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	60bb      	str	r3, [r7, #8]
}
 800757e:	bf00      	nop
 8007580:	e7fe      	b.n	8007580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	4b14      	ldr	r3, [pc, #80]	; (80075d8 <vPortFree+0xb8>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4013      	ands	r3, r2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d01e      	beq.n	80075ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d11a      	bne.n	80075ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	4b0e      	ldr	r3, [pc, #56]	; (80075d8 <vPortFree+0xb8>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	43db      	mvns	r3, r3
 80075a2:	401a      	ands	r2, r3
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80075a8:	f7fe fc90 	bl	8005ecc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	4b0a      	ldr	r3, [pc, #40]	; (80075dc <vPortFree+0xbc>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4413      	add	r3, r2
 80075b6:	4a09      	ldr	r2, [pc, #36]	; (80075dc <vPortFree+0xbc>)
 80075b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075ba:	6938      	ldr	r0, [r7, #16]
 80075bc:	f000 f874 	bl	80076a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80075c0:	4b07      	ldr	r3, [pc, #28]	; (80075e0 <vPortFree+0xc0>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3301      	adds	r3, #1
 80075c6:	4a06      	ldr	r2, [pc, #24]	; (80075e0 <vPortFree+0xc0>)
 80075c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80075ca:	f7fe fc8d 	bl	8005ee8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075ce:	bf00      	nop
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20001aa8 	.word	0x20001aa8
 80075dc:	20001a98 	.word	0x20001a98
 80075e0:	20001aa4 	.word	0x20001aa4

080075e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80075ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075f0:	4b27      	ldr	r3, [pc, #156]	; (8007690 <prvHeapInit+0xac>)
 80075f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00c      	beq.n	8007618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3307      	adds	r3, #7
 8007602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0307 	bic.w	r3, r3, #7
 800760a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	4a1f      	ldr	r2, [pc, #124]	; (8007690 <prvHeapInit+0xac>)
 8007614:	4413      	add	r3, r2
 8007616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800761c:	4a1d      	ldr	r2, [pc, #116]	; (8007694 <prvHeapInit+0xb0>)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007622:	4b1c      	ldr	r3, [pc, #112]	; (8007694 <prvHeapInit+0xb0>)
 8007624:	2200      	movs	r2, #0
 8007626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	4413      	add	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007630:	2208      	movs	r2, #8
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	1a9b      	subs	r3, r3, r2
 8007636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0307 	bic.w	r3, r3, #7
 800763e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4a15      	ldr	r2, [pc, #84]	; (8007698 <prvHeapInit+0xb4>)
 8007644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007646:	4b14      	ldr	r3, [pc, #80]	; (8007698 <prvHeapInit+0xb4>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2200      	movs	r2, #0
 800764c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800764e:	4b12      	ldr	r3, [pc, #72]	; (8007698 <prvHeapInit+0xb4>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	1ad2      	subs	r2, r2, r3
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007664:	4b0c      	ldr	r3, [pc, #48]	; (8007698 <prvHeapInit+0xb4>)
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	4a0a      	ldr	r2, [pc, #40]	; (800769c <prvHeapInit+0xb8>)
 8007672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	4a09      	ldr	r2, [pc, #36]	; (80076a0 <prvHeapInit+0xbc>)
 800767a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800767c:	4b09      	ldr	r3, [pc, #36]	; (80076a4 <prvHeapInit+0xc0>)
 800767e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007682:	601a      	str	r2, [r3, #0]
}
 8007684:	bf00      	nop
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	20000ed4 	.word	0x20000ed4
 8007694:	20001a8c 	.word	0x20001a8c
 8007698:	20001a94 	.word	0x20001a94
 800769c:	20001a9c 	.word	0x20001a9c
 80076a0:	20001a98 	.word	0x20001a98
 80076a4:	20001aa8 	.word	0x20001aa8

080076a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076b0:	4b28      	ldr	r3, [pc, #160]	; (8007754 <prvInsertBlockIntoFreeList+0xac>)
 80076b2:	60fb      	str	r3, [r7, #12]
 80076b4:	e002      	b.n	80076bc <prvInsertBlockIntoFreeList+0x14>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d8f7      	bhi.n	80076b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	4413      	add	r3, r2
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d108      	bne.n	80076ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	441a      	add	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	441a      	add	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d118      	bne.n	8007730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	4b15      	ldr	r3, [pc, #84]	; (8007758 <prvInsertBlockIntoFreeList+0xb0>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	429a      	cmp	r2, r3
 8007708:	d00d      	beq.n	8007726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	441a      	add	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	e008      	b.n	8007738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007726:	4b0c      	ldr	r3, [pc, #48]	; (8007758 <prvInsertBlockIntoFreeList+0xb0>)
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	601a      	str	r2, [r3, #0]
 800772e:	e003      	b.n	8007738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	429a      	cmp	r2, r3
 800773e:	d002      	beq.n	8007746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007746:	bf00      	nop
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	20001a8c 	.word	0x20001a8c
 8007758:	20001a94 	.word	0x20001a94

0800775c <__libc_init_array>:
 800775c:	b570      	push	{r4, r5, r6, lr}
 800775e:	4d0d      	ldr	r5, [pc, #52]	; (8007794 <__libc_init_array+0x38>)
 8007760:	4c0d      	ldr	r4, [pc, #52]	; (8007798 <__libc_init_array+0x3c>)
 8007762:	1b64      	subs	r4, r4, r5
 8007764:	10a4      	asrs	r4, r4, #2
 8007766:	2600      	movs	r6, #0
 8007768:	42a6      	cmp	r6, r4
 800776a:	d109      	bne.n	8007780 <__libc_init_array+0x24>
 800776c:	4d0b      	ldr	r5, [pc, #44]	; (800779c <__libc_init_array+0x40>)
 800776e:	4c0c      	ldr	r4, [pc, #48]	; (80077a0 <__libc_init_array+0x44>)
 8007770:	f000 f82e 	bl	80077d0 <_init>
 8007774:	1b64      	subs	r4, r4, r5
 8007776:	10a4      	asrs	r4, r4, #2
 8007778:	2600      	movs	r6, #0
 800777a:	42a6      	cmp	r6, r4
 800777c:	d105      	bne.n	800778a <__libc_init_array+0x2e>
 800777e:	bd70      	pop	{r4, r5, r6, pc}
 8007780:	f855 3b04 	ldr.w	r3, [r5], #4
 8007784:	4798      	blx	r3
 8007786:	3601      	adds	r6, #1
 8007788:	e7ee      	b.n	8007768 <__libc_init_array+0xc>
 800778a:	f855 3b04 	ldr.w	r3, [r5], #4
 800778e:	4798      	blx	r3
 8007790:	3601      	adds	r6, #1
 8007792:	e7f2      	b.n	800777a <__libc_init_array+0x1e>
 8007794:	08007880 	.word	0x08007880
 8007798:	08007880 	.word	0x08007880
 800779c:	08007880 	.word	0x08007880
 80077a0:	08007884 	.word	0x08007884

080077a4 <memcpy>:
 80077a4:	440a      	add	r2, r1
 80077a6:	4291      	cmp	r1, r2
 80077a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80077ac:	d100      	bne.n	80077b0 <memcpy+0xc>
 80077ae:	4770      	bx	lr
 80077b0:	b510      	push	{r4, lr}
 80077b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077ba:	4291      	cmp	r1, r2
 80077bc:	d1f9      	bne.n	80077b2 <memcpy+0xe>
 80077be:	bd10      	pop	{r4, pc}

080077c0 <memset>:
 80077c0:	4402      	add	r2, r0
 80077c2:	4603      	mov	r3, r0
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d100      	bne.n	80077ca <memset+0xa>
 80077c8:	4770      	bx	lr
 80077ca:	f803 1b01 	strb.w	r1, [r3], #1
 80077ce:	e7f9      	b.n	80077c4 <memset+0x4>

080077d0 <_init>:
 80077d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d2:	bf00      	nop
 80077d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077d6:	bc08      	pop	{r3}
 80077d8:	469e      	mov	lr, r3
 80077da:	4770      	bx	lr

080077dc <_fini>:
 80077dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077de:	bf00      	nop
 80077e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077e2:	bc08      	pop	{r3}
 80077e4:	469e      	mov	lr, r3
 80077e6:	4770      	bx	lr
