
cdCardPlusPlus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007830  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  080079c0  080079c0  000179c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c14  08007c14  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007c14  08007c14  00017c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c1c  08007c1c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c1c  08007c1c  00017c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c20  08007c20  00017c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000088  08007cac  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08007cac  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001290d  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bc4  00000000  00000000  000329c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00035590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  00036430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b39f  00000000  00000000  000371a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e35  00000000  00000000  00062547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efedc  00000000  00000000  0007737c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00167258  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed4  00000000  00000000  001672a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079a8 	.word	0x080079a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080079a8 	.word	0x080079a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <mainloop>:
#include "SDCard.h"
#include "fatfs.h"



extern "C" void mainloop(){
 8000584:	b580      	push	{r7, lr}
 8000586:	f6ad 0de8 	subw	sp, sp, #2280	; 0x8e8
 800058a:	af00      	add	r7, sp, #0
	SDCard file("test.txt");
 800058c:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8000590:	4912      	ldr	r1, [pc, #72]	; (80005dc <mainloop+0x58>)
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f828 	bl	80005e8 <_ZN6SDCardC1EPKc>
	file.openFile();
 8000598:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800059c:	4618      	mov	r0, r3
 800059e:	f000 f893 	bl	80006c8 <_ZN6SDCard8openFileEv>
	file.printFile();
 80005a2:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f8da 	bl	8000760 <_ZN6SDCard9printFileEv>
	SDCard file2("write.txt");
 80005ac:	463b      	mov	r3, r7
 80005ae:	490c      	ldr	r1, [pc, #48]	; (80005e0 <mainloop+0x5c>)
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 f819 	bl	80005e8 <_ZN6SDCardC1EPKc>
	file2.writeToFile("Ruth Oz");
 80005b6:	463b      	mov	r3, r7
 80005b8:	490a      	ldr	r1, [pc, #40]	; (80005e4 <mainloop+0x60>)
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f902 	bl	80007c4 <_ZN6SDCard11writeToFileEPc>
	SDCard file2("write.txt");
 80005c0:	463b      	mov	r3, r7
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f870 	bl	80006a8 <_ZN6SDCardD1Ev>
	SDCard file("test.txt");
 80005c8:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f86b 	bl	80006a8 <_ZN6SDCardD1Ev>

}
 80005d2:	bf00      	nop
 80005d4:	f607 07e8 	addw	r7, r7, #2280	; 0x8e8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	080079c0 	.word	0x080079c0
 80005e0:	080079cc 	.word	0x080079cc
 80005e4:	080079d8 	.word	0x080079d8

080005e8 <_ZN6SDCardC1EPKc>:
 */

#include <SDCard.h>
extern UART_HandleTypeDef huart2;

SDCard::SDCard(const char* nameFile) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]

	strcpy(_nameFile, nameFile);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f8d3 3464 	ldr.w	r3, [r3, #1124]	; 0x464
 80005f8:	6839      	ldr	r1, [r7, #0]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f006 fd44 	bl	8007088 <strcpy>
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2201      	movs	r2, #1
 8000604:	4925      	ldr	r1, [pc, #148]	; (800069c <_ZN6SDCardC1EPKc+0xb4>)
 8000606:	4618      	mov	r0, r3
 8000608:	f005 fe5e 	bl	80062c8 <f_mount>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
	if (fres != FR_OK) {
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 800061c:	2b00      	cmp	r3, #0
 800061e:	d008      	beq.n	8000632 <_ZN6SDCardC1EPKc+0x4a>
		myprintf("f_mount error (%i)\r\n", fres);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 8000626:	461a      	mov	r2, r3
 8000628:	491d      	ldr	r1, [pc, #116]	; (80006a0 <_ZN6SDCardC1EPKc+0xb8>)
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f000 f870 	bl	8000710 <_ZN6SDCard8myprintfEPKcz>
		while(1);
 8000630:	e7fe      	b.n	8000630 <_ZN6SDCardC1EPKc+0x48>

	 //Let's get some statistics from the SD card

	FATFS* getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8000638:	f107 020c 	add.w	r2, r7, #12
 800063c:	4619      	mov	r1, r3
 800063e:	4817      	ldr	r0, [pc, #92]	; (800069c <_ZN6SDCardC1EPKc+0xb4>)
 8000640:	f006 fba2 	bl	8006d88 <f_getfree>
 8000644:	4603      	mov	r3, r0
 8000646:	461a      	mov	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
	if (fres != FR_OK) {
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 8000654:	2b00      	cmp	r3, #0
 8000656:	d008      	beq.n	800066a <_ZN6SDCardC1EPKc+0x82>
	    myprintf("f_getfree error (%i)\r\n", fres);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 800065e:	461a      	mov	r2, r3
 8000660:	4910      	ldr	r1, [pc, #64]	; (80006a4 <_ZN6SDCardC1EPKc+0xbc>)
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f000 f854 	bl	8000710 <_ZN6SDCard8myprintfEPKcz>
	    while(1);
 8000668:	e7fe      	b.n	8000668 <_ZN6SDCardC1EPKc+0x80>
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	3b02      	subs	r3, #2
 8000670:	68fa      	ldr	r2, [r7, #12]
 8000672:	8952      	ldrh	r2, [r2, #10]
 8000674:	fb03 f202 	mul.w	r2, r3, r2
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
	free_sectors = free_clusters * getFreeFs->csize;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	8952      	ldrh	r2, [r2, #10]
 8000688:	fb03 f202 	mul.w	r2, r3, r2
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c

}
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	080079e0 	.word	0x080079e0
 80006a0:	080079e4 	.word	0x080079e4
 80006a4:	080079fc 	.word	0x080079fc

080006a8 <_ZN6SDCardD1Ev>:

SDCard::~SDCard() {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	//We're done, so de-mount the drive
	f_mount(NULL, "", 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	4904      	ldr	r1, [pc, #16]	; (80006c4 <_ZN6SDCardD1Ev+0x1c>)
 80006b4:	2000      	movs	r0, #0
 80006b6:	f005 fe07 	bl	80062c8 <f_mount>
}
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	080079e0 	.word	0x080079e0

080006c8 <_ZN6SDCard8openFileEv>:
void SDCard::openFile(){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	fres = f_open(&fil, "_nameFile", FA_READ);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80006d6:	2201      	movs	r2, #1
 80006d8:	490b      	ldr	r1, [pc, #44]	; (8000708 <_ZN6SDCard8openFileEv+0x40>)
 80006da:	4618      	mov	r0, r3
 80006dc:	f005 fe3a 	bl	8006354 <f_open>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
	if (fres != FR_OK) {
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d004      	beq.n	80006fe <_ZN6SDCard8openFileEv+0x36>
		myprintf("f_open error (%i)\r\n");
 80006f4:	4905      	ldr	r1, [pc, #20]	; (800070c <_ZN6SDCard8openFileEv+0x44>)
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f000 f80a 	bl	8000710 <_ZN6SDCard8myprintfEPKcz>
	    while(1);
 80006fc:	e7fe      	b.n	80006fc <_ZN6SDCard8openFileEv+0x34>
	}
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	08007a14 	.word	0x08007a14
 800070c:	08007a20 	.word	0x08007a20

08000710 <_ZN6SDCard8myprintfEPKcz>:

void SDCard::myprintf(const char *fmt, ...) {
 8000710:	b40e      	push	{r1, r2, r3}
 8000712:	b580      	push	{r7, lr}
 8000714:	b085      	sub	sp, #20
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	60bb      	str	r3, [r7, #8]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	69fa      	ldr	r2, [r7, #28]
 8000724:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <_ZN6SDCard8myprintfEPKcz+0x48>)
 800072a:	f006 fce1 	bl	80070f0 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 800072e:	480a      	ldr	r0, [pc, #40]	; (8000758 <_ZN6SDCard8myprintfEPKcz+0x48>)
 8000730:	f7ff fd4e 	bl	80001d0 <strlen>
 8000734:	4603      	mov	r3, r0
 8000736:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	b29a      	uxth	r2, r3
 800073c:	f04f 33ff 	mov.w	r3, #4294967295
 8000740:	4905      	ldr	r1, [pc, #20]	; (8000758 <_ZN6SDCard8myprintfEPKcz+0x48>)
 8000742:	4806      	ldr	r0, [pc, #24]	; (800075c <_ZN6SDCard8myprintfEPKcz+0x4c>)
 8000744:	f002 fe36 	bl	80033b4 <HAL_UART_Transmit>

}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000752:	b003      	add	sp, #12
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	200000a4 	.word	0x200000a4
 800075c:	20000208 	.word	0x20000208

08000760 <_ZN6SDCard9printFileEv>:

void SDCard::printFile(){
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	//Read 30 bytes from "test.txt" on the SD card
	 BYTE readBuf[30];

	//We can either use f_read OR f_gets to get data out of files
	//f_gets is a wrapper on f_read that does some string formatting for us
	TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	211e      	movs	r1, #30
 8000774:	4618      	mov	r0, r3
 8000776:	f006 fbbc 	bl	8006ef2 <f_gets>
 800077a:	62f8      	str	r0, [r7, #44]	; 0x2c
	if(rres != 0) {
 800077c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800077e:	2b00      	cmp	r3, #0
 8000780:	d009      	beq.n	8000796 <_ZN6SDCard9printFileEv+0x36>
		myprintf("Read string from '%s' contents: %s\r\n", _nameFile, readBuf);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	490b      	ldr	r1, [pc, #44]	; (80007bc <_ZN6SDCard9printFileEv+0x5c>)
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff ffbe 	bl	8000710 <_ZN6SDCard8myprintfEPKcz>
 8000794:	e007      	b.n	80007a6 <_ZN6SDCard9printFileEv+0x46>
	} else {
		myprintf("f_gets error (%i)\r\n", fres);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 800079c:	461a      	mov	r2, r3
 800079e:	4908      	ldr	r1, [pc, #32]	; (80007c0 <_ZN6SDCard9printFileEv+0x60>)
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ffb5 	bl	8000710 <_ZN6SDCard8myprintfEPKcz>
	}

	//Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80007ac:	4618      	mov	r0, r3
 80007ae:	f006 fac1 	bl	8006d34 <f_close>
}
 80007b2:	bf00      	nop
 80007b4:	3730      	adds	r7, #48	; 0x30
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	08007a34 	.word	0x08007a34
 80007c0:	08007a5c 	.word	0x08007a5c

080007c4 <_ZN6SDCard11writeToFileEPc>:

void SDCard::writeToFile(char* readBuf){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
	//Now let's try and write a file "write.txt"
	fres = f_open(&fil, "_nameFile", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80007d4:	221a      	movs	r2, #26
 80007d6:	4922      	ldr	r1, [pc, #136]	; (8000860 <_ZN6SDCard11writeToFileEPc+0x9c>)
 80007d8:	4618      	mov	r0, r3
 80007da:	f005 fdbb 	bl	8006354 <f_open>
 80007de:	4603      	mov	r3, r0
 80007e0:	461a      	mov	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
	if(fres == FR_OK) {
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d104      	bne.n	80007fc <_ZN6SDCard11writeToFileEPc+0x38>
    	myprintf("I was able to open 'write.txt' for writing\r\n");
 80007f2:	491c      	ldr	r1, [pc, #112]	; (8000864 <_ZN6SDCard11writeToFileEPc+0xa0>)
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff8b 	bl	8000710 <_ZN6SDCard8myprintfEPKcz>
 80007fa:	e007      	b.n	800080c <_ZN6SDCard11writeToFileEPc+0x48>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 8000802:	461a      	mov	r2, r3
 8000804:	4918      	ldr	r1, [pc, #96]	; (8000868 <_ZN6SDCard11writeToFileEPc+0xa4>)
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ff82 	bl	8000710 <_ZN6SDCard8myprintfEPKcz>
    }

	UINT bytesWrote;
	fres = f_write(&fil, readBuf, sizeof(readBuf), &bytesWrote);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f503 700c 	add.w	r0, r3, #560	; 0x230
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2204      	movs	r2, #4
 8000818:	6839      	ldr	r1, [r7, #0]
 800081a:	f006 f898 	bl	800694e <f_write>
 800081e:	4603      	mov	r3, r0
 8000820:	461a      	mov	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
	if(fres == FR_OK) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 800082e:	2b00      	cmp	r3, #0
 8000830:	d108      	bne.n	8000844 <_ZN6SDCard11writeToFileEPc+0x80>
		myprintf("Wrote %i bytes to '%s'!\r\n", bytesWrote, _nameFile);
 8000832:	68fa      	ldr	r2, [r7, #12]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f8d3 3464 	ldr.w	r3, [r3, #1124]	; 0x464
 800083a:	490c      	ldr	r1, [pc, #48]	; (800086c <_ZN6SDCard11writeToFileEPc+0xa8>)
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ff67 	bl	8000710 <_ZN6SDCard8myprintfEPKcz>
 8000842:	e003      	b.n	800084c <_ZN6SDCard11writeToFileEPc+0x88>
	} else {
		myprintf("f_write error (%i)\r\n");
 8000844:	490a      	ldr	r1, [pc, #40]	; (8000870 <_ZN6SDCard11writeToFileEPc+0xac>)
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff ff62 	bl	8000710 <_ZN6SDCard8myprintfEPKcz>
	}

	 //Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000852:	4618      	mov	r0, r3
 8000854:	f006 fa6e 	bl	8006d34 <f_close>
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	08007a14 	.word	0x08007a14
 8000864:	08007a70 	.word	0x08007a70
 8000868:	08007a20 	.word	0x08007a20
 800086c:	08007aa0 	.word	0x08007aa0
 8000870:	08007abc 	.word	0x08007abc

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000878:	f000 fab2 	bl	8000de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087c:	f000 f816 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000880:	f000 f8d4 	bl	8000a2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000884:	f000 f8a2 	bl	80009cc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000888:	f000 f862 	bl	8000950 <MX_SPI1_Init>
  MX_FATFS_Init();
 800088c:	f003 fa8e 	bl	8003dac <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  mainloop();
 8000890:	f7ff fe78 	bl	8000584 <mainloop>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000898:	4803      	ldr	r0, [pc, #12]	; (80008a8 <main+0x34>)
 800089a:	f000 fde9 	bl	8001470 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800089e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a2:	f000 fb19 	bl	8000ed8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008a6:	e7f5      	b.n	8000894 <main+0x20>
 80008a8:	48000400 	.word	0x48000400

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b096      	sub	sp, #88	; 0x58
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	2244      	movs	r2, #68	; 0x44
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f006 fbdc 	bl	8007078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	463b      	mov	r3, r7
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008d2:	f000 fdf5 	bl	80014c0 <HAL_PWREx_ControlVoltageScaling>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008dc:	f000 f91c 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e0:	2302      	movs	r3, #2
 80008e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ea:	2310      	movs	r3, #16
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ee:	2302      	movs	r3, #2
 80008f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f2:	2302      	movs	r3, #2
 80008f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008f6:	2301      	movs	r3, #1
 80008f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008fa:	230a      	movs	r3, #10
 80008fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008fe:	2307      	movs	r3, #7
 8000900:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000902:	2302      	movs	r3, #2
 8000904:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000906:	2302      	movs	r3, #2
 8000908:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4618      	mov	r0, r3
 8000910:	f000 fe2c 	bl	800156c <HAL_RCC_OscConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800091a:	f000 f8fd 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091e:	230f      	movs	r3, #15
 8000920:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000922:	2303      	movs	r3, #3
 8000924:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000932:	463b      	mov	r3, r7
 8000934:	2104      	movs	r1, #4
 8000936:	4618      	mov	r0, r3
 8000938:	f001 f9f4 	bl	8001d24 <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000942:	f000 f8e9 	bl	8000b18 <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	3758      	adds	r7, #88	; 0x58
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_SPI1_Init+0x74>)
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <MX_SPI1_Init+0x78>)
 8000958:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_SPI1_Init+0x74>)
 800095c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000960:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_SPI1_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_SPI1_Init+0x74>)
 800096a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800096e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_SPI1_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_SPI1_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_SPI1_Init+0x74>)
 800097e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000982:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_SPI1_Init+0x74>)
 8000986:	2230      	movs	r2, #48	; 0x30
 8000988:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_SPI1_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_SPI1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_SPI1_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_SPI1_Init+0x74>)
 800099e:	2207      	movs	r2, #7
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_SPI1_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_SPI1_Init+0x74>)
 80009aa:	2208      	movs	r2, #8
 80009ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_SPI1_Init+0x74>)
 80009b0:	f002 f898 	bl	8002ae4 <HAL_SPI_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009ba:	f000 f8ad 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200001a4 	.word	0x200001a4
 80009c8:	40013000 	.word	0x40013000

080009cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 80009d2:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <MX_USART2_UART_Init+0x5c>)
 80009d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 80009d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_USART2_UART_Init+0x58>)
 8000a10:	f002 fc82 	bl	8003318 <HAL_UART_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a1a:	f000 f87d 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000208 	.word	0x20000208
 8000a28:	40004400 	.word	0x40004400

08000a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a42:	4b32      	ldr	r3, [pc, #200]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a31      	ldr	r2, [pc, #196]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5a:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a2b      	ldr	r2, [pc, #172]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	4a25      	ldr	r2, [pc, #148]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7e:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	4a1f      	ldr	r2, [pc, #124]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a96:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8000aa8:	4819      	ldr	r0, [pc, #100]	; (8000b10 <MX_GPIO_Init+0xe4>)
 8000aaa:	f000 fcc9 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ab4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4813      	ldr	r0, [pc, #76]	; (8000b14 <MX_GPIO_Init+0xe8>)
 8000ac6:	f000 fb11 	bl	80010ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SD_CS_Pin;
 8000aca:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480b      	ldr	r0, [pc, #44]	; (8000b10 <MX_GPIO_Init+0xe4>)
 8000ae4:	f000 fb02 	bl	80010ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000ae8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_GPIO_Init+0xe4>)
 8000b00:	f000 faf4 	bl	80010ec <HAL_GPIO_Init>

}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	; 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	48000400 	.word	0x48000400
 8000b14:	48000800 	.word	0x48000800

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>
	...

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_MspInit+0x44>)
 8000b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <HAL_MspInit+0x44>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6613      	str	r3, [r2, #96]	; 0x60
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <HAL_MspInit+0x44>)
 8000b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_MspInit+0x44>)
 8000b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_MspInit+0x44>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_MspInit+0x44>)
 8000b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000

08000b6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <HAL_SPI_MspInit+0x7c>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d128      	bne.n	8000be0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <HAL_SPI_MspInit+0x80>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	4a16      	ldr	r2, [pc, #88]	; (8000bec <HAL_SPI_MspInit+0x80>)
 8000b94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b98:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <HAL_SPI_MspInit+0x80>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_SPI_MspInit+0x80>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a10      	ldr	r2, [pc, #64]	; (8000bec <HAL_SPI_MspInit+0x80>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_SPI_MspInit+0x80>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bbe:	23e0      	movs	r3, #224	; 0xe0
 8000bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bce:	2305      	movs	r3, #5
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bdc:	f000 fa86 	bl	80010ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000be0:	bf00      	nop
 8000be2:	3728      	adds	r7, #40	; 0x28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40013000 	.word	0x40013000
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0ac      	sub	sp, #176	; 0xb0
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2288      	movs	r2, #136	; 0x88
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f006 fa31 	bl	8007078 <memset>
  if(huart->Instance==USART2)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a21      	ldr	r2, [pc, #132]	; (8000ca0 <HAL_UART_MspInit+0xb0>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d13b      	bne.n	8000c98 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 fa9d 	bl	800216c <HAL_RCCEx_PeriphCLKConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c38:	f7ff ff6e 	bl	8000b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <HAL_UART_MspInit+0xb4>)
 8000c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c40:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <HAL_UART_MspInit+0xb4>)
 8000c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c46:	6593      	str	r3, [r2, #88]	; 0x58
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <HAL_UART_MspInit+0xb4>)
 8000c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <HAL_UART_MspInit+0xb4>)
 8000c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c58:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <HAL_UART_MspInit+0xb4>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c60:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_UART_MspInit+0xb4>)
 8000c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c84:	2307      	movs	r3, #7
 8000c86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c94:	f000 fa2a 	bl	80010ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c98:	bf00      	nop
 8000c9a:	37b0      	adds	r7, #176	; 0xb0
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40004400 	.word	0x40004400
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf4:	f000 f8d0 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d04:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <_sbrk+0x5c>)
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <_sbrk+0x60>)
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <_sbrk+0x64>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <_sbrk+0x68>)
 8000d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d207      	bcs.n	8000d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d2c:	f006 f97a 	bl	8007024 <__errno>
 8000d30:	4603      	mov	r3, r0
 8000d32:	220c      	movs	r2, #12
 8000d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	e009      	b.n	8000d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <_sbrk+0x64>)
 8000d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20018000 	.word	0x20018000
 8000d5c:	00000400 	.word	0x00000400
 8000d60:	2000028c 	.word	0x2000028c
 8000d64:	200002f0 	.word	0x200002f0

08000d68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <SystemInit+0x20>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <SystemInit+0x20>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d90:	f7ff ffea 	bl	8000d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d96:	490d      	ldr	r1, [pc, #52]	; (8000dcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <LoopForever+0xe>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dac:	4c0a      	ldr	r4, [pc, #40]	; (8000dd8 <LoopForever+0x16>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dba:	f006 f939 	bl	8007030 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dbe:	f7ff fd59 	bl	8000874 <main>

08000dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc2:	e7fe      	b.n	8000dc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000dd0:	08007c24 	.word	0x08007c24
  ldr r2, =_sbss
 8000dd4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000dd8:	200002ec 	.word	0x200002ec

08000ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC1_2_IRQHandler>
	...

08000de0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_Init+0x3c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <HAL_Init+0x3c>)
 8000df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df6:	2003      	movs	r0, #3
 8000df8:	f000 f944 	bl	8001084 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f000 f80f 	bl	8000e20 <HAL_InitTick>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d002      	beq.n	8000e0e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	71fb      	strb	r3, [r7, #7]
 8000e0c:	e001      	b.n	8000e12 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e0e:	f7ff fe89 	bl	8000b24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e12:	79fb      	ldrb	r3, [r7, #7]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40022000 	.word	0x40022000

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <HAL_InitTick+0x6c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d023      	beq.n	8000e7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_InitTick+0x70>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <HAL_InitTick+0x6c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f941 	bl	80010d2 <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10f      	bne.n	8000e76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d809      	bhi.n	8000e70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	f000 f919 	bl	800109a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e68:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <HAL_InitTick+0x74>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	e007      	b.n	8000e80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e004      	b.n	8000e80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	73fb      	strb	r3, [r7, #15]
 8000e7a:	e001      	b.n	8000e80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000004 	.word	0x20000004

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000290 	.word	0x20000290

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000290 	.word	0x20000290

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_Delay+0x44>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	; (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001050:	d301      	bcc.n	8001056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2301      	movs	r3, #1
 8001054:	e00f      	b.n	8001076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <SysTick_Config+0x40>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105e:	210f      	movs	r1, #15
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f7ff ff8e 	bl	8000f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <SysTick_Config+0x40>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <SysTick_Config+0x40>)
 8001070:	2207      	movs	r2, #7
 8001072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff47 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010ac:	f7ff ff5c 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f7ff ff8e 	bl	8000fd8 <NVIC_EncodePriority>
 80010bc:	4602      	mov	r2, r0
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff5d 	bl	8000f84 <__NVIC_SetPriority>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffb0 	bl	8001040 <SysTick_Config>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fa:	e17f      	b.n	80013fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	2101      	movs	r1, #1
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	4013      	ands	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 8171 	beq.w	80013f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b01      	cmp	r3, #1
 800111e:	d005      	beq.n	800112c <HAL_GPIO_Init+0x40>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d130      	bne.n	800118e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68da      	ldr	r2, [r3, #12]
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001162:	2201      	movs	r2, #1
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	091b      	lsrs	r3, r3, #4
 8001178:	f003 0201 	and.w	r2, r3, #1
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	2b03      	cmp	r3, #3
 8001198:	d118      	bne.n	80011cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011a0:	2201      	movs	r2, #1
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	08db      	lsrs	r3, r3, #3
 80011b6:	f003 0201 	and.w	r2, r3, #1
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d017      	beq.n	8001208 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d123      	bne.n	800125c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	08da      	lsrs	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3208      	adds	r2, #8
 800121c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	6939      	ldr	r1, [r7, #16]
 8001258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0203 	and.w	r2, r3, #3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80ac 	beq.w	80013f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	4b5f      	ldr	r3, [pc, #380]	; (800141c <HAL_GPIO_Init+0x330>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a2:	4a5e      	ldr	r2, [pc, #376]	; (800141c <HAL_GPIO_Init+0x330>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6613      	str	r3, [r2, #96]	; 0x60
 80012aa:	4b5c      	ldr	r3, [pc, #368]	; (800141c <HAL_GPIO_Init+0x330>)
 80012ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012b6:	4a5a      	ldr	r2, [pc, #360]	; (8001420 <HAL_GPIO_Init+0x334>)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3302      	adds	r3, #2
 80012be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	220f      	movs	r2, #15
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012e0:	d025      	beq.n	800132e <HAL_GPIO_Init+0x242>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4f      	ldr	r2, [pc, #316]	; (8001424 <HAL_GPIO_Init+0x338>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d01f      	beq.n	800132a <HAL_GPIO_Init+0x23e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4e      	ldr	r2, [pc, #312]	; (8001428 <HAL_GPIO_Init+0x33c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d019      	beq.n	8001326 <HAL_GPIO_Init+0x23a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4d      	ldr	r2, [pc, #308]	; (800142c <HAL_GPIO_Init+0x340>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d013      	beq.n	8001322 <HAL_GPIO_Init+0x236>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4c      	ldr	r2, [pc, #304]	; (8001430 <HAL_GPIO_Init+0x344>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d00d      	beq.n	800131e <HAL_GPIO_Init+0x232>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4b      	ldr	r2, [pc, #300]	; (8001434 <HAL_GPIO_Init+0x348>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d007      	beq.n	800131a <HAL_GPIO_Init+0x22e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4a      	ldr	r2, [pc, #296]	; (8001438 <HAL_GPIO_Init+0x34c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d101      	bne.n	8001316 <HAL_GPIO_Init+0x22a>
 8001312:	2306      	movs	r3, #6
 8001314:	e00c      	b.n	8001330 <HAL_GPIO_Init+0x244>
 8001316:	2307      	movs	r3, #7
 8001318:	e00a      	b.n	8001330 <HAL_GPIO_Init+0x244>
 800131a:	2305      	movs	r3, #5
 800131c:	e008      	b.n	8001330 <HAL_GPIO_Init+0x244>
 800131e:	2304      	movs	r3, #4
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x244>
 8001322:	2303      	movs	r3, #3
 8001324:	e004      	b.n	8001330 <HAL_GPIO_Init+0x244>
 8001326:	2302      	movs	r3, #2
 8001328:	e002      	b.n	8001330 <HAL_GPIO_Init+0x244>
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <HAL_GPIO_Init+0x244>
 800132e:	2300      	movs	r3, #0
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	f002 0203 	and.w	r2, r2, #3
 8001336:	0092      	lsls	r2, r2, #2
 8001338:	4093      	lsls	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001340:	4937      	ldr	r1, [pc, #220]	; (8001420 <HAL_GPIO_Init+0x334>)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	3302      	adds	r3, #2
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800134e:	4b3b      	ldr	r3, [pc, #236]	; (800143c <HAL_GPIO_Init+0x350>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001372:	4a32      	ldr	r2, [pc, #200]	; (800143c <HAL_GPIO_Init+0x350>)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001378:	4b30      	ldr	r3, [pc, #192]	; (800143c <HAL_GPIO_Init+0x350>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800139c:	4a27      	ldr	r2, [pc, #156]	; (800143c <HAL_GPIO_Init+0x350>)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013a2:	4b26      	ldr	r3, [pc, #152]	; (800143c <HAL_GPIO_Init+0x350>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013c6:	4a1d      	ldr	r2, [pc, #116]	; (800143c <HAL_GPIO_Init+0x350>)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <HAL_GPIO_Init+0x350>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013f0:	4a12      	ldr	r2, [pc, #72]	; (800143c <HAL_GPIO_Init+0x350>)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa22 f303 	lsr.w	r3, r2, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	f47f ae78 	bne.w	80010fc <HAL_GPIO_Init+0x10>
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	371c      	adds	r7, #28
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000
 8001420:	40010000 	.word	0x40010000
 8001424:	48000400 	.word	0x48000400
 8001428:	48000800 	.word	0x48000800
 800142c:	48000c00 	.word	0x48000c00
 8001430:	48001000 	.word	0x48001000
 8001434:	48001400 	.word	0x48001400
 8001438:	48001800 	.word	0x48001800
 800143c:	40010400 	.word	0x40010400

08001440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
 800144c:	4613      	mov	r3, r2
 800144e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001450:	787b      	ldrb	r3, [r7, #1]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800145c:	e002      	b.n	8001464 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001482:	887a      	ldrh	r2, [r7, #2]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4013      	ands	r3, r2
 8001488:	041a      	lsls	r2, r3, #16
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	43d9      	mvns	r1, r3
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	400b      	ands	r3, r1
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	619a      	str	r2, [r3, #24]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <HAL_PWREx_GetVoltageRange+0x18>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40007000 	.word	0x40007000

080014c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014ce:	d130      	bne.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014dc:	d038      	beq.n	8001550 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014de:	4b20      	ldr	r3, [pc, #128]	; (8001560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014e6:	4a1e      	ldr	r2, [pc, #120]	; (8001560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014ee:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2232      	movs	r2, #50	; 0x32
 80014f4:	fb02 f303 	mul.w	r3, r2, r3
 80014f8:	4a1b      	ldr	r2, [pc, #108]	; (8001568 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	0c9b      	lsrs	r3, r3, #18
 8001500:	3301      	adds	r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001504:	e002      	b.n	800150c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3b01      	subs	r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001518:	d102      	bne.n	8001520 <HAL_PWREx_ControlVoltageScaling+0x60>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1f2      	bne.n	8001506 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800152c:	d110      	bne.n	8001550 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e00f      	b.n	8001552 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800153a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800153e:	d007      	beq.n	8001550 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001548:	4a05      	ldr	r2, [pc, #20]	; (8001560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800154e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40007000 	.word	0x40007000
 8001564:	20000000 	.word	0x20000000
 8001568:	431bde83 	.word	0x431bde83

0800156c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e3ca      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800157e:	4b97      	ldr	r3, [pc, #604]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001588:	4b94      	ldr	r3, [pc, #592]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 80e4 	beq.w	8001768 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d007      	beq.n	80015b6 <HAL_RCC_OscConfig+0x4a>
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	2b0c      	cmp	r3, #12
 80015aa:	f040 808b 	bne.w	80016c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	f040 8087 	bne.w	80016c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015b6:	4b89      	ldr	r3, [pc, #548]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d005      	beq.n	80015ce <HAL_RCC_OscConfig+0x62>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e3a2      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1a      	ldr	r2, [r3, #32]
 80015d2:	4b82      	ldr	r3, [pc, #520]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d004      	beq.n	80015e8 <HAL_RCC_OscConfig+0x7c>
 80015de:	4b7f      	ldr	r3, [pc, #508]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015e6:	e005      	b.n	80015f4 <HAL_RCC_OscConfig+0x88>
 80015e8:	4b7c      	ldr	r3, [pc, #496]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 80015ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ee:	091b      	lsrs	r3, r3, #4
 80015f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d223      	bcs.n	8001640 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 fd55 	bl	80020ac <RCC_SetFlashLatencyFromMSIRange>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e383      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800160c:	4b73      	ldr	r3, [pc, #460]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a72      	ldr	r2, [pc, #456]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 8001612:	f043 0308 	orr.w	r3, r3, #8
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b70      	ldr	r3, [pc, #448]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	496d      	ldr	r1, [pc, #436]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800162a:	4b6c      	ldr	r3, [pc, #432]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	4968      	ldr	r1, [pc, #416]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 800163a:	4313      	orrs	r3, r2
 800163c:	604b      	str	r3, [r1, #4]
 800163e:	e025      	b.n	800168c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001640:	4b66      	ldr	r3, [pc, #408]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a65      	ldr	r2, [pc, #404]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 8001646:	f043 0308 	orr.w	r3, r3, #8
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b63      	ldr	r3, [pc, #396]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	4960      	ldr	r1, [pc, #384]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800165e:	4b5f      	ldr	r3, [pc, #380]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	495b      	ldr	r1, [pc, #364]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 800166e:	4313      	orrs	r3, r2
 8001670:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d109      	bne.n	800168c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fd15 	bl	80020ac <RCC_SetFlashLatencyFromMSIRange>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e343      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800168c:	f000 fc4a 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001690:	4602      	mov	r2, r0
 8001692:	4b52      	ldr	r3, [pc, #328]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	f003 030f 	and.w	r3, r3, #15
 800169c:	4950      	ldr	r1, [pc, #320]	; (80017e0 <HAL_RCC_OscConfig+0x274>)
 800169e:	5ccb      	ldrb	r3, [r1, r3]
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	fa22 f303 	lsr.w	r3, r2, r3
 80016a8:	4a4e      	ldr	r2, [pc, #312]	; (80017e4 <HAL_RCC_OscConfig+0x278>)
 80016aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016ac:	4b4e      	ldr	r3, [pc, #312]	; (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fbb5 	bl	8000e20 <HAL_InitTick>
 80016b6:	4603      	mov	r3, r0
 80016b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d052      	beq.n	8001766 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	e327      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d032      	beq.n	8001732 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016cc:	4b43      	ldr	r3, [pc, #268]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a42      	ldr	r2, [pc, #264]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fbf2 	bl	8000ec0 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016e0:	f7ff fbee 	bl	8000ec0 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e310      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016f2:	4b3a      	ldr	r3, [pc, #232]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016fe:	4b37      	ldr	r3, [pc, #220]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a36      	ldr	r2, [pc, #216]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 8001704:	f043 0308 	orr.w	r3, r3, #8
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b34      	ldr	r3, [pc, #208]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	4931      	ldr	r1, [pc, #196]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 8001718:	4313      	orrs	r3, r2
 800171a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800171c:	4b2f      	ldr	r3, [pc, #188]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	492c      	ldr	r1, [pc, #176]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
 8001730:	e01a      	b.n	8001768 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001732:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a29      	ldr	r2, [pc, #164]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 8001738:	f023 0301 	bic.w	r3, r3, #1
 800173c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800173e:	f7ff fbbf 	bl	8000ec0 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001746:	f7ff fbbb 	bl	8000ec0 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e2dd      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001758:	4b20      	ldr	r3, [pc, #128]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f0      	bne.n	8001746 <HAL_RCC_OscConfig+0x1da>
 8001764:	e000      	b.n	8001768 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001766:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	d074      	beq.n	800185e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	2b08      	cmp	r3, #8
 8001778:	d005      	beq.n	8001786 <HAL_RCC_OscConfig+0x21a>
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	2b0c      	cmp	r3, #12
 800177e:	d10e      	bne.n	800179e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	2b03      	cmp	r3, #3
 8001784:	d10b      	bne.n	800179e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d064      	beq.n	800185c <HAL_RCC_OscConfig+0x2f0>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d160      	bne.n	800185c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e2ba      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a6:	d106      	bne.n	80017b6 <HAL_RCC_OscConfig+0x24a>
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 80017ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	e026      	b.n	8001804 <HAL_RCC_OscConfig+0x298>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017be:	d115      	bne.n	80017ec <HAL_RCC_OscConfig+0x280>
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a05      	ldr	r2, [pc, #20]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 80017c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a02      	ldr	r2, [pc, #8]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 80017d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	e014      	b.n	8001804 <HAL_RCC_OscConfig+0x298>
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000
 80017e0:	08007b18 	.word	0x08007b18
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000004 	.word	0x20000004
 80017ec:	4ba0      	ldr	r3, [pc, #640]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a9f      	ldr	r2, [pc, #636]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 80017f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b9d      	ldr	r3, [pc, #628]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a9c      	ldr	r2, [pc, #624]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 80017fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d013      	beq.n	8001834 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f7ff fb58 	bl	8000ec0 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001814:	f7ff fb54 	bl	8000ec0 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b64      	cmp	r3, #100	; 0x64
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e276      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001826:	4b92      	ldr	r3, [pc, #584]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x2a8>
 8001832:	e014      	b.n	800185e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7ff fb44 	bl	8000ec0 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800183c:	f7ff fb40 	bl	8000ec0 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b64      	cmp	r3, #100	; 0x64
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e262      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800184e:	4b88      	ldr	r3, [pc, #544]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x2d0>
 800185a:	e000      	b.n	800185e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d060      	beq.n	800192c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	2b04      	cmp	r3, #4
 800186e:	d005      	beq.n	800187c <HAL_RCC_OscConfig+0x310>
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2b0c      	cmp	r3, #12
 8001874:	d119      	bne.n	80018aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d116      	bne.n	80018aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800187c:	4b7c      	ldr	r3, [pc, #496]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_OscConfig+0x328>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e23f      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001894:	4b76      	ldr	r3, [pc, #472]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	061b      	lsls	r3, r3, #24
 80018a2:	4973      	ldr	r1, [pc, #460]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018a8:	e040      	b.n	800192c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d023      	beq.n	80018fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b2:	4b6f      	ldr	r3, [pc, #444]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a6e      	ldr	r2, [pc, #440]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 80018b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018be:	f7ff faff 	bl	8000ec0 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c6:	f7ff fafb 	bl	8000ec0 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e21d      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d8:	4b65      	ldr	r3, [pc, #404]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e4:	4b62      	ldr	r3, [pc, #392]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	061b      	lsls	r3, r3, #24
 80018f2:	495f      	ldr	r1, [pc, #380]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
 80018f8:	e018      	b.n	800192c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fa:	4b5d      	ldr	r3, [pc, #372]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a5c      	ldr	r2, [pc, #368]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001906:	f7ff fadb 	bl	8000ec0 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190e:	f7ff fad7 	bl	8000ec0 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e1f9      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001920:	4b53      	ldr	r3, [pc, #332]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f0      	bne.n	800190e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d03c      	beq.n	80019b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d01c      	beq.n	800197a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001940:	4b4b      	ldr	r3, [pc, #300]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001946:	4a4a      	ldr	r2, [pc, #296]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7ff fab6 	bl	8000ec0 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff fab2 	bl	8000ec0 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e1d4      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800196a:	4b41      	ldr	r3, [pc, #260]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 800196c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0ef      	beq.n	8001958 <HAL_RCC_OscConfig+0x3ec>
 8001978:	e01b      	b.n	80019b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197a:	4b3d      	ldr	r3, [pc, #244]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 800197c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001980:	4a3b      	ldr	r2, [pc, #236]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001982:	f023 0301 	bic.w	r3, r3, #1
 8001986:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198a:	f7ff fa99 	bl	8000ec0 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001992:	f7ff fa95 	bl	8000ec0 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e1b7      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019a4:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 80019a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1ef      	bne.n	8001992 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 80a6 	beq.w	8001b0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019c4:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 80019c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10d      	bne.n	80019ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d0:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 80019d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d4:	4a26      	ldr	r2, [pc, #152]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 80019d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019da:	6593      	str	r3, [r2, #88]	; 0x58
 80019dc:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 80019de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019e8:	2301      	movs	r3, #1
 80019ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <HAL_RCC_OscConfig+0x508>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d118      	bne.n	8001a2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <HAL_RCC_OscConfig+0x508>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a1d      	ldr	r2, [pc, #116]	; (8001a74 <HAL_RCC_OscConfig+0x508>)
 80019fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a04:	f7ff fa5c 	bl	8000ec0 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0c:	f7ff fa58 	bl	8000ec0 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e17a      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_RCC_OscConfig+0x508>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d108      	bne.n	8001a44 <HAL_RCC_OscConfig+0x4d8>
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a38:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a42:	e029      	b.n	8001a98 <HAL_RCC_OscConfig+0x52c>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b05      	cmp	r3, #5
 8001a4a:	d115      	bne.n	8001a78 <HAL_RCC_OscConfig+0x50c>
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a52:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a62:	4a03      	ldr	r2, [pc, #12]	; (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a6c:	e014      	b.n	8001a98 <HAL_RCC_OscConfig+0x52c>
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40007000 	.word	0x40007000
 8001a78:	4b9c      	ldr	r3, [pc, #624]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7e:	4a9b      	ldr	r2, [pc, #620]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a88:	4b98      	ldr	r3, [pc, #608]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8e:	4a97      	ldr	r2, [pc, #604]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001a90:	f023 0304 	bic.w	r3, r3, #4
 8001a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d016      	beq.n	8001ace <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa0:	f7ff fa0e 	bl	8000ec0 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fa0a 	bl	8000ec0 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e12a      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001abe:	4b8b      	ldr	r3, [pc, #556]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0ed      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x53c>
 8001acc:	e015      	b.n	8001afa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ace:	f7ff f9f7 	bl	8000ec0 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad4:	e00a      	b.n	8001aec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad6:	f7ff f9f3 	bl	8000ec0 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e113      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aec:	4b7f      	ldr	r3, [pc, #508]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1ed      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001afa:	7ffb      	ldrb	r3, [r7, #31]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d105      	bne.n	8001b0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b00:	4b7a      	ldr	r3, [pc, #488]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b04:	4a79      	ldr	r2, [pc, #484]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80fe 	beq.w	8001d12 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	f040 80d0 	bne.w	8001cc0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b20:	4b72      	ldr	r3, [pc, #456]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f003 0203 	and.w	r2, r3, #3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d130      	bne.n	8001b96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d127      	bne.n	8001b96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b50:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d11f      	bne.n	8001b96 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b60:	2a07      	cmp	r2, #7
 8001b62:	bf14      	ite	ne
 8001b64:	2201      	movne	r2, #1
 8001b66:	2200      	moveq	r2, #0
 8001b68:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d113      	bne.n	8001b96 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b78:	085b      	lsrs	r3, r3, #1
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d109      	bne.n	8001b96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	085b      	lsrs	r3, r3, #1
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d06e      	beq.n	8001c74 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b0c      	cmp	r3, #12
 8001b9a:	d069      	beq.n	8001c70 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b9c:	4b53      	ldr	r3, [pc, #332]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d105      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ba8:	4b50      	ldr	r3, [pc, #320]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0ad      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bb8:	4b4c      	ldr	r3, [pc, #304]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a4b      	ldr	r2, [pc, #300]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001bbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bc2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bc4:	f7ff f97c 	bl	8000ec0 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7ff f978 	bl	8000ec0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e09a      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bde:	4b43      	ldr	r3, [pc, #268]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bea:	4b40      	ldr	r3, [pc, #256]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	4b40      	ldr	r3, [pc, #256]	; (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bfa:	3a01      	subs	r2, #1
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	4311      	orrs	r1, r2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c04:	0212      	lsls	r2, r2, #8
 8001c06:	4311      	orrs	r1, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c0c:	0852      	lsrs	r2, r2, #1
 8001c0e:	3a01      	subs	r2, #1
 8001c10:	0552      	lsls	r2, r2, #21
 8001c12:	4311      	orrs	r1, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c18:	0852      	lsrs	r2, r2, #1
 8001c1a:	3a01      	subs	r2, #1
 8001c1c:	0652      	lsls	r2, r2, #25
 8001c1e:	4311      	orrs	r1, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c24:	0912      	lsrs	r2, r2, #4
 8001c26:	0452      	lsls	r2, r2, #17
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	4930      	ldr	r1, [pc, #192]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c30:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a2d      	ldr	r2, [pc, #180]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c3c:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4a2a      	ldr	r2, [pc, #168]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c48:	f7ff f93a 	bl	8000ec0 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c50:	f7ff f936 	bl	8000ec0 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e058      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c62:	4b22      	ldr	r3, [pc, #136]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c6e:	e050      	b.n	8001d12 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e04f      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d148      	bne.n	8001d12 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c80:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a19      	ldr	r2, [pc, #100]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c8c:	4b17      	ldr	r3, [pc, #92]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4a16      	ldr	r2, [pc, #88]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c98:	f7ff f912 	bl	8000ec0 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7ff f90e 	bl	8000ec0 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e030      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x734>
 8001cbe:	e028      	b.n	8001d12 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	2b0c      	cmp	r3, #12
 8001cc4:	d023      	beq.n	8001d0e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a08      	ldr	r2, [pc, #32]	; (8001cec <HAL_RCC_OscConfig+0x780>)
 8001ccc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd2:	f7ff f8f5 	bl	8000ec0 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd8:	e00c      	b.n	8001cf4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cda:	f7ff f8f1 	bl	8000ec0 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d905      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e013      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_RCC_OscConfig+0x7b0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1ec      	bne.n	8001cda <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_RCC_OscConfig+0x7b0>)
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	4905      	ldr	r1, [pc, #20]	; (8001d1c <HAL_RCC_OscConfig+0x7b0>)
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_RCC_OscConfig+0x7b4>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60cb      	str	r3, [r1, #12]
 8001d0c:	e001      	b.n	8001d12 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3720      	adds	r7, #32
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	feeefffc 	.word	0xfeeefffc

08001d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0e7      	b.n	8001f08 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d38:	4b75      	ldr	r3, [pc, #468]	; (8001f10 <HAL_RCC_ClockConfig+0x1ec>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d910      	bls.n	8001d68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b72      	ldr	r3, [pc, #456]	; (8001f10 <HAL_RCC_ClockConfig+0x1ec>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 0207 	bic.w	r2, r3, #7
 8001d4e:	4970      	ldr	r1, [pc, #448]	; (8001f10 <HAL_RCC_ClockConfig+0x1ec>)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	4b6e      	ldr	r3, [pc, #440]	; (8001f10 <HAL_RCC_ClockConfig+0x1ec>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0cf      	b.n	8001f08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d010      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	4b66      	ldr	r3, [pc, #408]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d908      	bls.n	8001d96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d84:	4b63      	ldr	r3, [pc, #396]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4960      	ldr	r1, [pc, #384]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d04c      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d107      	bne.n	8001dba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001daa:	4b5a      	ldr	r3, [pc, #360]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d121      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e0a6      	b.n	8001f08 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dc2:	4b54      	ldr	r3, [pc, #336]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d115      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e09a      	b.n	8001f08 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d107      	bne.n	8001dea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dda:	4b4e      	ldr	r3, [pc, #312]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d109      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e08e      	b.n	8001f08 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dea:	4b4a      	ldr	r3, [pc, #296]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e086      	b.n	8001f08 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dfa:	4b46      	ldr	r3, [pc, #280]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f023 0203 	bic.w	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	4943      	ldr	r1, [pc, #268]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e0c:	f7ff f858 	bl	8000ec0 <HAL_GetTick>
 8001e10:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	e00a      	b.n	8001e2a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e14:	f7ff f854 	bl	8000ec0 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e06e      	b.n	8001f08 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2a:	4b3a      	ldr	r3, [pc, #232]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 020c 	and.w	r2, r3, #12
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d1eb      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d010      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d208      	bcs.n	8001e6a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e58:	4b2e      	ldr	r3, [pc, #184]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	492b      	ldr	r1, [pc, #172]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e6a:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <HAL_RCC_ClockConfig+0x1ec>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d210      	bcs.n	8001e9a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e78:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <HAL_RCC_ClockConfig+0x1ec>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f023 0207 	bic.w	r2, r3, #7
 8001e80:	4923      	ldr	r1, [pc, #140]	; (8001f10 <HAL_RCC_ClockConfig+0x1ec>)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e88:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <HAL_RCC_ClockConfig+0x1ec>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d001      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e036      	b.n	8001f08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d008      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	4918      	ldr	r1, [pc, #96]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d009      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4910      	ldr	r1, [pc, #64]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ed8:	f000 f824 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	091b      	lsrs	r3, r3, #4
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	490b      	ldr	r1, [pc, #44]	; (8001f18 <HAL_RCC_ClockConfig+0x1f4>)
 8001eea:	5ccb      	ldrb	r3, [r1, r3]
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef4:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <HAL_RCC_ClockConfig+0x1f8>)
 8001ef6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x1fc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe ff8f 	bl	8000e20 <HAL_InitTick>
 8001f02:	4603      	mov	r3, r0
 8001f04:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f06:	7afb      	ldrb	r3, [r7, #11]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40022000 	.word	0x40022000
 8001f14:	40021000 	.word	0x40021000
 8001f18:	08007b18 	.word	0x08007b18
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	20000004 	.word	0x20000004

08001f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f32:	4b3e      	ldr	r3, [pc, #248]	; (800202c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f3c:	4b3b      	ldr	r3, [pc, #236]	; (800202c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x34>
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	2b0c      	cmp	r3, #12
 8001f50:	d121      	bne.n	8001f96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d11e      	bne.n	8001f96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f58:	4b34      	ldr	r3, [pc, #208]	; (800202c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d107      	bne.n	8001f74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f64:	4b31      	ldr	r3, [pc, #196]	; (800202c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6a:	0a1b      	lsrs	r3, r3, #8
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	61fb      	str	r3, [r7, #28]
 8001f72:	e005      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f74:	4b2d      	ldr	r3, [pc, #180]	; (800202c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f80:	4a2b      	ldr	r2, [pc, #172]	; (8002030 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10d      	bne.n	8001fac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d102      	bne.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f9e:	61bb      	str	r3, [r7, #24]
 8001fa0:	e004      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fa8:	4b23      	ldr	r3, [pc, #140]	; (8002038 <HAL_RCC_GetSysClockFreq+0x114>)
 8001faa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	2b0c      	cmp	r3, #12
 8001fb0:	d134      	bne.n	800201c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	; (800202c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d003      	beq.n	8001fca <HAL_RCC_GetSysClockFreq+0xa6>
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d003      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xac>
 8001fc8:	e005      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fca:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fcc:	617b      	str	r3, [r7, #20]
      break;
 8001fce:	e005      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fd2:	617b      	str	r3, [r7, #20]
      break;
 8001fd4:	e002      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	617b      	str	r3, [r7, #20]
      break;
 8001fda:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	fb03 f202 	mul.w	r2, r3, r2
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002000:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_RCC_GetSysClockFreq+0x108>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	0e5b      	lsrs	r3, r3, #25
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	3301      	adds	r3, #1
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	fbb2 f3f3 	udiv	r3, r2, r3
 800201a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800201c:	69bb      	ldr	r3, [r7, #24]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	; 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	08007b30 	.word	0x08007b30
 8002034:	00f42400 	.word	0x00f42400
 8002038:	007a1200 	.word	0x007a1200

0800203c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <HAL_RCC_GetHCLKFreq+0x14>)
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	20000000 	.word	0x20000000

08002054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002058:	f7ff fff0 	bl	800203c <HAL_RCC_GetHCLKFreq>
 800205c:	4602      	mov	r2, r0
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	0a1b      	lsrs	r3, r3, #8
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	4904      	ldr	r1, [pc, #16]	; (800207c <HAL_RCC_GetPCLK1Freq+0x28>)
 800206a:	5ccb      	ldrb	r3, [r1, r3]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002074:	4618      	mov	r0, r3
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	08007b28 	.word	0x08007b28

08002080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002084:	f7ff ffda 	bl	800203c <HAL_RCC_GetHCLKFreq>
 8002088:	4602      	mov	r2, r0
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	0adb      	lsrs	r3, r3, #11
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	4904      	ldr	r1, [pc, #16]	; (80020a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002096:	5ccb      	ldrb	r3, [r1, r3]
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000
 80020a8:	08007b28 	.word	0x08007b28

080020ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020b8:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020c4:	f7ff f9ee 	bl	80014a4 <HAL_PWREx_GetVoltageRange>
 80020c8:	6178      	str	r0, [r7, #20]
 80020ca:	e014      	b.n	80020f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020cc:	4b25      	ldr	r3, [pc, #148]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d0:	4a24      	ldr	r2, [pc, #144]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d6:	6593      	str	r3, [r2, #88]	; 0x58
 80020d8:	4b22      	ldr	r3, [pc, #136]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020e4:	f7ff f9de 	bl	80014a4 <HAL_PWREx_GetVoltageRange>
 80020e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ee:	4a1d      	ldr	r2, [pc, #116]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020fc:	d10b      	bne.n	8002116 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b80      	cmp	r3, #128	; 0x80
 8002102:	d919      	bls.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2ba0      	cmp	r3, #160	; 0xa0
 8002108:	d902      	bls.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800210a:	2302      	movs	r3, #2
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	e013      	b.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002110:	2301      	movs	r3, #1
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	e010      	b.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b80      	cmp	r3, #128	; 0x80
 800211a:	d902      	bls.n	8002122 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800211c:	2303      	movs	r3, #3
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	e00a      	b.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b80      	cmp	r3, #128	; 0x80
 8002126:	d102      	bne.n	800212e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002128:	2302      	movs	r3, #2
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	e004      	b.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b70      	cmp	r3, #112	; 0x70
 8002132:	d101      	bne.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002134:	2301      	movs	r3, #1
 8002136:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f023 0207 	bic.w	r2, r3, #7
 8002140:	4909      	ldr	r1, [pc, #36]	; (8002168 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002148:	4b07      	ldr	r3, [pc, #28]	; (8002168 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	429a      	cmp	r2, r3
 8002154:	d001      	beq.n	800215a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	40022000 	.word	0x40022000

0800216c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002174:	2300      	movs	r3, #0
 8002176:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002178:	2300      	movs	r3, #0
 800217a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002184:	2b00      	cmp	r3, #0
 8002186:	d041      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800218c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002190:	d02a      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002192:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002196:	d824      	bhi.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002198:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800219c:	d008      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800219e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021a2:	d81e      	bhi.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ac:	d010      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021ae:	e018      	b.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021b0:	4b86      	ldr	r3, [pc, #536]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4a85      	ldr	r2, [pc, #532]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021bc:	e015      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3304      	adds	r3, #4
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fabb 	bl	8002740 <RCCEx_PLLSAI1_Config>
 80021ca:	4603      	mov	r3, r0
 80021cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021ce:	e00c      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3320      	adds	r3, #32
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fba6 	bl	8002928 <RCCEx_PLLSAI2_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021e0:	e003      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	74fb      	strb	r3, [r7, #19]
      break;
 80021e6:	e000      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021ea:	7cfb      	ldrb	r3, [r7, #19]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10b      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021f0:	4b76      	ldr	r3, [pc, #472]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021fe:	4973      	ldr	r1, [pc, #460]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002206:	e001      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002208:	7cfb      	ldrb	r3, [r7, #19]
 800220a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d041      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800221c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002220:	d02a      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002222:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002226:	d824      	bhi.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002228:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800222c:	d008      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800222e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002232:	d81e      	bhi.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00a      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800223c:	d010      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800223e:	e018      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002240:	4b62      	ldr	r3, [pc, #392]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4a61      	ldr	r2, [pc, #388]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800224c:	e015      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3304      	adds	r3, #4
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f000 fa73 	bl	8002740 <RCCEx_PLLSAI1_Config>
 800225a:	4603      	mov	r3, r0
 800225c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800225e:	e00c      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3320      	adds	r3, #32
 8002264:	2100      	movs	r1, #0
 8002266:	4618      	mov	r0, r3
 8002268:	f000 fb5e 	bl	8002928 <RCCEx_PLLSAI2_Config>
 800226c:	4603      	mov	r3, r0
 800226e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002270:	e003      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	74fb      	strb	r3, [r7, #19]
      break;
 8002276:	e000      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002278:	bf00      	nop
    }

    if(ret == HAL_OK)
 800227a:	7cfb      	ldrb	r3, [r7, #19]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10b      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002280:	4b52      	ldr	r3, [pc, #328]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800228e:	494f      	ldr	r1, [pc, #316]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002296:	e001      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 80a0 	beq.w	80023ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022aa:	2300      	movs	r3, #0
 80022ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022ae:	4b47      	ldr	r3, [pc, #284]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022be:	2300      	movs	r3, #0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00d      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c4:	4b41      	ldr	r3, [pc, #260]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c8:	4a40      	ldr	r2, [pc, #256]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ce:	6593      	str	r3, [r2, #88]	; 0x58
 80022d0:	4b3e      	ldr	r3, [pc, #248]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022dc:	2301      	movs	r3, #1
 80022de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022e0:	4b3b      	ldr	r3, [pc, #236]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a3a      	ldr	r2, [pc, #232]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022ec:	f7fe fde8 	bl	8000ec0 <HAL_GetTick>
 80022f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022f2:	e009      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f4:	f7fe fde4 	bl	8000ec0 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d902      	bls.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	74fb      	strb	r3, [r7, #19]
        break;
 8002306:	e005      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002308:	4b31      	ldr	r3, [pc, #196]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ef      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d15c      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800231a:	4b2c      	ldr	r3, [pc, #176]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002320:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002324:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d01f      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	429a      	cmp	r2, r3
 8002336:	d019      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002338:	4b24      	ldr	r3, [pc, #144]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002342:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002344:	4b21      	ldr	r3, [pc, #132]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234a:	4a20      	ldr	r2, [pc, #128]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002354:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235a:	4a1c      	ldr	r2, [pc, #112]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002364:	4a19      	ldr	r2, [pc, #100]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d016      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002376:	f7fe fda3 	bl	8000ec0 <HAL_GetTick>
 800237a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800237c:	e00b      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237e:	f7fe fd9f 	bl	8000ec0 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f241 3288 	movw	r2, #5000	; 0x1388
 800238c:	4293      	cmp	r3, r2
 800238e:	d902      	bls.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	74fb      	strb	r3, [r7, #19]
            break;
 8002394:	e006      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002396:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0ec      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ba:	4904      	ldr	r1, [pc, #16]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023c2:	e009      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023c4:	7cfb      	ldrb	r3, [r7, #19]
 80023c6:	74bb      	strb	r3, [r7, #18]
 80023c8:	e006      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d4:	7cfb      	ldrb	r3, [r7, #19]
 80023d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023d8:	7c7b      	ldrb	r3, [r7, #17]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d105      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023de:	4b9e      	ldr	r3, [pc, #632]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	4a9d      	ldr	r2, [pc, #628]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00a      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023f6:	4b98      	ldr	r3, [pc, #608]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fc:	f023 0203 	bic.w	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002404:	4994      	ldr	r1, [pc, #592]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00a      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002418:	4b8f      	ldr	r3, [pc, #572]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	f023 020c 	bic.w	r2, r3, #12
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002426:	498c      	ldr	r1, [pc, #560]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002428:	4313      	orrs	r3, r2
 800242a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00a      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800243a:	4b87      	ldr	r3, [pc, #540]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002440:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	4983      	ldr	r1, [pc, #524]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800245c:	4b7e      	ldr	r3, [pc, #504]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	497b      	ldr	r1, [pc, #492]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800247e:	4b76      	ldr	r3, [pc, #472]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002484:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248c:	4972      	ldr	r1, [pc, #456]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024a0:	4b6d      	ldr	r3, [pc, #436]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	496a      	ldr	r1, [pc, #424]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024c2:	4b65      	ldr	r3, [pc, #404]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d0:	4961      	ldr	r1, [pc, #388]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00a      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024e4:	4b5c      	ldr	r3, [pc, #368]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f2:	4959      	ldr	r1, [pc, #356]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002506:	4b54      	ldr	r3, [pc, #336]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002514:	4950      	ldr	r1, [pc, #320]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002528:	4b4b      	ldr	r3, [pc, #300]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002536:	4948      	ldr	r1, [pc, #288]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800254a:	4b43      	ldr	r3, [pc, #268]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002550:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	493f      	ldr	r1, [pc, #252]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d028      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800256c:	4b3a      	ldr	r3, [pc, #232]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800257a:	4937      	ldr	r1, [pc, #220]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002586:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800258a:	d106      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800258c:	4b32      	ldr	r3, [pc, #200]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4a31      	ldr	r2, [pc, #196]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002596:	60d3      	str	r3, [r2, #12]
 8002598:	e011      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800259e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025a2:	d10c      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3304      	adds	r3, #4
 80025a8:	2101      	movs	r1, #1
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f8c8 	bl	8002740 <RCCEx_PLLSAI1_Config>
 80025b0:	4603      	mov	r3, r0
 80025b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025b4:	7cfb      	ldrb	r3, [r7, #19]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025ba:	7cfb      	ldrb	r3, [r7, #19]
 80025bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d028      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025ca:	4b23      	ldr	r3, [pc, #140]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d8:	491f      	ldr	r1, [pc, #124]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025e8:	d106      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ea:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	4a1a      	ldr	r2, [pc, #104]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025f4:	60d3      	str	r3, [r2, #12]
 80025f6:	e011      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002600:	d10c      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3304      	adds	r3, #4
 8002606:	2101      	movs	r1, #1
 8002608:	4618      	mov	r0, r3
 800260a:	f000 f899 	bl	8002740 <RCCEx_PLLSAI1_Config>
 800260e:	4603      	mov	r3, r0
 8002610:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002612:	7cfb      	ldrb	r3, [r7, #19]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002618:	7cfb      	ldrb	r3, [r7, #19]
 800261a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d02b      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002636:	4908      	ldr	r1, [pc, #32]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002642:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002646:	d109      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4a02      	ldr	r2, [pc, #8]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002652:	60d3      	str	r3, [r2, #12]
 8002654:	e014      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002660:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002664:	d10c      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3304      	adds	r3, #4
 800266a:	2101      	movs	r1, #1
 800266c:	4618      	mov	r0, r3
 800266e:	f000 f867 	bl	8002740 <RCCEx_PLLSAI1_Config>
 8002672:	4603      	mov	r3, r0
 8002674:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800267c:	7cfb      	ldrb	r3, [r7, #19]
 800267e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d02f      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800268c:	4b2b      	ldr	r3, [pc, #172]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800269a:	4928      	ldr	r1, [pc, #160]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026aa:	d10d      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3304      	adds	r3, #4
 80026b0:	2102      	movs	r1, #2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 f844 	bl	8002740 <RCCEx_PLLSAI1_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026bc:	7cfb      	ldrb	r3, [r7, #19]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d014      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	74bb      	strb	r3, [r7, #18]
 80026c6:	e011      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026d0:	d10c      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3320      	adds	r3, #32
 80026d6:	2102      	movs	r1, #2
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 f925 	bl	8002928 <RCCEx_PLLSAI2_Config>
 80026de:	4603      	mov	r3, r0
 80026e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026e2:	7cfb      	ldrb	r3, [r7, #19]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00a      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026f8:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002706:	490d      	ldr	r1, [pc, #52]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00b      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002720:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800272a:	4904      	ldr	r1, [pc, #16]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002732:	7cbb      	ldrb	r3, [r7, #18]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000

08002740 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800274e:	4b75      	ldr	r3, [pc, #468]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d018      	beq.n	800278c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800275a:	4b72      	ldr	r3, [pc, #456]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 0203 	and.w	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d10d      	bne.n	8002786 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
       ||
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002772:	4b6c      	ldr	r3, [pc, #432]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	091b      	lsrs	r3, r3, #4
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
       ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d047      	beq.n	8002816 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
 800278a:	e044      	b.n	8002816 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b03      	cmp	r3, #3
 8002792:	d018      	beq.n	80027c6 <RCCEx_PLLSAI1_Config+0x86>
 8002794:	2b03      	cmp	r3, #3
 8002796:	d825      	bhi.n	80027e4 <RCCEx_PLLSAI1_Config+0xa4>
 8002798:	2b01      	cmp	r3, #1
 800279a:	d002      	beq.n	80027a2 <RCCEx_PLLSAI1_Config+0x62>
 800279c:	2b02      	cmp	r3, #2
 800279e:	d009      	beq.n	80027b4 <RCCEx_PLLSAI1_Config+0x74>
 80027a0:	e020      	b.n	80027e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027a2:	4b60      	ldr	r3, [pc, #384]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d11d      	bne.n	80027ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b2:	e01a      	b.n	80027ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027b4:	4b5b      	ldr	r3, [pc, #364]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d116      	bne.n	80027ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c4:	e013      	b.n	80027ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027c6:	4b57      	ldr	r3, [pc, #348]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10f      	bne.n	80027f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027d2:	4b54      	ldr	r3, [pc, #336]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027e2:	e006      	b.n	80027f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
      break;
 80027e8:	e004      	b.n	80027f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ea:	bf00      	nop
 80027ec:	e002      	b.n	80027f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ee:	bf00      	nop
 80027f0:	e000      	b.n	80027f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10d      	bne.n	8002816 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027fa:	4b4a      	ldr	r3, [pc, #296]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6819      	ldr	r1, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	3b01      	subs	r3, #1
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	430b      	orrs	r3, r1
 8002810:	4944      	ldr	r1, [pc, #272]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d17d      	bne.n	8002918 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800281c:	4b41      	ldr	r3, [pc, #260]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a40      	ldr	r2, [pc, #256]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002822:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002828:	f7fe fb4a 	bl	8000ec0 <HAL_GetTick>
 800282c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800282e:	e009      	b.n	8002844 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002830:	f7fe fb46 	bl	8000ec0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d902      	bls.n	8002844 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	73fb      	strb	r3, [r7, #15]
        break;
 8002842:	e005      	b.n	8002850 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002844:	4b37      	ldr	r3, [pc, #220]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ef      	bne.n	8002830 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d160      	bne.n	8002918 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d111      	bne.n	8002880 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800285c:	4b31      	ldr	r3, [pc, #196]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6892      	ldr	r2, [r2, #8]
 800286c:	0211      	lsls	r1, r2, #8
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68d2      	ldr	r2, [r2, #12]
 8002872:	0912      	lsrs	r2, r2, #4
 8002874:	0452      	lsls	r2, r2, #17
 8002876:	430a      	orrs	r2, r1
 8002878:	492a      	ldr	r1, [pc, #168]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287a:	4313      	orrs	r3, r2
 800287c:	610b      	str	r3, [r1, #16]
 800287e:	e027      	b.n	80028d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d112      	bne.n	80028ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002886:	4b27      	ldr	r3, [pc, #156]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800288e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6892      	ldr	r2, [r2, #8]
 8002896:	0211      	lsls	r1, r2, #8
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6912      	ldr	r2, [r2, #16]
 800289c:	0852      	lsrs	r2, r2, #1
 800289e:	3a01      	subs	r2, #1
 80028a0:	0552      	lsls	r2, r2, #21
 80028a2:	430a      	orrs	r2, r1
 80028a4:	491f      	ldr	r1, [pc, #124]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	610b      	str	r3, [r1, #16]
 80028aa:	e011      	b.n	80028d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028ac:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6892      	ldr	r2, [r2, #8]
 80028bc:	0211      	lsls	r1, r2, #8
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6952      	ldr	r2, [r2, #20]
 80028c2:	0852      	lsrs	r2, r2, #1
 80028c4:	3a01      	subs	r2, #1
 80028c6:	0652      	lsls	r2, r2, #25
 80028c8:	430a      	orrs	r2, r1
 80028ca:	4916      	ldr	r1, [pc, #88]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028d0:	4b14      	ldr	r3, [pc, #80]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a13      	ldr	r2, [pc, #76]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028dc:	f7fe faf0 	bl	8000ec0 <HAL_GetTick>
 80028e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028e2:	e009      	b.n	80028f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028e4:	f7fe faec 	bl	8000ec0 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d902      	bls.n	80028f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	73fb      	strb	r3, [r7, #15]
          break;
 80028f6:	e005      	b.n	8002904 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028f8:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0ef      	beq.n	80028e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	4904      	ldr	r1, [pc, #16]	; (8002924 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002914:	4313      	orrs	r3, r2
 8002916:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002918:	7bfb      	ldrb	r3, [r7, #15]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000

08002928 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002936:	4b6a      	ldr	r3, [pc, #424]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d018      	beq.n	8002974 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002942:	4b67      	ldr	r3, [pc, #412]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f003 0203 	and.w	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d10d      	bne.n	800296e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
       ||
 8002956:	2b00      	cmp	r3, #0
 8002958:	d009      	beq.n	800296e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800295a:	4b61      	ldr	r3, [pc, #388]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
       ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d047      	beq.n	80029fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
 8002972:	e044      	b.n	80029fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b03      	cmp	r3, #3
 800297a:	d018      	beq.n	80029ae <RCCEx_PLLSAI2_Config+0x86>
 800297c:	2b03      	cmp	r3, #3
 800297e:	d825      	bhi.n	80029cc <RCCEx_PLLSAI2_Config+0xa4>
 8002980:	2b01      	cmp	r3, #1
 8002982:	d002      	beq.n	800298a <RCCEx_PLLSAI2_Config+0x62>
 8002984:	2b02      	cmp	r3, #2
 8002986:	d009      	beq.n	800299c <RCCEx_PLLSAI2_Config+0x74>
 8002988:	e020      	b.n	80029cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800298a:	4b55      	ldr	r3, [pc, #340]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d11d      	bne.n	80029d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800299a:	e01a      	b.n	80029d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800299c:	4b50      	ldr	r3, [pc, #320]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d116      	bne.n	80029d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ac:	e013      	b.n	80029d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029ae:	4b4c      	ldr	r3, [pc, #304]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10f      	bne.n	80029da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029ba:	4b49      	ldr	r3, [pc, #292]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d109      	bne.n	80029da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029ca:	e006      	b.n	80029da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      break;
 80029d0:	e004      	b.n	80029dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029d2:	bf00      	nop
 80029d4:	e002      	b.n	80029dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029d6:	bf00      	nop
 80029d8:	e000      	b.n	80029dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029da:	bf00      	nop
    }

    if(status == HAL_OK)
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10d      	bne.n	80029fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029e2:	4b3f      	ldr	r3, [pc, #252]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6819      	ldr	r1, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	430b      	orrs	r3, r1
 80029f8:	4939      	ldr	r1, [pc, #228]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d167      	bne.n	8002ad4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a04:	4b36      	ldr	r3, [pc, #216]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a35      	ldr	r2, [pc, #212]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a10:	f7fe fa56 	bl	8000ec0 <HAL_GetTick>
 8002a14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a16:	e009      	b.n	8002a2c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a18:	f7fe fa52 	bl	8000ec0 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d902      	bls.n	8002a2c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	73fb      	strb	r3, [r7, #15]
        break;
 8002a2a:	e005      	b.n	8002a38 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a2c:	4b2c      	ldr	r3, [pc, #176]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1ef      	bne.n	8002a18 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d14a      	bne.n	8002ad4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d111      	bne.n	8002a68 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a44:	4b26      	ldr	r3, [pc, #152]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6892      	ldr	r2, [r2, #8]
 8002a54:	0211      	lsls	r1, r2, #8
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68d2      	ldr	r2, [r2, #12]
 8002a5a:	0912      	lsrs	r2, r2, #4
 8002a5c:	0452      	lsls	r2, r2, #17
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	491f      	ldr	r1, [pc, #124]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	614b      	str	r3, [r1, #20]
 8002a66:	e011      	b.n	8002a8c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a68:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6892      	ldr	r2, [r2, #8]
 8002a78:	0211      	lsls	r1, r2, #8
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6912      	ldr	r2, [r2, #16]
 8002a7e:	0852      	lsrs	r2, r2, #1
 8002a80:	3a01      	subs	r2, #1
 8002a82:	0652      	lsls	r2, r2, #25
 8002a84:	430a      	orrs	r2, r1
 8002a86:	4916      	ldr	r1, [pc, #88]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a8c:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a13      	ldr	r2, [pc, #76]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7fe fa12 	bl	8000ec0 <HAL_GetTick>
 8002a9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a9e:	e009      	b.n	8002ab4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002aa0:	f7fe fa0e 	bl	8000ec0 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d902      	bls.n	8002ab4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ab2:	e005      	b.n	8002ac0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0ef      	beq.n	8002aa0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	4904      	ldr	r1, [pc, #16]	; (8002ae0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e095      	b.n	8002c22 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d108      	bne.n	8002b10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b06:	d009      	beq.n	8002b1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	61da      	str	r2, [r3, #28]
 8002b0e:	e005      	b.n	8002b1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d106      	bne.n	8002b3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7fe f818 	bl	8000b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b5c:	d902      	bls.n	8002b64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	e002      	b.n	8002b6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b72:	d007      	beq.n	8002b84 <HAL_SPI_Init+0xa0>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b7c:	d002      	beq.n	8002b84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b94:	431a      	orrs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc6:	ea42 0103 	orr.w	r1, r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	0c1b      	lsrs	r3, r3, #16
 8002be0:	f003 0204 	and.w	r2, r3, #4
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002c00:	ea42 0103 	orr.w	r1, r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b08a      	sub	sp, #40	; 0x28
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_SPI_TransmitReceive+0x26>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e1fb      	b.n	8003048 <HAL_SPI_TransmitReceive+0x41e>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c58:	f7fe f932 	bl	8000ec0 <HAL_GetTick>
 8002c5c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c64:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002c6c:	887b      	ldrh	r3, [r7, #2]
 8002c6e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002c70:	887b      	ldrh	r3, [r7, #2]
 8002c72:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c74:	7efb      	ldrb	r3, [r7, #27]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d00e      	beq.n	8002c98 <HAL_SPI_TransmitReceive+0x6e>
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c80:	d106      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x66>
 8002c8a:	7efb      	ldrb	r3, [r7, #27]
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d003      	beq.n	8002c98 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002c90:	2302      	movs	r3, #2
 8002c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002c96:	e1cd      	b.n	8003034 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <HAL_SPI_TransmitReceive+0x80>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_SPI_TransmitReceive+0x80>
 8002ca4:	887b      	ldrh	r3, [r7, #2]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d103      	bne.n	8002cb2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002cb0:	e1c0      	b.n	8003034 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d003      	beq.n	8002cc6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2205      	movs	r2, #5
 8002cc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	887a      	ldrh	r2, [r7, #2]
 8002cd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	887a      	ldrh	r2, [r7, #2]
 8002cde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	887a      	ldrh	r2, [r7, #2]
 8002cec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	887a      	ldrh	r2, [r7, #2]
 8002cf2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d08:	d802      	bhi.n	8002d10 <HAL_SPI_TransmitReceive+0xe6>
 8002d0a:	8a3b      	ldrh	r3, [r7, #16]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d908      	bls.n	8002d22 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	e007      	b.n	8002d32 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d30:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3c:	2b40      	cmp	r3, #64	; 0x40
 8002d3e:	d007      	beq.n	8002d50 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d58:	d97c      	bls.n	8002e54 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_SPI_TransmitReceive+0x13e>
 8002d62:	8a7b      	ldrh	r3, [r7, #18]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d169      	bne.n	8002e3c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6c:	881a      	ldrh	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d78:	1c9a      	adds	r2, r3, #2
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d8c:	e056      	b.n	8002e3c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d11b      	bne.n	8002dd4 <HAL_SPI_TransmitReceive+0x1aa>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d016      	beq.n	8002dd4 <HAL_SPI_TransmitReceive+0x1aa>
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d113      	bne.n	8002dd4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db0:	881a      	ldrh	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	1c9a      	adds	r2, r3, #2
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d11c      	bne.n	8002e1c <HAL_SPI_TransmitReceive+0x1f2>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d016      	beq.n	8002e1c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	b292      	uxth	r2, r2
 8002dfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	1c9a      	adds	r2, r3, #2
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e1c:	f7fe f850 	bl	8000ec0 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d807      	bhi.n	8002e3c <HAL_SPI_TransmitReceive+0x212>
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e32:	d003      	beq.n	8002e3c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002e3a:	e0fb      	b.n	8003034 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1a3      	bne.n	8002d8e <HAL_SPI_TransmitReceive+0x164>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d19d      	bne.n	8002d8e <HAL_SPI_TransmitReceive+0x164>
 8002e52:	e0df      	b.n	8003014 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_SPI_TransmitReceive+0x23a>
 8002e5c:	8a7b      	ldrh	r3, [r7, #18]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	f040 80cb 	bne.w	8002ffa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d912      	bls.n	8002e94 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e72:	881a      	ldrh	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7e:	1c9a      	adds	r2, r3, #2
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b02      	subs	r3, #2
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e92:	e0b2      	b.n	8002ffa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	7812      	ldrb	r2, [r2, #0]
 8002ea0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eba:	e09e      	b.n	8002ffa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d134      	bne.n	8002f34 <HAL_SPI_TransmitReceive+0x30a>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d02f      	beq.n	8002f34 <HAL_SPI_TransmitReceive+0x30a>
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d12c      	bne.n	8002f34 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d912      	bls.n	8002f0a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	881a      	ldrh	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	1c9a      	adds	r2, r3, #2
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3b02      	subs	r3, #2
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f08:	e012      	b.n	8002f30 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	330c      	adds	r3, #12
 8002f14:	7812      	ldrb	r2, [r2, #0]
 8002f16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d148      	bne.n	8002fd4 <HAL_SPI_TransmitReceive+0x3aa>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d042      	beq.n	8002fd4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d923      	bls.n	8002fa2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	b292      	uxth	r2, r2
 8002f66:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	1c9a      	adds	r2, r3, #2
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b02      	subs	r3, #2
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d81f      	bhi.n	8002fd0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	e016      	b.n	8002fd0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f103 020c 	add.w	r2, r3, #12
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	7812      	ldrb	r2, [r2, #0]
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002fd4:	f7fd ff74 	bl	8000ec0 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d803      	bhi.n	8002fec <HAL_SPI_TransmitReceive+0x3c2>
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fea:	d102      	bne.n	8002ff2 <HAL_SPI_TransmitReceive+0x3c8>
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d103      	bne.n	8002ffa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002ff8:	e01c      	b.n	8003034 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	f47f af5b 	bne.w	8002ebc <HAL_SPI_TransmitReceive+0x292>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	f47f af54 	bne.w	8002ebc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f937 	bl	800328c <SPI_EndRxTxTransaction>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d006      	beq.n	8003032 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2220      	movs	r2, #32
 800302e:	661a      	str	r2, [r3, #96]	; 0x60
 8003030:	e000      	b.n	8003034 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003032:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003044:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003048:	4618      	mov	r0, r3
 800304a:	3728      	adds	r7, #40	; 0x28
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	4613      	mov	r3, r2
 800305e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003060:	f7fd ff2e 	bl	8000ec0 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	4413      	add	r3, r2
 800306e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003070:	f7fd ff26 	bl	8000ec0 <HAL_GetTick>
 8003074:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003076:	4b39      	ldr	r3, [pc, #228]	; (800315c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	015b      	lsls	r3, r3, #5
 800307c:	0d1b      	lsrs	r3, r3, #20
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	fb02 f303 	mul.w	r3, r2, r3
 8003084:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003086:	e054      	b.n	8003132 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308e:	d050      	beq.n	8003132 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003090:	f7fd ff16 	bl	8000ec0 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	429a      	cmp	r2, r3
 800309e:	d902      	bls.n	80030a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d13d      	bne.n	8003122 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030be:	d111      	bne.n	80030e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c8:	d004      	beq.n	80030d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d2:	d107      	bne.n	80030e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ec:	d10f      	bne.n	800310e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800310c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e017      	b.n	8003152 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	3b01      	subs	r3, #1
 8003130:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4013      	ands	r3, r2
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	429a      	cmp	r2, r3
 8003140:	bf0c      	ite	eq
 8003142:	2301      	moveq	r3, #1
 8003144:	2300      	movne	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	429a      	cmp	r2, r3
 800314e:	d19b      	bne.n	8003088 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3720      	adds	r7, #32
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000000 	.word	0x20000000

08003160 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	; 0x28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003172:	f7fd fea5 	bl	8000ec0 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	4413      	add	r3, r2
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003182:	f7fd fe9d 	bl	8000ec0 <HAL_GetTick>
 8003186:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	330c      	adds	r3, #12
 800318e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003190:	4b3d      	ldr	r3, [pc, #244]	; (8003288 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	00da      	lsls	r2, r3, #3
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	0d1b      	lsrs	r3, r3, #20
 80031a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80031a8:	e060      	b.n	800326c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80031b0:	d107      	bne.n	80031c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d104      	bne.n	80031c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c8:	d050      	beq.n	800326c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031ca:	f7fd fe79 	bl	8000ec0 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d902      	bls.n	80031e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d13d      	bne.n	800325c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031f8:	d111      	bne.n	800321e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003202:	d004      	beq.n	800320e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320c:	d107      	bne.n	800321e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800321c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003226:	d10f      	bne.n	8003248 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003246:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e010      	b.n	800327e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	3b01      	subs	r3, #1
 800326a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	4013      	ands	r3, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	429a      	cmp	r2, r3
 800327a:	d196      	bne.n	80031aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3728      	adds	r7, #40	; 0x28
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000000 	.word	0x20000000

0800328c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af02      	add	r7, sp, #8
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2200      	movs	r2, #0
 80032a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f7ff ff5b 	bl	8003160 <SPI_WaitFifoStateUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e027      	b.n	8003310 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2200      	movs	r2, #0
 80032c8:	2180      	movs	r1, #128	; 0x80
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f7ff fec0 	bl	8003050 <SPI_WaitFlagStateUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e014      	b.n	8003310 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f7ff ff34 	bl	8003160 <SPI_WaitFifoStateUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003302:	f043 0220 	orr.w	r2, r3, #32
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e000      	b.n	8003310 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e040      	b.n	80033ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7fd fc58 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2224      	movs	r2, #36	; 0x24
 8003344:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0201 	bic.w	r2, r2, #1
 8003354:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f8c0 	bl	80034dc <UART_SetConfig>
 800335c:	4603      	mov	r3, r0
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e022      	b.n	80033ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fb6c 	bl	8003a4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003382:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003392:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 fbf3 	bl	8003b90 <UART_CheckIdleState>
 80033aa:	4603      	mov	r3, r0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08a      	sub	sp, #40	; 0x28
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	4613      	mov	r3, r2
 80033c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	f040 8082 	bne.w	80034d2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <HAL_UART_Transmit+0x26>
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e07a      	b.n	80034d4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_UART_Transmit+0x38>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e073      	b.n	80034d4 <HAL_UART_Transmit+0x120>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2221      	movs	r2, #33	; 0x21
 8003400:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003402:	f7fd fd5d 	bl	8000ec0 <HAL_GetTick>
 8003406:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	88fa      	ldrh	r2, [r7, #6]
 800340c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	88fa      	ldrh	r2, [r7, #6]
 8003414:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003420:	d108      	bne.n	8003434 <HAL_UART_Transmit+0x80>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d104      	bne.n	8003434 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	e003      	b.n	800343c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003438:	2300      	movs	r3, #0
 800343a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003444:	e02d      	b.n	80034a2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2200      	movs	r2, #0
 800344e:	2180      	movs	r1, #128	; 0x80
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 fbe6 	bl	8003c22 <UART_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e039      	b.n	80034d4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	881a      	ldrh	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003472:	b292      	uxth	r2, r2
 8003474:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	3302      	adds	r3, #2
 800347a:	61bb      	str	r3, [r7, #24]
 800347c:	e008      	b.n	8003490 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	781a      	ldrb	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	b292      	uxth	r2, r2
 8003488:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3301      	adds	r3, #1
 800348e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1cb      	bne.n	8003446 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2200      	movs	r2, #0
 80034b6:	2140      	movs	r1, #64	; 0x40
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 fbb2 	bl	8003c22 <UART_WaitOnFlagUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e005      	b.n	80034d4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	e000      	b.n	80034d4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80034d2:	2302      	movs	r3, #2
  }
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3720      	adds	r7, #32
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e0:	b08a      	sub	sp, #40	; 0x28
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	431a      	orrs	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	4313      	orrs	r3, r2
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	4ba4      	ldr	r3, [pc, #656]	; (800379c <UART_SetConfig+0x2c0>)
 800350c:	4013      	ands	r3, r2
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	6812      	ldr	r2, [r2, #0]
 8003512:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003514:	430b      	orrs	r3, r1
 8003516:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a99      	ldr	r2, [pc, #612]	; (80037a0 <UART_SetConfig+0x2c4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d004      	beq.n	8003548 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003544:	4313      	orrs	r3, r2
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003558:	430a      	orrs	r2, r1
 800355a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a90      	ldr	r2, [pc, #576]	; (80037a4 <UART_SetConfig+0x2c8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d126      	bne.n	80035b4 <UART_SetConfig+0xd8>
 8003566:	4b90      	ldr	r3, [pc, #576]	; (80037a8 <UART_SetConfig+0x2cc>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	2b03      	cmp	r3, #3
 8003572:	d81b      	bhi.n	80035ac <UART_SetConfig+0xd0>
 8003574:	a201      	add	r2, pc, #4	; (adr r2, 800357c <UART_SetConfig+0xa0>)
 8003576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357a:	bf00      	nop
 800357c:	0800358d 	.word	0x0800358d
 8003580:	0800359d 	.word	0x0800359d
 8003584:	08003595 	.word	0x08003595
 8003588:	080035a5 	.word	0x080035a5
 800358c:	2301      	movs	r3, #1
 800358e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003592:	e116      	b.n	80037c2 <UART_SetConfig+0x2e6>
 8003594:	2302      	movs	r3, #2
 8003596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800359a:	e112      	b.n	80037c2 <UART_SetConfig+0x2e6>
 800359c:	2304      	movs	r3, #4
 800359e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035a2:	e10e      	b.n	80037c2 <UART_SetConfig+0x2e6>
 80035a4:	2308      	movs	r3, #8
 80035a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035aa:	e10a      	b.n	80037c2 <UART_SetConfig+0x2e6>
 80035ac:	2310      	movs	r3, #16
 80035ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035b2:	e106      	b.n	80037c2 <UART_SetConfig+0x2e6>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a7c      	ldr	r2, [pc, #496]	; (80037ac <UART_SetConfig+0x2d0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d138      	bne.n	8003630 <UART_SetConfig+0x154>
 80035be:	4b7a      	ldr	r3, [pc, #488]	; (80037a8 <UART_SetConfig+0x2cc>)
 80035c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c4:	f003 030c 	and.w	r3, r3, #12
 80035c8:	2b0c      	cmp	r3, #12
 80035ca:	d82d      	bhi.n	8003628 <UART_SetConfig+0x14c>
 80035cc:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <UART_SetConfig+0xf8>)
 80035ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d2:	bf00      	nop
 80035d4:	08003609 	.word	0x08003609
 80035d8:	08003629 	.word	0x08003629
 80035dc:	08003629 	.word	0x08003629
 80035e0:	08003629 	.word	0x08003629
 80035e4:	08003619 	.word	0x08003619
 80035e8:	08003629 	.word	0x08003629
 80035ec:	08003629 	.word	0x08003629
 80035f0:	08003629 	.word	0x08003629
 80035f4:	08003611 	.word	0x08003611
 80035f8:	08003629 	.word	0x08003629
 80035fc:	08003629 	.word	0x08003629
 8003600:	08003629 	.word	0x08003629
 8003604:	08003621 	.word	0x08003621
 8003608:	2300      	movs	r3, #0
 800360a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360e:	e0d8      	b.n	80037c2 <UART_SetConfig+0x2e6>
 8003610:	2302      	movs	r3, #2
 8003612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003616:	e0d4      	b.n	80037c2 <UART_SetConfig+0x2e6>
 8003618:	2304      	movs	r3, #4
 800361a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361e:	e0d0      	b.n	80037c2 <UART_SetConfig+0x2e6>
 8003620:	2308      	movs	r3, #8
 8003622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003626:	e0cc      	b.n	80037c2 <UART_SetConfig+0x2e6>
 8003628:	2310      	movs	r3, #16
 800362a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362e:	e0c8      	b.n	80037c2 <UART_SetConfig+0x2e6>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a5e      	ldr	r2, [pc, #376]	; (80037b0 <UART_SetConfig+0x2d4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d125      	bne.n	8003686 <UART_SetConfig+0x1aa>
 800363a:	4b5b      	ldr	r3, [pc, #364]	; (80037a8 <UART_SetConfig+0x2cc>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003640:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003644:	2b30      	cmp	r3, #48	; 0x30
 8003646:	d016      	beq.n	8003676 <UART_SetConfig+0x19a>
 8003648:	2b30      	cmp	r3, #48	; 0x30
 800364a:	d818      	bhi.n	800367e <UART_SetConfig+0x1a2>
 800364c:	2b20      	cmp	r3, #32
 800364e:	d00a      	beq.n	8003666 <UART_SetConfig+0x18a>
 8003650:	2b20      	cmp	r3, #32
 8003652:	d814      	bhi.n	800367e <UART_SetConfig+0x1a2>
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <UART_SetConfig+0x182>
 8003658:	2b10      	cmp	r3, #16
 800365a:	d008      	beq.n	800366e <UART_SetConfig+0x192>
 800365c:	e00f      	b.n	800367e <UART_SetConfig+0x1a2>
 800365e:	2300      	movs	r3, #0
 8003660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003664:	e0ad      	b.n	80037c2 <UART_SetConfig+0x2e6>
 8003666:	2302      	movs	r3, #2
 8003668:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800366c:	e0a9      	b.n	80037c2 <UART_SetConfig+0x2e6>
 800366e:	2304      	movs	r3, #4
 8003670:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003674:	e0a5      	b.n	80037c2 <UART_SetConfig+0x2e6>
 8003676:	2308      	movs	r3, #8
 8003678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367c:	e0a1      	b.n	80037c2 <UART_SetConfig+0x2e6>
 800367e:	2310      	movs	r3, #16
 8003680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003684:	e09d      	b.n	80037c2 <UART_SetConfig+0x2e6>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a4a      	ldr	r2, [pc, #296]	; (80037b4 <UART_SetConfig+0x2d8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d125      	bne.n	80036dc <UART_SetConfig+0x200>
 8003690:	4b45      	ldr	r3, [pc, #276]	; (80037a8 <UART_SetConfig+0x2cc>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003696:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800369a:	2bc0      	cmp	r3, #192	; 0xc0
 800369c:	d016      	beq.n	80036cc <UART_SetConfig+0x1f0>
 800369e:	2bc0      	cmp	r3, #192	; 0xc0
 80036a0:	d818      	bhi.n	80036d4 <UART_SetConfig+0x1f8>
 80036a2:	2b80      	cmp	r3, #128	; 0x80
 80036a4:	d00a      	beq.n	80036bc <UART_SetConfig+0x1e0>
 80036a6:	2b80      	cmp	r3, #128	; 0x80
 80036a8:	d814      	bhi.n	80036d4 <UART_SetConfig+0x1f8>
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <UART_SetConfig+0x1d8>
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	d008      	beq.n	80036c4 <UART_SetConfig+0x1e8>
 80036b2:	e00f      	b.n	80036d4 <UART_SetConfig+0x1f8>
 80036b4:	2300      	movs	r3, #0
 80036b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ba:	e082      	b.n	80037c2 <UART_SetConfig+0x2e6>
 80036bc:	2302      	movs	r3, #2
 80036be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036c2:	e07e      	b.n	80037c2 <UART_SetConfig+0x2e6>
 80036c4:	2304      	movs	r3, #4
 80036c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ca:	e07a      	b.n	80037c2 <UART_SetConfig+0x2e6>
 80036cc:	2308      	movs	r3, #8
 80036ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d2:	e076      	b.n	80037c2 <UART_SetConfig+0x2e6>
 80036d4:	2310      	movs	r3, #16
 80036d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036da:	e072      	b.n	80037c2 <UART_SetConfig+0x2e6>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a35      	ldr	r2, [pc, #212]	; (80037b8 <UART_SetConfig+0x2dc>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d12a      	bne.n	800373c <UART_SetConfig+0x260>
 80036e6:	4b30      	ldr	r3, [pc, #192]	; (80037a8 <UART_SetConfig+0x2cc>)
 80036e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036f4:	d01a      	beq.n	800372c <UART_SetConfig+0x250>
 80036f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036fa:	d81b      	bhi.n	8003734 <UART_SetConfig+0x258>
 80036fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003700:	d00c      	beq.n	800371c <UART_SetConfig+0x240>
 8003702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003706:	d815      	bhi.n	8003734 <UART_SetConfig+0x258>
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <UART_SetConfig+0x238>
 800370c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003710:	d008      	beq.n	8003724 <UART_SetConfig+0x248>
 8003712:	e00f      	b.n	8003734 <UART_SetConfig+0x258>
 8003714:	2300      	movs	r3, #0
 8003716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371a:	e052      	b.n	80037c2 <UART_SetConfig+0x2e6>
 800371c:	2302      	movs	r3, #2
 800371e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003722:	e04e      	b.n	80037c2 <UART_SetConfig+0x2e6>
 8003724:	2304      	movs	r3, #4
 8003726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800372a:	e04a      	b.n	80037c2 <UART_SetConfig+0x2e6>
 800372c:	2308      	movs	r3, #8
 800372e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003732:	e046      	b.n	80037c2 <UART_SetConfig+0x2e6>
 8003734:	2310      	movs	r3, #16
 8003736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800373a:	e042      	b.n	80037c2 <UART_SetConfig+0x2e6>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a17      	ldr	r2, [pc, #92]	; (80037a0 <UART_SetConfig+0x2c4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d13a      	bne.n	80037bc <UART_SetConfig+0x2e0>
 8003746:	4b18      	ldr	r3, [pc, #96]	; (80037a8 <UART_SetConfig+0x2cc>)
 8003748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003750:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003754:	d01a      	beq.n	800378c <UART_SetConfig+0x2b0>
 8003756:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800375a:	d81b      	bhi.n	8003794 <UART_SetConfig+0x2b8>
 800375c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003760:	d00c      	beq.n	800377c <UART_SetConfig+0x2a0>
 8003762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003766:	d815      	bhi.n	8003794 <UART_SetConfig+0x2b8>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <UART_SetConfig+0x298>
 800376c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003770:	d008      	beq.n	8003784 <UART_SetConfig+0x2a8>
 8003772:	e00f      	b.n	8003794 <UART_SetConfig+0x2b8>
 8003774:	2300      	movs	r3, #0
 8003776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800377a:	e022      	b.n	80037c2 <UART_SetConfig+0x2e6>
 800377c:	2302      	movs	r3, #2
 800377e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003782:	e01e      	b.n	80037c2 <UART_SetConfig+0x2e6>
 8003784:	2304      	movs	r3, #4
 8003786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378a:	e01a      	b.n	80037c2 <UART_SetConfig+0x2e6>
 800378c:	2308      	movs	r3, #8
 800378e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003792:	e016      	b.n	80037c2 <UART_SetConfig+0x2e6>
 8003794:	2310      	movs	r3, #16
 8003796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800379a:	e012      	b.n	80037c2 <UART_SetConfig+0x2e6>
 800379c:	efff69f3 	.word	0xefff69f3
 80037a0:	40008000 	.word	0x40008000
 80037a4:	40013800 	.word	0x40013800
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40004400 	.word	0x40004400
 80037b0:	40004800 	.word	0x40004800
 80037b4:	40004c00 	.word	0x40004c00
 80037b8:	40005000 	.word	0x40005000
 80037bc:	2310      	movs	r3, #16
 80037be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a9f      	ldr	r2, [pc, #636]	; (8003a44 <UART_SetConfig+0x568>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d17a      	bne.n	80038c2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d824      	bhi.n	800381e <UART_SetConfig+0x342>
 80037d4:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <UART_SetConfig+0x300>)
 80037d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037da:	bf00      	nop
 80037dc:	08003801 	.word	0x08003801
 80037e0:	0800381f 	.word	0x0800381f
 80037e4:	08003809 	.word	0x08003809
 80037e8:	0800381f 	.word	0x0800381f
 80037ec:	0800380f 	.word	0x0800380f
 80037f0:	0800381f 	.word	0x0800381f
 80037f4:	0800381f 	.word	0x0800381f
 80037f8:	0800381f 	.word	0x0800381f
 80037fc:	08003817 	.word	0x08003817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003800:	f7fe fc28 	bl	8002054 <HAL_RCC_GetPCLK1Freq>
 8003804:	61f8      	str	r0, [r7, #28]
        break;
 8003806:	e010      	b.n	800382a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003808:	4b8f      	ldr	r3, [pc, #572]	; (8003a48 <UART_SetConfig+0x56c>)
 800380a:	61fb      	str	r3, [r7, #28]
        break;
 800380c:	e00d      	b.n	800382a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800380e:	f7fe fb89 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8003812:	61f8      	str	r0, [r7, #28]
        break;
 8003814:	e009      	b.n	800382a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800381a:	61fb      	str	r3, [r7, #28]
        break;
 800381c:	e005      	b.n	800382a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003828:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 80fb 	beq.w	8003a28 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	4413      	add	r3, r2
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	429a      	cmp	r2, r3
 8003840:	d305      	bcc.n	800384e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	429a      	cmp	r2, r3
 800384c:	d903      	bls.n	8003856 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003854:	e0e8      	b.n	8003a28 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	2200      	movs	r2, #0
 800385a:	461c      	mov	r4, r3
 800385c:	4615      	mov	r5, r2
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	022b      	lsls	r3, r5, #8
 8003868:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800386c:	0222      	lsls	r2, r4, #8
 800386e:	68f9      	ldr	r1, [r7, #12]
 8003870:	6849      	ldr	r1, [r1, #4]
 8003872:	0849      	lsrs	r1, r1, #1
 8003874:	2000      	movs	r0, #0
 8003876:	4688      	mov	r8, r1
 8003878:	4681      	mov	r9, r0
 800387a:	eb12 0a08 	adds.w	sl, r2, r8
 800387e:	eb43 0b09 	adc.w	fp, r3, r9
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	603b      	str	r3, [r7, #0]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003890:	4650      	mov	r0, sl
 8003892:	4659      	mov	r1, fp
 8003894:	f7fc fcf4 	bl	8000280 <__aeabi_uldivmod>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4613      	mov	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038a6:	d308      	bcc.n	80038ba <UART_SetConfig+0x3de>
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ae:	d204      	bcs.n	80038ba <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	60da      	str	r2, [r3, #12]
 80038b8:	e0b6      	b.n	8003a28 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038c0:	e0b2      	b.n	8003a28 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ca:	d15e      	bne.n	800398a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80038cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d828      	bhi.n	8003926 <UART_SetConfig+0x44a>
 80038d4:	a201      	add	r2, pc, #4	; (adr r2, 80038dc <UART_SetConfig+0x400>)
 80038d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038da:	bf00      	nop
 80038dc:	08003901 	.word	0x08003901
 80038e0:	08003909 	.word	0x08003909
 80038e4:	08003911 	.word	0x08003911
 80038e8:	08003927 	.word	0x08003927
 80038ec:	08003917 	.word	0x08003917
 80038f0:	08003927 	.word	0x08003927
 80038f4:	08003927 	.word	0x08003927
 80038f8:	08003927 	.word	0x08003927
 80038fc:	0800391f 	.word	0x0800391f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003900:	f7fe fba8 	bl	8002054 <HAL_RCC_GetPCLK1Freq>
 8003904:	61f8      	str	r0, [r7, #28]
        break;
 8003906:	e014      	b.n	8003932 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003908:	f7fe fbba 	bl	8002080 <HAL_RCC_GetPCLK2Freq>
 800390c:	61f8      	str	r0, [r7, #28]
        break;
 800390e:	e010      	b.n	8003932 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003910:	4b4d      	ldr	r3, [pc, #308]	; (8003a48 <UART_SetConfig+0x56c>)
 8003912:	61fb      	str	r3, [r7, #28]
        break;
 8003914:	e00d      	b.n	8003932 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003916:	f7fe fb05 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 800391a:	61f8      	str	r0, [r7, #28]
        break;
 800391c:	e009      	b.n	8003932 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800391e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003922:	61fb      	str	r3, [r7, #28]
        break;
 8003924:	e005      	b.n	8003932 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003930:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d077      	beq.n	8003a28 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	005a      	lsls	r2, r3, #1
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	085b      	lsrs	r3, r3, #1
 8003942:	441a      	add	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	fbb2 f3f3 	udiv	r3, r2, r3
 800394c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	2b0f      	cmp	r3, #15
 8003952:	d916      	bls.n	8003982 <UART_SetConfig+0x4a6>
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395a:	d212      	bcs.n	8003982 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	b29b      	uxth	r3, r3
 8003960:	f023 030f 	bic.w	r3, r3, #15
 8003964:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	085b      	lsrs	r3, r3, #1
 800396a:	b29b      	uxth	r3, r3
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	b29a      	uxth	r2, r3
 8003972:	8afb      	ldrh	r3, [r7, #22]
 8003974:	4313      	orrs	r3, r2
 8003976:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	8afa      	ldrh	r2, [r7, #22]
 800397e:	60da      	str	r2, [r3, #12]
 8003980:	e052      	b.n	8003a28 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003988:	e04e      	b.n	8003a28 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800398a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800398e:	2b08      	cmp	r3, #8
 8003990:	d827      	bhi.n	80039e2 <UART_SetConfig+0x506>
 8003992:	a201      	add	r2, pc, #4	; (adr r2, 8003998 <UART_SetConfig+0x4bc>)
 8003994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003998:	080039bd 	.word	0x080039bd
 800399c:	080039c5 	.word	0x080039c5
 80039a0:	080039cd 	.word	0x080039cd
 80039a4:	080039e3 	.word	0x080039e3
 80039a8:	080039d3 	.word	0x080039d3
 80039ac:	080039e3 	.word	0x080039e3
 80039b0:	080039e3 	.word	0x080039e3
 80039b4:	080039e3 	.word	0x080039e3
 80039b8:	080039db 	.word	0x080039db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039bc:	f7fe fb4a 	bl	8002054 <HAL_RCC_GetPCLK1Freq>
 80039c0:	61f8      	str	r0, [r7, #28]
        break;
 80039c2:	e014      	b.n	80039ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039c4:	f7fe fb5c 	bl	8002080 <HAL_RCC_GetPCLK2Freq>
 80039c8:	61f8      	str	r0, [r7, #28]
        break;
 80039ca:	e010      	b.n	80039ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039cc:	4b1e      	ldr	r3, [pc, #120]	; (8003a48 <UART_SetConfig+0x56c>)
 80039ce:	61fb      	str	r3, [r7, #28]
        break;
 80039d0:	e00d      	b.n	80039ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039d2:	f7fe faa7 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 80039d6:	61f8      	str	r0, [r7, #28]
        break;
 80039d8:	e009      	b.n	80039ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039de:	61fb      	str	r3, [r7, #28]
        break;
 80039e0:	e005      	b.n	80039ee <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039ec:	bf00      	nop
    }

    if (pclk != 0U)
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d019      	beq.n	8003a28 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	085a      	lsrs	r2, r3, #1
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	441a      	add	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a06:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	2b0f      	cmp	r3, #15
 8003a0c:	d909      	bls.n	8003a22 <UART_SetConfig+0x546>
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a14:	d205      	bcs.n	8003a22 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60da      	str	r2, [r3, #12]
 8003a20:	e002      	b.n	8003a28 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3728      	adds	r7, #40	; 0x28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a42:	bf00      	nop
 8003a44:	40008000 	.word	0x40008000
 8003a48:	00f42400 	.word	0x00f42400

08003a4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	f003 0320 	and.w	r3, r3, #32
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01a      	beq.n	8003b62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b4a:	d10a      	bne.n	8003b62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	605a      	str	r2, [r3, #4]
  }
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ba0:	f7fd f98e 	bl	8000ec0 <HAL_GetTick>
 8003ba4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d10e      	bne.n	8003bd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f82d 	bl	8003c22 <UART_WaitOnFlagUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e023      	b.n	8003c1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d10e      	bne.n	8003bfe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003be0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f817 	bl	8003c22 <UART_WaitOnFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e00d      	b.n	8003c1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b09c      	sub	sp, #112	; 0x70
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	603b      	str	r3, [r7, #0]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c32:	e0a5      	b.n	8003d80 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3a:	f000 80a1 	beq.w	8003d80 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3e:	f7fd f93f 	bl	8000ec0 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d302      	bcc.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d13e      	bne.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c68:	667b      	str	r3, [r7, #100]	; 0x64
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e6      	bne.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3308      	adds	r3, #8
 8003c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c90:	e853 3f00 	ldrex	r3, [r3]
 8003c94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	f023 0301 	bic.w	r3, r3, #1
 8003c9c:	663b      	str	r3, [r7, #96]	; 0x60
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ca6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ca8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cae:	e841 2300 	strex	r3, r2, [r1]
 8003cb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1e5      	bne.n	8003c86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e067      	b.n	8003da2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d04f      	beq.n	8003d80 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cee:	d147      	bne.n	8003d80 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cf8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d18:	637b      	str	r3, [r7, #52]	; 0x34
 8003d1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e6      	bne.n	8003cfa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3308      	adds	r3, #8
 8003d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3308      	adds	r3, #8
 8003d4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d4c:	623a      	str	r2, [r7, #32]
 8003d4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	69f9      	ldr	r1, [r7, #28]
 8003d52:	6a3a      	ldr	r2, [r7, #32]
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e5      	bne.n	8003d2c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e010      	b.n	8003da2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	69da      	ldr	r2, [r3, #28]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	461a      	mov	r2, r3
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	f43f af4a 	beq.w	8003c34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3770      	adds	r7, #112	; 0x70
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003db0:	4904      	ldr	r1, [pc, #16]	; (8003dc4 <MX_FATFS_Init+0x18>)
 8003db2:	4805      	ldr	r0, [pc, #20]	; (8003dc8 <MX_FATFS_Init+0x1c>)
 8003db4:	f003 f926 	bl	8007004 <FATFS_LinkDriver>
 8003db8:	4603      	mov	r3, r0
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4b03      	ldr	r3, [pc, #12]	; (8003dcc <MX_FATFS_Init+0x20>)
 8003dbe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003dc0:	bf00      	nop
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	20000298 	.word	0x20000298
 8003dc8:	2000000c 	.word	0x2000000c
 8003dcc:	20000294 	.word	0x20000294

08003dd0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003dd4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADDED THIS LINE
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 f9d9 	bl	80041a4 <USER_SPI_initialize>
 8003df2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADDED THIS LINE
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 fab7 	bl	800437c <USER_SPI_status>
 8003e0e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	4603      	mov	r3, r0
 8003e26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADDED THIS LINE
 8003e28:	7bf8      	ldrb	r0, [r7, #15]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	f000 faba 	bl	80043a8 <USER_SPI_read>
 8003e34:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADDED THIS LINE
 8003e4e:	7bf8      	ldrb	r0, [r7, #15]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	f000 fb0d 	bl	8004474 <USER_SPI_write>
 8003e5a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	603a      	str	r2, [r7, #0]
 8003e6e:	71fb      	strb	r3, [r7, #7]
 8003e70:	460b      	mov	r3, r1
 8003e72:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff); //ADDED THIS LINE
 8003e74:	79b9      	ldrb	r1, [r7, #6]
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fb76 	bl	800456c <USER_SPI_ioctl>
 8003e80:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8003e94:	f7fd f814 	bl	8000ec0 <HAL_GetTick>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	4a04      	ldr	r2, [pc, #16]	; (8003eac <SPI_Timer_On+0x20>)
 8003e9c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8003e9e:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <SPI_Timer_On+0x24>)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6013      	str	r3, [r2, #0]
}
 8003ea4:	bf00      	nop
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	200002a0 	.word	0x200002a0
 8003eb0:	200002a4 	.word	0x200002a4

08003eb4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003eb8:	f7fd f802 	bl	8000ec0 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <SPI_Timer_Status+0x24>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	1ad2      	subs	r2, r2, r3
 8003ec4:	4b05      	ldr	r3, [pc, #20]	; (8003edc <SPI_Timer_Status+0x28>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	bf34      	ite	cc
 8003ecc:	2301      	movcc	r3, #1
 8003ece:	2300      	movcs	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	200002a0 	.word	0x200002a0
 8003edc:	200002a4 	.word	0x200002a4

08003ee0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8003eea:	f107 020f 	add.w	r2, r7, #15
 8003eee:	1df9      	adds	r1, r7, #7
 8003ef0:	2332      	movs	r3, #50	; 0x32
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	4804      	ldr	r0, [pc, #16]	; (8003f08 <xchg_spi+0x28>)
 8003ef8:	f7fe fe97 	bl	8002c2a <HAL_SPI_TransmitReceive>
    return rxDat;
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	200001a4 	.word	0x200001a4

08003f0c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8003f0c:	b590      	push	{r4, r7, lr}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	e00a      	b.n	8003f32 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	18d4      	adds	r4, r2, r3
 8003f22:	20ff      	movs	r0, #255	; 0xff
 8003f24:	f7ff ffdc 	bl	8003ee0 <xchg_spi>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d3f0      	bcc.n	8003f1c <rcvr_spi_multi+0x10>
	}
}
 8003f3a:	bf00      	nop
 8003f3c:	bf00      	nop
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd90      	pop	{r4, r7, pc}

08003f44 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	e009      	b.n	8003f68 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4413      	add	r3, r2
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ffbf 	bl	8003ee0 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	3301      	adds	r3, #1
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d3f1      	bcc.n	8003f54 <xmit_spi_multi+0x10>
	}
}
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b086      	sub	sp, #24
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003f82:	f7fc ff9d 	bl	8000ec0 <HAL_GetTick>
 8003f86:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003f8c:	20ff      	movs	r0, #255	; 0xff
 8003f8e:	f7ff ffa7 	bl	8003ee0 <xchg_spi>
 8003f92:	4603      	mov	r3, r0
 8003f94:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	2bff      	cmp	r3, #255	; 0xff
 8003f9a:	d007      	beq.n	8003fac <wait_ready+0x32>
 8003f9c:	f7fc ff90 	bl	8000ec0 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d8ef      	bhi.n	8003f8c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	2bff      	cmp	r3, #255	; 0xff
 8003fb0:	bf0c      	ite	eq
 8003fb2:	2301      	moveq	r3, #1
 8003fb4:	2300      	movne	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	2140      	movs	r1, #64	; 0x40
 8003fc8:	4803      	ldr	r0, [pc, #12]	; (8003fd8 <despiselect+0x18>)
 8003fca:	f7fd fa39 	bl	8001440 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003fce:	20ff      	movs	r0, #255	; 0xff
 8003fd0:	f7ff ff86 	bl	8003ee0 <xchg_spi>

}
 8003fd4:	bf00      	nop
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	48000400 	.word	0x48000400

08003fdc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2140      	movs	r1, #64	; 0x40
 8003fe4:	4809      	ldr	r0, [pc, #36]	; (800400c <spiselect+0x30>)
 8003fe6:	f7fd fa2b 	bl	8001440 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8003fea:	20ff      	movs	r0, #255	; 0xff
 8003fec:	f7ff ff78 	bl	8003ee0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003ff0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ff4:	f7ff ffc1 	bl	8003f7a <wait_ready>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <spiselect+0x26>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e002      	b.n	8004008 <spiselect+0x2c>

	despiselect();
 8004002:	f7ff ffdd 	bl	8003fc0 <despiselect>
	return 0;	/* Timeout */
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	bd80      	pop	{r7, pc}
 800400c:	48000400 	.word	0x48000400

08004010 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800401a:	20c8      	movs	r0, #200	; 0xc8
 800401c:	f7ff ff36 	bl	8003e8c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004020:	20ff      	movs	r0, #255	; 0xff
 8004022:	f7ff ff5d 	bl	8003ee0 <xchg_spi>
 8004026:	4603      	mov	r3, r0
 8004028:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	2bff      	cmp	r3, #255	; 0xff
 800402e:	d104      	bne.n	800403a <rcvr_datablock+0x2a>
 8004030:	f7ff ff40 	bl	8003eb4 <SPI_Timer_Status>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f2      	bne.n	8004020 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	2bfe      	cmp	r3, #254	; 0xfe
 800403e:	d001      	beq.n	8004044 <rcvr_datablock+0x34>
 8004040:	2300      	movs	r3, #0
 8004042:	e00a      	b.n	800405a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004044:	6839      	ldr	r1, [r7, #0]
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff ff60 	bl	8003f0c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800404c:	20ff      	movs	r0, #255	; 0xff
 800404e:	f7ff ff47 	bl	8003ee0 <xchg_spi>
 8004052:	20ff      	movs	r0, #255	; 0xff
 8004054:	f7ff ff44 	bl	8003ee0 <xchg_spi>

	return 1;						/* Function succeeded */
 8004058:	2301      	movs	r3, #1
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	460b      	mov	r3, r1
 800406c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800406e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004072:	f7ff ff82 	bl	8003f7a <wait_ready>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <xmit_datablock+0x1e>
 800407c:	2300      	movs	r3, #0
 800407e:	e01e      	b.n	80040be <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff ff2c 	bl	8003ee0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004088:	78fb      	ldrb	r3, [r7, #3]
 800408a:	2bfd      	cmp	r3, #253	; 0xfd
 800408c:	d016      	beq.n	80040bc <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800408e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff ff56 	bl	8003f44 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004098:	20ff      	movs	r0, #255	; 0xff
 800409a:	f7ff ff21 	bl	8003ee0 <xchg_spi>
 800409e:	20ff      	movs	r0, #255	; 0xff
 80040a0:	f7ff ff1e 	bl	8003ee0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80040a4:	20ff      	movs	r0, #255	; 0xff
 80040a6:	f7ff ff1b 	bl	8003ee0 <xchg_spi>
 80040aa:	4603      	mov	r3, r0
 80040ac:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	f003 031f 	and.w	r3, r3, #31
 80040b4:	2b05      	cmp	r3, #5
 80040b6:	d001      	beq.n	80040bc <xmit_datablock+0x5a>
 80040b8:	2300      	movs	r3, #0
 80040ba:	e000      	b.n	80040be <xmit_datablock+0x5c>
	}
	return 1;
 80040bc:	2301      	movs	r3, #1
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	4603      	mov	r3, r0
 80040ce:	6039      	str	r1, [r7, #0]
 80040d0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80040d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	da0e      	bge.n	80040f8 <send_cmd+0x32>
		cmd &= 0x7F;
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040e0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80040e2:	2100      	movs	r1, #0
 80040e4:	2037      	movs	r0, #55	; 0x37
 80040e6:	f7ff ffee 	bl	80040c6 <send_cmd>
 80040ea:	4603      	mov	r3, r0
 80040ec:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80040ee:	7bbb      	ldrb	r3, [r7, #14]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d901      	bls.n	80040f8 <send_cmd+0x32>
 80040f4:	7bbb      	ldrb	r3, [r7, #14]
 80040f6:	e051      	b.n	800419c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	2b0c      	cmp	r3, #12
 80040fc:	d008      	beq.n	8004110 <send_cmd+0x4a>
		despiselect();
 80040fe:	f7ff ff5f 	bl	8003fc0 <despiselect>
		if (!spiselect()) return 0xFF;
 8004102:	f7ff ff6b 	bl	8003fdc <spiselect>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <send_cmd+0x4a>
 800410c:	23ff      	movs	r3, #255	; 0xff
 800410e:	e045      	b.n	800419c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004110:	79fb      	ldrb	r3, [r7, #7]
 8004112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004116:	b2db      	uxtb	r3, r3
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff fee1 	bl	8003ee0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	0e1b      	lsrs	r3, r3, #24
 8004122:	b2db      	uxtb	r3, r3
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff fedb 	bl	8003ee0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	0c1b      	lsrs	r3, r3, #16
 800412e:	b2db      	uxtb	r3, r3
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff fed5 	bl	8003ee0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	0a1b      	lsrs	r3, r3, #8
 800413a:	b2db      	uxtb	r3, r3
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fecf 	bl	8003ee0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff feca 	bl	8003ee0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004150:	79fb      	ldrb	r3, [r7, #7]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <send_cmd+0x94>
 8004156:	2395      	movs	r3, #149	; 0x95
 8004158:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	2b08      	cmp	r3, #8
 800415e:	d101      	bne.n	8004164 <send_cmd+0x9e>
 8004160:	2387      	movs	r3, #135	; 0x87
 8004162:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff feba 	bl	8003ee0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	2b0c      	cmp	r3, #12
 8004170:	d102      	bne.n	8004178 <send_cmd+0xb2>
 8004172:	20ff      	movs	r0, #255	; 0xff
 8004174:	f7ff feb4 	bl	8003ee0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004178:	230a      	movs	r3, #10
 800417a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800417c:	20ff      	movs	r0, #255	; 0xff
 800417e:	f7ff feaf 	bl	8003ee0 <xchg_spi>
 8004182:	4603      	mov	r3, r0
 8004184:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004186:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800418a:	2b00      	cmp	r3, #0
 800418c:	da05      	bge.n	800419a <send_cmd+0xd4>
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	3b01      	subs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
 8004194:	7bfb      	ldrb	r3, [r7, #15]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <send_cmd+0xb6>

	return res;							/* Return received response */
 800419a:	7bbb      	ldrb	r3, [r7, #14]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80041a4:	b590      	push	{r4, r7, lr}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <USER_SPI_initialize+0x14>
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0d6      	b.n	8004366 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80041b8:	4b6d      	ldr	r3, [pc, #436]	; (8004370 <USER_SPI_initialize+0x1cc>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <USER_SPI_initialize+0x2a>
 80041c6:	4b6a      	ldr	r3, [pc, #424]	; (8004370 <USER_SPI_initialize+0x1cc>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	e0cb      	b.n	8004366 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80041ce:	4b69      	ldr	r3, [pc, #420]	; (8004374 <USER_SPI_initialize+0x1d0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80041d8:	4b66      	ldr	r3, [pc, #408]	; (8004374 <USER_SPI_initialize+0x1d0>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80041e0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80041e2:	230a      	movs	r3, #10
 80041e4:	73fb      	strb	r3, [r7, #15]
 80041e6:	e005      	b.n	80041f4 <USER_SPI_initialize+0x50>
 80041e8:	20ff      	movs	r0, #255	; 0xff
 80041ea:	f7ff fe79 	bl	8003ee0 <xchg_spi>
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f6      	bne.n	80041e8 <USER_SPI_initialize+0x44>

	ty = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80041fe:	2100      	movs	r1, #0
 8004200:	2000      	movs	r0, #0
 8004202:	f7ff ff60 	bl	80040c6 <send_cmd>
 8004206:	4603      	mov	r3, r0
 8004208:	2b01      	cmp	r3, #1
 800420a:	f040 808b 	bne.w	8004324 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800420e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004212:	f7ff fe3b 	bl	8003e8c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004216:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800421a:	2008      	movs	r0, #8
 800421c:	f7ff ff53 	bl	80040c6 <send_cmd>
 8004220:	4603      	mov	r3, r0
 8004222:	2b01      	cmp	r3, #1
 8004224:	d151      	bne.n	80042ca <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004226:	2300      	movs	r3, #0
 8004228:	73fb      	strb	r3, [r7, #15]
 800422a:	e00d      	b.n	8004248 <USER_SPI_initialize+0xa4>
 800422c:	7bfc      	ldrb	r4, [r7, #15]
 800422e:	20ff      	movs	r0, #255	; 0xff
 8004230:	f7ff fe56 	bl	8003ee0 <xchg_spi>
 8004234:	4603      	mov	r3, r0
 8004236:	461a      	mov	r2, r3
 8004238:	f104 0310 	add.w	r3, r4, #16
 800423c:	443b      	add	r3, r7
 800423e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	3301      	adds	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	2b03      	cmp	r3, #3
 800424c:	d9ee      	bls.n	800422c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800424e:	7abb      	ldrb	r3, [r7, #10]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d167      	bne.n	8004324 <USER_SPI_initialize+0x180>
 8004254:	7afb      	ldrb	r3, [r7, #11]
 8004256:	2baa      	cmp	r3, #170	; 0xaa
 8004258:	d164      	bne.n	8004324 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800425a:	bf00      	nop
 800425c:	f7ff fe2a 	bl	8003eb4 <SPI_Timer_Status>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <USER_SPI_initialize+0xd2>
 8004266:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800426a:	20a9      	movs	r0, #169	; 0xa9
 800426c:	f7ff ff2b 	bl	80040c6 <send_cmd>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f2      	bne.n	800425c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004276:	f7ff fe1d 	bl	8003eb4 <SPI_Timer_Status>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d051      	beq.n	8004324 <USER_SPI_initialize+0x180>
 8004280:	2100      	movs	r1, #0
 8004282:	203a      	movs	r0, #58	; 0x3a
 8004284:	f7ff ff1f 	bl	80040c6 <send_cmd>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d14a      	bne.n	8004324 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800428e:	2300      	movs	r3, #0
 8004290:	73fb      	strb	r3, [r7, #15]
 8004292:	e00d      	b.n	80042b0 <USER_SPI_initialize+0x10c>
 8004294:	7bfc      	ldrb	r4, [r7, #15]
 8004296:	20ff      	movs	r0, #255	; 0xff
 8004298:	f7ff fe22 	bl	8003ee0 <xchg_spi>
 800429c:	4603      	mov	r3, r0
 800429e:	461a      	mov	r2, r3
 80042a0:	f104 0310 	add.w	r3, r4, #16
 80042a4:	443b      	add	r3, r7
 80042a6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	3301      	adds	r3, #1
 80042ae:	73fb      	strb	r3, [r7, #15]
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d9ee      	bls.n	8004294 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80042b6:	7a3b      	ldrb	r3, [r7, #8]
 80042b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <USER_SPI_initialize+0x120>
 80042c0:	230c      	movs	r3, #12
 80042c2:	e000      	b.n	80042c6 <USER_SPI_initialize+0x122>
 80042c4:	2304      	movs	r3, #4
 80042c6:	737b      	strb	r3, [r7, #13]
 80042c8:	e02c      	b.n	8004324 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80042ca:	2100      	movs	r1, #0
 80042cc:	20a9      	movs	r0, #169	; 0xa9
 80042ce:	f7ff fefa 	bl	80040c6 <send_cmd>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d804      	bhi.n	80042e2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80042d8:	2302      	movs	r3, #2
 80042da:	737b      	strb	r3, [r7, #13]
 80042dc:	23a9      	movs	r3, #169	; 0xa9
 80042de:	73bb      	strb	r3, [r7, #14]
 80042e0:	e003      	b.n	80042ea <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80042e2:	2301      	movs	r3, #1
 80042e4:	737b      	strb	r3, [r7, #13]
 80042e6:	2301      	movs	r3, #1
 80042e8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80042ea:	bf00      	nop
 80042ec:	f7ff fde2 	bl	8003eb4 <SPI_Timer_Status>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d007      	beq.n	8004306 <USER_SPI_initialize+0x162>
 80042f6:	7bbb      	ldrb	r3, [r7, #14]
 80042f8:	2100      	movs	r1, #0
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fee3 	bl	80040c6 <send_cmd>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f2      	bne.n	80042ec <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004306:	f7ff fdd5 	bl	8003eb4 <SPI_Timer_Status>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d007      	beq.n	8004320 <USER_SPI_initialize+0x17c>
 8004310:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004314:	2010      	movs	r0, #16
 8004316:	f7ff fed6 	bl	80040c6 <send_cmd>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <USER_SPI_initialize+0x180>
				ty = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004324:	4a14      	ldr	r2, [pc, #80]	; (8004378 <USER_SPI_initialize+0x1d4>)
 8004326:	7b7b      	ldrb	r3, [r7, #13]
 8004328:	7013      	strb	r3, [r2, #0]
	despiselect();
 800432a:	f7ff fe49 	bl	8003fc0 <despiselect>

	if (ty) {			/* OK */
 800432e:	7b7b      	ldrb	r3, [r7, #13]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d012      	beq.n	800435a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004334:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <USER_SPI_initialize+0x1d0>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800433e:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <USER_SPI_initialize+0x1d0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0210 	orr.w	r2, r2, #16
 8004346:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <USER_SPI_initialize+0x1cc>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f023 0301 	bic.w	r3, r3, #1
 8004352:	b2da      	uxtb	r2, r3
 8004354:	4b06      	ldr	r3, [pc, #24]	; (8004370 <USER_SPI_initialize+0x1cc>)
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	e002      	b.n	8004360 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800435a:	4b05      	ldr	r3, [pc, #20]	; (8004370 <USER_SPI_initialize+0x1cc>)
 800435c:	2201      	movs	r2, #1
 800435e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004360:	4b03      	ldr	r3, [pc, #12]	; (8004370 <USER_SPI_initialize+0x1cc>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	b2db      	uxtb	r3, r3
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	bd90      	pop	{r4, r7, pc}
 800436e:	bf00      	nop
 8004370:	20000020 	.word	0x20000020
 8004374:	200001a4 	.word	0x200001a4
 8004378:	2000029c 	.word	0x2000029c

0800437c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	4603      	mov	r3, r0
 8004384:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <USER_SPI_status+0x14>
 800438c:	2301      	movs	r3, #1
 800438e:	e002      	b.n	8004396 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004390:	4b04      	ldr	r3, [pc, #16]	; (80043a4 <USER_SPI_status+0x28>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	b2db      	uxtb	r3, r3
}
 8004396:	4618      	mov	r0, r3
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	20000020 	.word	0x20000020

080043a8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	4603      	mov	r3, r0
 80043b6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d102      	bne.n	80043c4 <USER_SPI_read+0x1c>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <USER_SPI_read+0x20>
 80043c4:	2304      	movs	r3, #4
 80043c6:	e04d      	b.n	8004464 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80043c8:	4b28      	ldr	r3, [pc, #160]	; (800446c <USER_SPI_read+0xc4>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <USER_SPI_read+0x32>
 80043d6:	2303      	movs	r3, #3
 80043d8:	e044      	b.n	8004464 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80043da:	4b25      	ldr	r3, [pc, #148]	; (8004470 <USER_SPI_read+0xc8>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d102      	bne.n	80043ec <USER_SPI_read+0x44>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	025b      	lsls	r3, r3, #9
 80043ea:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d111      	bne.n	8004416 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	2011      	movs	r0, #17
 80043f6:	f7ff fe66 	bl	80040c6 <send_cmd>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d129      	bne.n	8004454 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004400:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004404:	68b8      	ldr	r0, [r7, #8]
 8004406:	f7ff fe03 	bl	8004010 <rcvr_datablock>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d021      	beq.n	8004454 <USER_SPI_read+0xac>
			count = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	e01e      	b.n	8004454 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	2012      	movs	r0, #18
 800441a:	f7ff fe54 	bl	80040c6 <send_cmd>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d117      	bne.n	8004454 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004424:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004428:	68b8      	ldr	r0, [r7, #8]
 800442a:	f7ff fdf1 	bl	8004010 <rcvr_datablock>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <USER_SPI_read+0xa2>
				buff += 512;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800443a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	3b01      	subs	r3, #1
 8004440:	603b      	str	r3, [r7, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1ed      	bne.n	8004424 <USER_SPI_read+0x7c>
 8004448:	e000      	b.n	800444c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800444a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800444c:	2100      	movs	r1, #0
 800444e:	200c      	movs	r0, #12
 8004450:	f7ff fe39 	bl	80040c6 <send_cmd>
		}
	}
	despiselect();
 8004454:	f7ff fdb4 	bl	8003fc0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	bf14      	ite	ne
 800445e:	2301      	movne	r3, #1
 8004460:	2300      	moveq	r3, #0
 8004462:	b2db      	uxtb	r3, r3
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20000020 	.word	0x20000020
 8004470:	2000029c 	.word	0x2000029c

08004474 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	607a      	str	r2, [r7, #4]
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	4603      	mov	r3, r0
 8004482:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d102      	bne.n	8004490 <USER_SPI_write+0x1c>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <USER_SPI_write+0x20>
 8004490:	2304      	movs	r3, #4
 8004492:	e063      	b.n	800455c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004494:	4b33      	ldr	r3, [pc, #204]	; (8004564 <USER_SPI_write+0xf0>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <USER_SPI_write+0x32>
 80044a2:	2303      	movs	r3, #3
 80044a4:	e05a      	b.n	800455c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80044a6:	4b2f      	ldr	r3, [pc, #188]	; (8004564 <USER_SPI_write+0xf0>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <USER_SPI_write+0x44>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e051      	b.n	800455c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80044b8:	4b2b      	ldr	r3, [pc, #172]	; (8004568 <USER_SPI_write+0xf4>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d102      	bne.n	80044ca <USER_SPI_write+0x56>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	025b      	lsls	r3, r3, #9
 80044c8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d110      	bne.n	80044f2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	2018      	movs	r0, #24
 80044d4:	f7ff fdf7 	bl	80040c6 <send_cmd>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d136      	bne.n	800454c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80044de:	21fe      	movs	r1, #254	; 0xfe
 80044e0:	68b8      	ldr	r0, [r7, #8]
 80044e2:	f7ff fdbe 	bl	8004062 <xmit_datablock>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d02f      	beq.n	800454c <USER_SPI_write+0xd8>
			count = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	e02c      	b.n	800454c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80044f2:	4b1d      	ldr	r3, [pc, #116]	; (8004568 <USER_SPI_write+0xf4>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	f003 0306 	and.w	r3, r3, #6
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <USER_SPI_write+0x92>
 80044fe:	6839      	ldr	r1, [r7, #0]
 8004500:	2097      	movs	r0, #151	; 0x97
 8004502:	f7ff fde0 	bl	80040c6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	2019      	movs	r0, #25
 800450a:	f7ff fddc 	bl	80040c6 <send_cmd>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d11b      	bne.n	800454c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004514:	21fc      	movs	r1, #252	; 0xfc
 8004516:	68b8      	ldr	r0, [r7, #8]
 8004518:	f7ff fda3 	bl	8004062 <xmit_datablock>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <USER_SPI_write+0xc4>
				buff += 512;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004528:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	3b01      	subs	r3, #1
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1ee      	bne.n	8004514 <USER_SPI_write+0xa0>
 8004536:	e000      	b.n	800453a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8004538:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800453a:	21fd      	movs	r1, #253	; 0xfd
 800453c:	2000      	movs	r0, #0
 800453e:	f7ff fd90 	bl	8004062 <xmit_datablock>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <USER_SPI_write+0xd8>
 8004548:	2301      	movs	r3, #1
 800454a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800454c:	f7ff fd38 	bl	8003fc0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	bf14      	ite	ne
 8004556:	2301      	movne	r3, #1
 8004558:	2300      	moveq	r3, #0
 800455a:	b2db      	uxtb	r3, r3
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20000020 	.word	0x20000020
 8004568:	2000029c 	.word	0x2000029c

0800456c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08c      	sub	sp, #48	; 0x30
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	603a      	str	r2, [r7, #0]
 8004576:	71fb      	strb	r3, [r7, #7]
 8004578:	460b      	mov	r3, r1
 800457a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800457c:	79fb      	ldrb	r3, [r7, #7]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <USER_SPI_ioctl+0x1a>
 8004582:	2304      	movs	r3, #4
 8004584:	e15a      	b.n	800483c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004586:	4baf      	ldr	r3, [pc, #700]	; (8004844 <USER_SPI_ioctl+0x2d8>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <USER_SPI_ioctl+0x2c>
 8004594:	2303      	movs	r3, #3
 8004596:	e151      	b.n	800483c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800459e:	79bb      	ldrb	r3, [r7, #6]
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	f200 8136 	bhi.w	8004812 <USER_SPI_ioctl+0x2a6>
 80045a6:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <USER_SPI_ioctl+0x40>)
 80045a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ac:	080045c1 	.word	0x080045c1
 80045b0:	080045d5 	.word	0x080045d5
 80045b4:	08004813 	.word	0x08004813
 80045b8:	08004681 	.word	0x08004681
 80045bc:	08004777 	.word	0x08004777
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80045c0:	f7ff fd0c 	bl	8003fdc <spiselect>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 8127 	beq.w	800481a <USER_SPI_ioctl+0x2ae>
 80045cc:	2300      	movs	r3, #0
 80045ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80045d2:	e122      	b.n	800481a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80045d4:	2100      	movs	r1, #0
 80045d6:	2009      	movs	r0, #9
 80045d8:	f7ff fd75 	bl	80040c6 <send_cmd>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f040 811d 	bne.w	800481e <USER_SPI_ioctl+0x2b2>
 80045e4:	f107 030c 	add.w	r3, r7, #12
 80045e8:	2110      	movs	r1, #16
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff fd10 	bl	8004010 <rcvr_datablock>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 8113 	beq.w	800481e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80045f8:	7b3b      	ldrb	r3, [r7, #12]
 80045fa:	099b      	lsrs	r3, r3, #6
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d111      	bne.n	8004626 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004602:	7d7b      	ldrb	r3, [r7, #21]
 8004604:	461a      	mov	r2, r3
 8004606:	7d3b      	ldrb	r3, [r7, #20]
 8004608:	021b      	lsls	r3, r3, #8
 800460a:	4413      	add	r3, r2
 800460c:	461a      	mov	r2, r3
 800460e:	7cfb      	ldrb	r3, [r7, #19]
 8004610:	041b      	lsls	r3, r3, #16
 8004612:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004616:	4413      	add	r3, r2
 8004618:	3301      	adds	r3, #1
 800461a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	029a      	lsls	r2, r3, #10
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	e028      	b.n	8004678 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004626:	7c7b      	ldrb	r3, [r7, #17]
 8004628:	f003 030f 	and.w	r3, r3, #15
 800462c:	b2da      	uxtb	r2, r3
 800462e:	7dbb      	ldrb	r3, [r7, #22]
 8004630:	09db      	lsrs	r3, r3, #7
 8004632:	b2db      	uxtb	r3, r3
 8004634:	4413      	add	r3, r2
 8004636:	b2da      	uxtb	r2, r3
 8004638:	7d7b      	ldrb	r3, [r7, #21]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	b2db      	uxtb	r3, r3
 800463e:	f003 0306 	and.w	r3, r3, #6
 8004642:	b2db      	uxtb	r3, r3
 8004644:	4413      	add	r3, r2
 8004646:	b2db      	uxtb	r3, r3
 8004648:	3302      	adds	r3, #2
 800464a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800464e:	7d3b      	ldrb	r3, [r7, #20]
 8004650:	099b      	lsrs	r3, r3, #6
 8004652:	b2db      	uxtb	r3, r3
 8004654:	461a      	mov	r2, r3
 8004656:	7cfb      	ldrb	r3, [r7, #19]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	441a      	add	r2, r3
 800465c:	7cbb      	ldrb	r3, [r7, #18]
 800465e:	029b      	lsls	r3, r3, #10
 8004660:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004664:	4413      	add	r3, r2
 8004666:	3301      	adds	r3, #1
 8004668:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800466a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800466e:	3b09      	subs	r3, #9
 8004670:	69fa      	ldr	r2, [r7, #28]
 8004672:	409a      	lsls	r2, r3
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800467e:	e0ce      	b.n	800481e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004680:	4b71      	ldr	r3, [pc, #452]	; (8004848 <USER_SPI_ioctl+0x2dc>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d031      	beq.n	80046f0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800468c:	2100      	movs	r1, #0
 800468e:	208d      	movs	r0, #141	; 0x8d
 8004690:	f7ff fd19 	bl	80040c6 <send_cmd>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	f040 80c3 	bne.w	8004822 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800469c:	20ff      	movs	r0, #255	; 0xff
 800469e:	f7ff fc1f 	bl	8003ee0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80046a2:	f107 030c 	add.w	r3, r7, #12
 80046a6:	2110      	movs	r1, #16
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff fcb1 	bl	8004010 <rcvr_datablock>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80b6 	beq.w	8004822 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80046b6:	2330      	movs	r3, #48	; 0x30
 80046b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80046bc:	e007      	b.n	80046ce <USER_SPI_ioctl+0x162>
 80046be:	20ff      	movs	r0, #255	; 0xff
 80046c0:	f7ff fc0e 	bl	8003ee0 <xchg_spi>
 80046c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80046c8:	3b01      	subs	r3, #1
 80046ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80046ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f3      	bne.n	80046be <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80046d6:	7dbb      	ldrb	r3, [r7, #22]
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	2310      	movs	r3, #16
 80046e0:	fa03 f202 	lsl.w	r2, r3, r2
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80046ee:	e098      	b.n	8004822 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80046f0:	2100      	movs	r1, #0
 80046f2:	2009      	movs	r0, #9
 80046f4:	f7ff fce7 	bl	80040c6 <send_cmd>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f040 8091 	bne.w	8004822 <USER_SPI_ioctl+0x2b6>
 8004700:	f107 030c 	add.w	r3, r7, #12
 8004704:	2110      	movs	r1, #16
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff fc82 	bl	8004010 <rcvr_datablock>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 8087 	beq.w	8004822 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004714:	4b4c      	ldr	r3, [pc, #304]	; (8004848 <USER_SPI_ioctl+0x2dc>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d012      	beq.n	8004746 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004720:	7dbb      	ldrb	r3, [r7, #22]
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004728:	7dfa      	ldrb	r2, [r7, #23]
 800472a:	09d2      	lsrs	r2, r2, #7
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	4413      	add	r3, r2
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	7e7b      	ldrb	r3, [r7, #25]
 8004734:	099b      	lsrs	r3, r3, #6
 8004736:	b2db      	uxtb	r3, r3
 8004738:	3b01      	subs	r3, #1
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	461a      	mov	r2, r3
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	e013      	b.n	800476e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004746:	7dbb      	ldrb	r3, [r7, #22]
 8004748:	109b      	asrs	r3, r3, #2
 800474a:	b29b      	uxth	r3, r3
 800474c:	f003 031f 	and.w	r3, r3, #31
 8004750:	3301      	adds	r3, #1
 8004752:	7dfa      	ldrb	r2, [r7, #23]
 8004754:	00d2      	lsls	r2, r2, #3
 8004756:	f002 0218 	and.w	r2, r2, #24
 800475a:	7df9      	ldrb	r1, [r7, #23]
 800475c:	0949      	lsrs	r1, r1, #5
 800475e:	b2c9      	uxtb	r1, r1
 8004760:	440a      	add	r2, r1
 8004762:	3201      	adds	r2, #1
 8004764:	fb02 f303 	mul.w	r3, r2, r3
 8004768:	461a      	mov	r2, r3
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004774:	e055      	b.n	8004822 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004776:	4b34      	ldr	r3, [pc, #208]	; (8004848 <USER_SPI_ioctl+0x2dc>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	f003 0306 	and.w	r3, r3, #6
 800477e:	2b00      	cmp	r3, #0
 8004780:	d051      	beq.n	8004826 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004782:	f107 020c 	add.w	r2, r7, #12
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	210b      	movs	r1, #11
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff feee 	bl	800456c <USER_SPI_ioctl>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d149      	bne.n	800482a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004796:	7b3b      	ldrb	r3, [r7, #12]
 8004798:	099b      	lsrs	r3, r3, #6
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d104      	bne.n	80047aa <USER_SPI_ioctl+0x23e>
 80047a0:	7dbb      	ldrb	r3, [r7, #22]
 80047a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d041      	beq.n	800482e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	623b      	str	r3, [r7, #32]
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80047ba:	4b23      	ldr	r3, [pc, #140]	; (8004848 <USER_SPI_ioctl+0x2dc>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d105      	bne.n	80047d2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	025b      	lsls	r3, r3, #9
 80047ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	025b      	lsls	r3, r3, #9
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80047d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047d4:	2020      	movs	r0, #32
 80047d6:	f7ff fc76 	bl	80040c6 <send_cmd>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d128      	bne.n	8004832 <USER_SPI_ioctl+0x2c6>
 80047e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047e2:	2021      	movs	r0, #33	; 0x21
 80047e4:	f7ff fc6f 	bl	80040c6 <send_cmd>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d121      	bne.n	8004832 <USER_SPI_ioctl+0x2c6>
 80047ee:	2100      	movs	r1, #0
 80047f0:	2026      	movs	r0, #38	; 0x26
 80047f2:	f7ff fc68 	bl	80040c6 <send_cmd>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d11a      	bne.n	8004832 <USER_SPI_ioctl+0x2c6>
 80047fc:	f247 5030 	movw	r0, #30000	; 0x7530
 8004800:	f7ff fbbb 	bl	8003f7a <wait_ready>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d013      	beq.n	8004832 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800480a:	2300      	movs	r3, #0
 800480c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004810:	e00f      	b.n	8004832 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004812:	2304      	movs	r3, #4
 8004814:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004818:	e00c      	b.n	8004834 <USER_SPI_ioctl+0x2c8>
		break;
 800481a:	bf00      	nop
 800481c:	e00a      	b.n	8004834 <USER_SPI_ioctl+0x2c8>
		break;
 800481e:	bf00      	nop
 8004820:	e008      	b.n	8004834 <USER_SPI_ioctl+0x2c8>
		break;
 8004822:	bf00      	nop
 8004824:	e006      	b.n	8004834 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004826:	bf00      	nop
 8004828:	e004      	b.n	8004834 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800482a:	bf00      	nop
 800482c:	e002      	b.n	8004834 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800482e:	bf00      	nop
 8004830:	e000      	b.n	8004834 <USER_SPI_ioctl+0x2c8>
		break;
 8004832:	bf00      	nop
	}

	despiselect();
 8004834:	f7ff fbc4 	bl	8003fc0 <despiselect>

	return res;
 8004838:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800483c:	4618      	mov	r0, r3
 800483e:	3730      	adds	r7, #48	; 0x30
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	20000020 	.word	0x20000020
 8004848:	2000029c 	.word	0x2000029c

0800484c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004856:	79fb      	ldrb	r3, [r7, #7]
 8004858:	4a08      	ldr	r2, [pc, #32]	; (800487c <disk_status+0x30>)
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	79fa      	ldrb	r2, [r7, #7]
 8004864:	4905      	ldr	r1, [pc, #20]	; (800487c <disk_status+0x30>)
 8004866:	440a      	add	r2, r1
 8004868:	7a12      	ldrb	r2, [r2, #8]
 800486a:	4610      	mov	r0, r2
 800486c:	4798      	blx	r3
 800486e:	4603      	mov	r3, r0
 8004870:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004872:	7bfb      	ldrb	r3, [r7, #15]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	200002d0 	.word	0x200002d0

08004880 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800488e:	79fb      	ldrb	r3, [r7, #7]
 8004890:	4a0d      	ldr	r2, [pc, #52]	; (80048c8 <disk_initialize+0x48>)
 8004892:	5cd3      	ldrb	r3, [r2, r3]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d111      	bne.n	80048bc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004898:	79fb      	ldrb	r3, [r7, #7]
 800489a:	4a0b      	ldr	r2, [pc, #44]	; (80048c8 <disk_initialize+0x48>)
 800489c:	2101      	movs	r1, #1
 800489e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	4a09      	ldr	r2, [pc, #36]	; (80048c8 <disk_initialize+0x48>)
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	79fa      	ldrb	r2, [r7, #7]
 80048ae:	4906      	ldr	r1, [pc, #24]	; (80048c8 <disk_initialize+0x48>)
 80048b0:	440a      	add	r2, r1
 80048b2:	7a12      	ldrb	r2, [r2, #8]
 80048b4:	4610      	mov	r0, r2
 80048b6:	4798      	blx	r3
 80048b8:	4603      	mov	r3, r0
 80048ba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	200002d0 	.word	0x200002d0

080048cc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80048cc:	b590      	push	{r4, r7, lr}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	603b      	str	r3, [r7, #0]
 80048d8:	4603      	mov	r3, r0
 80048da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	4a0a      	ldr	r2, [pc, #40]	; (8004908 <disk_read+0x3c>)
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	689c      	ldr	r4, [r3, #8]
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
 80048ea:	4a07      	ldr	r2, [pc, #28]	; (8004908 <disk_read+0x3c>)
 80048ec:	4413      	add	r3, r2
 80048ee:	7a18      	ldrb	r0, [r3, #8]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	47a0      	blx	r4
 80048f8:	4603      	mov	r3, r0
 80048fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80048fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	371c      	adds	r7, #28
 8004902:	46bd      	mov	sp, r7
 8004904:	bd90      	pop	{r4, r7, pc}
 8004906:	bf00      	nop
 8004908:	200002d0 	.word	0x200002d0

0800490c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800490c:	b590      	push	{r4, r7, lr}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	4603      	mov	r3, r0
 800491a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <disk_write+0x3c>)
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	68dc      	ldr	r4, [r3, #12]
 8004928:	7bfb      	ldrb	r3, [r7, #15]
 800492a:	4a07      	ldr	r2, [pc, #28]	; (8004948 <disk_write+0x3c>)
 800492c:	4413      	add	r3, r2
 800492e:	7a18      	ldrb	r0, [r3, #8]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68b9      	ldr	r1, [r7, #8]
 8004936:	47a0      	blx	r4
 8004938:	4603      	mov	r3, r0
 800493a:	75fb      	strb	r3, [r7, #23]
  return res;
 800493c:	7dfb      	ldrb	r3, [r7, #23]
}
 800493e:	4618      	mov	r0, r3
 8004940:	371c      	adds	r7, #28
 8004942:	46bd      	mov	sp, r7
 8004944:	bd90      	pop	{r4, r7, pc}
 8004946:	bf00      	nop
 8004948:	200002d0 	.word	0x200002d0

0800494c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	4603      	mov	r3, r0
 8004954:	603a      	str	r2, [r7, #0]
 8004956:	71fb      	strb	r3, [r7, #7]
 8004958:	460b      	mov	r3, r1
 800495a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800495c:	79fb      	ldrb	r3, [r7, #7]
 800495e:	4a09      	ldr	r2, [pc, #36]	; (8004984 <disk_ioctl+0x38>)
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	79fa      	ldrb	r2, [r7, #7]
 800496a:	4906      	ldr	r1, [pc, #24]	; (8004984 <disk_ioctl+0x38>)
 800496c:	440a      	add	r2, r1
 800496e:	7a10      	ldrb	r0, [r2, #8]
 8004970:	79b9      	ldrb	r1, [r7, #6]
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	4798      	blx	r3
 8004976:	4603      	mov	r3, r0
 8004978:	73fb      	strb	r3, [r7, #15]
  return res;
 800497a:	7bfb      	ldrb	r3, [r7, #15]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	200002d0 	.word	0x200002d0

08004988 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3301      	adds	r3, #1
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004998:	89fb      	ldrh	r3, [r7, #14]
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	b21a      	sxth	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	b21b      	sxth	r3, r3
 80049a4:	4313      	orrs	r3, r2
 80049a6:	b21b      	sxth	r3, r3
 80049a8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80049aa:	89fb      	ldrh	r3, [r7, #14]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3303      	adds	r3, #3
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	021b      	lsls	r3, r3, #8
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	3202      	adds	r2, #2
 80049d0:	7812      	ldrb	r2, [r2, #0]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	021b      	lsls	r3, r3, #8
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	3201      	adds	r2, #1
 80049de:	7812      	ldrb	r2, [r2, #0]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	7812      	ldrb	r2, [r2, #0]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
	return rv;
 80049f0:	68fb      	ldr	r3, [r7, #12]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	460b      	mov	r3, r1
 8004a08:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	887a      	ldrh	r2, [r7, #2]
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]
 8004a16:	887b      	ldrh	r3, [r7, #2]
 8004a18:	0a1b      	lsrs	r3, r3, #8
 8004a1a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	607a      	str	r2, [r7, #4]
 8004a22:	887a      	ldrh	r2, [r7, #2]
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	701a      	strb	r2, [r3, #0]
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	0a1b      	lsrs	r3, r3, #8
 8004a4e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	607a      	str	r2, [r7, #4]
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	701a      	strb	r2, [r3, #0]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	0a1b      	lsrs	r3, r3, #8
 8004a72:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	607a      	str	r2, [r7, #4]
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	701a      	strb	r2, [r3, #0]
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00d      	beq.n	8004ac2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	1c53      	adds	r3, r2, #1
 8004aaa:	613b      	str	r3, [r7, #16]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	1c59      	adds	r1, r3, #1
 8004ab0:	6179      	str	r1, [r7, #20]
 8004ab2:	7812      	ldrb	r2, [r2, #0]
 8004ab4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	607b      	str	r3, [r7, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1f1      	bne.n	8004aa6 <mem_cpy+0x1a>
	}
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004ace:	b480      	push	{r7}
 8004ad0:	b087      	sub	sp, #28
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	617a      	str	r2, [r7, #20]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	607b      	str	r3, [r7, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f3      	bne.n	8004ade <mem_set+0x10>
}
 8004af6:	bf00      	nop
 8004af8:	bf00      	nop
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004b04:	b480      	push	{r7}
 8004b06:	b089      	sub	sp, #36	; 0x24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	61fb      	str	r3, [r7, #28]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	61fa      	str	r2, [r7, #28]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	4619      	mov	r1, r3
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	61ba      	str	r2, [r7, #24]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	1acb      	subs	r3, r1, r3
 8004b30:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	607b      	str	r3, [r7, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <mem_cmp+0x40>
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0eb      	beq.n	8004b1c <mem_cmp+0x18>

	return r;
 8004b44:	697b      	ldr	r3, [r7, #20]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3724      	adds	r7, #36	; 0x24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004b5c:	e002      	b.n	8004b64 <chk_chr+0x12>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3301      	adds	r3, #1
 8004b62:	607b      	str	r3, [r7, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <chk_chr+0x26>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	461a      	mov	r2, r3
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d1f2      	bne.n	8004b5e <chk_chr+0xc>
	return *str;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004b92:	2300      	movs	r3, #0
 8004b94:	60bb      	str	r3, [r7, #8]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	e029      	b.n	8004bf0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004b9c:	4a27      	ldr	r2, [pc, #156]	; (8004c3c <chk_lock+0xb4>)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	4413      	add	r3, r2
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d01d      	beq.n	8004be6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004baa:	4a24      	ldr	r2, [pc, #144]	; (8004c3c <chk_lock+0xb4>)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	4413      	add	r3, r2
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d116      	bne.n	8004bea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004bbc:	4a1f      	ldr	r2, [pc, #124]	; (8004c3c <chk_lock+0xb4>)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	4413      	add	r3, r2
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d10c      	bne.n	8004bea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004bd0:	4a1a      	ldr	r2, [pc, #104]	; (8004c3c <chk_lock+0xb4>)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3308      	adds	r3, #8
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d102      	bne.n	8004bea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004be4:	e007      	b.n	8004bf6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004be6:	2301      	movs	r3, #1
 8004be8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3301      	adds	r3, #1
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d9d2      	bls.n	8004b9c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d109      	bne.n	8004c10 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d102      	bne.n	8004c08 <chk_lock+0x80>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d101      	bne.n	8004c0c <chk_lock+0x84>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	e010      	b.n	8004c2e <chk_lock+0xa6>
 8004c0c:	2312      	movs	r3, #18
 8004c0e:	e00e      	b.n	8004c2e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d108      	bne.n	8004c28 <chk_lock+0xa0>
 8004c16:	4a09      	ldr	r2, [pc, #36]	; (8004c3c <chk_lock+0xb4>)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	4413      	add	r3, r2
 8004c1e:	330c      	adds	r3, #12
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c26:	d101      	bne.n	8004c2c <chk_lock+0xa4>
 8004c28:	2310      	movs	r3, #16
 8004c2a:	e000      	b.n	8004c2e <chk_lock+0xa6>
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	200002b0 	.word	0x200002b0

08004c40 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004c46:	2300      	movs	r3, #0
 8004c48:	607b      	str	r3, [r7, #4]
 8004c4a:	e002      	b.n	8004c52 <enq_lock+0x12>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	607b      	str	r3, [r7, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d806      	bhi.n	8004c66 <enq_lock+0x26>
 8004c58:	4a09      	ldr	r2, [pc, #36]	; (8004c80 <enq_lock+0x40>)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	4413      	add	r3, r2
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f2      	bne.n	8004c4c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	bf14      	ite	ne
 8004c6c:	2301      	movne	r3, #1
 8004c6e:	2300      	moveq	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	200002b0 	.word	0x200002b0

08004c84 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	e01f      	b.n	8004cd4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004c94:	4a41      	ldr	r2, [pc, #260]	; (8004d9c <inc_lock+0x118>)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	4413      	add	r3, r2
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d113      	bne.n	8004cce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004ca6:	4a3d      	ldr	r2, [pc, #244]	; (8004d9c <inc_lock+0x118>)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	4413      	add	r3, r2
 8004cae:	3304      	adds	r3, #4
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d109      	bne.n	8004cce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004cba:	4a38      	ldr	r2, [pc, #224]	; (8004d9c <inc_lock+0x118>)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	4413      	add	r3, r2
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d006      	beq.n	8004cdc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d9dc      	bls.n	8004c94 <inc_lock+0x10>
 8004cda:	e000      	b.n	8004cde <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004cdc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d132      	bne.n	8004d4a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	e002      	b.n	8004cf0 <inc_lock+0x6c>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3301      	adds	r3, #1
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d806      	bhi.n	8004d04 <inc_lock+0x80>
 8004cf6:	4a29      	ldr	r2, [pc, #164]	; (8004d9c <inc_lock+0x118>)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	4413      	add	r3, r2
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1f2      	bne.n	8004cea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d101      	bne.n	8004d0e <inc_lock+0x8a>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e040      	b.n	8004d90 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	4922      	ldr	r1, [pc, #136]	; (8004d9c <inc_lock+0x118>)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	440b      	add	r3, r1
 8004d1a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	491e      	ldr	r1, [pc, #120]	; (8004d9c <inc_lock+0x118>)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	440b      	add	r3, r1
 8004d28:	3304      	adds	r3, #4
 8004d2a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	695a      	ldr	r2, [r3, #20]
 8004d30:	491a      	ldr	r1, [pc, #104]	; (8004d9c <inc_lock+0x118>)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	440b      	add	r3, r1
 8004d38:	3308      	adds	r3, #8
 8004d3a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004d3c:	4a17      	ldr	r2, [pc, #92]	; (8004d9c <inc_lock+0x118>)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	4413      	add	r3, r2
 8004d44:	330c      	adds	r3, #12
 8004d46:	2200      	movs	r2, #0
 8004d48:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d009      	beq.n	8004d64 <inc_lock+0xe0>
 8004d50:	4a12      	ldr	r2, [pc, #72]	; (8004d9c <inc_lock+0x118>)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	011b      	lsls	r3, r3, #4
 8004d56:	4413      	add	r3, r2
 8004d58:	330c      	adds	r3, #12
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <inc_lock+0xe0>
 8004d60:	2300      	movs	r3, #0
 8004d62:	e015      	b.n	8004d90 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d108      	bne.n	8004d7c <inc_lock+0xf8>
 8004d6a:	4a0c      	ldr	r2, [pc, #48]	; (8004d9c <inc_lock+0x118>)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	4413      	add	r3, r2
 8004d72:	330c      	adds	r3, #12
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	3301      	adds	r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	e001      	b.n	8004d80 <inc_lock+0xfc>
 8004d7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d80:	4906      	ldr	r1, [pc, #24]	; (8004d9c <inc_lock+0x118>)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	440b      	add	r3, r1
 8004d88:	330c      	adds	r3, #12
 8004d8a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	3301      	adds	r3, #1
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	200002b0 	.word	0x200002b0

08004da0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3b01      	subs	r3, #1
 8004dac:	607b      	str	r3, [r7, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d825      	bhi.n	8004e00 <dec_lock+0x60>
		n = Files[i].ctr;
 8004db4:	4a17      	ldr	r2, [pc, #92]	; (8004e14 <dec_lock+0x74>)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	4413      	add	r3, r2
 8004dbc:	330c      	adds	r3, #12
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004dc2:	89fb      	ldrh	r3, [r7, #14]
 8004dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dc8:	d101      	bne.n	8004dce <dec_lock+0x2e>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004dce:	89fb      	ldrh	r3, [r7, #14]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <dec_lock+0x3a>
 8004dd4:	89fb      	ldrh	r3, [r7, #14]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004dda:	4a0e      	ldr	r2, [pc, #56]	; (8004e14 <dec_lock+0x74>)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	4413      	add	r3, r2
 8004de2:	330c      	adds	r3, #12
 8004de4:	89fa      	ldrh	r2, [r7, #14]
 8004de6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004de8:	89fb      	ldrh	r3, [r7, #14]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d105      	bne.n	8004dfa <dec_lock+0x5a>
 8004dee:	4a09      	ldr	r2, [pc, #36]	; (8004e14 <dec_lock+0x74>)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	4413      	add	r3, r2
 8004df6:	2200      	movs	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	737b      	strb	r3, [r7, #13]
 8004dfe:	e001      	b.n	8004e04 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004e00:	2302      	movs	r3, #2
 8004e02:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004e04:	7b7b      	ldrb	r3, [r7, #13]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	200002b0 	.word	0x200002b0

08004e18 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	e010      	b.n	8004e48 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004e26:	4a0d      	ldr	r2, [pc, #52]	; (8004e5c <clear_lock+0x44>)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	4413      	add	r3, r2
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d105      	bne.n	8004e42 <clear_lock+0x2a>
 8004e36:	4a09      	ldr	r2, [pc, #36]	; (8004e5c <clear_lock+0x44>)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	4413      	add	r3, r2
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3301      	adds	r3, #1
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d9eb      	bls.n	8004e26 <clear_lock+0xe>
	}
}
 8004e4e:	bf00      	nop
 8004e50:	bf00      	nop
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	200002b0 	.word	0x200002b0

08004e60 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	78db      	ldrb	r3, [r3, #3]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d034      	beq.n	8004ede <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	7858      	ldrb	r0, [r3, #1]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004e84:	2301      	movs	r3, #1
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	f7ff fd40 	bl	800490c <disk_write>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	73fb      	strb	r3, [r7, #15]
 8004e96:	e022      	b.n	8004ede <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	1ad2      	subs	r2, r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d217      	bcs.n	8004ede <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	789b      	ldrb	r3, [r3, #2]
 8004eb2:	613b      	str	r3, [r7, #16]
 8004eb4:	e010      	b.n	8004ed8 <sync_window+0x78>
					wsect += fs->fsize;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	7858      	ldrb	r0, [r3, #1]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004eca:	2301      	movs	r3, #1
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	f7ff fd1d 	bl	800490c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	613b      	str	r3, [r7, #16]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d8eb      	bhi.n	8004eb6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d01b      	beq.n	8004f38 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff ffad 	bl	8004e60 <sync_window>
 8004f06:	4603      	mov	r3, r0
 8004f08:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d113      	bne.n	8004f38 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	7858      	ldrb	r0, [r3, #1]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	f7ff fcd5 	bl	80048cc <disk_read>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d004      	beq.n	8004f32 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004f28:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff ff87 	bl	8004e60 <sync_window>
 8004f52:	4603      	mov	r3, r0
 8004f54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d158      	bne.n	800500e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d148      	bne.n	8004ff6 <sync_fs+0xb2>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	791b      	ldrb	r3, [r3, #4]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d144      	bne.n	8004ff6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3330      	adds	r3, #48	; 0x30
 8004f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f74:	2100      	movs	r1, #0
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff fda9 	bl	8004ace <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3330      	adds	r3, #48	; 0x30
 8004f80:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004f84:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff fd38 	bl	80049fe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3330      	adds	r3, #48	; 0x30
 8004f92:	4921      	ldr	r1, [pc, #132]	; (8005018 <sync_fs+0xd4>)
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff fd4d 	bl	8004a34 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3330      	adds	r3, #48	; 0x30
 8004f9e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004fa2:	491e      	ldr	r1, [pc, #120]	; (800501c <sync_fs+0xd8>)
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff fd45 	bl	8004a34 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3330      	adds	r3, #48	; 0x30
 8004fae:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4610      	mov	r0, r2
 8004fba:	f7ff fd3b 	bl	8004a34 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3330      	adds	r3, #48	; 0x30
 8004fc2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4610      	mov	r0, r2
 8004fce:	f7ff fd31 	bl	8004a34 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	7858      	ldrb	r0, [r3, #1]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fea:	2301      	movs	r3, #1
 8004fec:	f7ff fc8e 	bl	800490c <disk_write>
			fs->fsi_flag = 0;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	785b      	ldrb	r3, [r3, #1]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff fca4 	bl	800494c <disk_ioctl>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <sync_fs+0xca>
 800500a:	2301      	movs	r3, #1
 800500c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800500e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	41615252 	.word	0x41615252
 800501c:	61417272 	.word	0x61417272

08005020 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	3b02      	subs	r3, #2
 800502e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	3b02      	subs	r3, #2
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d301      	bcc.n	8005040 <clust2sect+0x20>
 800503c:	2300      	movs	r3, #0
 800503e:	e008      	b.n	8005052 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	895b      	ldrh	r3, [r3, #10]
 8005044:	461a      	mov	r2, r3
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	fb03 f202 	mul.w	r2, r3, r2
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	4413      	add	r3, r2
}
 8005052:	4618      	mov	r0, r3
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b086      	sub	sp, #24
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d904      	bls.n	800507e <get_fat+0x20>
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	d302      	bcc.n	8005084 <get_fat+0x26>
		val = 1;	/* Internal error */
 800507e:	2301      	movs	r3, #1
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	e08f      	b.n	80051a4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005084:	f04f 33ff 	mov.w	r3, #4294967295
 8005088:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b03      	cmp	r3, #3
 8005090:	d062      	beq.n	8005158 <get_fat+0xfa>
 8005092:	2b03      	cmp	r3, #3
 8005094:	dc7c      	bgt.n	8005190 <get_fat+0x132>
 8005096:	2b01      	cmp	r3, #1
 8005098:	d002      	beq.n	80050a0 <get_fat+0x42>
 800509a:	2b02      	cmp	r3, #2
 800509c:	d042      	beq.n	8005124 <get_fat+0xc6>
 800509e:	e077      	b.n	8005190 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	085b      	lsrs	r3, r3, #1
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	4413      	add	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	6a1a      	ldr	r2, [r3, #32]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	0a5b      	lsrs	r3, r3, #9
 80050b6:	4413      	add	r3, r2
 80050b8:	4619      	mov	r1, r3
 80050ba:	6938      	ldr	r0, [r7, #16]
 80050bc:	f7ff ff14 	bl	8004ee8 <move_window>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d167      	bne.n	8005196 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	60fa      	str	r2, [r7, #12]
 80050cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4413      	add	r3, r2
 80050d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050d8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	6a1a      	ldr	r2, [r3, #32]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	0a5b      	lsrs	r3, r3, #9
 80050e2:	4413      	add	r3, r2
 80050e4:	4619      	mov	r1, r3
 80050e6:	6938      	ldr	r0, [r7, #16]
 80050e8:	f7ff fefe 	bl	8004ee8 <move_window>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d153      	bne.n	800519a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4413      	add	r3, r2
 80050fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	461a      	mov	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4313      	orrs	r3, r2
 8005108:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <get_fat+0xbc>
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	091b      	lsrs	r3, r3, #4
 8005118:	e002      	b.n	8005120 <get_fat+0xc2>
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005120:	617b      	str	r3, [r7, #20]
			break;
 8005122:	e03f      	b.n	80051a4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	6a1a      	ldr	r2, [r3, #32]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	0a1b      	lsrs	r3, r3, #8
 800512c:	4413      	add	r3, r2
 800512e:	4619      	mov	r1, r3
 8005130:	6938      	ldr	r0, [r7, #16]
 8005132:	f7ff fed9 	bl	8004ee8 <move_window>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d130      	bne.n	800519e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800514a:	4413      	add	r3, r2
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff fc1b 	bl	8004988 <ld_word>
 8005152:	4603      	mov	r3, r0
 8005154:	617b      	str	r3, [r7, #20]
			break;
 8005156:	e025      	b.n	80051a4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	6a1a      	ldr	r2, [r3, #32]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	09db      	lsrs	r3, r3, #7
 8005160:	4413      	add	r3, r2
 8005162:	4619      	mov	r1, r3
 8005164:	6938      	ldr	r0, [r7, #16]
 8005166:	f7ff febf 	bl	8004ee8 <move_window>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d118      	bne.n	80051a2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800517e:	4413      	add	r3, r2
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff fc19 	bl	80049b8 <ld_dword>
 8005186:	4603      	mov	r3, r0
 8005188:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800518c:	617b      	str	r3, [r7, #20]
			break;
 800518e:	e009      	b.n	80051a4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005190:	2301      	movs	r3, #1
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	e006      	b.n	80051a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005196:	bf00      	nop
 8005198:	e004      	b.n	80051a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800519a:	bf00      	nop
 800519c:	e002      	b.n	80051a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800519e:	bf00      	nop
 80051a0:	e000      	b.n	80051a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80051a2:	bf00      	nop
		}
	}

	return val;
 80051a4:	697b      	ldr	r3, [r7, #20]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80051ae:	b590      	push	{r4, r7, lr}
 80051b0:	b089      	sub	sp, #36	; 0x24
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80051ba:	2302      	movs	r3, #2
 80051bc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	f240 80d2 	bls.w	800536a <put_fat+0x1bc>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	f080 80cc 	bcs.w	800536a <put_fat+0x1bc>
		switch (fs->fs_type) {
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	f000 8096 	beq.w	8005308 <put_fat+0x15a>
 80051dc:	2b03      	cmp	r3, #3
 80051de:	f300 80cd 	bgt.w	800537c <put_fat+0x1ce>
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d002      	beq.n	80051ec <put_fat+0x3e>
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d06e      	beq.n	80052c8 <put_fat+0x11a>
 80051ea:	e0c7      	b.n	800537c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	61bb      	str	r3, [r7, #24]
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	085b      	lsrs	r3, r3, #1
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4413      	add	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a1a      	ldr	r2, [r3, #32]
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	0a5b      	lsrs	r3, r3, #9
 8005202:	4413      	add	r3, r2
 8005204:	4619      	mov	r1, r3
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f7ff fe6e 	bl	8004ee8 <move_window>
 800520c:	4603      	mov	r3, r0
 800520e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005210:	7ffb      	ldrb	r3, [r7, #31]
 8005212:	2b00      	cmp	r3, #0
 8005214:	f040 80ab 	bne.w	800536e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	1c59      	adds	r1, r3, #1
 8005222:	61b9      	str	r1, [r7, #24]
 8005224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005228:	4413      	add	r3, r2
 800522a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00d      	beq.n	8005252 <put_fat+0xa4>
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	b25b      	sxtb	r3, r3
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	b25a      	sxtb	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	b25b      	sxtb	r3, r3
 800524a:	4313      	orrs	r3, r2
 800524c:	b25b      	sxtb	r3, r3
 800524e:	b2db      	uxtb	r3, r3
 8005250:	e001      	b.n	8005256 <put_fat+0xa8>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a1a      	ldr	r2, [r3, #32]
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	0a5b      	lsrs	r3, r3, #9
 8005268:	4413      	add	r3, r2
 800526a:	4619      	mov	r1, r3
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f7ff fe3b 	bl	8004ee8 <move_window>
 8005272:	4603      	mov	r3, r0
 8005274:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005276:	7ffb      	ldrb	r3, [r7, #31]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d17a      	bne.n	8005372 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005288:	4413      	add	r3, r2
 800528a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <put_fat+0xf0>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	091b      	lsrs	r3, r3, #4
 800529a:	b2db      	uxtb	r3, r3
 800529c:	e00e      	b.n	80052bc <put_fat+0x10e>
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	b25b      	sxtb	r3, r3
 80052a4:	f023 030f 	bic.w	r3, r3, #15
 80052a8:	b25a      	sxtb	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	0a1b      	lsrs	r3, r3, #8
 80052ae:	b25b      	sxtb	r3, r3
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	b25b      	sxtb	r3, r3
 80052b6:	4313      	orrs	r3, r2
 80052b8:	b25b      	sxtb	r3, r3
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2201      	movs	r2, #1
 80052c4:	70da      	strb	r2, [r3, #3]
			break;
 80052c6:	e059      	b.n	800537c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1a      	ldr	r2, [r3, #32]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	0a1b      	lsrs	r3, r3, #8
 80052d0:	4413      	add	r3, r2
 80052d2:	4619      	mov	r1, r3
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f7ff fe07 	bl	8004ee8 <move_window>
 80052da:	4603      	mov	r3, r0
 80052dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80052de:	7ffb      	ldrb	r3, [r7, #31]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d148      	bne.n	8005376 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80052f2:	4413      	add	r3, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	b292      	uxth	r2, r2
 80052f8:	4611      	mov	r1, r2
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff fb7f 	bl	80049fe <st_word>
			fs->wflag = 1;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2201      	movs	r2, #1
 8005304:	70da      	strb	r2, [r3, #3]
			break;
 8005306:	e039      	b.n	800537c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a1a      	ldr	r2, [r3, #32]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	09db      	lsrs	r3, r3, #7
 8005310:	4413      	add	r3, r2
 8005312:	4619      	mov	r1, r3
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f7ff fde7 	bl	8004ee8 <move_window>
 800531a:	4603      	mov	r3, r0
 800531c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800531e:	7ffb      	ldrb	r3, [r7, #31]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d12a      	bne.n	800537a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005338:	4413      	add	r3, r2
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff fb3c 	bl	80049b8 <ld_dword>
 8005340:	4603      	mov	r3, r0
 8005342:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005346:	4323      	orrs	r3, r4
 8005348:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005358:	4413      	add	r3, r2
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff fb69 	bl	8004a34 <st_dword>
			fs->wflag = 1;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2201      	movs	r2, #1
 8005366:	70da      	strb	r2, [r3, #3]
			break;
 8005368:	e008      	b.n	800537c <put_fat+0x1ce>
		}
	}
 800536a:	bf00      	nop
 800536c:	e006      	b.n	800537c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800536e:	bf00      	nop
 8005370:	e004      	b.n	800537c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005372:	bf00      	nop
 8005374:	e002      	b.n	800537c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005376:	bf00      	nop
 8005378:	e000      	b.n	800537c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800537a:	bf00      	nop
	return res;
 800537c:	7ffb      	ldrb	r3, [r7, #31]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3724      	adds	r7, #36	; 0x24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd90      	pop	{r4, r7, pc}

08005386 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b088      	sub	sp, #32
 800538a:	af00      	add	r7, sp, #0
 800538c:	60f8      	str	r0, [r7, #12]
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d904      	bls.n	80053ac <remove_chain+0x26>
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d301      	bcc.n	80053b0 <remove_chain+0x2a>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e04b      	b.n	8005448 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00c      	beq.n	80053d0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80053b6:	f04f 32ff 	mov.w	r2, #4294967295
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	69b8      	ldr	r0, [r7, #24]
 80053be:	f7ff fef6 	bl	80051ae <put_fat>
 80053c2:	4603      	mov	r3, r0
 80053c4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80053c6:	7ffb      	ldrb	r3, [r7, #31]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <remove_chain+0x4a>
 80053cc:	7ffb      	ldrb	r3, [r7, #31]
 80053ce:	e03b      	b.n	8005448 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f7ff fe43 	bl	800505e <get_fat>
 80053d8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d031      	beq.n	8005444 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d101      	bne.n	80053ea <remove_chain+0x64>
 80053e6:	2302      	movs	r3, #2
 80053e8:	e02e      	b.n	8005448 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f0:	d101      	bne.n	80053f6 <remove_chain+0x70>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e028      	b.n	8005448 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80053f6:	2200      	movs	r2, #0
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	69b8      	ldr	r0, [r7, #24]
 80053fc:	f7ff fed7 	bl	80051ae <put_fat>
 8005400:	4603      	mov	r3, r0
 8005402:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005404:	7ffb      	ldrb	r3, [r7, #31]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <remove_chain+0x88>
 800540a:	7ffb      	ldrb	r3, [r7, #31]
 800540c:	e01c      	b.n	8005448 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	691a      	ldr	r2, [r3, #16]
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	3b02      	subs	r3, #2
 8005418:	429a      	cmp	r2, r3
 800541a:	d20b      	bcs.n	8005434 <remove_chain+0xae>
			fs->free_clst++;
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	791b      	ldrb	r3, [r3, #4]
 800542a:	f043 0301 	orr.w	r3, r3, #1
 800542e:	b2da      	uxtb	r2, r3
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	429a      	cmp	r2, r3
 8005440:	d3c6      	bcc.n	80053d0 <remove_chain+0x4a>
 8005442:	e000      	b.n	8005446 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005444:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3720      	adds	r7, #32
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10d      	bne.n	8005482 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d004      	beq.n	800547c <create_chain+0x2c>
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	429a      	cmp	r2, r3
 800547a:	d31b      	bcc.n	80054b4 <create_chain+0x64>
 800547c:	2301      	movs	r3, #1
 800547e:	61bb      	str	r3, [r7, #24]
 8005480:	e018      	b.n	80054b4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7ff fdea 	bl	800505e <get_fat>
 800548a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d801      	bhi.n	8005496 <create_chain+0x46>
 8005492:	2301      	movs	r3, #1
 8005494:	e070      	b.n	8005578 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549c:	d101      	bne.n	80054a2 <create_chain+0x52>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	e06a      	b.n	8005578 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d201      	bcs.n	80054b0 <create_chain+0x60>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	e063      	b.n	8005578 <create_chain+0x128>
		scl = clst;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	3301      	adds	r3, #1
 80054bc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	69fa      	ldr	r2, [r7, #28]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d307      	bcc.n	80054d8 <create_chain+0x88>
				ncl = 2;
 80054c8:	2302      	movs	r3, #2
 80054ca:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d901      	bls.n	80054d8 <create_chain+0x88>
 80054d4:	2300      	movs	r3, #0
 80054d6:	e04f      	b.n	8005578 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80054d8:	69f9      	ldr	r1, [r7, #28]
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff fdbf 	bl	800505e <get_fat>
 80054e0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00e      	beq.n	8005506 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d003      	beq.n	80054f6 <create_chain+0xa6>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f4:	d101      	bne.n	80054fa <create_chain+0xaa>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	e03e      	b.n	8005578 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d1da      	bne.n	80054b8 <create_chain+0x68>
 8005502:	2300      	movs	r3, #0
 8005504:	e038      	b.n	8005578 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005506:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005508:	f04f 32ff 	mov.w	r2, #4294967295
 800550c:	69f9      	ldr	r1, [r7, #28]
 800550e:	6938      	ldr	r0, [r7, #16]
 8005510:	f7ff fe4d 	bl	80051ae <put_fat>
 8005514:	4603      	mov	r3, r0
 8005516:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005518:	7dfb      	ldrb	r3, [r7, #23]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d109      	bne.n	8005532 <create_chain+0xe2>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d006      	beq.n	8005532 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005524:	69fa      	ldr	r2, [r7, #28]
 8005526:	6839      	ldr	r1, [r7, #0]
 8005528:	6938      	ldr	r0, [r7, #16]
 800552a:	f7ff fe40 	bl	80051ae <put_fat>
 800552e:	4603      	mov	r3, r0
 8005530:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005532:	7dfb      	ldrb	r3, [r7, #23]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d116      	bne.n	8005566 <create_chain+0x116>
		fs->last_clst = ncl;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	69fa      	ldr	r2, [r7, #28]
 800553c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	3b02      	subs	r3, #2
 8005548:	429a      	cmp	r2, r3
 800554a:	d804      	bhi.n	8005556 <create_chain+0x106>
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	1e5a      	subs	r2, r3, #1
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	791b      	ldrb	r3, [r3, #4]
 800555a:	f043 0301 	orr.w	r3, r3, #1
 800555e:	b2da      	uxtb	r2, r3
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	711a      	strb	r2, [r3, #4]
 8005564:	e007      	b.n	8005576 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005566:	7dfb      	ldrb	r3, [r7, #23]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d102      	bne.n	8005572 <create_chain+0x122>
 800556c:	f04f 33ff 	mov.w	r3, #4294967295
 8005570:	e000      	b.n	8005574 <create_chain+0x124>
 8005572:	2301      	movs	r3, #1
 8005574:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005576:	69fb      	ldr	r3, [r7, #28]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3720      	adds	r7, #32
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	3304      	adds	r3, #4
 8005596:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	0a5b      	lsrs	r3, r3, #9
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	8952      	ldrh	r2, [r2, #10]
 80055a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80055a4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1d1a      	adds	r2, r3, #4
 80055aa:	613a      	str	r2, [r7, #16]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <clmt_clust+0x3a>
 80055b6:	2300      	movs	r3, #0
 80055b8:	e010      	b.n	80055dc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d307      	bcc.n	80055d2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	3304      	adds	r3, #4
 80055ce:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80055d0:	e7e9      	b.n	80055a6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80055d2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	4413      	add	r3, r2
}
 80055dc:	4618      	mov	r0, r3
 80055de:	371c      	adds	r7, #28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055fe:	d204      	bcs.n	800560a <dir_sdi+0x22>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	f003 031f 	and.w	r3, r3, #31
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <dir_sdi+0x26>
		return FR_INT_ERR;
 800560a:	2302      	movs	r3, #2
 800560c:	e063      	b.n	80056d6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d106      	bne.n	800562e <dir_sdi+0x46>
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d902      	bls.n	800562e <dir_sdi+0x46>
		clst = fs->dirbase;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10c      	bne.n	800564e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	8912      	ldrh	r2, [r2, #8]
 800563c:	4293      	cmp	r3, r2
 800563e:	d301      	bcc.n	8005644 <dir_sdi+0x5c>
 8005640:	2302      	movs	r3, #2
 8005642:	e048      	b.n	80056d6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	61da      	str	r2, [r3, #28]
 800564c:	e029      	b.n	80056a2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	895b      	ldrh	r3, [r3, #10]
 8005652:	025b      	lsls	r3, r3, #9
 8005654:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005656:	e019      	b.n	800568c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6979      	ldr	r1, [r7, #20]
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff fcfe 	bl	800505e <get_fat>
 8005662:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566a:	d101      	bne.n	8005670 <dir_sdi+0x88>
 800566c:	2301      	movs	r3, #1
 800566e:	e032      	b.n	80056d6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d904      	bls.n	8005680 <dir_sdi+0x98>
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	429a      	cmp	r2, r3
 800567e:	d301      	bcc.n	8005684 <dir_sdi+0x9c>
 8005680:	2302      	movs	r3, #2
 8005682:	e028      	b.n	80056d6 <dir_sdi+0xee>
			ofs -= csz;
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	429a      	cmp	r2, r3
 8005692:	d2e1      	bcs.n	8005658 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005694:	6979      	ldr	r1, [r7, #20]
 8005696:	6938      	ldr	r0, [r7, #16]
 8005698:	f7ff fcc2 	bl	8005020 <clust2sect>
 800569c:	4602      	mov	r2, r0
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <dir_sdi+0xcc>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e010      	b.n	80056d6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	69da      	ldr	r2, [r3, #28]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	0a5b      	lsrs	r3, r3, #9
 80056bc:	441a      	add	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ce:	441a      	add	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b086      	sub	sp, #24
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	3320      	adds	r3, #32
 80056f4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <dir_next+0x28>
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005704:	d301      	bcc.n	800570a <dir_next+0x2c>
 8005706:	2304      	movs	r3, #4
 8005708:	e0aa      	b.n	8005860 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005710:	2b00      	cmp	r3, #0
 8005712:	f040 8098 	bne.w	8005846 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10b      	bne.n	8005740 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	095b      	lsrs	r3, r3, #5
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	8912      	ldrh	r2, [r2, #8]
 8005730:	4293      	cmp	r3, r2
 8005732:	f0c0 8088 	bcc.w	8005846 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	61da      	str	r2, [r3, #28]
 800573c:	2304      	movs	r3, #4
 800573e:	e08f      	b.n	8005860 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	0a5b      	lsrs	r3, r3, #9
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	8952      	ldrh	r2, [r2, #10]
 8005748:	3a01      	subs	r2, #1
 800574a:	4013      	ands	r3, r2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d17a      	bne.n	8005846 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	4619      	mov	r1, r3
 8005758:	4610      	mov	r0, r2
 800575a:	f7ff fc80 	bl	800505e <get_fat>
 800575e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d801      	bhi.n	800576a <dir_next+0x8c>
 8005766:	2302      	movs	r3, #2
 8005768:	e07a      	b.n	8005860 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005770:	d101      	bne.n	8005776 <dir_next+0x98>
 8005772:	2301      	movs	r3, #1
 8005774:	e074      	b.n	8005860 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	429a      	cmp	r2, r3
 800577e:	d358      	bcc.n	8005832 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d104      	bne.n	8005790 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	61da      	str	r2, [r3, #28]
 800578c:	2304      	movs	r3, #4
 800578e:	e067      	b.n	8005860 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	4619      	mov	r1, r3
 8005798:	4610      	mov	r0, r2
 800579a:	f7ff fe59 	bl	8005450 <create_chain>
 800579e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <dir_next+0xcc>
 80057a6:	2307      	movs	r3, #7
 80057a8:	e05a      	b.n	8005860 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <dir_next+0xd6>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e055      	b.n	8005860 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ba:	d101      	bne.n	80057c0 <dir_next+0xe2>
 80057bc:	2301      	movs	r3, #1
 80057be:	e04f      	b.n	8005860 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f7ff fb4d 	bl	8004e60 <sync_window>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <dir_next+0xf2>
 80057cc:	2301      	movs	r3, #1
 80057ce:	e047      	b.n	8005860 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3330      	adds	r3, #48	; 0x30
 80057d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d8:	2100      	movs	r1, #0
 80057da:	4618      	mov	r0, r3
 80057dc:	f7ff f977 	bl	8004ace <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80057e0:	2300      	movs	r3, #0
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	6979      	ldr	r1, [r7, #20]
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f7ff fc1a 	bl	8005020 <clust2sect>
 80057ec:	4602      	mov	r2, r0
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80057f2:	e012      	b.n	800581a <dir_next+0x13c>
						fs->wflag = 1;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2201      	movs	r2, #1
 80057f8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f7ff fb30 	bl	8004e60 <sync_window>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <dir_next+0x12c>
 8005806:	2301      	movs	r3, #1
 8005808:	e02a      	b.n	8005860 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	3301      	adds	r3, #1
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	62da      	str	r2, [r3, #44]	; 0x2c
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	895b      	ldrh	r3, [r3, #10]
 800581e:	461a      	mov	r2, r3
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	4293      	cmp	r3, r2
 8005824:	d3e6      	bcc.n	80057f4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad2      	subs	r2, r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005838:	6979      	ldr	r1, [r7, #20]
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f7ff fbf0 	bl	8005020 <clust2sect>
 8005840:	4602      	mov	r2, r0
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005858:	441a      	add	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005878:	2100      	movs	r1, #0
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7ff feb4 	bl	80055e8 <dir_sdi>
 8005880:	4603      	mov	r3, r0
 8005882:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005884:	7dfb      	ldrb	r3, [r7, #23]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d12b      	bne.n	80058e2 <dir_alloc+0x7a>
		n = 0;
 800588a:	2300      	movs	r3, #0
 800588c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	4619      	mov	r1, r3
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f7ff fb27 	bl	8004ee8 <move_window>
 800589a:	4603      	mov	r3, r0
 800589c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800589e:	7dfb      	ldrb	r3, [r7, #23]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d11d      	bne.n	80058e0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2be5      	cmp	r3, #229	; 0xe5
 80058ac:	d004      	beq.n	80058b8 <dir_alloc+0x50>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d107      	bne.n	80058c8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	3301      	adds	r3, #1
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d102      	bne.n	80058cc <dir_alloc+0x64>
 80058c6:	e00c      	b.n	80058e2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80058c8:	2300      	movs	r3, #0
 80058ca:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80058cc:	2101      	movs	r1, #1
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7ff ff05 	bl	80056de <dir_next>
 80058d4:	4603      	mov	r3, r0
 80058d6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80058d8:	7dfb      	ldrb	r3, [r7, #23]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0d7      	beq.n	800588e <dir_alloc+0x26>
 80058de:	e000      	b.n	80058e2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80058e0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80058e2:	7dfb      	ldrb	r3, [r7, #23]
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d101      	bne.n	80058ec <dir_alloc+0x84>
 80058e8:	2307      	movs	r3, #7
 80058ea:	75fb      	strb	r3, [r7, #23]
	return res;
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	331a      	adds	r3, #26
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff f83f 	bl	8004988 <ld_word>
 800590a:	4603      	mov	r3, r0
 800590c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b03      	cmp	r3, #3
 8005914:	d109      	bne.n	800592a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	3314      	adds	r3, #20
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff f834 	bl	8004988 <ld_word>
 8005920:	4603      	mov	r3, r0
 8005922:	041b      	lsls	r3, r3, #16
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800592a:	68fb      	ldr	r3, [r7, #12]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	331a      	adds	r3, #26
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	b292      	uxth	r2, r2
 8005948:	4611      	mov	r1, r2
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff f857 	bl	80049fe <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b03      	cmp	r3, #3
 8005956:	d109      	bne.n	800596c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f103 0214 	add.w	r2, r3, #20
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	0c1b      	lsrs	r3, r3, #16
 8005962:	b29b      	uxth	r3, r3
 8005964:	4619      	mov	r1, r3
 8005966:	4610      	mov	r0, r2
 8005968:	f7ff f849 	bl	80049fe <st_word>
	}
}
 800596c:	bf00      	nop
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005982:	2100      	movs	r1, #0
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7ff fe2f 	bl	80055e8 <dir_sdi>
 800598a:	4603      	mov	r3, r0
 800598c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <dir_find+0x24>
 8005994:	7dfb      	ldrb	r3, [r7, #23]
 8005996:	e03e      	b.n	8005a16 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	4619      	mov	r1, r3
 800599e:	6938      	ldr	r0, [r7, #16]
 80059a0:	f7ff faa2 	bl	8004ee8 <move_window>
 80059a4:	4603      	mov	r3, r0
 80059a6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80059a8:	7dfb      	ldrb	r3, [r7, #23]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d12f      	bne.n	8005a0e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d102      	bne.n	80059c2 <dir_find+0x4e>
 80059bc:	2304      	movs	r3, #4
 80059be:	75fb      	strb	r3, [r7, #23]
 80059c0:	e028      	b.n	8005a14 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	330b      	adds	r3, #11
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	330b      	adds	r3, #11
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10a      	bne.n	80059fa <dir_find+0x86>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a18      	ldr	r0, [r3, #32]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3324      	adds	r3, #36	; 0x24
 80059ec:	220b      	movs	r2, #11
 80059ee:	4619      	mov	r1, r3
 80059f0:	f7ff f888 	bl	8004b04 <mem_cmp>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00b      	beq.n	8005a12 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80059fa:	2100      	movs	r1, #0
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7ff fe6e 	bl	80056de <dir_next>
 8005a02:	4603      	mov	r3, r0
 8005a04:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005a06:	7dfb      	ldrb	r3, [r7, #23]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0c5      	beq.n	8005998 <dir_find+0x24>
 8005a0c:	e002      	b.n	8005a14 <dir_find+0xa0>
		if (res != FR_OK) break;
 8005a0e:	bf00      	nop
 8005a10:	e000      	b.n	8005a14 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005a12:	bf00      	nop

	return res;
 8005a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7ff ff1a 	bl	8005868 <dir_alloc>
 8005a34:	4603      	mov	r3, r0
 8005a36:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d11c      	bne.n	8005a78 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	4619      	mov	r1, r3
 8005a44:	68b8      	ldr	r0, [r7, #8]
 8005a46:	f7ff fa4f 	bl	8004ee8 <move_window>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d111      	bne.n	8005a78 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff f836 	bl	8004ace <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a18      	ldr	r0, [r3, #32]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3324      	adds	r3, #36	; 0x24
 8005a6a:	220b      	movs	r2, #11
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	f7ff f80d 	bl	8004a8c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2201      	movs	r2, #1
 8005a76:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
	...

08005a84 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3324      	adds	r3, #36	; 0x24
 8005a98:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005a9a:	220b      	movs	r2, #11
 8005a9c:	2120      	movs	r1, #32
 8005a9e:	68b8      	ldr	r0, [r7, #8]
 8005aa0:	f7ff f815 	bl	8004ace <mem_set>
	si = i = 0; ni = 8;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	613b      	str	r3, [r7, #16]
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	61fb      	str	r3, [r7, #28]
 8005aac:	2308      	movs	r3, #8
 8005aae:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	61fa      	str	r2, [r7, #28]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4413      	add	r3, r2
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005abe:	7efb      	ldrb	r3, [r7, #27]
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d94e      	bls.n	8005b62 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005ac4:	7efb      	ldrb	r3, [r7, #27]
 8005ac6:	2b2f      	cmp	r3, #47	; 0x2f
 8005ac8:	d006      	beq.n	8005ad8 <create_name+0x54>
 8005aca:	7efb      	ldrb	r3, [r7, #27]
 8005acc:	2b5c      	cmp	r3, #92	; 0x5c
 8005ace:	d110      	bne.n	8005af2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005ad0:	e002      	b.n	8005ad8 <create_name+0x54>
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	61fb      	str	r3, [r7, #28]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	4413      	add	r3, r2
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b2f      	cmp	r3, #47	; 0x2f
 8005ae2:	d0f6      	beq.n	8005ad2 <create_name+0x4e>
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	4413      	add	r3, r2
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	2b5c      	cmp	r3, #92	; 0x5c
 8005aee:	d0f0      	beq.n	8005ad2 <create_name+0x4e>
			break;
 8005af0:	e038      	b.n	8005b64 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005af2:	7efb      	ldrb	r3, [r7, #27]
 8005af4:	2b2e      	cmp	r3, #46	; 0x2e
 8005af6:	d003      	beq.n	8005b00 <create_name+0x7c>
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d30c      	bcc.n	8005b1a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	2b0b      	cmp	r3, #11
 8005b04:	d002      	beq.n	8005b0c <create_name+0x88>
 8005b06:	7efb      	ldrb	r3, [r7, #27]
 8005b08:	2b2e      	cmp	r3, #46	; 0x2e
 8005b0a:	d001      	beq.n	8005b10 <create_name+0x8c>
 8005b0c:	2306      	movs	r3, #6
 8005b0e:	e044      	b.n	8005b9a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005b10:	2308      	movs	r3, #8
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	230b      	movs	r3, #11
 8005b16:	617b      	str	r3, [r7, #20]
			continue;
 8005b18:	e022      	b.n	8005b60 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005b1a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	da04      	bge.n	8005b2c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005b22:	7efb      	ldrb	r3, [r7, #27]
 8005b24:	3b80      	subs	r3, #128	; 0x80
 8005b26:	4a1f      	ldr	r2, [pc, #124]	; (8005ba4 <create_name+0x120>)
 8005b28:	5cd3      	ldrb	r3, [r2, r3]
 8005b2a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005b2c:	7efb      	ldrb	r3, [r7, #27]
 8005b2e:	4619      	mov	r1, r3
 8005b30:	481d      	ldr	r0, [pc, #116]	; (8005ba8 <create_name+0x124>)
 8005b32:	f7ff f80e 	bl	8004b52 <chk_chr>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <create_name+0xbc>
 8005b3c:	2306      	movs	r3, #6
 8005b3e:	e02c      	b.n	8005b9a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005b40:	7efb      	ldrb	r3, [r7, #27]
 8005b42:	2b60      	cmp	r3, #96	; 0x60
 8005b44:	d905      	bls.n	8005b52 <create_name+0xce>
 8005b46:	7efb      	ldrb	r3, [r7, #27]
 8005b48:	2b7a      	cmp	r3, #122	; 0x7a
 8005b4a:	d802      	bhi.n	8005b52 <create_name+0xce>
 8005b4c:	7efb      	ldrb	r3, [r7, #27]
 8005b4e:	3b20      	subs	r3, #32
 8005b50:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	613a      	str	r2, [r7, #16]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	7efa      	ldrb	r2, [r7, #27]
 8005b5e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005b60:	e7a6      	b.n	8005ab0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005b62:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	441a      	add	r2, r3
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <create_name+0xf4>
 8005b74:	2306      	movs	r3, #6
 8005b76:	e010      	b.n	8005b9a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2be5      	cmp	r3, #229	; 0xe5
 8005b7e:	d102      	bne.n	8005b86 <create_name+0x102>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2205      	movs	r2, #5
 8005b84:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005b86:	7efb      	ldrb	r3, [r7, #27]
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	d801      	bhi.n	8005b90 <create_name+0x10c>
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	e000      	b.n	8005b92 <create_name+0x10e>
 8005b90:	2200      	movs	r2, #0
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	330b      	adds	r3, #11
 8005b96:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005b98:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3720      	adds	r7, #32
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	08007b60 	.word	0x08007b60
 8005ba8:	08007ad4 	.word	0x08007ad4

08005bac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005bc0:	e002      	b.n	8005bc8 <follow_path+0x1c>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b2f      	cmp	r3, #47	; 0x2f
 8005bce:	d0f8      	beq.n	8005bc2 <follow_path+0x16>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b5c      	cmp	r3, #92	; 0x5c
 8005bd6:	d0f4      	beq.n	8005bc2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b1f      	cmp	r3, #31
 8005be4:	d80a      	bhi.n	8005bfc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2280      	movs	r2, #128	; 0x80
 8005bea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005bee:	2100      	movs	r1, #0
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7ff fcf9 	bl	80055e8 <dir_sdi>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	75fb      	strb	r3, [r7, #23]
 8005bfa:	e043      	b.n	8005c84 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005bfc:	463b      	mov	r3, r7
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7ff ff3f 	bl	8005a84 <create_name>
 8005c06:	4603      	mov	r3, r0
 8005c08:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005c0a:	7dfb      	ldrb	r3, [r7, #23]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d134      	bne.n	8005c7a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff feaf 	bl	8005974 <dir_find>
 8005c16:	4603      	mov	r3, r0
 8005c18:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005c20:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00a      	beq.n	8005c3e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d127      	bne.n	8005c7e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005c2e:	7afb      	ldrb	r3, [r7, #11]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d122      	bne.n	8005c7e <follow_path+0xd2>
 8005c38:	2305      	movs	r3, #5
 8005c3a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005c3c:	e01f      	b.n	8005c7e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005c3e:	7afb      	ldrb	r3, [r7, #11]
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d11c      	bne.n	8005c82 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	799b      	ldrb	r3, [r3, #6]
 8005c4c:	f003 0310 	and.w	r3, r3, #16
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d102      	bne.n	8005c5a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005c54:	2305      	movs	r3, #5
 8005c56:	75fb      	strb	r3, [r7, #23]
 8005c58:	e014      	b.n	8005c84 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c68:	4413      	add	r3, r2
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f7ff fe42 	bl	80058f6 <ld_clust>
 8005c72:	4602      	mov	r2, r0
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005c78:	e7c0      	b.n	8005bfc <follow_path+0x50>
			if (res != FR_OK) break;
 8005c7a:	bf00      	nop
 8005c7c:	e002      	b.n	8005c84 <follow_path+0xd8>
				break;
 8005c7e:	bf00      	nop
 8005c80:	e000      	b.n	8005c84 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005c82:	bf00      	nop
			}
		}
	}

	return res;
 8005c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b087      	sub	sp, #28
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005c96:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d031      	beq.n	8005d08 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	e002      	b.n	8005cb2 <get_ldnumber+0x24>
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	617b      	str	r3, [r7, #20]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b20      	cmp	r3, #32
 8005cb8:	d903      	bls.n	8005cc2 <get_ldnumber+0x34>
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b3a      	cmp	r3, #58	; 0x3a
 8005cc0:	d1f4      	bne.n	8005cac <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b3a      	cmp	r3, #58	; 0x3a
 8005cc8:	d11c      	bne.n	8005d04 <get_ldnumber+0x76>
			tp = *path;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	60fa      	str	r2, [r7, #12]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	3b30      	subs	r3, #48	; 0x30
 8005cda:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2b09      	cmp	r3, #9
 8005ce0:	d80e      	bhi.n	8005d00 <get_ldnumber+0x72>
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d10a      	bne.n	8005d00 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d107      	bne.n	8005d00 <get_ldnumber+0x72>
					vol = (int)i;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	e002      	b.n	8005d0a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005d04:	2300      	movs	r3, #0
 8005d06:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005d08:	693b      	ldr	r3, [r7, #16]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
	...

08005d18 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	70da      	strb	r2, [r3, #3]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005d30:	6839      	ldr	r1, [r7, #0]
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7ff f8d8 	bl	8004ee8 <move_window>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <check_fs+0x2a>
 8005d3e:	2304      	movs	r3, #4
 8005d40:	e038      	b.n	8005db4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	3330      	adds	r3, #48	; 0x30
 8005d46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fe fe1c 	bl	8004988 <ld_word>
 8005d50:	4603      	mov	r3, r0
 8005d52:	461a      	mov	r2, r3
 8005d54:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d001      	beq.n	8005d60 <check_fs+0x48>
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e029      	b.n	8005db4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d66:	2be9      	cmp	r3, #233	; 0xe9
 8005d68:	d009      	beq.n	8005d7e <check_fs+0x66>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d70:	2beb      	cmp	r3, #235	; 0xeb
 8005d72:	d11e      	bne.n	8005db2 <check_fs+0x9a>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005d7a:	2b90      	cmp	r3, #144	; 0x90
 8005d7c:	d119      	bne.n	8005db2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3330      	adds	r3, #48	; 0x30
 8005d82:	3336      	adds	r3, #54	; 0x36
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fe fe17 	bl	80049b8 <ld_dword>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d90:	4a0a      	ldr	r2, [pc, #40]	; (8005dbc <check_fs+0xa4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d101      	bne.n	8005d9a <check_fs+0x82>
 8005d96:	2300      	movs	r3, #0
 8005d98:	e00c      	b.n	8005db4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3330      	adds	r3, #48	; 0x30
 8005d9e:	3352      	adds	r3, #82	; 0x52
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7fe fe09 	bl	80049b8 <ld_dword>
 8005da6:	4603      	mov	r3, r0
 8005da8:	4a05      	ldr	r2, [pc, #20]	; (8005dc0 <check_fs+0xa8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d101      	bne.n	8005db2 <check_fs+0x9a>
 8005dae:	2300      	movs	r3, #0
 8005db0:	e000      	b.n	8005db4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005db2:	2302      	movs	r3, #2
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3708      	adds	r7, #8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	00544146 	.word	0x00544146
 8005dc0:	33544146 	.word	0x33544146

08005dc4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b096      	sub	sp, #88	; 0x58
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f7ff ff58 	bl	8005c8e <get_ldnumber>
 8005dde:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	da01      	bge.n	8005dea <find_volume+0x26>
 8005de6:	230b      	movs	r3, #11
 8005de8:	e22d      	b.n	8006246 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005dea:	4aa1      	ldr	r2, [pc, #644]	; (8006070 <find_volume+0x2ac>)
 8005dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <find_volume+0x3a>
 8005dfa:	230c      	movs	r3, #12
 8005dfc:	e223      	b.n	8006246 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e02:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005e04:	79fb      	ldrb	r3, [r7, #7]
 8005e06:	f023 0301 	bic.w	r3, r3, #1
 8005e0a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d01a      	beq.n	8005e4a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e16:	785b      	ldrb	r3, [r3, #1]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fe fd17 	bl	800484c <disk_status>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005e24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10c      	bne.n	8005e4a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005e30:	79fb      	ldrb	r3, [r7, #7]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d007      	beq.n	8005e46 <find_volume+0x82>
 8005e36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e3a:	f003 0304 	and.w	r3, r3, #4
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005e42:	230a      	movs	r3, #10
 8005e44:	e1ff      	b.n	8006246 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8005e46:	2300      	movs	r3, #0
 8005e48:	e1fd      	b.n	8006246 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e56:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5a:	785b      	ldrb	r3, [r3, #1]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fe fd0f 	bl	8004880 <disk_initialize>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005e68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005e74:	2303      	movs	r3, #3
 8005e76:	e1e6      	b.n	8006246 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005e78:	79fb      	ldrb	r3, [r7, #7]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d007      	beq.n	8005e8e <find_volume+0xca>
 8005e7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e82:	f003 0304 	and.w	r3, r3, #4
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005e8a:	230a      	movs	r3, #10
 8005e8c:	e1db      	b.n	8006246 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005e92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e96:	f7ff ff3f 	bl	8005d18 <check_fs>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005ea0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d149      	bne.n	8005f3c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	643b      	str	r3, [r7, #64]	; 0x40
 8005eac:	e01e      	b.n	8005eec <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005ebc:	4413      	add	r3, r2
 8005ebe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d006      	beq.n	8005ed8 <find_volume+0x114>
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	3308      	adds	r3, #8
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fe fd72 	bl	80049b8 <ld_dword>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	e000      	b.n	8005eda <find_volume+0x116>
 8005ed8:	2200      	movs	r2, #0
 8005eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	3358      	adds	r3, #88	; 0x58
 8005ee0:	443b      	add	r3, r7
 8005ee2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee8:	3301      	adds	r3, #1
 8005eea:	643b      	str	r3, [r7, #64]	; 0x40
 8005eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d9dd      	bls.n	8005eae <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <find_volume+0x13e>
 8005efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005efe:	3b01      	subs	r3, #1
 8005f00:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	3358      	adds	r3, #88	; 0x58
 8005f08:	443b      	add	r3, r7
 8005f0a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005f0e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d005      	beq.n	8005f22 <find_volume+0x15e>
 8005f16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f1a:	f7ff fefd 	bl	8005d18 <check_fs>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	e000      	b.n	8005f24 <find_volume+0x160>
 8005f22:	2303      	movs	r3, #3
 8005f24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005f28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d905      	bls.n	8005f3c <find_volume+0x178>
 8005f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f32:	3301      	adds	r3, #1
 8005f34:	643b      	str	r3, [r7, #64]	; 0x40
 8005f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	d9e2      	bls.n	8005f02 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005f3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d101      	bne.n	8005f48 <find_volume+0x184>
 8005f44:	2301      	movs	r3, #1
 8005f46:	e17e      	b.n	8006246 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005f48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d901      	bls.n	8005f54 <find_volume+0x190>
 8005f50:	230d      	movs	r3, #13
 8005f52:	e178      	b.n	8006246 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f56:	3330      	adds	r3, #48	; 0x30
 8005f58:	330b      	adds	r3, #11
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe fd14 	bl	8004988 <ld_word>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f66:	d001      	beq.n	8005f6c <find_volume+0x1a8>
 8005f68:	230d      	movs	r3, #13
 8005f6a:	e16c      	b.n	8006246 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6e:	3330      	adds	r3, #48	; 0x30
 8005f70:	3316      	adds	r3, #22
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fe fd08 	bl	8004988 <ld_word>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <find_volume+0x1cc>
 8005f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f84:	3330      	adds	r3, #48	; 0x30
 8005f86:	3324      	adds	r3, #36	; 0x24
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fe fd15 	bl	80049b8 <ld_dword>
 8005f8e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f94:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f98:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa2:	789b      	ldrb	r3, [r3, #2]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d005      	beq.n	8005fb4 <find_volume+0x1f0>
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005faa:	789b      	ldrb	r3, [r3, #2]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d001      	beq.n	8005fb4 <find_volume+0x1f0>
 8005fb0:	230d      	movs	r3, #13
 8005fb2:	e148      	b.n	8006246 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb6:	789b      	ldrb	r3, [r3, #2]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fbc:	fb02 f303 	mul.w	r3, r2, r3
 8005fc0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd0:	895b      	ldrh	r3, [r3, #10]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d008      	beq.n	8005fe8 <find_volume+0x224>
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd8:	895b      	ldrh	r3, [r3, #10]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fde:	895b      	ldrh	r3, [r3, #10]
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <find_volume+0x228>
 8005fe8:	230d      	movs	r3, #13
 8005fea:	e12c      	b.n	8006246 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fee:	3330      	adds	r3, #48	; 0x30
 8005ff0:	3311      	adds	r3, #17
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fe fcc8 	bl	8004988 <ld_word>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006002:	891b      	ldrh	r3, [r3, #8]
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	b29b      	uxth	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <find_volume+0x24e>
 800600e:	230d      	movs	r3, #13
 8006010:	e119      	b.n	8006246 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006014:	3330      	adds	r3, #48	; 0x30
 8006016:	3313      	adds	r3, #19
 8006018:	4618      	mov	r0, r3
 800601a:	f7fe fcb5 	bl	8004988 <ld_word>
 800601e:	4603      	mov	r3, r0
 8006020:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006024:	2b00      	cmp	r3, #0
 8006026:	d106      	bne.n	8006036 <find_volume+0x272>
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	3330      	adds	r3, #48	; 0x30
 800602c:	3320      	adds	r3, #32
 800602e:	4618      	mov	r0, r3
 8006030:	f7fe fcc2 	bl	80049b8 <ld_dword>
 8006034:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006038:	3330      	adds	r3, #48	; 0x30
 800603a:	330e      	adds	r3, #14
 800603c:	4618      	mov	r0, r3
 800603e:	f7fe fca3 	bl	8004988 <ld_word>
 8006042:	4603      	mov	r3, r0
 8006044:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006046:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <find_volume+0x28c>
 800604c:	230d      	movs	r3, #13
 800604e:	e0fa      	b.n	8006246 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006050:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006054:	4413      	add	r3, r2
 8006056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006058:	8912      	ldrh	r2, [r2, #8]
 800605a:	0912      	lsrs	r2, r2, #4
 800605c:	b292      	uxth	r2, r2
 800605e:	4413      	add	r3, r2
 8006060:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006066:	429a      	cmp	r2, r3
 8006068:	d204      	bcs.n	8006074 <find_volume+0x2b0>
 800606a:	230d      	movs	r3, #13
 800606c:	e0eb      	b.n	8006246 <find_volume+0x482>
 800606e:	bf00      	nop
 8006070:	200002a8 	.word	0x200002a8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800607c:	8952      	ldrh	r2, [r2, #10]
 800607e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <find_volume+0x2ca>
 800608a:	230d      	movs	r3, #13
 800608c:	e0db      	b.n	8006246 <find_volume+0x482>
		fmt = FS_FAT32;
 800608e:	2303      	movs	r3, #3
 8006090:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800609a:	4293      	cmp	r3, r2
 800609c:	d802      	bhi.n	80060a4 <find_volume+0x2e0>
 800609e:	2302      	movs	r3, #2
 80060a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d802      	bhi.n	80060b4 <find_volume+0x2f0>
 80060ae:	2301      	movs	r3, #1
 80060b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	1c9a      	adds	r2, r3, #2
 80060b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ba:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80060bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80060c0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80060c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80060c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060c6:	441a      	add	r2, r3
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80060cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	441a      	add	r2, r3
 80060d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d4:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80060d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d11e      	bne.n	800611c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	3330      	adds	r3, #48	; 0x30
 80060e2:	332a      	adds	r3, #42	; 0x2a
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fe fc4f 	bl	8004988 <ld_word>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <find_volume+0x330>
 80060f0:	230d      	movs	r3, #13
 80060f2:	e0a8      	b.n	8006246 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80060f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f6:	891b      	ldrh	r3, [r3, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <find_volume+0x33c>
 80060fc:	230d      	movs	r3, #13
 80060fe:	e0a2      	b.n	8006246 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006102:	3330      	adds	r3, #48	; 0x30
 8006104:	332c      	adds	r3, #44	; 0x2c
 8006106:	4618      	mov	r0, r3
 8006108:	f7fe fc56 	bl	80049b8 <ld_dword>
 800610c:	4602      	mov	r2, r0
 800610e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006110:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	647b      	str	r3, [r7, #68]	; 0x44
 800611a:	e01f      	b.n	800615c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800611c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611e:	891b      	ldrh	r3, [r3, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <find_volume+0x364>
 8006124:	230d      	movs	r3, #13
 8006126:	e08e      	b.n	8006246 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612a:	6a1a      	ldr	r2, [r3, #32]
 800612c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800612e:	441a      	add	r2, r3
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006134:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006138:	2b02      	cmp	r3, #2
 800613a:	d103      	bne.n	8006144 <find_volume+0x380>
 800613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	e00a      	b.n	800615a <find_volume+0x396>
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	695a      	ldr	r2, [r3, #20]
 8006148:	4613      	mov	r3, r2
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	4413      	add	r3, r2
 800614e:	085a      	lsrs	r2, r3, #1
 8006150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800615a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615e:	699a      	ldr	r2, [r3, #24]
 8006160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006162:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006166:	0a5b      	lsrs	r3, r3, #9
 8006168:	429a      	cmp	r2, r3
 800616a:	d201      	bcs.n	8006170 <find_volume+0x3ac>
 800616c:	230d      	movs	r3, #13
 800616e:	e06a      	b.n	8006246 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006172:	f04f 32ff 	mov.w	r2, #4294967295
 8006176:	611a      	str	r2, [r3, #16]
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006182:	2280      	movs	r2, #128	; 0x80
 8006184:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006186:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800618a:	2b03      	cmp	r3, #3
 800618c:	d149      	bne.n	8006222 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800618e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006190:	3330      	adds	r3, #48	; 0x30
 8006192:	3330      	adds	r3, #48	; 0x30
 8006194:	4618      	mov	r0, r3
 8006196:	f7fe fbf7 	bl	8004988 <ld_word>
 800619a:	4603      	mov	r3, r0
 800619c:	2b01      	cmp	r3, #1
 800619e:	d140      	bne.n	8006222 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80061a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061a2:	3301      	adds	r3, #1
 80061a4:	4619      	mov	r1, r3
 80061a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061a8:	f7fe fe9e 	bl	8004ee8 <move_window>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d137      	bne.n	8006222 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80061b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b4:	2200      	movs	r2, #0
 80061b6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	3330      	adds	r3, #48	; 0x30
 80061bc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fe fbe1 	bl	8004988 <ld_word>
 80061c6:	4603      	mov	r3, r0
 80061c8:	461a      	mov	r2, r3
 80061ca:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d127      	bne.n	8006222 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80061d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d4:	3330      	adds	r3, #48	; 0x30
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7fe fbee 	bl	80049b8 <ld_dword>
 80061dc:	4603      	mov	r3, r0
 80061de:	4a1c      	ldr	r2, [pc, #112]	; (8006250 <find_volume+0x48c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d11e      	bne.n	8006222 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80061e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e6:	3330      	adds	r3, #48	; 0x30
 80061e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fe fbe3 	bl	80049b8 <ld_dword>
 80061f2:	4603      	mov	r3, r0
 80061f4:	4a17      	ldr	r2, [pc, #92]	; (8006254 <find_volume+0x490>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d113      	bne.n	8006222 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80061fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fc:	3330      	adds	r3, #48	; 0x30
 80061fe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006202:	4618      	mov	r0, r3
 8006204:	f7fe fbd8 	bl	80049b8 <ld_dword>
 8006208:	4602      	mov	r2, r0
 800620a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800620e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006210:	3330      	adds	r3, #48	; 0x30
 8006212:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006216:	4618      	mov	r0, r3
 8006218:	f7fe fbce 	bl	80049b8 <ld_dword>
 800621c:	4602      	mov	r2, r0
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006224:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006228:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800622a:	4b0b      	ldr	r3, [pc, #44]	; (8006258 <find_volume+0x494>)
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	3301      	adds	r3, #1
 8006230:	b29a      	uxth	r2, r3
 8006232:	4b09      	ldr	r3, [pc, #36]	; (8006258 <find_volume+0x494>)
 8006234:	801a      	strh	r2, [r3, #0]
 8006236:	4b08      	ldr	r3, [pc, #32]	; (8006258 <find_volume+0x494>)
 8006238:	881a      	ldrh	r2, [r3, #0]
 800623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800623e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006240:	f7fe fdea 	bl	8004e18 <clear_lock>
#endif
	return FR_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3758      	adds	r7, #88	; 0x58
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	41615252 	.word	0x41615252
 8006254:	61417272 	.word	0x61417272
 8006258:	200002ac 	.word	0x200002ac

0800625c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006266:	2309      	movs	r3, #9
 8006268:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01c      	beq.n	80062aa <validate+0x4e>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d018      	beq.n	80062aa <validate+0x4e>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d013      	beq.n	80062aa <validate+0x4e>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	889a      	ldrh	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	88db      	ldrh	r3, [r3, #6]
 800628c:	429a      	cmp	r2, r3
 800628e:	d10c      	bne.n	80062aa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	785b      	ldrb	r3, [r3, #1]
 8006296:	4618      	mov	r0, r3
 8006298:	f7fe fad8 	bl	800484c <disk_status>
 800629c:	4603      	mov	r3, r0
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <validate+0x4e>
			res = FR_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d102      	bne.n	80062b6 <validate+0x5a>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	e000      	b.n	80062b8 <validate+0x5c>
 80062b6:	2300      	movs	r3, #0
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	6013      	str	r3, [r2, #0]
	return res;
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	4613      	mov	r3, r2
 80062d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80062da:	f107 0310 	add.w	r3, r7, #16
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff fcd5 	bl	8005c8e <get_ldnumber>
 80062e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	da01      	bge.n	80062f0 <f_mount+0x28>
 80062ec:	230b      	movs	r3, #11
 80062ee:	e02b      	b.n	8006348 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80062f0:	4a17      	ldr	r2, [pc, #92]	; (8006350 <f_mount+0x88>)
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d005      	beq.n	800630c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006300:	69b8      	ldr	r0, [r7, #24]
 8006302:	f7fe fd89 	bl	8004e18 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	2200      	movs	r2, #0
 800630a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	490d      	ldr	r1, [pc, #52]	; (8006350 <f_mount+0x88>)
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d002      	beq.n	800632e <f_mount+0x66>
 8006328:	79fb      	ldrb	r3, [r7, #7]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d001      	beq.n	8006332 <f_mount+0x6a>
 800632e:	2300      	movs	r3, #0
 8006330:	e00a      	b.n	8006348 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006332:	f107 010c 	add.w	r1, r7, #12
 8006336:	f107 0308 	add.w	r3, r7, #8
 800633a:	2200      	movs	r2, #0
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff fd41 	bl	8005dc4 <find_volume>
 8006342:	4603      	mov	r3, r0
 8006344:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006346:	7dfb      	ldrb	r3, [r7, #23]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3720      	adds	r7, #32
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	200002a8 	.word	0x200002a8

08006354 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b098      	sub	sp, #96	; 0x60
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	4613      	mov	r3, r2
 8006360:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <f_open+0x18>
 8006368:	2309      	movs	r3, #9
 800636a:	e1ad      	b.n	80066c8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800636c:	79fb      	ldrb	r3, [r7, #7]
 800636e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006372:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006374:	79fa      	ldrb	r2, [r7, #7]
 8006376:	f107 0110 	add.w	r1, r7, #16
 800637a:	f107 0308 	add.w	r3, r7, #8
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff fd20 	bl	8005dc4 <find_volume>
 8006384:	4603      	mov	r3, r0
 8006386:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800638a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800638e:	2b00      	cmp	r3, #0
 8006390:	f040 8191 	bne.w	80066b6 <f_open+0x362>
		dj.obj.fs = fs;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	f107 0314 	add.w	r3, r7, #20
 800639e:	4611      	mov	r1, r2
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff fc03 	bl	8005bac <follow_path>
 80063a6:	4603      	mov	r3, r0
 80063a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80063ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d11a      	bne.n	80063ea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80063b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80063b8:	b25b      	sxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	da03      	bge.n	80063c6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80063be:	2306      	movs	r3, #6
 80063c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80063c4:	e011      	b.n	80063ea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	f023 0301 	bic.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	bf14      	ite	ne
 80063d0:	2301      	movne	r3, #1
 80063d2:	2300      	moveq	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	f107 0314 	add.w	r3, r7, #20
 80063dc:	4611      	mov	r1, r2
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe fbd2 	bl	8004b88 <chk_lock>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80063ea:	79fb      	ldrb	r3, [r7, #7]
 80063ec:	f003 031c 	and.w	r3, r3, #28
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d07f      	beq.n	80064f4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80063f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d017      	beq.n	800642c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80063fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006400:	2b04      	cmp	r3, #4
 8006402:	d10e      	bne.n	8006422 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006404:	f7fe fc1c 	bl	8004c40 <enq_lock>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d006      	beq.n	800641c <f_open+0xc8>
 800640e:	f107 0314 	add.w	r3, r7, #20
 8006412:	4618      	mov	r0, r3
 8006414:	f7ff fb03 	bl	8005a1e <dir_register>
 8006418:	4603      	mov	r3, r0
 800641a:	e000      	b.n	800641e <f_open+0xca>
 800641c:	2312      	movs	r3, #18
 800641e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006422:	79fb      	ldrb	r3, [r7, #7]
 8006424:	f043 0308 	orr.w	r3, r3, #8
 8006428:	71fb      	strb	r3, [r7, #7]
 800642a:	e010      	b.n	800644e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800642c:	7ebb      	ldrb	r3, [r7, #26]
 800642e:	f003 0311 	and.w	r3, r3, #17
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <f_open+0xea>
					res = FR_DENIED;
 8006436:	2307      	movs	r3, #7
 8006438:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800643c:	e007      	b.n	800644e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800643e:	79fb      	ldrb	r3, [r7, #7]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <f_open+0xfa>
 8006448:	2308      	movs	r3, #8
 800644a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800644e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006452:	2b00      	cmp	r3, #0
 8006454:	d168      	bne.n	8006528 <f_open+0x1d4>
 8006456:	79fb      	ldrb	r3, [r7, #7]
 8006458:	f003 0308 	and.w	r3, r3, #8
 800645c:	2b00      	cmp	r3, #0
 800645e:	d063      	beq.n	8006528 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006460:	f7fd fcb6 	bl	8003dd0 <get_fattime>
 8006464:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006468:	330e      	adds	r3, #14
 800646a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800646c:	4618      	mov	r0, r3
 800646e:	f7fe fae1 	bl	8004a34 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006474:	3316      	adds	r3, #22
 8006476:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006478:	4618      	mov	r0, r3
 800647a:	f7fe fadb 	bl	8004a34 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800647e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006480:	330b      	adds	r3, #11
 8006482:	2220      	movs	r2, #32
 8006484:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800648a:	4611      	mov	r1, r2
 800648c:	4618      	mov	r0, r3
 800648e:	f7ff fa32 	bl	80058f6 <ld_clust>
 8006492:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006498:	2200      	movs	r2, #0
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff fa4a 	bl	8005934 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80064a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a2:	331c      	adds	r3, #28
 80064a4:	2100      	movs	r1, #0
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fe fac4 	bl	8004a34 <st_dword>
					fs->wflag = 1;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	2201      	movs	r2, #1
 80064b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80064b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d037      	beq.n	8006528 <f_open+0x1d4>
						dw = fs->winsect;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80064be:	f107 0314 	add.w	r3, r7, #20
 80064c2:	2200      	movs	r2, #0
 80064c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe ff5d 	bl	8005386 <remove_chain>
 80064cc:	4603      	mov	r3, r0
 80064ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80064d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d126      	bne.n	8006528 <f_open+0x1d4>
							res = move_window(fs, dw);
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe fd02 	bl	8004ee8 <move_window>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064ee:	3a01      	subs	r2, #1
 80064f0:	60da      	str	r2, [r3, #12]
 80064f2:	e019      	b.n	8006528 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80064f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d115      	bne.n	8006528 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80064fc:	7ebb      	ldrb	r3, [r7, #26]
 80064fe:	f003 0310 	and.w	r3, r3, #16
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <f_open+0x1ba>
					res = FR_NO_FILE;
 8006506:	2304      	movs	r3, #4
 8006508:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800650c:	e00c      	b.n	8006528 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800650e:	79fb      	ldrb	r3, [r7, #7]
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d007      	beq.n	8006528 <f_open+0x1d4>
 8006518:	7ebb      	ldrb	r3, [r7, #26]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <f_open+0x1d4>
						res = FR_DENIED;
 8006522:	2307      	movs	r3, #7
 8006524:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006528:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800652c:	2b00      	cmp	r3, #0
 800652e:	d128      	bne.n	8006582 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006530:	79fb      	ldrb	r3, [r7, #7]
 8006532:	f003 0308 	and.w	r3, r3, #8
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006540:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800654a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	f023 0301 	bic.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	bf14      	ite	ne
 800655a:	2301      	movne	r3, #1
 800655c:	2300      	moveq	r3, #0
 800655e:	b2db      	uxtb	r3, r3
 8006560:	461a      	mov	r2, r3
 8006562:	f107 0314 	add.w	r3, r7, #20
 8006566:	4611      	mov	r1, r2
 8006568:	4618      	mov	r0, r3
 800656a:	f7fe fb8b 	bl	8004c84 <inc_lock>
 800656e:	4602      	mov	r2, r0
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d102      	bne.n	8006582 <f_open+0x22e>
 800657c:	2302      	movs	r3, #2
 800657e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006582:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006586:	2b00      	cmp	r3, #0
 8006588:	f040 8095 	bne.w	80066b6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006590:	4611      	mov	r1, r2
 8006592:	4618      	mov	r0, r3
 8006594:	f7ff f9af 	bl	80058f6 <ld_clust>
 8006598:	4602      	mov	r2, r0
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800659e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a0:	331c      	adds	r3, #28
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe fa08 	bl	80049b8 <ld_dword>
 80065a8:	4602      	mov	r2, r0
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	88da      	ldrh	r2, [r3, #6]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	79fa      	ldrb	r2, [r7, #7]
 80065c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3330      	adds	r3, #48	; 0x30
 80065de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065e2:	2100      	movs	r1, #0
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fe fa72 	bl	8004ace <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80065ea:	79fb      	ldrb	r3, [r7, #7]
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d060      	beq.n	80066b6 <f_open+0x362>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d05c      	beq.n	80066b6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	895b      	ldrh	r3, [r3, #10]
 8006608:	025b      	lsls	r3, r3, #9
 800660a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	657b      	str	r3, [r7, #84]	; 0x54
 8006618:	e016      	b.n	8006648 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800661e:	4618      	mov	r0, r3
 8006620:	f7fe fd1d 	bl	800505e <get_fat>
 8006624:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006628:	2b01      	cmp	r3, #1
 800662a:	d802      	bhi.n	8006632 <f_open+0x2de>
 800662c:	2302      	movs	r3, #2
 800662e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006638:	d102      	bne.n	8006640 <f_open+0x2ec>
 800663a:	2301      	movs	r3, #1
 800663c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006640:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	657b      	str	r3, [r7, #84]	; 0x54
 8006648:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800664c:	2b00      	cmp	r3, #0
 800664e:	d103      	bne.n	8006658 <f_open+0x304>
 8006650:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006654:	429a      	cmp	r2, r3
 8006656:	d8e0      	bhi.n	800661a <f_open+0x2c6>
				}
				fp->clust = clst;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800665c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800665e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006662:	2b00      	cmp	r3, #0
 8006664:	d127      	bne.n	80066b6 <f_open+0x362>
 8006666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800666c:	2b00      	cmp	r3, #0
 800666e:	d022      	beq.n	80066b6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006674:	4618      	mov	r0, r3
 8006676:	f7fe fcd3 	bl	8005020 <clust2sect>
 800667a:	6478      	str	r0, [r7, #68]	; 0x44
 800667c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800667e:	2b00      	cmp	r3, #0
 8006680:	d103      	bne.n	800668a <f_open+0x336>
						res = FR_INT_ERR;
 8006682:	2302      	movs	r3, #2
 8006684:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006688:	e015      	b.n	80066b6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800668a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800668c:	0a5a      	lsrs	r2, r3, #9
 800668e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006690:	441a      	add	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	7858      	ldrb	r0, [r3, #1]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a1a      	ldr	r2, [r3, #32]
 80066a4:	2301      	movs	r3, #1
 80066a6:	f7fe f911 	bl	80048cc <disk_read>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <f_open+0x362>
 80066b0:	2301      	movs	r3, #1
 80066b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80066b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <f_open+0x370>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80066c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3760      	adds	r7, #96	; 0x60
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08e      	sub	sp, #56	; 0x38
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
 80066dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2200      	movs	r2, #0
 80066e6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f107 0214 	add.w	r2, r7, #20
 80066ee:	4611      	mov	r1, r2
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7ff fdb3 	bl	800625c <validate>
 80066f6:	4603      	mov	r3, r0
 80066f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80066fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006700:	2b00      	cmp	r3, #0
 8006702:	d107      	bne.n	8006714 <f_read+0x44>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	7d5b      	ldrb	r3, [r3, #21]
 8006708:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800670c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <f_read+0x4a>
 8006714:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006718:	e115      	b.n	8006946 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	7d1b      	ldrb	r3, [r3, #20]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <f_read+0x5a>
 8006726:	2307      	movs	r3, #7
 8006728:	e10d      	b.n	8006946 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	6a3b      	ldr	r3, [r7, #32]
 800673a:	429a      	cmp	r2, r3
 800673c:	f240 80fe 	bls.w	800693c <f_read+0x26c>
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006744:	e0fa      	b.n	800693c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800674e:	2b00      	cmp	r3, #0
 8006750:	f040 80c6 	bne.w	80068e0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	0a5b      	lsrs	r3, r3, #9
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	8952      	ldrh	r2, [r2, #10]
 800675e:	3a01      	subs	r2, #1
 8006760:	4013      	ands	r3, r2
 8006762:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d12f      	bne.n	80067ca <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d103      	bne.n	800677a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	633b      	str	r3, [r7, #48]	; 0x30
 8006778:	e013      	b.n	80067a2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677e:	2b00      	cmp	r3, #0
 8006780:	d007      	beq.n	8006792 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	4619      	mov	r1, r3
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7fe fef9 	bl	8005580 <clmt_clust>
 800678e:	6338      	str	r0, [r7, #48]	; 0x30
 8006790:	e007      	b.n	80067a2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	4619      	mov	r1, r3
 800679a:	4610      	mov	r0, r2
 800679c:	f7fe fc5f 	bl	800505e <get_fat>
 80067a0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d804      	bhi.n	80067b2 <f_read+0xe2>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2202      	movs	r2, #2
 80067ac:	755a      	strb	r2, [r3, #21]
 80067ae:	2302      	movs	r3, #2
 80067b0:	e0c9      	b.n	8006946 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b8:	d104      	bne.n	80067c4 <f_read+0xf4>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	755a      	strb	r2, [r3, #21]
 80067c0:	2301      	movs	r3, #1
 80067c2:	e0c0      	b.n	8006946 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	4619      	mov	r1, r3
 80067d2:	4610      	mov	r0, r2
 80067d4:	f7fe fc24 	bl	8005020 <clust2sect>
 80067d8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d104      	bne.n	80067ea <f_read+0x11a>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2202      	movs	r2, #2
 80067e4:	755a      	strb	r2, [r3, #21]
 80067e6:	2302      	movs	r3, #2
 80067e8:	e0ad      	b.n	8006946 <f_read+0x276>
			sect += csect;
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	4413      	add	r3, r2
 80067f0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	0a5b      	lsrs	r3, r3, #9
 80067f6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80067f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d039      	beq.n	8006872 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80067fe:	69fa      	ldr	r2, [r7, #28]
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	4413      	add	r3, r2
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	8952      	ldrh	r2, [r2, #10]
 8006808:	4293      	cmp	r3, r2
 800680a:	d905      	bls.n	8006818 <f_read+0x148>
					cc = fs->csize - csect;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	895b      	ldrh	r3, [r3, #10]
 8006810:	461a      	mov	r2, r3
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	7858      	ldrb	r0, [r3, #1]
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006822:	f7fe f853 	bl	80048cc <disk_read>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d004      	beq.n	8006836 <f_read+0x166>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2201      	movs	r2, #1
 8006830:	755a      	strb	r2, [r3, #21]
 8006832:	2301      	movs	r3, #1
 8006834:	e087      	b.n	8006946 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	7d1b      	ldrb	r3, [r3, #20]
 800683a:	b25b      	sxtb	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	da14      	bge.n	800686a <f_read+0x19a>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a1a      	ldr	r2, [r3, #32]
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800684a:	429a      	cmp	r2, r3
 800684c:	d90d      	bls.n	800686a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a1a      	ldr	r2, [r3, #32]
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	025b      	lsls	r3, r3, #9
 8006858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800685a:	18d0      	adds	r0, r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3330      	adds	r3, #48	; 0x30
 8006860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006864:	4619      	mov	r1, r3
 8006866:	f7fe f911 	bl	8004a8c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	025b      	lsls	r3, r3, #9
 800686e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006870:	e050      	b.n	8006914 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	429a      	cmp	r2, r3
 800687a:	d02e      	beq.n	80068da <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	7d1b      	ldrb	r3, [r3, #20]
 8006880:	b25b      	sxtb	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	da18      	bge.n	80068b8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	7858      	ldrb	r0, [r3, #1]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a1a      	ldr	r2, [r3, #32]
 8006894:	2301      	movs	r3, #1
 8006896:	f7fe f839 	bl	800490c <disk_write>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d004      	beq.n	80068aa <f_read+0x1da>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2201      	movs	r2, #1
 80068a4:	755a      	strb	r2, [r3, #21]
 80068a6:	2301      	movs	r3, #1
 80068a8:	e04d      	b.n	8006946 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	7d1b      	ldrb	r3, [r3, #20]
 80068ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	7858      	ldrb	r0, [r3, #1]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80068c2:	2301      	movs	r3, #1
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	f7fe f801 	bl	80048cc <disk_read>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d004      	beq.n	80068da <f_read+0x20a>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2201      	movs	r2, #1
 80068d4:	755a      	strb	r2, [r3, #21]
 80068d6:	2301      	movs	r3, #1
 80068d8:	e035      	b.n	8006946 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80068ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80068ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d901      	bls.n	80068fa <f_read+0x22a>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006908:	4413      	add	r3, r2
 800690a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800690c:	4619      	mov	r1, r3
 800690e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006910:	f7fe f8bc 	bl	8004a8c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006918:	4413      	add	r3, r2
 800691a:	627b      	str	r3, [r7, #36]	; 0x24
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	699a      	ldr	r2, [r3, #24]
 8006920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006922:	441a      	add	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	619a      	str	r2, [r3, #24]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	441a      	add	r2, r3
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	f47f af01 	bne.w	8006746 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3738      	adds	r7, #56	; 0x38
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b08c      	sub	sp, #48	; 0x30
 8006952:	af00      	add	r7, sp, #0
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	607a      	str	r2, [r7, #4]
 800695a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2200      	movs	r2, #0
 8006964:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f107 0210 	add.w	r2, r7, #16
 800696c:	4611      	mov	r1, r2
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff fc74 	bl	800625c <validate>
 8006974:	4603      	mov	r3, r0
 8006976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800697a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800697e:	2b00      	cmp	r3, #0
 8006980:	d107      	bne.n	8006992 <f_write+0x44>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	7d5b      	ldrb	r3, [r3, #21]
 8006986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800698a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <f_write+0x4a>
 8006992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006996:	e14b      	b.n	8006c30 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	7d1b      	ldrb	r3, [r3, #20]
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <f_write+0x5a>
 80069a4:	2307      	movs	r3, #7
 80069a6:	e143      	b.n	8006c30 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	699a      	ldr	r2, [r3, #24]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	441a      	add	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	f080 812d 	bcs.w	8006c14 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	43db      	mvns	r3, r3
 80069c0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80069c2:	e127      	b.n	8006c14 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f040 80e3 	bne.w	8006b98 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	0a5b      	lsrs	r3, r3, #9
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	8952      	ldrh	r2, [r2, #10]
 80069dc:	3a01      	subs	r2, #1
 80069de:	4013      	ands	r3, r2
 80069e0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d143      	bne.n	8006a70 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10c      	bne.n	8006a0a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d11a      	bne.n	8006a32 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2100      	movs	r1, #0
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fe fd25 	bl	8005450 <create_chain>
 8006a06:	62b8      	str	r0, [r7, #40]	; 0x28
 8006a08:	e013      	b.n	8006a32 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d007      	beq.n	8006a22 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	4619      	mov	r1, r3
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f7fe fdb1 	bl	8005580 <clmt_clust>
 8006a1e:	62b8      	str	r0, [r7, #40]	; 0x28
 8006a20:	e007      	b.n	8006a32 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	4619      	mov	r1, r3
 8006a2a:	4610      	mov	r0, r2
 8006a2c:	f7fe fd10 	bl	8005450 <create_chain>
 8006a30:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 80f2 	beq.w	8006c1e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d104      	bne.n	8006a4a <f_write+0xfc>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2202      	movs	r2, #2
 8006a44:	755a      	strb	r2, [r3, #21]
 8006a46:	2302      	movs	r3, #2
 8006a48:	e0f2      	b.n	8006c30 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a50:	d104      	bne.n	8006a5c <f_write+0x10e>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	755a      	strb	r2, [r3, #21]
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e0e9      	b.n	8006c30 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a60:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d102      	bne.n	8006a70 <f_write+0x122>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a6e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	7d1b      	ldrb	r3, [r3, #20]
 8006a74:	b25b      	sxtb	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	da18      	bge.n	8006aac <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	7858      	ldrb	r0, [r3, #1]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a1a      	ldr	r2, [r3, #32]
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f7fd ff3f 	bl	800490c <disk_write>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d004      	beq.n	8006a9e <f_write+0x150>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	755a      	strb	r2, [r3, #21]
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e0c8      	b.n	8006c30 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	7d1b      	ldrb	r3, [r3, #20]
 8006aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	f7fe fab3 	bl	8005020 <clust2sect>
 8006aba:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d104      	bne.n	8006acc <f_write+0x17e>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	755a      	strb	r2, [r3, #21]
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e0b1      	b.n	8006c30 <f_write+0x2e2>
			sect += csect;
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	0a5b      	lsrs	r3, r3, #9
 8006ad8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d03c      	beq.n	8006b5a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	8952      	ldrh	r2, [r2, #10]
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d905      	bls.n	8006afa <f_write+0x1ac>
					cc = fs->csize - csect;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	895b      	ldrh	r3, [r3, #10]
 8006af2:	461a      	mov	r2, r3
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	7858      	ldrb	r0, [r3, #1]
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	69f9      	ldr	r1, [r7, #28]
 8006b04:	f7fd ff02 	bl	800490c <disk_write>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d004      	beq.n	8006b18 <f_write+0x1ca>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2201      	movs	r2, #1
 8006b12:	755a      	strb	r2, [r3, #21]
 8006b14:	2301      	movs	r3, #1
 8006b16:	e08b      	b.n	8006c30 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a1a      	ldr	r2, [r3, #32]
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	6a3a      	ldr	r2, [r7, #32]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d915      	bls.n	8006b52 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a1a      	ldr	r2, [r3, #32]
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	025b      	lsls	r3, r3, #9
 8006b36:	69fa      	ldr	r2, [r7, #28]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b3e:	4619      	mov	r1, r3
 8006b40:	f7fd ffa4 	bl	8004a8c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	7d1b      	ldrb	r3, [r3, #20]
 8006b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	025b      	lsls	r3, r3, #9
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006b58:	e03f      	b.n	8006bda <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d016      	beq.n	8006b92 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	699a      	ldr	r2, [r3, #24]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d210      	bcs.n	8006b92 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	7858      	ldrb	r0, [r3, #1]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	f7fd fea5 	bl	80048cc <disk_read>
 8006b82:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d004      	beq.n	8006b92 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	755a      	strb	r2, [r3, #21]
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e04e      	b.n	8006c30 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d901      	bls.n	8006bb2 <f_write+0x264>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc0:	4413      	add	r3, r2
 8006bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc4:	69f9      	ldr	r1, [r7, #28]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fd ff60 	bl	8004a8c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	7d1b      	ldrb	r3, [r3, #20]
 8006bd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006bda:	69fa      	ldr	r2, [r7, #28]
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	4413      	add	r3, r2
 8006be0:	61fb      	str	r3, [r7, #28]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	699a      	ldr	r2, [r3, #24]
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be8:	441a      	add	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	619a      	str	r2, [r3, #24]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	68da      	ldr	r2, [r3, #12]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	bf38      	it	cc
 8006bfa:	461a      	movcc	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	60da      	str	r2, [r3, #12]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	441a      	add	r2, r3
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f47f aed4 	bne.w	80069c4 <f_write+0x76>
 8006c1c:	e000      	b.n	8006c20 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006c1e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	7d1b      	ldrb	r3, [r3, #20]
 8006c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3730      	adds	r7, #48	; 0x30
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f107 0208 	add.w	r2, r7, #8
 8006c46:	4611      	mov	r1, r2
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7ff fb07 	bl	800625c <validate>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d168      	bne.n	8006d2a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	7d1b      	ldrb	r3, [r3, #20]
 8006c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d062      	beq.n	8006d2a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	7d1b      	ldrb	r3, [r3, #20]
 8006c68:	b25b      	sxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	da15      	bge.n	8006c9a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	7858      	ldrb	r0, [r3, #1]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a1a      	ldr	r2, [r3, #32]
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	f7fd fe45 	bl	800490c <disk_write>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d001      	beq.n	8006c8c <f_sync+0x54>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e04f      	b.n	8006d2c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	7d1b      	ldrb	r3, [r3, #20]
 8006c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006c9a:	f7fd f899 	bl	8003dd0 <get_fattime>
 8006c9e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4610      	mov	r0, r2
 8006caa:	f7fe f91d 	bl	8004ee8 <move_window>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d138      	bne.n	8006d2a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	330b      	adds	r3, #11
 8006cc2:	781a      	ldrb	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	330b      	adds	r3, #11
 8006cc8:	f042 0220 	orr.w	r2, r2, #32
 8006ccc:	b2d2      	uxtb	r2, r2
 8006cce:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6818      	ldr	r0, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	68f9      	ldr	r1, [r7, #12]
 8006cdc:	f7fe fe2a 	bl	8005934 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f103 021c 	add.w	r2, r3, #28
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	4619      	mov	r1, r3
 8006cec:	4610      	mov	r0, r2
 8006cee:	f7fd fea1 	bl	8004a34 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3316      	adds	r3, #22
 8006cf6:	6939      	ldr	r1, [r7, #16]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fd fe9b 	bl	8004a34 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3312      	adds	r3, #18
 8006d02:	2100      	movs	r1, #0
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7fd fe7a 	bl	80049fe <st_word>
					fs->wflag = 1;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fe f916 	bl	8004f44 <sync_fs>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	7d1b      	ldrb	r3, [r3, #20]
 8006d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3718      	adds	r7, #24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7ff ff7b 	bl	8006c38 <f_sync>
 8006d42:	4603      	mov	r3, r0
 8006d44:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d118      	bne.n	8006d7e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f107 0208 	add.w	r2, r7, #8
 8006d52:	4611      	mov	r1, r2
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff fa81 	bl	800625c <validate>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10c      	bne.n	8006d7e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fe f819 	bl	8004da0 <dec_lock>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d102      	bne.n	8006d7e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b092      	sub	sp, #72	; 0x48
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006d94:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006d98:	f107 030c 	add.w	r3, r7, #12
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff f810 	bl	8005dc4 <find_volume>
 8006da4:	4603      	mov	r3, r0
 8006da6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8006daa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f040 8099 	bne.w	8006ee6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbc:	691a      	ldr	r2, [r3, #16]
 8006dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	3b02      	subs	r3, #2
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d804      	bhi.n	8006dd2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	691a      	ldr	r2, [r3, #16]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	e089      	b.n	8006ee6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d128      	bne.n	8006e30 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006dde:	2302      	movs	r3, #2
 8006de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006de6:	f107 0314 	add.w	r3, r7, #20
 8006dea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fe f936 	bl	800505e <get_fat>
 8006df2:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfa:	d103      	bne.n	8006e04 <f_getfree+0x7c>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006e02:	e063      	b.n	8006ecc <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d103      	bne.n	8006e12 <f_getfree+0x8a>
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006e10:	e05c      	b.n	8006ecc <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d102      	bne.n	8006e1e <f_getfree+0x96>
 8006e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8006e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e20:	3301      	adds	r3, #1
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d3db      	bcc.n	8006de6 <f_getfree+0x5e>
 8006e2e:	e04d      	b.n	8006ecc <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e40:	2300      	movs	r3, #0
 8006e42:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8006e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d113      	bne.n	8006e72 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	63ba      	str	r2, [r7, #56]	; 0x38
 8006e52:	4619      	mov	r1, r3
 8006e54:	f7fe f848 	bl	8004ee8 <move_window>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8006e5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d131      	bne.n	8006eca <f_getfree+0x142>
							p = fs->win;
 8006e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e68:	3330      	adds	r3, #48	; 0x30
 8006e6a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8006e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e70:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d10f      	bne.n	8006e9a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006e7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e7c:	f7fd fd84 	bl	8004988 <ld_word>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d102      	bne.n	8006e8c <f_getfree+0x104>
 8006e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e88:	3301      	adds	r3, #1
 8006e8a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	3302      	adds	r3, #2
 8006e90:	633b      	str	r3, [r7, #48]	; 0x30
 8006e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e94:	3b02      	subs	r3, #2
 8006e96:	637b      	str	r3, [r7, #52]	; 0x34
 8006e98:	e010      	b.n	8006ebc <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006e9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e9c:	f7fd fd8c 	bl	80049b8 <ld_dword>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d102      	bne.n	8006eb0 <f_getfree+0x128>
 8006eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eac:	3301      	adds	r3, #1
 8006eae:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	633b      	str	r3, [r7, #48]	; 0x30
 8006eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb8:	3b04      	subs	r3, #4
 8006eba:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8006ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1bd      	bne.n	8006e44 <f_getfree+0xbc>
 8006ec8:	e000      	b.n	8006ecc <f_getfree+0x144>
							if (res != FR_OK) break;
 8006eca:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ed0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ed6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eda:	791a      	ldrb	r2, [r3, #4]
 8006edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ede:	f042 0201 	orr.w	r2, r2, #1
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006ee6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3748      	adds	r7, #72	; 0x48
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b088      	sub	sp, #32
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006efe:	2300      	movs	r3, #0
 8006f00:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006f06:	e01b      	b.n	8006f40 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006f08:	f107 0310 	add.w	r3, r7, #16
 8006f0c:	f107 0114 	add.w	r1, r7, #20
 8006f10:	2201      	movs	r2, #1
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7ff fbdc 	bl	80066d0 <f_read>
		if (rc != 1) break;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d116      	bne.n	8006f4c <f_gets+0x5a>
		c = s[0];
 8006f1e:	7d3b      	ldrb	r3, [r7, #20]
 8006f20:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006f22:	7dfb      	ldrb	r3, [r7, #23]
 8006f24:	2b0d      	cmp	r3, #13
 8006f26:	d100      	bne.n	8006f2a <f_gets+0x38>
 8006f28:	e00a      	b.n	8006f40 <f_gets+0x4e>
		*p++ = c;
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	61ba      	str	r2, [r7, #24]
 8006f30:	7dfa      	ldrb	r2, [r7, #23]
 8006f32:	701a      	strb	r2, [r3, #0]
		n++;
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	3301      	adds	r3, #1
 8006f38:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006f3a:	7dfb      	ldrb	r3, [r7, #23]
 8006f3c:	2b0a      	cmp	r3, #10
 8006f3e:	d007      	beq.n	8006f50 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	69fa      	ldr	r2, [r7, #28]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	dbde      	blt.n	8006f08 <f_gets+0x16>
 8006f4a:	e002      	b.n	8006f52 <f_gets+0x60>
		if (rc != 1) break;
 8006f4c:	bf00      	nop
 8006f4e:	e000      	b.n	8006f52 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8006f50:	bf00      	nop
	}
	*p = 0;
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	2200      	movs	r2, #0
 8006f56:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <f_gets+0x70>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	e000      	b.n	8006f64 <f_gets+0x72>
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3720      	adds	r7, #32
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	4613      	mov	r3, r2
 8006f78:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006f82:	4b1f      	ldr	r3, [pc, #124]	; (8007000 <FATFS_LinkDriverEx+0x94>)
 8006f84:	7a5b      	ldrb	r3, [r3, #9]
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d131      	bne.n	8006ff0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006f8c:	4b1c      	ldr	r3, [pc, #112]	; (8007000 <FATFS_LinkDriverEx+0x94>)
 8006f8e:	7a5b      	ldrb	r3, [r3, #9]
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	4b1a      	ldr	r3, [pc, #104]	; (8007000 <FATFS_LinkDriverEx+0x94>)
 8006f96:	2100      	movs	r1, #0
 8006f98:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006f9a:	4b19      	ldr	r3, [pc, #100]	; (8007000 <FATFS_LinkDriverEx+0x94>)
 8006f9c:	7a5b      	ldrb	r3, [r3, #9]
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	4a17      	ldr	r2, [pc, #92]	; (8007000 <FATFS_LinkDriverEx+0x94>)
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006faa:	4b15      	ldr	r3, [pc, #84]	; (8007000 <FATFS_LinkDriverEx+0x94>)
 8006fac:	7a5b      	ldrb	r3, [r3, #9]
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	4b13      	ldr	r3, [pc, #76]	; (8007000 <FATFS_LinkDriverEx+0x94>)
 8006fb4:	4413      	add	r3, r2
 8006fb6:	79fa      	ldrb	r2, [r7, #7]
 8006fb8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006fba:	4b11      	ldr	r3, [pc, #68]	; (8007000 <FATFS_LinkDriverEx+0x94>)
 8006fbc:	7a5b      	ldrb	r3, [r3, #9]
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	b2d1      	uxtb	r1, r2
 8006fc4:	4a0e      	ldr	r2, [pc, #56]	; (8007000 <FATFS_LinkDriverEx+0x94>)
 8006fc6:	7251      	strb	r1, [r2, #9]
 8006fc8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006fca:	7dbb      	ldrb	r3, [r7, #22]
 8006fcc:	3330      	adds	r3, #48	; 0x30
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	223a      	movs	r2, #58	; 0x3a
 8006fda:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	3302      	adds	r3, #2
 8006fe0:	222f      	movs	r2, #47	; 0x2f
 8006fe2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	3303      	adds	r3, #3
 8006fe8:	2200      	movs	r2, #0
 8006fea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006fec:	2300      	movs	r3, #0
 8006fee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	200002d0 	.word	0x200002d0

08007004 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800700e:	2200      	movs	r2, #0
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7ff ffaa 	bl	8006f6c <FATFS_LinkDriverEx>
 8007018:	4603      	mov	r3, r0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <__errno>:
 8007024:	4b01      	ldr	r3, [pc, #4]	; (800702c <__errno+0x8>)
 8007026:	6818      	ldr	r0, [r3, #0]
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	20000024 	.word	0x20000024

08007030 <__libc_init_array>:
 8007030:	b570      	push	{r4, r5, r6, lr}
 8007032:	4d0d      	ldr	r5, [pc, #52]	; (8007068 <__libc_init_array+0x38>)
 8007034:	4c0d      	ldr	r4, [pc, #52]	; (800706c <__libc_init_array+0x3c>)
 8007036:	1b64      	subs	r4, r4, r5
 8007038:	10a4      	asrs	r4, r4, #2
 800703a:	2600      	movs	r6, #0
 800703c:	42a6      	cmp	r6, r4
 800703e:	d109      	bne.n	8007054 <__libc_init_array+0x24>
 8007040:	4d0b      	ldr	r5, [pc, #44]	; (8007070 <__libc_init_array+0x40>)
 8007042:	4c0c      	ldr	r4, [pc, #48]	; (8007074 <__libc_init_array+0x44>)
 8007044:	f000 fcb0 	bl	80079a8 <_init>
 8007048:	1b64      	subs	r4, r4, r5
 800704a:	10a4      	asrs	r4, r4, #2
 800704c:	2600      	movs	r6, #0
 800704e:	42a6      	cmp	r6, r4
 8007050:	d105      	bne.n	800705e <__libc_init_array+0x2e>
 8007052:	bd70      	pop	{r4, r5, r6, pc}
 8007054:	f855 3b04 	ldr.w	r3, [r5], #4
 8007058:	4798      	blx	r3
 800705a:	3601      	adds	r6, #1
 800705c:	e7ee      	b.n	800703c <__libc_init_array+0xc>
 800705e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007062:	4798      	blx	r3
 8007064:	3601      	adds	r6, #1
 8007066:	e7f2      	b.n	800704e <__libc_init_array+0x1e>
 8007068:	08007c1c 	.word	0x08007c1c
 800706c:	08007c1c 	.word	0x08007c1c
 8007070:	08007c1c 	.word	0x08007c1c
 8007074:	08007c20 	.word	0x08007c20

08007078 <memset>:
 8007078:	4402      	add	r2, r0
 800707a:	4603      	mov	r3, r0
 800707c:	4293      	cmp	r3, r2
 800707e:	d100      	bne.n	8007082 <memset+0xa>
 8007080:	4770      	bx	lr
 8007082:	f803 1b01 	strb.w	r1, [r3], #1
 8007086:	e7f9      	b.n	800707c <memset+0x4>

08007088 <strcpy>:
 8007088:	4603      	mov	r3, r0
 800708a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800708e:	f803 2b01 	strb.w	r2, [r3], #1
 8007092:	2a00      	cmp	r2, #0
 8007094:	d1f9      	bne.n	800708a <strcpy+0x2>
 8007096:	4770      	bx	lr

08007098 <_vsniprintf_r>:
 8007098:	b530      	push	{r4, r5, lr}
 800709a:	4614      	mov	r4, r2
 800709c:	2c00      	cmp	r4, #0
 800709e:	b09b      	sub	sp, #108	; 0x6c
 80070a0:	4605      	mov	r5, r0
 80070a2:	461a      	mov	r2, r3
 80070a4:	da05      	bge.n	80070b2 <_vsniprintf_r+0x1a>
 80070a6:	238b      	movs	r3, #139	; 0x8b
 80070a8:	6003      	str	r3, [r0, #0]
 80070aa:	f04f 30ff 	mov.w	r0, #4294967295
 80070ae:	b01b      	add	sp, #108	; 0x6c
 80070b0:	bd30      	pop	{r4, r5, pc}
 80070b2:	f44f 7302 	mov.w	r3, #520	; 0x208
 80070b6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80070ba:	bf14      	ite	ne
 80070bc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80070c0:	4623      	moveq	r3, r4
 80070c2:	9302      	str	r3, [sp, #8]
 80070c4:	9305      	str	r3, [sp, #20]
 80070c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070ca:	9100      	str	r1, [sp, #0]
 80070cc:	9104      	str	r1, [sp, #16]
 80070ce:	f8ad 300e 	strh.w	r3, [sp, #14]
 80070d2:	4669      	mov	r1, sp
 80070d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80070d6:	f000 f875 	bl	80071c4 <_svfiprintf_r>
 80070da:	1c43      	adds	r3, r0, #1
 80070dc:	bfbc      	itt	lt
 80070de:	238b      	movlt	r3, #139	; 0x8b
 80070e0:	602b      	strlt	r3, [r5, #0]
 80070e2:	2c00      	cmp	r4, #0
 80070e4:	d0e3      	beq.n	80070ae <_vsniprintf_r+0x16>
 80070e6:	9b00      	ldr	r3, [sp, #0]
 80070e8:	2200      	movs	r2, #0
 80070ea:	701a      	strb	r2, [r3, #0]
 80070ec:	e7df      	b.n	80070ae <_vsniprintf_r+0x16>
	...

080070f0 <vsniprintf>:
 80070f0:	b507      	push	{r0, r1, r2, lr}
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	4613      	mov	r3, r2
 80070f6:	460a      	mov	r2, r1
 80070f8:	4601      	mov	r1, r0
 80070fa:	4803      	ldr	r0, [pc, #12]	; (8007108 <vsniprintf+0x18>)
 80070fc:	6800      	ldr	r0, [r0, #0]
 80070fe:	f7ff ffcb 	bl	8007098 <_vsniprintf_r>
 8007102:	b003      	add	sp, #12
 8007104:	f85d fb04 	ldr.w	pc, [sp], #4
 8007108:	20000024 	.word	0x20000024

0800710c <__ssputs_r>:
 800710c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007110:	688e      	ldr	r6, [r1, #8]
 8007112:	429e      	cmp	r6, r3
 8007114:	4682      	mov	sl, r0
 8007116:	460c      	mov	r4, r1
 8007118:	4690      	mov	r8, r2
 800711a:	461f      	mov	r7, r3
 800711c:	d838      	bhi.n	8007190 <__ssputs_r+0x84>
 800711e:	898a      	ldrh	r2, [r1, #12]
 8007120:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007124:	d032      	beq.n	800718c <__ssputs_r+0x80>
 8007126:	6825      	ldr	r5, [r4, #0]
 8007128:	6909      	ldr	r1, [r1, #16]
 800712a:	eba5 0901 	sub.w	r9, r5, r1
 800712e:	6965      	ldr	r5, [r4, #20]
 8007130:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007134:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007138:	3301      	adds	r3, #1
 800713a:	444b      	add	r3, r9
 800713c:	106d      	asrs	r5, r5, #1
 800713e:	429d      	cmp	r5, r3
 8007140:	bf38      	it	cc
 8007142:	461d      	movcc	r5, r3
 8007144:	0553      	lsls	r3, r2, #21
 8007146:	d531      	bpl.n	80071ac <__ssputs_r+0xa0>
 8007148:	4629      	mov	r1, r5
 800714a:	f000 fb63 	bl	8007814 <_malloc_r>
 800714e:	4606      	mov	r6, r0
 8007150:	b950      	cbnz	r0, 8007168 <__ssputs_r+0x5c>
 8007152:	230c      	movs	r3, #12
 8007154:	f8ca 3000 	str.w	r3, [sl]
 8007158:	89a3      	ldrh	r3, [r4, #12]
 800715a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800715e:	81a3      	strh	r3, [r4, #12]
 8007160:	f04f 30ff 	mov.w	r0, #4294967295
 8007164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007168:	6921      	ldr	r1, [r4, #16]
 800716a:	464a      	mov	r2, r9
 800716c:	f000 fabe 	bl	80076ec <memcpy>
 8007170:	89a3      	ldrh	r3, [r4, #12]
 8007172:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800717a:	81a3      	strh	r3, [r4, #12]
 800717c:	6126      	str	r6, [r4, #16]
 800717e:	6165      	str	r5, [r4, #20]
 8007180:	444e      	add	r6, r9
 8007182:	eba5 0509 	sub.w	r5, r5, r9
 8007186:	6026      	str	r6, [r4, #0]
 8007188:	60a5      	str	r5, [r4, #8]
 800718a:	463e      	mov	r6, r7
 800718c:	42be      	cmp	r6, r7
 800718e:	d900      	bls.n	8007192 <__ssputs_r+0x86>
 8007190:	463e      	mov	r6, r7
 8007192:	6820      	ldr	r0, [r4, #0]
 8007194:	4632      	mov	r2, r6
 8007196:	4641      	mov	r1, r8
 8007198:	f000 fab6 	bl	8007708 <memmove>
 800719c:	68a3      	ldr	r3, [r4, #8]
 800719e:	1b9b      	subs	r3, r3, r6
 80071a0:	60a3      	str	r3, [r4, #8]
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	4433      	add	r3, r6
 80071a6:	6023      	str	r3, [r4, #0]
 80071a8:	2000      	movs	r0, #0
 80071aa:	e7db      	b.n	8007164 <__ssputs_r+0x58>
 80071ac:	462a      	mov	r2, r5
 80071ae:	f000 fba5 	bl	80078fc <_realloc_r>
 80071b2:	4606      	mov	r6, r0
 80071b4:	2800      	cmp	r0, #0
 80071b6:	d1e1      	bne.n	800717c <__ssputs_r+0x70>
 80071b8:	6921      	ldr	r1, [r4, #16]
 80071ba:	4650      	mov	r0, sl
 80071bc:	f000 fabe 	bl	800773c <_free_r>
 80071c0:	e7c7      	b.n	8007152 <__ssputs_r+0x46>
	...

080071c4 <_svfiprintf_r>:
 80071c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c8:	4698      	mov	r8, r3
 80071ca:	898b      	ldrh	r3, [r1, #12]
 80071cc:	061b      	lsls	r3, r3, #24
 80071ce:	b09d      	sub	sp, #116	; 0x74
 80071d0:	4607      	mov	r7, r0
 80071d2:	460d      	mov	r5, r1
 80071d4:	4614      	mov	r4, r2
 80071d6:	d50e      	bpl.n	80071f6 <_svfiprintf_r+0x32>
 80071d8:	690b      	ldr	r3, [r1, #16]
 80071da:	b963      	cbnz	r3, 80071f6 <_svfiprintf_r+0x32>
 80071dc:	2140      	movs	r1, #64	; 0x40
 80071de:	f000 fb19 	bl	8007814 <_malloc_r>
 80071e2:	6028      	str	r0, [r5, #0]
 80071e4:	6128      	str	r0, [r5, #16]
 80071e6:	b920      	cbnz	r0, 80071f2 <_svfiprintf_r+0x2e>
 80071e8:	230c      	movs	r3, #12
 80071ea:	603b      	str	r3, [r7, #0]
 80071ec:	f04f 30ff 	mov.w	r0, #4294967295
 80071f0:	e0d1      	b.n	8007396 <_svfiprintf_r+0x1d2>
 80071f2:	2340      	movs	r3, #64	; 0x40
 80071f4:	616b      	str	r3, [r5, #20]
 80071f6:	2300      	movs	r3, #0
 80071f8:	9309      	str	r3, [sp, #36]	; 0x24
 80071fa:	2320      	movs	r3, #32
 80071fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007200:	f8cd 800c 	str.w	r8, [sp, #12]
 8007204:	2330      	movs	r3, #48	; 0x30
 8007206:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80073b0 <_svfiprintf_r+0x1ec>
 800720a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800720e:	f04f 0901 	mov.w	r9, #1
 8007212:	4623      	mov	r3, r4
 8007214:	469a      	mov	sl, r3
 8007216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800721a:	b10a      	cbz	r2, 8007220 <_svfiprintf_r+0x5c>
 800721c:	2a25      	cmp	r2, #37	; 0x25
 800721e:	d1f9      	bne.n	8007214 <_svfiprintf_r+0x50>
 8007220:	ebba 0b04 	subs.w	fp, sl, r4
 8007224:	d00b      	beq.n	800723e <_svfiprintf_r+0x7a>
 8007226:	465b      	mov	r3, fp
 8007228:	4622      	mov	r2, r4
 800722a:	4629      	mov	r1, r5
 800722c:	4638      	mov	r0, r7
 800722e:	f7ff ff6d 	bl	800710c <__ssputs_r>
 8007232:	3001      	adds	r0, #1
 8007234:	f000 80aa 	beq.w	800738c <_svfiprintf_r+0x1c8>
 8007238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800723a:	445a      	add	r2, fp
 800723c:	9209      	str	r2, [sp, #36]	; 0x24
 800723e:	f89a 3000 	ldrb.w	r3, [sl]
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 80a2 	beq.w	800738c <_svfiprintf_r+0x1c8>
 8007248:	2300      	movs	r3, #0
 800724a:	f04f 32ff 	mov.w	r2, #4294967295
 800724e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007252:	f10a 0a01 	add.w	sl, sl, #1
 8007256:	9304      	str	r3, [sp, #16]
 8007258:	9307      	str	r3, [sp, #28]
 800725a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800725e:	931a      	str	r3, [sp, #104]	; 0x68
 8007260:	4654      	mov	r4, sl
 8007262:	2205      	movs	r2, #5
 8007264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007268:	4851      	ldr	r0, [pc, #324]	; (80073b0 <_svfiprintf_r+0x1ec>)
 800726a:	f7f8 ffb9 	bl	80001e0 <memchr>
 800726e:	9a04      	ldr	r2, [sp, #16]
 8007270:	b9d8      	cbnz	r0, 80072aa <_svfiprintf_r+0xe6>
 8007272:	06d0      	lsls	r0, r2, #27
 8007274:	bf44      	itt	mi
 8007276:	2320      	movmi	r3, #32
 8007278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800727c:	0711      	lsls	r1, r2, #28
 800727e:	bf44      	itt	mi
 8007280:	232b      	movmi	r3, #43	; 0x2b
 8007282:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007286:	f89a 3000 	ldrb.w	r3, [sl]
 800728a:	2b2a      	cmp	r3, #42	; 0x2a
 800728c:	d015      	beq.n	80072ba <_svfiprintf_r+0xf6>
 800728e:	9a07      	ldr	r2, [sp, #28]
 8007290:	4654      	mov	r4, sl
 8007292:	2000      	movs	r0, #0
 8007294:	f04f 0c0a 	mov.w	ip, #10
 8007298:	4621      	mov	r1, r4
 800729a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800729e:	3b30      	subs	r3, #48	; 0x30
 80072a0:	2b09      	cmp	r3, #9
 80072a2:	d94e      	bls.n	8007342 <_svfiprintf_r+0x17e>
 80072a4:	b1b0      	cbz	r0, 80072d4 <_svfiprintf_r+0x110>
 80072a6:	9207      	str	r2, [sp, #28]
 80072a8:	e014      	b.n	80072d4 <_svfiprintf_r+0x110>
 80072aa:	eba0 0308 	sub.w	r3, r0, r8
 80072ae:	fa09 f303 	lsl.w	r3, r9, r3
 80072b2:	4313      	orrs	r3, r2
 80072b4:	9304      	str	r3, [sp, #16]
 80072b6:	46a2      	mov	sl, r4
 80072b8:	e7d2      	b.n	8007260 <_svfiprintf_r+0x9c>
 80072ba:	9b03      	ldr	r3, [sp, #12]
 80072bc:	1d19      	adds	r1, r3, #4
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	9103      	str	r1, [sp, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	bfbb      	ittet	lt
 80072c6:	425b      	neglt	r3, r3
 80072c8:	f042 0202 	orrlt.w	r2, r2, #2
 80072cc:	9307      	strge	r3, [sp, #28]
 80072ce:	9307      	strlt	r3, [sp, #28]
 80072d0:	bfb8      	it	lt
 80072d2:	9204      	strlt	r2, [sp, #16]
 80072d4:	7823      	ldrb	r3, [r4, #0]
 80072d6:	2b2e      	cmp	r3, #46	; 0x2e
 80072d8:	d10c      	bne.n	80072f4 <_svfiprintf_r+0x130>
 80072da:	7863      	ldrb	r3, [r4, #1]
 80072dc:	2b2a      	cmp	r3, #42	; 0x2a
 80072de:	d135      	bne.n	800734c <_svfiprintf_r+0x188>
 80072e0:	9b03      	ldr	r3, [sp, #12]
 80072e2:	1d1a      	adds	r2, r3, #4
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	9203      	str	r2, [sp, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	bfb8      	it	lt
 80072ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80072f0:	3402      	adds	r4, #2
 80072f2:	9305      	str	r3, [sp, #20]
 80072f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073c0 <_svfiprintf_r+0x1fc>
 80072f8:	7821      	ldrb	r1, [r4, #0]
 80072fa:	2203      	movs	r2, #3
 80072fc:	4650      	mov	r0, sl
 80072fe:	f7f8 ff6f 	bl	80001e0 <memchr>
 8007302:	b140      	cbz	r0, 8007316 <_svfiprintf_r+0x152>
 8007304:	2340      	movs	r3, #64	; 0x40
 8007306:	eba0 000a 	sub.w	r0, r0, sl
 800730a:	fa03 f000 	lsl.w	r0, r3, r0
 800730e:	9b04      	ldr	r3, [sp, #16]
 8007310:	4303      	orrs	r3, r0
 8007312:	3401      	adds	r4, #1
 8007314:	9304      	str	r3, [sp, #16]
 8007316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800731a:	4826      	ldr	r0, [pc, #152]	; (80073b4 <_svfiprintf_r+0x1f0>)
 800731c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007320:	2206      	movs	r2, #6
 8007322:	f7f8 ff5d 	bl	80001e0 <memchr>
 8007326:	2800      	cmp	r0, #0
 8007328:	d038      	beq.n	800739c <_svfiprintf_r+0x1d8>
 800732a:	4b23      	ldr	r3, [pc, #140]	; (80073b8 <_svfiprintf_r+0x1f4>)
 800732c:	bb1b      	cbnz	r3, 8007376 <_svfiprintf_r+0x1b2>
 800732e:	9b03      	ldr	r3, [sp, #12]
 8007330:	3307      	adds	r3, #7
 8007332:	f023 0307 	bic.w	r3, r3, #7
 8007336:	3308      	adds	r3, #8
 8007338:	9303      	str	r3, [sp, #12]
 800733a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800733c:	4433      	add	r3, r6
 800733e:	9309      	str	r3, [sp, #36]	; 0x24
 8007340:	e767      	b.n	8007212 <_svfiprintf_r+0x4e>
 8007342:	fb0c 3202 	mla	r2, ip, r2, r3
 8007346:	460c      	mov	r4, r1
 8007348:	2001      	movs	r0, #1
 800734a:	e7a5      	b.n	8007298 <_svfiprintf_r+0xd4>
 800734c:	2300      	movs	r3, #0
 800734e:	3401      	adds	r4, #1
 8007350:	9305      	str	r3, [sp, #20]
 8007352:	4619      	mov	r1, r3
 8007354:	f04f 0c0a 	mov.w	ip, #10
 8007358:	4620      	mov	r0, r4
 800735a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800735e:	3a30      	subs	r2, #48	; 0x30
 8007360:	2a09      	cmp	r2, #9
 8007362:	d903      	bls.n	800736c <_svfiprintf_r+0x1a8>
 8007364:	2b00      	cmp	r3, #0
 8007366:	d0c5      	beq.n	80072f4 <_svfiprintf_r+0x130>
 8007368:	9105      	str	r1, [sp, #20]
 800736a:	e7c3      	b.n	80072f4 <_svfiprintf_r+0x130>
 800736c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007370:	4604      	mov	r4, r0
 8007372:	2301      	movs	r3, #1
 8007374:	e7f0      	b.n	8007358 <_svfiprintf_r+0x194>
 8007376:	ab03      	add	r3, sp, #12
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	462a      	mov	r2, r5
 800737c:	4b0f      	ldr	r3, [pc, #60]	; (80073bc <_svfiprintf_r+0x1f8>)
 800737e:	a904      	add	r1, sp, #16
 8007380:	4638      	mov	r0, r7
 8007382:	f3af 8000 	nop.w
 8007386:	1c42      	adds	r2, r0, #1
 8007388:	4606      	mov	r6, r0
 800738a:	d1d6      	bne.n	800733a <_svfiprintf_r+0x176>
 800738c:	89ab      	ldrh	r3, [r5, #12]
 800738e:	065b      	lsls	r3, r3, #25
 8007390:	f53f af2c 	bmi.w	80071ec <_svfiprintf_r+0x28>
 8007394:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007396:	b01d      	add	sp, #116	; 0x74
 8007398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800739c:	ab03      	add	r3, sp, #12
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	462a      	mov	r2, r5
 80073a2:	4b06      	ldr	r3, [pc, #24]	; (80073bc <_svfiprintf_r+0x1f8>)
 80073a4:	a904      	add	r1, sp, #16
 80073a6:	4638      	mov	r0, r7
 80073a8:	f000 f87a 	bl	80074a0 <_printf_i>
 80073ac:	e7eb      	b.n	8007386 <_svfiprintf_r+0x1c2>
 80073ae:	bf00      	nop
 80073b0:	08007be0 	.word	0x08007be0
 80073b4:	08007bea 	.word	0x08007bea
 80073b8:	00000000 	.word	0x00000000
 80073bc:	0800710d 	.word	0x0800710d
 80073c0:	08007be6 	.word	0x08007be6

080073c4 <_printf_common>:
 80073c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c8:	4616      	mov	r6, r2
 80073ca:	4699      	mov	r9, r3
 80073cc:	688a      	ldr	r2, [r1, #8]
 80073ce:	690b      	ldr	r3, [r1, #16]
 80073d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073d4:	4293      	cmp	r3, r2
 80073d6:	bfb8      	it	lt
 80073d8:	4613      	movlt	r3, r2
 80073da:	6033      	str	r3, [r6, #0]
 80073dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073e0:	4607      	mov	r7, r0
 80073e2:	460c      	mov	r4, r1
 80073e4:	b10a      	cbz	r2, 80073ea <_printf_common+0x26>
 80073e6:	3301      	adds	r3, #1
 80073e8:	6033      	str	r3, [r6, #0]
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	0699      	lsls	r1, r3, #26
 80073ee:	bf42      	ittt	mi
 80073f0:	6833      	ldrmi	r3, [r6, #0]
 80073f2:	3302      	addmi	r3, #2
 80073f4:	6033      	strmi	r3, [r6, #0]
 80073f6:	6825      	ldr	r5, [r4, #0]
 80073f8:	f015 0506 	ands.w	r5, r5, #6
 80073fc:	d106      	bne.n	800740c <_printf_common+0x48>
 80073fe:	f104 0a19 	add.w	sl, r4, #25
 8007402:	68e3      	ldr	r3, [r4, #12]
 8007404:	6832      	ldr	r2, [r6, #0]
 8007406:	1a9b      	subs	r3, r3, r2
 8007408:	42ab      	cmp	r3, r5
 800740a:	dc26      	bgt.n	800745a <_printf_common+0x96>
 800740c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007410:	1e13      	subs	r3, r2, #0
 8007412:	6822      	ldr	r2, [r4, #0]
 8007414:	bf18      	it	ne
 8007416:	2301      	movne	r3, #1
 8007418:	0692      	lsls	r2, r2, #26
 800741a:	d42b      	bmi.n	8007474 <_printf_common+0xb0>
 800741c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007420:	4649      	mov	r1, r9
 8007422:	4638      	mov	r0, r7
 8007424:	47c0      	blx	r8
 8007426:	3001      	adds	r0, #1
 8007428:	d01e      	beq.n	8007468 <_printf_common+0xa4>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	68e5      	ldr	r5, [r4, #12]
 800742e:	6832      	ldr	r2, [r6, #0]
 8007430:	f003 0306 	and.w	r3, r3, #6
 8007434:	2b04      	cmp	r3, #4
 8007436:	bf08      	it	eq
 8007438:	1aad      	subeq	r5, r5, r2
 800743a:	68a3      	ldr	r3, [r4, #8]
 800743c:	6922      	ldr	r2, [r4, #16]
 800743e:	bf0c      	ite	eq
 8007440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007444:	2500      	movne	r5, #0
 8007446:	4293      	cmp	r3, r2
 8007448:	bfc4      	itt	gt
 800744a:	1a9b      	subgt	r3, r3, r2
 800744c:	18ed      	addgt	r5, r5, r3
 800744e:	2600      	movs	r6, #0
 8007450:	341a      	adds	r4, #26
 8007452:	42b5      	cmp	r5, r6
 8007454:	d11a      	bne.n	800748c <_printf_common+0xc8>
 8007456:	2000      	movs	r0, #0
 8007458:	e008      	b.n	800746c <_printf_common+0xa8>
 800745a:	2301      	movs	r3, #1
 800745c:	4652      	mov	r2, sl
 800745e:	4649      	mov	r1, r9
 8007460:	4638      	mov	r0, r7
 8007462:	47c0      	blx	r8
 8007464:	3001      	adds	r0, #1
 8007466:	d103      	bne.n	8007470 <_printf_common+0xac>
 8007468:	f04f 30ff 	mov.w	r0, #4294967295
 800746c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007470:	3501      	adds	r5, #1
 8007472:	e7c6      	b.n	8007402 <_printf_common+0x3e>
 8007474:	18e1      	adds	r1, r4, r3
 8007476:	1c5a      	adds	r2, r3, #1
 8007478:	2030      	movs	r0, #48	; 0x30
 800747a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800747e:	4422      	add	r2, r4
 8007480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007484:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007488:	3302      	adds	r3, #2
 800748a:	e7c7      	b.n	800741c <_printf_common+0x58>
 800748c:	2301      	movs	r3, #1
 800748e:	4622      	mov	r2, r4
 8007490:	4649      	mov	r1, r9
 8007492:	4638      	mov	r0, r7
 8007494:	47c0      	blx	r8
 8007496:	3001      	adds	r0, #1
 8007498:	d0e6      	beq.n	8007468 <_printf_common+0xa4>
 800749a:	3601      	adds	r6, #1
 800749c:	e7d9      	b.n	8007452 <_printf_common+0x8e>
	...

080074a0 <_printf_i>:
 80074a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074a4:	7e0f      	ldrb	r7, [r1, #24]
 80074a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074a8:	2f78      	cmp	r7, #120	; 0x78
 80074aa:	4691      	mov	r9, r2
 80074ac:	4680      	mov	r8, r0
 80074ae:	460c      	mov	r4, r1
 80074b0:	469a      	mov	sl, r3
 80074b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074b6:	d807      	bhi.n	80074c8 <_printf_i+0x28>
 80074b8:	2f62      	cmp	r7, #98	; 0x62
 80074ba:	d80a      	bhi.n	80074d2 <_printf_i+0x32>
 80074bc:	2f00      	cmp	r7, #0
 80074be:	f000 80d8 	beq.w	8007672 <_printf_i+0x1d2>
 80074c2:	2f58      	cmp	r7, #88	; 0x58
 80074c4:	f000 80a3 	beq.w	800760e <_printf_i+0x16e>
 80074c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074d0:	e03a      	b.n	8007548 <_printf_i+0xa8>
 80074d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074d6:	2b15      	cmp	r3, #21
 80074d8:	d8f6      	bhi.n	80074c8 <_printf_i+0x28>
 80074da:	a101      	add	r1, pc, #4	; (adr r1, 80074e0 <_printf_i+0x40>)
 80074dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074e0:	08007539 	.word	0x08007539
 80074e4:	0800754d 	.word	0x0800754d
 80074e8:	080074c9 	.word	0x080074c9
 80074ec:	080074c9 	.word	0x080074c9
 80074f0:	080074c9 	.word	0x080074c9
 80074f4:	080074c9 	.word	0x080074c9
 80074f8:	0800754d 	.word	0x0800754d
 80074fc:	080074c9 	.word	0x080074c9
 8007500:	080074c9 	.word	0x080074c9
 8007504:	080074c9 	.word	0x080074c9
 8007508:	080074c9 	.word	0x080074c9
 800750c:	08007659 	.word	0x08007659
 8007510:	0800757d 	.word	0x0800757d
 8007514:	0800763b 	.word	0x0800763b
 8007518:	080074c9 	.word	0x080074c9
 800751c:	080074c9 	.word	0x080074c9
 8007520:	0800767b 	.word	0x0800767b
 8007524:	080074c9 	.word	0x080074c9
 8007528:	0800757d 	.word	0x0800757d
 800752c:	080074c9 	.word	0x080074c9
 8007530:	080074c9 	.word	0x080074c9
 8007534:	08007643 	.word	0x08007643
 8007538:	682b      	ldr	r3, [r5, #0]
 800753a:	1d1a      	adds	r2, r3, #4
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	602a      	str	r2, [r5, #0]
 8007540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007548:	2301      	movs	r3, #1
 800754a:	e0a3      	b.n	8007694 <_printf_i+0x1f4>
 800754c:	6820      	ldr	r0, [r4, #0]
 800754e:	6829      	ldr	r1, [r5, #0]
 8007550:	0606      	lsls	r6, r0, #24
 8007552:	f101 0304 	add.w	r3, r1, #4
 8007556:	d50a      	bpl.n	800756e <_printf_i+0xce>
 8007558:	680e      	ldr	r6, [r1, #0]
 800755a:	602b      	str	r3, [r5, #0]
 800755c:	2e00      	cmp	r6, #0
 800755e:	da03      	bge.n	8007568 <_printf_i+0xc8>
 8007560:	232d      	movs	r3, #45	; 0x2d
 8007562:	4276      	negs	r6, r6
 8007564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007568:	485e      	ldr	r0, [pc, #376]	; (80076e4 <_printf_i+0x244>)
 800756a:	230a      	movs	r3, #10
 800756c:	e019      	b.n	80075a2 <_printf_i+0x102>
 800756e:	680e      	ldr	r6, [r1, #0]
 8007570:	602b      	str	r3, [r5, #0]
 8007572:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007576:	bf18      	it	ne
 8007578:	b236      	sxthne	r6, r6
 800757a:	e7ef      	b.n	800755c <_printf_i+0xbc>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	6820      	ldr	r0, [r4, #0]
 8007580:	1d19      	adds	r1, r3, #4
 8007582:	6029      	str	r1, [r5, #0]
 8007584:	0601      	lsls	r1, r0, #24
 8007586:	d501      	bpl.n	800758c <_printf_i+0xec>
 8007588:	681e      	ldr	r6, [r3, #0]
 800758a:	e002      	b.n	8007592 <_printf_i+0xf2>
 800758c:	0646      	lsls	r6, r0, #25
 800758e:	d5fb      	bpl.n	8007588 <_printf_i+0xe8>
 8007590:	881e      	ldrh	r6, [r3, #0]
 8007592:	4854      	ldr	r0, [pc, #336]	; (80076e4 <_printf_i+0x244>)
 8007594:	2f6f      	cmp	r7, #111	; 0x6f
 8007596:	bf0c      	ite	eq
 8007598:	2308      	moveq	r3, #8
 800759a:	230a      	movne	r3, #10
 800759c:	2100      	movs	r1, #0
 800759e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075a2:	6865      	ldr	r5, [r4, #4]
 80075a4:	60a5      	str	r5, [r4, #8]
 80075a6:	2d00      	cmp	r5, #0
 80075a8:	bfa2      	ittt	ge
 80075aa:	6821      	ldrge	r1, [r4, #0]
 80075ac:	f021 0104 	bicge.w	r1, r1, #4
 80075b0:	6021      	strge	r1, [r4, #0]
 80075b2:	b90e      	cbnz	r6, 80075b8 <_printf_i+0x118>
 80075b4:	2d00      	cmp	r5, #0
 80075b6:	d04d      	beq.n	8007654 <_printf_i+0x1b4>
 80075b8:	4615      	mov	r5, r2
 80075ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80075be:	fb03 6711 	mls	r7, r3, r1, r6
 80075c2:	5dc7      	ldrb	r7, [r0, r7]
 80075c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075c8:	4637      	mov	r7, r6
 80075ca:	42bb      	cmp	r3, r7
 80075cc:	460e      	mov	r6, r1
 80075ce:	d9f4      	bls.n	80075ba <_printf_i+0x11a>
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d10b      	bne.n	80075ec <_printf_i+0x14c>
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	07de      	lsls	r6, r3, #31
 80075d8:	d508      	bpl.n	80075ec <_printf_i+0x14c>
 80075da:	6923      	ldr	r3, [r4, #16]
 80075dc:	6861      	ldr	r1, [r4, #4]
 80075de:	4299      	cmp	r1, r3
 80075e0:	bfde      	ittt	le
 80075e2:	2330      	movle	r3, #48	; 0x30
 80075e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075ec:	1b52      	subs	r2, r2, r5
 80075ee:	6122      	str	r2, [r4, #16]
 80075f0:	f8cd a000 	str.w	sl, [sp]
 80075f4:	464b      	mov	r3, r9
 80075f6:	aa03      	add	r2, sp, #12
 80075f8:	4621      	mov	r1, r4
 80075fa:	4640      	mov	r0, r8
 80075fc:	f7ff fee2 	bl	80073c4 <_printf_common>
 8007600:	3001      	adds	r0, #1
 8007602:	d14c      	bne.n	800769e <_printf_i+0x1fe>
 8007604:	f04f 30ff 	mov.w	r0, #4294967295
 8007608:	b004      	add	sp, #16
 800760a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800760e:	4835      	ldr	r0, [pc, #212]	; (80076e4 <_printf_i+0x244>)
 8007610:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007614:	6829      	ldr	r1, [r5, #0]
 8007616:	6823      	ldr	r3, [r4, #0]
 8007618:	f851 6b04 	ldr.w	r6, [r1], #4
 800761c:	6029      	str	r1, [r5, #0]
 800761e:	061d      	lsls	r5, r3, #24
 8007620:	d514      	bpl.n	800764c <_printf_i+0x1ac>
 8007622:	07df      	lsls	r7, r3, #31
 8007624:	bf44      	itt	mi
 8007626:	f043 0320 	orrmi.w	r3, r3, #32
 800762a:	6023      	strmi	r3, [r4, #0]
 800762c:	b91e      	cbnz	r6, 8007636 <_printf_i+0x196>
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	f023 0320 	bic.w	r3, r3, #32
 8007634:	6023      	str	r3, [r4, #0]
 8007636:	2310      	movs	r3, #16
 8007638:	e7b0      	b.n	800759c <_printf_i+0xfc>
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	f043 0320 	orr.w	r3, r3, #32
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	2378      	movs	r3, #120	; 0x78
 8007644:	4828      	ldr	r0, [pc, #160]	; (80076e8 <_printf_i+0x248>)
 8007646:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800764a:	e7e3      	b.n	8007614 <_printf_i+0x174>
 800764c:	0659      	lsls	r1, r3, #25
 800764e:	bf48      	it	mi
 8007650:	b2b6      	uxthmi	r6, r6
 8007652:	e7e6      	b.n	8007622 <_printf_i+0x182>
 8007654:	4615      	mov	r5, r2
 8007656:	e7bb      	b.n	80075d0 <_printf_i+0x130>
 8007658:	682b      	ldr	r3, [r5, #0]
 800765a:	6826      	ldr	r6, [r4, #0]
 800765c:	6961      	ldr	r1, [r4, #20]
 800765e:	1d18      	adds	r0, r3, #4
 8007660:	6028      	str	r0, [r5, #0]
 8007662:	0635      	lsls	r5, r6, #24
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	d501      	bpl.n	800766c <_printf_i+0x1cc>
 8007668:	6019      	str	r1, [r3, #0]
 800766a:	e002      	b.n	8007672 <_printf_i+0x1d2>
 800766c:	0670      	lsls	r0, r6, #25
 800766e:	d5fb      	bpl.n	8007668 <_printf_i+0x1c8>
 8007670:	8019      	strh	r1, [r3, #0]
 8007672:	2300      	movs	r3, #0
 8007674:	6123      	str	r3, [r4, #16]
 8007676:	4615      	mov	r5, r2
 8007678:	e7ba      	b.n	80075f0 <_printf_i+0x150>
 800767a:	682b      	ldr	r3, [r5, #0]
 800767c:	1d1a      	adds	r2, r3, #4
 800767e:	602a      	str	r2, [r5, #0]
 8007680:	681d      	ldr	r5, [r3, #0]
 8007682:	6862      	ldr	r2, [r4, #4]
 8007684:	2100      	movs	r1, #0
 8007686:	4628      	mov	r0, r5
 8007688:	f7f8 fdaa 	bl	80001e0 <memchr>
 800768c:	b108      	cbz	r0, 8007692 <_printf_i+0x1f2>
 800768e:	1b40      	subs	r0, r0, r5
 8007690:	6060      	str	r0, [r4, #4]
 8007692:	6863      	ldr	r3, [r4, #4]
 8007694:	6123      	str	r3, [r4, #16]
 8007696:	2300      	movs	r3, #0
 8007698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800769c:	e7a8      	b.n	80075f0 <_printf_i+0x150>
 800769e:	6923      	ldr	r3, [r4, #16]
 80076a0:	462a      	mov	r2, r5
 80076a2:	4649      	mov	r1, r9
 80076a4:	4640      	mov	r0, r8
 80076a6:	47d0      	blx	sl
 80076a8:	3001      	adds	r0, #1
 80076aa:	d0ab      	beq.n	8007604 <_printf_i+0x164>
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	079b      	lsls	r3, r3, #30
 80076b0:	d413      	bmi.n	80076da <_printf_i+0x23a>
 80076b2:	68e0      	ldr	r0, [r4, #12]
 80076b4:	9b03      	ldr	r3, [sp, #12]
 80076b6:	4298      	cmp	r0, r3
 80076b8:	bfb8      	it	lt
 80076ba:	4618      	movlt	r0, r3
 80076bc:	e7a4      	b.n	8007608 <_printf_i+0x168>
 80076be:	2301      	movs	r3, #1
 80076c0:	4632      	mov	r2, r6
 80076c2:	4649      	mov	r1, r9
 80076c4:	4640      	mov	r0, r8
 80076c6:	47d0      	blx	sl
 80076c8:	3001      	adds	r0, #1
 80076ca:	d09b      	beq.n	8007604 <_printf_i+0x164>
 80076cc:	3501      	adds	r5, #1
 80076ce:	68e3      	ldr	r3, [r4, #12]
 80076d0:	9903      	ldr	r1, [sp, #12]
 80076d2:	1a5b      	subs	r3, r3, r1
 80076d4:	42ab      	cmp	r3, r5
 80076d6:	dcf2      	bgt.n	80076be <_printf_i+0x21e>
 80076d8:	e7eb      	b.n	80076b2 <_printf_i+0x212>
 80076da:	2500      	movs	r5, #0
 80076dc:	f104 0619 	add.w	r6, r4, #25
 80076e0:	e7f5      	b.n	80076ce <_printf_i+0x22e>
 80076e2:	bf00      	nop
 80076e4:	08007bf1 	.word	0x08007bf1
 80076e8:	08007c02 	.word	0x08007c02

080076ec <memcpy>:
 80076ec:	440a      	add	r2, r1
 80076ee:	4291      	cmp	r1, r2
 80076f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80076f4:	d100      	bne.n	80076f8 <memcpy+0xc>
 80076f6:	4770      	bx	lr
 80076f8:	b510      	push	{r4, lr}
 80076fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007702:	4291      	cmp	r1, r2
 8007704:	d1f9      	bne.n	80076fa <memcpy+0xe>
 8007706:	bd10      	pop	{r4, pc}

08007708 <memmove>:
 8007708:	4288      	cmp	r0, r1
 800770a:	b510      	push	{r4, lr}
 800770c:	eb01 0402 	add.w	r4, r1, r2
 8007710:	d902      	bls.n	8007718 <memmove+0x10>
 8007712:	4284      	cmp	r4, r0
 8007714:	4623      	mov	r3, r4
 8007716:	d807      	bhi.n	8007728 <memmove+0x20>
 8007718:	1e43      	subs	r3, r0, #1
 800771a:	42a1      	cmp	r1, r4
 800771c:	d008      	beq.n	8007730 <memmove+0x28>
 800771e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007722:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007726:	e7f8      	b.n	800771a <memmove+0x12>
 8007728:	4402      	add	r2, r0
 800772a:	4601      	mov	r1, r0
 800772c:	428a      	cmp	r2, r1
 800772e:	d100      	bne.n	8007732 <memmove+0x2a>
 8007730:	bd10      	pop	{r4, pc}
 8007732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800773a:	e7f7      	b.n	800772c <memmove+0x24>

0800773c <_free_r>:
 800773c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800773e:	2900      	cmp	r1, #0
 8007740:	d044      	beq.n	80077cc <_free_r+0x90>
 8007742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007746:	9001      	str	r0, [sp, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	f1a1 0404 	sub.w	r4, r1, #4
 800774e:	bfb8      	it	lt
 8007750:	18e4      	addlt	r4, r4, r3
 8007752:	f000 f913 	bl	800797c <__malloc_lock>
 8007756:	4a1e      	ldr	r2, [pc, #120]	; (80077d0 <_free_r+0x94>)
 8007758:	9801      	ldr	r0, [sp, #4]
 800775a:	6813      	ldr	r3, [r2, #0]
 800775c:	b933      	cbnz	r3, 800776c <_free_r+0x30>
 800775e:	6063      	str	r3, [r4, #4]
 8007760:	6014      	str	r4, [r2, #0]
 8007762:	b003      	add	sp, #12
 8007764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007768:	f000 b90e 	b.w	8007988 <__malloc_unlock>
 800776c:	42a3      	cmp	r3, r4
 800776e:	d908      	bls.n	8007782 <_free_r+0x46>
 8007770:	6825      	ldr	r5, [r4, #0]
 8007772:	1961      	adds	r1, r4, r5
 8007774:	428b      	cmp	r3, r1
 8007776:	bf01      	itttt	eq
 8007778:	6819      	ldreq	r1, [r3, #0]
 800777a:	685b      	ldreq	r3, [r3, #4]
 800777c:	1949      	addeq	r1, r1, r5
 800777e:	6021      	streq	r1, [r4, #0]
 8007780:	e7ed      	b.n	800775e <_free_r+0x22>
 8007782:	461a      	mov	r2, r3
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	b10b      	cbz	r3, 800778c <_free_r+0x50>
 8007788:	42a3      	cmp	r3, r4
 800778a:	d9fa      	bls.n	8007782 <_free_r+0x46>
 800778c:	6811      	ldr	r1, [r2, #0]
 800778e:	1855      	adds	r5, r2, r1
 8007790:	42a5      	cmp	r5, r4
 8007792:	d10b      	bne.n	80077ac <_free_r+0x70>
 8007794:	6824      	ldr	r4, [r4, #0]
 8007796:	4421      	add	r1, r4
 8007798:	1854      	adds	r4, r2, r1
 800779a:	42a3      	cmp	r3, r4
 800779c:	6011      	str	r1, [r2, #0]
 800779e:	d1e0      	bne.n	8007762 <_free_r+0x26>
 80077a0:	681c      	ldr	r4, [r3, #0]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	6053      	str	r3, [r2, #4]
 80077a6:	4421      	add	r1, r4
 80077a8:	6011      	str	r1, [r2, #0]
 80077aa:	e7da      	b.n	8007762 <_free_r+0x26>
 80077ac:	d902      	bls.n	80077b4 <_free_r+0x78>
 80077ae:	230c      	movs	r3, #12
 80077b0:	6003      	str	r3, [r0, #0]
 80077b2:	e7d6      	b.n	8007762 <_free_r+0x26>
 80077b4:	6825      	ldr	r5, [r4, #0]
 80077b6:	1961      	adds	r1, r4, r5
 80077b8:	428b      	cmp	r3, r1
 80077ba:	bf04      	itt	eq
 80077bc:	6819      	ldreq	r1, [r3, #0]
 80077be:	685b      	ldreq	r3, [r3, #4]
 80077c0:	6063      	str	r3, [r4, #4]
 80077c2:	bf04      	itt	eq
 80077c4:	1949      	addeq	r1, r1, r5
 80077c6:	6021      	streq	r1, [r4, #0]
 80077c8:	6054      	str	r4, [r2, #4]
 80077ca:	e7ca      	b.n	8007762 <_free_r+0x26>
 80077cc:	b003      	add	sp, #12
 80077ce:	bd30      	pop	{r4, r5, pc}
 80077d0:	200002dc 	.word	0x200002dc

080077d4 <sbrk_aligned>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	4e0e      	ldr	r6, [pc, #56]	; (8007810 <sbrk_aligned+0x3c>)
 80077d8:	460c      	mov	r4, r1
 80077da:	6831      	ldr	r1, [r6, #0]
 80077dc:	4605      	mov	r5, r0
 80077de:	b911      	cbnz	r1, 80077e6 <sbrk_aligned+0x12>
 80077e0:	f000 f8bc 	bl	800795c <_sbrk_r>
 80077e4:	6030      	str	r0, [r6, #0]
 80077e6:	4621      	mov	r1, r4
 80077e8:	4628      	mov	r0, r5
 80077ea:	f000 f8b7 	bl	800795c <_sbrk_r>
 80077ee:	1c43      	adds	r3, r0, #1
 80077f0:	d00a      	beq.n	8007808 <sbrk_aligned+0x34>
 80077f2:	1cc4      	adds	r4, r0, #3
 80077f4:	f024 0403 	bic.w	r4, r4, #3
 80077f8:	42a0      	cmp	r0, r4
 80077fa:	d007      	beq.n	800780c <sbrk_aligned+0x38>
 80077fc:	1a21      	subs	r1, r4, r0
 80077fe:	4628      	mov	r0, r5
 8007800:	f000 f8ac 	bl	800795c <_sbrk_r>
 8007804:	3001      	adds	r0, #1
 8007806:	d101      	bne.n	800780c <sbrk_aligned+0x38>
 8007808:	f04f 34ff 	mov.w	r4, #4294967295
 800780c:	4620      	mov	r0, r4
 800780e:	bd70      	pop	{r4, r5, r6, pc}
 8007810:	200002e0 	.word	0x200002e0

08007814 <_malloc_r>:
 8007814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007818:	1ccd      	adds	r5, r1, #3
 800781a:	f025 0503 	bic.w	r5, r5, #3
 800781e:	3508      	adds	r5, #8
 8007820:	2d0c      	cmp	r5, #12
 8007822:	bf38      	it	cc
 8007824:	250c      	movcc	r5, #12
 8007826:	2d00      	cmp	r5, #0
 8007828:	4607      	mov	r7, r0
 800782a:	db01      	blt.n	8007830 <_malloc_r+0x1c>
 800782c:	42a9      	cmp	r1, r5
 800782e:	d905      	bls.n	800783c <_malloc_r+0x28>
 8007830:	230c      	movs	r3, #12
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	2600      	movs	r6, #0
 8007836:	4630      	mov	r0, r6
 8007838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800783c:	4e2e      	ldr	r6, [pc, #184]	; (80078f8 <_malloc_r+0xe4>)
 800783e:	f000 f89d 	bl	800797c <__malloc_lock>
 8007842:	6833      	ldr	r3, [r6, #0]
 8007844:	461c      	mov	r4, r3
 8007846:	bb34      	cbnz	r4, 8007896 <_malloc_r+0x82>
 8007848:	4629      	mov	r1, r5
 800784a:	4638      	mov	r0, r7
 800784c:	f7ff ffc2 	bl	80077d4 <sbrk_aligned>
 8007850:	1c43      	adds	r3, r0, #1
 8007852:	4604      	mov	r4, r0
 8007854:	d14d      	bne.n	80078f2 <_malloc_r+0xde>
 8007856:	6834      	ldr	r4, [r6, #0]
 8007858:	4626      	mov	r6, r4
 800785a:	2e00      	cmp	r6, #0
 800785c:	d140      	bne.n	80078e0 <_malloc_r+0xcc>
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	4631      	mov	r1, r6
 8007862:	4638      	mov	r0, r7
 8007864:	eb04 0803 	add.w	r8, r4, r3
 8007868:	f000 f878 	bl	800795c <_sbrk_r>
 800786c:	4580      	cmp	r8, r0
 800786e:	d13a      	bne.n	80078e6 <_malloc_r+0xd2>
 8007870:	6821      	ldr	r1, [r4, #0]
 8007872:	3503      	adds	r5, #3
 8007874:	1a6d      	subs	r5, r5, r1
 8007876:	f025 0503 	bic.w	r5, r5, #3
 800787a:	3508      	adds	r5, #8
 800787c:	2d0c      	cmp	r5, #12
 800787e:	bf38      	it	cc
 8007880:	250c      	movcc	r5, #12
 8007882:	4629      	mov	r1, r5
 8007884:	4638      	mov	r0, r7
 8007886:	f7ff ffa5 	bl	80077d4 <sbrk_aligned>
 800788a:	3001      	adds	r0, #1
 800788c:	d02b      	beq.n	80078e6 <_malloc_r+0xd2>
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	442b      	add	r3, r5
 8007892:	6023      	str	r3, [r4, #0]
 8007894:	e00e      	b.n	80078b4 <_malloc_r+0xa0>
 8007896:	6822      	ldr	r2, [r4, #0]
 8007898:	1b52      	subs	r2, r2, r5
 800789a:	d41e      	bmi.n	80078da <_malloc_r+0xc6>
 800789c:	2a0b      	cmp	r2, #11
 800789e:	d916      	bls.n	80078ce <_malloc_r+0xba>
 80078a0:	1961      	adds	r1, r4, r5
 80078a2:	42a3      	cmp	r3, r4
 80078a4:	6025      	str	r5, [r4, #0]
 80078a6:	bf18      	it	ne
 80078a8:	6059      	strne	r1, [r3, #4]
 80078aa:	6863      	ldr	r3, [r4, #4]
 80078ac:	bf08      	it	eq
 80078ae:	6031      	streq	r1, [r6, #0]
 80078b0:	5162      	str	r2, [r4, r5]
 80078b2:	604b      	str	r3, [r1, #4]
 80078b4:	4638      	mov	r0, r7
 80078b6:	f104 060b 	add.w	r6, r4, #11
 80078ba:	f000 f865 	bl	8007988 <__malloc_unlock>
 80078be:	f026 0607 	bic.w	r6, r6, #7
 80078c2:	1d23      	adds	r3, r4, #4
 80078c4:	1af2      	subs	r2, r6, r3
 80078c6:	d0b6      	beq.n	8007836 <_malloc_r+0x22>
 80078c8:	1b9b      	subs	r3, r3, r6
 80078ca:	50a3      	str	r3, [r4, r2]
 80078cc:	e7b3      	b.n	8007836 <_malloc_r+0x22>
 80078ce:	6862      	ldr	r2, [r4, #4]
 80078d0:	42a3      	cmp	r3, r4
 80078d2:	bf0c      	ite	eq
 80078d4:	6032      	streq	r2, [r6, #0]
 80078d6:	605a      	strne	r2, [r3, #4]
 80078d8:	e7ec      	b.n	80078b4 <_malloc_r+0xa0>
 80078da:	4623      	mov	r3, r4
 80078dc:	6864      	ldr	r4, [r4, #4]
 80078de:	e7b2      	b.n	8007846 <_malloc_r+0x32>
 80078e0:	4634      	mov	r4, r6
 80078e2:	6876      	ldr	r6, [r6, #4]
 80078e4:	e7b9      	b.n	800785a <_malloc_r+0x46>
 80078e6:	230c      	movs	r3, #12
 80078e8:	603b      	str	r3, [r7, #0]
 80078ea:	4638      	mov	r0, r7
 80078ec:	f000 f84c 	bl	8007988 <__malloc_unlock>
 80078f0:	e7a1      	b.n	8007836 <_malloc_r+0x22>
 80078f2:	6025      	str	r5, [r4, #0]
 80078f4:	e7de      	b.n	80078b4 <_malloc_r+0xa0>
 80078f6:	bf00      	nop
 80078f8:	200002dc 	.word	0x200002dc

080078fc <_realloc_r>:
 80078fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007900:	4680      	mov	r8, r0
 8007902:	4614      	mov	r4, r2
 8007904:	460e      	mov	r6, r1
 8007906:	b921      	cbnz	r1, 8007912 <_realloc_r+0x16>
 8007908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800790c:	4611      	mov	r1, r2
 800790e:	f7ff bf81 	b.w	8007814 <_malloc_r>
 8007912:	b92a      	cbnz	r2, 8007920 <_realloc_r+0x24>
 8007914:	f7ff ff12 	bl	800773c <_free_r>
 8007918:	4625      	mov	r5, r4
 800791a:	4628      	mov	r0, r5
 800791c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007920:	f000 f838 	bl	8007994 <_malloc_usable_size_r>
 8007924:	4284      	cmp	r4, r0
 8007926:	4607      	mov	r7, r0
 8007928:	d802      	bhi.n	8007930 <_realloc_r+0x34>
 800792a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800792e:	d812      	bhi.n	8007956 <_realloc_r+0x5a>
 8007930:	4621      	mov	r1, r4
 8007932:	4640      	mov	r0, r8
 8007934:	f7ff ff6e 	bl	8007814 <_malloc_r>
 8007938:	4605      	mov	r5, r0
 800793a:	2800      	cmp	r0, #0
 800793c:	d0ed      	beq.n	800791a <_realloc_r+0x1e>
 800793e:	42bc      	cmp	r4, r7
 8007940:	4622      	mov	r2, r4
 8007942:	4631      	mov	r1, r6
 8007944:	bf28      	it	cs
 8007946:	463a      	movcs	r2, r7
 8007948:	f7ff fed0 	bl	80076ec <memcpy>
 800794c:	4631      	mov	r1, r6
 800794e:	4640      	mov	r0, r8
 8007950:	f7ff fef4 	bl	800773c <_free_r>
 8007954:	e7e1      	b.n	800791a <_realloc_r+0x1e>
 8007956:	4635      	mov	r5, r6
 8007958:	e7df      	b.n	800791a <_realloc_r+0x1e>
	...

0800795c <_sbrk_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	4d06      	ldr	r5, [pc, #24]	; (8007978 <_sbrk_r+0x1c>)
 8007960:	2300      	movs	r3, #0
 8007962:	4604      	mov	r4, r0
 8007964:	4608      	mov	r0, r1
 8007966:	602b      	str	r3, [r5, #0]
 8007968:	f7f9 f9c8 	bl	8000cfc <_sbrk>
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	d102      	bne.n	8007976 <_sbrk_r+0x1a>
 8007970:	682b      	ldr	r3, [r5, #0]
 8007972:	b103      	cbz	r3, 8007976 <_sbrk_r+0x1a>
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	bd38      	pop	{r3, r4, r5, pc}
 8007978:	200002e4 	.word	0x200002e4

0800797c <__malloc_lock>:
 800797c:	4801      	ldr	r0, [pc, #4]	; (8007984 <__malloc_lock+0x8>)
 800797e:	f000 b811 	b.w	80079a4 <__retarget_lock_acquire_recursive>
 8007982:	bf00      	nop
 8007984:	200002e8 	.word	0x200002e8

08007988 <__malloc_unlock>:
 8007988:	4801      	ldr	r0, [pc, #4]	; (8007990 <__malloc_unlock+0x8>)
 800798a:	f000 b80c 	b.w	80079a6 <__retarget_lock_release_recursive>
 800798e:	bf00      	nop
 8007990:	200002e8 	.word	0x200002e8

08007994 <_malloc_usable_size_r>:
 8007994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007998:	1f18      	subs	r0, r3, #4
 800799a:	2b00      	cmp	r3, #0
 800799c:	bfbc      	itt	lt
 800799e:	580b      	ldrlt	r3, [r1, r0]
 80079a0:	18c0      	addlt	r0, r0, r3
 80079a2:	4770      	bx	lr

080079a4 <__retarget_lock_acquire_recursive>:
 80079a4:	4770      	bx	lr

080079a6 <__retarget_lock_release_recursive>:
 80079a6:	4770      	bx	lr

080079a8 <_init>:
 80079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079aa:	bf00      	nop
 80079ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ae:	bc08      	pop	{r3}
 80079b0:	469e      	mov	lr, r3
 80079b2:	4770      	bx	lr

080079b4 <_fini>:
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	bf00      	nop
 80079b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ba:	bc08      	pop	{r3}
 80079bc:	469e      	mov	lr, r3
 80079be:	4770      	bx	lr
