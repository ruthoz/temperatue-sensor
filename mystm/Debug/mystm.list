
mystm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a558  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  0800a6e8  0800a6e8  0001a6e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac58  0800ac58  000202bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac58  0800ac58  0001ac58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac60  0800ac60  000202bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac60  0800ac60  0001ac60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac64  0800ac64  0001ac64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002bc  20000000  0800ac68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  200002c0  0800af24  000202c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007b8  0800af24  000207b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018440  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cf2  00000000  00000000  0003872c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  0003c420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  0003d848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a3e7  00000000  00000000  0003eab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a555  00000000  00000000  00068e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6dce  00000000  00000000  000833f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017a1c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006568  00000000  00000000  0017a214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c0 	.word	0x200002c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a6d0 	.word	0x0800a6d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c4 	.word	0x200002c4
 80001cc:	0800a6d0 	.word	0x0800a6d0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <printAppVer>:
#include "App.h"
#include <stdio.h>


void printAppVer(const Application* app)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	6078      	str	r0, [r7, #4]
	uint8_t major = app->version ;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	73fb      	strb	r3, [r7, #15]
	uint8_t minor  = app->version >> 8  ;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	0a1b      	lsrs	r3, r3, #8
 8000ee0:	73bb      	strb	r3, [r7, #14]
	uint8_t release =  app->version >> 16 ;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	0c1b      	lsrs	r3, r3, #16
 8000ee8:	737b      	strb	r3, [r7, #13]
	uint8_t build = app->version >> 24 ;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	0e1b      	lsrs	r3, r3, #24
 8000ef0:	733b      	strb	r3, [r7, #12]

	printf("%d.%d.%d.%d \r\n" , major, minor, release, build );
 8000ef2:	7bf9      	ldrb	r1, [r7, #15]
 8000ef4:	7bba      	ldrb	r2, [r7, #14]
 8000ef6:	7b78      	ldrb	r0, [r7, #13]
 8000ef8:	7b3b      	ldrb	r3, [r7, #12]
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	4603      	mov	r3, r0
 8000efe:	4803      	ldr	r0, [pc, #12]	; (8000f0c <printAppVer+0x40>)
 8000f00:	f006 fdae 	bl	8007a60 <iprintf>
}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	0800a6e8 	.word	0x0800a6e8

08000f10 <Button_init>:
uint32_t counter = 0;

/////////////////////////////////////////////////////////////////////////

void Button_init(Button* button , GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	80fb      	strh	r3, [r7, #6]
	button->state = BUTTON_STATE_NONE;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
	button->timeTickOn = 0 ;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2200      	movs	r2, #0
 8000f28:	605a      	str	r2, [r3, #4]
	button->timeTickOff = 0 ;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
	button->GPIOx = GPIOx;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	60da      	str	r2, [r3, #12]
	button->GPIO_Pin = GPIO_Pin;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	88fa      	ldrh	r2, [r7, #6]
 8000f3a:	821a      	strh	r2, [r3, #16]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <Button_interrupt>:


void Button_interrupt(Button* button)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	uint32_t delayTick = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]

	if(HAL_GPIO_ReadPin(button->GPIOx, button->GPIO_Pin) == 0){
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	8a1b      	ldrh	r3, [r3, #16]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4610      	mov	r0, r2
 8000f60:	f002 f974 	bl	800324c <HAL_GPIO_ReadPin>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d105      	bne.n	8000f76 <Button_interrupt+0x2e>
		button->timeTickOn = HAL_GetTick();
 8000f6a:	f001 fc01 	bl	8002770 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	605a      	str	r2, [r3, #4]
	     else{
		   button->state = BUTTON_STATE;
		   //MainTimer_registerCallback(Button_onTimerInterrupt , button);
	     }
	}
}
 8000f74:	e031      	b.n	8000fda <Button_interrupt+0x92>
	else if(HAL_GPIO_ReadPin(button->GPIOx, button->GPIO_Pin) == 1){
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	8a1b      	ldrh	r3, [r3, #16]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4610      	mov	r0, r2
 8000f82:	f002 f963 	bl	800324c <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d126      	bne.n	8000fda <Button_interrupt+0x92>
			button->timeTickOff = HAL_GetTick();
 8000f8c:	f001 fbf0 	bl	8002770 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	609a      	str	r2, [r3, #8]
			delayTick = button->timeTickOff - button->timeTickOn;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	60fb      	str	r3, [r7, #12]
	     if(delayTick > 500){
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fa8:	d906      	bls.n	8000fb8 <Button_interrupt+0x70>
	       button->state = BUTTON_LONG_PRESS;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2203      	movs	r2, #3
 8000fae:	701a      	strb	r2, [r3, #0]
	       printf("Long \n\r");
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <Button_interrupt+0x9c>)
 8000fb2:	f006 fd55 	bl	8007a60 <iprintf>
}
 8000fb6:	e010      	b.n	8000fda <Button_interrupt+0x92>
	     else if (button->state == BUTTON_STATE) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d109      	bne.n	8000fd4 <Button_interrupt+0x8c>
		   button->state = BUTTON_DOUBLE_PRESS;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	701a      	strb	r2, [r3, #0]
		   counter = 0;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <Button_interrupt+0xa0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
		   printf("Double \n\r");
 8000fcc:	4807      	ldr	r0, [pc, #28]	; (8000fec <Button_interrupt+0xa4>)
 8000fce:	f006 fd47 	bl	8007a60 <iprintf>
}
 8000fd2:	e002      	b.n	8000fda <Button_interrupt+0x92>
		   button->state = BUTTON_STATE;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	0800a6f8 	.word	0x0800a6f8
 8000fe8:	200002dc 	.word	0x200002dc
 8000fec:	0800a700 	.word	0x0800a700

08000ff0 <Button_onTimerInterrupt>:

void Button_onTimerInterrupt(void* obj)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	Button* button = (Button *)obj;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	60fb      	str	r3, [r7, #12]
	if (button->state == BUTTON_STATE) {
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d111      	bne.n	8001028 <Button_onTimerInterrupt+0x38>
		counter++;
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <Button_onTimerInterrupt+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	4a09      	ldr	r2, [pc, #36]	; (8001030 <Button_onTimerInterrupt+0x40>)
 800100c:	6013      	str	r3, [r2, #0]
		if(counter > 200 ){
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <Button_onTimerInterrupt+0x40>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2bc8      	cmp	r3, #200	; 0xc8
 8001014:	d908      	bls.n	8001028 <Button_onTimerInterrupt+0x38>
			button->state = BUTTON_STATE_PRESS;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2202      	movs	r2, #2
 800101a:	701a      	strb	r2, [r3, #0]
			counter = 0;
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <Button_onTimerInterrupt+0x40>)
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
			printf("One \n\r");
 8001022:	4804      	ldr	r0, [pc, #16]	; (8001034 <Button_onTimerInterrupt+0x44>)
 8001024:	f006 fd1c 	bl	8007a60 <iprintf>
		}
	}
}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200002dc 	.word	0x200002dc
 8001034:	0800a70c 	.word	0x0800a70c

08001038 <Buzzer_init>:
int note []={ 390, 340, 303, 286, 255, 227, 202};
int noteJonatan []= {255 , 303,  303,  286, 340, 340, 390, 340, 303, 286, 255, 255, 255, 255 , 303,  303,  286, 340, 340 ,390, 303, 255, 255,390};
int periodeJonatan[]={250, 250,  500,  250, 250, 500, 250, 250, 250, 250, 500, 250, 250, 250,  250,  500,  250, 250, 500, 250, 250, 250 ,500,250};

void Buzzer_init(Buzzer* buzzer)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	buzzer->state = MUSIC_OFF;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
	buzzer->sizeOfMusic = (sizeof(noteJonatan) / sizeof(noteJonatan[0]));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2218      	movs	r2, #24
 800104a:	605a      	str	r2, [r3, #4]
	buzzer->currentNote= 0;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
	buzzer->counter = 0;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
	buzzer->maxCount = periodeJonatan[0];
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <Buzzer_init+0x34>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	611a      	str	r2, [r3, #16]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	20000060 	.word	0x20000060

08001070 <Buzzer_playNote>:

void Buzzer_playNote(Buzzer* buzzer)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <Buzzer_playNote+0x54>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2200      	movs	r2, #0
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim3, noteJonatan[buzzer->currentNote]);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	4a10      	ldr	r2, [pc, #64]	; (80010c8 <Buzzer_playNote+0x58>)
 8001086:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <Buzzer_playNote+0x54>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <Buzzer_playNote+0x58>)
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	461a      	mov	r2, r3
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <Buzzer_playNote+0x54>)
 800109e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (noteJonatan[buzzer->currentNote]/2));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <Buzzer_playNote+0x58>)
 80010a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010aa:	0fda      	lsrs	r2, r3, #31
 80010ac:	4413      	add	r3, r2
 80010ae:	105b      	asrs	r3, r3, #1
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <Buzzer_playNote+0x54>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	200005ec 	.word	0x200005ec
 80010c8:	20000000 	.word	0x20000000

080010cc <Buzzer_playNextNote>:

void Buzzer_playNextNote(Buzzer* buzzer)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	buzzer->currentNote++;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	609a      	str	r2, [r3, #8]
	if(buzzer->currentNote >= buzzer->sizeOfMusic){
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	461a      	mov	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d302      	bcc.n	80010f2 <Buzzer_playNextNote+0x26>
		buzzer->currentNote = 0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
	}
	buzzer->maxCount = periodeJonatan [buzzer->currentNote];
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	4a06      	ldr	r2, [pc, #24]	; (8001110 <Buzzer_playNextNote+0x44>)
 80010f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	611a      	str	r2, [r3, #16]
	Buzzer_playNote(buzzer);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ffb5 	bl	8001070 <Buzzer_playNote>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000060 	.word	0x20000060

08001114 <Buzzer_onTimerInterrupt>:

void Buzzer_onTimerInterrupt(void* obj)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	Buzzer * buzzer = (Buzzer*)obj;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	60fb      	str	r3, [r7, #12]
	if(buzzer->state == MUSIC_ON){
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d110      	bne.n	800114a <Buzzer_onTimerInterrupt+0x36>
		buzzer->counter++;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	60da      	str	r2, [r3, #12]
		if(buzzer->counter >= buzzer->maxCount){
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	429a      	cmp	r2, r3
 800113c:	db05      	blt.n	800114a <Buzzer_onTimerInterrupt+0x36>
			Buzzer_playNextNote(buzzer);
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f7ff ffc4 	bl	80010cc <Buzzer_playNextNote>
			buzzer->counter = 0;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
		}
	}

}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <Buzzer_on>:

void Buzzer_on(Buzzer* buzzer){
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	MainTimer_registerCallback(Buzzer_onTimerInterrupt , buzzer);
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	480a      	ldr	r0, [pc, #40]	; (8001188 <Buzzer_on+0x34>)
 8001160:	f000 fc2e 	bl	80019c0 <MainTimer_registerCallback>
	buzzer->state = MUSIC_ON;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim3);
 800116a:	4808      	ldr	r0, [pc, #32]	; (800118c <Buzzer_on+0x38>)
 800116c:	f003 fc48 	bl	8004a00 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001170:	2100      	movs	r1, #0
 8001172:	4806      	ldr	r0, [pc, #24]	; (800118c <Buzzer_on+0x38>)
 8001174:	f003 fd3a 	bl	8004bec <HAL_TIM_PWM_Start_IT>
	Buzzer_playNote(buzzer);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff79 	bl	8001070 <Buzzer_playNote>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	08001115 	.word	0x08001115
 800118c:	200005ec 	.word	0x200005ec

08001190 <Buzzer_off>:

void Buzzer_off(Buzzer* buzzer){
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	MainTimer_unRegisterCallback(Buzzer_onTimerInterrupt , buzzer);
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4808      	ldr	r0, [pc, #32]	; (80011bc <Buzzer_off+0x2c>)
 800119c:	f000 fc4e 	bl	8001a3c <MainTimer_unRegisterCallback>
	buzzer->state = MUSIC_OFF;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim3);
 80011a6:	4806      	ldr	r0, [pc, #24]	; (80011c0 <Buzzer_off+0x30>)
 80011a8:	f003 fc9a 	bl	8004ae0 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 80011ac:	2100      	movs	r1, #0
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <Buzzer_off+0x30>)
 80011b0:	f003 fe70 	bl	8004e94 <HAL_TIM_PWM_Stop_IT>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	08001115 	.word	0x08001115
 80011c0:	200005ec 	.word	0x200005ec

080011c4 <Cli_cmdLedOn>:
extern Led ledR;
extern Led ledB;
extern Buzzer buzzer;
extern Flash flash;

void Cli_cmdLedOn(void* obj, char* param){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
	Led *led = (Led*)obj;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	60fb      	str	r3, [r7, #12]
	Led_on(led);
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f000 fb78 	bl	80018c8 <Led_on>
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <Cli_cmdLedOff>:

void Cli_cmdLedOff(void* obj, char* param){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
	Led *led = (Led*)obj;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60fb      	str	r3, [r7, #12]
	Led_off(led);
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f000 fb84 	bl	80018fc <Led_off>
}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <Cli_cmdLedBlink>:

void Cli_cmdLedBlink(void* obj, char* param){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
	Led *led = (Led*)obj;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	60fb      	str	r3, [r7, #12]
	int period = atoi (param);
 800120a:	6838      	ldr	r0, [r7, #0]
 800120c:	f005 ff88 	bl	8007120 <atoi>
 8001210:	60b8      	str	r0, [r7, #8]
	Led_blink(led, period);
 8001212:	68b9      	ldr	r1, [r7, #8]
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f000 fb8b 	bl	8001930 <Led_blink>
}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <Cli_cmdBuzzerOn>:
	int period = atoi (param);
	Led_setBrightness(period);
}


void Cli_cmdBuzzerOn(void* obj, char* param){
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
	Buzzer *buzzer = (Buzzer*)obj;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	60fb      	str	r3, [r7, #12]
	Buzzer_on(buzzer);
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f7ff ff8f 	bl	8001154 <Buzzer_on>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <Cli_cmdBuzzerOff>:

void Cli_cmdBuzzerOff(void* obj, char* param){
 800123e:	b580      	push	{r7, lr}
 8001240:	b084      	sub	sp, #16
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	6039      	str	r1, [r7, #0]
	Buzzer *buzzer = (Buzzer*)obj;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	60fb      	str	r3, [r7, #12]
	Buzzer_off(buzzer);
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f7ff ff9f 	bl	8001190 <Buzzer_off>
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <Cli_cmdFlashOn>:

void Cli_cmdFlashOn(void* obj, char* param){
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	6039      	str	r1, [r7, #0]
	Flash *flash = (Flash*)obj;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	60fb      	str	r3, [r7, #12]
	Flash_erase(flash);
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f000 faf3 	bl	8001854 <Flash_erase>
}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <Cli_init>:



void Cli_init(){
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	//////////////////ledR//////////////////////////////
	Communication_registerCommand("ledR", "on", Cli_cmdLedOn, &ledR);
 800127c:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <Cli_init+0x80>)
 800127e:	4a1f      	ldr	r2, [pc, #124]	; (80012fc <Cli_init+0x84>)
 8001280:	491f      	ldr	r1, [pc, #124]	; (8001300 <Cli_init+0x88>)
 8001282:	4820      	ldr	r0, [pc, #128]	; (8001304 <Cli_init+0x8c>)
 8001284:	f000 f992 	bl	80015ac <Communication_registerCommand>
	Communication_registerCommand("ledR", "off", Cli_cmdLedOff, &ledR);
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <Cli_init+0x80>)
 800128a:	4a1f      	ldr	r2, [pc, #124]	; (8001308 <Cli_init+0x90>)
 800128c:	491f      	ldr	r1, [pc, #124]	; (800130c <Cli_init+0x94>)
 800128e:	481d      	ldr	r0, [pc, #116]	; (8001304 <Cli_init+0x8c>)
 8001290:	f000 f98c 	bl	80015ac <Communication_registerCommand>
	Communication_registerCommand("ledR", "blink", Cli_cmdLedBlink, &ledR);
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <Cli_init+0x80>)
 8001296:	4a1e      	ldr	r2, [pc, #120]	; (8001310 <Cli_init+0x98>)
 8001298:	491e      	ldr	r1, [pc, #120]	; (8001314 <Cli_init+0x9c>)
 800129a:	481a      	ldr	r0, [pc, #104]	; (8001304 <Cli_init+0x8c>)
 800129c:	f000 f986 	bl	80015ac <Communication_registerCommand>

	//////////////////ledB//////////////////////////////
	Communication_registerCommand("ledB", "on", Cli_cmdLedOn, &ledB);
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <Cli_init+0xa0>)
 80012a2:	4a16      	ldr	r2, [pc, #88]	; (80012fc <Cli_init+0x84>)
 80012a4:	4916      	ldr	r1, [pc, #88]	; (8001300 <Cli_init+0x88>)
 80012a6:	481d      	ldr	r0, [pc, #116]	; (800131c <Cli_init+0xa4>)
 80012a8:	f000 f980 	bl	80015ac <Communication_registerCommand>
    Communication_registerCommand("ledB", "off", Cli_cmdLedOff, &ledB);
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <Cli_init+0xa0>)
 80012ae:	4a16      	ldr	r2, [pc, #88]	; (8001308 <Cli_init+0x90>)
 80012b0:	4916      	ldr	r1, [pc, #88]	; (800130c <Cli_init+0x94>)
 80012b2:	481a      	ldr	r0, [pc, #104]	; (800131c <Cli_init+0xa4>)
 80012b4:	f000 f97a 	bl	80015ac <Communication_registerCommand>
    Communication_registerCommand("ledB", "blink", Cli_cmdLedBlink, &ledB);
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <Cli_init+0xa0>)
 80012ba:	4a15      	ldr	r2, [pc, #84]	; (8001310 <Cli_init+0x98>)
 80012bc:	4915      	ldr	r1, [pc, #84]	; (8001314 <Cli_init+0x9c>)
 80012be:	4817      	ldr	r0, [pc, #92]	; (800131c <Cli_init+0xa4>)
 80012c0:	f000 f974 	bl	80015ac <Communication_registerCommand>

    //////////////////ledbright////////////////////////
    Communication_registerCommand("led", "bright", Cli_cmdLedOn, &ledB);
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <Cli_init+0xa0>)
 80012c6:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <Cli_init+0x84>)
 80012c8:	4915      	ldr	r1, [pc, #84]	; (8001320 <Cli_init+0xa8>)
 80012ca:	4816      	ldr	r0, [pc, #88]	; (8001324 <Cli_init+0xac>)
 80012cc:	f000 f96e 	bl	80015ac <Communication_registerCommand>

    /////////////////buzzer//////////////////////////////
    Communication_registerCommand("buzzer", "on", Cli_cmdBuzzerOn, &buzzer);
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <Cli_init+0xb0>)
 80012d2:	4a16      	ldr	r2, [pc, #88]	; (800132c <Cli_init+0xb4>)
 80012d4:	490a      	ldr	r1, [pc, #40]	; (8001300 <Cli_init+0x88>)
 80012d6:	4816      	ldr	r0, [pc, #88]	; (8001330 <Cli_init+0xb8>)
 80012d8:	f000 f968 	bl	80015ac <Communication_registerCommand>
    Communication_registerCommand("buzzer", "off", Cli_cmdBuzzerOff, &buzzer);
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <Cli_init+0xb0>)
 80012de:	4a15      	ldr	r2, [pc, #84]	; (8001334 <Cli_init+0xbc>)
 80012e0:	490a      	ldr	r1, [pc, #40]	; (800130c <Cli_init+0x94>)
 80012e2:	4813      	ldr	r0, [pc, #76]	; (8001330 <Cli_init+0xb8>)
 80012e4:	f000 f962 	bl	80015ac <Communication_registerCommand>

    ///////////////flash////////////////////////////////
    Communication_registerCommand("flash", "on", Cli_cmdFlashOn, &flash);
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <Cli_init+0xc0>)
 80012ea:	4a14      	ldr	r2, [pc, #80]	; (800133c <Cli_init+0xc4>)
 80012ec:	4904      	ldr	r1, [pc, #16]	; (8001300 <Cli_init+0x88>)
 80012ee:	4814      	ldr	r0, [pc, #80]	; (8001340 <Cli_init+0xc8>)
 80012f0:	f000 f95c 	bl	80015ac <Communication_registerCommand>
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000544 	.word	0x20000544
 80012fc:	080011c5 	.word	0x080011c5
 8001300:	0800a714 	.word	0x0800a714
 8001304:	0800a718 	.word	0x0800a718
 8001308:	080011e1 	.word	0x080011e1
 800130c:	0800a720 	.word	0x0800a720
 8001310:	080011fd 	.word	0x080011fd
 8001314:	0800a724 	.word	0x0800a724
 8001318:	20000558 	.word	0x20000558
 800131c:	0800a72c 	.word	0x0800a72c
 8001320:	0800a734 	.word	0x0800a734
 8001324:	0800a73c 	.word	0x0800a73c
 8001328:	20000580 	.word	0x20000580
 800132c:	08001223 	.word	0x08001223
 8001330:	0800a740 	.word	0x0800a740
 8001334:	0800123f 	.word	0x0800123f
 8001338:	200005d8 	.word	0x200005d8
 800133c:	0800125b 	.word	0x0800125b
 8001340:	0800a748 	.word	0x0800a748

08001344 <Clock_init>:

#include <Clock.h>
#include "MainTimer.h"

void Clock_init(Clock* clock)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	clock->tick = 0;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
	clock->seconds = 0;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	605a      	str	r2, [r3, #4]
	clock->minutes =0;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
	clock->hours = 0;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
	clock->days = 0;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
	MainTimer_registerCallback(Clock_onTimerInterrupt , clock);
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	4803      	ldr	r0, [pc, #12]	; (800137c <Clock_init+0x38>)
 800136e:	f000 fb27 	bl	80019c0 <MainTimer_registerCallback>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	08001381 	.word	0x08001381

08001380 <Clock_onTimerInterrupt>:

void Clock_onTimerInterrupt(Clock* clock)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	clock->tick++;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	1c5a      	adds	r2, r3, #1
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	601a      	str	r2, [r3, #0]
	clock->seconds = clock->tick/1000;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <Clock_onTimerInterrupt+0x68>)
 8001398:	fba2 2303 	umull	r2, r3, r2, r3
 800139c:	099b      	lsrs	r3, r3, #6
 800139e:	461a      	mov	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	605a      	str	r2, [r3, #4]
	clock->minutes = clock->tick/60000;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a10      	ldr	r2, [pc, #64]	; (80013ec <Clock_onTimerInterrupt+0x6c>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	0b9b      	lsrs	r3, r3, #14
 80013b0:	461a      	mov	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	609a      	str	r2, [r3, #8]
	clock->hours = clock->tick/360000;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	099b      	lsrs	r3, r3, #6
 80013bc:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <Clock_onTimerInterrupt+0x70>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	089b      	lsrs	r3, r3, #2
 80013c4:	461a      	mov	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60da      	str	r2, [r3, #12]
	clock->days = clock->tick/8640000;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a09      	ldr	r2, [pc, #36]	; (80013f4 <Clock_onTimerInterrupt+0x74>)
 80013d0:	fba2 2303 	umull	r2, r3, r2, r3
 80013d4:	0ddb      	lsrs	r3, r3, #23
 80013d6:	461a      	mov	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	611a      	str	r2, [r3, #16]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	10624dd3 	.word	0x10624dd3
 80013ec:	45e7b273 	.word	0x45e7b273
 80013f0:	002e9a77 	.word	0x002e9a77
 80013f4:	f88d2527 	.word	0xf88d2527

080013f8 <Communication_commTask>:
static int cmdcount = 0;
static int cmdprint = 0;

///////////////////////////////////////////////////////////////////////
int Communication_commTask()
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 80013fe:	1db9      	adds	r1, r7, #6
 8001400:	230a      	movs	r3, #10
 8001402:	2201      	movs	r2, #1
 8001404:	4836      	ldr	r0, [pc, #216]	; (80014e0 <Communication_commTask+0xe8>)
 8001406:	f004 fda3 	bl	8005f50 <HAL_UART_Receive>
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d020      	beq.n	8001456 <Communication_commTask+0x5e>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 8001414:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <Communication_commTask+0xe8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d011      	beq.n	8001446 <Communication_commTask+0x4e>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8001422:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <Communication_commTask+0xe8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2208      	movs	r2, #8
 8001428:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 800142a:	e00c      	b.n	8001446 <Communication_commTask+0x4e>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 800142c:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <Communication_commTask+0xec>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	492c      	ldr	r1, [pc, #176]	; (80014e4 <Communication_commTask+0xec>)
 8001434:	600a      	str	r2, [r1, #0]
 8001436:	4a2c      	ldr	r2, [pc, #176]	; (80014e8 <Communication_commTask+0xf0>)
 8001438:	1899      	adds	r1, r3, r2
 800143a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800143e:	2201      	movs	r2, #1
 8001440:	4827      	ldr	r0, [pc, #156]	; (80014e0 <Communication_commTask+0xe8>)
 8001442:	f004 fcf1 	bl	8005e28 <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 8001446:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <Communication_commTask+0xec>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4b28      	ldr	r3, [pc, #160]	; (80014ec <Communication_commTask+0xf4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	dbec      	blt.n	800142c <Communication_commTask+0x34>
		}

		return 0;
 8001452:	2300      	movs	r3, #0
 8001454:	e03f      	b.n	80014d6 <Communication_commTask+0xde>
	}

	if (ch != '\r' && ch != '\n')
 8001456:	79bb      	ldrb	r3, [r7, #6]
 8001458:	2b0d      	cmp	r3, #13
 800145a:	d023      	beq.n	80014a4 <Communication_commTask+0xac>
 800145c:	79bb      	ldrb	r3, [r7, #6]
 800145e:	2b0a      	cmp	r3, #10
 8001460:	d020      	beq.n	80014a4 <Communication_commTask+0xac>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <Communication_commTask+0xf4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b63      	cmp	r3, #99	; 0x63
 8001468:	dd05      	ble.n	8001476 <Communication_commTask+0x7e>
		{
			cmdcount = 0;
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <Communication_commTask+0xf4>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <Communication_commTask+0xec>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <Communication_commTask+0xf4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	491b      	ldr	r1, [pc, #108]	; (80014ec <Communication_commTask+0xf4>)
 800147e:	600a      	str	r2, [r1, #0]
 8001480:	79b9      	ldrb	r1, [r7, #6]
 8001482:	4a19      	ldr	r2, [pc, #100]	; (80014e8 <Communication_commTask+0xf0>)
 8001484:	54d1      	strb	r1, [r2, r3]
		return 0;
 8001486:	2300      	movs	r3, #0
 8001488:	e025      	b.n	80014d6 <Communication_commTask+0xde>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount)
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <Communication_commTask+0xec>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	4914      	ldr	r1, [pc, #80]	; (80014e4 <Communication_commTask+0xec>)
 8001492:	600a      	str	r2, [r1, #0]
 8001494:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <Communication_commTask+0xf0>)
 8001496:	1899      	adds	r1, r3, r2
 8001498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800149c:	2201      	movs	r2, #1
 800149e:	4810      	ldr	r0, [pc, #64]	; (80014e0 <Communication_commTask+0xe8>)
 80014a0:	f004 fcc2 	bl	8005e28 <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <Communication_commTask+0xec>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <Communication_commTask+0xf4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbec      	blt.n	800148a <Communication_commTask+0x92>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 80014b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b4:	2202      	movs	r2, #2
 80014b6:	490e      	ldr	r1, [pc, #56]	; (80014f0 <Communication_commTask+0xf8>)
 80014b8:	4809      	ldr	r0, [pc, #36]	; (80014e0 <Communication_commTask+0xe8>)
 80014ba:	f004 fcb5 	bl	8005e28 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <Communication_commTask+0xf4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a09      	ldr	r2, [pc, #36]	; (80014e8 <Communication_commTask+0xf0>)
 80014c4:	2100      	movs	r1, #0
 80014c6:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <Communication_commTask+0xf4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <Communication_commTask+0xec>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
	return 1;
 80014d4:	2301      	movs	r3, #1
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000071c 	.word	0x2000071c
 80014e4:	2000048c 	.word	0x2000048c
 80014e8:	200002e0 	.word	0x200002e0
 80014ec:	20000488 	.word	0x20000488
 80014f0:	0800a750 	.word	0x0800a750

080014f4 <Communication_handleCommand>:


void Communication_handleCommand()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b094      	sub	sp, #80	; 0x50
 80014f8:	af02      	add	r7, sp, #8
	char cmd[20];
	char state[20];
	char param [20];

   int params = sscanf((const char*)cmdbuffer, "%s %s %s", cmd, state, param );
 80014fa:	f107 0118 	add.w	r1, r7, #24
 80014fe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	460b      	mov	r3, r1
 8001508:	4923      	ldr	r1, [pc, #140]	; (8001598 <Communication_handleCommand+0xa4>)
 800150a:	4824      	ldr	r0, [pc, #144]	; (800159c <Communication_handleCommand+0xa8>)
 800150c:	f006 fb36 	bl	8007b7c <siscanf>
 8001510:	6438      	str	r0, [r7, #64]	; 0x40
   if (params == 0){
 8001512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001514:	2b00      	cmp	r3, #0
 8001516:	d03b      	beq.n	8001590 <Communication_handleCommand+0x9c>
	   return;
  }

   for(int i=0; i<counterComand ; i++){
 8001518:	2300      	movs	r3, #0
 800151a:	647b      	str	r3, [r7, #68]	; 0x44
 800151c:	e02f      	b.n	800157e <Communication_handleCommand+0x8a>
	   if(strcmp(cmd, comands[i].comandName) == 0){
 800151e:	4a20      	ldr	r2, [pc, #128]	; (80015a0 <Communication_handleCommand+0xac>)
 8001520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	4413      	add	r3, r2
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe fe4e 	bl	80001d0 <strcmp>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d11e      	bne.n	8001578 <Communication_handleCommand+0x84>
		   if(strcmp(state, comands[i].stateComand) == 0){
 800153a:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <Communication_handleCommand+0xac>)
 800153c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	4413      	add	r3, r2
 8001542:	3304      	adds	r3, #4
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	f107 0318 	add.w	r3, r7, #24
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe fe3f 	bl	80001d0 <strcmp>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10f      	bne.n	8001578 <Communication_handleCommand+0x84>
			   comands[i].comandPointer(comands[i].object, param);
 8001558:	4a11      	ldr	r2, [pc, #68]	; (80015a0 <Communication_handleCommand+0xac>)
 800155a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800155c:	011b      	lsls	r3, r3, #4
 800155e:	4413      	add	r3, r2
 8001560:	3308      	adds	r3, #8
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	490e      	ldr	r1, [pc, #56]	; (80015a0 <Communication_handleCommand+0xac>)
 8001566:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001568:	0112      	lsls	r2, r2, #4
 800156a:	440a      	add	r2, r1
 800156c:	320c      	adds	r2, #12
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	1d39      	adds	r1, r7, #4
 8001572:	4610      	mov	r0, r2
 8001574:	4798      	blx	r3
			   return;
 8001576:	e00c      	b.n	8001592 <Communication_handleCommand+0x9e>
   for(int i=0; i<counterComand ; i++){
 8001578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800157a:	3301      	adds	r3, #1
 800157c:	647b      	str	r3, [r7, #68]	; 0x44
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <Communication_handleCommand+0xb0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001584:	429a      	cmp	r2, r3
 8001586:	dbca      	blt.n	800151e <Communication_handleCommand+0x2a>
		   }
	   }
   }
   printf("Invalid command\r\n");
 8001588:	4807      	ldr	r0, [pc, #28]	; (80015a8 <Communication_handleCommand+0xb4>)
 800158a:	f006 faef 	bl	8007b6c <puts>
 800158e:	e000      	b.n	8001592 <Communication_handleCommand+0x9e>
	   return;
 8001590:	bf00      	nop

}
 8001592:	3748      	adds	r7, #72	; 0x48
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	0800a754 	.word	0x0800a754
 800159c:	200002e0 	.word	0x200002e0
 80015a0:	20000344 	.word	0x20000344
 80015a4:	20000484 	.word	0x20000484
 80015a8:	0800a760 	.word	0x0800a760

080015ac <Communication_registerCommand>:


void Communication_registerCommand(char* comandName, char* stateComand, HandlerFunc comandPointer, void* object){
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	603b      	str	r3, [r7, #0]
	comands[counterComand].comandName = comandName;
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <Communication_registerCommand+0x64>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a15      	ldr	r2, [pc, #84]	; (8001614 <Communication_registerCommand+0x68>)
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	4413      	add	r3, r2
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	601a      	str	r2, [r3, #0]
	comands[counterComand].stateComand = stateComand;
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <Communication_registerCommand+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a11      	ldr	r2, [pc, #68]	; (8001614 <Communication_registerCommand+0x68>)
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	4413      	add	r3, r2
 80015d2:	3304      	adds	r3, #4
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	601a      	str	r2, [r3, #0]
	comands[counterComand].comandPointer = comandPointer;
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <Communication_registerCommand+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <Communication_registerCommand+0x68>)
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	4413      	add	r3, r2
 80015e2:	3308      	adds	r3, #8
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	601a      	str	r2, [r3, #0]
	comands[counterComand].object = object;
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <Communication_registerCommand+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a09      	ldr	r2, [pc, #36]	; (8001614 <Communication_registerCommand+0x68>)
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	4413      	add	r3, r2
 80015f2:	330c      	adds	r3, #12
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	601a      	str	r2, [r3, #0]
	counterComand++;
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <Communication_registerCommand+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	4a04      	ldr	r2, [pc, #16]	; (8001610 <Communication_registerCommand+0x64>)
 8001600:	6013      	str	r3, [r2, #0]

}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000484 	.word	0x20000484
 8001614:	20000344 	.word	0x20000344

08001618 <Dht11_init>:
extern TIM_HandleTypeDef htim16;
extern Dht11 TempHum;


void Dht11_init(Dht11 * dht)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	dht->DhtState = STATE_SLEEP;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
	dht->gpioPin = D4_Pin;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2220      	movs	r2, #32
 800162a:	811a      	strh	r2, [r3, #8]
	dht->gpioPort = D4_GPIO_Port;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a12      	ldr	r2, [pc, #72]	; (8001678 <Dht11_init+0x60>)
 8001630:	605a      	str	r2, [r3, #4]
	memset(dht->DhtBuffer, 0, sizeof(dht->DhtBuffer));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	330a      	adds	r3, #10
 8001636:	2205      	movs	r2, #5
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f005 fd9e 	bl	800717c <memset>
	dht->humidity = 0.0;
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	dht->temperature = 0.0;
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dht->checkSum = 0;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	621a      	str	r2, [r3, #32]
	dht->bitCount = 0;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	625a      	str	r2, [r3, #36]	; 0x24
	dht->msCount = 0;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	48000400 	.word	0x48000400

0800167c <Dht11_onGpioInterrupt>:
	HAL_GPIO_Init(dht->gpioPort, &gpioStruct);
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
}

void Dht11_onGpioInterrupt(Dht11 * dht, uint16_t pin)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	807b      	strh	r3, [r7, #2]
	if(dht->DhtState == STATE_WAITING_RESPONSE_START){
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b03      	cmp	r3, #3
 800168e:	d103      	bne.n	8001698 <Dht11_onGpioInterrupt+0x1c>
		dht->DhtState = STATE_WAITING_RESPONSE_END;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2204      	movs	r2, #4
 8001694:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim16, 0);
	}
	else if(dht->DhtState == STATE_RECIVING_BIT){
		Dht11_startRead(dht);
	}
}
 8001696:	e012      	b.n	80016be <Dht11_onGpioInterrupt+0x42>
	else if(dht->DhtState == STATE_WAITING_RESPONSE_END){
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b04      	cmp	r3, #4
 800169e:	d107      	bne.n	80016b0 <Dht11_onGpioInterrupt+0x34>
		dht->DhtState = STATE_RECIVING_BIT;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2205      	movs	r2, #5
 80016a4:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim16, 0);
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <Dht11_onGpioInterrupt+0x4c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 80016ae:	e006      	b.n	80016be <Dht11_onGpioInterrupt+0x42>
	else if(dht->DhtState == STATE_RECIVING_BIT){
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b05      	cmp	r3, #5
 80016b6:	d102      	bne.n	80016be <Dht11_onGpioInterrupt+0x42>
		Dht11_startRead(dht);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f809 	bl	80016d0 <Dht11_startRead>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200006d0 	.word	0x200006d0
 80016cc:	00000000 	.word	0x00000000

080016d0 <Dht11_startRead>:
		Dht11_start(dht);
	}
}

void Dht11_startRead(Dht11 * dht)
{
 80016d0:	b5b0      	push	{r4, r5, r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	dht->DhtBuffer[dht->bitCount/8] <<= 1;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	2b00      	cmp	r3, #0
 80016de:	da00      	bge.n	80016e2 <Dht11_startRead+0x12>
 80016e0:	3307      	adds	r3, #7
 80016e2:	10db      	asrs	r3, r3, #3
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	441a      	add	r2, r3
 80016e8:	7a92      	ldrb	r2, [r2, #10]
 80016ea:	0052      	lsls	r2, r2, #1
 80016ec:	b2d1      	uxtb	r1, r2
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	460a      	mov	r2, r1
 80016f4:	729a      	strb	r2, [r3, #10]
	dht->DhtBuffer[dht->bitCount/8] |= Dht11_returnedValue(dht);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f86c 	bl	80017d4 <Dht11_returnedValue>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	2b00      	cmp	r3, #0
 8001702:	da00      	bge.n	8001706 <Dht11_startRead+0x36>
 8001704:	3307      	adds	r3, #7
 8001706:	10db      	asrs	r3, r3, #3
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	441a      	add	r2, r3
 800170c:	7a92      	ldrb	r2, [r2, #10]
 800170e:	b251      	sxtb	r1, r2
 8001710:	b242      	sxtb	r2, r0
 8001712:	430a      	orrs	r2, r1
 8001714:	b252      	sxtb	r2, r2
 8001716:	b2d1      	uxtb	r1, r2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	4413      	add	r3, r2
 800171c:	460a      	mov	r2, r1
 800171e:	729a      	strb	r2, [r3, #10]
	dht->bitCount++;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim16, 0);
 800172a:	4b29      	ldr	r3, [pc, #164]	; (80017d0 <Dht11_startRead+0x100>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
	if(dht->bitCount >= 40){
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	2b27      	cmp	r3, #39	; 0x27
 8001738:	dd3f      	ble.n	80017ba <Dht11_startRead+0xea>
		dht->DhtState = STATE_HAS_DATA;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2206      	movs	r2, #6
 800173e:	701a      	strb	r2, [r3, #0]
		dht->humidity = dht->DhtBuffer[0]+(dht->DhtBuffer[1]*0.1);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7a9b      	ldrb	r3, [r3, #10]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe fefd 	bl	8000544 <__aeabi_i2d>
 800174a:	4604      	mov	r4, r0
 800174c:	460d      	mov	r5, r1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	7adb      	ldrb	r3, [r3, #11]
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fef6 	bl	8000544 <__aeabi_i2d>
 8001758:	a31b      	add	r3, pc, #108	; (adr r3, 80017c8 <Dht11_startRead+0xf8>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	f7fe ff5b 	bl	8000618 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4620      	mov	r0, r4
 8001768:	4629      	mov	r1, r5
 800176a:	f7fe fd9f 	bl	80002ac <__adddf3>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	e9c1 2306 	strd	r2, r3, [r1, #24]
		dht->temperature = dht->DhtBuffer[2]+(dht->DhtBuffer[3]*0.1);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7b1b      	ldrb	r3, [r3, #12]
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fee1 	bl	8000544 <__aeabi_i2d>
 8001782:	4604      	mov	r4, r0
 8001784:	460d      	mov	r5, r1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	7b5b      	ldrb	r3, [r3, #13]
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe feda 	bl	8000544 <__aeabi_i2d>
 8001790:	a30d      	add	r3, pc, #52	; (adr r3, 80017c8 <Dht11_startRead+0xf8>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f7fe ff3f 	bl	8000618 <__aeabi_dmul>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4620      	mov	r0, r4
 80017a0:	4629      	mov	r1, r5
 80017a2:	f7fe fd83 	bl	80002ac <__adddf3>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
		dht->checkSum = dht->DhtBuffer[4];
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7b9b      	ldrb	r3, [r3, #14]
 80017b4:	461a      	mov	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	621a      	str	r2, [r3, #32]
	}
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bdb0      	pop	{r4, r5, r7, pc}
 80017c2:	bf00      	nop
 80017c4:	f3af 8000 	nop.w
 80017c8:	9999999a 	.word	0x9999999a
 80017cc:	3fb99999 	.word	0x3fb99999
 80017d0:	200006d0 	.word	0x200006d0

080017d4 <Dht11_returnedValue>:

int Dht11_returnedValue(Dht11 * dht)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	if(__HAL_TIM_GET_COUNTER(&htim16) > 100){ //1 write, 0 ignore
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <Dht11_returnedValue+0x24>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <Dht11_returnedValue+0x16>
		return 1;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <Dht11_returnedValue+0x18>
	}
	return 0;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	200006d0 	.word	0x200006d0

080017fc <Dht11_hasData>:

void Dht11_hasData(Dht11 * dht)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	if(dht->DhtState == STATE_HAS_DATA){
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b06      	cmp	r3, #6
 800180a:	d105      	bne.n	8001818 <Dht11_hasData+0x1c>
		Dht11_print(dht);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 f807 	bl	8001820 <Dht11_print>
		dht->DhtState = STATE_SLEEP;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
	}
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <Dht11_print>:

void Dht11_print(Dht11 * dht)
{
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b087      	sub	sp, #28
 8001824:	af04      	add	r7, sp, #16
 8001826:	6078      	str	r0, [r7, #4]
	printf("Humidity - %.2f\r\nTemperature - %.2f\r\nChekSum - %d\r\n\n",dht->humidity,dht->temperature,dht->checkSum);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001834:	687c      	ldr	r4, [r7, #4]
 8001836:	6a24      	ldr	r4, [r4, #32]
 8001838:	9402      	str	r4, [sp, #8]
 800183a:	e9cd 2300 	strd	r2, r3, [sp]
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4803      	ldr	r0, [pc, #12]	; (8001850 <Dht11_print+0x30>)
 8001844:	f006 f90c 	bl	8007a60 <iprintf>
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}
 8001850:	0800a774 	.word	0x0800a774

08001854 <Flash_erase>:
	flash->flashAdd = page256Add;
	Flash_freeWrith(flash);
}

void Flash_erase(Flash* flash)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	flash->flashState = FLASH_STATE_ERASE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	701a      	strb	r2, [r3, #0]

	basicFlash.TypeErase = FLASH_TYPEERASE_PAGES;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <Flash_erase+0x3c>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
	basicFlash.Banks = FLASH_BANK_2;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <Flash_erase+0x3c>)
 800186a:	2202      	movs	r2, #2
 800186c:	605a      	str	r2, [r3, #4]
	basicFlash.Page = flash->page;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	4a07      	ldr	r2, [pc, #28]	; (8001890 <Flash_erase+0x3c>)
 8001874:	6093      	str	r3, [r2, #8]
	basicFlash.NbPages = 1;
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <Flash_erase+0x3c>)
 8001878:	2201      	movs	r2, #1
 800187a:	60da      	str	r2, [r3, #12]

	HAL_FLASH_Unlock();
 800187c:	f001 fa00 	bl	8002c80 <HAL_FLASH_Unlock>

	HAL_FLASHEx_Erase_IT(&basicFlash);
 8001880:	4803      	ldr	r0, [pc, #12]	; (8001890 <Flash_erase+0x3c>)
 8001882:	f001 fa1f 	bl	8002cc4 <HAL_FLASHEx_Erase_IT>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000490 	.word	0x20000490

08001894 <Led_init>:
#include "MainTimer.h"

extern TIM_HandleTypeDef htim4;

void Led_init(Led* led , GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	4613      	mov	r3, r2
 80018a0:	80fb      	strh	r3, [r7, #6]
	led->state = STATE_OFF;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
	led->counter = 0 ;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	605a      	str	r2, [r3, #4]
	led->GPIOx = GPIOx;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	609a      	str	r2, [r3, #8]
	led->GPIO_Pin = GPIO_Pin;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	88fa      	ldrh	r2, [r7, #6]
 80018b8:	819a      	strh	r2, [r3, #12]
}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <Led_on>:

void Led_on(Led* led)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	MainTimer_unRegisterCallback(Led_onTimerInterrupt , led);
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4809      	ldr	r0, [pc, #36]	; (80018f8 <Led_on+0x30>)
 80018d4:	f000 f8b2 	bl	8001a3c <MainTimer_unRegisterCallback>
	led->state = STATE_ON;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 1);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6898      	ldr	r0, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	899b      	ldrh	r3, [r3, #12]
 80018e6:	2201      	movs	r2, #1
 80018e8:	4619      	mov	r1, r3
 80018ea:	f001 fcc7 	bl	800327c <HAL_GPIO_WritePin>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	08001961 	.word	0x08001961

080018fc <Led_off>:

void Led_off(Led* led)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	MainTimer_unRegisterCallback(Led_onTimerInterrupt , led);
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4809      	ldr	r0, [pc, #36]	; (800192c <Led_off+0x30>)
 8001908:	f000 f898 	bl	8001a3c <MainTimer_unRegisterCallback>
	led->state = STATE_OFF;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 0);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6898      	ldr	r0, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	899b      	ldrh	r3, [r3, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	4619      	mov	r1, r3
 800191e:	f001 fcad 	bl	800327c <HAL_GPIO_WritePin>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	08001961 	.word	0x08001961

08001930 <Led_blink>:

void Led_blink(Led* led, int period)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
	MainTimer_registerCallback(Led_onTimerInterrupt , led);
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4807      	ldr	r0, [pc, #28]	; (800195c <Led_blink+0x2c>)
 800193e:	f000 f83f 	bl	80019c0 <MainTimer_registerCallback>
	led->state = STATE_BLINKING;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2202      	movs	r2, #2
 8001946:	701a      	strb	r2, [r3, #0]
	led->period = period;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	611a      	str	r2, [r3, #16]
	led->counter = 0;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	605a      	str	r2, [r3, #4]
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	08001961 	.word	0x08001961

08001960 <Led_onTimerInterrupt>:

void Led_onTimerInterrupt(void * obj)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	Led * led = (Led *)obj;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	60fb      	str	r3, [r7, #12]
	if(led->state == STATE_BLINKING){
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d115      	bne.n	80019a0 <Led_onTimerInterrupt+0x40>
		led->counter++;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	605a      	str	r2, [r3, #4]
		if((led->counter) >= (led->period) ){
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	429a      	cmp	r2, r3
 8001988:	db0a      	blt.n	80019a0 <Led_onTimerInterrupt+0x40>
			HAL_GPIO_TogglePin(led->GPIOx, led->GPIO_Pin);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	899b      	ldrh	r3, [r3, #12]
 8001992:	4619      	mov	r1, r3
 8001994:	4610      	mov	r0, r2
 8001996:	f001 fc89 	bl	80032ac <HAL_GPIO_TogglePin>
			led->counter = 0;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]

		}
	}
}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <MainTimer_Init>:
#include <stdio.h>

static MainTimerIT MainTimer[20];
static int lastObject = 0;

void MainTimer_Init(){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	memset(MainTimer, 0 , sizeof(MainTimer));
 80019ac:	22a0      	movs	r2, #160	; 0xa0
 80019ae:	2100      	movs	r1, #0
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <MainTimer_Init+0x14>)
 80019b2:	f005 fbe3 	bl	800717c <memset>
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200004a0 	.word	0x200004a0

080019c0 <MainTimer_registerCallback>:

void MainTimer_registerCallback(TimerHandler timerHendler, void* object)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
	int i=0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
	while (MainTimer[i].timerHendler != 0){
 80019ce:	e011      	b.n	80019f4 <MainTimer_registerCallback+0x34>
		if(MainTimer[i].timerHendler == timerHendler && MainTimer[i].object == object ){
 80019d0:	4a18      	ldr	r2, [pc, #96]	; (8001a34 <MainTimer_registerCallback+0x74>)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d107      	bne.n	80019ee <MainTimer_registerCallback+0x2e>
 80019de:	4a15      	ldr	r2, [pc, #84]	; (8001a34 <MainTimer_registerCallback+0x74>)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4413      	add	r3, r2
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d01b      	beq.n	8001a26 <MainTimer_registerCallback+0x66>
			return;
		}
		i++;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	3301      	adds	r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
	while (MainTimer[i].timerHendler != 0){
 80019f4:	4a0f      	ldr	r2, [pc, #60]	; (8001a34 <MainTimer_registerCallback+0x74>)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1e7      	bne.n	80019d0 <MainTimer_registerCallback+0x10>
	}

	MainTimer[lastObject].timerHendler = timerHendler;
 8001a00:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <MainTimer_registerCallback+0x78>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	490b      	ldr	r1, [pc, #44]	; (8001a34 <MainTimer_registerCallback+0x74>)
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	MainTimer[lastObject].object = object;
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <MainTimer_registerCallback+0x78>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <MainTimer_registerCallback+0x74>)
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4413      	add	r3, r2
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	605a      	str	r2, [r3, #4]
	lastObject ++;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <MainTimer_registerCallback+0x78>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <MainTimer_registerCallback+0x78>)
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	e000      	b.n	8001a28 <MainTimer_registerCallback+0x68>
			return;
 8001a26:	bf00      	nop


}
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	200004a0 	.word	0x200004a0
 8001a38:	20000540 	.word	0x20000540

08001a3c <MainTimer_unRegisterCallback>:

void MainTimer_unRegisterCallback(TimerHandler timerHendler, void* object)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
	int i=0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
	while (MainTimer[i].timerHendler != 0){
 8001a4a:	e03c      	b.n	8001ac6 <MainTimer_unRegisterCallback+0x8a>
		if(MainTimer[i].timerHendler == timerHendler && MainTimer[i].object == object ){
 8001a4c:	4a26      	ldr	r2, [pc, #152]	; (8001ae8 <MainTimer_unRegisterCallback+0xac>)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d132      	bne.n	8001ac0 <MainTimer_unRegisterCallback+0x84>
 8001a5a:	4a23      	ldr	r2, [pc, #140]	; (8001ae8 <MainTimer_unRegisterCallback+0xac>)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4413      	add	r3, r2
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d12a      	bne.n	8001ac0 <MainTimer_unRegisterCallback+0x84>
			MainTimer[i].timerHendler = MainTimer[lastObject-1].timerHendler;
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <MainTimer_unRegisterCallback+0xb0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <MainTimer_unRegisterCallback+0xac>)
 8001a72:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001a76:	491c      	ldr	r1, [pc, #112]	; (8001ae8 <MainTimer_unRegisterCallback+0xac>)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			MainTimer[i].object = MainTimer[lastObject-1].object;
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <MainTimer_unRegisterCallback+0xb0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	4a18      	ldr	r2, [pc, #96]	; (8001ae8 <MainTimer_unRegisterCallback+0xac>)
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4413      	add	r3, r2
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	4916      	ldr	r1, [pc, #88]	; (8001ae8 <MainTimer_unRegisterCallback+0xac>)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	440b      	add	r3, r1
 8001a94:	605a      	str	r2, [r3, #4]
			MainTimer[lastObject-1].timerHendler = 0;
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <MainTimer_unRegisterCallback+0xb0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <MainTimer_unRegisterCallback+0xac>)
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
			MainTimer[lastObject-1].object = 0;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MainTimer_unRegisterCallback+0xb0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	4a0f      	ldr	r2, [pc, #60]	; (8001ae8 <MainTimer_unRegisterCallback+0xac>)
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	4413      	add	r3, r2
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	605a      	str	r2, [r3, #4]
			lastObject--;
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <MainTimer_unRegisterCallback+0xb0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	4a0c      	ldr	r2, [pc, #48]	; (8001aec <MainTimer_unRegisterCallback+0xb0>)
 8001abc:	6013      	str	r3, [r2, #0]
			break;
 8001abe:	e008      	b.n	8001ad2 <MainTimer_unRegisterCallback+0x96>
		}
		i++;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
	while (MainTimer[i].timerHendler != 0){
 8001ac6:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <MainTimer_unRegisterCallback+0xac>)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1bc      	bne.n	8001a4c <MainTimer_unRegisterCallback+0x10>
	}
    printf("lastObject= %d  \r\n", lastObject);
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <MainTimer_unRegisterCallback+0xb0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <MainTimer_unRegisterCallback+0xb4>)
 8001ada:	f005 ffc1 	bl	8007a60 <iprintf>
}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200004a0 	.word	0x200004a0
 8001aec:	20000540 	.word	0x20000540
 8001af0:	0800a7e4 	.word	0x0800a7e4

08001af4 <MainTimer_onTimerInterrupt>:

void MainTimer_onTimerInterrupt()
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
	int i=0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
	while (MainTimer[i].timerHendler != 0){
 8001afe:	e00d      	b.n	8001b1c <MainTimer_onTimerInterrupt+0x28>
		MainTimer[i].timerHendler (MainTimer[i].object);
 8001b00:	4a0c      	ldr	r2, [pc, #48]	; (8001b34 <MainTimer_onTimerInterrupt+0x40>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001b08:	490a      	ldr	r1, [pc, #40]	; (8001b34 <MainTimer_onTimerInterrupt+0x40>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	440b      	add	r3, r1
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4618      	mov	r0, r3
 8001b14:	4790      	blx	r2
		i++;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	607b      	str	r3, [r7, #4]
	while (MainTimer[i].timerHendler != 0){
 8001b1c:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <MainTimer_onTimerInterrupt+0x40>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1eb      	bne.n	8001b00 <MainTimer_onTimerInterrupt+0xc>
	}
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200004a0 	.word	0x200004a0

08001b38 <_write>:
Flash flash;


//////////////////////////////////////////////////////////////
int _write(int fd, char* ptr, int len)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	4804      	ldr	r0, [pc, #16]	; (8001b60 <_write+0x28>)
 8001b50:	f004 f96a 	bl	8005e28 <HAL_UART_Transmit>
	return len;
 8001b54:	687b      	ldr	r3, [r7, #4]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000071c 	.word	0x2000071c

08001b64 <HAL_TIM_PeriodElapsedCallback>:
//////////////////////////////////////////////////////////////

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d104      	bne.n	8001b7e <HAL_TIM_PeriodElapsedCallback+0x1a>
		MainTimer_onTimerInterrupt();
 8001b74:	f7ff ffbe 	bl	8001af4 <MainTimer_onTimerInterrupt>

	/////////////buzzer//////////////////////////////////
	//	Buzzer_onTimerInterrupt(&buzzer);

	///////////button///////////////////////////////////
		Button_onTimerInterrupt(&button1);
 8001b78:	4804      	ldr	r0, [pc, #16]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001b7a:	f7ff fa39 	bl	8000ff0 <Button_onTimerInterrupt>
	//flash_onTimerInterrupt(&flash);


	}

}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000684 	.word	0x20000684
 8001b8c:	2000056c 	.word	0x2000056c

08001b90 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TempHum.gpioPin){
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x30>)
 8001b9c:	891b      	ldrh	r3, [r3, #8]
 8001b9e:	88fa      	ldrh	r2, [r7, #6]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d105      	bne.n	8001bb0 <HAL_GPIO_EXTI_Callback+0x20>
		Dht11_onGpioInterrupt(&TempHum, TempHum.gpioPin);
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x30>)
 8001ba6:	891b      	ldrh	r3, [r3, #8]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x30>)
 8001bac:	f7ff fd66 	bl	800167c <Dht11_onGpioInterrupt>
	}

	Button_interrupt(&button1);
 8001bb0:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <HAL_GPIO_EXTI_Callback+0x34>)
 8001bb2:	f7ff f9c9 	bl	8000f48 <Button_interrupt>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200005a8 	.word	0x200005a8
 8001bc4:	2000056c 	.word	0x2000056c

08001bc8 <MyFlashInterruptHandler>:


void MyFlashInterruptHandler()
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
	if(flash.flashState==FLASH_STATE_WRITE){
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <MyFlashInterruptHandler+0x2c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d102      	bne.n	8001bda <MyFlashInterruptHandler+0x12>
		flash.flashState=FLASH_STATE_NONE;
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <MyFlashInterruptHandler+0x2c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
	}
	if(flash.flashState==FLASH_STATE_ERASE){
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <MyFlashInterruptHandler+0x2c>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d102      	bne.n	8001be8 <MyFlashInterruptHandler+0x20>
		flash.flashState=FLASH_STATE_WRITE;
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <MyFlashInterruptHandler+0x2c>)
 8001be4:	2202      	movs	r2, #2
 8001be6:	701a      	strb	r2, [r3, #0]
	}
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	200005d8 	.word	0x200005d8

08001bf8 <mainloop>:


void mainloop()
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8001bfc:	4818      	ldr	r0, [pc, #96]	; (8001c60 <mainloop+0x68>)
 8001bfe:	f002 feff 	bl	8004a00 <HAL_TIM_Base_Start_IT>

	MainTimer_Init();
 8001c02:	f7ff fed1 	bl	80019a8 <MainTimer_Init>
	Led_init(&ledB , LD2_GPIO_Port , LD2_Pin );
 8001c06:	2220      	movs	r2, #32
 8001c08:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001c0c:	4815      	ldr	r0, [pc, #84]	; (8001c64 <mainloop+0x6c>)
 8001c0e:	f7ff fe41 	bl	8001894 <Led_init>
	Led_init(&ledR , LD3_GPIO_Port , LD3_Pin );
 8001c12:	2240      	movs	r2, #64	; 0x40
 8001c14:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001c18:	4813      	ldr	r0, [pc, #76]	; (8001c68 <mainloop+0x70>)
 8001c1a:	f7ff fe3b 	bl	8001894 <Led_init>
	Buzzer_init(&buzzer);
 8001c1e:	4813      	ldr	r0, [pc, #76]	; (8001c6c <mainloop+0x74>)
 8001c20:	f7ff fa0a 	bl	8001038 <Buzzer_init>
	Clock_init(&clock1);
 8001c24:	4812      	ldr	r0, [pc, #72]	; (8001c70 <mainloop+0x78>)
 8001c26:	f7ff fb8d 	bl	8001344 <Clock_init>
	Button_init(&button1, B2_GPIO_Port ,  B2_Pin);
 8001c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c2e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001c32:	4810      	ldr	r0, [pc, #64]	; (8001c74 <mainloop+0x7c>)
 8001c34:	f7ff f96c 	bl	8000f10 <Button_init>
	//Flash_init(&flash);
	Cli_init();
 8001c38:	f7ff fb1e 	bl	8001278 <Cli_init>
	Dht11_init(&TempHum);
 8001c3c:	480e      	ldr	r0, [pc, #56]	; (8001c78 <mainloop+0x80>)
 8001c3e:	f7ff fceb 	bl	8001618 <Dht11_init>

#ifdef DEBUG
	printAppVer(&app);
 8001c42:	480e      	ldr	r0, [pc, #56]	; (8001c7c <mainloop+0x84>)
 8001c44:	f7ff f942 	bl	8000ecc <printAppVer>
#endif

	while(1){
		Dht11_hasData(&TempHum);
 8001c48:	480b      	ldr	r0, [pc, #44]	; (8001c78 <mainloop+0x80>)
 8001c4a:	f7ff fdd7 	bl	80017fc <Dht11_hasData>
		if (Communication_commTask()){
 8001c4e:	f7ff fbd3 	bl	80013f8 <Communication_commTask>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f7      	beq.n	8001c48 <mainloop+0x50>
			Communication_handleCommand();
 8001c58:	f7ff fc4c 	bl	80014f4 <Communication_handleCommand>
		Dht11_hasData(&TempHum);
 8001c5c:	e7f4      	b.n	8001c48 <mainloop+0x50>
 8001c5e:	bf00      	nop
 8001c60:	20000684 	.word	0x20000684
 8001c64:	20000558 	.word	0x20000558
 8001c68:	20000544 	.word	0x20000544
 8001c6c:	20000580 	.word	0x20000580
 8001c70:	20000594 	.word	0x20000594
 8001c74:	2000056c 	.word	0x2000056c
 8001c78:	200005a8 	.word	0x200005a8
 8001c7c:	0800a804 	.word	0x0800a804

08001c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c84:	f000 fd04 	bl	8002690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c88:	f000 f80f 	bl	8001caa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c8c:	f000 f99c 	bl	8001fc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c90:	f000 f96a 	bl	8001f68 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001c94:	f000 f90c 	bl	8001eb0 <MX_TIM6_Init>
  MX_TIM3_Init();
 8001c98:	f000 f858 	bl	8001d4c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c9c:	f000 f8ae 	bl	8001dfc <MX_TIM4_Init>
  MX_TIM16_Init();
 8001ca0:	f000 f93c 	bl	8001f1c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  mainloop();
 8001ca4:	f7ff ffa8 	bl	8001bf8 <mainloop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <main+0x28>

08001caa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b096      	sub	sp, #88	; 0x58
 8001cae:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	2244      	movs	r2, #68	; 0x44
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f005 fa5f 	bl	800717c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cbe:	463b      	mov	r3, r7
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ccc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001cd0:	f001 fb2c 	bl	800332c <HAL_PWREx_ControlVoltageScaling>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001cda:	f000 fa07 	bl	80020ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ce6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ce8:	2310      	movs	r3, #16
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cec:	2302      	movs	r3, #2
 8001cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001cf8:	230a      	movs	r3, #10
 8001cfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001cfc:	2307      	movs	r3, #7
 8001cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d00:	2302      	movs	r3, #2
 8001d02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d04:	2302      	movs	r3, #2
 8001d06:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f001 fb63 	bl	80033d8 <HAL_RCC_OscConfig>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001d18:	f000 f9e8 	bl	80020ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d1c:	230f      	movs	r3, #15
 8001d1e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d20:	2303      	movs	r3, #3
 8001d22:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d30:	463b      	mov	r3, r7
 8001d32:	2104      	movs	r1, #4
 8001d34:	4618      	mov	r0, r3
 8001d36:	f001 ff2b 	bl	8003b90 <HAL_RCC_ClockConfig>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d40:	f000 f9d4 	bl	80020ec <Error_Handler>
  }
}
 8001d44:	bf00      	nop
 8001d46:	3758      	adds	r7, #88	; 0x58
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d52:	f107 031c 	add.w	r3, r7, #28
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d5e:	463b      	mov	r3, r7
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
 8001d6c:	615a      	str	r2, [r3, #20]
 8001d6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d70:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <MX_TIM3_Init+0xa8>)
 8001d72:	4a21      	ldr	r2, [pc, #132]	; (8001df8 <MX_TIM3_Init+0xac>)
 8001d74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800;
 8001d76:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <MX_TIM3_Init+0xa8>)
 8001d78:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7e:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <MX_TIM3_Init+0xa8>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <MX_TIM3_Init+0xa8>)
 8001d86:	2264      	movs	r2, #100	; 0x64
 8001d88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <MX_TIM3_Init+0xa8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <MX_TIM3_Init+0xa8>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d96:	4817      	ldr	r0, [pc, #92]	; (8001df4 <MX_TIM3_Init+0xa8>)
 8001d98:	f002 fed1 	bl	8004b3e <HAL_TIM_PWM_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001da2:	f000 f9a3 	bl	80020ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dae:	f107 031c 	add.w	r3, r7, #28
 8001db2:	4619      	mov	r1, r3
 8001db4:	480f      	ldr	r0, [pc, #60]	; (8001df4 <MX_TIM3_Init+0xa8>)
 8001db6:	f003 ff43 	bl	8005c40 <HAL_TIMEx_MasterConfigSynchronization>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001dc0:	f000 f994 	bl	80020ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc4:	2360      	movs	r3, #96	; 0x60
 8001dc6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001dc8:	230a      	movs	r3, #10
 8001dca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4806      	ldr	r0, [pc, #24]	; (8001df4 <MX_TIM3_Init+0xa8>)
 8001ddc:	f003 fa5e 	bl	800529c <HAL_TIM_PWM_ConfigChannel>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001de6:	f000 f981 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dea:	bf00      	nop
 8001dec:	3728      	adds	r7, #40	; 0x28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200005ec 	.word	0x200005ec
 8001df8:	40000400 	.word	0x40000400

08001dfc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	; 0x28
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e02:	f107 031c 	add.w	r3, r7, #28
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e0e:	463b      	mov	r3, r7
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
 8001e1c:	615a      	str	r2, [r3, #20]
 8001e1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e20:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <MX_TIM4_Init+0xac>)
 8001e22:	4a22      	ldr	r2, [pc, #136]	; (8001eac <MX_TIM4_Init+0xb0>)
 8001e24:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000;
 8001e26:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <MX_TIM4_Init+0xac>)
 8001e28:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001e2c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <MX_TIM4_Init+0xac>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001e34:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <MX_TIM4_Init+0xac>)
 8001e36:	2264      	movs	r2, #100	; 0x64
 8001e38:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <MX_TIM4_Init+0xac>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <MX_TIM4_Init+0xac>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e46:	4818      	ldr	r0, [pc, #96]	; (8001ea8 <MX_TIM4_Init+0xac>)
 8001e48:	f002 fe79 	bl	8004b3e <HAL_TIM_PWM_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001e52:	f000 f94b 	bl	80020ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	4619      	mov	r1, r3
 8001e64:	4810      	ldr	r0, [pc, #64]	; (8001ea8 <MX_TIM4_Init+0xac>)
 8001e66:	f003 feeb 	bl	8005c40 <HAL_TIMEx_MasterConfigSynchronization>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001e70:	f000 f93c 	bl	80020ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e74:	2360      	movs	r3, #96	; 0x60
 8001e76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30;
 8001e78:	231e      	movs	r3, #30
 8001e7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e84:	463b      	mov	r3, r7
 8001e86:	2200      	movs	r2, #0
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4807      	ldr	r0, [pc, #28]	; (8001ea8 <MX_TIM4_Init+0xac>)
 8001e8c:	f003 fa06 	bl	800529c <HAL_TIM_PWM_ConfigChannel>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001e96:	f000 f929 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e9a:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <MX_TIM4_Init+0xac>)
 8001e9c:	f000 fa08 	bl	80022b0 <HAL_TIM_MspPostInit>

}
 8001ea0:	bf00      	nop
 8001ea2:	3728      	adds	r7, #40	; 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000638 	.word	0x20000638
 8001eac:	40000800 	.word	0x40000800

08001eb0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <MX_TIM6_Init+0x64>)
 8001ec2:	4a15      	ldr	r2, [pc, #84]	; (8001f18 <MX_TIM6_Init+0x68>)
 8001ec4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000;
 8001ec6:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <MX_TIM6_Init+0x64>)
 8001ec8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001ecc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <MX_TIM6_Init+0x64>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <MX_TIM6_Init+0x64>)
 8001ed6:	220a      	movs	r2, #10
 8001ed8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <MX_TIM6_Init+0x64>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ee0:	480c      	ldr	r0, [pc, #48]	; (8001f14 <MX_TIM6_Init+0x64>)
 8001ee2:	f002 fd35 	bl	8004950 <HAL_TIM_Base_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001eec:	f000 f8fe 	bl	80020ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	4619      	mov	r1, r3
 8001efc:	4805      	ldr	r0, [pc, #20]	; (8001f14 <MX_TIM6_Init+0x64>)
 8001efe:	f003 fe9f 	bl	8005c40 <HAL_TIMEx_MasterConfigSynchronization>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001f08:	f000 f8f0 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000684 	.word	0x20000684
 8001f18:	40001000 	.word	0x40001000

08001f1c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <MX_TIM16_Init+0x44>)
 8001f22:	4a10      	ldr	r2, [pc, #64]	; (8001f64 <MX_TIM16_Init+0x48>)
 8001f24:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <MX_TIM16_Init+0x44>)
 8001f28:	224f      	movs	r2, #79	; 0x4f
 8001f2a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <MX_TIM16_Init+0x44>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <MX_TIM16_Init+0x44>)
 8001f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f38:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <MX_TIM16_Init+0x44>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <MX_TIM16_Init+0x44>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <MX_TIM16_Init+0x44>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001f4c:	4804      	ldr	r0, [pc, #16]	; (8001f60 <MX_TIM16_Init+0x44>)
 8001f4e:	f002 fcff 	bl	8004950 <HAL_TIM_Base_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001f58:	f000 f8c8 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	200006d0 	.word	0x200006d0
 8001f64:	40014400 	.word	0x40014400

08001f68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f6c:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <MX_USART2_UART_Init+0x58>)
 8001f6e:	4a15      	ldr	r2, [pc, #84]	; (8001fc4 <MX_USART2_UART_Init+0x5c>)
 8001f70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <MX_USART2_UART_Init+0x58>)
 8001f74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <MX_USART2_UART_Init+0x58>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f80:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <MX_USART2_UART_Init+0x58>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <MX_USART2_UART_Init+0x58>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <MX_USART2_UART_Init+0x58>)
 8001f8e:	220c      	movs	r2, #12
 8001f90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <MX_USART2_UART_Init+0x58>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <MX_USART2_UART_Init+0x58>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f9e:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <MX_USART2_UART_Init+0x58>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <MX_USART2_UART_Init+0x58>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001faa:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <MX_USART2_UART_Init+0x58>)
 8001fac:	f003 feee 	bl	8005d8c <HAL_UART_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001fb6:	f000 f899 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2000071c 	.word	0x2000071c
 8001fc4:	40004400 	.word	0x40004400

08001fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	; 0x28
 8001fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
 8001fdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fde:	4b40      	ldr	r3, [pc, #256]	; (80020e0 <MX_GPIO_Init+0x118>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	4a3f      	ldr	r2, [pc, #252]	; (80020e0 <MX_GPIO_Init+0x118>)
 8001fe4:	f043 0304 	orr.w	r3, r3, #4
 8001fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fea:	4b3d      	ldr	r3, [pc, #244]	; (80020e0 <MX_GPIO_Init+0x118>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ff6:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <MX_GPIO_Init+0x118>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffa:	4a39      	ldr	r2, [pc, #228]	; (80020e0 <MX_GPIO_Init+0x118>)
 8001ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002002:	4b37      	ldr	r3, [pc, #220]	; (80020e0 <MX_GPIO_Init+0x118>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800200e:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <MX_GPIO_Init+0x118>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002012:	4a33      	ldr	r2, [pc, #204]	; (80020e0 <MX_GPIO_Init+0x118>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800201a:	4b31      	ldr	r3, [pc, #196]	; (80020e0 <MX_GPIO_Init+0x118>)
 800201c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	4b2e      	ldr	r3, [pc, #184]	; (80020e0 <MX_GPIO_Init+0x118>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202a:	4a2d      	ldr	r2, [pc, #180]	; (80020e0 <MX_GPIO_Init+0x118>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002032:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <MX_GPIO_Init+0x118>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 800203e:	2200      	movs	r2, #0
 8002040:	2160      	movs	r1, #96	; 0x60
 8002042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002046:	f001 f919 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	2120      	movs	r1, #32
 800204e:	4825      	ldr	r0, [pc, #148]	; (80020e4 <MX_GPIO_Init+0x11c>)
 8002050:	f001 f914 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800205a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800205e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	4619      	mov	r1, r3
 800206a:	481f      	ldr	r0, [pc, #124]	; (80020e8 <MX_GPIO_Init+0x120>)
 800206c:	f000 ff44 	bl	8002ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 8002070:	2360      	movs	r3, #96	; 0x60
 8002072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002074:	2301      	movs	r3, #1
 8002076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	4619      	mov	r1, r3
 8002086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208a:	f000 ff35 	bl	8002ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 800208e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002094:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	4619      	mov	r1, r3
 80020a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a8:	f000 ff26 	bl	8002ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_Pin */
  GPIO_InitStruct.Pin = D4_Pin;
 80020ac:	2320      	movs	r3, #32
 80020ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b0:	2301      	movs	r3, #1
 80020b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	4619      	mov	r1, r3
 80020c2:	4808      	ldr	r0, [pc, #32]	; (80020e4 <MX_GPIO_Init+0x11c>)
 80020c4:	f000 ff18 	bl	8002ef8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2100      	movs	r1, #0
 80020cc:	2028      	movs	r0, #40	; 0x28
 80020ce:	f000 fc36 	bl	800293e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020d2:	2028      	movs	r0, #40	; 0x28
 80020d4:	f000 fc4f 	bl	8002976 <HAL_NVIC_EnableIRQ>

}
 80020d8:	bf00      	nop
 80020da:	3728      	adds	r7, #40	; 0x28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000
 80020e4:	48000400 	.word	0x48000400
 80020e8:	48000800 	.word	0x48000800

080020ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020f0:	b672      	cpsid	i
}
 80020f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <Error_Handler+0x8>
	...

080020f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fe:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <HAL_MspInit+0x70>)
 8002100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002102:	4a19      	ldr	r2, [pc, #100]	; (8002168 <HAL_MspInit+0x70>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6613      	str	r3, [r2, #96]	; 0x60
 800210a:	4b17      	ldr	r3, [pc, #92]	; (8002168 <HAL_MspInit+0x70>)
 800210c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <HAL_MspInit+0x70>)
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	4a13      	ldr	r2, [pc, #76]	; (8002168 <HAL_MspInit+0x70>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002120:	6593      	str	r3, [r2, #88]	; 0x58
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_MspInit+0x70>)
 8002124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	2100      	movs	r1, #0
 8002132:	2004      	movs	r0, #4
 8002134:	f000 fc03 	bl	800293e <HAL_NVIC_SetPriority>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8002138:	2004      	movs	r0, #4
 800213a:	f000 fc1c 	bl	8002976 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2100      	movs	r1, #0
 8002142:	2005      	movs	r0, #5
 8002144:	f000 fbfb 	bl	800293e <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002148:	2005      	movs	r0, #5
 800214a:	f000 fc14 	bl	8002976 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	2100      	movs	r1, #0
 8002152:	2005      	movs	r0, #5
 8002154:	f000 fbf3 	bl	800293e <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002158:	2005      	movs	r0, #5
 800215a:	f000 fc0c 	bl	8002976 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000

0800216c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	; 0x28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM3)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a28      	ldr	r2, [pc, #160]	; (800222c <HAL_TIM_PWM_MspInit+0xc0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d130      	bne.n	80021f0 <HAL_TIM_PWM_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800218e:	4b28      	ldr	r3, [pc, #160]	; (8002230 <HAL_TIM_PWM_MspInit+0xc4>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	4a27      	ldr	r2, [pc, #156]	; (8002230 <HAL_TIM_PWM_MspInit+0xc4>)
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	6593      	str	r3, [r2, #88]	; 0x58
 800219a:	4b25      	ldr	r3, [pc, #148]	; (8002230 <HAL_TIM_PWM_MspInit+0xc4>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a6:	4b22      	ldr	r3, [pc, #136]	; (8002230 <HAL_TIM_PWM_MspInit+0xc4>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	4a21      	ldr	r2, [pc, #132]	; (8002230 <HAL_TIM_PWM_MspInit+0xc4>)
 80021ac:	f043 0302 	orr.w	r3, r3, #2
 80021b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021b2:	4b1f      	ldr	r3, [pc, #124]	; (8002230 <HAL_TIM_PWM_MspInit+0xc4>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021be:	2310      	movs	r3, #16
 80021c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2300      	movs	r3, #0
 80021cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021ce:	2302      	movs	r3, #2
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4619      	mov	r1, r3
 80021d8:	4816      	ldr	r0, [pc, #88]	; (8002234 <HAL_TIM_PWM_MspInit+0xc8>)
 80021da:	f000 fe8d 	bl	8002ef8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	201d      	movs	r0, #29
 80021e4:	f000 fbab 	bl	800293e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021e8:	201d      	movs	r0, #29
 80021ea:	f000 fbc4 	bl	8002976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021ee:	e018      	b.n	8002222 <HAL_TIM_PWM_MspInit+0xb6>
  else if(htim_pwm->Instance==TIM4)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a10      	ldr	r2, [pc, #64]	; (8002238 <HAL_TIM_PWM_MspInit+0xcc>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d113      	bne.n	8002222 <HAL_TIM_PWM_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <HAL_TIM_PWM_MspInit+0xc4>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fe:	4a0c      	ldr	r2, [pc, #48]	; (8002230 <HAL_TIM_PWM_MspInit+0xc4>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	6593      	str	r3, [r2, #88]	; 0x58
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <HAL_TIM_PWM_MspInit+0xc4>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	201e      	movs	r0, #30
 8002218:	f000 fb91 	bl	800293e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800221c:	201e      	movs	r0, #30
 800221e:	f000 fbaa 	bl	8002976 <HAL_NVIC_EnableIRQ>
}
 8002222:	bf00      	nop
 8002224:	3728      	adds	r7, #40	; 0x28
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40000400 	.word	0x40000400
 8002230:	40021000 	.word	0x40021000
 8002234:	48000400 	.word	0x48000400
 8002238:	40000800 	.word	0x40000800

0800223c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a16      	ldr	r2, [pc, #88]	; (80022a4 <HAL_TIM_Base_MspInit+0x68>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d114      	bne.n	8002278 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002254:	f043 0310 	orr.w	r3, r3, #16
 8002258:	6593      	str	r3, [r2, #88]	; 0x58
 800225a:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <HAL_TIM_Base_MspInit+0x6c>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	2036      	movs	r0, #54	; 0x36
 800226c:	f000 fb67 	bl	800293e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002270:	2036      	movs	r0, #54	; 0x36
 8002272:	f000 fb80 	bl	8002976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002276:	e010      	b.n	800229a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <HAL_TIM_Base_MspInit+0x70>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10b      	bne.n	800229a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002286:	4a08      	ldr	r2, [pc, #32]	; (80022a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228c:	6613      	str	r3, [r2, #96]	; 0x60
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]
}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40001000 	.word	0x40001000
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40014400 	.word	0x40014400

080022b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a11      	ldr	r2, [pc, #68]	; (8002314 <HAL_TIM_MspPostInit+0x64>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d11b      	bne.n	800230a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_TIM_MspPostInit+0x68>)
 80022d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d6:	4a10      	ldr	r2, [pc, #64]	; (8002318 <HAL_TIM_MspPostInit+0x68>)
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <HAL_TIM_MspPostInit+0x68>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022ea:	2340      	movs	r3, #64	; 0x40
 80022ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022fa:	2302      	movs	r3, #2
 80022fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fe:	f107 030c 	add.w	r3, r7, #12
 8002302:	4619      	mov	r1, r3
 8002304:	4805      	ldr	r0, [pc, #20]	; (800231c <HAL_TIM_MspPostInit+0x6c>)
 8002306:	f000 fdf7 	bl	8002ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800230a:	bf00      	nop
 800230c:	3720      	adds	r7, #32
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40000800 	.word	0x40000800
 8002318:	40021000 	.word	0x40021000
 800231c:	48000400 	.word	0x48000400

08002320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b0ac      	sub	sp, #176	; 0xb0
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	2288      	movs	r2, #136	; 0x88
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f004 ff1b 	bl	800717c <memset>
  if(huart->Instance==USART2)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a25      	ldr	r2, [pc, #148]	; (80023e0 <HAL_UART_MspInit+0xc0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d143      	bne.n	80023d8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002350:	2302      	movs	r3, #2
 8002352:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002354:	2300      	movs	r3, #0
 8002356:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	4618      	mov	r0, r3
 800235e:	f001 fe3b 	bl	8003fd8 <HAL_RCCEx_PeriphCLKConfig>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002368:	f7ff fec0 	bl	80020ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_UART_MspInit+0xc4>)
 800236e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002370:	4a1c      	ldr	r2, [pc, #112]	; (80023e4 <HAL_UART_MspInit+0xc4>)
 8002372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002376:	6593      	str	r3, [r2, #88]	; 0x58
 8002378:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <HAL_UART_MspInit+0xc4>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002384:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <HAL_UART_MspInit+0xc4>)
 8002386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002388:	4a16      	ldr	r2, [pc, #88]	; (80023e4 <HAL_UART_MspInit+0xc4>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <HAL_UART_MspInit+0xc4>)
 8002392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800239c:	230c      	movs	r3, #12
 800239e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023b4:	2307      	movs	r3, #7
 80023b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023be:	4619      	mov	r1, r3
 80023c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c4:	f000 fd98 	bl	8002ef8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023c8:	2200      	movs	r2, #0
 80023ca:	2100      	movs	r1, #0
 80023cc:	2026      	movs	r0, #38	; 0x26
 80023ce:	f000 fab6 	bl	800293e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023d2:	2026      	movs	r0, #38	; 0x26
 80023d4:	f000 facf 	bl	8002976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023d8:	bf00      	nop
 80023da:	37b0      	adds	r7, #176	; 0xb0
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40004400 	.word	0x40004400
 80023e4:	40021000 	.word	0x40021000

080023e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023ec:	e7fe      	b.n	80023ec <NMI_Handler+0x4>

080023ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f2:	e7fe      	b.n	80023f2 <HardFault_Handler+0x4>

080023f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f8:	e7fe      	b.n	80023f8 <MemManage_Handler+0x4>

080023fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fe:	e7fe      	b.n	80023fe <BusFault_Handler+0x4>

08002400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <UsageFault_Handler+0x4>

08002406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002434:	f000 f988 	bl	8002748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}

0800243c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002440:	f000 fb32 	bl	8002aa8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */
  MyFlashInterruptHandler();
 8002444:	f7ff fbc0 	bl	8001bc8 <MyFlashInterruptHandler>
  /* USER CODE END FLASH_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}

0800244c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002460:	4802      	ldr	r0, [pc, #8]	; (800246c <TIM3_IRQHandler+0x10>)
 8002462:	f002 fdfb 	bl	800505c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	200005ec 	.word	0x200005ec

08002470 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002474:	4802      	ldr	r0, [pc, #8]	; (8002480 <TIM4_IRQHandler+0x10>)
 8002476:	f002 fdf1 	bl	800505c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000638 	.word	0x20000638

08002484 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <USART2_IRQHandler+0x10>)
 800248a:	f003 fe33 	bl	80060f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	2000071c 	.word	0x2000071c

08002498 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 800249c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80024a0:	f000 ff1e 	bl	80032e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80024a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024a8:	f000 ff1a 	bl	80032e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <TIM6_DAC_IRQHandler+0x10>)
 80024b6:	f002 fdd1 	bl	800505c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000684 	.word	0x20000684

080024c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
	return 1;
 80024c8:	2301      	movs	r3, #1
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <_kill>:

int _kill(int pid, int sig)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024de:	f004 fe23 	bl	8007128 <__errno>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2216      	movs	r2, #22
 80024e6:	601a      	str	r2, [r3, #0]
	return -1;
 80024e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <_exit>:

void _exit (int status)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ffe7 	bl	80024d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002506:	e7fe      	b.n	8002506 <_exit+0x12>

08002508 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	e00a      	b.n	8002530 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800251a:	f3af 8000 	nop.w
 800251e:	4601      	mov	r1, r0
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	60ba      	str	r2, [r7, #8]
 8002526:	b2ca      	uxtb	r2, r1
 8002528:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	3301      	adds	r3, #1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	dbf0      	blt.n	800251a <_read+0x12>
	}

return len;
 8002538:	687b      	ldr	r3, [r7, #4]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
	return -1;
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800256a:	605a      	str	r2, [r3, #4]
	return 0;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <_isatty>:

int _isatty(int file)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
	return 1;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
	return 0;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b4:	4a14      	ldr	r2, [pc, #80]	; (8002608 <_sbrk+0x5c>)
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <_sbrk+0x60>)
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c0:	4b13      	ldr	r3, [pc, #76]	; (8002610 <_sbrk+0x64>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <_sbrk+0x64>)
 80025ca:	4a12      	ldr	r2, [pc, #72]	; (8002614 <_sbrk+0x68>)
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <_sbrk+0x64>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d207      	bcs.n	80025ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025dc:	f004 fda4 	bl	8007128 <__errno>
 80025e0:	4603      	mov	r3, r0
 80025e2:	220c      	movs	r2, #12
 80025e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ea:	e009      	b.n	8002600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <_sbrk+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <_sbrk+0x64>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	4a05      	ldr	r2, [pc, #20]	; (8002610 <_sbrk+0x64>)
 80025fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025fe:	68fb      	ldr	r3, [r7, #12]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20018000 	.word	0x20018000
 800260c:	00000400 	.word	0x00000400
 8002610:	200007a0 	.word	0x200007a0
 8002614:	200007b8 	.word	0x200007b8

08002618 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <SystemInit+0x20>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	4a05      	ldr	r2, [pc, #20]	; (8002638 <SystemInit+0x20>)
 8002624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800263c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002674 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002640:	f7ff ffea 	bl	8002618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002644:	480c      	ldr	r0, [pc, #48]	; (8002678 <LoopForever+0x6>)
  ldr r1, =_edata
 8002646:	490d      	ldr	r1, [pc, #52]	; (800267c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002648:	4a0d      	ldr	r2, [pc, #52]	; (8002680 <LoopForever+0xe>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800264c:	e002      	b.n	8002654 <LoopCopyDataInit>

0800264e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002652:	3304      	adds	r3, #4

08002654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002658:	d3f9      	bcc.n	800264e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800265a:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <LoopForever+0x12>)
  ldr r4, =_ebss
 800265c:	4c0a      	ldr	r4, [pc, #40]	; (8002688 <LoopForever+0x16>)
  movs r3, #0
 800265e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002660:	e001      	b.n	8002666 <LoopFillZerobss>

08002662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002664:	3204      	adds	r2, #4

08002666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002668:	d3fb      	bcc.n	8002662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800266a:	f004 fd63 	bl	8007134 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800266e:	f7ff fb07 	bl	8001c80 <main>

08002672 <LoopForever>:

LoopForever:
    b LoopForever
 8002672:	e7fe      	b.n	8002672 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002674:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800267c:	200002bc 	.word	0x200002bc
  ldr r2, =_sidata
 8002680:	0800ac68 	.word	0x0800ac68
  ldr r2, =_sbss
 8002684:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8002688:	200007b8 	.word	0x200007b8

0800268c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800268c:	e7fe      	b.n	800268c <ADC1_2_IRQHandler>
	...

08002690 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <HAL_Init+0x3c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a0b      	ldr	r2, [pc, #44]	; (80026cc <HAL_Init+0x3c>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a6:	2003      	movs	r0, #3
 80026a8:	f000 f93e 	bl	8002928 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026ac:	2000      	movs	r0, #0
 80026ae:	f000 f80f 	bl	80026d0 <HAL_InitTick>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	71fb      	strb	r3, [r7, #7]
 80026bc:	e001      	b.n	80026c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026be:	f7ff fd1b 	bl	80020f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026c2:	79fb      	ldrb	r3, [r7, #7]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40022000 	.word	0x40022000

080026d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026dc:	4b17      	ldr	r3, [pc, #92]	; (800273c <HAL_InitTick+0x6c>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d023      	beq.n	800272c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026e4:	4b16      	ldr	r3, [pc, #88]	; (8002740 <HAL_InitTick+0x70>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b14      	ldr	r3, [pc, #80]	; (800273c <HAL_InitTick+0x6c>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	4619      	mov	r1, r3
 80026ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f949 	bl	8002992 <HAL_SYSTICK_Config>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10f      	bne.n	8002726 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b0f      	cmp	r3, #15
 800270a:	d809      	bhi.n	8002720 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800270c:	2200      	movs	r2, #0
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	f000 f913 	bl	800293e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002718:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <HAL_InitTick+0x74>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e007      	b.n	8002730 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
 8002724:	e004      	b.n	8002730 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
 800272a:	e001      	b.n	8002730 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002730:	7bfb      	ldrb	r3, [r7, #15]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	200000c8 	.word	0x200000c8
 8002740:	200000c0 	.word	0x200000c0
 8002744:	200000c4 	.word	0x200000c4

08002748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_IncTick+0x20>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_IncTick+0x24>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4413      	add	r3, r2
 8002758:	4a04      	ldr	r2, [pc, #16]	; (800276c <HAL_IncTick+0x24>)
 800275a:	6013      	str	r3, [r2, #0]
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	200000c8 	.word	0x200000c8
 800276c:	200007a4 	.word	0x200007a4

08002770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return uwTick;
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <HAL_GetTick+0x14>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	200007a4 	.word	0x200007a4

08002788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <__NVIC_SetPriorityGrouping+0x44>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a4:	4013      	ands	r3, r2
 80027a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ba:	4a04      	ldr	r2, [pc, #16]	; (80027cc <__NVIC_SetPriorityGrouping+0x44>)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	60d3      	str	r3, [r2, #12]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <__NVIC_GetPriorityGrouping+0x18>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	0a1b      	lsrs	r3, r3, #8
 80027da:	f003 0307 	and.w	r3, r3, #7
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	db0b      	blt.n	8002816 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	f003 021f 	and.w	r2, r3, #31
 8002804:	4907      	ldr	r1, [pc, #28]	; (8002824 <__NVIC_EnableIRQ+0x38>)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	2001      	movs	r0, #1
 800280e:	fa00 f202 	lsl.w	r2, r0, r2
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	e000e100 	.word	0xe000e100

08002828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	6039      	str	r1, [r7, #0]
 8002832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002838:	2b00      	cmp	r3, #0
 800283a:	db0a      	blt.n	8002852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	490c      	ldr	r1, [pc, #48]	; (8002874 <__NVIC_SetPriority+0x4c>)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	0112      	lsls	r2, r2, #4
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	440b      	add	r3, r1
 800284c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002850:	e00a      	b.n	8002868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4908      	ldr	r1, [pc, #32]	; (8002878 <__NVIC_SetPriority+0x50>)
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	3b04      	subs	r3, #4
 8002860:	0112      	lsls	r2, r2, #4
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	440b      	add	r3, r1
 8002866:	761a      	strb	r2, [r3, #24]
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000e100 	.word	0xe000e100
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800287c:	b480      	push	{r7}
 800287e:	b089      	sub	sp, #36	; 0x24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f1c3 0307 	rsb	r3, r3, #7
 8002896:	2b04      	cmp	r3, #4
 8002898:	bf28      	it	cs
 800289a:	2304      	movcs	r3, #4
 800289c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3304      	adds	r3, #4
 80028a2:	2b06      	cmp	r3, #6
 80028a4:	d902      	bls.n	80028ac <NVIC_EncodePriority+0x30>
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3b03      	subs	r3, #3
 80028aa:	e000      	b.n	80028ae <NVIC_EncodePriority+0x32>
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	f04f 32ff 	mov.w	r2, #4294967295
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43da      	mvns	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	401a      	ands	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c4:	f04f 31ff 	mov.w	r1, #4294967295
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	fa01 f303 	lsl.w	r3, r1, r3
 80028ce:	43d9      	mvns	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d4:	4313      	orrs	r3, r2
         );
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3724      	adds	r7, #36	; 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
	...

080028e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f4:	d301      	bcc.n	80028fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028f6:	2301      	movs	r3, #1
 80028f8:	e00f      	b.n	800291a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028fa:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <SysTick_Config+0x40>)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002902:	210f      	movs	r1, #15
 8002904:	f04f 30ff 	mov.w	r0, #4294967295
 8002908:	f7ff ff8e 	bl	8002828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <SysTick_Config+0x40>)
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002912:	4b04      	ldr	r3, [pc, #16]	; (8002924 <SysTick_Config+0x40>)
 8002914:	2207      	movs	r2, #7
 8002916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	e000e010 	.word	0xe000e010

08002928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff ff29 	bl	8002788 <__NVIC_SetPriorityGrouping>
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b086      	sub	sp, #24
 8002942:	af00      	add	r7, sp, #0
 8002944:	4603      	mov	r3, r0
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002950:	f7ff ff3e 	bl	80027d0 <__NVIC_GetPriorityGrouping>
 8002954:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	6978      	ldr	r0, [r7, #20]
 800295c:	f7ff ff8e 	bl	800287c <NVIC_EncodePriority>
 8002960:	4602      	mov	r2, r0
 8002962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff ff5d 	bl	8002828 <__NVIC_SetPriority>
}
 800296e:	bf00      	nop
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	4603      	mov	r3, r0
 800297e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff31 	bl	80027ec <__NVIC_EnableIRQ>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff ffa2 	bl	80028e4 <SysTick_Config>
 80029a0:	4603      	mov	r3, r0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b085      	sub	sp, #20
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d008      	beq.n	80029d4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2204      	movs	r2, #4
 80029c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e022      	b.n	8002a1a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 020e 	bic.w	r2, r2, #14
 80029e2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0201 	bic.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f8:	f003 021c 	and.w	r2, r3, #28
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	2101      	movs	r1, #1
 8002a02:	fa01 f202 	lsl.w	r2, r1, r2
 8002a06:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d005      	beq.n	8002a4a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2204      	movs	r2, #4
 8002a42:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
 8002a48:	e029      	b.n	8002a9e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 020e 	bic.w	r2, r2, #14
 8002a58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	f003 021c 	and.w	r2, r3, #28
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	2101      	movs	r1, #1
 8002a78:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	4798      	blx	r3
    }
  }
  return status;
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 8002aae:	4b68      	ldr	r3, [pc, #416]	; (8002c50 <HAL_FLASH_IRQHandler+0x1a8>)
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	4a67      	ldr	r2, [pc, #412]	; (8002c50 <HAL_FLASH_IRQHandler+0x1a8>)
 8002ab4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002ab8:	f023 0307 	bic.w	r3, r3, #7
 8002abc:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 8002abe:	4b64      	ldr	r3, [pc, #400]	; (8002c50 <HAL_FLASH_IRQHandler+0x1a8>)
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	4a63      	ldr	r2, [pc, #396]	; (8002c50 <HAL_FLASH_IRQHandler+0x1a8>)
 8002ac4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ac8:	6153      	str	r3, [r2, #20]
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 8002aca:	4b62      	ldr	r3, [pc, #392]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002acc:	7a1b      	ldrb	r3, [r3, #8]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d105      	bne.n	8002ae0 <HAL_FLASH_IRQHandler+0x38>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002ad4:	4b5e      	ldr	r3, [pc, #376]	; (8002c50 <HAL_FLASH_IRQHandler+0x1a8>)
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	4a5d      	ldr	r2, [pc, #372]	; (8002c50 <HAL_FLASH_IRQHandler+0x1a8>)
 8002ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ade:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002ae0:	4b5b      	ldr	r3, [pc, #364]	; (8002c50 <HAL_FLASH_IRQHandler+0x1a8>)
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8002ae8:	4013      	ands	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]

  if (error !=0U)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d045      	beq.n	8002b7e <HAL_FLASH_IRQHandler+0xd6>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8002af2:	4b58      	ldr	r3, [pc, #352]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	4a56      	ldr	r2, [pc, #344]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002afc:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d007      	beq.n	8002b18 <HAL_FLASH_IRQHandler+0x70>
 8002b08:	4b51      	ldr	r3, [pc, #324]	; (8002c50 <HAL_FLASH_IRQHandler+0x1a8>)
 8002b0a:	699a      	ldr	r2, [r3, #24]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002b12:	494f      	ldr	r1, [pc, #316]	; (8002c50 <HAL_FLASH_IRQHandler+0x1a8>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	618b      	str	r3, [r1, #24]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d004      	beq.n	8002b2c <HAL_FLASH_IRQHandler+0x84>
 8002b22:	4a4b      	ldr	r2, [pc, #300]	; (8002c50 <HAL_FLASH_IRQHandler+0x1a8>)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002b2a:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches() ;
 8002b2c:	f000 f99a 	bl	8002e64 <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 8002b30:	4b48      	ldr	r3, [pc, #288]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002b32:	7a1b      	ldrb	r3, [r3, #8]
 8002b34:	72fb      	strb	r3, [r7, #11]
    if(procedure == FLASH_PROC_PAGE_ERASE)
 8002b36:	7afb      	ldrb	r3, [r7, #11]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <HAL_FLASH_IRQHandler+0xa0>
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Page);
 8002b3c:	4b45      	ldr	r3, [pc, #276]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 f893 	bl	8002c6c <HAL_FLASH_OperationErrorCallback>
 8002b46:	e017      	b.n	8002b78 <HAL_FLASH_IRQHandler+0xd0>
    }
    else if(procedure == FLASH_PROC_MASS_ERASE)
 8002b48:	7afb      	ldrb	r3, [r7, #11]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d105      	bne.n	8002b5a <HAL_FLASH_IRQHandler+0xb2>
    {
        HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 8002b4e:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f88a 	bl	8002c6c <HAL_FLASH_OperationErrorCallback>
 8002b58:	e00e      	b.n	8002b78 <HAL_FLASH_IRQHandler+0xd0>
    }
    else if((procedure == FLASH_PROC_PROGRAM) ||
 8002b5a:	7afb      	ldrb	r3, [r7, #11]
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d002      	beq.n	8002b66 <HAL_FLASH_IRQHandler+0xbe>
 8002b60:	7afb      	ldrb	r3, [r7, #11]
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d105      	bne.n	8002b72 <HAL_FLASH_IRQHandler+0xca>
            (procedure == FLASH_PROC_PROGRAM_LAST))
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Address);
 8002b66:	4b3b      	ldr	r3, [pc, #236]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 f87e 	bl	8002c6c <HAL_FLASH_OperationErrorCallback>
 8002b70:	e002      	b.n	8002b78 <HAL_FLASH_IRQHandler+0xd0>
    }
    else
    {
       HAL_FLASH_OperationErrorCallback(0U);
 8002b72:	2000      	movs	r0, #0
 8002b74:	f000 f87a 	bl	8002c6c <HAL_FLASH_OperationErrorCallback>
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002b78:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
 8002b7e:	4b34      	ldr	r3, [pc, #208]	; (8002c50 <HAL_FLASH_IRQHandler+0x1a8>)
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d04f      	beq.n	8002c2a <HAL_FLASH_IRQHandler+0x182>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002b8a:	4b31      	ldr	r3, [pc, #196]	; (8002c50 <HAL_FLASH_IRQHandler+0x1a8>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	611a      	str	r2, [r3, #16]

    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 8002b90:	4b30      	ldr	r3, [pc, #192]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002b92:	7a1b      	ldrb	r3, [r3, #8]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d12b      	bne.n	8002bf2 <HAL_FLASH_IRQHandler+0x14a>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8002b9a:	4b2e      	ldr	r3, [pc, #184]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	4a2c      	ldr	r2, [pc, #176]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002ba2:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if(pFlash.NbPagesToErase != 0U)
 8002ba4:	4b2b      	ldr	r3, [pc, #172]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d013      	beq.n	8002bd4 <HAL_FLASH_IRQHandler+0x12c>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8002bac:	4b29      	ldr	r3, [pc, #164]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 f851 	bl	8002c58 <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 8002bb6:	4b27      	ldr	r3, [pc, #156]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	4a25      	ldr	r2, [pc, #148]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002bbe:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 8002bc0:	4b24      	ldr	r3, [pc, #144]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 8002bc6:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f913 	bl	8002df8 <FLASH_PageErase>
 8002bd2:	e02a      	b.n	8002c2a <HAL_FLASH_IRQHandler+0x182>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 8002bd4:	4b1f      	ldr	r3, [pc, #124]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bda:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002bdc:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8002be2:	f000 f93f 	bl	8002e64 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f834 	bl	8002c58 <HAL_FLASH_EndOfOperationCallback>
 8002bf0:	e01b      	b.n	8002c2a <HAL_FLASH_IRQHandler+0x182>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches() ;
 8002bf2:	f000 f937 	bl	8002e64 <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 8002bf6:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002bf8:	7a1b      	ldrb	r3, [r3, #8]
 8002bfa:	72fb      	strb	r3, [r7, #11]
      if(procedure == FLASH_PROC_MASS_ERASE)
 8002bfc:	7afb      	ldrb	r3, [r7, #11]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d105      	bne.n	8002c0e <HAL_FLASH_IRQHandler+0x166>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8002c02:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 f826 	bl	8002c58 <HAL_FLASH_EndOfOperationCallback>
 8002c0c:	e00a      	b.n	8002c24 <HAL_FLASH_IRQHandler+0x17c>
      }
      else if((procedure == FLASH_PROC_PROGRAM) ||
 8002c0e:	7afb      	ldrb	r3, [r7, #11]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d002      	beq.n	8002c1a <HAL_FLASH_IRQHandler+0x172>
 8002c14:	7afb      	ldrb	r3, [r7, #11]
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d104      	bne.n	8002c24 <HAL_FLASH_IRQHandler+0x17c>
              (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f81a 	bl	8002c58 <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002c24:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	721a      	strb	r2, [r3, #8]
    }
  }

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002c2c:	7a1b      	ldrb	r3, [r3, #8]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d108      	bne.n	8002c46 <HAL_FLASH_IRQHandler+0x19e>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_FLASH_IRQHandler+0x1a8>)
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	4a05      	ldr	r2, [pc, #20]	; (8002c50 <HAL_FLASH_IRQHandler+0x1a8>)
 8002c3a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002c3e:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8002c40:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <HAL_FLASH_IRQHandler+0x1ac>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
  }
}
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40022000 	.word	0x40022000
 8002c54:	200000cc 	.word	0x200000cc

08002c58 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_FLASH_Unlock+0x38>)
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	da0b      	bge.n	8002caa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_FLASH_Unlock+0x38>)
 8002c94:	4a09      	ldr	r2, [pc, #36]	; (8002cbc <HAL_FLASH_Unlock+0x3c>)
 8002c96:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002c98:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <HAL_FLASH_Unlock+0x38>)
 8002c9a:	4a09      	ldr	r2, [pc, #36]	; (8002cc0 <HAL_FLASH_Unlock+0x40>)
 8002c9c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_FLASH_Unlock+0x38>)
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	da01      	bge.n	8002caa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002caa:	79fb      	ldrb	r3, [r7, #7]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	40022000 	.word	0x40022000
 8002cbc:	45670123 	.word	0x45670123
 8002cc0:	cdef89ab 	.word	0xcdef89ab

08002cc4 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002cd0:	4b33      	ldr	r3, [pc, #204]	; (8002da0 <HAL_FLASHEx_Erase_IT+0xdc>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_FLASHEx_Erase_IT+0x18>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e05d      	b.n	8002d98 <HAL_FLASHEx_Erase_IT+0xd4>
 8002cdc:	4b30      	ldr	r3, [pc, #192]	; (8002da0 <HAL_FLASHEx_Erase_IT+0xdc>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ce2:	4b2f      	ldr	r3, [pc, #188]	; (8002da0 <HAL_FLASHEx_Erase_IT+0xdc>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	605a      	str	r2, [r3, #4]

  /* Deactivate the cache if they are activated to avoid data misbehavior */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002ce8:	4b2e      	ldr	r3, [pc, #184]	; (8002da4 <HAL_FLASHEx_Erase_IT+0xe0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d013      	beq.n	8002d1c <HAL_FLASHEx_Erase_IT+0x58>
  {
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <HAL_FLASHEx_Erase_IT+0xe0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d009      	beq.n	8002d14 <HAL_FLASHEx_Erase_IT+0x50>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002d00:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <HAL_FLASHEx_Erase_IT+0xe0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a27      	ldr	r2, [pc, #156]	; (8002da4 <HAL_FLASHEx_Erase_IT+0xe0>)
 8002d06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d0a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002d0c:	4b24      	ldr	r3, [pc, #144]	; (8002da0 <HAL_FLASHEx_Erase_IT+0xdc>)
 8002d0e:	2203      	movs	r2, #3
 8002d10:	771a      	strb	r2, [r3, #28]
 8002d12:	e016      	b.n	8002d42 <HAL_FLASHEx_Erase_IT+0x7e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002d14:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <HAL_FLASHEx_Erase_IT+0xdc>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	771a      	strb	r2, [r3, #28]
 8002d1a:	e012      	b.n	8002d42 <HAL_FLASHEx_Erase_IT+0x7e>
    }
  }
  else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002d1c:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <HAL_FLASHEx_Erase_IT+0xe0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d009      	beq.n	8002d3c <HAL_FLASHEx_Erase_IT+0x78>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002d28:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <HAL_FLASHEx_Erase_IT+0xe0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <HAL_FLASHEx_Erase_IT+0xe0>)
 8002d2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d32:	6013      	str	r3, [r2, #0]
    pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002d34:	4b1a      	ldr	r3, [pc, #104]	; (8002da0 <HAL_FLASHEx_Erase_IT+0xdc>)
 8002d36:	2202      	movs	r2, #2
 8002d38:	771a      	strb	r2, [r3, #28]
 8002d3a:	e002      	b.n	8002d42 <HAL_FLASHEx_Erase_IT+0x7e>
  }
  else
  {
    pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002d3c:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <HAL_FLASHEx_Erase_IT+0xdc>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	771a      	strb	r2, [r3, #28]
  }

  /* Enable End of Operation and Error interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8002d42:	4b18      	ldr	r3, [pc, #96]	; (8002da4 <HAL_FLASHEx_Erase_IT+0xe0>)
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	4a17      	ldr	r2, [pc, #92]	; (8002da4 <HAL_FLASHEx_Erase_IT+0xe0>)
 8002d48:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8002d4c:	6153      	str	r3, [r2, #20]

  pFlash.Bank = pEraseInit->Banks;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4a13      	ldr	r2, [pc, #76]	; (8002da0 <HAL_FLASHEx_Erase_IT+0xdc>)
 8002d54:	6113      	str	r3, [r2, #16]

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d108      	bne.n	8002d70 <HAL_FLASHEx_Erase_IT+0xac>
  {
    /* Mass erase to be done */
    pFlash.ProcedureOnGoing = FLASH_PROC_MASS_ERASE;
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_FLASHEx_Erase_IT+0xdc>)
 8002d60:	2202      	movs	r2, #2
 8002d62:	721a      	strb	r2, [r3, #8]
    FLASH_MassErase(pEraseInit->Banks);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 f81d 	bl	8002da8 <FLASH_MassErase>
 8002d6e:	e012      	b.n	8002d96 <HAL_FLASHEx_Erase_IT+0xd2>
  }
  else
  {
    /* Erase by page to be done */
    pFlash.ProcedureOnGoing = FLASH_PROC_PAGE_ERASE;
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_FLASHEx_Erase_IT+0xdc>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	721a      	strb	r2, [r3, #8]
    pFlash.NbPagesToErase = pEraseInit->NbPages;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	4a09      	ldr	r2, [pc, #36]	; (8002da0 <HAL_FLASHEx_Erase_IT+0xdc>)
 8002d7c:	6193      	str	r3, [r2, #24]
    pFlash.Page = pEraseInit->Page;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	4a07      	ldr	r2, [pc, #28]	; (8002da0 <HAL_FLASHEx_Erase_IT+0xdc>)
 8002d84:	6153      	str	r3, [r2, #20]

    /*Erase 1st page and wait for IT */
    FLASH_PageErase(pEraseInit->Page, pEraseInit->Banks);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4610      	mov	r0, r2
 8002d92:	f000 f831 	bl	8002df8 <FLASH_PageErase>
  }

  return status;
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	200000cc 	.word	0x200000cc
 8002da4:	40022000 	.word	0x40022000

08002da8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <FLASH_MassErase+0x4c>)
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	4a0d      	ldr	r2, [pc, #52]	; (8002df4 <FLASH_MassErase+0x4c>)
 8002dc0:	f043 0304 	orr.w	r3, r3, #4
 8002dc4:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8002dd0:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <FLASH_MassErase+0x4c>)
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	4a07      	ldr	r2, [pc, #28]	; (8002df4 <FLASH_MassErase+0x4c>)
 8002dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dda:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <FLASH_MassErase+0x4c>)
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <FLASH_MassErase+0x4c>)
 8002de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de6:	6153      	str	r3, [r2, #20]
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	40022000 	.word	0x40022000

08002df8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d006      	beq.n	8002e1a <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002e0c:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <FLASH_PageErase+0x68>)
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	4a13      	ldr	r2, [pc, #76]	; (8002e60 <FLASH_PageErase+0x68>)
 8002e12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e16:	6153      	str	r3, [r2, #20]
 8002e18:	e005      	b.n	8002e26 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8002e1a:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <FLASH_PageErase+0x68>)
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	4a10      	ldr	r2, [pc, #64]	; (8002e60 <FLASH_PageErase+0x68>)
 8002e20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e24:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002e26:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <FLASH_PageErase+0x68>)
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8002e36:	490a      	ldr	r1, [pc, #40]	; (8002e60 <FLASH_PageErase+0x68>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002e3c:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <FLASH_PageErase+0x68>)
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	4a07      	ldr	r2, [pc, #28]	; (8002e60 <FLASH_PageErase+0x68>)
 8002e42:	f043 0302 	orr.w	r3, r3, #2
 8002e46:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <FLASH_PageErase+0x68>)
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <FLASH_PageErase+0x68>)
 8002e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e52:	6153      	str	r3, [r2, #20]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	40022000 	.word	0x40022000

08002e64 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002e6a:	4b21      	ldr	r3, [pc, #132]	; (8002ef0 <FLASH_FlushCaches+0x8c>)
 8002e6c:	7f1b      	ldrb	r3, [r3, #28]
 8002e6e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d002      	beq.n	8002e7c <FLASH_FlushCaches+0x18>
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d117      	bne.n	8002eac <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <FLASH_FlushCaches+0x90>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1c      	ldr	r2, [pc, #112]	; (8002ef4 <FLASH_FlushCaches+0x90>)
 8002e82:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e86:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002e88:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <FLASH_FlushCaches+0x90>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a19      	ldr	r2, [pc, #100]	; (8002ef4 <FLASH_FlushCaches+0x90>)
 8002e8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <FLASH_FlushCaches+0x90>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a16      	ldr	r2, [pc, #88]	; (8002ef4 <FLASH_FlushCaches+0x90>)
 8002e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e9e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ea0:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <FLASH_FlushCaches+0x90>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a13      	ldr	r2, [pc, #76]	; (8002ef4 <FLASH_FlushCaches+0x90>)
 8002ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eaa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d002      	beq.n	8002eb8 <FLASH_FlushCaches+0x54>
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d111      	bne.n	8002edc <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002eb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <FLASH_FlushCaches+0x90>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	; (8002ef4 <FLASH_FlushCaches+0x90>)
 8002ebe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <FLASH_FlushCaches+0x90>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <FLASH_FlushCaches+0x90>)
 8002eca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ece:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <FLASH_FlushCaches+0x90>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <FLASH_FlushCaches+0x90>)
 8002ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eda:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002edc:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <FLASH_FlushCaches+0x8c>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	771a      	strb	r2, [r3, #28]
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	200000cc 	.word	0x200000cc
 8002ef4:	40022000 	.word	0x40022000

08002ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f06:	e17f      	b.n	8003208 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	4013      	ands	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8171 	beq.w	8003202 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d005      	beq.n	8002f38 <HAL_GPIO_Init+0x40>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d130      	bne.n	8002f9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	2203      	movs	r2, #3
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f6e:	2201      	movs	r2, #1
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	091b      	lsrs	r3, r3, #4
 8002f84:	f003 0201 	and.w	r2, r3, #1
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d118      	bne.n	8002fd8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002fac:	2201      	movs	r2, #1
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	08db      	lsrs	r3, r3, #3
 8002fc2:	f003 0201 	and.w	r2, r3, #1
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d017      	beq.n	8003014 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	2203      	movs	r2, #3
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d123      	bne.n	8003068 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	08da      	lsrs	r2, r3, #3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3208      	adds	r2, #8
 8003028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800302c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	220f      	movs	r2, #15
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	08da      	lsrs	r2, r3, #3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3208      	adds	r2, #8
 8003062:	6939      	ldr	r1, [r7, #16]
 8003064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	2203      	movs	r2, #3
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 0203 	and.w	r2, r3, #3
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 80ac 	beq.w	8003202 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030aa:	4b5f      	ldr	r3, [pc, #380]	; (8003228 <HAL_GPIO_Init+0x330>)
 80030ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ae:	4a5e      	ldr	r2, [pc, #376]	; (8003228 <HAL_GPIO_Init+0x330>)
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	6613      	str	r3, [r2, #96]	; 0x60
 80030b6:	4b5c      	ldr	r3, [pc, #368]	; (8003228 <HAL_GPIO_Init+0x330>)
 80030b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030c2:	4a5a      	ldr	r2, [pc, #360]	; (800322c <HAL_GPIO_Init+0x334>)
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	089b      	lsrs	r3, r3, #2
 80030c8:	3302      	adds	r3, #2
 80030ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	220f      	movs	r2, #15
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4013      	ands	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030ec:	d025      	beq.n	800313a <HAL_GPIO_Init+0x242>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4f      	ldr	r2, [pc, #316]	; (8003230 <HAL_GPIO_Init+0x338>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d01f      	beq.n	8003136 <HAL_GPIO_Init+0x23e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a4e      	ldr	r2, [pc, #312]	; (8003234 <HAL_GPIO_Init+0x33c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d019      	beq.n	8003132 <HAL_GPIO_Init+0x23a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a4d      	ldr	r2, [pc, #308]	; (8003238 <HAL_GPIO_Init+0x340>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d013      	beq.n	800312e <HAL_GPIO_Init+0x236>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a4c      	ldr	r2, [pc, #304]	; (800323c <HAL_GPIO_Init+0x344>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00d      	beq.n	800312a <HAL_GPIO_Init+0x232>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a4b      	ldr	r2, [pc, #300]	; (8003240 <HAL_GPIO_Init+0x348>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d007      	beq.n	8003126 <HAL_GPIO_Init+0x22e>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a4a      	ldr	r2, [pc, #296]	; (8003244 <HAL_GPIO_Init+0x34c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d101      	bne.n	8003122 <HAL_GPIO_Init+0x22a>
 800311e:	2306      	movs	r3, #6
 8003120:	e00c      	b.n	800313c <HAL_GPIO_Init+0x244>
 8003122:	2307      	movs	r3, #7
 8003124:	e00a      	b.n	800313c <HAL_GPIO_Init+0x244>
 8003126:	2305      	movs	r3, #5
 8003128:	e008      	b.n	800313c <HAL_GPIO_Init+0x244>
 800312a:	2304      	movs	r3, #4
 800312c:	e006      	b.n	800313c <HAL_GPIO_Init+0x244>
 800312e:	2303      	movs	r3, #3
 8003130:	e004      	b.n	800313c <HAL_GPIO_Init+0x244>
 8003132:	2302      	movs	r3, #2
 8003134:	e002      	b.n	800313c <HAL_GPIO_Init+0x244>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_GPIO_Init+0x244>
 800313a:	2300      	movs	r3, #0
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	f002 0203 	and.w	r2, r2, #3
 8003142:	0092      	lsls	r2, r2, #2
 8003144:	4093      	lsls	r3, r2
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800314c:	4937      	ldr	r1, [pc, #220]	; (800322c <HAL_GPIO_Init+0x334>)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	089b      	lsrs	r3, r3, #2
 8003152:	3302      	adds	r3, #2
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800315a:	4b3b      	ldr	r3, [pc, #236]	; (8003248 <HAL_GPIO_Init+0x350>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	43db      	mvns	r3, r3
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4013      	ands	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800317e:	4a32      	ldr	r2, [pc, #200]	; (8003248 <HAL_GPIO_Init+0x350>)
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003184:	4b30      	ldr	r3, [pc, #192]	; (8003248 <HAL_GPIO_Init+0x350>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	43db      	mvns	r3, r3
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4013      	ands	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031a8:	4a27      	ldr	r2, [pc, #156]	; (8003248 <HAL_GPIO_Init+0x350>)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031ae:	4b26      	ldr	r3, [pc, #152]	; (8003248 <HAL_GPIO_Init+0x350>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4013      	ands	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031d2:	4a1d      	ldr	r2, [pc, #116]	; (8003248 <HAL_GPIO_Init+0x350>)
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_GPIO_Init+0x350>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4013      	ands	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031fc:	4a12      	ldr	r2, [pc, #72]	; (8003248 <HAL_GPIO_Init+0x350>)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	3301      	adds	r3, #1
 8003206:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	fa22 f303 	lsr.w	r3, r2, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	f47f ae78 	bne.w	8002f08 <HAL_GPIO_Init+0x10>
  }
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	371c      	adds	r7, #28
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40021000 	.word	0x40021000
 800322c:	40010000 	.word	0x40010000
 8003230:	48000400 	.word	0x48000400
 8003234:	48000800 	.word	0x48000800
 8003238:	48000c00 	.word	0x48000c00
 800323c:	48001000 	.word	0x48001000
 8003240:	48001400 	.word	0x48001400
 8003244:	48001800 	.word	0x48001800
 8003248:	40010400 	.word	0x40010400

0800324c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	887b      	ldrh	r3, [r7, #2]
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
 8003268:	e001      	b.n	800326e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800326a:	2300      	movs	r3, #0
 800326c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	807b      	strh	r3, [r7, #2]
 8003288:	4613      	mov	r3, r2
 800328a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800328c:	787b      	ldrb	r3, [r7, #1]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003292:	887a      	ldrh	r2, [r7, #2]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003298:	e002      	b.n	80032a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800329a:	887a      	ldrh	r2, [r7, #2]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032be:	887a      	ldrh	r2, [r7, #2]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4013      	ands	r3, r2
 80032c4:	041a      	lsls	r2, r3, #16
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	43d9      	mvns	r1, r3
 80032ca:	887b      	ldrh	r3, [r7, #2]
 80032cc:	400b      	ands	r3, r1
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	619a      	str	r2, [r3, #24]
}
 80032d4:	bf00      	nop
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032ea:	4b08      	ldr	r3, [pc, #32]	; (800330c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d006      	beq.n	8003304 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032f6:	4a05      	ldr	r2, [pc, #20]	; (800330c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032fc:	88fb      	ldrh	r3, [r7, #6]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe fc46 	bl	8001b90 <HAL_GPIO_EXTI_Callback>
  }
}
 8003304:	bf00      	nop
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40010400 	.word	0x40010400

08003310 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <HAL_PWREx_GetVoltageRange+0x18>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800331c:	4618      	mov	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40007000 	.word	0x40007000

0800332c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800333a:	d130      	bne.n	800339e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800333c:	4b23      	ldr	r3, [pc, #140]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003348:	d038      	beq.n	80033bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800334a:	4b20      	ldr	r3, [pc, #128]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003352:	4a1e      	ldr	r2, [pc, #120]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003354:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003358:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800335a:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2232      	movs	r2, #50	; 0x32
 8003360:	fb02 f303 	mul.w	r3, r2, r3
 8003364:	4a1b      	ldr	r2, [pc, #108]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	0c9b      	lsrs	r3, r3, #18
 800336c:	3301      	adds	r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003370:	e002      	b.n	8003378 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	3b01      	subs	r3, #1
 8003376:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003378:	4b14      	ldr	r3, [pc, #80]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003384:	d102      	bne.n	800338c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f2      	bne.n	8003372 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800338c:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003398:	d110      	bne.n	80033bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e00f      	b.n	80033be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033aa:	d007      	beq.n	80033bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033ac:	4b07      	ldr	r3, [pc, #28]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033b4:	4a05      	ldr	r2, [pc, #20]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40007000 	.word	0x40007000
 80033d0:	200000c0 	.word	0x200000c0
 80033d4:	431bde83 	.word	0x431bde83

080033d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e3ca      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033ea:	4b97      	ldr	r3, [pc, #604]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033f4:	4b94      	ldr	r3, [pc, #592]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 80e4 	beq.w	80035d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <HAL_RCC_OscConfig+0x4a>
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	2b0c      	cmp	r3, #12
 8003416:	f040 808b 	bne.w	8003530 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b01      	cmp	r3, #1
 800341e:	f040 8087 	bne.w	8003530 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003422:	4b89      	ldr	r3, [pc, #548]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_RCC_OscConfig+0x62>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e3a2      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1a      	ldr	r2, [r3, #32]
 800343e:	4b82      	ldr	r3, [pc, #520]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d004      	beq.n	8003454 <HAL_RCC_OscConfig+0x7c>
 800344a:	4b7f      	ldr	r3, [pc, #508]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003452:	e005      	b.n	8003460 <HAL_RCC_OscConfig+0x88>
 8003454:	4b7c      	ldr	r3, [pc, #496]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 8003456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800345a:	091b      	lsrs	r3, r3, #4
 800345c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003460:	4293      	cmp	r3, r2
 8003462:	d223      	bcs.n	80034ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fd55 	bl	8003f18 <RCC_SetFlashLatencyFromMSIRange>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e383      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003478:	4b73      	ldr	r3, [pc, #460]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a72      	ldr	r2, [pc, #456]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 800347e:	f043 0308 	orr.w	r3, r3, #8
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	4b70      	ldr	r3, [pc, #448]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	496d      	ldr	r1, [pc, #436]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 8003492:	4313      	orrs	r3, r2
 8003494:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003496:	4b6c      	ldr	r3, [pc, #432]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	4968      	ldr	r1, [pc, #416]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	604b      	str	r3, [r1, #4]
 80034aa:	e025      	b.n	80034f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034ac:	4b66      	ldr	r3, [pc, #408]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a65      	ldr	r2, [pc, #404]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 80034b2:	f043 0308 	orr.w	r3, r3, #8
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	4b63      	ldr	r3, [pc, #396]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	4960      	ldr	r1, [pc, #384]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ca:	4b5f      	ldr	r3, [pc, #380]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	021b      	lsls	r3, r3, #8
 80034d8:	495b      	ldr	r1, [pc, #364]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d109      	bne.n	80034f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fd15 	bl	8003f18 <RCC_SetFlashLatencyFromMSIRange>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e343      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034f8:	f000 fc4a 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b52      	ldr	r3, [pc, #328]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	4950      	ldr	r1, [pc, #320]	; (800364c <HAL_RCC_OscConfig+0x274>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
 8003514:	4a4e      	ldr	r2, [pc, #312]	; (8003650 <HAL_RCC_OscConfig+0x278>)
 8003516:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003518:	4b4e      	ldr	r3, [pc, #312]	; (8003654 <HAL_RCC_OscConfig+0x27c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff f8d7 	bl	80026d0 <HAL_InitTick>
 8003522:	4603      	mov	r3, r0
 8003524:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d052      	beq.n	80035d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	e327      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d032      	beq.n	800359e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003538:	4b43      	ldr	r3, [pc, #268]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a42      	ldr	r2, [pc, #264]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003544:	f7ff f914 	bl	8002770 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800354c:	f7ff f910 	bl	8002770 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e310      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800355e:	4b3a      	ldr	r3, [pc, #232]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800356a:	4b37      	ldr	r3, [pc, #220]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a36      	ldr	r2, [pc, #216]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 8003570:	f043 0308 	orr.w	r3, r3, #8
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	4b34      	ldr	r3, [pc, #208]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	4931      	ldr	r1, [pc, #196]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 8003584:	4313      	orrs	r3, r2
 8003586:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003588:	4b2f      	ldr	r3, [pc, #188]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	492c      	ldr	r1, [pc, #176]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 8003598:	4313      	orrs	r3, r2
 800359a:	604b      	str	r3, [r1, #4]
 800359c:	e01a      	b.n	80035d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800359e:	4b2a      	ldr	r3, [pc, #168]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a29      	ldr	r2, [pc, #164]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035aa:	f7ff f8e1 	bl	8002770 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035b2:	f7ff f8dd 	bl	8002770 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e2dd      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035c4:	4b20      	ldr	r3, [pc, #128]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1f0      	bne.n	80035b2 <HAL_RCC_OscConfig+0x1da>
 80035d0:	e000      	b.n	80035d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d074      	beq.n	80036ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d005      	beq.n	80035f2 <HAL_RCC_OscConfig+0x21a>
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	2b0c      	cmp	r3, #12
 80035ea:	d10e      	bne.n	800360a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2b03      	cmp	r3, #3
 80035f0:	d10b      	bne.n	800360a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f2:	4b15      	ldr	r3, [pc, #84]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d064      	beq.n	80036c8 <HAL_RCC_OscConfig+0x2f0>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d160      	bne.n	80036c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e2ba      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003612:	d106      	bne.n	8003622 <HAL_RCC_OscConfig+0x24a>
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a0b      	ldr	r2, [pc, #44]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 800361a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	e026      	b.n	8003670 <HAL_RCC_OscConfig+0x298>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800362a:	d115      	bne.n	8003658 <HAL_RCC_OscConfig+0x280>
 800362c:	4b06      	ldr	r3, [pc, #24]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a05      	ldr	r2, [pc, #20]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 8003632:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	4b03      	ldr	r3, [pc, #12]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a02      	ldr	r2, [pc, #8]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 800363e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	e014      	b.n	8003670 <HAL_RCC_OscConfig+0x298>
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000
 800364c:	0800a818 	.word	0x0800a818
 8003650:	200000c0 	.word	0x200000c0
 8003654:	200000c4 	.word	0x200000c4
 8003658:	4ba0      	ldr	r3, [pc, #640]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a9f      	ldr	r2, [pc, #636]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 800365e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	4b9d      	ldr	r3, [pc, #628]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a9c      	ldr	r2, [pc, #624]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 800366a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800366e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d013      	beq.n	80036a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7ff f87a 	bl	8002770 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003680:	f7ff f876 	bl	8002770 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b64      	cmp	r3, #100	; 0x64
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e276      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003692:	4b92      	ldr	r3, [pc, #584]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x2a8>
 800369e:	e014      	b.n	80036ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7ff f866 	bl	8002770 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a8:	f7ff f862 	bl	8002770 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	; 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e262      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ba:	4b88      	ldr	r3, [pc, #544]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x2d0>
 80036c6:	e000      	b.n	80036ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d060      	beq.n	8003798 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d005      	beq.n	80036e8 <HAL_RCC_OscConfig+0x310>
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2b0c      	cmp	r3, #12
 80036e0:	d119      	bne.n	8003716 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d116      	bne.n	8003716 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e8:	4b7c      	ldr	r3, [pc, #496]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_OscConfig+0x328>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e23f      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003700:	4b76      	ldr	r3, [pc, #472]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	061b      	lsls	r3, r3, #24
 800370e:	4973      	ldr	r1, [pc, #460]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 8003710:	4313      	orrs	r3, r2
 8003712:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003714:	e040      	b.n	8003798 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d023      	beq.n	8003766 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800371e:	4b6f      	ldr	r3, [pc, #444]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a6e      	ldr	r2, [pc, #440]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 8003724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372a:	f7ff f821 	bl	8002770 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003732:	f7ff f81d 	bl	8002770 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e21d      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003744:	4b65      	ldr	r3, [pc, #404]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003750:	4b62      	ldr	r3, [pc, #392]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	061b      	lsls	r3, r3, #24
 800375e:	495f      	ldr	r1, [pc, #380]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 8003760:	4313      	orrs	r3, r2
 8003762:	604b      	str	r3, [r1, #4]
 8003764:	e018      	b.n	8003798 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003766:	4b5d      	ldr	r3, [pc, #372]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a5c      	ldr	r2, [pc, #368]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 800376c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003772:	f7fe fffd 	bl	8002770 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800377a:	f7fe fff9 	bl	8002770 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e1f9      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800378c:	4b53      	ldr	r3, [pc, #332]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1f0      	bne.n	800377a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d03c      	beq.n	800381e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01c      	beq.n	80037e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ac:	4b4b      	ldr	r3, [pc, #300]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 80037ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b2:	4a4a      	ldr	r2, [pc, #296]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037bc:	f7fe ffd8 	bl	8002770 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c4:	f7fe ffd4 	bl	8002770 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e1d4      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037d6:	4b41      	ldr	r3, [pc, #260]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 80037d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0ef      	beq.n	80037c4 <HAL_RCC_OscConfig+0x3ec>
 80037e4:	e01b      	b.n	800381e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e6:	4b3d      	ldr	r3, [pc, #244]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 80037e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ec:	4a3b      	ldr	r2, [pc, #236]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7fe ffbb 	bl	8002770 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fe:	f7fe ffb7 	bl	8002770 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e1b7      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003810:	4b32      	ldr	r3, [pc, #200]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 8003812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1ef      	bne.n	80037fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80a6 	beq.w	8003978 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800382c:	2300      	movs	r3, #0
 800382e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003830:	4b2a      	ldr	r3, [pc, #168]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 8003832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10d      	bne.n	8003858 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800383c:	4b27      	ldr	r3, [pc, #156]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 800383e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003840:	4a26      	ldr	r2, [pc, #152]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 8003842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003846:	6593      	str	r3, [r2, #88]	; 0x58
 8003848:	4b24      	ldr	r3, [pc, #144]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003854:	2301      	movs	r3, #1
 8003856:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003858:	4b21      	ldr	r3, [pc, #132]	; (80038e0 <HAL_RCC_OscConfig+0x508>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d118      	bne.n	8003896 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003864:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <HAL_RCC_OscConfig+0x508>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1d      	ldr	r2, [pc, #116]	; (80038e0 <HAL_RCC_OscConfig+0x508>)
 800386a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003870:	f7fe ff7e 	bl	8002770 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003878:	f7fe ff7a 	bl	8002770 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e17a      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800388a:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <HAL_RCC_OscConfig+0x508>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d108      	bne.n	80038b0 <HAL_RCC_OscConfig+0x4d8>
 800389e:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 80038a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a4:	4a0d      	ldr	r2, [pc, #52]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038ae:	e029      	b.n	8003904 <HAL_RCC_OscConfig+0x52c>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b05      	cmp	r3, #5
 80038b6:	d115      	bne.n	80038e4 <HAL_RCC_OscConfig+0x50c>
 80038b8:	4b08      	ldr	r3, [pc, #32]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038be:	4a07      	ldr	r2, [pc, #28]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 80038c0:	f043 0304 	orr.w	r3, r3, #4
 80038c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038c8:	4b04      	ldr	r3, [pc, #16]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ce:	4a03      	ldr	r2, [pc, #12]	; (80038dc <HAL_RCC_OscConfig+0x504>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038d8:	e014      	b.n	8003904 <HAL_RCC_OscConfig+0x52c>
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000
 80038e0:	40007000 	.word	0x40007000
 80038e4:	4b9c      	ldr	r3, [pc, #624]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ea:	4a9b      	ldr	r2, [pc, #620]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038f4:	4b98      	ldr	r3, [pc, #608]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fa:	4a97      	ldr	r2, [pc, #604]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 80038fc:	f023 0304 	bic.w	r3, r3, #4
 8003900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d016      	beq.n	800393a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390c:	f7fe ff30 	bl	8002770 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003912:	e00a      	b.n	800392a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003914:	f7fe ff2c 	bl	8002770 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e12a      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800392a:	4b8b      	ldr	r3, [pc, #556]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 800392c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0ed      	beq.n	8003914 <HAL_RCC_OscConfig+0x53c>
 8003938:	e015      	b.n	8003966 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393a:	f7fe ff19 	bl	8002770 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003940:	e00a      	b.n	8003958 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003942:	f7fe ff15 	bl	8002770 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003950:	4293      	cmp	r3, r2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e113      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003958:	4b7f      	ldr	r3, [pc, #508]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1ed      	bne.n	8003942 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003966:	7ffb      	ldrb	r3, [r7, #31]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d105      	bne.n	8003978 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396c:	4b7a      	ldr	r3, [pc, #488]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 800396e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003970:	4a79      	ldr	r2, [pc, #484]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003976:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 80fe 	beq.w	8003b7e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003986:	2b02      	cmp	r3, #2
 8003988:	f040 80d0 	bne.w	8003b2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800398c:	4b72      	ldr	r3, [pc, #456]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f003 0203 	and.w	r2, r3, #3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	429a      	cmp	r2, r3
 800399e:	d130      	bne.n	8003a02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	3b01      	subs	r3, #1
 80039ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d127      	bne.n	8003a02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d11f      	bne.n	8003a02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039cc:	2a07      	cmp	r2, #7
 80039ce:	bf14      	ite	ne
 80039d0:	2201      	movne	r2, #1
 80039d2:	2200      	moveq	r2, #0
 80039d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d113      	bne.n	8003a02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e4:	085b      	lsrs	r3, r3, #1
 80039e6:	3b01      	subs	r3, #1
 80039e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d109      	bne.n	8003a02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	085b      	lsrs	r3, r3, #1
 80039fa:	3b01      	subs	r3, #1
 80039fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d06e      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	2b0c      	cmp	r3, #12
 8003a06:	d069      	beq.n	8003adc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a08:	4b53      	ldr	r3, [pc, #332]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d105      	bne.n	8003a20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a14:	4b50      	ldr	r3, [pc, #320]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0ad      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a24:	4b4c      	ldr	r3, [pc, #304]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a4b      	ldr	r2, [pc, #300]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a30:	f7fe fe9e 	bl	8002770 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a38:	f7fe fe9a 	bl	8002770 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e09a      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a4a:	4b43      	ldr	r3, [pc, #268]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a56:	4b40      	ldr	r3, [pc, #256]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	4b40      	ldr	r3, [pc, #256]	; (8003b5c <HAL_RCC_OscConfig+0x784>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a66:	3a01      	subs	r2, #1
 8003a68:	0112      	lsls	r2, r2, #4
 8003a6a:	4311      	orrs	r1, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a70:	0212      	lsls	r2, r2, #8
 8003a72:	4311      	orrs	r1, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a78:	0852      	lsrs	r2, r2, #1
 8003a7a:	3a01      	subs	r2, #1
 8003a7c:	0552      	lsls	r2, r2, #21
 8003a7e:	4311      	orrs	r1, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a84:	0852      	lsrs	r2, r2, #1
 8003a86:	3a01      	subs	r2, #1
 8003a88:	0652      	lsls	r2, r2, #25
 8003a8a:	4311      	orrs	r1, r2
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a90:	0912      	lsrs	r2, r2, #4
 8003a92:	0452      	lsls	r2, r2, #17
 8003a94:	430a      	orrs	r2, r1
 8003a96:	4930      	ldr	r1, [pc, #192]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a9c:	4b2e      	ldr	r3, [pc, #184]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a2d      	ldr	r2, [pc, #180]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aa6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003aa8:	4b2b      	ldr	r3, [pc, #172]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a2a      	ldr	r2, [pc, #168]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ab4:	f7fe fe5c 	bl	8002770 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003abc:	f7fe fe58 	bl	8002770 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e058      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ace:	4b22      	ldr	r3, [pc, #136]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ada:	e050      	b.n	8003b7e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e04f      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae0:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d148      	bne.n	8003b7e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003aec:	4b1a      	ldr	r3, [pc, #104]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a19      	ldr	r2, [pc, #100]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003af6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003af8:	4b17      	ldr	r3, [pc, #92]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	4a16      	ldr	r2, [pc, #88]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b04:	f7fe fe34 	bl	8002770 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0c:	f7fe fe30 	bl	8002770 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e030      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b1e:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0x734>
 8003b2a:	e028      	b.n	8003b7e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	d023      	beq.n	8003b7a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b32:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a08      	ldr	r2, [pc, #32]	; (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003b38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3e:	f7fe fe17 	bl	8002770 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b44:	e00c      	b.n	8003b60 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b46:	f7fe fe13 	bl	8002770 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d905      	bls.n	8003b60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e013      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b60:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <HAL_RCC_OscConfig+0x7b0>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1ec      	bne.n	8003b46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b6c:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <HAL_RCC_OscConfig+0x7b0>)
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	4905      	ldr	r1, [pc, #20]	; (8003b88 <HAL_RCC_OscConfig+0x7b0>)
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_RCC_OscConfig+0x7b4>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	60cb      	str	r3, [r1, #12]
 8003b78:	e001      	b.n	8003b7e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3720      	adds	r7, #32
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	feeefffc 	.word	0xfeeefffc

08003b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0e7      	b.n	8003d74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba4:	4b75      	ldr	r3, [pc, #468]	; (8003d7c <HAL_RCC_ClockConfig+0x1ec>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d910      	bls.n	8003bd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb2:	4b72      	ldr	r3, [pc, #456]	; (8003d7c <HAL_RCC_ClockConfig+0x1ec>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 0207 	bic.w	r2, r3, #7
 8003bba:	4970      	ldr	r1, [pc, #448]	; (8003d7c <HAL_RCC_ClockConfig+0x1ec>)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc2:	4b6e      	ldr	r3, [pc, #440]	; (8003d7c <HAL_RCC_ClockConfig+0x1ec>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0cf      	b.n	8003d74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d010      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	4b66      	ldr	r3, [pc, #408]	; (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d908      	bls.n	8003c02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf0:	4b63      	ldr	r3, [pc, #396]	; (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	4960      	ldr	r1, [pc, #384]	; (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d04c      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d107      	bne.n	8003c26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c16:	4b5a      	ldr	r3, [pc, #360]	; (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d121      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e0a6      	b.n	8003d74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d107      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c2e:	4b54      	ldr	r3, [pc, #336]	; (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d115      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e09a      	b.n	8003d74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d107      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c46:	4b4e      	ldr	r3, [pc, #312]	; (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e08e      	b.n	8003d74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c56:	4b4a      	ldr	r3, [pc, #296]	; (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e086      	b.n	8003d74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c66:	4b46      	ldr	r3, [pc, #280]	; (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f023 0203 	bic.w	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4943      	ldr	r1, [pc, #268]	; (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c78:	f7fe fd7a 	bl	8002770 <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c80:	f7fe fd76 	bl	8002770 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e06e      	b.n	8003d74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	4b3a      	ldr	r3, [pc, #232]	; (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 020c 	and.w	r2, r3, #12
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d1eb      	bne.n	8003c80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d010      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	4b31      	ldr	r3, [pc, #196]	; (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d208      	bcs.n	8003cd6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc4:	4b2e      	ldr	r3, [pc, #184]	; (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	492b      	ldr	r1, [pc, #172]	; (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd6:	4b29      	ldr	r3, [pc, #164]	; (8003d7c <HAL_RCC_ClockConfig+0x1ec>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d210      	bcs.n	8003d06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce4:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <HAL_RCC_ClockConfig+0x1ec>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f023 0207 	bic.w	r2, r3, #7
 8003cec:	4923      	ldr	r1, [pc, #140]	; (8003d7c <HAL_RCC_ClockConfig+0x1ec>)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf4:	4b21      	ldr	r3, [pc, #132]	; (8003d7c <HAL_RCC_ClockConfig+0x1ec>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d001      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e036      	b.n	8003d74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d12:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	4918      	ldr	r1, [pc, #96]	; (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d009      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d30:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4910      	ldr	r1, [pc, #64]	; (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d44:	f000 f824 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	4b0d      	ldr	r3, [pc, #52]	; (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	091b      	lsrs	r3, r3, #4
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	490b      	ldr	r1, [pc, #44]	; (8003d84 <HAL_RCC_ClockConfig+0x1f4>)
 8003d56:	5ccb      	ldrb	r3, [r1, r3]
 8003d58:	f003 031f 	and.w	r3, r3, #31
 8003d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d60:	4a09      	ldr	r2, [pc, #36]	; (8003d88 <HAL_RCC_ClockConfig+0x1f8>)
 8003d62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d64:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <HAL_RCC_ClockConfig+0x1fc>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fe fcb1 	bl	80026d0 <HAL_InitTick>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d72:	7afb      	ldrb	r3, [r7, #11]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40022000 	.word	0x40022000
 8003d80:	40021000 	.word	0x40021000
 8003d84:	0800a818 	.word	0x0800a818
 8003d88:	200000c0 	.word	0x200000c0
 8003d8c:	200000c4 	.word	0x200000c4

08003d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b089      	sub	sp, #36	; 0x24
 8003d94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d9e:	4b3e      	ldr	r3, [pc, #248]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003da8:	4b3b      	ldr	r3, [pc, #236]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2b0c      	cmp	r3, #12
 8003dbc:	d121      	bne.n	8003e02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d11e      	bne.n	8003e02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003dc4:	4b34      	ldr	r3, [pc, #208]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d107      	bne.n	8003de0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003dd0:	4b31      	ldr	r3, [pc, #196]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd6:	0a1b      	lsrs	r3, r3, #8
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	61fb      	str	r3, [r7, #28]
 8003dde:	e005      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003de0:	4b2d      	ldr	r3, [pc, #180]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	091b      	lsrs	r3, r3, #4
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003dec:	4a2b      	ldr	r2, [pc, #172]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10d      	bne.n	8003e18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e00:	e00a      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d102      	bne.n	8003e0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e08:	4b25      	ldr	r3, [pc, #148]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e0a:	61bb      	str	r3, [r7, #24]
 8003e0c:	e004      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e14:	4b23      	ldr	r3, [pc, #140]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	2b0c      	cmp	r3, #12
 8003e1c:	d134      	bne.n	8003e88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e1e:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d003      	beq.n	8003e36 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d003      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0xac>
 8003e34:	e005      	b.n	8003e42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e36:	4b1a      	ldr	r3, [pc, #104]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e38:	617b      	str	r3, [r7, #20]
      break;
 8003e3a:	e005      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e3c:	4b19      	ldr	r3, [pc, #100]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e3e:	617b      	str	r3, [r7, #20]
      break;
 8003e40:	e002      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	617b      	str	r3, [r7, #20]
      break;
 8003e46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e48:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	3301      	adds	r3, #1
 8003e54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e56:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	0a1b      	lsrs	r3, r3, #8
 8003e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	fb03 f202 	mul.w	r2, r3, r2
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	0e5b      	lsrs	r3, r3, #25
 8003e74:	f003 0303 	and.w	r3, r3, #3
 8003e78:	3301      	adds	r3, #1
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e88:	69bb      	ldr	r3, [r7, #24]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3724      	adds	r7, #36	; 0x24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	0800a830 	.word	0x0800a830
 8003ea0:	00f42400 	.word	0x00f42400
 8003ea4:	007a1200 	.word	0x007a1200

08003ea8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eac:	4b03      	ldr	r3, [pc, #12]	; (8003ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8003eae:	681b      	ldr	r3, [r3, #0]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	200000c0 	.word	0x200000c0

08003ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ec4:	f7ff fff0 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	0a1b      	lsrs	r3, r3, #8
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	4904      	ldr	r1, [pc, #16]	; (8003ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ed6:	5ccb      	ldrb	r3, [r1, r3]
 8003ed8:	f003 031f 	and.w	r3, r3, #31
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	0800a828 	.word	0x0800a828

08003eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ef0:	f7ff ffda 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	0adb      	lsrs	r3, r3, #11
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	4904      	ldr	r1, [pc, #16]	; (8003f14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f02:	5ccb      	ldrb	r3, [r1, r3]
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40021000 	.word	0x40021000
 8003f14:	0800a828 	.word	0x0800a828

08003f18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f20:	2300      	movs	r3, #0
 8003f22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f24:	4b2a      	ldr	r3, [pc, #168]	; (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f30:	f7ff f9ee 	bl	8003310 <HAL_PWREx_GetVoltageRange>
 8003f34:	6178      	str	r0, [r7, #20]
 8003f36:	e014      	b.n	8003f62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f38:	4b25      	ldr	r3, [pc, #148]	; (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3c:	4a24      	ldr	r2, [pc, #144]	; (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f42:	6593      	str	r3, [r2, #88]	; 0x58
 8003f44:	4b22      	ldr	r3, [pc, #136]	; (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f50:	f7ff f9de 	bl	8003310 <HAL_PWREx_GetVoltageRange>
 8003f54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f56:	4b1e      	ldr	r3, [pc, #120]	; (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5a:	4a1d      	ldr	r2, [pc, #116]	; (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f68:	d10b      	bne.n	8003f82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b80      	cmp	r3, #128	; 0x80
 8003f6e:	d919      	bls.n	8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2ba0      	cmp	r3, #160	; 0xa0
 8003f74:	d902      	bls.n	8003f7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f76:	2302      	movs	r3, #2
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	e013      	b.n	8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	e010      	b.n	8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b80      	cmp	r3, #128	; 0x80
 8003f86:	d902      	bls.n	8003f8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f88:	2303      	movs	r3, #3
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	e00a      	b.n	8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b80      	cmp	r3, #128	; 0x80
 8003f92:	d102      	bne.n	8003f9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f94:	2302      	movs	r3, #2
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	e004      	b.n	8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b70      	cmp	r3, #112	; 0x70
 8003f9e:	d101      	bne.n	8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f023 0207 	bic.w	r2, r3, #7
 8003fac:	4909      	ldr	r1, [pc, #36]	; (8003fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fb4:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d001      	beq.n	8003fc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40022000 	.word	0x40022000

08003fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d041      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ffc:	d02a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ffe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004002:	d824      	bhi.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004004:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004008:	d008      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800400a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800400e:	d81e      	bhi.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004018:	d010      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800401a:	e018      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800401c:	4b86      	ldr	r3, [pc, #536]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4a85      	ldr	r2, [pc, #532]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004026:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004028:	e015      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3304      	adds	r3, #4
 800402e:	2100      	movs	r1, #0
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fabb 	bl	80045ac <RCCEx_PLLSAI1_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800403a:	e00c      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3320      	adds	r3, #32
 8004040:	2100      	movs	r1, #0
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fba6 	bl	8004794 <RCCEx_PLLSAI2_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800404c:	e003      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	74fb      	strb	r3, [r7, #19]
      break;
 8004052:	e000      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004056:	7cfb      	ldrb	r3, [r7, #19]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10b      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800405c:	4b76      	ldr	r3, [pc, #472]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800406a:	4973      	ldr	r1, [pc, #460]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004072:	e001      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004074:	7cfb      	ldrb	r3, [r7, #19]
 8004076:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d041      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004088:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800408c:	d02a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800408e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004092:	d824      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004094:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004098:	d008      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800409a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800409e:	d81e      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80040a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040a8:	d010      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040aa:	e018      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040ac:	4b62      	ldr	r3, [pc, #392]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4a61      	ldr	r2, [pc, #388]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040b8:	e015      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3304      	adds	r3, #4
 80040be:	2100      	movs	r1, #0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fa73 	bl	80045ac <RCCEx_PLLSAI1_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040ca:	e00c      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3320      	adds	r3, #32
 80040d0:	2100      	movs	r1, #0
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fb5e 	bl	8004794 <RCCEx_PLLSAI2_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040dc:	e003      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	74fb      	strb	r3, [r7, #19]
      break;
 80040e2:	e000      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80040e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040e6:	7cfb      	ldrb	r3, [r7, #19]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10b      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040ec:	4b52      	ldr	r3, [pc, #328]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040fa:	494f      	ldr	r1, [pc, #316]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004102:	e001      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004104:	7cfb      	ldrb	r3, [r7, #19]
 8004106:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80a0 	beq.w	8004256 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004116:	2300      	movs	r3, #0
 8004118:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800411a:	4b47      	ldr	r3, [pc, #284]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800411c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800412a:	2300      	movs	r3, #0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00d      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004130:	4b41      	ldr	r3, [pc, #260]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004134:	4a40      	ldr	r2, [pc, #256]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800413a:	6593      	str	r3, [r2, #88]	; 0x58
 800413c:	4b3e      	ldr	r3, [pc, #248]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004144:	60bb      	str	r3, [r7, #8]
 8004146:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004148:	2301      	movs	r3, #1
 800414a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800414c:	4b3b      	ldr	r3, [pc, #236]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a3a      	ldr	r2, [pc, #232]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004158:	f7fe fb0a 	bl	8002770 <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800415e:	e009      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004160:	f7fe fb06 	bl	8002770 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d902      	bls.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	74fb      	strb	r3, [r7, #19]
        break;
 8004172:	e005      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004174:	4b31      	ldr	r3, [pc, #196]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0ef      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004180:	7cfb      	ldrb	r3, [r7, #19]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d15c      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004186:	4b2c      	ldr	r3, [pc, #176]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004190:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01f      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d019      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041a4:	4b24      	ldr	r3, [pc, #144]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041b0:	4b21      	ldr	r3, [pc, #132]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b6:	4a20      	ldr	r2, [pc, #128]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041c0:	4b1d      	ldr	r3, [pc, #116]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c6:	4a1c      	ldr	r2, [pc, #112]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041d0:	4a19      	ldr	r2, [pc, #100]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d016      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e2:	f7fe fac5 	bl	8002770 <HAL_GetTick>
 80041e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e8:	e00b      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ea:	f7fe fac1 	bl	8002770 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d902      	bls.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	74fb      	strb	r3, [r7, #19]
            break;
 8004200:	e006      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004202:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0ec      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004210:	7cfb      	ldrb	r3, [r7, #19]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10c      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004216:	4b08      	ldr	r3, [pc, #32]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004226:	4904      	ldr	r1, [pc, #16]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800422e:	e009      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004230:	7cfb      	ldrb	r3, [r7, #19]
 8004232:	74bb      	strb	r3, [r7, #18]
 8004234:	e006      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004236:	bf00      	nop
 8004238:	40021000 	.word	0x40021000
 800423c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004240:	7cfb      	ldrb	r3, [r7, #19]
 8004242:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004244:	7c7b      	ldrb	r3, [r7, #17]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d105      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800424a:	4b9e      	ldr	r3, [pc, #632]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	4a9d      	ldr	r2, [pc, #628]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004254:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004262:	4b98      	ldr	r3, [pc, #608]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004268:	f023 0203 	bic.w	r2, r3, #3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	4994      	ldr	r1, [pc, #592]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004284:	4b8f      	ldr	r3, [pc, #572]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	f023 020c 	bic.w	r2, r3, #12
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004292:	498c      	ldr	r1, [pc, #560]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042a6:	4b87      	ldr	r3, [pc, #540]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	4983      	ldr	r1, [pc, #524]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042c8:	4b7e      	ldr	r3, [pc, #504]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d6:	497b      	ldr	r1, [pc, #492]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042ea:	4b76      	ldr	r3, [pc, #472]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f8:	4972      	ldr	r1, [pc, #456]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800430c:	4b6d      	ldr	r3, [pc, #436]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004312:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431a:	496a      	ldr	r1, [pc, #424]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800432e:	4b65      	ldr	r3, [pc, #404]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004334:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433c:	4961      	ldr	r1, [pc, #388]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004350:	4b5c      	ldr	r3, [pc, #368]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800435e:	4959      	ldr	r1, [pc, #356]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004372:	4b54      	ldr	r3, [pc, #336]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004378:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004380:	4950      	ldr	r1, [pc, #320]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004394:	4b4b      	ldr	r3, [pc, #300]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	4948      	ldr	r1, [pc, #288]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043b6:	4b43      	ldr	r3, [pc, #268]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c4:	493f      	ldr	r1, [pc, #252]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d028      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043d8:	4b3a      	ldr	r3, [pc, #232]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043e6:	4937      	ldr	r1, [pc, #220]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043f6:	d106      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043f8:	4b32      	ldr	r3, [pc, #200]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4a31      	ldr	r2, [pc, #196]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004402:	60d3      	str	r3, [r2, #12]
 8004404:	e011      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800440a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800440e:	d10c      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3304      	adds	r3, #4
 8004414:	2101      	movs	r1, #1
 8004416:	4618      	mov	r0, r3
 8004418:	f000 f8c8 	bl	80045ac <RCCEx_PLLSAI1_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004420:	7cfb      	ldrb	r3, [r7, #19]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004426:	7cfb      	ldrb	r3, [r7, #19]
 8004428:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d028      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004436:	4b23      	ldr	r3, [pc, #140]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004444:	491f      	ldr	r1, [pc, #124]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004454:	d106      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004456:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	4a1a      	ldr	r2, [pc, #104]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004460:	60d3      	str	r3, [r2, #12]
 8004462:	e011      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004468:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800446c:	d10c      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3304      	adds	r3, #4
 8004472:	2101      	movs	r1, #1
 8004474:	4618      	mov	r0, r3
 8004476:	f000 f899 	bl	80045ac <RCCEx_PLLSAI1_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800447e:	7cfb      	ldrb	r3, [r7, #19]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004484:	7cfb      	ldrb	r3, [r7, #19]
 8004486:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d02b      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004494:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a2:	4908      	ldr	r1, [pc, #32]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044b2:	d109      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044b4:	4b03      	ldr	r3, [pc, #12]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	4a02      	ldr	r2, [pc, #8]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044be:	60d3      	str	r3, [r2, #12]
 80044c0:	e014      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044d0:	d10c      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3304      	adds	r3, #4
 80044d6:	2101      	movs	r1, #1
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 f867 	bl	80045ac <RCCEx_PLLSAI1_Config>
 80044de:	4603      	mov	r3, r0
 80044e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044e2:	7cfb      	ldrb	r3, [r7, #19]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80044e8:	7cfb      	ldrb	r3, [r7, #19]
 80044ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d02f      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044f8:	4b2b      	ldr	r3, [pc, #172]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004506:	4928      	ldr	r1, [pc, #160]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004516:	d10d      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3304      	adds	r3, #4
 800451c:	2102      	movs	r1, #2
 800451e:	4618      	mov	r0, r3
 8004520:	f000 f844 	bl	80045ac <RCCEx_PLLSAI1_Config>
 8004524:	4603      	mov	r3, r0
 8004526:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004528:	7cfb      	ldrb	r3, [r7, #19]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d014      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800452e:	7cfb      	ldrb	r3, [r7, #19]
 8004530:	74bb      	strb	r3, [r7, #18]
 8004532:	e011      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800453c:	d10c      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3320      	adds	r3, #32
 8004542:	2102      	movs	r1, #2
 8004544:	4618      	mov	r0, r3
 8004546:	f000 f925 	bl	8004794 <RCCEx_PLLSAI2_Config>
 800454a:	4603      	mov	r3, r0
 800454c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800454e:	7cfb      	ldrb	r3, [r7, #19]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004554:	7cfb      	ldrb	r3, [r7, #19]
 8004556:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004564:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004572:	490d      	ldr	r1, [pc, #52]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00b      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004586:	4b08      	ldr	r3, [pc, #32]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004596:	4904      	ldr	r1, [pc, #16]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800459e:	7cbb      	ldrb	r3, [r7, #18]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40021000 	.word	0x40021000

080045ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045ba:	4b75      	ldr	r3, [pc, #468]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d018      	beq.n	80045f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045c6:	4b72      	ldr	r3, [pc, #456]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0203 	and.w	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d10d      	bne.n	80045f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
       ||
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d009      	beq.n	80045f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80045de:	4b6c      	ldr	r3, [pc, #432]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	091b      	lsrs	r3, r3, #4
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
       ||
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d047      	beq.n	8004682 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	73fb      	strb	r3, [r7, #15]
 80045f6:	e044      	b.n	8004682 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d018      	beq.n	8004632 <RCCEx_PLLSAI1_Config+0x86>
 8004600:	2b03      	cmp	r3, #3
 8004602:	d825      	bhi.n	8004650 <RCCEx_PLLSAI1_Config+0xa4>
 8004604:	2b01      	cmp	r3, #1
 8004606:	d002      	beq.n	800460e <RCCEx_PLLSAI1_Config+0x62>
 8004608:	2b02      	cmp	r3, #2
 800460a:	d009      	beq.n	8004620 <RCCEx_PLLSAI1_Config+0x74>
 800460c:	e020      	b.n	8004650 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800460e:	4b60      	ldr	r3, [pc, #384]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d11d      	bne.n	8004656 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800461e:	e01a      	b.n	8004656 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004620:	4b5b      	ldr	r3, [pc, #364]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d116      	bne.n	800465a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004630:	e013      	b.n	800465a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004632:	4b57      	ldr	r3, [pc, #348]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10f      	bne.n	800465e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800463e:	4b54      	ldr	r3, [pc, #336]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800464e:	e006      	b.n	800465e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
      break;
 8004654:	e004      	b.n	8004660 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004656:	bf00      	nop
 8004658:	e002      	b.n	8004660 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800465a:	bf00      	nop
 800465c:	e000      	b.n	8004660 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800465e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10d      	bne.n	8004682 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004666:	4b4a      	ldr	r3, [pc, #296]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6819      	ldr	r1, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	3b01      	subs	r3, #1
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	430b      	orrs	r3, r1
 800467c:	4944      	ldr	r1, [pc, #272]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800467e:	4313      	orrs	r3, r2
 8004680:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d17d      	bne.n	8004784 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004688:	4b41      	ldr	r3, [pc, #260]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a40      	ldr	r2, [pc, #256]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800468e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004694:	f7fe f86c 	bl	8002770 <HAL_GetTick>
 8004698:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800469a:	e009      	b.n	80046b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800469c:	f7fe f868 	bl	8002770 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d902      	bls.n	80046b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	73fb      	strb	r3, [r7, #15]
        break;
 80046ae:	e005      	b.n	80046bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046b0:	4b37      	ldr	r3, [pc, #220]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1ef      	bne.n	800469c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d160      	bne.n	8004784 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d111      	bne.n	80046ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046c8:	4b31      	ldr	r3, [pc, #196]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6892      	ldr	r2, [r2, #8]
 80046d8:	0211      	lsls	r1, r2, #8
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68d2      	ldr	r2, [r2, #12]
 80046de:	0912      	lsrs	r2, r2, #4
 80046e0:	0452      	lsls	r2, r2, #17
 80046e2:	430a      	orrs	r2, r1
 80046e4:	492a      	ldr	r1, [pc, #168]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	610b      	str	r3, [r1, #16]
 80046ea:	e027      	b.n	800473c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d112      	bne.n	8004718 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046f2:	4b27      	ldr	r3, [pc, #156]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80046fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6892      	ldr	r2, [r2, #8]
 8004702:	0211      	lsls	r1, r2, #8
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6912      	ldr	r2, [r2, #16]
 8004708:	0852      	lsrs	r2, r2, #1
 800470a:	3a01      	subs	r2, #1
 800470c:	0552      	lsls	r2, r2, #21
 800470e:	430a      	orrs	r2, r1
 8004710:	491f      	ldr	r1, [pc, #124]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004712:	4313      	orrs	r3, r2
 8004714:	610b      	str	r3, [r1, #16]
 8004716:	e011      	b.n	800473c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004718:	4b1d      	ldr	r3, [pc, #116]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004720:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6892      	ldr	r2, [r2, #8]
 8004728:	0211      	lsls	r1, r2, #8
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6952      	ldr	r2, [r2, #20]
 800472e:	0852      	lsrs	r2, r2, #1
 8004730:	3a01      	subs	r2, #1
 8004732:	0652      	lsls	r2, r2, #25
 8004734:	430a      	orrs	r2, r1
 8004736:	4916      	ldr	r1, [pc, #88]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004738:	4313      	orrs	r3, r2
 800473a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800473c:	4b14      	ldr	r3, [pc, #80]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a13      	ldr	r2, [pc, #76]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004742:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004746:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004748:	f7fe f812 	bl	8002770 <HAL_GetTick>
 800474c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800474e:	e009      	b.n	8004764 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004750:	f7fe f80e 	bl	8002770 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d902      	bls.n	8004764 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	73fb      	strb	r3, [r7, #15]
          break;
 8004762:	e005      	b.n	8004770 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004764:	4b0a      	ldr	r3, [pc, #40]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0ef      	beq.n	8004750 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	4904      	ldr	r1, [pc, #16]	; (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004780:	4313      	orrs	r3, r2
 8004782:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004784:	7bfb      	ldrb	r3, [r7, #15]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40021000 	.word	0x40021000

08004794 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047a2:	4b6a      	ldr	r3, [pc, #424]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d018      	beq.n	80047e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047ae:	4b67      	ldr	r3, [pc, #412]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f003 0203 	and.w	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d10d      	bne.n	80047da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
       ||
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80047c6:	4b61      	ldr	r3, [pc, #388]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	091b      	lsrs	r3, r3, #4
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
       ||
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d047      	beq.n	800486a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	73fb      	strb	r3, [r7, #15]
 80047de:	e044      	b.n	800486a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d018      	beq.n	800481a <RCCEx_PLLSAI2_Config+0x86>
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d825      	bhi.n	8004838 <RCCEx_PLLSAI2_Config+0xa4>
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d002      	beq.n	80047f6 <RCCEx_PLLSAI2_Config+0x62>
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d009      	beq.n	8004808 <RCCEx_PLLSAI2_Config+0x74>
 80047f4:	e020      	b.n	8004838 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047f6:	4b55      	ldr	r3, [pc, #340]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d11d      	bne.n	800483e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004806:	e01a      	b.n	800483e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004808:	4b50      	ldr	r3, [pc, #320]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004810:	2b00      	cmp	r3, #0
 8004812:	d116      	bne.n	8004842 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004818:	e013      	b.n	8004842 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800481a:	4b4c      	ldr	r3, [pc, #304]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10f      	bne.n	8004846 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004826:	4b49      	ldr	r3, [pc, #292]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d109      	bne.n	8004846 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004836:	e006      	b.n	8004846 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	73fb      	strb	r3, [r7, #15]
      break;
 800483c:	e004      	b.n	8004848 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800483e:	bf00      	nop
 8004840:	e002      	b.n	8004848 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004842:	bf00      	nop
 8004844:	e000      	b.n	8004848 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004846:	bf00      	nop
    }

    if(status == HAL_OK)
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10d      	bne.n	800486a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800484e:	4b3f      	ldr	r3, [pc, #252]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6819      	ldr	r1, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	3b01      	subs	r3, #1
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	430b      	orrs	r3, r1
 8004864:	4939      	ldr	r1, [pc, #228]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004866:	4313      	orrs	r3, r2
 8004868:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800486a:	7bfb      	ldrb	r3, [r7, #15]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d167      	bne.n	8004940 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004870:	4b36      	ldr	r3, [pc, #216]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a35      	ldr	r2, [pc, #212]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800487a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800487c:	f7fd ff78 	bl	8002770 <HAL_GetTick>
 8004880:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004882:	e009      	b.n	8004898 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004884:	f7fd ff74 	bl	8002770 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d902      	bls.n	8004898 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	73fb      	strb	r3, [r7, #15]
        break;
 8004896:	e005      	b.n	80048a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004898:	4b2c      	ldr	r3, [pc, #176]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1ef      	bne.n	8004884 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d14a      	bne.n	8004940 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d111      	bne.n	80048d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048b0:	4b26      	ldr	r3, [pc, #152]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6892      	ldr	r2, [r2, #8]
 80048c0:	0211      	lsls	r1, r2, #8
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	68d2      	ldr	r2, [r2, #12]
 80048c6:	0912      	lsrs	r2, r2, #4
 80048c8:	0452      	lsls	r2, r2, #17
 80048ca:	430a      	orrs	r2, r1
 80048cc:	491f      	ldr	r1, [pc, #124]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	614b      	str	r3, [r1, #20]
 80048d2:	e011      	b.n	80048f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048d4:	4b1d      	ldr	r3, [pc, #116]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6892      	ldr	r2, [r2, #8]
 80048e4:	0211      	lsls	r1, r2, #8
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6912      	ldr	r2, [r2, #16]
 80048ea:	0852      	lsrs	r2, r2, #1
 80048ec:	3a01      	subs	r2, #1
 80048ee:	0652      	lsls	r2, r2, #25
 80048f0:	430a      	orrs	r2, r1
 80048f2:	4916      	ldr	r1, [pc, #88]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80048f8:	4b14      	ldr	r3, [pc, #80]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a13      	ldr	r2, [pc, #76]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004902:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004904:	f7fd ff34 	bl	8002770 <HAL_GetTick>
 8004908:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800490a:	e009      	b.n	8004920 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800490c:	f7fd ff30 	bl	8002770 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d902      	bls.n	8004920 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	73fb      	strb	r3, [r7, #15]
          break;
 800491e:	e005      	b.n	800492c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004920:	4b0a      	ldr	r3, [pc, #40]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0ef      	beq.n	800490c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004934:	695a      	ldr	r2, [r3, #20]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	4904      	ldr	r1, [pc, #16]	; (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 800493c:	4313      	orrs	r3, r2
 800493e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004940:	7bfb      	ldrb	r3, [r7, #15]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40021000 	.word	0x40021000

08004950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e049      	b.n	80049f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fd fc60 	bl	800223c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3304      	adds	r3, #4
 800498c:	4619      	mov	r1, r3
 800498e:	4610      	mov	r0, r2
 8004990:	f000 fdc0 	bl	8005514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d001      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e04f      	b.n	8004ab8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a23      	ldr	r2, [pc, #140]	; (8004ac4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d01d      	beq.n	8004a76 <HAL_TIM_Base_Start_IT+0x76>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a42:	d018      	beq.n	8004a76 <HAL_TIM_Base_Start_IT+0x76>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a1f      	ldr	r2, [pc, #124]	; (8004ac8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d013      	beq.n	8004a76 <HAL_TIM_Base_Start_IT+0x76>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1e      	ldr	r2, [pc, #120]	; (8004acc <HAL_TIM_Base_Start_IT+0xcc>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00e      	beq.n	8004a76 <HAL_TIM_Base_Start_IT+0x76>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a1c      	ldr	r2, [pc, #112]	; (8004ad0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d009      	beq.n	8004a76 <HAL_TIM_Base_Start_IT+0x76>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1b      	ldr	r2, [pc, #108]	; (8004ad4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d004      	beq.n	8004a76 <HAL_TIM_Base_Start_IT+0x76>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a19      	ldr	r2, [pc, #100]	; (8004ad8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d115      	bne.n	8004aa2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	4b17      	ldr	r3, [pc, #92]	; (8004adc <HAL_TIM_Base_Start_IT+0xdc>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b06      	cmp	r3, #6
 8004a86:	d015      	beq.n	8004ab4 <HAL_TIM_Base_Start_IT+0xb4>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a8e:	d011      	beq.n	8004ab4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa0:	e008      	b.n	8004ab4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0201 	orr.w	r2, r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	e000      	b.n	8004ab6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	40012c00 	.word	0x40012c00
 8004ac8:	40000400 	.word	0x40000400
 8004acc:	40000800 	.word	0x40000800
 8004ad0:	40000c00 	.word	0x40000c00
 8004ad4:	40013400 	.word	0x40013400
 8004ad8:	40014000 	.word	0x40014000
 8004adc:	00010007 	.word	0x00010007

08004ae0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0201 	bic.w	r2, r2, #1
 8004af6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6a1a      	ldr	r2, [r3, #32]
 8004afe:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10f      	bne.n	8004b28 <HAL_TIM_Base_Stop_IT+0x48>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6a1a      	ldr	r2, [r3, #32]
 8004b0e:	f240 4344 	movw	r3, #1092	; 0x444
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d107      	bne.n	8004b28 <HAL_TIM_Base_Stop_IT+0x48>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0201 	bic.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e049      	b.n	8004be4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d106      	bne.n	8004b6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7fd fb01 	bl	800216c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	f000 fcc9 	bl	8005514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d109      	bne.n	8004c14 <HAL_TIM_PWM_Start_IT+0x28>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	bf14      	ite	ne
 8004c0c:	2301      	movne	r3, #1
 8004c0e:	2300      	moveq	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	e03c      	b.n	8004c8e <HAL_TIM_PWM_Start_IT+0xa2>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d109      	bne.n	8004c2e <HAL_TIM_PWM_Start_IT+0x42>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	bf14      	ite	ne
 8004c26:	2301      	movne	r3, #1
 8004c28:	2300      	moveq	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	e02f      	b.n	8004c8e <HAL_TIM_PWM_Start_IT+0xa2>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d109      	bne.n	8004c48 <HAL_TIM_PWM_Start_IT+0x5c>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	bf14      	ite	ne
 8004c40:	2301      	movne	r3, #1
 8004c42:	2300      	moveq	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	e022      	b.n	8004c8e <HAL_TIM_PWM_Start_IT+0xa2>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b0c      	cmp	r3, #12
 8004c4c:	d109      	bne.n	8004c62 <HAL_TIM_PWM_Start_IT+0x76>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	bf14      	ite	ne
 8004c5a:	2301      	movne	r3, #1
 8004c5c:	2300      	moveq	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	e015      	b.n	8004c8e <HAL_TIM_PWM_Start_IT+0xa2>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b10      	cmp	r3, #16
 8004c66:	d109      	bne.n	8004c7c <HAL_TIM_PWM_Start_IT+0x90>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	bf14      	ite	ne
 8004c74:	2301      	movne	r3, #1
 8004c76:	2300      	moveq	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	e008      	b.n	8004c8e <HAL_TIM_PWM_Start_IT+0xa2>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	bf14      	ite	ne
 8004c88:	2301      	movne	r3, #1
 8004c8a:	2300      	moveq	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e0e7      	b.n	8004e66 <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d104      	bne.n	8004ca6 <HAL_TIM_PWM_Start_IT+0xba>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca4:	e023      	b.n	8004cee <HAL_TIM_PWM_Start_IT+0x102>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d104      	bne.n	8004cb6 <HAL_TIM_PWM_Start_IT+0xca>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cb4:	e01b      	b.n	8004cee <HAL_TIM_PWM_Start_IT+0x102>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d104      	bne.n	8004cc6 <HAL_TIM_PWM_Start_IT+0xda>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cc4:	e013      	b.n	8004cee <HAL_TIM_PWM_Start_IT+0x102>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b0c      	cmp	r3, #12
 8004cca:	d104      	bne.n	8004cd6 <HAL_TIM_PWM_Start_IT+0xea>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cd4:	e00b      	b.n	8004cee <HAL_TIM_PWM_Start_IT+0x102>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d104      	bne.n	8004ce6 <HAL_TIM_PWM_Start_IT+0xfa>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce4:	e003      	b.n	8004cee <HAL_TIM_PWM_Start_IT+0x102>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b0c      	cmp	r3, #12
 8004cf2:	d841      	bhi.n	8004d78 <HAL_TIM_PWM_Start_IT+0x18c>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <HAL_TIM_PWM_Start_IT+0x110>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d31 	.word	0x08004d31
 8004d00:	08004d79 	.word	0x08004d79
 8004d04:	08004d79 	.word	0x08004d79
 8004d08:	08004d79 	.word	0x08004d79
 8004d0c:	08004d43 	.word	0x08004d43
 8004d10:	08004d79 	.word	0x08004d79
 8004d14:	08004d79 	.word	0x08004d79
 8004d18:	08004d79 	.word	0x08004d79
 8004d1c:	08004d55 	.word	0x08004d55
 8004d20:	08004d79 	.word	0x08004d79
 8004d24:	08004d79 	.word	0x08004d79
 8004d28:	08004d79 	.word	0x08004d79
 8004d2c:	08004d67 	.word	0x08004d67
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0202 	orr.w	r2, r2, #2
 8004d3e:	60da      	str	r2, [r3, #12]
      break;
 8004d40:	e01d      	b.n	8004d7e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f042 0204 	orr.w	r2, r2, #4
 8004d50:	60da      	str	r2, [r3, #12]
      break;
 8004d52:	e014      	b.n	8004d7e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0208 	orr.w	r2, r2, #8
 8004d62:	60da      	str	r2, [r3, #12]
      break;
 8004d64:	e00b      	b.n	8004d7e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0210 	orr.w	r2, r2, #16
 8004d74:	60da      	str	r2, [r3, #12]
      break;
 8004d76:	e002      	b.n	8004d7e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d7c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d16f      	bne.n	8004e64 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	6839      	ldr	r1, [r7, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 ff31 	bl	8005bf4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a36      	ldr	r2, [pc, #216]	; (8004e70 <HAL_TIM_PWM_Start_IT+0x284>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d013      	beq.n	8004dc4 <HAL_TIM_PWM_Start_IT+0x1d8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a34      	ldr	r2, [pc, #208]	; (8004e74 <HAL_TIM_PWM_Start_IT+0x288>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00e      	beq.n	8004dc4 <HAL_TIM_PWM_Start_IT+0x1d8>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a33      	ldr	r2, [pc, #204]	; (8004e78 <HAL_TIM_PWM_Start_IT+0x28c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d009      	beq.n	8004dc4 <HAL_TIM_PWM_Start_IT+0x1d8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a31      	ldr	r2, [pc, #196]	; (8004e7c <HAL_TIM_PWM_Start_IT+0x290>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d004      	beq.n	8004dc4 <HAL_TIM_PWM_Start_IT+0x1d8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a30      	ldr	r2, [pc, #192]	; (8004e80 <HAL_TIM_PWM_Start_IT+0x294>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d101      	bne.n	8004dc8 <HAL_TIM_PWM_Start_IT+0x1dc>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <HAL_TIM_PWM_Start_IT+0x1de>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ddc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a23      	ldr	r2, [pc, #140]	; (8004e70 <HAL_TIM_PWM_Start_IT+0x284>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d01d      	beq.n	8004e24 <HAL_TIM_PWM_Start_IT+0x238>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df0:	d018      	beq.n	8004e24 <HAL_TIM_PWM_Start_IT+0x238>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a23      	ldr	r2, [pc, #140]	; (8004e84 <HAL_TIM_PWM_Start_IT+0x298>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d013      	beq.n	8004e24 <HAL_TIM_PWM_Start_IT+0x238>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a21      	ldr	r2, [pc, #132]	; (8004e88 <HAL_TIM_PWM_Start_IT+0x29c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00e      	beq.n	8004e24 <HAL_TIM_PWM_Start_IT+0x238>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a20      	ldr	r2, [pc, #128]	; (8004e8c <HAL_TIM_PWM_Start_IT+0x2a0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d009      	beq.n	8004e24 <HAL_TIM_PWM_Start_IT+0x238>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a17      	ldr	r2, [pc, #92]	; (8004e74 <HAL_TIM_PWM_Start_IT+0x288>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d004      	beq.n	8004e24 <HAL_TIM_PWM_Start_IT+0x238>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a16      	ldr	r2, [pc, #88]	; (8004e78 <HAL_TIM_PWM_Start_IT+0x28c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d115      	bne.n	8004e50 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	4b19      	ldr	r3, [pc, #100]	; (8004e90 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2b06      	cmp	r3, #6
 8004e34:	d015      	beq.n	8004e62 <HAL_TIM_PWM_Start_IT+0x276>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e3c:	d011      	beq.n	8004e62 <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0201 	orr.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e4e:	e008      	b.n	8004e62 <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0201 	orr.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	e000      	b.n	8004e64 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e62:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40012c00 	.word	0x40012c00
 8004e74:	40013400 	.word	0x40013400
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40014400 	.word	0x40014400
 8004e80:	40014800 	.word	0x40014800
 8004e84:	40000400 	.word	0x40000400
 8004e88:	40000800 	.word	0x40000800
 8004e8c:	40000c00 	.word	0x40000c00
 8004e90:	00010007 	.word	0x00010007

08004e94 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b0c      	cmp	r3, #12
 8004ea6:	d841      	bhi.n	8004f2c <HAL_TIM_PWM_Stop_IT+0x98>
 8004ea8:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004ee5 	.word	0x08004ee5
 8004eb4:	08004f2d 	.word	0x08004f2d
 8004eb8:	08004f2d 	.word	0x08004f2d
 8004ebc:	08004f2d 	.word	0x08004f2d
 8004ec0:	08004ef7 	.word	0x08004ef7
 8004ec4:	08004f2d 	.word	0x08004f2d
 8004ec8:	08004f2d 	.word	0x08004f2d
 8004ecc:	08004f2d 	.word	0x08004f2d
 8004ed0:	08004f09 	.word	0x08004f09
 8004ed4:	08004f2d 	.word	0x08004f2d
 8004ed8:	08004f2d 	.word	0x08004f2d
 8004edc:	08004f2d 	.word	0x08004f2d
 8004ee0:	08004f1b 	.word	0x08004f1b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0202 	bic.w	r2, r2, #2
 8004ef2:	60da      	str	r2, [r3, #12]
      break;
 8004ef4:	e01d      	b.n	8004f32 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0204 	bic.w	r2, r2, #4
 8004f04:	60da      	str	r2, [r3, #12]
      break;
 8004f06:	e014      	b.n	8004f32 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0208 	bic.w	r2, r2, #8
 8004f16:	60da      	str	r2, [r3, #12]
      break;
 8004f18:	e00b      	b.n	8004f32 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0210 	bic.w	r2, r2, #16
 8004f28:	60da      	str	r2, [r3, #12]
      break;
 8004f2a:	e002      	b.n	8004f32 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f30:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f040 8081 	bne.w	800503c <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	6839      	ldr	r1, [r7, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fe56 	bl	8005bf4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a3e      	ldr	r2, [pc, #248]	; (8005048 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d013      	beq.n	8004f7a <HAL_TIM_PWM_Stop_IT+0xe6>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a3d      	ldr	r2, [pc, #244]	; (800504c <HAL_TIM_PWM_Stop_IT+0x1b8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d00e      	beq.n	8004f7a <HAL_TIM_PWM_Stop_IT+0xe6>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a3b      	ldr	r2, [pc, #236]	; (8005050 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d009      	beq.n	8004f7a <HAL_TIM_PWM_Stop_IT+0xe6>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a3a      	ldr	r2, [pc, #232]	; (8005054 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d004      	beq.n	8004f7a <HAL_TIM_PWM_Stop_IT+0xe6>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a38      	ldr	r2, [pc, #224]	; (8005058 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d101      	bne.n	8004f7e <HAL_TIM_PWM_Stop_IT+0xea>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <HAL_TIM_PWM_Stop_IT+0xec>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d017      	beq.n	8004fb4 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6a1a      	ldr	r2, [r3, #32]
 8004f8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f8e:	4013      	ands	r3, r2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10f      	bne.n	8004fb4 <HAL_TIM_PWM_Stop_IT+0x120>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6a1a      	ldr	r2, [r3, #32]
 8004f9a:	f240 4344 	movw	r3, #1092	; 0x444
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d107      	bne.n	8004fb4 <HAL_TIM_PWM_Stop_IT+0x120>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fb2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6a1a      	ldr	r2, [r3, #32]
 8004fba:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10f      	bne.n	8004fe4 <HAL_TIM_PWM_Stop_IT+0x150>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6a1a      	ldr	r2, [r3, #32]
 8004fca:	f240 4344 	movw	r3, #1092	; 0x444
 8004fce:	4013      	ands	r3, r2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d107      	bne.n	8004fe4 <HAL_TIM_PWM_Stop_IT+0x150>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 0201 	bic.w	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d104      	bne.n	8004ff4 <HAL_TIM_PWM_Stop_IT+0x160>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ff2:	e023      	b.n	800503c <HAL_TIM_PWM_Stop_IT+0x1a8>
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d104      	bne.n	8005004 <HAL_TIM_PWM_Stop_IT+0x170>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005002:	e01b      	b.n	800503c <HAL_TIM_PWM_Stop_IT+0x1a8>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2b08      	cmp	r3, #8
 8005008:	d104      	bne.n	8005014 <HAL_TIM_PWM_Stop_IT+0x180>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005012:	e013      	b.n	800503c <HAL_TIM_PWM_Stop_IT+0x1a8>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b0c      	cmp	r3, #12
 8005018:	d104      	bne.n	8005024 <HAL_TIM_PWM_Stop_IT+0x190>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005022:	e00b      	b.n	800503c <HAL_TIM_PWM_Stop_IT+0x1a8>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	2b10      	cmp	r3, #16
 8005028:	d104      	bne.n	8005034 <HAL_TIM_PWM_Stop_IT+0x1a0>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005032:	e003      	b.n	800503c <HAL_TIM_PWM_Stop_IT+0x1a8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800503c:	7bfb      	ldrb	r3, [r7, #15]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40012c00 	.word	0x40012c00
 800504c:	40013400 	.word	0x40013400
 8005050:	40014000 	.word	0x40014000
 8005054:	40014400 	.word	0x40014400
 8005058:	40014800 	.word	0x40014800

0800505c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b02      	cmp	r3, #2
 8005070:	d122      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b02      	cmp	r3, #2
 800507e:	d11b      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0202 	mvn.w	r2, #2
 8005088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fa1a 	bl	80054d8 <HAL_TIM_IC_CaptureCallback>
 80050a4:	e005      	b.n	80050b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fa0c 	bl	80054c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fa1d 	bl	80054ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d122      	bne.n	800510c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d11b      	bne.n	800510c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f06f 0204 	mvn.w	r2, #4
 80050dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2202      	movs	r2, #2
 80050e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f9f0 	bl	80054d8 <HAL_TIM_IC_CaptureCallback>
 80050f8:	e005      	b.n	8005106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f9e2 	bl	80054c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f9f3 	bl	80054ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b08      	cmp	r3, #8
 8005118:	d122      	bne.n	8005160 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b08      	cmp	r3, #8
 8005126:	d11b      	bne.n	8005160 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0208 	mvn.w	r2, #8
 8005130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2204      	movs	r2, #4
 8005136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f9c6 	bl	80054d8 <HAL_TIM_IC_CaptureCallback>
 800514c:	e005      	b.n	800515a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f9b8 	bl	80054c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f9c9 	bl	80054ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b10      	cmp	r3, #16
 800516c:	d122      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b10      	cmp	r3, #16
 800517a:	d11b      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0210 	mvn.w	r2, #16
 8005184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2208      	movs	r2, #8
 800518a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f99c 	bl	80054d8 <HAL_TIM_IC_CaptureCallback>
 80051a0:	e005      	b.n	80051ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f98e 	bl	80054c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f99f 	bl	80054ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d10e      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d107      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0201 	mvn.w	r2, #1
 80051d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fc fcc2 	bl	8001b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ea:	2b80      	cmp	r3, #128	; 0x80
 80051ec:	d10e      	bne.n	800520c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f8:	2b80      	cmp	r3, #128	; 0x80
 80051fa:	d107      	bne.n	800520c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fdac 	bl	8005d64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800521a:	d10e      	bne.n	800523a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005226:	2b80      	cmp	r3, #128	; 0x80
 8005228:	d107      	bne.n	800523a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 fd9f 	bl	8005d78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005244:	2b40      	cmp	r3, #64	; 0x40
 8005246:	d10e      	bne.n	8005266 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005252:	2b40      	cmp	r3, #64	; 0x40
 8005254:	d107      	bne.n	8005266 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800525e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f94d 	bl	8005500 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b20      	cmp	r3, #32
 8005272:	d10e      	bne.n	8005292 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b20      	cmp	r3, #32
 8005280:	d107      	bne.n	8005292 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f06f 0220 	mvn.w	r2, #32
 800528a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fd5f 	bl	8005d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d101      	bne.n	80052ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052b6:	2302      	movs	r3, #2
 80052b8:	e0ff      	b.n	80054ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b14      	cmp	r3, #20
 80052c6:	f200 80f0 	bhi.w	80054aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80052ca:	a201      	add	r2, pc, #4	; (adr r2, 80052d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d0:	08005325 	.word	0x08005325
 80052d4:	080054ab 	.word	0x080054ab
 80052d8:	080054ab 	.word	0x080054ab
 80052dc:	080054ab 	.word	0x080054ab
 80052e0:	08005365 	.word	0x08005365
 80052e4:	080054ab 	.word	0x080054ab
 80052e8:	080054ab 	.word	0x080054ab
 80052ec:	080054ab 	.word	0x080054ab
 80052f0:	080053a7 	.word	0x080053a7
 80052f4:	080054ab 	.word	0x080054ab
 80052f8:	080054ab 	.word	0x080054ab
 80052fc:	080054ab 	.word	0x080054ab
 8005300:	080053e7 	.word	0x080053e7
 8005304:	080054ab 	.word	0x080054ab
 8005308:	080054ab 	.word	0x080054ab
 800530c:	080054ab 	.word	0x080054ab
 8005310:	08005429 	.word	0x08005429
 8005314:	080054ab 	.word	0x080054ab
 8005318:	080054ab 	.word	0x080054ab
 800531c:	080054ab 	.word	0x080054ab
 8005320:	08005469 	.word	0x08005469
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68b9      	ldr	r1, [r7, #8]
 800532a:	4618      	mov	r0, r3
 800532c:	f000 f98c 	bl	8005648 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699a      	ldr	r2, [r3, #24]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0208 	orr.w	r2, r2, #8
 800533e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0204 	bic.w	r2, r2, #4
 800534e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6999      	ldr	r1, [r3, #24]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	691a      	ldr	r2, [r3, #16]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	619a      	str	r2, [r3, #24]
      break;
 8005362:	e0a5      	b.n	80054b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f9fc 	bl	8005768 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800537e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800538e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6999      	ldr	r1, [r3, #24]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	021a      	lsls	r2, r3, #8
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	619a      	str	r2, [r3, #24]
      break;
 80053a4:	e084      	b.n	80054b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68b9      	ldr	r1, [r7, #8]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fa65 	bl	800587c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69da      	ldr	r2, [r3, #28]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f042 0208 	orr.w	r2, r2, #8
 80053c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0204 	bic.w	r2, r2, #4
 80053d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69d9      	ldr	r1, [r3, #28]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	61da      	str	r2, [r3, #28]
      break;
 80053e4:	e064      	b.n	80054b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 facd 	bl	800598c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69d9      	ldr	r1, [r3, #28]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	021a      	lsls	r2, r3, #8
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	61da      	str	r2, [r3, #28]
      break;
 8005426:	e043      	b.n	80054b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fb16 	bl	8005a60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0208 	orr.w	r2, r2, #8
 8005442:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0204 	bic.w	r2, r2, #4
 8005452:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	691a      	ldr	r2, [r3, #16]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005466:	e023      	b.n	80054b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68b9      	ldr	r1, [r7, #8]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fb5a 	bl	8005b28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005482:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005492:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	021a      	lsls	r2, r3, #8
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054a8:	e002      	b.n	80054b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	75fb      	strb	r3, [r7, #23]
      break;
 80054ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop

080054c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a40      	ldr	r2, [pc, #256]	; (8005628 <TIM_Base_SetConfig+0x114>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d013      	beq.n	8005554 <TIM_Base_SetConfig+0x40>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005532:	d00f      	beq.n	8005554 <TIM_Base_SetConfig+0x40>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a3d      	ldr	r2, [pc, #244]	; (800562c <TIM_Base_SetConfig+0x118>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d00b      	beq.n	8005554 <TIM_Base_SetConfig+0x40>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a3c      	ldr	r2, [pc, #240]	; (8005630 <TIM_Base_SetConfig+0x11c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d007      	beq.n	8005554 <TIM_Base_SetConfig+0x40>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a3b      	ldr	r2, [pc, #236]	; (8005634 <TIM_Base_SetConfig+0x120>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d003      	beq.n	8005554 <TIM_Base_SetConfig+0x40>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a3a      	ldr	r2, [pc, #232]	; (8005638 <TIM_Base_SetConfig+0x124>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d108      	bne.n	8005566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a2f      	ldr	r2, [pc, #188]	; (8005628 <TIM_Base_SetConfig+0x114>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d01f      	beq.n	80055ae <TIM_Base_SetConfig+0x9a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005574:	d01b      	beq.n	80055ae <TIM_Base_SetConfig+0x9a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a2c      	ldr	r2, [pc, #176]	; (800562c <TIM_Base_SetConfig+0x118>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d017      	beq.n	80055ae <TIM_Base_SetConfig+0x9a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a2b      	ldr	r2, [pc, #172]	; (8005630 <TIM_Base_SetConfig+0x11c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d013      	beq.n	80055ae <TIM_Base_SetConfig+0x9a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a2a      	ldr	r2, [pc, #168]	; (8005634 <TIM_Base_SetConfig+0x120>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00f      	beq.n	80055ae <TIM_Base_SetConfig+0x9a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a29      	ldr	r2, [pc, #164]	; (8005638 <TIM_Base_SetConfig+0x124>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d00b      	beq.n	80055ae <TIM_Base_SetConfig+0x9a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a28      	ldr	r2, [pc, #160]	; (800563c <TIM_Base_SetConfig+0x128>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d007      	beq.n	80055ae <TIM_Base_SetConfig+0x9a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a27      	ldr	r2, [pc, #156]	; (8005640 <TIM_Base_SetConfig+0x12c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d003      	beq.n	80055ae <TIM_Base_SetConfig+0x9a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a26      	ldr	r2, [pc, #152]	; (8005644 <TIM_Base_SetConfig+0x130>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d108      	bne.n	80055c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a10      	ldr	r2, [pc, #64]	; (8005628 <TIM_Base_SetConfig+0x114>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00f      	beq.n	800560c <TIM_Base_SetConfig+0xf8>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a12      	ldr	r2, [pc, #72]	; (8005638 <TIM_Base_SetConfig+0x124>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00b      	beq.n	800560c <TIM_Base_SetConfig+0xf8>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a11      	ldr	r2, [pc, #68]	; (800563c <TIM_Base_SetConfig+0x128>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d007      	beq.n	800560c <TIM_Base_SetConfig+0xf8>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a10      	ldr	r2, [pc, #64]	; (8005640 <TIM_Base_SetConfig+0x12c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_Base_SetConfig+0xf8>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a0f      	ldr	r2, [pc, #60]	; (8005644 <TIM_Base_SetConfig+0x130>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d103      	bne.n	8005614 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	615a      	str	r2, [r3, #20]
}
 800561a:	bf00      	nop
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	40012c00 	.word	0x40012c00
 800562c:	40000400 	.word	0x40000400
 8005630:	40000800 	.word	0x40000800
 8005634:	40000c00 	.word	0x40000c00
 8005638:	40013400 	.word	0x40013400
 800563c:	40014000 	.word	0x40014000
 8005640:	40014400 	.word	0x40014400
 8005644:	40014800 	.word	0x40014800

08005648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f023 0201 	bic.w	r2, r3, #1
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0303 	bic.w	r3, r3, #3
 8005682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f023 0302 	bic.w	r3, r3, #2
 8005694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a2c      	ldr	r2, [pc, #176]	; (8005754 <TIM_OC1_SetConfig+0x10c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00f      	beq.n	80056c8 <TIM_OC1_SetConfig+0x80>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a2b      	ldr	r2, [pc, #172]	; (8005758 <TIM_OC1_SetConfig+0x110>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00b      	beq.n	80056c8 <TIM_OC1_SetConfig+0x80>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a2a      	ldr	r2, [pc, #168]	; (800575c <TIM_OC1_SetConfig+0x114>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d007      	beq.n	80056c8 <TIM_OC1_SetConfig+0x80>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a29      	ldr	r2, [pc, #164]	; (8005760 <TIM_OC1_SetConfig+0x118>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d003      	beq.n	80056c8 <TIM_OC1_SetConfig+0x80>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a28      	ldr	r2, [pc, #160]	; (8005764 <TIM_OC1_SetConfig+0x11c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d10c      	bne.n	80056e2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f023 0308 	bic.w	r3, r3, #8
 80056ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f023 0304 	bic.w	r3, r3, #4
 80056e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a1b      	ldr	r2, [pc, #108]	; (8005754 <TIM_OC1_SetConfig+0x10c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00f      	beq.n	800570a <TIM_OC1_SetConfig+0xc2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a1a      	ldr	r2, [pc, #104]	; (8005758 <TIM_OC1_SetConfig+0x110>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00b      	beq.n	800570a <TIM_OC1_SetConfig+0xc2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a19      	ldr	r2, [pc, #100]	; (800575c <TIM_OC1_SetConfig+0x114>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d007      	beq.n	800570a <TIM_OC1_SetConfig+0xc2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a18      	ldr	r2, [pc, #96]	; (8005760 <TIM_OC1_SetConfig+0x118>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d003      	beq.n	800570a <TIM_OC1_SetConfig+0xc2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a17      	ldr	r2, [pc, #92]	; (8005764 <TIM_OC1_SetConfig+0x11c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d111      	bne.n	800572e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	621a      	str	r2, [r3, #32]
}
 8005748:	bf00      	nop
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	40012c00 	.word	0x40012c00
 8005758:	40013400 	.word	0x40013400
 800575c:	40014000 	.word	0x40014000
 8005760:	40014400 	.word	0x40014400
 8005764:	40014800 	.word	0x40014800

08005768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	f023 0210 	bic.w	r2, r3, #16
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	021b      	lsls	r3, r3, #8
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f023 0320 	bic.w	r3, r3, #32
 80057b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a28      	ldr	r2, [pc, #160]	; (8005868 <TIM_OC2_SetConfig+0x100>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d003      	beq.n	80057d4 <TIM_OC2_SetConfig+0x6c>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a27      	ldr	r2, [pc, #156]	; (800586c <TIM_OC2_SetConfig+0x104>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d10d      	bne.n	80057f0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a1d      	ldr	r2, [pc, #116]	; (8005868 <TIM_OC2_SetConfig+0x100>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00f      	beq.n	8005818 <TIM_OC2_SetConfig+0xb0>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a1c      	ldr	r2, [pc, #112]	; (800586c <TIM_OC2_SetConfig+0x104>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00b      	beq.n	8005818 <TIM_OC2_SetConfig+0xb0>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a1b      	ldr	r2, [pc, #108]	; (8005870 <TIM_OC2_SetConfig+0x108>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d007      	beq.n	8005818 <TIM_OC2_SetConfig+0xb0>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a1a      	ldr	r2, [pc, #104]	; (8005874 <TIM_OC2_SetConfig+0x10c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d003      	beq.n	8005818 <TIM_OC2_SetConfig+0xb0>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a19      	ldr	r2, [pc, #100]	; (8005878 <TIM_OC2_SetConfig+0x110>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d113      	bne.n	8005840 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800581e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005826:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	621a      	str	r2, [r3, #32]
}
 800585a:	bf00      	nop
 800585c:	371c      	adds	r7, #28
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40013400 	.word	0x40013400
 8005870:	40014000 	.word	0x40014000
 8005874:	40014400 	.word	0x40014400
 8005878:	40014800 	.word	0x40014800

0800587c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0303 	bic.w	r3, r3, #3
 80058b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	021b      	lsls	r3, r3, #8
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a27      	ldr	r2, [pc, #156]	; (8005978 <TIM_OC3_SetConfig+0xfc>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d003      	beq.n	80058e6 <TIM_OC3_SetConfig+0x6a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a26      	ldr	r2, [pc, #152]	; (800597c <TIM_OC3_SetConfig+0x100>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d10d      	bne.n	8005902 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	021b      	lsls	r3, r3, #8
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a1c      	ldr	r2, [pc, #112]	; (8005978 <TIM_OC3_SetConfig+0xfc>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00f      	beq.n	800592a <TIM_OC3_SetConfig+0xae>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a1b      	ldr	r2, [pc, #108]	; (800597c <TIM_OC3_SetConfig+0x100>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d00b      	beq.n	800592a <TIM_OC3_SetConfig+0xae>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a1a      	ldr	r2, [pc, #104]	; (8005980 <TIM_OC3_SetConfig+0x104>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d007      	beq.n	800592a <TIM_OC3_SetConfig+0xae>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a19      	ldr	r2, [pc, #100]	; (8005984 <TIM_OC3_SetConfig+0x108>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d003      	beq.n	800592a <TIM_OC3_SetConfig+0xae>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a18      	ldr	r2, [pc, #96]	; (8005988 <TIM_OC3_SetConfig+0x10c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d113      	bne.n	8005952 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	011b      	lsls	r3, r3, #4
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	621a      	str	r2, [r3, #32]
}
 800596c:	bf00      	nop
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	40012c00 	.word	0x40012c00
 800597c:	40013400 	.word	0x40013400
 8005980:	40014000 	.word	0x40014000
 8005984:	40014400 	.word	0x40014400
 8005988:	40014800 	.word	0x40014800

0800598c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	021b      	lsls	r3, r3, #8
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	031b      	lsls	r3, r3, #12
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a18      	ldr	r2, [pc, #96]	; (8005a4c <TIM_OC4_SetConfig+0xc0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00f      	beq.n	8005a10 <TIM_OC4_SetConfig+0x84>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a17      	ldr	r2, [pc, #92]	; (8005a50 <TIM_OC4_SetConfig+0xc4>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d00b      	beq.n	8005a10 <TIM_OC4_SetConfig+0x84>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a16      	ldr	r2, [pc, #88]	; (8005a54 <TIM_OC4_SetConfig+0xc8>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d007      	beq.n	8005a10 <TIM_OC4_SetConfig+0x84>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a15      	ldr	r2, [pc, #84]	; (8005a58 <TIM_OC4_SetConfig+0xcc>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d003      	beq.n	8005a10 <TIM_OC4_SetConfig+0x84>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a14      	ldr	r2, [pc, #80]	; (8005a5c <TIM_OC4_SetConfig+0xd0>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d109      	bne.n	8005a24 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	019b      	lsls	r3, r3, #6
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	621a      	str	r2, [r3, #32]
}
 8005a3e:	bf00      	nop
 8005a40:	371c      	adds	r7, #28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40012c00 	.word	0x40012c00
 8005a50:	40013400 	.word	0x40013400
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800

08005a60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005aa4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	041b      	lsls	r3, r3, #16
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a17      	ldr	r2, [pc, #92]	; (8005b14 <TIM_OC5_SetConfig+0xb4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00f      	beq.n	8005ada <TIM_OC5_SetConfig+0x7a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a16      	ldr	r2, [pc, #88]	; (8005b18 <TIM_OC5_SetConfig+0xb8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00b      	beq.n	8005ada <TIM_OC5_SetConfig+0x7a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a15      	ldr	r2, [pc, #84]	; (8005b1c <TIM_OC5_SetConfig+0xbc>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d007      	beq.n	8005ada <TIM_OC5_SetConfig+0x7a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a14      	ldr	r2, [pc, #80]	; (8005b20 <TIM_OC5_SetConfig+0xc0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d003      	beq.n	8005ada <TIM_OC5_SetConfig+0x7a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a13      	ldr	r2, [pc, #76]	; (8005b24 <TIM_OC5_SetConfig+0xc4>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d109      	bne.n	8005aee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ae0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	021b      	lsls	r3, r3, #8
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	621a      	str	r2, [r3, #32]
}
 8005b08:	bf00      	nop
 8005b0a:	371c      	adds	r7, #28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	40012c00 	.word	0x40012c00
 8005b18:	40013400 	.word	0x40013400
 8005b1c:	40014000 	.word	0x40014000
 8005b20:	40014400 	.word	0x40014400
 8005b24:	40014800 	.word	0x40014800

08005b28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	021b      	lsls	r3, r3, #8
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	051b      	lsls	r3, r3, #20
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a18      	ldr	r2, [pc, #96]	; (8005be0 <TIM_OC6_SetConfig+0xb8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00f      	beq.n	8005ba4 <TIM_OC6_SetConfig+0x7c>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a17      	ldr	r2, [pc, #92]	; (8005be4 <TIM_OC6_SetConfig+0xbc>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00b      	beq.n	8005ba4 <TIM_OC6_SetConfig+0x7c>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a16      	ldr	r2, [pc, #88]	; (8005be8 <TIM_OC6_SetConfig+0xc0>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d007      	beq.n	8005ba4 <TIM_OC6_SetConfig+0x7c>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a15      	ldr	r2, [pc, #84]	; (8005bec <TIM_OC6_SetConfig+0xc4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d003      	beq.n	8005ba4 <TIM_OC6_SetConfig+0x7c>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a14      	ldr	r2, [pc, #80]	; (8005bf0 <TIM_OC6_SetConfig+0xc8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d109      	bne.n	8005bb8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005baa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	029b      	lsls	r3, r3, #10
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	621a      	str	r2, [r3, #32]
}
 8005bd2:	bf00      	nop
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40012c00 	.word	0x40012c00
 8005be4:	40013400 	.word	0x40013400
 8005be8:	40014000 	.word	0x40014000
 8005bec:	40014400 	.word	0x40014400
 8005bf0:	40014800 	.word	0x40014800

08005bf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f003 031f 	and.w	r3, r3, #31
 8005c06:	2201      	movs	r2, #1
 8005c08:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a1a      	ldr	r2, [r3, #32]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	43db      	mvns	r3, r3
 8005c16:	401a      	ands	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a1a      	ldr	r2, [r3, #32]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f003 031f 	and.w	r3, r3, #31
 8005c26:	6879      	ldr	r1, [r7, #4]
 8005c28:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	621a      	str	r2, [r3, #32]
}
 8005c32:	bf00      	nop
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
	...

08005c40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c54:	2302      	movs	r3, #2
 8005c56:	e068      	b.n	8005d2a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a2e      	ldr	r2, [pc, #184]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d004      	beq.n	8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a2d      	ldr	r2, [pc, #180]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d108      	bne.n	8005c9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a1e      	ldr	r2, [pc, #120]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d01d      	beq.n	8005cfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cca:	d018      	beq.n	8005cfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a1b      	ldr	r2, [pc, #108]	; (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d013      	beq.n	8005cfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a1a      	ldr	r2, [pc, #104]	; (8005d44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00e      	beq.n	8005cfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a18      	ldr	r2, [pc, #96]	; (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d009      	beq.n	8005cfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a13      	ldr	r2, [pc, #76]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d004      	beq.n	8005cfe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a14      	ldr	r2, [pc, #80]	; (8005d4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d10c      	bne.n	8005d18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40012c00 	.word	0x40012c00
 8005d3c:	40013400 	.word	0x40013400
 8005d40:	40000400 	.word	0x40000400
 8005d44:	40000800 	.word	0x40000800
 8005d48:	40000c00 	.word	0x40000c00
 8005d4c:	40014000 	.word	0x40014000

08005d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e040      	b.n	8005e20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d106      	bne.n	8005db4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7fc fab6 	bl	8002320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2224      	movs	r2, #36	; 0x24
 8005db8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0201 	bic.w	r2, r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fc94 	bl	80066f8 <UART_SetConfig>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d101      	bne.n	8005dda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e022      	b.n	8005e20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 ff40 	bl	8006c68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005df6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0201 	orr.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 ffc7 	bl	8006dac <UART_CheckIdleState>
 8005e1e:	4603      	mov	r3, r0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	; 0x28
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	4613      	mov	r3, r2
 8005e36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	f040 8082 	bne.w	8005f46 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <HAL_UART_Transmit+0x26>
 8005e48:	88fb      	ldrh	r3, [r7, #6]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e07a      	b.n	8005f48 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d101      	bne.n	8005e60 <HAL_UART_Transmit+0x38>
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	e073      	b.n	8005f48 <HAL_UART_Transmit+0x120>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2221      	movs	r2, #33	; 0x21
 8005e74:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e76:	f7fc fc7b 	bl	8002770 <HAL_GetTick>
 8005e7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	88fa      	ldrh	r2, [r7, #6]
 8005e80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	88fa      	ldrh	r2, [r7, #6]
 8005e88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e94:	d108      	bne.n	8005ea8 <HAL_UART_Transmit+0x80>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d104      	bne.n	8005ea8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	61bb      	str	r3, [r7, #24]
 8005ea6:	e003      	b.n	8005eb0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005eac:	2300      	movs	r3, #0
 8005eae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005eb8:	e02d      	b.n	8005f16 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2180      	movs	r1, #128	; 0x80
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 ffba 	bl	8006e3e <UART_WaitOnFlagUntilTimeout>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e039      	b.n	8005f48 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10b      	bne.n	8005ef2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	881a      	ldrh	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ee6:	b292      	uxth	r2, r2
 8005ee8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	3302      	adds	r3, #2
 8005eee:	61bb      	str	r3, [r7, #24]
 8005ef0:	e008      	b.n	8005f04 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	781a      	ldrb	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	b292      	uxth	r2, r2
 8005efc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	3301      	adds	r3, #1
 8005f02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1cb      	bne.n	8005eba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	2140      	movs	r1, #64	; 0x40
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 ff86 	bl	8006e3e <UART_WaitOnFlagUntilTimeout>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e005      	b.n	8005f48 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	e000      	b.n	8005f48 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005f46:	2302      	movs	r3, #2
  }
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3720      	adds	r7, #32
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08a      	sub	sp, #40	; 0x28
 8005f54:	af02      	add	r7, sp, #8
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	f040 80bf 	bne.w	80060e8 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <HAL_UART_Receive+0x26>
 8005f70:	88fb      	ldrh	r3, [r7, #6]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e0b7      	b.n	80060ea <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_UART_Receive+0x38>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e0b0      	b.n	80060ea <HAL_UART_Receive+0x19a>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2222      	movs	r2, #34	; 0x22
 8005f9c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fa4:	f7fc fbe4 	bl	8002770 <HAL_GetTick>
 8005fa8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	88fa      	ldrh	r2, [r7, #6]
 8005fae:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	88fa      	ldrh	r2, [r7, #6]
 8005fb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc2:	d10e      	bne.n	8005fe2 <HAL_UART_Receive+0x92>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d105      	bne.n	8005fd8 <HAL_UART_Receive+0x88>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005fd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fd6:	e02d      	b.n	8006034 <HAL_UART_Receive+0xe4>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	22ff      	movs	r2, #255	; 0xff
 8005fdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fe0:	e028      	b.n	8006034 <HAL_UART_Receive+0xe4>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10d      	bne.n	8006006 <HAL_UART_Receive+0xb6>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d104      	bne.n	8005ffc <HAL_UART_Receive+0xac>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	22ff      	movs	r2, #255	; 0xff
 8005ff6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ffa:	e01b      	b.n	8006034 <HAL_UART_Receive+0xe4>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	227f      	movs	r2, #127	; 0x7f
 8006000:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006004:	e016      	b.n	8006034 <HAL_UART_Receive+0xe4>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800600e:	d10d      	bne.n	800602c <HAL_UART_Receive+0xdc>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d104      	bne.n	8006022 <HAL_UART_Receive+0xd2>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	227f      	movs	r2, #127	; 0x7f
 800601c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006020:	e008      	b.n	8006034 <HAL_UART_Receive+0xe4>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	223f      	movs	r2, #63	; 0x3f
 8006026:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800602a:	e003      	b.n	8006034 <HAL_UART_Receive+0xe4>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800603a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006044:	d108      	bne.n	8006058 <HAL_UART_Receive+0x108>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d104      	bne.n	8006058 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800604e:	2300      	movs	r3, #0
 8006050:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	e003      	b.n	8006060 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800605c:	2300      	movs	r3, #0
 800605e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006068:	e033      	b.n	80060d2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2200      	movs	r2, #0
 8006072:	2120      	movs	r1, #32
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 fee2 	bl	8006e3e <UART_WaitOnFlagUntilTimeout>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e032      	b.n	80060ea <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10c      	bne.n	80060a4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006090:	b29a      	uxth	r2, r3
 8006092:	8a7b      	ldrh	r3, [r7, #18]
 8006094:	4013      	ands	r3, r2
 8006096:	b29a      	uxth	r2, r3
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	3302      	adds	r3, #2
 80060a0:	61bb      	str	r3, [r7, #24]
 80060a2:	e00d      	b.n	80060c0 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	8a7b      	ldrh	r3, [r7, #18]
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	4013      	ands	r3, r2
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	3301      	adds	r3, #1
 80060be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1c5      	bne.n	800606a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2220      	movs	r2, #32
 80060e2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	e000      	b.n	80060ea <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80060e8:	2302      	movs	r3, #2
  }
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3720      	adds	r7, #32
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b0ba      	sub	sp, #232	; 0xe8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800611a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800611e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006122:	4013      	ands	r3, r2
 8006124:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006128:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800612c:	2b00      	cmp	r3, #0
 800612e:	d115      	bne.n	800615c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006134:	f003 0320 	and.w	r3, r3, #32
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00f      	beq.n	800615c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800613c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006140:	f003 0320 	and.w	r3, r3, #32
 8006144:	2b00      	cmp	r3, #0
 8006146:	d009      	beq.n	800615c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 82a6 	beq.w	800669e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	4798      	blx	r3
      }
      return;
 800615a:	e2a0      	b.n	800669e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800615c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 8117 	beq.w	8006394 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006172:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006176:	4b85      	ldr	r3, [pc, #532]	; (800638c <HAL_UART_IRQHandler+0x298>)
 8006178:	4013      	ands	r3, r2
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 810a 	beq.w	8006394 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d011      	beq.n	80061b0 <HAL_UART_IRQHandler+0xbc>
 800618c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00b      	beq.n	80061b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2201      	movs	r2, #1
 800619e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061a6:	f043 0201 	orr.w	r2, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d011      	beq.n	80061e0 <HAL_UART_IRQHandler+0xec>
 80061bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00b      	beq.n	80061e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2202      	movs	r2, #2
 80061ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061d6:	f043 0204 	orr.w	r2, r3, #4
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d011      	beq.n	8006210 <HAL_UART_IRQHandler+0x11c>
 80061ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00b      	beq.n	8006210 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2204      	movs	r2, #4
 80061fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006206:	f043 0202 	orr.w	r2, r3, #2
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b00      	cmp	r3, #0
 800621a:	d017      	beq.n	800624c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800621c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006220:	f003 0320 	and.w	r3, r3, #32
 8006224:	2b00      	cmp	r3, #0
 8006226:	d105      	bne.n	8006234 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800622c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00b      	beq.n	800624c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2208      	movs	r2, #8
 800623a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006242:	f043 0208 	orr.w	r2, r3, #8
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800624c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006254:	2b00      	cmp	r3, #0
 8006256:	d012      	beq.n	800627e <HAL_UART_IRQHandler+0x18a>
 8006258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800625c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00c      	beq.n	800627e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800626c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006274:	f043 0220 	orr.w	r2, r3, #32
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 820c 	beq.w	80066a2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800628a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00d      	beq.n	80062b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d007      	beq.n	80062b2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c6:	2b40      	cmp	r3, #64	; 0x40
 80062c8:	d005      	beq.n	80062d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d04f      	beq.n	8006376 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fe75 	bl	8006fc6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e6:	2b40      	cmp	r3, #64	; 0x40
 80062e8:	d141      	bne.n	800636e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3308      	adds	r3, #8
 80062f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006300:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006308:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3308      	adds	r3, #8
 8006312:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006316:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800631a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006322:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006326:	e841 2300 	strex	r3, r2, [r1]
 800632a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800632e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1d9      	bne.n	80062ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633a:	2b00      	cmp	r3, #0
 800633c:	d013      	beq.n	8006366 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006342:	4a13      	ldr	r2, [pc, #76]	; (8006390 <HAL_UART_IRQHandler+0x29c>)
 8006344:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634a:	4618      	mov	r0, r3
 800634c:	f7fc fb6b 	bl	8002a26 <HAL_DMA_Abort_IT>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d017      	beq.n	8006386 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006360:	4610      	mov	r0, r2
 8006362:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006364:	e00f      	b.n	8006386 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f9b0 	bl	80066cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800636c:	e00b      	b.n	8006386 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f9ac 	bl	80066cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006374:	e007      	b.n	8006386 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f9a8 	bl	80066cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006384:	e18d      	b.n	80066a2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006386:	bf00      	nop
    return;
 8006388:	e18b      	b.n	80066a2 <HAL_UART_IRQHandler+0x5ae>
 800638a:	bf00      	nop
 800638c:	04000120 	.word	0x04000120
 8006390:	0800708d 	.word	0x0800708d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006398:	2b01      	cmp	r3, #1
 800639a:	f040 8146 	bne.w	800662a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800639e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 813f 	beq.w	800662a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b0:	f003 0310 	and.w	r3, r3, #16
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 8138 	beq.w	800662a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2210      	movs	r2, #16
 80063c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	f040 80b4 	bne.w	800653a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 815f 	beq.w	80066a6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80063ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063f2:	429a      	cmp	r2, r3
 80063f4:	f080 8157 	bcs.w	80066a6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b00      	cmp	r3, #0
 8006410:	f040 8085 	bne.w	800651e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006420:	e853 3f00 	ldrex	r3, [r3]
 8006424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006428:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800642c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006430:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800643e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006442:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800644a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1da      	bne.n	8006414 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3308      	adds	r3, #8
 8006464:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800646e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006470:	f023 0301 	bic.w	r3, r3, #1
 8006474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3308      	adds	r3, #8
 800647e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006482:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006486:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800648a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e1      	bne.n	800645e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3308      	adds	r3, #8
 80064a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3308      	adds	r3, #8
 80064ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e3      	bne.n	800649a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2220      	movs	r2, #32
 80064d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e6:	e853 3f00 	ldrex	r3, [r3]
 80064ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ee:	f023 0310 	bic.w	r3, r3, #16
 80064f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	461a      	mov	r2, r3
 80064fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006500:	65bb      	str	r3, [r7, #88]	; 0x58
 8006502:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006504:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006506:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006508:	e841 2300 	strex	r3, r2, [r1]
 800650c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800650e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1e4      	bne.n	80064de <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006518:	4618      	mov	r0, r3
 800651a:	f7fc fa46 	bl	80029aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800652a:	b29b      	uxth	r3, r3
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	b29b      	uxth	r3, r3
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f8d4 	bl	80066e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006538:	e0b5      	b.n	80066a6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006546:	b29b      	uxth	r3, r3
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006554:	b29b      	uxth	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 80a7 	beq.w	80066aa <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800655c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 80a2 	beq.w	80066aa <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656e:	e853 3f00 	ldrex	r3, [r3]
 8006572:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006576:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800657a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006588:	647b      	str	r3, [r7, #68]	; 0x44
 800658a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800658e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006590:	e841 2300 	strex	r3, r2, [r1]
 8006594:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1e4      	bne.n	8006566 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3308      	adds	r3, #8
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	623b      	str	r3, [r7, #32]
   return(result);
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	f023 0301 	bic.w	r3, r3, #1
 80065b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3308      	adds	r3, #8
 80065bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065c0:	633a      	str	r2, [r7, #48]	; 0x30
 80065c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e3      	bne.n	800659c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	e853 3f00 	ldrex	r3, [r3]
 80065f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0310 	bic.w	r3, r3, #16
 80065fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006608:	61fb      	str	r3, [r7, #28]
 800660a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	69b9      	ldr	r1, [r7, #24]
 800660e:	69fa      	ldr	r2, [r7, #28]
 8006610:	e841 2300 	strex	r3, r2, [r1]
 8006614:	617b      	str	r3, [r7, #20]
   return(result);
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e4      	bne.n	80065e6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800661c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006620:	4619      	mov	r1, r3
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f85c 	bl	80066e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006628:	e03f      	b.n	80066aa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800662a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800662e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00e      	beq.n	8006654 <HAL_UART_IRQHandler+0x560>
 8006636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800663a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d008      	beq.n	8006654 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800664a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fd5d 	bl	800710c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006652:	e02d      	b.n	80066b0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00e      	beq.n	800667e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006668:	2b00      	cmp	r3, #0
 800666a:	d008      	beq.n	800667e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006670:	2b00      	cmp	r3, #0
 8006672:	d01c      	beq.n	80066ae <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	4798      	blx	r3
    }
    return;
 800667c:	e017      	b.n	80066ae <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800667e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006686:	2b00      	cmp	r3, #0
 8006688:	d012      	beq.n	80066b0 <HAL_UART_IRQHandler+0x5bc>
 800668a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800668e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00c      	beq.n	80066b0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fd0e 	bl	80070b8 <UART_EndTransmit_IT>
    return;
 800669c:	e008      	b.n	80066b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 800669e:	bf00      	nop
 80066a0:	e006      	b.n	80066b0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80066a2:	bf00      	nop
 80066a4:	e004      	b.n	80066b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80066a6:	bf00      	nop
 80066a8:	e002      	b.n	80066b0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80066aa:	bf00      	nop
 80066ac:	e000      	b.n	80066b0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80066ae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80066b0:	37e8      	adds	r7, #232	; 0xe8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop

080066b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066fc:	b08a      	sub	sp, #40	; 0x28
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006702:	2300      	movs	r3, #0
 8006704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	689a      	ldr	r2, [r3, #8]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	431a      	orrs	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	431a      	orrs	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	4313      	orrs	r3, r2
 800671e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	4ba4      	ldr	r3, [pc, #656]	; (80069b8 <UART_SetConfig+0x2c0>)
 8006728:	4013      	ands	r3, r2
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	6812      	ldr	r2, [r2, #0]
 800672e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006730:	430b      	orrs	r3, r1
 8006732:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	430a      	orrs	r2, r1
 8006748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a99      	ldr	r2, [pc, #612]	; (80069bc <UART_SetConfig+0x2c4>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d004      	beq.n	8006764 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006760:	4313      	orrs	r3, r2
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006774:	430a      	orrs	r2, r1
 8006776:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a90      	ldr	r2, [pc, #576]	; (80069c0 <UART_SetConfig+0x2c8>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d126      	bne.n	80067d0 <UART_SetConfig+0xd8>
 8006782:	4b90      	ldr	r3, [pc, #576]	; (80069c4 <UART_SetConfig+0x2cc>)
 8006784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006788:	f003 0303 	and.w	r3, r3, #3
 800678c:	2b03      	cmp	r3, #3
 800678e:	d81b      	bhi.n	80067c8 <UART_SetConfig+0xd0>
 8006790:	a201      	add	r2, pc, #4	; (adr r2, 8006798 <UART_SetConfig+0xa0>)
 8006792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006796:	bf00      	nop
 8006798:	080067a9 	.word	0x080067a9
 800679c:	080067b9 	.word	0x080067b9
 80067a0:	080067b1 	.word	0x080067b1
 80067a4:	080067c1 	.word	0x080067c1
 80067a8:	2301      	movs	r3, #1
 80067aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ae:	e116      	b.n	80069de <UART_SetConfig+0x2e6>
 80067b0:	2302      	movs	r3, #2
 80067b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067b6:	e112      	b.n	80069de <UART_SetConfig+0x2e6>
 80067b8:	2304      	movs	r3, #4
 80067ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067be:	e10e      	b.n	80069de <UART_SetConfig+0x2e6>
 80067c0:	2308      	movs	r3, #8
 80067c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067c6:	e10a      	b.n	80069de <UART_SetConfig+0x2e6>
 80067c8:	2310      	movs	r3, #16
 80067ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ce:	e106      	b.n	80069de <UART_SetConfig+0x2e6>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a7c      	ldr	r2, [pc, #496]	; (80069c8 <UART_SetConfig+0x2d0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d138      	bne.n	800684c <UART_SetConfig+0x154>
 80067da:	4b7a      	ldr	r3, [pc, #488]	; (80069c4 <UART_SetConfig+0x2cc>)
 80067dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e0:	f003 030c 	and.w	r3, r3, #12
 80067e4:	2b0c      	cmp	r3, #12
 80067e6:	d82d      	bhi.n	8006844 <UART_SetConfig+0x14c>
 80067e8:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <UART_SetConfig+0xf8>)
 80067ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ee:	bf00      	nop
 80067f0:	08006825 	.word	0x08006825
 80067f4:	08006845 	.word	0x08006845
 80067f8:	08006845 	.word	0x08006845
 80067fc:	08006845 	.word	0x08006845
 8006800:	08006835 	.word	0x08006835
 8006804:	08006845 	.word	0x08006845
 8006808:	08006845 	.word	0x08006845
 800680c:	08006845 	.word	0x08006845
 8006810:	0800682d 	.word	0x0800682d
 8006814:	08006845 	.word	0x08006845
 8006818:	08006845 	.word	0x08006845
 800681c:	08006845 	.word	0x08006845
 8006820:	0800683d 	.word	0x0800683d
 8006824:	2300      	movs	r3, #0
 8006826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800682a:	e0d8      	b.n	80069de <UART_SetConfig+0x2e6>
 800682c:	2302      	movs	r3, #2
 800682e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006832:	e0d4      	b.n	80069de <UART_SetConfig+0x2e6>
 8006834:	2304      	movs	r3, #4
 8006836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800683a:	e0d0      	b.n	80069de <UART_SetConfig+0x2e6>
 800683c:	2308      	movs	r3, #8
 800683e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006842:	e0cc      	b.n	80069de <UART_SetConfig+0x2e6>
 8006844:	2310      	movs	r3, #16
 8006846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800684a:	e0c8      	b.n	80069de <UART_SetConfig+0x2e6>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a5e      	ldr	r2, [pc, #376]	; (80069cc <UART_SetConfig+0x2d4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d125      	bne.n	80068a2 <UART_SetConfig+0x1aa>
 8006856:	4b5b      	ldr	r3, [pc, #364]	; (80069c4 <UART_SetConfig+0x2cc>)
 8006858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800685c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006860:	2b30      	cmp	r3, #48	; 0x30
 8006862:	d016      	beq.n	8006892 <UART_SetConfig+0x19a>
 8006864:	2b30      	cmp	r3, #48	; 0x30
 8006866:	d818      	bhi.n	800689a <UART_SetConfig+0x1a2>
 8006868:	2b20      	cmp	r3, #32
 800686a:	d00a      	beq.n	8006882 <UART_SetConfig+0x18a>
 800686c:	2b20      	cmp	r3, #32
 800686e:	d814      	bhi.n	800689a <UART_SetConfig+0x1a2>
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <UART_SetConfig+0x182>
 8006874:	2b10      	cmp	r3, #16
 8006876:	d008      	beq.n	800688a <UART_SetConfig+0x192>
 8006878:	e00f      	b.n	800689a <UART_SetConfig+0x1a2>
 800687a:	2300      	movs	r3, #0
 800687c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006880:	e0ad      	b.n	80069de <UART_SetConfig+0x2e6>
 8006882:	2302      	movs	r3, #2
 8006884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006888:	e0a9      	b.n	80069de <UART_SetConfig+0x2e6>
 800688a:	2304      	movs	r3, #4
 800688c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006890:	e0a5      	b.n	80069de <UART_SetConfig+0x2e6>
 8006892:	2308      	movs	r3, #8
 8006894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006898:	e0a1      	b.n	80069de <UART_SetConfig+0x2e6>
 800689a:	2310      	movs	r3, #16
 800689c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068a0:	e09d      	b.n	80069de <UART_SetConfig+0x2e6>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a4a      	ldr	r2, [pc, #296]	; (80069d0 <UART_SetConfig+0x2d8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d125      	bne.n	80068f8 <UART_SetConfig+0x200>
 80068ac:	4b45      	ldr	r3, [pc, #276]	; (80069c4 <UART_SetConfig+0x2cc>)
 80068ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068b6:	2bc0      	cmp	r3, #192	; 0xc0
 80068b8:	d016      	beq.n	80068e8 <UART_SetConfig+0x1f0>
 80068ba:	2bc0      	cmp	r3, #192	; 0xc0
 80068bc:	d818      	bhi.n	80068f0 <UART_SetConfig+0x1f8>
 80068be:	2b80      	cmp	r3, #128	; 0x80
 80068c0:	d00a      	beq.n	80068d8 <UART_SetConfig+0x1e0>
 80068c2:	2b80      	cmp	r3, #128	; 0x80
 80068c4:	d814      	bhi.n	80068f0 <UART_SetConfig+0x1f8>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <UART_SetConfig+0x1d8>
 80068ca:	2b40      	cmp	r3, #64	; 0x40
 80068cc:	d008      	beq.n	80068e0 <UART_SetConfig+0x1e8>
 80068ce:	e00f      	b.n	80068f0 <UART_SetConfig+0x1f8>
 80068d0:	2300      	movs	r3, #0
 80068d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068d6:	e082      	b.n	80069de <UART_SetConfig+0x2e6>
 80068d8:	2302      	movs	r3, #2
 80068da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068de:	e07e      	b.n	80069de <UART_SetConfig+0x2e6>
 80068e0:	2304      	movs	r3, #4
 80068e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068e6:	e07a      	b.n	80069de <UART_SetConfig+0x2e6>
 80068e8:	2308      	movs	r3, #8
 80068ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ee:	e076      	b.n	80069de <UART_SetConfig+0x2e6>
 80068f0:	2310      	movs	r3, #16
 80068f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068f6:	e072      	b.n	80069de <UART_SetConfig+0x2e6>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a35      	ldr	r2, [pc, #212]	; (80069d4 <UART_SetConfig+0x2dc>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d12a      	bne.n	8006958 <UART_SetConfig+0x260>
 8006902:	4b30      	ldr	r3, [pc, #192]	; (80069c4 <UART_SetConfig+0x2cc>)
 8006904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800690c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006910:	d01a      	beq.n	8006948 <UART_SetConfig+0x250>
 8006912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006916:	d81b      	bhi.n	8006950 <UART_SetConfig+0x258>
 8006918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800691c:	d00c      	beq.n	8006938 <UART_SetConfig+0x240>
 800691e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006922:	d815      	bhi.n	8006950 <UART_SetConfig+0x258>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <UART_SetConfig+0x238>
 8006928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800692c:	d008      	beq.n	8006940 <UART_SetConfig+0x248>
 800692e:	e00f      	b.n	8006950 <UART_SetConfig+0x258>
 8006930:	2300      	movs	r3, #0
 8006932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006936:	e052      	b.n	80069de <UART_SetConfig+0x2e6>
 8006938:	2302      	movs	r3, #2
 800693a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800693e:	e04e      	b.n	80069de <UART_SetConfig+0x2e6>
 8006940:	2304      	movs	r3, #4
 8006942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006946:	e04a      	b.n	80069de <UART_SetConfig+0x2e6>
 8006948:	2308      	movs	r3, #8
 800694a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800694e:	e046      	b.n	80069de <UART_SetConfig+0x2e6>
 8006950:	2310      	movs	r3, #16
 8006952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006956:	e042      	b.n	80069de <UART_SetConfig+0x2e6>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a17      	ldr	r2, [pc, #92]	; (80069bc <UART_SetConfig+0x2c4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d13a      	bne.n	80069d8 <UART_SetConfig+0x2e0>
 8006962:	4b18      	ldr	r3, [pc, #96]	; (80069c4 <UART_SetConfig+0x2cc>)
 8006964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006968:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800696c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006970:	d01a      	beq.n	80069a8 <UART_SetConfig+0x2b0>
 8006972:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006976:	d81b      	bhi.n	80069b0 <UART_SetConfig+0x2b8>
 8006978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800697c:	d00c      	beq.n	8006998 <UART_SetConfig+0x2a0>
 800697e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006982:	d815      	bhi.n	80069b0 <UART_SetConfig+0x2b8>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <UART_SetConfig+0x298>
 8006988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800698c:	d008      	beq.n	80069a0 <UART_SetConfig+0x2a8>
 800698e:	e00f      	b.n	80069b0 <UART_SetConfig+0x2b8>
 8006990:	2300      	movs	r3, #0
 8006992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006996:	e022      	b.n	80069de <UART_SetConfig+0x2e6>
 8006998:	2302      	movs	r3, #2
 800699a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800699e:	e01e      	b.n	80069de <UART_SetConfig+0x2e6>
 80069a0:	2304      	movs	r3, #4
 80069a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a6:	e01a      	b.n	80069de <UART_SetConfig+0x2e6>
 80069a8:	2308      	movs	r3, #8
 80069aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ae:	e016      	b.n	80069de <UART_SetConfig+0x2e6>
 80069b0:	2310      	movs	r3, #16
 80069b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069b6:	e012      	b.n	80069de <UART_SetConfig+0x2e6>
 80069b8:	efff69f3 	.word	0xefff69f3
 80069bc:	40008000 	.word	0x40008000
 80069c0:	40013800 	.word	0x40013800
 80069c4:	40021000 	.word	0x40021000
 80069c8:	40004400 	.word	0x40004400
 80069cc:	40004800 	.word	0x40004800
 80069d0:	40004c00 	.word	0x40004c00
 80069d4:	40005000 	.word	0x40005000
 80069d8:	2310      	movs	r3, #16
 80069da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a9f      	ldr	r2, [pc, #636]	; (8006c60 <UART_SetConfig+0x568>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d17a      	bne.n	8006ade <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d824      	bhi.n	8006a3a <UART_SetConfig+0x342>
 80069f0:	a201      	add	r2, pc, #4	; (adr r2, 80069f8 <UART_SetConfig+0x300>)
 80069f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f6:	bf00      	nop
 80069f8:	08006a1d 	.word	0x08006a1d
 80069fc:	08006a3b 	.word	0x08006a3b
 8006a00:	08006a25 	.word	0x08006a25
 8006a04:	08006a3b 	.word	0x08006a3b
 8006a08:	08006a2b 	.word	0x08006a2b
 8006a0c:	08006a3b 	.word	0x08006a3b
 8006a10:	08006a3b 	.word	0x08006a3b
 8006a14:	08006a3b 	.word	0x08006a3b
 8006a18:	08006a33 	.word	0x08006a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a1c:	f7fd fa50 	bl	8003ec0 <HAL_RCC_GetPCLK1Freq>
 8006a20:	61f8      	str	r0, [r7, #28]
        break;
 8006a22:	e010      	b.n	8006a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a24:	4b8f      	ldr	r3, [pc, #572]	; (8006c64 <UART_SetConfig+0x56c>)
 8006a26:	61fb      	str	r3, [r7, #28]
        break;
 8006a28:	e00d      	b.n	8006a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a2a:	f7fd f9b1 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8006a2e:	61f8      	str	r0, [r7, #28]
        break;
 8006a30:	e009      	b.n	8006a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a36:	61fb      	str	r3, [r7, #28]
        break;
 8006a38:	e005      	b.n	8006a46 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 80fb 	beq.w	8006c44 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	4613      	mov	r3, r2
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	4413      	add	r3, r2
 8006a58:	69fa      	ldr	r2, [r7, #28]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d305      	bcc.n	8006a6a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a64:	69fa      	ldr	r2, [r7, #28]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d903      	bls.n	8006a72 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a70:	e0e8      	b.n	8006c44 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	2200      	movs	r2, #0
 8006a76:	461c      	mov	r4, r3
 8006a78:	4615      	mov	r5, r2
 8006a7a:	f04f 0200 	mov.w	r2, #0
 8006a7e:	f04f 0300 	mov.w	r3, #0
 8006a82:	022b      	lsls	r3, r5, #8
 8006a84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006a88:	0222      	lsls	r2, r4, #8
 8006a8a:	68f9      	ldr	r1, [r7, #12]
 8006a8c:	6849      	ldr	r1, [r1, #4]
 8006a8e:	0849      	lsrs	r1, r1, #1
 8006a90:	2000      	movs	r0, #0
 8006a92:	4688      	mov	r8, r1
 8006a94:	4681      	mov	r9, r0
 8006a96:	eb12 0a08 	adds.w	sl, r2, r8
 8006a9a:	eb43 0b09 	adc.w	fp, r3, r9
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	603b      	str	r3, [r7, #0]
 8006aa6:	607a      	str	r2, [r7, #4]
 8006aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aac:	4650      	mov	r0, sl
 8006aae:	4659      	mov	r1, fp
 8006ab0:	f7fa f88a 	bl	8000bc8 <__aeabi_uldivmod>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4613      	mov	r3, r2
 8006aba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ac2:	d308      	bcc.n	8006ad6 <UART_SetConfig+0x3de>
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aca:	d204      	bcs.n	8006ad6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	60da      	str	r2, [r3, #12]
 8006ad4:	e0b6      	b.n	8006c44 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006adc:	e0b2      	b.n	8006c44 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	69db      	ldr	r3, [r3, #28]
 8006ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ae6:	d15e      	bne.n	8006ba6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006aec:	2b08      	cmp	r3, #8
 8006aee:	d828      	bhi.n	8006b42 <UART_SetConfig+0x44a>
 8006af0:	a201      	add	r2, pc, #4	; (adr r2, 8006af8 <UART_SetConfig+0x400>)
 8006af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af6:	bf00      	nop
 8006af8:	08006b1d 	.word	0x08006b1d
 8006afc:	08006b25 	.word	0x08006b25
 8006b00:	08006b2d 	.word	0x08006b2d
 8006b04:	08006b43 	.word	0x08006b43
 8006b08:	08006b33 	.word	0x08006b33
 8006b0c:	08006b43 	.word	0x08006b43
 8006b10:	08006b43 	.word	0x08006b43
 8006b14:	08006b43 	.word	0x08006b43
 8006b18:	08006b3b 	.word	0x08006b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b1c:	f7fd f9d0 	bl	8003ec0 <HAL_RCC_GetPCLK1Freq>
 8006b20:	61f8      	str	r0, [r7, #28]
        break;
 8006b22:	e014      	b.n	8006b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b24:	f7fd f9e2 	bl	8003eec <HAL_RCC_GetPCLK2Freq>
 8006b28:	61f8      	str	r0, [r7, #28]
        break;
 8006b2a:	e010      	b.n	8006b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b2c:	4b4d      	ldr	r3, [pc, #308]	; (8006c64 <UART_SetConfig+0x56c>)
 8006b2e:	61fb      	str	r3, [r7, #28]
        break;
 8006b30:	e00d      	b.n	8006b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b32:	f7fd f92d 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8006b36:	61f8      	str	r0, [r7, #28]
        break;
 8006b38:	e009      	b.n	8006b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b3e:	61fb      	str	r3, [r7, #28]
        break;
 8006b40:	e005      	b.n	8006b4e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d077      	beq.n	8006c44 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	005a      	lsls	r2, r3, #1
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	085b      	lsrs	r3, r3, #1
 8006b5e:	441a      	add	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b68:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	2b0f      	cmp	r3, #15
 8006b6e:	d916      	bls.n	8006b9e <UART_SetConfig+0x4a6>
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b76:	d212      	bcs.n	8006b9e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	f023 030f 	bic.w	r3, r3, #15
 8006b80:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	085b      	lsrs	r3, r3, #1
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	f003 0307 	and.w	r3, r3, #7
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	8afb      	ldrh	r3, [r7, #22]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	8afa      	ldrh	r2, [r7, #22]
 8006b9a:	60da      	str	r2, [r3, #12]
 8006b9c:	e052      	b.n	8006c44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ba4:	e04e      	b.n	8006c44 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ba6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006baa:	2b08      	cmp	r3, #8
 8006bac:	d827      	bhi.n	8006bfe <UART_SetConfig+0x506>
 8006bae:	a201      	add	r2, pc, #4	; (adr r2, 8006bb4 <UART_SetConfig+0x4bc>)
 8006bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb4:	08006bd9 	.word	0x08006bd9
 8006bb8:	08006be1 	.word	0x08006be1
 8006bbc:	08006be9 	.word	0x08006be9
 8006bc0:	08006bff 	.word	0x08006bff
 8006bc4:	08006bef 	.word	0x08006bef
 8006bc8:	08006bff 	.word	0x08006bff
 8006bcc:	08006bff 	.word	0x08006bff
 8006bd0:	08006bff 	.word	0x08006bff
 8006bd4:	08006bf7 	.word	0x08006bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bd8:	f7fd f972 	bl	8003ec0 <HAL_RCC_GetPCLK1Freq>
 8006bdc:	61f8      	str	r0, [r7, #28]
        break;
 8006bde:	e014      	b.n	8006c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006be0:	f7fd f984 	bl	8003eec <HAL_RCC_GetPCLK2Freq>
 8006be4:	61f8      	str	r0, [r7, #28]
        break;
 8006be6:	e010      	b.n	8006c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006be8:	4b1e      	ldr	r3, [pc, #120]	; (8006c64 <UART_SetConfig+0x56c>)
 8006bea:	61fb      	str	r3, [r7, #28]
        break;
 8006bec:	e00d      	b.n	8006c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bee:	f7fd f8cf 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8006bf2:	61f8      	str	r0, [r7, #28]
        break;
 8006bf4:	e009      	b.n	8006c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bfa:	61fb      	str	r3, [r7, #28]
        break;
 8006bfc:	e005      	b.n	8006c0a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c08:	bf00      	nop
    }

    if (pclk != 0U)
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d019      	beq.n	8006c44 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	085a      	lsrs	r2, r3, #1
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	441a      	add	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c22:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	2b0f      	cmp	r3, #15
 8006c28:	d909      	bls.n	8006c3e <UART_SetConfig+0x546>
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c30:	d205      	bcs.n	8006c3e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60da      	str	r2, [r3, #12]
 8006c3c:	e002      	b.n	8006c44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006c50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3728      	adds	r7, #40	; 0x28
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c5e:	bf00      	nop
 8006c60:	40008000 	.word	0x40008000
 8006c64:	00f42400 	.word	0x00f42400

08006c68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00a      	beq.n	8006c92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00a      	beq.n	8006cd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	f003 0308 	and.w	r3, r3, #8
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	f003 0310 	and.w	r3, r3, #16
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00a      	beq.n	8006d1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	f003 0320 	and.w	r3, r3, #32
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01a      	beq.n	8006d7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d66:	d10a      	bne.n	8006d7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00a      	beq.n	8006da0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	605a      	str	r2, [r3, #4]
  }
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006dbc:	f7fb fcd8 	bl	8002770 <HAL_GetTick>
 8006dc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	2b08      	cmp	r3, #8
 8006dce:	d10e      	bne.n	8006dee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f82d 	bl	8006e3e <UART_WaitOnFlagUntilTimeout>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e023      	b.n	8006e36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b04      	cmp	r3, #4
 8006dfa:	d10e      	bne.n	8006e1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f817 	bl	8006e3e <UART_WaitOnFlagUntilTimeout>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e00d      	b.n	8006e36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2220      	movs	r2, #32
 8006e24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b09c      	sub	sp, #112	; 0x70
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	603b      	str	r3, [r7, #0]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e4e:	e0a5      	b.n	8006f9c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e56:	f000 80a1 	beq.w	8006f9c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e5a:	f7fb fc89 	bl	8002770 <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d302      	bcc.n	8006e70 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d13e      	bne.n	8006eee <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e84:	667b      	str	r3, [r7, #100]	; 0x64
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e90:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e6      	bne.n	8006e70 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	f023 0301 	bic.w	r3, r3, #1
 8006eb8:	663b      	str	r3, [r7, #96]	; 0x60
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ec2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ec4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e5      	bne.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e067      	b.n	8006fbe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0304 	and.w	r3, r3, #4
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d04f      	beq.n	8006f9c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f0a:	d147      	bne.n	8006f9c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f14:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1e:	e853 3f00 	ldrex	r3, [r3]
 8006f22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	461a      	mov	r2, r3
 8006f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f34:	637b      	str	r3, [r7, #52]	; 0x34
 8006f36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e6      	bne.n	8006f16 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3308      	adds	r3, #8
 8006f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	e853 3f00 	ldrex	r3, [r3]
 8006f56:	613b      	str	r3, [r7, #16]
   return(result);
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	f023 0301 	bic.w	r3, r3, #1
 8006f5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3308      	adds	r3, #8
 8006f66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f68:	623a      	str	r2, [r7, #32]
 8006f6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	69f9      	ldr	r1, [r7, #28]
 8006f6e:	6a3a      	ldr	r2, [r7, #32]
 8006f70:	e841 2300 	strex	r3, r2, [r1]
 8006f74:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1e5      	bne.n	8006f48 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2220      	movs	r2, #32
 8006f86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e010      	b.n	8006fbe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	69da      	ldr	r2, [r3, #28]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	bf0c      	ite	eq
 8006fac:	2301      	moveq	r3, #1
 8006fae:	2300      	movne	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	79fb      	ldrb	r3, [r7, #7]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	f43f af4a 	beq.w	8006e50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3770      	adds	r7, #112	; 0x70
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b095      	sub	sp, #84	; 0x54
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd6:	e853 3f00 	ldrex	r3, [r3]
 8006fda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fec:	643b      	str	r3, [r7, #64]	; 0x40
 8006fee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ff2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ff4:	e841 2300 	strex	r3, r2, [r1]
 8006ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e6      	bne.n	8006fce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3308      	adds	r3, #8
 8007006:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	e853 3f00 	ldrex	r3, [r3]
 800700e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	f023 0301 	bic.w	r3, r3, #1
 8007016:	64bb      	str	r3, [r7, #72]	; 0x48
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3308      	adds	r3, #8
 800701e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007020:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007022:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007024:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007028:	e841 2300 	strex	r3, r2, [r1]
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1e5      	bne.n	8007000 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007038:	2b01      	cmp	r3, #1
 800703a:	d118      	bne.n	800706e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	60bb      	str	r3, [r7, #8]
   return(result);
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f023 0310 	bic.w	r3, r3, #16
 8007050:	647b      	str	r3, [r7, #68]	; 0x44
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800705a:	61bb      	str	r3, [r7, #24]
 800705c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	6979      	ldr	r1, [r7, #20]
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	613b      	str	r3, [r7, #16]
   return(result);
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e6      	bne.n	800703c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2220      	movs	r2, #32
 8007072:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007080:	bf00      	nop
 8007082:	3754      	adds	r7, #84	; 0x54
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007098:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f7ff fb0e 	bl	80066cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070b0:	bf00      	nop
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b088      	sub	sp, #32
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	e853 3f00 	ldrex	r3, [r3]
 80070cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d4:	61fb      	str	r3, [r7, #28]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	61bb      	str	r3, [r7, #24]
 80070e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e2:	6979      	ldr	r1, [r7, #20]
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	613b      	str	r3, [r7, #16]
   return(result);
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e6      	bne.n	80070c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2220      	movs	r2, #32
 80070f6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7ff fada 	bl	80066b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007104:	bf00      	nop
 8007106:	3720      	adds	r7, #32
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <atoi>:
 8007120:	220a      	movs	r2, #10
 8007122:	2100      	movs	r1, #0
 8007124:	f000 be20 	b.w	8007d68 <strtol>

08007128 <__errno>:
 8007128:	4b01      	ldr	r3, [pc, #4]	; (8007130 <__errno+0x8>)
 800712a:	6818      	ldr	r0, [r3, #0]
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	200000ec 	.word	0x200000ec

08007134 <__libc_init_array>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	4d0d      	ldr	r5, [pc, #52]	; (800716c <__libc_init_array+0x38>)
 8007138:	4c0d      	ldr	r4, [pc, #52]	; (8007170 <__libc_init_array+0x3c>)
 800713a:	1b64      	subs	r4, r4, r5
 800713c:	10a4      	asrs	r4, r4, #2
 800713e:	2600      	movs	r6, #0
 8007140:	42a6      	cmp	r6, r4
 8007142:	d109      	bne.n	8007158 <__libc_init_array+0x24>
 8007144:	4d0b      	ldr	r5, [pc, #44]	; (8007174 <__libc_init_array+0x40>)
 8007146:	4c0c      	ldr	r4, [pc, #48]	; (8007178 <__libc_init_array+0x44>)
 8007148:	f003 fac2 	bl	800a6d0 <_init>
 800714c:	1b64      	subs	r4, r4, r5
 800714e:	10a4      	asrs	r4, r4, #2
 8007150:	2600      	movs	r6, #0
 8007152:	42a6      	cmp	r6, r4
 8007154:	d105      	bne.n	8007162 <__libc_init_array+0x2e>
 8007156:	bd70      	pop	{r4, r5, r6, pc}
 8007158:	f855 3b04 	ldr.w	r3, [r5], #4
 800715c:	4798      	blx	r3
 800715e:	3601      	adds	r6, #1
 8007160:	e7ee      	b.n	8007140 <__libc_init_array+0xc>
 8007162:	f855 3b04 	ldr.w	r3, [r5], #4
 8007166:	4798      	blx	r3
 8007168:	3601      	adds	r6, #1
 800716a:	e7f2      	b.n	8007152 <__libc_init_array+0x1e>
 800716c:	0800ac60 	.word	0x0800ac60
 8007170:	0800ac60 	.word	0x0800ac60
 8007174:	0800ac60 	.word	0x0800ac60
 8007178:	0800ac64 	.word	0x0800ac64

0800717c <memset>:
 800717c:	4402      	add	r2, r0
 800717e:	4603      	mov	r3, r0
 8007180:	4293      	cmp	r3, r2
 8007182:	d100      	bne.n	8007186 <memset+0xa>
 8007184:	4770      	bx	lr
 8007186:	f803 1b01 	strb.w	r1, [r3], #1
 800718a:	e7f9      	b.n	8007180 <memset+0x4>

0800718c <__cvt>:
 800718c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007190:	ec55 4b10 	vmov	r4, r5, d0
 8007194:	2d00      	cmp	r5, #0
 8007196:	460e      	mov	r6, r1
 8007198:	4619      	mov	r1, r3
 800719a:	462b      	mov	r3, r5
 800719c:	bfbb      	ittet	lt
 800719e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80071a2:	461d      	movlt	r5, r3
 80071a4:	2300      	movge	r3, #0
 80071a6:	232d      	movlt	r3, #45	; 0x2d
 80071a8:	700b      	strb	r3, [r1, #0]
 80071aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80071b0:	4691      	mov	r9, r2
 80071b2:	f023 0820 	bic.w	r8, r3, #32
 80071b6:	bfbc      	itt	lt
 80071b8:	4622      	movlt	r2, r4
 80071ba:	4614      	movlt	r4, r2
 80071bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071c0:	d005      	beq.n	80071ce <__cvt+0x42>
 80071c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80071c6:	d100      	bne.n	80071ca <__cvt+0x3e>
 80071c8:	3601      	adds	r6, #1
 80071ca:	2102      	movs	r1, #2
 80071cc:	e000      	b.n	80071d0 <__cvt+0x44>
 80071ce:	2103      	movs	r1, #3
 80071d0:	ab03      	add	r3, sp, #12
 80071d2:	9301      	str	r3, [sp, #4]
 80071d4:	ab02      	add	r3, sp, #8
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	ec45 4b10 	vmov	d0, r4, r5
 80071dc:	4653      	mov	r3, sl
 80071de:	4632      	mov	r2, r6
 80071e0:	f000 ff3a 	bl	8008058 <_dtoa_r>
 80071e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80071e8:	4607      	mov	r7, r0
 80071ea:	d102      	bne.n	80071f2 <__cvt+0x66>
 80071ec:	f019 0f01 	tst.w	r9, #1
 80071f0:	d022      	beq.n	8007238 <__cvt+0xac>
 80071f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071f6:	eb07 0906 	add.w	r9, r7, r6
 80071fa:	d110      	bne.n	800721e <__cvt+0x92>
 80071fc:	783b      	ldrb	r3, [r7, #0]
 80071fe:	2b30      	cmp	r3, #48	; 0x30
 8007200:	d10a      	bne.n	8007218 <__cvt+0x8c>
 8007202:	2200      	movs	r2, #0
 8007204:	2300      	movs	r3, #0
 8007206:	4620      	mov	r0, r4
 8007208:	4629      	mov	r1, r5
 800720a:	f7f9 fc6d 	bl	8000ae8 <__aeabi_dcmpeq>
 800720e:	b918      	cbnz	r0, 8007218 <__cvt+0x8c>
 8007210:	f1c6 0601 	rsb	r6, r6, #1
 8007214:	f8ca 6000 	str.w	r6, [sl]
 8007218:	f8da 3000 	ldr.w	r3, [sl]
 800721c:	4499      	add	r9, r3
 800721e:	2200      	movs	r2, #0
 8007220:	2300      	movs	r3, #0
 8007222:	4620      	mov	r0, r4
 8007224:	4629      	mov	r1, r5
 8007226:	f7f9 fc5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800722a:	b108      	cbz	r0, 8007230 <__cvt+0xa4>
 800722c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007230:	2230      	movs	r2, #48	; 0x30
 8007232:	9b03      	ldr	r3, [sp, #12]
 8007234:	454b      	cmp	r3, r9
 8007236:	d307      	bcc.n	8007248 <__cvt+0xbc>
 8007238:	9b03      	ldr	r3, [sp, #12]
 800723a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800723c:	1bdb      	subs	r3, r3, r7
 800723e:	4638      	mov	r0, r7
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	b004      	add	sp, #16
 8007244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007248:	1c59      	adds	r1, r3, #1
 800724a:	9103      	str	r1, [sp, #12]
 800724c:	701a      	strb	r2, [r3, #0]
 800724e:	e7f0      	b.n	8007232 <__cvt+0xa6>

08007250 <__exponent>:
 8007250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007252:	4603      	mov	r3, r0
 8007254:	2900      	cmp	r1, #0
 8007256:	bfb8      	it	lt
 8007258:	4249      	neglt	r1, r1
 800725a:	f803 2b02 	strb.w	r2, [r3], #2
 800725e:	bfb4      	ite	lt
 8007260:	222d      	movlt	r2, #45	; 0x2d
 8007262:	222b      	movge	r2, #43	; 0x2b
 8007264:	2909      	cmp	r1, #9
 8007266:	7042      	strb	r2, [r0, #1]
 8007268:	dd2a      	ble.n	80072c0 <__exponent+0x70>
 800726a:	f10d 0407 	add.w	r4, sp, #7
 800726e:	46a4      	mov	ip, r4
 8007270:	270a      	movs	r7, #10
 8007272:	46a6      	mov	lr, r4
 8007274:	460a      	mov	r2, r1
 8007276:	fb91 f6f7 	sdiv	r6, r1, r7
 800727a:	fb07 1516 	mls	r5, r7, r6, r1
 800727e:	3530      	adds	r5, #48	; 0x30
 8007280:	2a63      	cmp	r2, #99	; 0x63
 8007282:	f104 34ff 	add.w	r4, r4, #4294967295
 8007286:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800728a:	4631      	mov	r1, r6
 800728c:	dcf1      	bgt.n	8007272 <__exponent+0x22>
 800728e:	3130      	adds	r1, #48	; 0x30
 8007290:	f1ae 0502 	sub.w	r5, lr, #2
 8007294:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007298:	1c44      	adds	r4, r0, #1
 800729a:	4629      	mov	r1, r5
 800729c:	4561      	cmp	r1, ip
 800729e:	d30a      	bcc.n	80072b6 <__exponent+0x66>
 80072a0:	f10d 0209 	add.w	r2, sp, #9
 80072a4:	eba2 020e 	sub.w	r2, r2, lr
 80072a8:	4565      	cmp	r5, ip
 80072aa:	bf88      	it	hi
 80072ac:	2200      	movhi	r2, #0
 80072ae:	4413      	add	r3, r2
 80072b0:	1a18      	subs	r0, r3, r0
 80072b2:	b003      	add	sp, #12
 80072b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80072be:	e7ed      	b.n	800729c <__exponent+0x4c>
 80072c0:	2330      	movs	r3, #48	; 0x30
 80072c2:	3130      	adds	r1, #48	; 0x30
 80072c4:	7083      	strb	r3, [r0, #2]
 80072c6:	70c1      	strb	r1, [r0, #3]
 80072c8:	1d03      	adds	r3, r0, #4
 80072ca:	e7f1      	b.n	80072b0 <__exponent+0x60>

080072cc <_printf_float>:
 80072cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d0:	ed2d 8b02 	vpush	{d8}
 80072d4:	b08d      	sub	sp, #52	; 0x34
 80072d6:	460c      	mov	r4, r1
 80072d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80072dc:	4616      	mov	r6, r2
 80072de:	461f      	mov	r7, r3
 80072e0:	4605      	mov	r5, r0
 80072e2:	f001 fe5f 	bl	8008fa4 <_localeconv_r>
 80072e6:	f8d0 a000 	ldr.w	sl, [r0]
 80072ea:	4650      	mov	r0, sl
 80072ec:	f7f8 ff7a 	bl	80001e4 <strlen>
 80072f0:	2300      	movs	r3, #0
 80072f2:	930a      	str	r3, [sp, #40]	; 0x28
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	9305      	str	r3, [sp, #20]
 80072f8:	f8d8 3000 	ldr.w	r3, [r8]
 80072fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007300:	3307      	adds	r3, #7
 8007302:	f023 0307 	bic.w	r3, r3, #7
 8007306:	f103 0208 	add.w	r2, r3, #8
 800730a:	f8c8 2000 	str.w	r2, [r8]
 800730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007312:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007316:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800731a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800731e:	9307      	str	r3, [sp, #28]
 8007320:	f8cd 8018 	str.w	r8, [sp, #24]
 8007324:	ee08 0a10 	vmov	s16, r0
 8007328:	4b9f      	ldr	r3, [pc, #636]	; (80075a8 <_printf_float+0x2dc>)
 800732a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800732e:	f04f 32ff 	mov.w	r2, #4294967295
 8007332:	f7f9 fc0b 	bl	8000b4c <__aeabi_dcmpun>
 8007336:	bb88      	cbnz	r0, 800739c <_printf_float+0xd0>
 8007338:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800733c:	4b9a      	ldr	r3, [pc, #616]	; (80075a8 <_printf_float+0x2dc>)
 800733e:	f04f 32ff 	mov.w	r2, #4294967295
 8007342:	f7f9 fbe5 	bl	8000b10 <__aeabi_dcmple>
 8007346:	bb48      	cbnz	r0, 800739c <_printf_float+0xd0>
 8007348:	2200      	movs	r2, #0
 800734a:	2300      	movs	r3, #0
 800734c:	4640      	mov	r0, r8
 800734e:	4649      	mov	r1, r9
 8007350:	f7f9 fbd4 	bl	8000afc <__aeabi_dcmplt>
 8007354:	b110      	cbz	r0, 800735c <_printf_float+0x90>
 8007356:	232d      	movs	r3, #45	; 0x2d
 8007358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800735c:	4b93      	ldr	r3, [pc, #588]	; (80075ac <_printf_float+0x2e0>)
 800735e:	4894      	ldr	r0, [pc, #592]	; (80075b0 <_printf_float+0x2e4>)
 8007360:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007364:	bf94      	ite	ls
 8007366:	4698      	movls	r8, r3
 8007368:	4680      	movhi	r8, r0
 800736a:	2303      	movs	r3, #3
 800736c:	6123      	str	r3, [r4, #16]
 800736e:	9b05      	ldr	r3, [sp, #20]
 8007370:	f023 0204 	bic.w	r2, r3, #4
 8007374:	6022      	str	r2, [r4, #0]
 8007376:	f04f 0900 	mov.w	r9, #0
 800737a:	9700      	str	r7, [sp, #0]
 800737c:	4633      	mov	r3, r6
 800737e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007380:	4621      	mov	r1, r4
 8007382:	4628      	mov	r0, r5
 8007384:	f000 f9d8 	bl	8007738 <_printf_common>
 8007388:	3001      	adds	r0, #1
 800738a:	f040 8090 	bne.w	80074ae <_printf_float+0x1e2>
 800738e:	f04f 30ff 	mov.w	r0, #4294967295
 8007392:	b00d      	add	sp, #52	; 0x34
 8007394:	ecbd 8b02 	vpop	{d8}
 8007398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800739c:	4642      	mov	r2, r8
 800739e:	464b      	mov	r3, r9
 80073a0:	4640      	mov	r0, r8
 80073a2:	4649      	mov	r1, r9
 80073a4:	f7f9 fbd2 	bl	8000b4c <__aeabi_dcmpun>
 80073a8:	b140      	cbz	r0, 80073bc <_printf_float+0xf0>
 80073aa:	464b      	mov	r3, r9
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	bfbc      	itt	lt
 80073b0:	232d      	movlt	r3, #45	; 0x2d
 80073b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80073b6:	487f      	ldr	r0, [pc, #508]	; (80075b4 <_printf_float+0x2e8>)
 80073b8:	4b7f      	ldr	r3, [pc, #508]	; (80075b8 <_printf_float+0x2ec>)
 80073ba:	e7d1      	b.n	8007360 <_printf_float+0x94>
 80073bc:	6863      	ldr	r3, [r4, #4]
 80073be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80073c2:	9206      	str	r2, [sp, #24]
 80073c4:	1c5a      	adds	r2, r3, #1
 80073c6:	d13f      	bne.n	8007448 <_printf_float+0x17c>
 80073c8:	2306      	movs	r3, #6
 80073ca:	6063      	str	r3, [r4, #4]
 80073cc:	9b05      	ldr	r3, [sp, #20]
 80073ce:	6861      	ldr	r1, [r4, #4]
 80073d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80073d4:	2300      	movs	r3, #0
 80073d6:	9303      	str	r3, [sp, #12]
 80073d8:	ab0a      	add	r3, sp, #40	; 0x28
 80073da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80073de:	ab09      	add	r3, sp, #36	; 0x24
 80073e0:	ec49 8b10 	vmov	d0, r8, r9
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	6022      	str	r2, [r4, #0]
 80073e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80073ec:	4628      	mov	r0, r5
 80073ee:	f7ff fecd 	bl	800718c <__cvt>
 80073f2:	9b06      	ldr	r3, [sp, #24]
 80073f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073f6:	2b47      	cmp	r3, #71	; 0x47
 80073f8:	4680      	mov	r8, r0
 80073fa:	d108      	bne.n	800740e <_printf_float+0x142>
 80073fc:	1cc8      	adds	r0, r1, #3
 80073fe:	db02      	blt.n	8007406 <_printf_float+0x13a>
 8007400:	6863      	ldr	r3, [r4, #4]
 8007402:	4299      	cmp	r1, r3
 8007404:	dd41      	ble.n	800748a <_printf_float+0x1be>
 8007406:	f1ab 0b02 	sub.w	fp, fp, #2
 800740a:	fa5f fb8b 	uxtb.w	fp, fp
 800740e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007412:	d820      	bhi.n	8007456 <_printf_float+0x18a>
 8007414:	3901      	subs	r1, #1
 8007416:	465a      	mov	r2, fp
 8007418:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800741c:	9109      	str	r1, [sp, #36]	; 0x24
 800741e:	f7ff ff17 	bl	8007250 <__exponent>
 8007422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007424:	1813      	adds	r3, r2, r0
 8007426:	2a01      	cmp	r2, #1
 8007428:	4681      	mov	r9, r0
 800742a:	6123      	str	r3, [r4, #16]
 800742c:	dc02      	bgt.n	8007434 <_printf_float+0x168>
 800742e:	6822      	ldr	r2, [r4, #0]
 8007430:	07d2      	lsls	r2, r2, #31
 8007432:	d501      	bpl.n	8007438 <_printf_float+0x16c>
 8007434:	3301      	adds	r3, #1
 8007436:	6123      	str	r3, [r4, #16]
 8007438:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800743c:	2b00      	cmp	r3, #0
 800743e:	d09c      	beq.n	800737a <_printf_float+0xae>
 8007440:	232d      	movs	r3, #45	; 0x2d
 8007442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007446:	e798      	b.n	800737a <_printf_float+0xae>
 8007448:	9a06      	ldr	r2, [sp, #24]
 800744a:	2a47      	cmp	r2, #71	; 0x47
 800744c:	d1be      	bne.n	80073cc <_printf_float+0x100>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1bc      	bne.n	80073cc <_printf_float+0x100>
 8007452:	2301      	movs	r3, #1
 8007454:	e7b9      	b.n	80073ca <_printf_float+0xfe>
 8007456:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800745a:	d118      	bne.n	800748e <_printf_float+0x1c2>
 800745c:	2900      	cmp	r1, #0
 800745e:	6863      	ldr	r3, [r4, #4]
 8007460:	dd0b      	ble.n	800747a <_printf_float+0x1ae>
 8007462:	6121      	str	r1, [r4, #16]
 8007464:	b913      	cbnz	r3, 800746c <_printf_float+0x1a0>
 8007466:	6822      	ldr	r2, [r4, #0]
 8007468:	07d0      	lsls	r0, r2, #31
 800746a:	d502      	bpl.n	8007472 <_printf_float+0x1a6>
 800746c:	3301      	adds	r3, #1
 800746e:	440b      	add	r3, r1
 8007470:	6123      	str	r3, [r4, #16]
 8007472:	65a1      	str	r1, [r4, #88]	; 0x58
 8007474:	f04f 0900 	mov.w	r9, #0
 8007478:	e7de      	b.n	8007438 <_printf_float+0x16c>
 800747a:	b913      	cbnz	r3, 8007482 <_printf_float+0x1b6>
 800747c:	6822      	ldr	r2, [r4, #0]
 800747e:	07d2      	lsls	r2, r2, #31
 8007480:	d501      	bpl.n	8007486 <_printf_float+0x1ba>
 8007482:	3302      	adds	r3, #2
 8007484:	e7f4      	b.n	8007470 <_printf_float+0x1a4>
 8007486:	2301      	movs	r3, #1
 8007488:	e7f2      	b.n	8007470 <_printf_float+0x1a4>
 800748a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800748e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007490:	4299      	cmp	r1, r3
 8007492:	db05      	blt.n	80074a0 <_printf_float+0x1d4>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	6121      	str	r1, [r4, #16]
 8007498:	07d8      	lsls	r0, r3, #31
 800749a:	d5ea      	bpl.n	8007472 <_printf_float+0x1a6>
 800749c:	1c4b      	adds	r3, r1, #1
 800749e:	e7e7      	b.n	8007470 <_printf_float+0x1a4>
 80074a0:	2900      	cmp	r1, #0
 80074a2:	bfd4      	ite	le
 80074a4:	f1c1 0202 	rsble	r2, r1, #2
 80074a8:	2201      	movgt	r2, #1
 80074aa:	4413      	add	r3, r2
 80074ac:	e7e0      	b.n	8007470 <_printf_float+0x1a4>
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	055a      	lsls	r2, r3, #21
 80074b2:	d407      	bmi.n	80074c4 <_printf_float+0x1f8>
 80074b4:	6923      	ldr	r3, [r4, #16]
 80074b6:	4642      	mov	r2, r8
 80074b8:	4631      	mov	r1, r6
 80074ba:	4628      	mov	r0, r5
 80074bc:	47b8      	blx	r7
 80074be:	3001      	adds	r0, #1
 80074c0:	d12c      	bne.n	800751c <_printf_float+0x250>
 80074c2:	e764      	b.n	800738e <_printf_float+0xc2>
 80074c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074c8:	f240 80e0 	bls.w	800768c <_printf_float+0x3c0>
 80074cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074d0:	2200      	movs	r2, #0
 80074d2:	2300      	movs	r3, #0
 80074d4:	f7f9 fb08 	bl	8000ae8 <__aeabi_dcmpeq>
 80074d8:	2800      	cmp	r0, #0
 80074da:	d034      	beq.n	8007546 <_printf_float+0x27a>
 80074dc:	4a37      	ldr	r2, [pc, #220]	; (80075bc <_printf_float+0x2f0>)
 80074de:	2301      	movs	r3, #1
 80074e0:	4631      	mov	r1, r6
 80074e2:	4628      	mov	r0, r5
 80074e4:	47b8      	blx	r7
 80074e6:	3001      	adds	r0, #1
 80074e8:	f43f af51 	beq.w	800738e <_printf_float+0xc2>
 80074ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074f0:	429a      	cmp	r2, r3
 80074f2:	db02      	blt.n	80074fa <_printf_float+0x22e>
 80074f4:	6823      	ldr	r3, [r4, #0]
 80074f6:	07d8      	lsls	r0, r3, #31
 80074f8:	d510      	bpl.n	800751c <_printf_float+0x250>
 80074fa:	ee18 3a10 	vmov	r3, s16
 80074fe:	4652      	mov	r2, sl
 8007500:	4631      	mov	r1, r6
 8007502:	4628      	mov	r0, r5
 8007504:	47b8      	blx	r7
 8007506:	3001      	adds	r0, #1
 8007508:	f43f af41 	beq.w	800738e <_printf_float+0xc2>
 800750c:	f04f 0800 	mov.w	r8, #0
 8007510:	f104 091a 	add.w	r9, r4, #26
 8007514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007516:	3b01      	subs	r3, #1
 8007518:	4543      	cmp	r3, r8
 800751a:	dc09      	bgt.n	8007530 <_printf_float+0x264>
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	079b      	lsls	r3, r3, #30
 8007520:	f100 8105 	bmi.w	800772e <_printf_float+0x462>
 8007524:	68e0      	ldr	r0, [r4, #12]
 8007526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007528:	4298      	cmp	r0, r3
 800752a:	bfb8      	it	lt
 800752c:	4618      	movlt	r0, r3
 800752e:	e730      	b.n	8007392 <_printf_float+0xc6>
 8007530:	2301      	movs	r3, #1
 8007532:	464a      	mov	r2, r9
 8007534:	4631      	mov	r1, r6
 8007536:	4628      	mov	r0, r5
 8007538:	47b8      	blx	r7
 800753a:	3001      	adds	r0, #1
 800753c:	f43f af27 	beq.w	800738e <_printf_float+0xc2>
 8007540:	f108 0801 	add.w	r8, r8, #1
 8007544:	e7e6      	b.n	8007514 <_printf_float+0x248>
 8007546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007548:	2b00      	cmp	r3, #0
 800754a:	dc39      	bgt.n	80075c0 <_printf_float+0x2f4>
 800754c:	4a1b      	ldr	r2, [pc, #108]	; (80075bc <_printf_float+0x2f0>)
 800754e:	2301      	movs	r3, #1
 8007550:	4631      	mov	r1, r6
 8007552:	4628      	mov	r0, r5
 8007554:	47b8      	blx	r7
 8007556:	3001      	adds	r0, #1
 8007558:	f43f af19 	beq.w	800738e <_printf_float+0xc2>
 800755c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007560:	4313      	orrs	r3, r2
 8007562:	d102      	bne.n	800756a <_printf_float+0x29e>
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	07d9      	lsls	r1, r3, #31
 8007568:	d5d8      	bpl.n	800751c <_printf_float+0x250>
 800756a:	ee18 3a10 	vmov	r3, s16
 800756e:	4652      	mov	r2, sl
 8007570:	4631      	mov	r1, r6
 8007572:	4628      	mov	r0, r5
 8007574:	47b8      	blx	r7
 8007576:	3001      	adds	r0, #1
 8007578:	f43f af09 	beq.w	800738e <_printf_float+0xc2>
 800757c:	f04f 0900 	mov.w	r9, #0
 8007580:	f104 0a1a 	add.w	sl, r4, #26
 8007584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007586:	425b      	negs	r3, r3
 8007588:	454b      	cmp	r3, r9
 800758a:	dc01      	bgt.n	8007590 <_printf_float+0x2c4>
 800758c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800758e:	e792      	b.n	80074b6 <_printf_float+0x1ea>
 8007590:	2301      	movs	r3, #1
 8007592:	4652      	mov	r2, sl
 8007594:	4631      	mov	r1, r6
 8007596:	4628      	mov	r0, r5
 8007598:	47b8      	blx	r7
 800759a:	3001      	adds	r0, #1
 800759c:	f43f aef7 	beq.w	800738e <_printf_float+0xc2>
 80075a0:	f109 0901 	add.w	r9, r9, #1
 80075a4:	e7ee      	b.n	8007584 <_printf_float+0x2b8>
 80075a6:	bf00      	nop
 80075a8:	7fefffff 	.word	0x7fefffff
 80075ac:	0800a864 	.word	0x0800a864
 80075b0:	0800a868 	.word	0x0800a868
 80075b4:	0800a870 	.word	0x0800a870
 80075b8:	0800a86c 	.word	0x0800a86c
 80075bc:	0800abf9 	.word	0x0800abf9
 80075c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075c4:	429a      	cmp	r2, r3
 80075c6:	bfa8      	it	ge
 80075c8:	461a      	movge	r2, r3
 80075ca:	2a00      	cmp	r2, #0
 80075cc:	4691      	mov	r9, r2
 80075ce:	dc37      	bgt.n	8007640 <_printf_float+0x374>
 80075d0:	f04f 0b00 	mov.w	fp, #0
 80075d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075d8:	f104 021a 	add.w	r2, r4, #26
 80075dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075de:	9305      	str	r3, [sp, #20]
 80075e0:	eba3 0309 	sub.w	r3, r3, r9
 80075e4:	455b      	cmp	r3, fp
 80075e6:	dc33      	bgt.n	8007650 <_printf_float+0x384>
 80075e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075ec:	429a      	cmp	r2, r3
 80075ee:	db3b      	blt.n	8007668 <_printf_float+0x39c>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	07da      	lsls	r2, r3, #31
 80075f4:	d438      	bmi.n	8007668 <_printf_float+0x39c>
 80075f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075f8:	9a05      	ldr	r2, [sp, #20]
 80075fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075fc:	1a9a      	subs	r2, r3, r2
 80075fe:	eba3 0901 	sub.w	r9, r3, r1
 8007602:	4591      	cmp	r9, r2
 8007604:	bfa8      	it	ge
 8007606:	4691      	movge	r9, r2
 8007608:	f1b9 0f00 	cmp.w	r9, #0
 800760c:	dc35      	bgt.n	800767a <_printf_float+0x3ae>
 800760e:	f04f 0800 	mov.w	r8, #0
 8007612:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007616:	f104 0a1a 	add.w	sl, r4, #26
 800761a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800761e:	1a9b      	subs	r3, r3, r2
 8007620:	eba3 0309 	sub.w	r3, r3, r9
 8007624:	4543      	cmp	r3, r8
 8007626:	f77f af79 	ble.w	800751c <_printf_float+0x250>
 800762a:	2301      	movs	r3, #1
 800762c:	4652      	mov	r2, sl
 800762e:	4631      	mov	r1, r6
 8007630:	4628      	mov	r0, r5
 8007632:	47b8      	blx	r7
 8007634:	3001      	adds	r0, #1
 8007636:	f43f aeaa 	beq.w	800738e <_printf_float+0xc2>
 800763a:	f108 0801 	add.w	r8, r8, #1
 800763e:	e7ec      	b.n	800761a <_printf_float+0x34e>
 8007640:	4613      	mov	r3, r2
 8007642:	4631      	mov	r1, r6
 8007644:	4642      	mov	r2, r8
 8007646:	4628      	mov	r0, r5
 8007648:	47b8      	blx	r7
 800764a:	3001      	adds	r0, #1
 800764c:	d1c0      	bne.n	80075d0 <_printf_float+0x304>
 800764e:	e69e      	b.n	800738e <_printf_float+0xc2>
 8007650:	2301      	movs	r3, #1
 8007652:	4631      	mov	r1, r6
 8007654:	4628      	mov	r0, r5
 8007656:	9205      	str	r2, [sp, #20]
 8007658:	47b8      	blx	r7
 800765a:	3001      	adds	r0, #1
 800765c:	f43f ae97 	beq.w	800738e <_printf_float+0xc2>
 8007660:	9a05      	ldr	r2, [sp, #20]
 8007662:	f10b 0b01 	add.w	fp, fp, #1
 8007666:	e7b9      	b.n	80075dc <_printf_float+0x310>
 8007668:	ee18 3a10 	vmov	r3, s16
 800766c:	4652      	mov	r2, sl
 800766e:	4631      	mov	r1, r6
 8007670:	4628      	mov	r0, r5
 8007672:	47b8      	blx	r7
 8007674:	3001      	adds	r0, #1
 8007676:	d1be      	bne.n	80075f6 <_printf_float+0x32a>
 8007678:	e689      	b.n	800738e <_printf_float+0xc2>
 800767a:	9a05      	ldr	r2, [sp, #20]
 800767c:	464b      	mov	r3, r9
 800767e:	4442      	add	r2, r8
 8007680:	4631      	mov	r1, r6
 8007682:	4628      	mov	r0, r5
 8007684:	47b8      	blx	r7
 8007686:	3001      	adds	r0, #1
 8007688:	d1c1      	bne.n	800760e <_printf_float+0x342>
 800768a:	e680      	b.n	800738e <_printf_float+0xc2>
 800768c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800768e:	2a01      	cmp	r2, #1
 8007690:	dc01      	bgt.n	8007696 <_printf_float+0x3ca>
 8007692:	07db      	lsls	r3, r3, #31
 8007694:	d538      	bpl.n	8007708 <_printf_float+0x43c>
 8007696:	2301      	movs	r3, #1
 8007698:	4642      	mov	r2, r8
 800769a:	4631      	mov	r1, r6
 800769c:	4628      	mov	r0, r5
 800769e:	47b8      	blx	r7
 80076a0:	3001      	adds	r0, #1
 80076a2:	f43f ae74 	beq.w	800738e <_printf_float+0xc2>
 80076a6:	ee18 3a10 	vmov	r3, s16
 80076aa:	4652      	mov	r2, sl
 80076ac:	4631      	mov	r1, r6
 80076ae:	4628      	mov	r0, r5
 80076b0:	47b8      	blx	r7
 80076b2:	3001      	adds	r0, #1
 80076b4:	f43f ae6b 	beq.w	800738e <_printf_float+0xc2>
 80076b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076bc:	2200      	movs	r2, #0
 80076be:	2300      	movs	r3, #0
 80076c0:	f7f9 fa12 	bl	8000ae8 <__aeabi_dcmpeq>
 80076c4:	b9d8      	cbnz	r0, 80076fe <_printf_float+0x432>
 80076c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c8:	f108 0201 	add.w	r2, r8, #1
 80076cc:	3b01      	subs	r3, #1
 80076ce:	4631      	mov	r1, r6
 80076d0:	4628      	mov	r0, r5
 80076d2:	47b8      	blx	r7
 80076d4:	3001      	adds	r0, #1
 80076d6:	d10e      	bne.n	80076f6 <_printf_float+0x42a>
 80076d8:	e659      	b.n	800738e <_printf_float+0xc2>
 80076da:	2301      	movs	r3, #1
 80076dc:	4652      	mov	r2, sl
 80076de:	4631      	mov	r1, r6
 80076e0:	4628      	mov	r0, r5
 80076e2:	47b8      	blx	r7
 80076e4:	3001      	adds	r0, #1
 80076e6:	f43f ae52 	beq.w	800738e <_printf_float+0xc2>
 80076ea:	f108 0801 	add.w	r8, r8, #1
 80076ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076f0:	3b01      	subs	r3, #1
 80076f2:	4543      	cmp	r3, r8
 80076f4:	dcf1      	bgt.n	80076da <_printf_float+0x40e>
 80076f6:	464b      	mov	r3, r9
 80076f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80076fc:	e6dc      	b.n	80074b8 <_printf_float+0x1ec>
 80076fe:	f04f 0800 	mov.w	r8, #0
 8007702:	f104 0a1a 	add.w	sl, r4, #26
 8007706:	e7f2      	b.n	80076ee <_printf_float+0x422>
 8007708:	2301      	movs	r3, #1
 800770a:	4642      	mov	r2, r8
 800770c:	e7df      	b.n	80076ce <_printf_float+0x402>
 800770e:	2301      	movs	r3, #1
 8007710:	464a      	mov	r2, r9
 8007712:	4631      	mov	r1, r6
 8007714:	4628      	mov	r0, r5
 8007716:	47b8      	blx	r7
 8007718:	3001      	adds	r0, #1
 800771a:	f43f ae38 	beq.w	800738e <_printf_float+0xc2>
 800771e:	f108 0801 	add.w	r8, r8, #1
 8007722:	68e3      	ldr	r3, [r4, #12]
 8007724:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007726:	1a5b      	subs	r3, r3, r1
 8007728:	4543      	cmp	r3, r8
 800772a:	dcf0      	bgt.n	800770e <_printf_float+0x442>
 800772c:	e6fa      	b.n	8007524 <_printf_float+0x258>
 800772e:	f04f 0800 	mov.w	r8, #0
 8007732:	f104 0919 	add.w	r9, r4, #25
 8007736:	e7f4      	b.n	8007722 <_printf_float+0x456>

08007738 <_printf_common>:
 8007738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800773c:	4616      	mov	r6, r2
 800773e:	4699      	mov	r9, r3
 8007740:	688a      	ldr	r2, [r1, #8]
 8007742:	690b      	ldr	r3, [r1, #16]
 8007744:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007748:	4293      	cmp	r3, r2
 800774a:	bfb8      	it	lt
 800774c:	4613      	movlt	r3, r2
 800774e:	6033      	str	r3, [r6, #0]
 8007750:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007754:	4607      	mov	r7, r0
 8007756:	460c      	mov	r4, r1
 8007758:	b10a      	cbz	r2, 800775e <_printf_common+0x26>
 800775a:	3301      	adds	r3, #1
 800775c:	6033      	str	r3, [r6, #0]
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	0699      	lsls	r1, r3, #26
 8007762:	bf42      	ittt	mi
 8007764:	6833      	ldrmi	r3, [r6, #0]
 8007766:	3302      	addmi	r3, #2
 8007768:	6033      	strmi	r3, [r6, #0]
 800776a:	6825      	ldr	r5, [r4, #0]
 800776c:	f015 0506 	ands.w	r5, r5, #6
 8007770:	d106      	bne.n	8007780 <_printf_common+0x48>
 8007772:	f104 0a19 	add.w	sl, r4, #25
 8007776:	68e3      	ldr	r3, [r4, #12]
 8007778:	6832      	ldr	r2, [r6, #0]
 800777a:	1a9b      	subs	r3, r3, r2
 800777c:	42ab      	cmp	r3, r5
 800777e:	dc26      	bgt.n	80077ce <_printf_common+0x96>
 8007780:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007784:	1e13      	subs	r3, r2, #0
 8007786:	6822      	ldr	r2, [r4, #0]
 8007788:	bf18      	it	ne
 800778a:	2301      	movne	r3, #1
 800778c:	0692      	lsls	r2, r2, #26
 800778e:	d42b      	bmi.n	80077e8 <_printf_common+0xb0>
 8007790:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007794:	4649      	mov	r1, r9
 8007796:	4638      	mov	r0, r7
 8007798:	47c0      	blx	r8
 800779a:	3001      	adds	r0, #1
 800779c:	d01e      	beq.n	80077dc <_printf_common+0xa4>
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	68e5      	ldr	r5, [r4, #12]
 80077a2:	6832      	ldr	r2, [r6, #0]
 80077a4:	f003 0306 	and.w	r3, r3, #6
 80077a8:	2b04      	cmp	r3, #4
 80077aa:	bf08      	it	eq
 80077ac:	1aad      	subeq	r5, r5, r2
 80077ae:	68a3      	ldr	r3, [r4, #8]
 80077b0:	6922      	ldr	r2, [r4, #16]
 80077b2:	bf0c      	ite	eq
 80077b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077b8:	2500      	movne	r5, #0
 80077ba:	4293      	cmp	r3, r2
 80077bc:	bfc4      	itt	gt
 80077be:	1a9b      	subgt	r3, r3, r2
 80077c0:	18ed      	addgt	r5, r5, r3
 80077c2:	2600      	movs	r6, #0
 80077c4:	341a      	adds	r4, #26
 80077c6:	42b5      	cmp	r5, r6
 80077c8:	d11a      	bne.n	8007800 <_printf_common+0xc8>
 80077ca:	2000      	movs	r0, #0
 80077cc:	e008      	b.n	80077e0 <_printf_common+0xa8>
 80077ce:	2301      	movs	r3, #1
 80077d0:	4652      	mov	r2, sl
 80077d2:	4649      	mov	r1, r9
 80077d4:	4638      	mov	r0, r7
 80077d6:	47c0      	blx	r8
 80077d8:	3001      	adds	r0, #1
 80077da:	d103      	bne.n	80077e4 <_printf_common+0xac>
 80077dc:	f04f 30ff 	mov.w	r0, #4294967295
 80077e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e4:	3501      	adds	r5, #1
 80077e6:	e7c6      	b.n	8007776 <_printf_common+0x3e>
 80077e8:	18e1      	adds	r1, r4, r3
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	2030      	movs	r0, #48	; 0x30
 80077ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077f2:	4422      	add	r2, r4
 80077f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077fc:	3302      	adds	r3, #2
 80077fe:	e7c7      	b.n	8007790 <_printf_common+0x58>
 8007800:	2301      	movs	r3, #1
 8007802:	4622      	mov	r2, r4
 8007804:	4649      	mov	r1, r9
 8007806:	4638      	mov	r0, r7
 8007808:	47c0      	blx	r8
 800780a:	3001      	adds	r0, #1
 800780c:	d0e6      	beq.n	80077dc <_printf_common+0xa4>
 800780e:	3601      	adds	r6, #1
 8007810:	e7d9      	b.n	80077c6 <_printf_common+0x8e>
	...

08007814 <_printf_i>:
 8007814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007818:	7e0f      	ldrb	r7, [r1, #24]
 800781a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800781c:	2f78      	cmp	r7, #120	; 0x78
 800781e:	4691      	mov	r9, r2
 8007820:	4680      	mov	r8, r0
 8007822:	460c      	mov	r4, r1
 8007824:	469a      	mov	sl, r3
 8007826:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800782a:	d807      	bhi.n	800783c <_printf_i+0x28>
 800782c:	2f62      	cmp	r7, #98	; 0x62
 800782e:	d80a      	bhi.n	8007846 <_printf_i+0x32>
 8007830:	2f00      	cmp	r7, #0
 8007832:	f000 80d8 	beq.w	80079e6 <_printf_i+0x1d2>
 8007836:	2f58      	cmp	r7, #88	; 0x58
 8007838:	f000 80a3 	beq.w	8007982 <_printf_i+0x16e>
 800783c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007840:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007844:	e03a      	b.n	80078bc <_printf_i+0xa8>
 8007846:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800784a:	2b15      	cmp	r3, #21
 800784c:	d8f6      	bhi.n	800783c <_printf_i+0x28>
 800784e:	a101      	add	r1, pc, #4	; (adr r1, 8007854 <_printf_i+0x40>)
 8007850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007854:	080078ad 	.word	0x080078ad
 8007858:	080078c1 	.word	0x080078c1
 800785c:	0800783d 	.word	0x0800783d
 8007860:	0800783d 	.word	0x0800783d
 8007864:	0800783d 	.word	0x0800783d
 8007868:	0800783d 	.word	0x0800783d
 800786c:	080078c1 	.word	0x080078c1
 8007870:	0800783d 	.word	0x0800783d
 8007874:	0800783d 	.word	0x0800783d
 8007878:	0800783d 	.word	0x0800783d
 800787c:	0800783d 	.word	0x0800783d
 8007880:	080079cd 	.word	0x080079cd
 8007884:	080078f1 	.word	0x080078f1
 8007888:	080079af 	.word	0x080079af
 800788c:	0800783d 	.word	0x0800783d
 8007890:	0800783d 	.word	0x0800783d
 8007894:	080079ef 	.word	0x080079ef
 8007898:	0800783d 	.word	0x0800783d
 800789c:	080078f1 	.word	0x080078f1
 80078a0:	0800783d 	.word	0x0800783d
 80078a4:	0800783d 	.word	0x0800783d
 80078a8:	080079b7 	.word	0x080079b7
 80078ac:	682b      	ldr	r3, [r5, #0]
 80078ae:	1d1a      	adds	r2, r3, #4
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	602a      	str	r2, [r5, #0]
 80078b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078bc:	2301      	movs	r3, #1
 80078be:	e0a3      	b.n	8007a08 <_printf_i+0x1f4>
 80078c0:	6820      	ldr	r0, [r4, #0]
 80078c2:	6829      	ldr	r1, [r5, #0]
 80078c4:	0606      	lsls	r6, r0, #24
 80078c6:	f101 0304 	add.w	r3, r1, #4
 80078ca:	d50a      	bpl.n	80078e2 <_printf_i+0xce>
 80078cc:	680e      	ldr	r6, [r1, #0]
 80078ce:	602b      	str	r3, [r5, #0]
 80078d0:	2e00      	cmp	r6, #0
 80078d2:	da03      	bge.n	80078dc <_printf_i+0xc8>
 80078d4:	232d      	movs	r3, #45	; 0x2d
 80078d6:	4276      	negs	r6, r6
 80078d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078dc:	485e      	ldr	r0, [pc, #376]	; (8007a58 <_printf_i+0x244>)
 80078de:	230a      	movs	r3, #10
 80078e0:	e019      	b.n	8007916 <_printf_i+0x102>
 80078e2:	680e      	ldr	r6, [r1, #0]
 80078e4:	602b      	str	r3, [r5, #0]
 80078e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078ea:	bf18      	it	ne
 80078ec:	b236      	sxthne	r6, r6
 80078ee:	e7ef      	b.n	80078d0 <_printf_i+0xbc>
 80078f0:	682b      	ldr	r3, [r5, #0]
 80078f2:	6820      	ldr	r0, [r4, #0]
 80078f4:	1d19      	adds	r1, r3, #4
 80078f6:	6029      	str	r1, [r5, #0]
 80078f8:	0601      	lsls	r1, r0, #24
 80078fa:	d501      	bpl.n	8007900 <_printf_i+0xec>
 80078fc:	681e      	ldr	r6, [r3, #0]
 80078fe:	e002      	b.n	8007906 <_printf_i+0xf2>
 8007900:	0646      	lsls	r6, r0, #25
 8007902:	d5fb      	bpl.n	80078fc <_printf_i+0xe8>
 8007904:	881e      	ldrh	r6, [r3, #0]
 8007906:	4854      	ldr	r0, [pc, #336]	; (8007a58 <_printf_i+0x244>)
 8007908:	2f6f      	cmp	r7, #111	; 0x6f
 800790a:	bf0c      	ite	eq
 800790c:	2308      	moveq	r3, #8
 800790e:	230a      	movne	r3, #10
 8007910:	2100      	movs	r1, #0
 8007912:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007916:	6865      	ldr	r5, [r4, #4]
 8007918:	60a5      	str	r5, [r4, #8]
 800791a:	2d00      	cmp	r5, #0
 800791c:	bfa2      	ittt	ge
 800791e:	6821      	ldrge	r1, [r4, #0]
 8007920:	f021 0104 	bicge.w	r1, r1, #4
 8007924:	6021      	strge	r1, [r4, #0]
 8007926:	b90e      	cbnz	r6, 800792c <_printf_i+0x118>
 8007928:	2d00      	cmp	r5, #0
 800792a:	d04d      	beq.n	80079c8 <_printf_i+0x1b4>
 800792c:	4615      	mov	r5, r2
 800792e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007932:	fb03 6711 	mls	r7, r3, r1, r6
 8007936:	5dc7      	ldrb	r7, [r0, r7]
 8007938:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800793c:	4637      	mov	r7, r6
 800793e:	42bb      	cmp	r3, r7
 8007940:	460e      	mov	r6, r1
 8007942:	d9f4      	bls.n	800792e <_printf_i+0x11a>
 8007944:	2b08      	cmp	r3, #8
 8007946:	d10b      	bne.n	8007960 <_printf_i+0x14c>
 8007948:	6823      	ldr	r3, [r4, #0]
 800794a:	07de      	lsls	r6, r3, #31
 800794c:	d508      	bpl.n	8007960 <_printf_i+0x14c>
 800794e:	6923      	ldr	r3, [r4, #16]
 8007950:	6861      	ldr	r1, [r4, #4]
 8007952:	4299      	cmp	r1, r3
 8007954:	bfde      	ittt	le
 8007956:	2330      	movle	r3, #48	; 0x30
 8007958:	f805 3c01 	strble.w	r3, [r5, #-1]
 800795c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007960:	1b52      	subs	r2, r2, r5
 8007962:	6122      	str	r2, [r4, #16]
 8007964:	f8cd a000 	str.w	sl, [sp]
 8007968:	464b      	mov	r3, r9
 800796a:	aa03      	add	r2, sp, #12
 800796c:	4621      	mov	r1, r4
 800796e:	4640      	mov	r0, r8
 8007970:	f7ff fee2 	bl	8007738 <_printf_common>
 8007974:	3001      	adds	r0, #1
 8007976:	d14c      	bne.n	8007a12 <_printf_i+0x1fe>
 8007978:	f04f 30ff 	mov.w	r0, #4294967295
 800797c:	b004      	add	sp, #16
 800797e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007982:	4835      	ldr	r0, [pc, #212]	; (8007a58 <_printf_i+0x244>)
 8007984:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007988:	6829      	ldr	r1, [r5, #0]
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007990:	6029      	str	r1, [r5, #0]
 8007992:	061d      	lsls	r5, r3, #24
 8007994:	d514      	bpl.n	80079c0 <_printf_i+0x1ac>
 8007996:	07df      	lsls	r7, r3, #31
 8007998:	bf44      	itt	mi
 800799a:	f043 0320 	orrmi.w	r3, r3, #32
 800799e:	6023      	strmi	r3, [r4, #0]
 80079a0:	b91e      	cbnz	r6, 80079aa <_printf_i+0x196>
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	f023 0320 	bic.w	r3, r3, #32
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	2310      	movs	r3, #16
 80079ac:	e7b0      	b.n	8007910 <_printf_i+0xfc>
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	f043 0320 	orr.w	r3, r3, #32
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	2378      	movs	r3, #120	; 0x78
 80079b8:	4828      	ldr	r0, [pc, #160]	; (8007a5c <_printf_i+0x248>)
 80079ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079be:	e7e3      	b.n	8007988 <_printf_i+0x174>
 80079c0:	0659      	lsls	r1, r3, #25
 80079c2:	bf48      	it	mi
 80079c4:	b2b6      	uxthmi	r6, r6
 80079c6:	e7e6      	b.n	8007996 <_printf_i+0x182>
 80079c8:	4615      	mov	r5, r2
 80079ca:	e7bb      	b.n	8007944 <_printf_i+0x130>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	6826      	ldr	r6, [r4, #0]
 80079d0:	6961      	ldr	r1, [r4, #20]
 80079d2:	1d18      	adds	r0, r3, #4
 80079d4:	6028      	str	r0, [r5, #0]
 80079d6:	0635      	lsls	r5, r6, #24
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	d501      	bpl.n	80079e0 <_printf_i+0x1cc>
 80079dc:	6019      	str	r1, [r3, #0]
 80079de:	e002      	b.n	80079e6 <_printf_i+0x1d2>
 80079e0:	0670      	lsls	r0, r6, #25
 80079e2:	d5fb      	bpl.n	80079dc <_printf_i+0x1c8>
 80079e4:	8019      	strh	r1, [r3, #0]
 80079e6:	2300      	movs	r3, #0
 80079e8:	6123      	str	r3, [r4, #16]
 80079ea:	4615      	mov	r5, r2
 80079ec:	e7ba      	b.n	8007964 <_printf_i+0x150>
 80079ee:	682b      	ldr	r3, [r5, #0]
 80079f0:	1d1a      	adds	r2, r3, #4
 80079f2:	602a      	str	r2, [r5, #0]
 80079f4:	681d      	ldr	r5, [r3, #0]
 80079f6:	6862      	ldr	r2, [r4, #4]
 80079f8:	2100      	movs	r1, #0
 80079fa:	4628      	mov	r0, r5
 80079fc:	f7f8 fc00 	bl	8000200 <memchr>
 8007a00:	b108      	cbz	r0, 8007a06 <_printf_i+0x1f2>
 8007a02:	1b40      	subs	r0, r0, r5
 8007a04:	6060      	str	r0, [r4, #4]
 8007a06:	6863      	ldr	r3, [r4, #4]
 8007a08:	6123      	str	r3, [r4, #16]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a10:	e7a8      	b.n	8007964 <_printf_i+0x150>
 8007a12:	6923      	ldr	r3, [r4, #16]
 8007a14:	462a      	mov	r2, r5
 8007a16:	4649      	mov	r1, r9
 8007a18:	4640      	mov	r0, r8
 8007a1a:	47d0      	blx	sl
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	d0ab      	beq.n	8007978 <_printf_i+0x164>
 8007a20:	6823      	ldr	r3, [r4, #0]
 8007a22:	079b      	lsls	r3, r3, #30
 8007a24:	d413      	bmi.n	8007a4e <_printf_i+0x23a>
 8007a26:	68e0      	ldr	r0, [r4, #12]
 8007a28:	9b03      	ldr	r3, [sp, #12]
 8007a2a:	4298      	cmp	r0, r3
 8007a2c:	bfb8      	it	lt
 8007a2e:	4618      	movlt	r0, r3
 8007a30:	e7a4      	b.n	800797c <_printf_i+0x168>
 8007a32:	2301      	movs	r3, #1
 8007a34:	4632      	mov	r2, r6
 8007a36:	4649      	mov	r1, r9
 8007a38:	4640      	mov	r0, r8
 8007a3a:	47d0      	blx	sl
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	d09b      	beq.n	8007978 <_printf_i+0x164>
 8007a40:	3501      	adds	r5, #1
 8007a42:	68e3      	ldr	r3, [r4, #12]
 8007a44:	9903      	ldr	r1, [sp, #12]
 8007a46:	1a5b      	subs	r3, r3, r1
 8007a48:	42ab      	cmp	r3, r5
 8007a4a:	dcf2      	bgt.n	8007a32 <_printf_i+0x21e>
 8007a4c:	e7eb      	b.n	8007a26 <_printf_i+0x212>
 8007a4e:	2500      	movs	r5, #0
 8007a50:	f104 0619 	add.w	r6, r4, #25
 8007a54:	e7f5      	b.n	8007a42 <_printf_i+0x22e>
 8007a56:	bf00      	nop
 8007a58:	0800a874 	.word	0x0800a874
 8007a5c:	0800a885 	.word	0x0800a885

08007a60 <iprintf>:
 8007a60:	b40f      	push	{r0, r1, r2, r3}
 8007a62:	4b0a      	ldr	r3, [pc, #40]	; (8007a8c <iprintf+0x2c>)
 8007a64:	b513      	push	{r0, r1, r4, lr}
 8007a66:	681c      	ldr	r4, [r3, #0]
 8007a68:	b124      	cbz	r4, 8007a74 <iprintf+0x14>
 8007a6a:	69a3      	ldr	r3, [r4, #24]
 8007a6c:	b913      	cbnz	r3, 8007a74 <iprintf+0x14>
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f001 f9fa 	bl	8008e68 <__sinit>
 8007a74:	ab05      	add	r3, sp, #20
 8007a76:	9a04      	ldr	r2, [sp, #16]
 8007a78:	68a1      	ldr	r1, [r4, #8]
 8007a7a:	9301      	str	r3, [sp, #4]
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f002 f99d 	bl	8009dbc <_vfiprintf_r>
 8007a82:	b002      	add	sp, #8
 8007a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a88:	b004      	add	sp, #16
 8007a8a:	4770      	bx	lr
 8007a8c:	200000ec 	.word	0x200000ec

08007a90 <_puts_r>:
 8007a90:	b570      	push	{r4, r5, r6, lr}
 8007a92:	460e      	mov	r6, r1
 8007a94:	4605      	mov	r5, r0
 8007a96:	b118      	cbz	r0, 8007aa0 <_puts_r+0x10>
 8007a98:	6983      	ldr	r3, [r0, #24]
 8007a9a:	b90b      	cbnz	r3, 8007aa0 <_puts_r+0x10>
 8007a9c:	f001 f9e4 	bl	8008e68 <__sinit>
 8007aa0:	69ab      	ldr	r3, [r5, #24]
 8007aa2:	68ac      	ldr	r4, [r5, #8]
 8007aa4:	b913      	cbnz	r3, 8007aac <_puts_r+0x1c>
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f001 f9de 	bl	8008e68 <__sinit>
 8007aac:	4b2c      	ldr	r3, [pc, #176]	; (8007b60 <_puts_r+0xd0>)
 8007aae:	429c      	cmp	r4, r3
 8007ab0:	d120      	bne.n	8007af4 <_puts_r+0x64>
 8007ab2:	686c      	ldr	r4, [r5, #4]
 8007ab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ab6:	07db      	lsls	r3, r3, #31
 8007ab8:	d405      	bmi.n	8007ac6 <_puts_r+0x36>
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	0598      	lsls	r0, r3, #22
 8007abe:	d402      	bmi.n	8007ac6 <_puts_r+0x36>
 8007ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ac2:	f001 fa74 	bl	8008fae <__retarget_lock_acquire_recursive>
 8007ac6:	89a3      	ldrh	r3, [r4, #12]
 8007ac8:	0719      	lsls	r1, r3, #28
 8007aca:	d51d      	bpl.n	8007b08 <_puts_r+0x78>
 8007acc:	6923      	ldr	r3, [r4, #16]
 8007ace:	b1db      	cbz	r3, 8007b08 <_puts_r+0x78>
 8007ad0:	3e01      	subs	r6, #1
 8007ad2:	68a3      	ldr	r3, [r4, #8]
 8007ad4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	60a3      	str	r3, [r4, #8]
 8007adc:	bb39      	cbnz	r1, 8007b2e <_puts_r+0x9e>
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	da38      	bge.n	8007b54 <_puts_r+0xc4>
 8007ae2:	4622      	mov	r2, r4
 8007ae4:	210a      	movs	r1, #10
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f000 f948 	bl	8007d7c <__swbuf_r>
 8007aec:	3001      	adds	r0, #1
 8007aee:	d011      	beq.n	8007b14 <_puts_r+0x84>
 8007af0:	250a      	movs	r5, #10
 8007af2:	e011      	b.n	8007b18 <_puts_r+0x88>
 8007af4:	4b1b      	ldr	r3, [pc, #108]	; (8007b64 <_puts_r+0xd4>)
 8007af6:	429c      	cmp	r4, r3
 8007af8:	d101      	bne.n	8007afe <_puts_r+0x6e>
 8007afa:	68ac      	ldr	r4, [r5, #8]
 8007afc:	e7da      	b.n	8007ab4 <_puts_r+0x24>
 8007afe:	4b1a      	ldr	r3, [pc, #104]	; (8007b68 <_puts_r+0xd8>)
 8007b00:	429c      	cmp	r4, r3
 8007b02:	bf08      	it	eq
 8007b04:	68ec      	ldreq	r4, [r5, #12]
 8007b06:	e7d5      	b.n	8007ab4 <_puts_r+0x24>
 8007b08:	4621      	mov	r1, r4
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	f000 f99a 	bl	8007e44 <__swsetup_r>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d0dd      	beq.n	8007ad0 <_puts_r+0x40>
 8007b14:	f04f 35ff 	mov.w	r5, #4294967295
 8007b18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b1a:	07da      	lsls	r2, r3, #31
 8007b1c:	d405      	bmi.n	8007b2a <_puts_r+0x9a>
 8007b1e:	89a3      	ldrh	r3, [r4, #12]
 8007b20:	059b      	lsls	r3, r3, #22
 8007b22:	d402      	bmi.n	8007b2a <_puts_r+0x9a>
 8007b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b26:	f001 fa43 	bl	8008fb0 <__retarget_lock_release_recursive>
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	bd70      	pop	{r4, r5, r6, pc}
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	da04      	bge.n	8007b3c <_puts_r+0xac>
 8007b32:	69a2      	ldr	r2, [r4, #24]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	dc06      	bgt.n	8007b46 <_puts_r+0xb6>
 8007b38:	290a      	cmp	r1, #10
 8007b3a:	d004      	beq.n	8007b46 <_puts_r+0xb6>
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	1c5a      	adds	r2, r3, #1
 8007b40:	6022      	str	r2, [r4, #0]
 8007b42:	7019      	strb	r1, [r3, #0]
 8007b44:	e7c5      	b.n	8007ad2 <_puts_r+0x42>
 8007b46:	4622      	mov	r2, r4
 8007b48:	4628      	mov	r0, r5
 8007b4a:	f000 f917 	bl	8007d7c <__swbuf_r>
 8007b4e:	3001      	adds	r0, #1
 8007b50:	d1bf      	bne.n	8007ad2 <_puts_r+0x42>
 8007b52:	e7df      	b.n	8007b14 <_puts_r+0x84>
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	250a      	movs	r5, #10
 8007b58:	1c5a      	adds	r2, r3, #1
 8007b5a:	6022      	str	r2, [r4, #0]
 8007b5c:	701d      	strb	r5, [r3, #0]
 8007b5e:	e7db      	b.n	8007b18 <_puts_r+0x88>
 8007b60:	0800aa48 	.word	0x0800aa48
 8007b64:	0800aa68 	.word	0x0800aa68
 8007b68:	0800aa28 	.word	0x0800aa28

08007b6c <puts>:
 8007b6c:	4b02      	ldr	r3, [pc, #8]	; (8007b78 <puts+0xc>)
 8007b6e:	4601      	mov	r1, r0
 8007b70:	6818      	ldr	r0, [r3, #0]
 8007b72:	f7ff bf8d 	b.w	8007a90 <_puts_r>
 8007b76:	bf00      	nop
 8007b78:	200000ec 	.word	0x200000ec

08007b7c <siscanf>:
 8007b7c:	b40e      	push	{r1, r2, r3}
 8007b7e:	b510      	push	{r4, lr}
 8007b80:	b09f      	sub	sp, #124	; 0x7c
 8007b82:	ac21      	add	r4, sp, #132	; 0x84
 8007b84:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007b88:	f854 2b04 	ldr.w	r2, [r4], #4
 8007b8c:	9201      	str	r2, [sp, #4]
 8007b8e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007b92:	9004      	str	r0, [sp, #16]
 8007b94:	9008      	str	r0, [sp, #32]
 8007b96:	f7f8 fb25 	bl	80001e4 <strlen>
 8007b9a:	4b0c      	ldr	r3, [pc, #48]	; (8007bcc <siscanf+0x50>)
 8007b9c:	9005      	str	r0, [sp, #20]
 8007b9e:	9009      	str	r0, [sp, #36]	; 0x24
 8007ba0:	930d      	str	r3, [sp, #52]	; 0x34
 8007ba2:	480b      	ldr	r0, [pc, #44]	; (8007bd0 <siscanf+0x54>)
 8007ba4:	9a01      	ldr	r2, [sp, #4]
 8007ba6:	6800      	ldr	r0, [r0, #0]
 8007ba8:	9403      	str	r4, [sp, #12]
 8007baa:	2300      	movs	r3, #0
 8007bac:	9311      	str	r3, [sp, #68]	; 0x44
 8007bae:	9316      	str	r3, [sp, #88]	; 0x58
 8007bb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007bb4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007bb8:	a904      	add	r1, sp, #16
 8007bba:	4623      	mov	r3, r4
 8007bbc:	f001 ff5c 	bl	8009a78 <__ssvfiscanf_r>
 8007bc0:	b01f      	add	sp, #124	; 0x7c
 8007bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bc6:	b003      	add	sp, #12
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	08007bf7 	.word	0x08007bf7
 8007bd0:	200000ec 	.word	0x200000ec

08007bd4 <__sread>:
 8007bd4:	b510      	push	{r4, lr}
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bdc:	f002 fb70 	bl	800a2c0 <_read_r>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	bfab      	itete	ge
 8007be4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007be6:	89a3      	ldrhlt	r3, [r4, #12]
 8007be8:	181b      	addge	r3, r3, r0
 8007bea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bee:	bfac      	ite	ge
 8007bf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bf2:	81a3      	strhlt	r3, [r4, #12]
 8007bf4:	bd10      	pop	{r4, pc}

08007bf6 <__seofread>:
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	4770      	bx	lr

08007bfa <__swrite>:
 8007bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfe:	461f      	mov	r7, r3
 8007c00:	898b      	ldrh	r3, [r1, #12]
 8007c02:	05db      	lsls	r3, r3, #23
 8007c04:	4605      	mov	r5, r0
 8007c06:	460c      	mov	r4, r1
 8007c08:	4616      	mov	r6, r2
 8007c0a:	d505      	bpl.n	8007c18 <__swrite+0x1e>
 8007c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c10:	2302      	movs	r3, #2
 8007c12:	2200      	movs	r2, #0
 8007c14:	f001 f9ce 	bl	8008fb4 <_lseek_r>
 8007c18:	89a3      	ldrh	r3, [r4, #12]
 8007c1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c22:	81a3      	strh	r3, [r4, #12]
 8007c24:	4632      	mov	r2, r6
 8007c26:	463b      	mov	r3, r7
 8007c28:	4628      	mov	r0, r5
 8007c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2e:	f000 b8f7 	b.w	8007e20 <_write_r>

08007c32 <__sseek>:
 8007c32:	b510      	push	{r4, lr}
 8007c34:	460c      	mov	r4, r1
 8007c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c3a:	f001 f9bb 	bl	8008fb4 <_lseek_r>
 8007c3e:	1c43      	adds	r3, r0, #1
 8007c40:	89a3      	ldrh	r3, [r4, #12]
 8007c42:	bf15      	itete	ne
 8007c44:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c4e:	81a3      	strheq	r3, [r4, #12]
 8007c50:	bf18      	it	ne
 8007c52:	81a3      	strhne	r3, [r4, #12]
 8007c54:	bd10      	pop	{r4, pc}

08007c56 <__sclose>:
 8007c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c5a:	f000 b961 	b.w	8007f20 <_close_r>
	...

08007c60 <_strtol_l.constprop.0>:
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c66:	d001      	beq.n	8007c6c <_strtol_l.constprop.0+0xc>
 8007c68:	2b24      	cmp	r3, #36	; 0x24
 8007c6a:	d906      	bls.n	8007c7a <_strtol_l.constprop.0+0x1a>
 8007c6c:	f7ff fa5c 	bl	8007128 <__errno>
 8007c70:	2316      	movs	r3, #22
 8007c72:	6003      	str	r3, [r0, #0]
 8007c74:	2000      	movs	r0, #0
 8007c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007d60 <_strtol_l.constprop.0+0x100>
 8007c7e:	460d      	mov	r5, r1
 8007c80:	462e      	mov	r6, r5
 8007c82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c86:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007c8a:	f017 0708 	ands.w	r7, r7, #8
 8007c8e:	d1f7      	bne.n	8007c80 <_strtol_l.constprop.0+0x20>
 8007c90:	2c2d      	cmp	r4, #45	; 0x2d
 8007c92:	d132      	bne.n	8007cfa <_strtol_l.constprop.0+0x9a>
 8007c94:	782c      	ldrb	r4, [r5, #0]
 8007c96:	2701      	movs	r7, #1
 8007c98:	1cb5      	adds	r5, r6, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d05b      	beq.n	8007d56 <_strtol_l.constprop.0+0xf6>
 8007c9e:	2b10      	cmp	r3, #16
 8007ca0:	d109      	bne.n	8007cb6 <_strtol_l.constprop.0+0x56>
 8007ca2:	2c30      	cmp	r4, #48	; 0x30
 8007ca4:	d107      	bne.n	8007cb6 <_strtol_l.constprop.0+0x56>
 8007ca6:	782c      	ldrb	r4, [r5, #0]
 8007ca8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007cac:	2c58      	cmp	r4, #88	; 0x58
 8007cae:	d14d      	bne.n	8007d4c <_strtol_l.constprop.0+0xec>
 8007cb0:	786c      	ldrb	r4, [r5, #1]
 8007cb2:	2310      	movs	r3, #16
 8007cb4:	3502      	adds	r5, #2
 8007cb6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007cba:	f108 38ff 	add.w	r8, r8, #4294967295
 8007cbe:	f04f 0c00 	mov.w	ip, #0
 8007cc2:	fbb8 f9f3 	udiv	r9, r8, r3
 8007cc6:	4666      	mov	r6, ip
 8007cc8:	fb03 8a19 	mls	sl, r3, r9, r8
 8007ccc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007cd0:	f1be 0f09 	cmp.w	lr, #9
 8007cd4:	d816      	bhi.n	8007d04 <_strtol_l.constprop.0+0xa4>
 8007cd6:	4674      	mov	r4, lr
 8007cd8:	42a3      	cmp	r3, r4
 8007cda:	dd24      	ble.n	8007d26 <_strtol_l.constprop.0+0xc6>
 8007cdc:	f1bc 0f00 	cmp.w	ip, #0
 8007ce0:	db1e      	blt.n	8007d20 <_strtol_l.constprop.0+0xc0>
 8007ce2:	45b1      	cmp	r9, r6
 8007ce4:	d31c      	bcc.n	8007d20 <_strtol_l.constprop.0+0xc0>
 8007ce6:	d101      	bne.n	8007cec <_strtol_l.constprop.0+0x8c>
 8007ce8:	45a2      	cmp	sl, r4
 8007cea:	db19      	blt.n	8007d20 <_strtol_l.constprop.0+0xc0>
 8007cec:	fb06 4603 	mla	r6, r6, r3, r4
 8007cf0:	f04f 0c01 	mov.w	ip, #1
 8007cf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cf8:	e7e8      	b.n	8007ccc <_strtol_l.constprop.0+0x6c>
 8007cfa:	2c2b      	cmp	r4, #43	; 0x2b
 8007cfc:	bf04      	itt	eq
 8007cfe:	782c      	ldrbeq	r4, [r5, #0]
 8007d00:	1cb5      	addeq	r5, r6, #2
 8007d02:	e7ca      	b.n	8007c9a <_strtol_l.constprop.0+0x3a>
 8007d04:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007d08:	f1be 0f19 	cmp.w	lr, #25
 8007d0c:	d801      	bhi.n	8007d12 <_strtol_l.constprop.0+0xb2>
 8007d0e:	3c37      	subs	r4, #55	; 0x37
 8007d10:	e7e2      	b.n	8007cd8 <_strtol_l.constprop.0+0x78>
 8007d12:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007d16:	f1be 0f19 	cmp.w	lr, #25
 8007d1a:	d804      	bhi.n	8007d26 <_strtol_l.constprop.0+0xc6>
 8007d1c:	3c57      	subs	r4, #87	; 0x57
 8007d1e:	e7db      	b.n	8007cd8 <_strtol_l.constprop.0+0x78>
 8007d20:	f04f 3cff 	mov.w	ip, #4294967295
 8007d24:	e7e6      	b.n	8007cf4 <_strtol_l.constprop.0+0x94>
 8007d26:	f1bc 0f00 	cmp.w	ip, #0
 8007d2a:	da05      	bge.n	8007d38 <_strtol_l.constprop.0+0xd8>
 8007d2c:	2322      	movs	r3, #34	; 0x22
 8007d2e:	6003      	str	r3, [r0, #0]
 8007d30:	4646      	mov	r6, r8
 8007d32:	b942      	cbnz	r2, 8007d46 <_strtol_l.constprop.0+0xe6>
 8007d34:	4630      	mov	r0, r6
 8007d36:	e79e      	b.n	8007c76 <_strtol_l.constprop.0+0x16>
 8007d38:	b107      	cbz	r7, 8007d3c <_strtol_l.constprop.0+0xdc>
 8007d3a:	4276      	negs	r6, r6
 8007d3c:	2a00      	cmp	r2, #0
 8007d3e:	d0f9      	beq.n	8007d34 <_strtol_l.constprop.0+0xd4>
 8007d40:	f1bc 0f00 	cmp.w	ip, #0
 8007d44:	d000      	beq.n	8007d48 <_strtol_l.constprop.0+0xe8>
 8007d46:	1e69      	subs	r1, r5, #1
 8007d48:	6011      	str	r1, [r2, #0]
 8007d4a:	e7f3      	b.n	8007d34 <_strtol_l.constprop.0+0xd4>
 8007d4c:	2430      	movs	r4, #48	; 0x30
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1b1      	bne.n	8007cb6 <_strtol_l.constprop.0+0x56>
 8007d52:	2308      	movs	r3, #8
 8007d54:	e7af      	b.n	8007cb6 <_strtol_l.constprop.0+0x56>
 8007d56:	2c30      	cmp	r4, #48	; 0x30
 8007d58:	d0a5      	beq.n	8007ca6 <_strtol_l.constprop.0+0x46>
 8007d5a:	230a      	movs	r3, #10
 8007d5c:	e7ab      	b.n	8007cb6 <_strtol_l.constprop.0+0x56>
 8007d5e:	bf00      	nop
 8007d60:	0800a897 	.word	0x0800a897

08007d64 <_strtol_r>:
 8007d64:	f7ff bf7c 	b.w	8007c60 <_strtol_l.constprop.0>

08007d68 <strtol>:
 8007d68:	4613      	mov	r3, r2
 8007d6a:	460a      	mov	r2, r1
 8007d6c:	4601      	mov	r1, r0
 8007d6e:	4802      	ldr	r0, [pc, #8]	; (8007d78 <strtol+0x10>)
 8007d70:	6800      	ldr	r0, [r0, #0]
 8007d72:	f7ff bf75 	b.w	8007c60 <_strtol_l.constprop.0>
 8007d76:	bf00      	nop
 8007d78:	200000ec 	.word	0x200000ec

08007d7c <__swbuf_r>:
 8007d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7e:	460e      	mov	r6, r1
 8007d80:	4614      	mov	r4, r2
 8007d82:	4605      	mov	r5, r0
 8007d84:	b118      	cbz	r0, 8007d8e <__swbuf_r+0x12>
 8007d86:	6983      	ldr	r3, [r0, #24]
 8007d88:	b90b      	cbnz	r3, 8007d8e <__swbuf_r+0x12>
 8007d8a:	f001 f86d 	bl	8008e68 <__sinit>
 8007d8e:	4b21      	ldr	r3, [pc, #132]	; (8007e14 <__swbuf_r+0x98>)
 8007d90:	429c      	cmp	r4, r3
 8007d92:	d12b      	bne.n	8007dec <__swbuf_r+0x70>
 8007d94:	686c      	ldr	r4, [r5, #4]
 8007d96:	69a3      	ldr	r3, [r4, #24]
 8007d98:	60a3      	str	r3, [r4, #8]
 8007d9a:	89a3      	ldrh	r3, [r4, #12]
 8007d9c:	071a      	lsls	r2, r3, #28
 8007d9e:	d52f      	bpl.n	8007e00 <__swbuf_r+0x84>
 8007da0:	6923      	ldr	r3, [r4, #16]
 8007da2:	b36b      	cbz	r3, 8007e00 <__swbuf_r+0x84>
 8007da4:	6923      	ldr	r3, [r4, #16]
 8007da6:	6820      	ldr	r0, [r4, #0]
 8007da8:	1ac0      	subs	r0, r0, r3
 8007daa:	6963      	ldr	r3, [r4, #20]
 8007dac:	b2f6      	uxtb	r6, r6
 8007dae:	4283      	cmp	r3, r0
 8007db0:	4637      	mov	r7, r6
 8007db2:	dc04      	bgt.n	8007dbe <__swbuf_r+0x42>
 8007db4:	4621      	mov	r1, r4
 8007db6:	4628      	mov	r0, r5
 8007db8:	f000 ffc2 	bl	8008d40 <_fflush_r>
 8007dbc:	bb30      	cbnz	r0, 8007e0c <__swbuf_r+0x90>
 8007dbe:	68a3      	ldr	r3, [r4, #8]
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	60a3      	str	r3, [r4, #8]
 8007dc4:	6823      	ldr	r3, [r4, #0]
 8007dc6:	1c5a      	adds	r2, r3, #1
 8007dc8:	6022      	str	r2, [r4, #0]
 8007dca:	701e      	strb	r6, [r3, #0]
 8007dcc:	6963      	ldr	r3, [r4, #20]
 8007dce:	3001      	adds	r0, #1
 8007dd0:	4283      	cmp	r3, r0
 8007dd2:	d004      	beq.n	8007dde <__swbuf_r+0x62>
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	07db      	lsls	r3, r3, #31
 8007dd8:	d506      	bpl.n	8007de8 <__swbuf_r+0x6c>
 8007dda:	2e0a      	cmp	r6, #10
 8007ddc:	d104      	bne.n	8007de8 <__swbuf_r+0x6c>
 8007dde:	4621      	mov	r1, r4
 8007de0:	4628      	mov	r0, r5
 8007de2:	f000 ffad 	bl	8008d40 <_fflush_r>
 8007de6:	b988      	cbnz	r0, 8007e0c <__swbuf_r+0x90>
 8007de8:	4638      	mov	r0, r7
 8007dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dec:	4b0a      	ldr	r3, [pc, #40]	; (8007e18 <__swbuf_r+0x9c>)
 8007dee:	429c      	cmp	r4, r3
 8007df0:	d101      	bne.n	8007df6 <__swbuf_r+0x7a>
 8007df2:	68ac      	ldr	r4, [r5, #8]
 8007df4:	e7cf      	b.n	8007d96 <__swbuf_r+0x1a>
 8007df6:	4b09      	ldr	r3, [pc, #36]	; (8007e1c <__swbuf_r+0xa0>)
 8007df8:	429c      	cmp	r4, r3
 8007dfa:	bf08      	it	eq
 8007dfc:	68ec      	ldreq	r4, [r5, #12]
 8007dfe:	e7ca      	b.n	8007d96 <__swbuf_r+0x1a>
 8007e00:	4621      	mov	r1, r4
 8007e02:	4628      	mov	r0, r5
 8007e04:	f000 f81e 	bl	8007e44 <__swsetup_r>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	d0cb      	beq.n	8007da4 <__swbuf_r+0x28>
 8007e0c:	f04f 37ff 	mov.w	r7, #4294967295
 8007e10:	e7ea      	b.n	8007de8 <__swbuf_r+0x6c>
 8007e12:	bf00      	nop
 8007e14:	0800aa48 	.word	0x0800aa48
 8007e18:	0800aa68 	.word	0x0800aa68
 8007e1c:	0800aa28 	.word	0x0800aa28

08007e20 <_write_r>:
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	4d07      	ldr	r5, [pc, #28]	; (8007e40 <_write_r+0x20>)
 8007e24:	4604      	mov	r4, r0
 8007e26:	4608      	mov	r0, r1
 8007e28:	4611      	mov	r1, r2
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	602a      	str	r2, [r5, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	f7f9 fe82 	bl	8001b38 <_write>
 8007e34:	1c43      	adds	r3, r0, #1
 8007e36:	d102      	bne.n	8007e3e <_write_r+0x1e>
 8007e38:	682b      	ldr	r3, [r5, #0]
 8007e3a:	b103      	cbz	r3, 8007e3e <_write_r+0x1e>
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	bd38      	pop	{r3, r4, r5, pc}
 8007e40:	200007b4 	.word	0x200007b4

08007e44 <__swsetup_r>:
 8007e44:	4b32      	ldr	r3, [pc, #200]	; (8007f10 <__swsetup_r+0xcc>)
 8007e46:	b570      	push	{r4, r5, r6, lr}
 8007e48:	681d      	ldr	r5, [r3, #0]
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	b125      	cbz	r5, 8007e5a <__swsetup_r+0x16>
 8007e50:	69ab      	ldr	r3, [r5, #24]
 8007e52:	b913      	cbnz	r3, 8007e5a <__swsetup_r+0x16>
 8007e54:	4628      	mov	r0, r5
 8007e56:	f001 f807 	bl	8008e68 <__sinit>
 8007e5a:	4b2e      	ldr	r3, [pc, #184]	; (8007f14 <__swsetup_r+0xd0>)
 8007e5c:	429c      	cmp	r4, r3
 8007e5e:	d10f      	bne.n	8007e80 <__swsetup_r+0x3c>
 8007e60:	686c      	ldr	r4, [r5, #4]
 8007e62:	89a3      	ldrh	r3, [r4, #12]
 8007e64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e68:	0719      	lsls	r1, r3, #28
 8007e6a:	d42c      	bmi.n	8007ec6 <__swsetup_r+0x82>
 8007e6c:	06dd      	lsls	r5, r3, #27
 8007e6e:	d411      	bmi.n	8007e94 <__swsetup_r+0x50>
 8007e70:	2309      	movs	r3, #9
 8007e72:	6033      	str	r3, [r6, #0]
 8007e74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e78:	81a3      	strh	r3, [r4, #12]
 8007e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e7e:	e03e      	b.n	8007efe <__swsetup_r+0xba>
 8007e80:	4b25      	ldr	r3, [pc, #148]	; (8007f18 <__swsetup_r+0xd4>)
 8007e82:	429c      	cmp	r4, r3
 8007e84:	d101      	bne.n	8007e8a <__swsetup_r+0x46>
 8007e86:	68ac      	ldr	r4, [r5, #8]
 8007e88:	e7eb      	b.n	8007e62 <__swsetup_r+0x1e>
 8007e8a:	4b24      	ldr	r3, [pc, #144]	; (8007f1c <__swsetup_r+0xd8>)
 8007e8c:	429c      	cmp	r4, r3
 8007e8e:	bf08      	it	eq
 8007e90:	68ec      	ldreq	r4, [r5, #12]
 8007e92:	e7e6      	b.n	8007e62 <__swsetup_r+0x1e>
 8007e94:	0758      	lsls	r0, r3, #29
 8007e96:	d512      	bpl.n	8007ebe <__swsetup_r+0x7a>
 8007e98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e9a:	b141      	cbz	r1, 8007eae <__swsetup_r+0x6a>
 8007e9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ea0:	4299      	cmp	r1, r3
 8007ea2:	d002      	beq.n	8007eaa <__swsetup_r+0x66>
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f001 fcad 	bl	8009804 <_free_r>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	6363      	str	r3, [r4, #52]	; 0x34
 8007eae:	89a3      	ldrh	r3, [r4, #12]
 8007eb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007eb4:	81a3      	strh	r3, [r4, #12]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	6063      	str	r3, [r4, #4]
 8007eba:	6923      	ldr	r3, [r4, #16]
 8007ebc:	6023      	str	r3, [r4, #0]
 8007ebe:	89a3      	ldrh	r3, [r4, #12]
 8007ec0:	f043 0308 	orr.w	r3, r3, #8
 8007ec4:	81a3      	strh	r3, [r4, #12]
 8007ec6:	6923      	ldr	r3, [r4, #16]
 8007ec8:	b94b      	cbnz	r3, 8007ede <__swsetup_r+0x9a>
 8007eca:	89a3      	ldrh	r3, [r4, #12]
 8007ecc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ed4:	d003      	beq.n	8007ede <__swsetup_r+0x9a>
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f001 f8a3 	bl	8009024 <__smakebuf_r>
 8007ede:	89a0      	ldrh	r0, [r4, #12]
 8007ee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ee4:	f010 0301 	ands.w	r3, r0, #1
 8007ee8:	d00a      	beq.n	8007f00 <__swsetup_r+0xbc>
 8007eea:	2300      	movs	r3, #0
 8007eec:	60a3      	str	r3, [r4, #8]
 8007eee:	6963      	ldr	r3, [r4, #20]
 8007ef0:	425b      	negs	r3, r3
 8007ef2:	61a3      	str	r3, [r4, #24]
 8007ef4:	6923      	ldr	r3, [r4, #16]
 8007ef6:	b943      	cbnz	r3, 8007f0a <__swsetup_r+0xc6>
 8007ef8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007efc:	d1ba      	bne.n	8007e74 <__swsetup_r+0x30>
 8007efe:	bd70      	pop	{r4, r5, r6, pc}
 8007f00:	0781      	lsls	r1, r0, #30
 8007f02:	bf58      	it	pl
 8007f04:	6963      	ldrpl	r3, [r4, #20]
 8007f06:	60a3      	str	r3, [r4, #8]
 8007f08:	e7f4      	b.n	8007ef4 <__swsetup_r+0xb0>
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	e7f7      	b.n	8007efe <__swsetup_r+0xba>
 8007f0e:	bf00      	nop
 8007f10:	200000ec 	.word	0x200000ec
 8007f14:	0800aa48 	.word	0x0800aa48
 8007f18:	0800aa68 	.word	0x0800aa68
 8007f1c:	0800aa28 	.word	0x0800aa28

08007f20 <_close_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4d06      	ldr	r5, [pc, #24]	; (8007f3c <_close_r+0x1c>)
 8007f24:	2300      	movs	r3, #0
 8007f26:	4604      	mov	r4, r0
 8007f28:	4608      	mov	r0, r1
 8007f2a:	602b      	str	r3, [r5, #0]
 8007f2c:	f7fa fb09 	bl	8002542 <_close>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d102      	bne.n	8007f3a <_close_r+0x1a>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	b103      	cbz	r3, 8007f3a <_close_r+0x1a>
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	200007b4 	.word	0x200007b4

08007f40 <quorem>:
 8007f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f44:	6903      	ldr	r3, [r0, #16]
 8007f46:	690c      	ldr	r4, [r1, #16]
 8007f48:	42a3      	cmp	r3, r4
 8007f4a:	4607      	mov	r7, r0
 8007f4c:	f2c0 8081 	blt.w	8008052 <quorem+0x112>
 8007f50:	3c01      	subs	r4, #1
 8007f52:	f101 0814 	add.w	r8, r1, #20
 8007f56:	f100 0514 	add.w	r5, r0, #20
 8007f5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f74:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f78:	d331      	bcc.n	8007fde <quorem+0x9e>
 8007f7a:	f04f 0e00 	mov.w	lr, #0
 8007f7e:	4640      	mov	r0, r8
 8007f80:	46ac      	mov	ip, r5
 8007f82:	46f2      	mov	sl, lr
 8007f84:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f88:	b293      	uxth	r3, r2
 8007f8a:	fb06 e303 	mla	r3, r6, r3, lr
 8007f8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	ebaa 0303 	sub.w	r3, sl, r3
 8007f98:	f8dc a000 	ldr.w	sl, [ip]
 8007f9c:	0c12      	lsrs	r2, r2, #16
 8007f9e:	fa13 f38a 	uxtah	r3, r3, sl
 8007fa2:	fb06 e202 	mla	r2, r6, r2, lr
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	9b00      	ldr	r3, [sp, #0]
 8007faa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007fae:	b292      	uxth	r2, r2
 8007fb0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007fb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fb8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007fbc:	4581      	cmp	r9, r0
 8007fbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fc2:	f84c 3b04 	str.w	r3, [ip], #4
 8007fc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007fca:	d2db      	bcs.n	8007f84 <quorem+0x44>
 8007fcc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007fd0:	b92b      	cbnz	r3, 8007fde <quorem+0x9e>
 8007fd2:	9b01      	ldr	r3, [sp, #4]
 8007fd4:	3b04      	subs	r3, #4
 8007fd6:	429d      	cmp	r5, r3
 8007fd8:	461a      	mov	r2, r3
 8007fda:	d32e      	bcc.n	800803a <quorem+0xfa>
 8007fdc:	613c      	str	r4, [r7, #16]
 8007fde:	4638      	mov	r0, r7
 8007fe0:	f001 faf8 	bl	80095d4 <__mcmp>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	db24      	blt.n	8008032 <quorem+0xf2>
 8007fe8:	3601      	adds	r6, #1
 8007fea:	4628      	mov	r0, r5
 8007fec:	f04f 0c00 	mov.w	ip, #0
 8007ff0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ff4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ff8:	b293      	uxth	r3, r2
 8007ffa:	ebac 0303 	sub.w	r3, ip, r3
 8007ffe:	0c12      	lsrs	r2, r2, #16
 8008000:	fa13 f38e 	uxtah	r3, r3, lr
 8008004:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008008:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800800c:	b29b      	uxth	r3, r3
 800800e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008012:	45c1      	cmp	r9, r8
 8008014:	f840 3b04 	str.w	r3, [r0], #4
 8008018:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800801c:	d2e8      	bcs.n	8007ff0 <quorem+0xb0>
 800801e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008022:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008026:	b922      	cbnz	r2, 8008032 <quorem+0xf2>
 8008028:	3b04      	subs	r3, #4
 800802a:	429d      	cmp	r5, r3
 800802c:	461a      	mov	r2, r3
 800802e:	d30a      	bcc.n	8008046 <quorem+0x106>
 8008030:	613c      	str	r4, [r7, #16]
 8008032:	4630      	mov	r0, r6
 8008034:	b003      	add	sp, #12
 8008036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803a:	6812      	ldr	r2, [r2, #0]
 800803c:	3b04      	subs	r3, #4
 800803e:	2a00      	cmp	r2, #0
 8008040:	d1cc      	bne.n	8007fdc <quorem+0x9c>
 8008042:	3c01      	subs	r4, #1
 8008044:	e7c7      	b.n	8007fd6 <quorem+0x96>
 8008046:	6812      	ldr	r2, [r2, #0]
 8008048:	3b04      	subs	r3, #4
 800804a:	2a00      	cmp	r2, #0
 800804c:	d1f0      	bne.n	8008030 <quorem+0xf0>
 800804e:	3c01      	subs	r4, #1
 8008050:	e7eb      	b.n	800802a <quorem+0xea>
 8008052:	2000      	movs	r0, #0
 8008054:	e7ee      	b.n	8008034 <quorem+0xf4>
	...

08008058 <_dtoa_r>:
 8008058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805c:	ed2d 8b04 	vpush	{d8-d9}
 8008060:	ec57 6b10 	vmov	r6, r7, d0
 8008064:	b093      	sub	sp, #76	; 0x4c
 8008066:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008068:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800806c:	9106      	str	r1, [sp, #24]
 800806e:	ee10 aa10 	vmov	sl, s0
 8008072:	4604      	mov	r4, r0
 8008074:	9209      	str	r2, [sp, #36]	; 0x24
 8008076:	930c      	str	r3, [sp, #48]	; 0x30
 8008078:	46bb      	mov	fp, r7
 800807a:	b975      	cbnz	r5, 800809a <_dtoa_r+0x42>
 800807c:	2010      	movs	r0, #16
 800807e:	f001 f811 	bl	80090a4 <malloc>
 8008082:	4602      	mov	r2, r0
 8008084:	6260      	str	r0, [r4, #36]	; 0x24
 8008086:	b920      	cbnz	r0, 8008092 <_dtoa_r+0x3a>
 8008088:	4ba7      	ldr	r3, [pc, #668]	; (8008328 <_dtoa_r+0x2d0>)
 800808a:	21ea      	movs	r1, #234	; 0xea
 800808c:	48a7      	ldr	r0, [pc, #668]	; (800832c <_dtoa_r+0x2d4>)
 800808e:	f002 fa1f 	bl	800a4d0 <__assert_func>
 8008092:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008096:	6005      	str	r5, [r0, #0]
 8008098:	60c5      	str	r5, [r0, #12]
 800809a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800809c:	6819      	ldr	r1, [r3, #0]
 800809e:	b151      	cbz	r1, 80080b6 <_dtoa_r+0x5e>
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	604a      	str	r2, [r1, #4]
 80080a4:	2301      	movs	r3, #1
 80080a6:	4093      	lsls	r3, r2
 80080a8:	608b      	str	r3, [r1, #8]
 80080aa:	4620      	mov	r0, r4
 80080ac:	f001 f850 	bl	8009150 <_Bfree>
 80080b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080b2:	2200      	movs	r2, #0
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	1e3b      	subs	r3, r7, #0
 80080b8:	bfaa      	itet	ge
 80080ba:	2300      	movge	r3, #0
 80080bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80080c0:	f8c8 3000 	strge.w	r3, [r8]
 80080c4:	4b9a      	ldr	r3, [pc, #616]	; (8008330 <_dtoa_r+0x2d8>)
 80080c6:	bfbc      	itt	lt
 80080c8:	2201      	movlt	r2, #1
 80080ca:	f8c8 2000 	strlt.w	r2, [r8]
 80080ce:	ea33 030b 	bics.w	r3, r3, fp
 80080d2:	d11b      	bne.n	800810c <_dtoa_r+0xb4>
 80080d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80080da:	6013      	str	r3, [r2, #0]
 80080dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080e0:	4333      	orrs	r3, r6
 80080e2:	f000 8592 	beq.w	8008c0a <_dtoa_r+0xbb2>
 80080e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080e8:	b963      	cbnz	r3, 8008104 <_dtoa_r+0xac>
 80080ea:	4b92      	ldr	r3, [pc, #584]	; (8008334 <_dtoa_r+0x2dc>)
 80080ec:	e022      	b.n	8008134 <_dtoa_r+0xdc>
 80080ee:	4b92      	ldr	r3, [pc, #584]	; (8008338 <_dtoa_r+0x2e0>)
 80080f0:	9301      	str	r3, [sp, #4]
 80080f2:	3308      	adds	r3, #8
 80080f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80080f6:	6013      	str	r3, [r2, #0]
 80080f8:	9801      	ldr	r0, [sp, #4]
 80080fa:	b013      	add	sp, #76	; 0x4c
 80080fc:	ecbd 8b04 	vpop	{d8-d9}
 8008100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008104:	4b8b      	ldr	r3, [pc, #556]	; (8008334 <_dtoa_r+0x2dc>)
 8008106:	9301      	str	r3, [sp, #4]
 8008108:	3303      	adds	r3, #3
 800810a:	e7f3      	b.n	80080f4 <_dtoa_r+0x9c>
 800810c:	2200      	movs	r2, #0
 800810e:	2300      	movs	r3, #0
 8008110:	4650      	mov	r0, sl
 8008112:	4659      	mov	r1, fp
 8008114:	f7f8 fce8 	bl	8000ae8 <__aeabi_dcmpeq>
 8008118:	ec4b ab19 	vmov	d9, sl, fp
 800811c:	4680      	mov	r8, r0
 800811e:	b158      	cbz	r0, 8008138 <_dtoa_r+0xe0>
 8008120:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008122:	2301      	movs	r3, #1
 8008124:	6013      	str	r3, [r2, #0]
 8008126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 856b 	beq.w	8008c04 <_dtoa_r+0xbac>
 800812e:	4883      	ldr	r0, [pc, #524]	; (800833c <_dtoa_r+0x2e4>)
 8008130:	6018      	str	r0, [r3, #0]
 8008132:	1e43      	subs	r3, r0, #1
 8008134:	9301      	str	r3, [sp, #4]
 8008136:	e7df      	b.n	80080f8 <_dtoa_r+0xa0>
 8008138:	ec4b ab10 	vmov	d0, sl, fp
 800813c:	aa10      	add	r2, sp, #64	; 0x40
 800813e:	a911      	add	r1, sp, #68	; 0x44
 8008140:	4620      	mov	r0, r4
 8008142:	f001 faed 	bl	8009720 <__d2b>
 8008146:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800814a:	ee08 0a10 	vmov	s16, r0
 800814e:	2d00      	cmp	r5, #0
 8008150:	f000 8084 	beq.w	800825c <_dtoa_r+0x204>
 8008154:	ee19 3a90 	vmov	r3, s19
 8008158:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800815c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008160:	4656      	mov	r6, sl
 8008162:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008166:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800816a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800816e:	4b74      	ldr	r3, [pc, #464]	; (8008340 <_dtoa_r+0x2e8>)
 8008170:	2200      	movs	r2, #0
 8008172:	4630      	mov	r0, r6
 8008174:	4639      	mov	r1, r7
 8008176:	f7f8 f897 	bl	80002a8 <__aeabi_dsub>
 800817a:	a365      	add	r3, pc, #404	; (adr r3, 8008310 <_dtoa_r+0x2b8>)
 800817c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008180:	f7f8 fa4a 	bl	8000618 <__aeabi_dmul>
 8008184:	a364      	add	r3, pc, #400	; (adr r3, 8008318 <_dtoa_r+0x2c0>)
 8008186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818a:	f7f8 f88f 	bl	80002ac <__adddf3>
 800818e:	4606      	mov	r6, r0
 8008190:	4628      	mov	r0, r5
 8008192:	460f      	mov	r7, r1
 8008194:	f7f8 f9d6 	bl	8000544 <__aeabi_i2d>
 8008198:	a361      	add	r3, pc, #388	; (adr r3, 8008320 <_dtoa_r+0x2c8>)
 800819a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819e:	f7f8 fa3b 	bl	8000618 <__aeabi_dmul>
 80081a2:	4602      	mov	r2, r0
 80081a4:	460b      	mov	r3, r1
 80081a6:	4630      	mov	r0, r6
 80081a8:	4639      	mov	r1, r7
 80081aa:	f7f8 f87f 	bl	80002ac <__adddf3>
 80081ae:	4606      	mov	r6, r0
 80081b0:	460f      	mov	r7, r1
 80081b2:	f7f8 fce1 	bl	8000b78 <__aeabi_d2iz>
 80081b6:	2200      	movs	r2, #0
 80081b8:	9000      	str	r0, [sp, #0]
 80081ba:	2300      	movs	r3, #0
 80081bc:	4630      	mov	r0, r6
 80081be:	4639      	mov	r1, r7
 80081c0:	f7f8 fc9c 	bl	8000afc <__aeabi_dcmplt>
 80081c4:	b150      	cbz	r0, 80081dc <_dtoa_r+0x184>
 80081c6:	9800      	ldr	r0, [sp, #0]
 80081c8:	f7f8 f9bc 	bl	8000544 <__aeabi_i2d>
 80081cc:	4632      	mov	r2, r6
 80081ce:	463b      	mov	r3, r7
 80081d0:	f7f8 fc8a 	bl	8000ae8 <__aeabi_dcmpeq>
 80081d4:	b910      	cbnz	r0, 80081dc <_dtoa_r+0x184>
 80081d6:	9b00      	ldr	r3, [sp, #0]
 80081d8:	3b01      	subs	r3, #1
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	9b00      	ldr	r3, [sp, #0]
 80081de:	2b16      	cmp	r3, #22
 80081e0:	d85a      	bhi.n	8008298 <_dtoa_r+0x240>
 80081e2:	9a00      	ldr	r2, [sp, #0]
 80081e4:	4b57      	ldr	r3, [pc, #348]	; (8008344 <_dtoa_r+0x2ec>)
 80081e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ee:	ec51 0b19 	vmov	r0, r1, d9
 80081f2:	f7f8 fc83 	bl	8000afc <__aeabi_dcmplt>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d050      	beq.n	800829c <_dtoa_r+0x244>
 80081fa:	9b00      	ldr	r3, [sp, #0]
 80081fc:	3b01      	subs	r3, #1
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	2300      	movs	r3, #0
 8008202:	930b      	str	r3, [sp, #44]	; 0x2c
 8008204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008206:	1b5d      	subs	r5, r3, r5
 8008208:	1e6b      	subs	r3, r5, #1
 800820a:	9305      	str	r3, [sp, #20]
 800820c:	bf45      	ittet	mi
 800820e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008212:	9304      	strmi	r3, [sp, #16]
 8008214:	2300      	movpl	r3, #0
 8008216:	2300      	movmi	r3, #0
 8008218:	bf4c      	ite	mi
 800821a:	9305      	strmi	r3, [sp, #20]
 800821c:	9304      	strpl	r3, [sp, #16]
 800821e:	9b00      	ldr	r3, [sp, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	db3d      	blt.n	80082a0 <_dtoa_r+0x248>
 8008224:	9b05      	ldr	r3, [sp, #20]
 8008226:	9a00      	ldr	r2, [sp, #0]
 8008228:	920a      	str	r2, [sp, #40]	; 0x28
 800822a:	4413      	add	r3, r2
 800822c:	9305      	str	r3, [sp, #20]
 800822e:	2300      	movs	r3, #0
 8008230:	9307      	str	r3, [sp, #28]
 8008232:	9b06      	ldr	r3, [sp, #24]
 8008234:	2b09      	cmp	r3, #9
 8008236:	f200 8089 	bhi.w	800834c <_dtoa_r+0x2f4>
 800823a:	2b05      	cmp	r3, #5
 800823c:	bfc4      	itt	gt
 800823e:	3b04      	subgt	r3, #4
 8008240:	9306      	strgt	r3, [sp, #24]
 8008242:	9b06      	ldr	r3, [sp, #24]
 8008244:	f1a3 0302 	sub.w	r3, r3, #2
 8008248:	bfcc      	ite	gt
 800824a:	2500      	movgt	r5, #0
 800824c:	2501      	movle	r5, #1
 800824e:	2b03      	cmp	r3, #3
 8008250:	f200 8087 	bhi.w	8008362 <_dtoa_r+0x30a>
 8008254:	e8df f003 	tbb	[pc, r3]
 8008258:	59383a2d 	.word	0x59383a2d
 800825c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008260:	441d      	add	r5, r3
 8008262:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008266:	2b20      	cmp	r3, #32
 8008268:	bfc1      	itttt	gt
 800826a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800826e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008272:	fa0b f303 	lslgt.w	r3, fp, r3
 8008276:	fa26 f000 	lsrgt.w	r0, r6, r0
 800827a:	bfda      	itte	le
 800827c:	f1c3 0320 	rsble	r3, r3, #32
 8008280:	fa06 f003 	lslle.w	r0, r6, r3
 8008284:	4318      	orrgt	r0, r3
 8008286:	f7f8 f94d 	bl	8000524 <__aeabi_ui2d>
 800828a:	2301      	movs	r3, #1
 800828c:	4606      	mov	r6, r0
 800828e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008292:	3d01      	subs	r5, #1
 8008294:	930e      	str	r3, [sp, #56]	; 0x38
 8008296:	e76a      	b.n	800816e <_dtoa_r+0x116>
 8008298:	2301      	movs	r3, #1
 800829a:	e7b2      	b.n	8008202 <_dtoa_r+0x1aa>
 800829c:	900b      	str	r0, [sp, #44]	; 0x2c
 800829e:	e7b1      	b.n	8008204 <_dtoa_r+0x1ac>
 80082a0:	9b04      	ldr	r3, [sp, #16]
 80082a2:	9a00      	ldr	r2, [sp, #0]
 80082a4:	1a9b      	subs	r3, r3, r2
 80082a6:	9304      	str	r3, [sp, #16]
 80082a8:	4253      	negs	r3, r2
 80082aa:	9307      	str	r3, [sp, #28]
 80082ac:	2300      	movs	r3, #0
 80082ae:	930a      	str	r3, [sp, #40]	; 0x28
 80082b0:	e7bf      	b.n	8008232 <_dtoa_r+0x1da>
 80082b2:	2300      	movs	r3, #0
 80082b4:	9308      	str	r3, [sp, #32]
 80082b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	dc55      	bgt.n	8008368 <_dtoa_r+0x310>
 80082bc:	2301      	movs	r3, #1
 80082be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082c2:	461a      	mov	r2, r3
 80082c4:	9209      	str	r2, [sp, #36]	; 0x24
 80082c6:	e00c      	b.n	80082e2 <_dtoa_r+0x28a>
 80082c8:	2301      	movs	r3, #1
 80082ca:	e7f3      	b.n	80082b4 <_dtoa_r+0x25c>
 80082cc:	2300      	movs	r3, #0
 80082ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082d0:	9308      	str	r3, [sp, #32]
 80082d2:	9b00      	ldr	r3, [sp, #0]
 80082d4:	4413      	add	r3, r2
 80082d6:	9302      	str	r3, [sp, #8]
 80082d8:	3301      	adds	r3, #1
 80082da:	2b01      	cmp	r3, #1
 80082dc:	9303      	str	r3, [sp, #12]
 80082de:	bfb8      	it	lt
 80082e0:	2301      	movlt	r3, #1
 80082e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80082e4:	2200      	movs	r2, #0
 80082e6:	6042      	str	r2, [r0, #4]
 80082e8:	2204      	movs	r2, #4
 80082ea:	f102 0614 	add.w	r6, r2, #20
 80082ee:	429e      	cmp	r6, r3
 80082f0:	6841      	ldr	r1, [r0, #4]
 80082f2:	d93d      	bls.n	8008370 <_dtoa_r+0x318>
 80082f4:	4620      	mov	r0, r4
 80082f6:	f000 feeb 	bl	80090d0 <_Balloc>
 80082fa:	9001      	str	r0, [sp, #4]
 80082fc:	2800      	cmp	r0, #0
 80082fe:	d13b      	bne.n	8008378 <_dtoa_r+0x320>
 8008300:	4b11      	ldr	r3, [pc, #68]	; (8008348 <_dtoa_r+0x2f0>)
 8008302:	4602      	mov	r2, r0
 8008304:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008308:	e6c0      	b.n	800808c <_dtoa_r+0x34>
 800830a:	2301      	movs	r3, #1
 800830c:	e7df      	b.n	80082ce <_dtoa_r+0x276>
 800830e:	bf00      	nop
 8008310:	636f4361 	.word	0x636f4361
 8008314:	3fd287a7 	.word	0x3fd287a7
 8008318:	8b60c8b3 	.word	0x8b60c8b3
 800831c:	3fc68a28 	.word	0x3fc68a28
 8008320:	509f79fb 	.word	0x509f79fb
 8008324:	3fd34413 	.word	0x3fd34413
 8008328:	0800a9a4 	.word	0x0800a9a4
 800832c:	0800a9bb 	.word	0x0800a9bb
 8008330:	7ff00000 	.word	0x7ff00000
 8008334:	0800a9a0 	.word	0x0800a9a0
 8008338:	0800a997 	.word	0x0800a997
 800833c:	0800abfa 	.word	0x0800abfa
 8008340:	3ff80000 	.word	0x3ff80000
 8008344:	0800ab10 	.word	0x0800ab10
 8008348:	0800aa16 	.word	0x0800aa16
 800834c:	2501      	movs	r5, #1
 800834e:	2300      	movs	r3, #0
 8008350:	9306      	str	r3, [sp, #24]
 8008352:	9508      	str	r5, [sp, #32]
 8008354:	f04f 33ff 	mov.w	r3, #4294967295
 8008358:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800835c:	2200      	movs	r2, #0
 800835e:	2312      	movs	r3, #18
 8008360:	e7b0      	b.n	80082c4 <_dtoa_r+0x26c>
 8008362:	2301      	movs	r3, #1
 8008364:	9308      	str	r3, [sp, #32]
 8008366:	e7f5      	b.n	8008354 <_dtoa_r+0x2fc>
 8008368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800836a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800836e:	e7b8      	b.n	80082e2 <_dtoa_r+0x28a>
 8008370:	3101      	adds	r1, #1
 8008372:	6041      	str	r1, [r0, #4]
 8008374:	0052      	lsls	r2, r2, #1
 8008376:	e7b8      	b.n	80082ea <_dtoa_r+0x292>
 8008378:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800837a:	9a01      	ldr	r2, [sp, #4]
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	2b0e      	cmp	r3, #14
 8008382:	f200 809d 	bhi.w	80084c0 <_dtoa_r+0x468>
 8008386:	2d00      	cmp	r5, #0
 8008388:	f000 809a 	beq.w	80084c0 <_dtoa_r+0x468>
 800838c:	9b00      	ldr	r3, [sp, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	dd32      	ble.n	80083f8 <_dtoa_r+0x3a0>
 8008392:	4ab7      	ldr	r2, [pc, #732]	; (8008670 <_dtoa_r+0x618>)
 8008394:	f003 030f 	and.w	r3, r3, #15
 8008398:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800839c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083a0:	9b00      	ldr	r3, [sp, #0]
 80083a2:	05d8      	lsls	r0, r3, #23
 80083a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80083a8:	d516      	bpl.n	80083d8 <_dtoa_r+0x380>
 80083aa:	4bb2      	ldr	r3, [pc, #712]	; (8008674 <_dtoa_r+0x61c>)
 80083ac:	ec51 0b19 	vmov	r0, r1, d9
 80083b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083b4:	f7f8 fa5a 	bl	800086c <__aeabi_ddiv>
 80083b8:	f007 070f 	and.w	r7, r7, #15
 80083bc:	4682      	mov	sl, r0
 80083be:	468b      	mov	fp, r1
 80083c0:	2503      	movs	r5, #3
 80083c2:	4eac      	ldr	r6, [pc, #688]	; (8008674 <_dtoa_r+0x61c>)
 80083c4:	b957      	cbnz	r7, 80083dc <_dtoa_r+0x384>
 80083c6:	4642      	mov	r2, r8
 80083c8:	464b      	mov	r3, r9
 80083ca:	4650      	mov	r0, sl
 80083cc:	4659      	mov	r1, fp
 80083ce:	f7f8 fa4d 	bl	800086c <__aeabi_ddiv>
 80083d2:	4682      	mov	sl, r0
 80083d4:	468b      	mov	fp, r1
 80083d6:	e028      	b.n	800842a <_dtoa_r+0x3d2>
 80083d8:	2502      	movs	r5, #2
 80083da:	e7f2      	b.n	80083c2 <_dtoa_r+0x36a>
 80083dc:	07f9      	lsls	r1, r7, #31
 80083de:	d508      	bpl.n	80083f2 <_dtoa_r+0x39a>
 80083e0:	4640      	mov	r0, r8
 80083e2:	4649      	mov	r1, r9
 80083e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083e8:	f7f8 f916 	bl	8000618 <__aeabi_dmul>
 80083ec:	3501      	adds	r5, #1
 80083ee:	4680      	mov	r8, r0
 80083f0:	4689      	mov	r9, r1
 80083f2:	107f      	asrs	r7, r7, #1
 80083f4:	3608      	adds	r6, #8
 80083f6:	e7e5      	b.n	80083c4 <_dtoa_r+0x36c>
 80083f8:	f000 809b 	beq.w	8008532 <_dtoa_r+0x4da>
 80083fc:	9b00      	ldr	r3, [sp, #0]
 80083fe:	4f9d      	ldr	r7, [pc, #628]	; (8008674 <_dtoa_r+0x61c>)
 8008400:	425e      	negs	r6, r3
 8008402:	4b9b      	ldr	r3, [pc, #620]	; (8008670 <_dtoa_r+0x618>)
 8008404:	f006 020f 	and.w	r2, r6, #15
 8008408:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	ec51 0b19 	vmov	r0, r1, d9
 8008414:	f7f8 f900 	bl	8000618 <__aeabi_dmul>
 8008418:	1136      	asrs	r6, r6, #4
 800841a:	4682      	mov	sl, r0
 800841c:	468b      	mov	fp, r1
 800841e:	2300      	movs	r3, #0
 8008420:	2502      	movs	r5, #2
 8008422:	2e00      	cmp	r6, #0
 8008424:	d17a      	bne.n	800851c <_dtoa_r+0x4c4>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1d3      	bne.n	80083d2 <_dtoa_r+0x37a>
 800842a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 8082 	beq.w	8008536 <_dtoa_r+0x4de>
 8008432:	4b91      	ldr	r3, [pc, #580]	; (8008678 <_dtoa_r+0x620>)
 8008434:	2200      	movs	r2, #0
 8008436:	4650      	mov	r0, sl
 8008438:	4659      	mov	r1, fp
 800843a:	f7f8 fb5f 	bl	8000afc <__aeabi_dcmplt>
 800843e:	2800      	cmp	r0, #0
 8008440:	d079      	beq.n	8008536 <_dtoa_r+0x4de>
 8008442:	9b03      	ldr	r3, [sp, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d076      	beq.n	8008536 <_dtoa_r+0x4de>
 8008448:	9b02      	ldr	r3, [sp, #8]
 800844a:	2b00      	cmp	r3, #0
 800844c:	dd36      	ble.n	80084bc <_dtoa_r+0x464>
 800844e:	9b00      	ldr	r3, [sp, #0]
 8008450:	4650      	mov	r0, sl
 8008452:	4659      	mov	r1, fp
 8008454:	1e5f      	subs	r7, r3, #1
 8008456:	2200      	movs	r2, #0
 8008458:	4b88      	ldr	r3, [pc, #544]	; (800867c <_dtoa_r+0x624>)
 800845a:	f7f8 f8dd 	bl	8000618 <__aeabi_dmul>
 800845e:	9e02      	ldr	r6, [sp, #8]
 8008460:	4682      	mov	sl, r0
 8008462:	468b      	mov	fp, r1
 8008464:	3501      	adds	r5, #1
 8008466:	4628      	mov	r0, r5
 8008468:	f7f8 f86c 	bl	8000544 <__aeabi_i2d>
 800846c:	4652      	mov	r2, sl
 800846e:	465b      	mov	r3, fp
 8008470:	f7f8 f8d2 	bl	8000618 <__aeabi_dmul>
 8008474:	4b82      	ldr	r3, [pc, #520]	; (8008680 <_dtoa_r+0x628>)
 8008476:	2200      	movs	r2, #0
 8008478:	f7f7 ff18 	bl	80002ac <__adddf3>
 800847c:	46d0      	mov	r8, sl
 800847e:	46d9      	mov	r9, fp
 8008480:	4682      	mov	sl, r0
 8008482:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008486:	2e00      	cmp	r6, #0
 8008488:	d158      	bne.n	800853c <_dtoa_r+0x4e4>
 800848a:	4b7e      	ldr	r3, [pc, #504]	; (8008684 <_dtoa_r+0x62c>)
 800848c:	2200      	movs	r2, #0
 800848e:	4640      	mov	r0, r8
 8008490:	4649      	mov	r1, r9
 8008492:	f7f7 ff09 	bl	80002a8 <__aeabi_dsub>
 8008496:	4652      	mov	r2, sl
 8008498:	465b      	mov	r3, fp
 800849a:	4680      	mov	r8, r0
 800849c:	4689      	mov	r9, r1
 800849e:	f7f8 fb4b 	bl	8000b38 <__aeabi_dcmpgt>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	f040 8295 	bne.w	80089d2 <_dtoa_r+0x97a>
 80084a8:	4652      	mov	r2, sl
 80084aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80084ae:	4640      	mov	r0, r8
 80084b0:	4649      	mov	r1, r9
 80084b2:	f7f8 fb23 	bl	8000afc <__aeabi_dcmplt>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	f040 8289 	bne.w	80089ce <_dtoa_r+0x976>
 80084bc:	ec5b ab19 	vmov	sl, fp, d9
 80084c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f2c0 8148 	blt.w	8008758 <_dtoa_r+0x700>
 80084c8:	9a00      	ldr	r2, [sp, #0]
 80084ca:	2a0e      	cmp	r2, #14
 80084cc:	f300 8144 	bgt.w	8008758 <_dtoa_r+0x700>
 80084d0:	4b67      	ldr	r3, [pc, #412]	; (8008670 <_dtoa_r+0x618>)
 80084d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f280 80d5 	bge.w	800868c <_dtoa_r+0x634>
 80084e2:	9b03      	ldr	r3, [sp, #12]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f300 80d1 	bgt.w	800868c <_dtoa_r+0x634>
 80084ea:	f040 826f 	bne.w	80089cc <_dtoa_r+0x974>
 80084ee:	4b65      	ldr	r3, [pc, #404]	; (8008684 <_dtoa_r+0x62c>)
 80084f0:	2200      	movs	r2, #0
 80084f2:	4640      	mov	r0, r8
 80084f4:	4649      	mov	r1, r9
 80084f6:	f7f8 f88f 	bl	8000618 <__aeabi_dmul>
 80084fa:	4652      	mov	r2, sl
 80084fc:	465b      	mov	r3, fp
 80084fe:	f7f8 fb11 	bl	8000b24 <__aeabi_dcmpge>
 8008502:	9e03      	ldr	r6, [sp, #12]
 8008504:	4637      	mov	r7, r6
 8008506:	2800      	cmp	r0, #0
 8008508:	f040 8245 	bne.w	8008996 <_dtoa_r+0x93e>
 800850c:	9d01      	ldr	r5, [sp, #4]
 800850e:	2331      	movs	r3, #49	; 0x31
 8008510:	f805 3b01 	strb.w	r3, [r5], #1
 8008514:	9b00      	ldr	r3, [sp, #0]
 8008516:	3301      	adds	r3, #1
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	e240      	b.n	800899e <_dtoa_r+0x946>
 800851c:	07f2      	lsls	r2, r6, #31
 800851e:	d505      	bpl.n	800852c <_dtoa_r+0x4d4>
 8008520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008524:	f7f8 f878 	bl	8000618 <__aeabi_dmul>
 8008528:	3501      	adds	r5, #1
 800852a:	2301      	movs	r3, #1
 800852c:	1076      	asrs	r6, r6, #1
 800852e:	3708      	adds	r7, #8
 8008530:	e777      	b.n	8008422 <_dtoa_r+0x3ca>
 8008532:	2502      	movs	r5, #2
 8008534:	e779      	b.n	800842a <_dtoa_r+0x3d2>
 8008536:	9f00      	ldr	r7, [sp, #0]
 8008538:	9e03      	ldr	r6, [sp, #12]
 800853a:	e794      	b.n	8008466 <_dtoa_r+0x40e>
 800853c:	9901      	ldr	r1, [sp, #4]
 800853e:	4b4c      	ldr	r3, [pc, #304]	; (8008670 <_dtoa_r+0x618>)
 8008540:	4431      	add	r1, r6
 8008542:	910d      	str	r1, [sp, #52]	; 0x34
 8008544:	9908      	ldr	r1, [sp, #32]
 8008546:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800854a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800854e:	2900      	cmp	r1, #0
 8008550:	d043      	beq.n	80085da <_dtoa_r+0x582>
 8008552:	494d      	ldr	r1, [pc, #308]	; (8008688 <_dtoa_r+0x630>)
 8008554:	2000      	movs	r0, #0
 8008556:	f7f8 f989 	bl	800086c <__aeabi_ddiv>
 800855a:	4652      	mov	r2, sl
 800855c:	465b      	mov	r3, fp
 800855e:	f7f7 fea3 	bl	80002a8 <__aeabi_dsub>
 8008562:	9d01      	ldr	r5, [sp, #4]
 8008564:	4682      	mov	sl, r0
 8008566:	468b      	mov	fp, r1
 8008568:	4649      	mov	r1, r9
 800856a:	4640      	mov	r0, r8
 800856c:	f7f8 fb04 	bl	8000b78 <__aeabi_d2iz>
 8008570:	4606      	mov	r6, r0
 8008572:	f7f7 ffe7 	bl	8000544 <__aeabi_i2d>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	4640      	mov	r0, r8
 800857c:	4649      	mov	r1, r9
 800857e:	f7f7 fe93 	bl	80002a8 <__aeabi_dsub>
 8008582:	3630      	adds	r6, #48	; 0x30
 8008584:	f805 6b01 	strb.w	r6, [r5], #1
 8008588:	4652      	mov	r2, sl
 800858a:	465b      	mov	r3, fp
 800858c:	4680      	mov	r8, r0
 800858e:	4689      	mov	r9, r1
 8008590:	f7f8 fab4 	bl	8000afc <__aeabi_dcmplt>
 8008594:	2800      	cmp	r0, #0
 8008596:	d163      	bne.n	8008660 <_dtoa_r+0x608>
 8008598:	4642      	mov	r2, r8
 800859a:	464b      	mov	r3, r9
 800859c:	4936      	ldr	r1, [pc, #216]	; (8008678 <_dtoa_r+0x620>)
 800859e:	2000      	movs	r0, #0
 80085a0:	f7f7 fe82 	bl	80002a8 <__aeabi_dsub>
 80085a4:	4652      	mov	r2, sl
 80085a6:	465b      	mov	r3, fp
 80085a8:	f7f8 faa8 	bl	8000afc <__aeabi_dcmplt>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	f040 80b5 	bne.w	800871c <_dtoa_r+0x6c4>
 80085b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085b4:	429d      	cmp	r5, r3
 80085b6:	d081      	beq.n	80084bc <_dtoa_r+0x464>
 80085b8:	4b30      	ldr	r3, [pc, #192]	; (800867c <_dtoa_r+0x624>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	4650      	mov	r0, sl
 80085be:	4659      	mov	r1, fp
 80085c0:	f7f8 f82a 	bl	8000618 <__aeabi_dmul>
 80085c4:	4b2d      	ldr	r3, [pc, #180]	; (800867c <_dtoa_r+0x624>)
 80085c6:	4682      	mov	sl, r0
 80085c8:	468b      	mov	fp, r1
 80085ca:	4640      	mov	r0, r8
 80085cc:	4649      	mov	r1, r9
 80085ce:	2200      	movs	r2, #0
 80085d0:	f7f8 f822 	bl	8000618 <__aeabi_dmul>
 80085d4:	4680      	mov	r8, r0
 80085d6:	4689      	mov	r9, r1
 80085d8:	e7c6      	b.n	8008568 <_dtoa_r+0x510>
 80085da:	4650      	mov	r0, sl
 80085dc:	4659      	mov	r1, fp
 80085de:	f7f8 f81b 	bl	8000618 <__aeabi_dmul>
 80085e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085e4:	9d01      	ldr	r5, [sp, #4]
 80085e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80085e8:	4682      	mov	sl, r0
 80085ea:	468b      	mov	fp, r1
 80085ec:	4649      	mov	r1, r9
 80085ee:	4640      	mov	r0, r8
 80085f0:	f7f8 fac2 	bl	8000b78 <__aeabi_d2iz>
 80085f4:	4606      	mov	r6, r0
 80085f6:	f7f7 ffa5 	bl	8000544 <__aeabi_i2d>
 80085fa:	3630      	adds	r6, #48	; 0x30
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	4640      	mov	r0, r8
 8008602:	4649      	mov	r1, r9
 8008604:	f7f7 fe50 	bl	80002a8 <__aeabi_dsub>
 8008608:	f805 6b01 	strb.w	r6, [r5], #1
 800860c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800860e:	429d      	cmp	r5, r3
 8008610:	4680      	mov	r8, r0
 8008612:	4689      	mov	r9, r1
 8008614:	f04f 0200 	mov.w	r2, #0
 8008618:	d124      	bne.n	8008664 <_dtoa_r+0x60c>
 800861a:	4b1b      	ldr	r3, [pc, #108]	; (8008688 <_dtoa_r+0x630>)
 800861c:	4650      	mov	r0, sl
 800861e:	4659      	mov	r1, fp
 8008620:	f7f7 fe44 	bl	80002ac <__adddf3>
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	4640      	mov	r0, r8
 800862a:	4649      	mov	r1, r9
 800862c:	f7f8 fa84 	bl	8000b38 <__aeabi_dcmpgt>
 8008630:	2800      	cmp	r0, #0
 8008632:	d173      	bne.n	800871c <_dtoa_r+0x6c4>
 8008634:	4652      	mov	r2, sl
 8008636:	465b      	mov	r3, fp
 8008638:	4913      	ldr	r1, [pc, #76]	; (8008688 <_dtoa_r+0x630>)
 800863a:	2000      	movs	r0, #0
 800863c:	f7f7 fe34 	bl	80002a8 <__aeabi_dsub>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	4640      	mov	r0, r8
 8008646:	4649      	mov	r1, r9
 8008648:	f7f8 fa58 	bl	8000afc <__aeabi_dcmplt>
 800864c:	2800      	cmp	r0, #0
 800864e:	f43f af35 	beq.w	80084bc <_dtoa_r+0x464>
 8008652:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008654:	1e6b      	subs	r3, r5, #1
 8008656:	930f      	str	r3, [sp, #60]	; 0x3c
 8008658:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800865c:	2b30      	cmp	r3, #48	; 0x30
 800865e:	d0f8      	beq.n	8008652 <_dtoa_r+0x5fa>
 8008660:	9700      	str	r7, [sp, #0]
 8008662:	e049      	b.n	80086f8 <_dtoa_r+0x6a0>
 8008664:	4b05      	ldr	r3, [pc, #20]	; (800867c <_dtoa_r+0x624>)
 8008666:	f7f7 ffd7 	bl	8000618 <__aeabi_dmul>
 800866a:	4680      	mov	r8, r0
 800866c:	4689      	mov	r9, r1
 800866e:	e7bd      	b.n	80085ec <_dtoa_r+0x594>
 8008670:	0800ab10 	.word	0x0800ab10
 8008674:	0800aae8 	.word	0x0800aae8
 8008678:	3ff00000 	.word	0x3ff00000
 800867c:	40240000 	.word	0x40240000
 8008680:	401c0000 	.word	0x401c0000
 8008684:	40140000 	.word	0x40140000
 8008688:	3fe00000 	.word	0x3fe00000
 800868c:	9d01      	ldr	r5, [sp, #4]
 800868e:	4656      	mov	r6, sl
 8008690:	465f      	mov	r7, fp
 8008692:	4642      	mov	r2, r8
 8008694:	464b      	mov	r3, r9
 8008696:	4630      	mov	r0, r6
 8008698:	4639      	mov	r1, r7
 800869a:	f7f8 f8e7 	bl	800086c <__aeabi_ddiv>
 800869e:	f7f8 fa6b 	bl	8000b78 <__aeabi_d2iz>
 80086a2:	4682      	mov	sl, r0
 80086a4:	f7f7 ff4e 	bl	8000544 <__aeabi_i2d>
 80086a8:	4642      	mov	r2, r8
 80086aa:	464b      	mov	r3, r9
 80086ac:	f7f7 ffb4 	bl	8000618 <__aeabi_dmul>
 80086b0:	4602      	mov	r2, r0
 80086b2:	460b      	mov	r3, r1
 80086b4:	4630      	mov	r0, r6
 80086b6:	4639      	mov	r1, r7
 80086b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80086bc:	f7f7 fdf4 	bl	80002a8 <__aeabi_dsub>
 80086c0:	f805 6b01 	strb.w	r6, [r5], #1
 80086c4:	9e01      	ldr	r6, [sp, #4]
 80086c6:	9f03      	ldr	r7, [sp, #12]
 80086c8:	1bae      	subs	r6, r5, r6
 80086ca:	42b7      	cmp	r7, r6
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	d135      	bne.n	800873e <_dtoa_r+0x6e6>
 80086d2:	f7f7 fdeb 	bl	80002ac <__adddf3>
 80086d6:	4642      	mov	r2, r8
 80086d8:	464b      	mov	r3, r9
 80086da:	4606      	mov	r6, r0
 80086dc:	460f      	mov	r7, r1
 80086de:	f7f8 fa2b 	bl	8000b38 <__aeabi_dcmpgt>
 80086e2:	b9d0      	cbnz	r0, 800871a <_dtoa_r+0x6c2>
 80086e4:	4642      	mov	r2, r8
 80086e6:	464b      	mov	r3, r9
 80086e8:	4630      	mov	r0, r6
 80086ea:	4639      	mov	r1, r7
 80086ec:	f7f8 f9fc 	bl	8000ae8 <__aeabi_dcmpeq>
 80086f0:	b110      	cbz	r0, 80086f8 <_dtoa_r+0x6a0>
 80086f2:	f01a 0f01 	tst.w	sl, #1
 80086f6:	d110      	bne.n	800871a <_dtoa_r+0x6c2>
 80086f8:	4620      	mov	r0, r4
 80086fa:	ee18 1a10 	vmov	r1, s16
 80086fe:	f000 fd27 	bl	8009150 <_Bfree>
 8008702:	2300      	movs	r3, #0
 8008704:	9800      	ldr	r0, [sp, #0]
 8008706:	702b      	strb	r3, [r5, #0]
 8008708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800870a:	3001      	adds	r0, #1
 800870c:	6018      	str	r0, [r3, #0]
 800870e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008710:	2b00      	cmp	r3, #0
 8008712:	f43f acf1 	beq.w	80080f8 <_dtoa_r+0xa0>
 8008716:	601d      	str	r5, [r3, #0]
 8008718:	e4ee      	b.n	80080f8 <_dtoa_r+0xa0>
 800871a:	9f00      	ldr	r7, [sp, #0]
 800871c:	462b      	mov	r3, r5
 800871e:	461d      	mov	r5, r3
 8008720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008724:	2a39      	cmp	r2, #57	; 0x39
 8008726:	d106      	bne.n	8008736 <_dtoa_r+0x6de>
 8008728:	9a01      	ldr	r2, [sp, #4]
 800872a:	429a      	cmp	r2, r3
 800872c:	d1f7      	bne.n	800871e <_dtoa_r+0x6c6>
 800872e:	9901      	ldr	r1, [sp, #4]
 8008730:	2230      	movs	r2, #48	; 0x30
 8008732:	3701      	adds	r7, #1
 8008734:	700a      	strb	r2, [r1, #0]
 8008736:	781a      	ldrb	r2, [r3, #0]
 8008738:	3201      	adds	r2, #1
 800873a:	701a      	strb	r2, [r3, #0]
 800873c:	e790      	b.n	8008660 <_dtoa_r+0x608>
 800873e:	4ba6      	ldr	r3, [pc, #664]	; (80089d8 <_dtoa_r+0x980>)
 8008740:	2200      	movs	r2, #0
 8008742:	f7f7 ff69 	bl	8000618 <__aeabi_dmul>
 8008746:	2200      	movs	r2, #0
 8008748:	2300      	movs	r3, #0
 800874a:	4606      	mov	r6, r0
 800874c:	460f      	mov	r7, r1
 800874e:	f7f8 f9cb 	bl	8000ae8 <__aeabi_dcmpeq>
 8008752:	2800      	cmp	r0, #0
 8008754:	d09d      	beq.n	8008692 <_dtoa_r+0x63a>
 8008756:	e7cf      	b.n	80086f8 <_dtoa_r+0x6a0>
 8008758:	9a08      	ldr	r2, [sp, #32]
 800875a:	2a00      	cmp	r2, #0
 800875c:	f000 80d7 	beq.w	800890e <_dtoa_r+0x8b6>
 8008760:	9a06      	ldr	r2, [sp, #24]
 8008762:	2a01      	cmp	r2, #1
 8008764:	f300 80ba 	bgt.w	80088dc <_dtoa_r+0x884>
 8008768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800876a:	2a00      	cmp	r2, #0
 800876c:	f000 80b2 	beq.w	80088d4 <_dtoa_r+0x87c>
 8008770:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008774:	9e07      	ldr	r6, [sp, #28]
 8008776:	9d04      	ldr	r5, [sp, #16]
 8008778:	9a04      	ldr	r2, [sp, #16]
 800877a:	441a      	add	r2, r3
 800877c:	9204      	str	r2, [sp, #16]
 800877e:	9a05      	ldr	r2, [sp, #20]
 8008780:	2101      	movs	r1, #1
 8008782:	441a      	add	r2, r3
 8008784:	4620      	mov	r0, r4
 8008786:	9205      	str	r2, [sp, #20]
 8008788:	f000 fd9a 	bl	80092c0 <__i2b>
 800878c:	4607      	mov	r7, r0
 800878e:	2d00      	cmp	r5, #0
 8008790:	dd0c      	ble.n	80087ac <_dtoa_r+0x754>
 8008792:	9b05      	ldr	r3, [sp, #20]
 8008794:	2b00      	cmp	r3, #0
 8008796:	dd09      	ble.n	80087ac <_dtoa_r+0x754>
 8008798:	42ab      	cmp	r3, r5
 800879a:	9a04      	ldr	r2, [sp, #16]
 800879c:	bfa8      	it	ge
 800879e:	462b      	movge	r3, r5
 80087a0:	1ad2      	subs	r2, r2, r3
 80087a2:	9204      	str	r2, [sp, #16]
 80087a4:	9a05      	ldr	r2, [sp, #20]
 80087a6:	1aed      	subs	r5, r5, r3
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	9305      	str	r3, [sp, #20]
 80087ac:	9b07      	ldr	r3, [sp, #28]
 80087ae:	b31b      	cbz	r3, 80087f8 <_dtoa_r+0x7a0>
 80087b0:	9b08      	ldr	r3, [sp, #32]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 80af 	beq.w	8008916 <_dtoa_r+0x8be>
 80087b8:	2e00      	cmp	r6, #0
 80087ba:	dd13      	ble.n	80087e4 <_dtoa_r+0x78c>
 80087bc:	4639      	mov	r1, r7
 80087be:	4632      	mov	r2, r6
 80087c0:	4620      	mov	r0, r4
 80087c2:	f000 fe3d 	bl	8009440 <__pow5mult>
 80087c6:	ee18 2a10 	vmov	r2, s16
 80087ca:	4601      	mov	r1, r0
 80087cc:	4607      	mov	r7, r0
 80087ce:	4620      	mov	r0, r4
 80087d0:	f000 fd8c 	bl	80092ec <__multiply>
 80087d4:	ee18 1a10 	vmov	r1, s16
 80087d8:	4680      	mov	r8, r0
 80087da:	4620      	mov	r0, r4
 80087dc:	f000 fcb8 	bl	8009150 <_Bfree>
 80087e0:	ee08 8a10 	vmov	s16, r8
 80087e4:	9b07      	ldr	r3, [sp, #28]
 80087e6:	1b9a      	subs	r2, r3, r6
 80087e8:	d006      	beq.n	80087f8 <_dtoa_r+0x7a0>
 80087ea:	ee18 1a10 	vmov	r1, s16
 80087ee:	4620      	mov	r0, r4
 80087f0:	f000 fe26 	bl	8009440 <__pow5mult>
 80087f4:	ee08 0a10 	vmov	s16, r0
 80087f8:	2101      	movs	r1, #1
 80087fa:	4620      	mov	r0, r4
 80087fc:	f000 fd60 	bl	80092c0 <__i2b>
 8008800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008802:	2b00      	cmp	r3, #0
 8008804:	4606      	mov	r6, r0
 8008806:	f340 8088 	ble.w	800891a <_dtoa_r+0x8c2>
 800880a:	461a      	mov	r2, r3
 800880c:	4601      	mov	r1, r0
 800880e:	4620      	mov	r0, r4
 8008810:	f000 fe16 	bl	8009440 <__pow5mult>
 8008814:	9b06      	ldr	r3, [sp, #24]
 8008816:	2b01      	cmp	r3, #1
 8008818:	4606      	mov	r6, r0
 800881a:	f340 8081 	ble.w	8008920 <_dtoa_r+0x8c8>
 800881e:	f04f 0800 	mov.w	r8, #0
 8008822:	6933      	ldr	r3, [r6, #16]
 8008824:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008828:	6918      	ldr	r0, [r3, #16]
 800882a:	f000 fcf9 	bl	8009220 <__hi0bits>
 800882e:	f1c0 0020 	rsb	r0, r0, #32
 8008832:	9b05      	ldr	r3, [sp, #20]
 8008834:	4418      	add	r0, r3
 8008836:	f010 001f 	ands.w	r0, r0, #31
 800883a:	f000 8092 	beq.w	8008962 <_dtoa_r+0x90a>
 800883e:	f1c0 0320 	rsb	r3, r0, #32
 8008842:	2b04      	cmp	r3, #4
 8008844:	f340 808a 	ble.w	800895c <_dtoa_r+0x904>
 8008848:	f1c0 001c 	rsb	r0, r0, #28
 800884c:	9b04      	ldr	r3, [sp, #16]
 800884e:	4403      	add	r3, r0
 8008850:	9304      	str	r3, [sp, #16]
 8008852:	9b05      	ldr	r3, [sp, #20]
 8008854:	4403      	add	r3, r0
 8008856:	4405      	add	r5, r0
 8008858:	9305      	str	r3, [sp, #20]
 800885a:	9b04      	ldr	r3, [sp, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	dd07      	ble.n	8008870 <_dtoa_r+0x818>
 8008860:	ee18 1a10 	vmov	r1, s16
 8008864:	461a      	mov	r2, r3
 8008866:	4620      	mov	r0, r4
 8008868:	f000 fe44 	bl	80094f4 <__lshift>
 800886c:	ee08 0a10 	vmov	s16, r0
 8008870:	9b05      	ldr	r3, [sp, #20]
 8008872:	2b00      	cmp	r3, #0
 8008874:	dd05      	ble.n	8008882 <_dtoa_r+0x82a>
 8008876:	4631      	mov	r1, r6
 8008878:	461a      	mov	r2, r3
 800887a:	4620      	mov	r0, r4
 800887c:	f000 fe3a 	bl	80094f4 <__lshift>
 8008880:	4606      	mov	r6, r0
 8008882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008884:	2b00      	cmp	r3, #0
 8008886:	d06e      	beq.n	8008966 <_dtoa_r+0x90e>
 8008888:	ee18 0a10 	vmov	r0, s16
 800888c:	4631      	mov	r1, r6
 800888e:	f000 fea1 	bl	80095d4 <__mcmp>
 8008892:	2800      	cmp	r0, #0
 8008894:	da67      	bge.n	8008966 <_dtoa_r+0x90e>
 8008896:	9b00      	ldr	r3, [sp, #0]
 8008898:	3b01      	subs	r3, #1
 800889a:	ee18 1a10 	vmov	r1, s16
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	220a      	movs	r2, #10
 80088a2:	2300      	movs	r3, #0
 80088a4:	4620      	mov	r0, r4
 80088a6:	f000 fc75 	bl	8009194 <__multadd>
 80088aa:	9b08      	ldr	r3, [sp, #32]
 80088ac:	ee08 0a10 	vmov	s16, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 81b1 	beq.w	8008c18 <_dtoa_r+0xbc0>
 80088b6:	2300      	movs	r3, #0
 80088b8:	4639      	mov	r1, r7
 80088ba:	220a      	movs	r2, #10
 80088bc:	4620      	mov	r0, r4
 80088be:	f000 fc69 	bl	8009194 <__multadd>
 80088c2:	9b02      	ldr	r3, [sp, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	4607      	mov	r7, r0
 80088c8:	f300 808e 	bgt.w	80089e8 <_dtoa_r+0x990>
 80088cc:	9b06      	ldr	r3, [sp, #24]
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	dc51      	bgt.n	8008976 <_dtoa_r+0x91e>
 80088d2:	e089      	b.n	80089e8 <_dtoa_r+0x990>
 80088d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088da:	e74b      	b.n	8008774 <_dtoa_r+0x71c>
 80088dc:	9b03      	ldr	r3, [sp, #12]
 80088de:	1e5e      	subs	r6, r3, #1
 80088e0:	9b07      	ldr	r3, [sp, #28]
 80088e2:	42b3      	cmp	r3, r6
 80088e4:	bfbf      	itttt	lt
 80088e6:	9b07      	ldrlt	r3, [sp, #28]
 80088e8:	9607      	strlt	r6, [sp, #28]
 80088ea:	1af2      	sublt	r2, r6, r3
 80088ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80088ee:	bfb6      	itet	lt
 80088f0:	189b      	addlt	r3, r3, r2
 80088f2:	1b9e      	subge	r6, r3, r6
 80088f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80088f6:	9b03      	ldr	r3, [sp, #12]
 80088f8:	bfb8      	it	lt
 80088fa:	2600      	movlt	r6, #0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	bfb7      	itett	lt
 8008900:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008904:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008908:	1a9d      	sublt	r5, r3, r2
 800890a:	2300      	movlt	r3, #0
 800890c:	e734      	b.n	8008778 <_dtoa_r+0x720>
 800890e:	9e07      	ldr	r6, [sp, #28]
 8008910:	9d04      	ldr	r5, [sp, #16]
 8008912:	9f08      	ldr	r7, [sp, #32]
 8008914:	e73b      	b.n	800878e <_dtoa_r+0x736>
 8008916:	9a07      	ldr	r2, [sp, #28]
 8008918:	e767      	b.n	80087ea <_dtoa_r+0x792>
 800891a:	9b06      	ldr	r3, [sp, #24]
 800891c:	2b01      	cmp	r3, #1
 800891e:	dc18      	bgt.n	8008952 <_dtoa_r+0x8fa>
 8008920:	f1ba 0f00 	cmp.w	sl, #0
 8008924:	d115      	bne.n	8008952 <_dtoa_r+0x8fa>
 8008926:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800892a:	b993      	cbnz	r3, 8008952 <_dtoa_r+0x8fa>
 800892c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008930:	0d1b      	lsrs	r3, r3, #20
 8008932:	051b      	lsls	r3, r3, #20
 8008934:	b183      	cbz	r3, 8008958 <_dtoa_r+0x900>
 8008936:	9b04      	ldr	r3, [sp, #16]
 8008938:	3301      	adds	r3, #1
 800893a:	9304      	str	r3, [sp, #16]
 800893c:	9b05      	ldr	r3, [sp, #20]
 800893e:	3301      	adds	r3, #1
 8008940:	9305      	str	r3, [sp, #20]
 8008942:	f04f 0801 	mov.w	r8, #1
 8008946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008948:	2b00      	cmp	r3, #0
 800894a:	f47f af6a 	bne.w	8008822 <_dtoa_r+0x7ca>
 800894e:	2001      	movs	r0, #1
 8008950:	e76f      	b.n	8008832 <_dtoa_r+0x7da>
 8008952:	f04f 0800 	mov.w	r8, #0
 8008956:	e7f6      	b.n	8008946 <_dtoa_r+0x8ee>
 8008958:	4698      	mov	r8, r3
 800895a:	e7f4      	b.n	8008946 <_dtoa_r+0x8ee>
 800895c:	f43f af7d 	beq.w	800885a <_dtoa_r+0x802>
 8008960:	4618      	mov	r0, r3
 8008962:	301c      	adds	r0, #28
 8008964:	e772      	b.n	800884c <_dtoa_r+0x7f4>
 8008966:	9b03      	ldr	r3, [sp, #12]
 8008968:	2b00      	cmp	r3, #0
 800896a:	dc37      	bgt.n	80089dc <_dtoa_r+0x984>
 800896c:	9b06      	ldr	r3, [sp, #24]
 800896e:	2b02      	cmp	r3, #2
 8008970:	dd34      	ble.n	80089dc <_dtoa_r+0x984>
 8008972:	9b03      	ldr	r3, [sp, #12]
 8008974:	9302      	str	r3, [sp, #8]
 8008976:	9b02      	ldr	r3, [sp, #8]
 8008978:	b96b      	cbnz	r3, 8008996 <_dtoa_r+0x93e>
 800897a:	4631      	mov	r1, r6
 800897c:	2205      	movs	r2, #5
 800897e:	4620      	mov	r0, r4
 8008980:	f000 fc08 	bl	8009194 <__multadd>
 8008984:	4601      	mov	r1, r0
 8008986:	4606      	mov	r6, r0
 8008988:	ee18 0a10 	vmov	r0, s16
 800898c:	f000 fe22 	bl	80095d4 <__mcmp>
 8008990:	2800      	cmp	r0, #0
 8008992:	f73f adbb 	bgt.w	800850c <_dtoa_r+0x4b4>
 8008996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008998:	9d01      	ldr	r5, [sp, #4]
 800899a:	43db      	mvns	r3, r3
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	f04f 0800 	mov.w	r8, #0
 80089a2:	4631      	mov	r1, r6
 80089a4:	4620      	mov	r0, r4
 80089a6:	f000 fbd3 	bl	8009150 <_Bfree>
 80089aa:	2f00      	cmp	r7, #0
 80089ac:	f43f aea4 	beq.w	80086f8 <_dtoa_r+0x6a0>
 80089b0:	f1b8 0f00 	cmp.w	r8, #0
 80089b4:	d005      	beq.n	80089c2 <_dtoa_r+0x96a>
 80089b6:	45b8      	cmp	r8, r7
 80089b8:	d003      	beq.n	80089c2 <_dtoa_r+0x96a>
 80089ba:	4641      	mov	r1, r8
 80089bc:	4620      	mov	r0, r4
 80089be:	f000 fbc7 	bl	8009150 <_Bfree>
 80089c2:	4639      	mov	r1, r7
 80089c4:	4620      	mov	r0, r4
 80089c6:	f000 fbc3 	bl	8009150 <_Bfree>
 80089ca:	e695      	b.n	80086f8 <_dtoa_r+0x6a0>
 80089cc:	2600      	movs	r6, #0
 80089ce:	4637      	mov	r7, r6
 80089d0:	e7e1      	b.n	8008996 <_dtoa_r+0x93e>
 80089d2:	9700      	str	r7, [sp, #0]
 80089d4:	4637      	mov	r7, r6
 80089d6:	e599      	b.n	800850c <_dtoa_r+0x4b4>
 80089d8:	40240000 	.word	0x40240000
 80089dc:	9b08      	ldr	r3, [sp, #32]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f000 80ca 	beq.w	8008b78 <_dtoa_r+0xb20>
 80089e4:	9b03      	ldr	r3, [sp, #12]
 80089e6:	9302      	str	r3, [sp, #8]
 80089e8:	2d00      	cmp	r5, #0
 80089ea:	dd05      	ble.n	80089f8 <_dtoa_r+0x9a0>
 80089ec:	4639      	mov	r1, r7
 80089ee:	462a      	mov	r2, r5
 80089f0:	4620      	mov	r0, r4
 80089f2:	f000 fd7f 	bl	80094f4 <__lshift>
 80089f6:	4607      	mov	r7, r0
 80089f8:	f1b8 0f00 	cmp.w	r8, #0
 80089fc:	d05b      	beq.n	8008ab6 <_dtoa_r+0xa5e>
 80089fe:	6879      	ldr	r1, [r7, #4]
 8008a00:	4620      	mov	r0, r4
 8008a02:	f000 fb65 	bl	80090d0 <_Balloc>
 8008a06:	4605      	mov	r5, r0
 8008a08:	b928      	cbnz	r0, 8008a16 <_dtoa_r+0x9be>
 8008a0a:	4b87      	ldr	r3, [pc, #540]	; (8008c28 <_dtoa_r+0xbd0>)
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008a12:	f7ff bb3b 	b.w	800808c <_dtoa_r+0x34>
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	3202      	adds	r2, #2
 8008a1a:	0092      	lsls	r2, r2, #2
 8008a1c:	f107 010c 	add.w	r1, r7, #12
 8008a20:	300c      	adds	r0, #12
 8008a22:	f000 fb47 	bl	80090b4 <memcpy>
 8008a26:	2201      	movs	r2, #1
 8008a28:	4629      	mov	r1, r5
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f000 fd62 	bl	80094f4 <__lshift>
 8008a30:	9b01      	ldr	r3, [sp, #4]
 8008a32:	f103 0901 	add.w	r9, r3, #1
 8008a36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	9305      	str	r3, [sp, #20]
 8008a3e:	f00a 0301 	and.w	r3, sl, #1
 8008a42:	46b8      	mov	r8, r7
 8008a44:	9304      	str	r3, [sp, #16]
 8008a46:	4607      	mov	r7, r0
 8008a48:	4631      	mov	r1, r6
 8008a4a:	ee18 0a10 	vmov	r0, s16
 8008a4e:	f7ff fa77 	bl	8007f40 <quorem>
 8008a52:	4641      	mov	r1, r8
 8008a54:	9002      	str	r0, [sp, #8]
 8008a56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a5a:	ee18 0a10 	vmov	r0, s16
 8008a5e:	f000 fdb9 	bl	80095d4 <__mcmp>
 8008a62:	463a      	mov	r2, r7
 8008a64:	9003      	str	r0, [sp, #12]
 8008a66:	4631      	mov	r1, r6
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f000 fdcf 	bl	800960c <__mdiff>
 8008a6e:	68c2      	ldr	r2, [r0, #12]
 8008a70:	f109 3bff 	add.w	fp, r9, #4294967295
 8008a74:	4605      	mov	r5, r0
 8008a76:	bb02      	cbnz	r2, 8008aba <_dtoa_r+0xa62>
 8008a78:	4601      	mov	r1, r0
 8008a7a:	ee18 0a10 	vmov	r0, s16
 8008a7e:	f000 fda9 	bl	80095d4 <__mcmp>
 8008a82:	4602      	mov	r2, r0
 8008a84:	4629      	mov	r1, r5
 8008a86:	4620      	mov	r0, r4
 8008a88:	9207      	str	r2, [sp, #28]
 8008a8a:	f000 fb61 	bl	8009150 <_Bfree>
 8008a8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008a92:	ea43 0102 	orr.w	r1, r3, r2
 8008a96:	9b04      	ldr	r3, [sp, #16]
 8008a98:	430b      	orrs	r3, r1
 8008a9a:	464d      	mov	r5, r9
 8008a9c:	d10f      	bne.n	8008abe <_dtoa_r+0xa66>
 8008a9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008aa2:	d02a      	beq.n	8008afa <_dtoa_r+0xaa2>
 8008aa4:	9b03      	ldr	r3, [sp, #12]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	dd02      	ble.n	8008ab0 <_dtoa_r+0xa58>
 8008aaa:	9b02      	ldr	r3, [sp, #8]
 8008aac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008ab0:	f88b a000 	strb.w	sl, [fp]
 8008ab4:	e775      	b.n	80089a2 <_dtoa_r+0x94a>
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	e7ba      	b.n	8008a30 <_dtoa_r+0x9d8>
 8008aba:	2201      	movs	r2, #1
 8008abc:	e7e2      	b.n	8008a84 <_dtoa_r+0xa2c>
 8008abe:	9b03      	ldr	r3, [sp, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	db04      	blt.n	8008ace <_dtoa_r+0xa76>
 8008ac4:	9906      	ldr	r1, [sp, #24]
 8008ac6:	430b      	orrs	r3, r1
 8008ac8:	9904      	ldr	r1, [sp, #16]
 8008aca:	430b      	orrs	r3, r1
 8008acc:	d122      	bne.n	8008b14 <_dtoa_r+0xabc>
 8008ace:	2a00      	cmp	r2, #0
 8008ad0:	ddee      	ble.n	8008ab0 <_dtoa_r+0xa58>
 8008ad2:	ee18 1a10 	vmov	r1, s16
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f000 fd0b 	bl	80094f4 <__lshift>
 8008ade:	4631      	mov	r1, r6
 8008ae0:	ee08 0a10 	vmov	s16, r0
 8008ae4:	f000 fd76 	bl	80095d4 <__mcmp>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	dc03      	bgt.n	8008af4 <_dtoa_r+0xa9c>
 8008aec:	d1e0      	bne.n	8008ab0 <_dtoa_r+0xa58>
 8008aee:	f01a 0f01 	tst.w	sl, #1
 8008af2:	d0dd      	beq.n	8008ab0 <_dtoa_r+0xa58>
 8008af4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008af8:	d1d7      	bne.n	8008aaa <_dtoa_r+0xa52>
 8008afa:	2339      	movs	r3, #57	; 0x39
 8008afc:	f88b 3000 	strb.w	r3, [fp]
 8008b00:	462b      	mov	r3, r5
 8008b02:	461d      	mov	r5, r3
 8008b04:	3b01      	subs	r3, #1
 8008b06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008b0a:	2a39      	cmp	r2, #57	; 0x39
 8008b0c:	d071      	beq.n	8008bf2 <_dtoa_r+0xb9a>
 8008b0e:	3201      	adds	r2, #1
 8008b10:	701a      	strb	r2, [r3, #0]
 8008b12:	e746      	b.n	80089a2 <_dtoa_r+0x94a>
 8008b14:	2a00      	cmp	r2, #0
 8008b16:	dd07      	ble.n	8008b28 <_dtoa_r+0xad0>
 8008b18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b1c:	d0ed      	beq.n	8008afa <_dtoa_r+0xaa2>
 8008b1e:	f10a 0301 	add.w	r3, sl, #1
 8008b22:	f88b 3000 	strb.w	r3, [fp]
 8008b26:	e73c      	b.n	80089a2 <_dtoa_r+0x94a>
 8008b28:	9b05      	ldr	r3, [sp, #20]
 8008b2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008b2e:	4599      	cmp	r9, r3
 8008b30:	d047      	beq.n	8008bc2 <_dtoa_r+0xb6a>
 8008b32:	ee18 1a10 	vmov	r1, s16
 8008b36:	2300      	movs	r3, #0
 8008b38:	220a      	movs	r2, #10
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f000 fb2a 	bl	8009194 <__multadd>
 8008b40:	45b8      	cmp	r8, r7
 8008b42:	ee08 0a10 	vmov	s16, r0
 8008b46:	f04f 0300 	mov.w	r3, #0
 8008b4a:	f04f 020a 	mov.w	r2, #10
 8008b4e:	4641      	mov	r1, r8
 8008b50:	4620      	mov	r0, r4
 8008b52:	d106      	bne.n	8008b62 <_dtoa_r+0xb0a>
 8008b54:	f000 fb1e 	bl	8009194 <__multadd>
 8008b58:	4680      	mov	r8, r0
 8008b5a:	4607      	mov	r7, r0
 8008b5c:	f109 0901 	add.w	r9, r9, #1
 8008b60:	e772      	b.n	8008a48 <_dtoa_r+0x9f0>
 8008b62:	f000 fb17 	bl	8009194 <__multadd>
 8008b66:	4639      	mov	r1, r7
 8008b68:	4680      	mov	r8, r0
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	220a      	movs	r2, #10
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f000 fb10 	bl	8009194 <__multadd>
 8008b74:	4607      	mov	r7, r0
 8008b76:	e7f1      	b.n	8008b5c <_dtoa_r+0xb04>
 8008b78:	9b03      	ldr	r3, [sp, #12]
 8008b7a:	9302      	str	r3, [sp, #8]
 8008b7c:	9d01      	ldr	r5, [sp, #4]
 8008b7e:	ee18 0a10 	vmov	r0, s16
 8008b82:	4631      	mov	r1, r6
 8008b84:	f7ff f9dc 	bl	8007f40 <quorem>
 8008b88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b8c:	9b01      	ldr	r3, [sp, #4]
 8008b8e:	f805 ab01 	strb.w	sl, [r5], #1
 8008b92:	1aea      	subs	r2, r5, r3
 8008b94:	9b02      	ldr	r3, [sp, #8]
 8008b96:	4293      	cmp	r3, r2
 8008b98:	dd09      	ble.n	8008bae <_dtoa_r+0xb56>
 8008b9a:	ee18 1a10 	vmov	r1, s16
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	220a      	movs	r2, #10
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f000 faf6 	bl	8009194 <__multadd>
 8008ba8:	ee08 0a10 	vmov	s16, r0
 8008bac:	e7e7      	b.n	8008b7e <_dtoa_r+0xb26>
 8008bae:	9b02      	ldr	r3, [sp, #8]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	bfc8      	it	gt
 8008bb4:	461d      	movgt	r5, r3
 8008bb6:	9b01      	ldr	r3, [sp, #4]
 8008bb8:	bfd8      	it	le
 8008bba:	2501      	movle	r5, #1
 8008bbc:	441d      	add	r5, r3
 8008bbe:	f04f 0800 	mov.w	r8, #0
 8008bc2:	ee18 1a10 	vmov	r1, s16
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f000 fc93 	bl	80094f4 <__lshift>
 8008bce:	4631      	mov	r1, r6
 8008bd0:	ee08 0a10 	vmov	s16, r0
 8008bd4:	f000 fcfe 	bl	80095d4 <__mcmp>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	dc91      	bgt.n	8008b00 <_dtoa_r+0xaa8>
 8008bdc:	d102      	bne.n	8008be4 <_dtoa_r+0xb8c>
 8008bde:	f01a 0f01 	tst.w	sl, #1
 8008be2:	d18d      	bne.n	8008b00 <_dtoa_r+0xaa8>
 8008be4:	462b      	mov	r3, r5
 8008be6:	461d      	mov	r5, r3
 8008be8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bec:	2a30      	cmp	r2, #48	; 0x30
 8008bee:	d0fa      	beq.n	8008be6 <_dtoa_r+0xb8e>
 8008bf0:	e6d7      	b.n	80089a2 <_dtoa_r+0x94a>
 8008bf2:	9a01      	ldr	r2, [sp, #4]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d184      	bne.n	8008b02 <_dtoa_r+0xaaa>
 8008bf8:	9b00      	ldr	r3, [sp, #0]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	2331      	movs	r3, #49	; 0x31
 8008c00:	7013      	strb	r3, [r2, #0]
 8008c02:	e6ce      	b.n	80089a2 <_dtoa_r+0x94a>
 8008c04:	4b09      	ldr	r3, [pc, #36]	; (8008c2c <_dtoa_r+0xbd4>)
 8008c06:	f7ff ba95 	b.w	8008134 <_dtoa_r+0xdc>
 8008c0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f47f aa6e 	bne.w	80080ee <_dtoa_r+0x96>
 8008c12:	4b07      	ldr	r3, [pc, #28]	; (8008c30 <_dtoa_r+0xbd8>)
 8008c14:	f7ff ba8e 	b.w	8008134 <_dtoa_r+0xdc>
 8008c18:	9b02      	ldr	r3, [sp, #8]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	dcae      	bgt.n	8008b7c <_dtoa_r+0xb24>
 8008c1e:	9b06      	ldr	r3, [sp, #24]
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	f73f aea8 	bgt.w	8008976 <_dtoa_r+0x91e>
 8008c26:	e7a9      	b.n	8008b7c <_dtoa_r+0xb24>
 8008c28:	0800aa16 	.word	0x0800aa16
 8008c2c:	0800abf9 	.word	0x0800abf9
 8008c30:	0800a997 	.word	0x0800a997

08008c34 <__sflush_r>:
 8008c34:	898a      	ldrh	r2, [r1, #12]
 8008c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3a:	4605      	mov	r5, r0
 8008c3c:	0710      	lsls	r0, r2, #28
 8008c3e:	460c      	mov	r4, r1
 8008c40:	d458      	bmi.n	8008cf4 <__sflush_r+0xc0>
 8008c42:	684b      	ldr	r3, [r1, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	dc05      	bgt.n	8008c54 <__sflush_r+0x20>
 8008c48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	dc02      	bgt.n	8008c54 <__sflush_r+0x20>
 8008c4e:	2000      	movs	r0, #0
 8008c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c56:	2e00      	cmp	r6, #0
 8008c58:	d0f9      	beq.n	8008c4e <__sflush_r+0x1a>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c60:	682f      	ldr	r7, [r5, #0]
 8008c62:	602b      	str	r3, [r5, #0]
 8008c64:	d032      	beq.n	8008ccc <__sflush_r+0x98>
 8008c66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c68:	89a3      	ldrh	r3, [r4, #12]
 8008c6a:	075a      	lsls	r2, r3, #29
 8008c6c:	d505      	bpl.n	8008c7a <__sflush_r+0x46>
 8008c6e:	6863      	ldr	r3, [r4, #4]
 8008c70:	1ac0      	subs	r0, r0, r3
 8008c72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c74:	b10b      	cbz	r3, 8008c7a <__sflush_r+0x46>
 8008c76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c78:	1ac0      	subs	r0, r0, r3
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c80:	6a21      	ldr	r1, [r4, #32]
 8008c82:	4628      	mov	r0, r5
 8008c84:	47b0      	blx	r6
 8008c86:	1c43      	adds	r3, r0, #1
 8008c88:	89a3      	ldrh	r3, [r4, #12]
 8008c8a:	d106      	bne.n	8008c9a <__sflush_r+0x66>
 8008c8c:	6829      	ldr	r1, [r5, #0]
 8008c8e:	291d      	cmp	r1, #29
 8008c90:	d82c      	bhi.n	8008cec <__sflush_r+0xb8>
 8008c92:	4a2a      	ldr	r2, [pc, #168]	; (8008d3c <__sflush_r+0x108>)
 8008c94:	40ca      	lsrs	r2, r1
 8008c96:	07d6      	lsls	r6, r2, #31
 8008c98:	d528      	bpl.n	8008cec <__sflush_r+0xb8>
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	6062      	str	r2, [r4, #4]
 8008c9e:	04d9      	lsls	r1, r3, #19
 8008ca0:	6922      	ldr	r2, [r4, #16]
 8008ca2:	6022      	str	r2, [r4, #0]
 8008ca4:	d504      	bpl.n	8008cb0 <__sflush_r+0x7c>
 8008ca6:	1c42      	adds	r2, r0, #1
 8008ca8:	d101      	bne.n	8008cae <__sflush_r+0x7a>
 8008caa:	682b      	ldr	r3, [r5, #0]
 8008cac:	b903      	cbnz	r3, 8008cb0 <__sflush_r+0x7c>
 8008cae:	6560      	str	r0, [r4, #84]	; 0x54
 8008cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cb2:	602f      	str	r7, [r5, #0]
 8008cb4:	2900      	cmp	r1, #0
 8008cb6:	d0ca      	beq.n	8008c4e <__sflush_r+0x1a>
 8008cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cbc:	4299      	cmp	r1, r3
 8008cbe:	d002      	beq.n	8008cc6 <__sflush_r+0x92>
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	f000 fd9f 	bl	8009804 <_free_r>
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	6360      	str	r0, [r4, #52]	; 0x34
 8008cca:	e7c1      	b.n	8008c50 <__sflush_r+0x1c>
 8008ccc:	6a21      	ldr	r1, [r4, #32]
 8008cce:	2301      	movs	r3, #1
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	47b0      	blx	r6
 8008cd4:	1c41      	adds	r1, r0, #1
 8008cd6:	d1c7      	bne.n	8008c68 <__sflush_r+0x34>
 8008cd8:	682b      	ldr	r3, [r5, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d0c4      	beq.n	8008c68 <__sflush_r+0x34>
 8008cde:	2b1d      	cmp	r3, #29
 8008ce0:	d001      	beq.n	8008ce6 <__sflush_r+0xb2>
 8008ce2:	2b16      	cmp	r3, #22
 8008ce4:	d101      	bne.n	8008cea <__sflush_r+0xb6>
 8008ce6:	602f      	str	r7, [r5, #0]
 8008ce8:	e7b1      	b.n	8008c4e <__sflush_r+0x1a>
 8008cea:	89a3      	ldrh	r3, [r4, #12]
 8008cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cf0:	81a3      	strh	r3, [r4, #12]
 8008cf2:	e7ad      	b.n	8008c50 <__sflush_r+0x1c>
 8008cf4:	690f      	ldr	r7, [r1, #16]
 8008cf6:	2f00      	cmp	r7, #0
 8008cf8:	d0a9      	beq.n	8008c4e <__sflush_r+0x1a>
 8008cfa:	0793      	lsls	r3, r2, #30
 8008cfc:	680e      	ldr	r6, [r1, #0]
 8008cfe:	bf08      	it	eq
 8008d00:	694b      	ldreq	r3, [r1, #20]
 8008d02:	600f      	str	r7, [r1, #0]
 8008d04:	bf18      	it	ne
 8008d06:	2300      	movne	r3, #0
 8008d08:	eba6 0807 	sub.w	r8, r6, r7
 8008d0c:	608b      	str	r3, [r1, #8]
 8008d0e:	f1b8 0f00 	cmp.w	r8, #0
 8008d12:	dd9c      	ble.n	8008c4e <__sflush_r+0x1a>
 8008d14:	6a21      	ldr	r1, [r4, #32]
 8008d16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d18:	4643      	mov	r3, r8
 8008d1a:	463a      	mov	r2, r7
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	47b0      	blx	r6
 8008d20:	2800      	cmp	r0, #0
 8008d22:	dc06      	bgt.n	8008d32 <__sflush_r+0xfe>
 8008d24:	89a3      	ldrh	r3, [r4, #12]
 8008d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d2a:	81a3      	strh	r3, [r4, #12]
 8008d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d30:	e78e      	b.n	8008c50 <__sflush_r+0x1c>
 8008d32:	4407      	add	r7, r0
 8008d34:	eba8 0800 	sub.w	r8, r8, r0
 8008d38:	e7e9      	b.n	8008d0e <__sflush_r+0xda>
 8008d3a:	bf00      	nop
 8008d3c:	20400001 	.word	0x20400001

08008d40 <_fflush_r>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	690b      	ldr	r3, [r1, #16]
 8008d44:	4605      	mov	r5, r0
 8008d46:	460c      	mov	r4, r1
 8008d48:	b913      	cbnz	r3, 8008d50 <_fflush_r+0x10>
 8008d4a:	2500      	movs	r5, #0
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	bd38      	pop	{r3, r4, r5, pc}
 8008d50:	b118      	cbz	r0, 8008d5a <_fflush_r+0x1a>
 8008d52:	6983      	ldr	r3, [r0, #24]
 8008d54:	b90b      	cbnz	r3, 8008d5a <_fflush_r+0x1a>
 8008d56:	f000 f887 	bl	8008e68 <__sinit>
 8008d5a:	4b14      	ldr	r3, [pc, #80]	; (8008dac <_fflush_r+0x6c>)
 8008d5c:	429c      	cmp	r4, r3
 8008d5e:	d11b      	bne.n	8008d98 <_fflush_r+0x58>
 8008d60:	686c      	ldr	r4, [r5, #4]
 8008d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d0ef      	beq.n	8008d4a <_fflush_r+0xa>
 8008d6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d6c:	07d0      	lsls	r0, r2, #31
 8008d6e:	d404      	bmi.n	8008d7a <_fflush_r+0x3a>
 8008d70:	0599      	lsls	r1, r3, #22
 8008d72:	d402      	bmi.n	8008d7a <_fflush_r+0x3a>
 8008d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d76:	f000 f91a 	bl	8008fae <__retarget_lock_acquire_recursive>
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	f7ff ff59 	bl	8008c34 <__sflush_r>
 8008d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d84:	07da      	lsls	r2, r3, #31
 8008d86:	4605      	mov	r5, r0
 8008d88:	d4e0      	bmi.n	8008d4c <_fflush_r+0xc>
 8008d8a:	89a3      	ldrh	r3, [r4, #12]
 8008d8c:	059b      	lsls	r3, r3, #22
 8008d8e:	d4dd      	bmi.n	8008d4c <_fflush_r+0xc>
 8008d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d92:	f000 f90d 	bl	8008fb0 <__retarget_lock_release_recursive>
 8008d96:	e7d9      	b.n	8008d4c <_fflush_r+0xc>
 8008d98:	4b05      	ldr	r3, [pc, #20]	; (8008db0 <_fflush_r+0x70>)
 8008d9a:	429c      	cmp	r4, r3
 8008d9c:	d101      	bne.n	8008da2 <_fflush_r+0x62>
 8008d9e:	68ac      	ldr	r4, [r5, #8]
 8008da0:	e7df      	b.n	8008d62 <_fflush_r+0x22>
 8008da2:	4b04      	ldr	r3, [pc, #16]	; (8008db4 <_fflush_r+0x74>)
 8008da4:	429c      	cmp	r4, r3
 8008da6:	bf08      	it	eq
 8008da8:	68ec      	ldreq	r4, [r5, #12]
 8008daa:	e7da      	b.n	8008d62 <_fflush_r+0x22>
 8008dac:	0800aa48 	.word	0x0800aa48
 8008db0:	0800aa68 	.word	0x0800aa68
 8008db4:	0800aa28 	.word	0x0800aa28

08008db8 <std>:
 8008db8:	2300      	movs	r3, #0
 8008dba:	b510      	push	{r4, lr}
 8008dbc:	4604      	mov	r4, r0
 8008dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8008dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dc6:	6083      	str	r3, [r0, #8]
 8008dc8:	8181      	strh	r1, [r0, #12]
 8008dca:	6643      	str	r3, [r0, #100]	; 0x64
 8008dcc:	81c2      	strh	r2, [r0, #14]
 8008dce:	6183      	str	r3, [r0, #24]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	2208      	movs	r2, #8
 8008dd4:	305c      	adds	r0, #92	; 0x5c
 8008dd6:	f7fe f9d1 	bl	800717c <memset>
 8008dda:	4b05      	ldr	r3, [pc, #20]	; (8008df0 <std+0x38>)
 8008ddc:	6263      	str	r3, [r4, #36]	; 0x24
 8008dde:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <std+0x3c>)
 8008de0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008de2:	4b05      	ldr	r3, [pc, #20]	; (8008df8 <std+0x40>)
 8008de4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008de6:	4b05      	ldr	r3, [pc, #20]	; (8008dfc <std+0x44>)
 8008de8:	6224      	str	r4, [r4, #32]
 8008dea:	6323      	str	r3, [r4, #48]	; 0x30
 8008dec:	bd10      	pop	{r4, pc}
 8008dee:	bf00      	nop
 8008df0:	08007bd5 	.word	0x08007bd5
 8008df4:	08007bfb 	.word	0x08007bfb
 8008df8:	08007c33 	.word	0x08007c33
 8008dfc:	08007c57 	.word	0x08007c57

08008e00 <_cleanup_r>:
 8008e00:	4901      	ldr	r1, [pc, #4]	; (8008e08 <_cleanup_r+0x8>)
 8008e02:	f000 b8af 	b.w	8008f64 <_fwalk_reent>
 8008e06:	bf00      	nop
 8008e08:	08008d41 	.word	0x08008d41

08008e0c <__sfmoreglue>:
 8008e0c:	b570      	push	{r4, r5, r6, lr}
 8008e0e:	2268      	movs	r2, #104	; 0x68
 8008e10:	1e4d      	subs	r5, r1, #1
 8008e12:	4355      	muls	r5, r2
 8008e14:	460e      	mov	r6, r1
 8008e16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e1a:	f000 fd5f 	bl	80098dc <_malloc_r>
 8008e1e:	4604      	mov	r4, r0
 8008e20:	b140      	cbz	r0, 8008e34 <__sfmoreglue+0x28>
 8008e22:	2100      	movs	r1, #0
 8008e24:	e9c0 1600 	strd	r1, r6, [r0]
 8008e28:	300c      	adds	r0, #12
 8008e2a:	60a0      	str	r0, [r4, #8]
 8008e2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e30:	f7fe f9a4 	bl	800717c <memset>
 8008e34:	4620      	mov	r0, r4
 8008e36:	bd70      	pop	{r4, r5, r6, pc}

08008e38 <__sfp_lock_acquire>:
 8008e38:	4801      	ldr	r0, [pc, #4]	; (8008e40 <__sfp_lock_acquire+0x8>)
 8008e3a:	f000 b8b8 	b.w	8008fae <__retarget_lock_acquire_recursive>
 8008e3e:	bf00      	nop
 8008e40:	200007a9 	.word	0x200007a9

08008e44 <__sfp_lock_release>:
 8008e44:	4801      	ldr	r0, [pc, #4]	; (8008e4c <__sfp_lock_release+0x8>)
 8008e46:	f000 b8b3 	b.w	8008fb0 <__retarget_lock_release_recursive>
 8008e4a:	bf00      	nop
 8008e4c:	200007a9 	.word	0x200007a9

08008e50 <__sinit_lock_acquire>:
 8008e50:	4801      	ldr	r0, [pc, #4]	; (8008e58 <__sinit_lock_acquire+0x8>)
 8008e52:	f000 b8ac 	b.w	8008fae <__retarget_lock_acquire_recursive>
 8008e56:	bf00      	nop
 8008e58:	200007aa 	.word	0x200007aa

08008e5c <__sinit_lock_release>:
 8008e5c:	4801      	ldr	r0, [pc, #4]	; (8008e64 <__sinit_lock_release+0x8>)
 8008e5e:	f000 b8a7 	b.w	8008fb0 <__retarget_lock_release_recursive>
 8008e62:	bf00      	nop
 8008e64:	200007aa 	.word	0x200007aa

08008e68 <__sinit>:
 8008e68:	b510      	push	{r4, lr}
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	f7ff fff0 	bl	8008e50 <__sinit_lock_acquire>
 8008e70:	69a3      	ldr	r3, [r4, #24]
 8008e72:	b11b      	cbz	r3, 8008e7c <__sinit+0x14>
 8008e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e78:	f7ff bff0 	b.w	8008e5c <__sinit_lock_release>
 8008e7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e80:	6523      	str	r3, [r4, #80]	; 0x50
 8008e82:	4b13      	ldr	r3, [pc, #76]	; (8008ed0 <__sinit+0x68>)
 8008e84:	4a13      	ldr	r2, [pc, #76]	; (8008ed4 <__sinit+0x6c>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e8a:	42a3      	cmp	r3, r4
 8008e8c:	bf04      	itt	eq
 8008e8e:	2301      	moveq	r3, #1
 8008e90:	61a3      	streq	r3, [r4, #24]
 8008e92:	4620      	mov	r0, r4
 8008e94:	f000 f820 	bl	8008ed8 <__sfp>
 8008e98:	6060      	str	r0, [r4, #4]
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 f81c 	bl	8008ed8 <__sfp>
 8008ea0:	60a0      	str	r0, [r4, #8]
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f000 f818 	bl	8008ed8 <__sfp>
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	60e0      	str	r0, [r4, #12]
 8008eac:	2104      	movs	r1, #4
 8008eae:	6860      	ldr	r0, [r4, #4]
 8008eb0:	f7ff ff82 	bl	8008db8 <std>
 8008eb4:	68a0      	ldr	r0, [r4, #8]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	2109      	movs	r1, #9
 8008eba:	f7ff ff7d 	bl	8008db8 <std>
 8008ebe:	68e0      	ldr	r0, [r4, #12]
 8008ec0:	2202      	movs	r2, #2
 8008ec2:	2112      	movs	r1, #18
 8008ec4:	f7ff ff78 	bl	8008db8 <std>
 8008ec8:	2301      	movs	r3, #1
 8008eca:	61a3      	str	r3, [r4, #24]
 8008ecc:	e7d2      	b.n	8008e74 <__sinit+0xc>
 8008ece:	bf00      	nop
 8008ed0:	0800a860 	.word	0x0800a860
 8008ed4:	08008e01 	.word	0x08008e01

08008ed8 <__sfp>:
 8008ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eda:	4607      	mov	r7, r0
 8008edc:	f7ff ffac 	bl	8008e38 <__sfp_lock_acquire>
 8008ee0:	4b1e      	ldr	r3, [pc, #120]	; (8008f5c <__sfp+0x84>)
 8008ee2:	681e      	ldr	r6, [r3, #0]
 8008ee4:	69b3      	ldr	r3, [r6, #24]
 8008ee6:	b913      	cbnz	r3, 8008eee <__sfp+0x16>
 8008ee8:	4630      	mov	r0, r6
 8008eea:	f7ff ffbd 	bl	8008e68 <__sinit>
 8008eee:	3648      	adds	r6, #72	; 0x48
 8008ef0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	d503      	bpl.n	8008f00 <__sfp+0x28>
 8008ef8:	6833      	ldr	r3, [r6, #0]
 8008efa:	b30b      	cbz	r3, 8008f40 <__sfp+0x68>
 8008efc:	6836      	ldr	r6, [r6, #0]
 8008efe:	e7f7      	b.n	8008ef0 <__sfp+0x18>
 8008f00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f04:	b9d5      	cbnz	r5, 8008f3c <__sfp+0x64>
 8008f06:	4b16      	ldr	r3, [pc, #88]	; (8008f60 <__sfp+0x88>)
 8008f08:	60e3      	str	r3, [r4, #12]
 8008f0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f0e:	6665      	str	r5, [r4, #100]	; 0x64
 8008f10:	f000 f84c 	bl	8008fac <__retarget_lock_init_recursive>
 8008f14:	f7ff ff96 	bl	8008e44 <__sfp_lock_release>
 8008f18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f20:	6025      	str	r5, [r4, #0]
 8008f22:	61a5      	str	r5, [r4, #24]
 8008f24:	2208      	movs	r2, #8
 8008f26:	4629      	mov	r1, r5
 8008f28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f2c:	f7fe f926 	bl	800717c <memset>
 8008f30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f38:	4620      	mov	r0, r4
 8008f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f3c:	3468      	adds	r4, #104	; 0x68
 8008f3e:	e7d9      	b.n	8008ef4 <__sfp+0x1c>
 8008f40:	2104      	movs	r1, #4
 8008f42:	4638      	mov	r0, r7
 8008f44:	f7ff ff62 	bl	8008e0c <__sfmoreglue>
 8008f48:	4604      	mov	r4, r0
 8008f4a:	6030      	str	r0, [r6, #0]
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d1d5      	bne.n	8008efc <__sfp+0x24>
 8008f50:	f7ff ff78 	bl	8008e44 <__sfp_lock_release>
 8008f54:	230c      	movs	r3, #12
 8008f56:	603b      	str	r3, [r7, #0]
 8008f58:	e7ee      	b.n	8008f38 <__sfp+0x60>
 8008f5a:	bf00      	nop
 8008f5c:	0800a860 	.word	0x0800a860
 8008f60:	ffff0001 	.word	0xffff0001

08008f64 <_fwalk_reent>:
 8008f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f68:	4606      	mov	r6, r0
 8008f6a:	4688      	mov	r8, r1
 8008f6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f70:	2700      	movs	r7, #0
 8008f72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f76:	f1b9 0901 	subs.w	r9, r9, #1
 8008f7a:	d505      	bpl.n	8008f88 <_fwalk_reent+0x24>
 8008f7c:	6824      	ldr	r4, [r4, #0]
 8008f7e:	2c00      	cmp	r4, #0
 8008f80:	d1f7      	bne.n	8008f72 <_fwalk_reent+0xe>
 8008f82:	4638      	mov	r0, r7
 8008f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f88:	89ab      	ldrh	r3, [r5, #12]
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d907      	bls.n	8008f9e <_fwalk_reent+0x3a>
 8008f8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f92:	3301      	adds	r3, #1
 8008f94:	d003      	beq.n	8008f9e <_fwalk_reent+0x3a>
 8008f96:	4629      	mov	r1, r5
 8008f98:	4630      	mov	r0, r6
 8008f9a:	47c0      	blx	r8
 8008f9c:	4307      	orrs	r7, r0
 8008f9e:	3568      	adds	r5, #104	; 0x68
 8008fa0:	e7e9      	b.n	8008f76 <_fwalk_reent+0x12>
	...

08008fa4 <_localeconv_r>:
 8008fa4:	4800      	ldr	r0, [pc, #0]	; (8008fa8 <_localeconv_r+0x4>)
 8008fa6:	4770      	bx	lr
 8008fa8:	20000240 	.word	0x20000240

08008fac <__retarget_lock_init_recursive>:
 8008fac:	4770      	bx	lr

08008fae <__retarget_lock_acquire_recursive>:
 8008fae:	4770      	bx	lr

08008fb0 <__retarget_lock_release_recursive>:
 8008fb0:	4770      	bx	lr
	...

08008fb4 <_lseek_r>:
 8008fb4:	b538      	push	{r3, r4, r5, lr}
 8008fb6:	4d07      	ldr	r5, [pc, #28]	; (8008fd4 <_lseek_r+0x20>)
 8008fb8:	4604      	mov	r4, r0
 8008fba:	4608      	mov	r0, r1
 8008fbc:	4611      	mov	r1, r2
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	602a      	str	r2, [r5, #0]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	f7f9 fae4 	bl	8002590 <_lseek>
 8008fc8:	1c43      	adds	r3, r0, #1
 8008fca:	d102      	bne.n	8008fd2 <_lseek_r+0x1e>
 8008fcc:	682b      	ldr	r3, [r5, #0]
 8008fce:	b103      	cbz	r3, 8008fd2 <_lseek_r+0x1e>
 8008fd0:	6023      	str	r3, [r4, #0]
 8008fd2:	bd38      	pop	{r3, r4, r5, pc}
 8008fd4:	200007b4 	.word	0x200007b4

08008fd8 <__swhatbuf_r>:
 8008fd8:	b570      	push	{r4, r5, r6, lr}
 8008fda:	460e      	mov	r6, r1
 8008fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fe0:	2900      	cmp	r1, #0
 8008fe2:	b096      	sub	sp, #88	; 0x58
 8008fe4:	4614      	mov	r4, r2
 8008fe6:	461d      	mov	r5, r3
 8008fe8:	da08      	bge.n	8008ffc <__swhatbuf_r+0x24>
 8008fea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	602a      	str	r2, [r5, #0]
 8008ff2:	061a      	lsls	r2, r3, #24
 8008ff4:	d410      	bmi.n	8009018 <__swhatbuf_r+0x40>
 8008ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ffa:	e00e      	b.n	800901a <__swhatbuf_r+0x42>
 8008ffc:	466a      	mov	r2, sp
 8008ffe:	f001 fa97 	bl	800a530 <_fstat_r>
 8009002:	2800      	cmp	r0, #0
 8009004:	dbf1      	blt.n	8008fea <__swhatbuf_r+0x12>
 8009006:	9a01      	ldr	r2, [sp, #4]
 8009008:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800900c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009010:	425a      	negs	r2, r3
 8009012:	415a      	adcs	r2, r3
 8009014:	602a      	str	r2, [r5, #0]
 8009016:	e7ee      	b.n	8008ff6 <__swhatbuf_r+0x1e>
 8009018:	2340      	movs	r3, #64	; 0x40
 800901a:	2000      	movs	r0, #0
 800901c:	6023      	str	r3, [r4, #0]
 800901e:	b016      	add	sp, #88	; 0x58
 8009020:	bd70      	pop	{r4, r5, r6, pc}
	...

08009024 <__smakebuf_r>:
 8009024:	898b      	ldrh	r3, [r1, #12]
 8009026:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009028:	079d      	lsls	r5, r3, #30
 800902a:	4606      	mov	r6, r0
 800902c:	460c      	mov	r4, r1
 800902e:	d507      	bpl.n	8009040 <__smakebuf_r+0x1c>
 8009030:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	6123      	str	r3, [r4, #16]
 8009038:	2301      	movs	r3, #1
 800903a:	6163      	str	r3, [r4, #20]
 800903c:	b002      	add	sp, #8
 800903e:	bd70      	pop	{r4, r5, r6, pc}
 8009040:	ab01      	add	r3, sp, #4
 8009042:	466a      	mov	r2, sp
 8009044:	f7ff ffc8 	bl	8008fd8 <__swhatbuf_r>
 8009048:	9900      	ldr	r1, [sp, #0]
 800904a:	4605      	mov	r5, r0
 800904c:	4630      	mov	r0, r6
 800904e:	f000 fc45 	bl	80098dc <_malloc_r>
 8009052:	b948      	cbnz	r0, 8009068 <__smakebuf_r+0x44>
 8009054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009058:	059a      	lsls	r2, r3, #22
 800905a:	d4ef      	bmi.n	800903c <__smakebuf_r+0x18>
 800905c:	f023 0303 	bic.w	r3, r3, #3
 8009060:	f043 0302 	orr.w	r3, r3, #2
 8009064:	81a3      	strh	r3, [r4, #12]
 8009066:	e7e3      	b.n	8009030 <__smakebuf_r+0xc>
 8009068:	4b0d      	ldr	r3, [pc, #52]	; (80090a0 <__smakebuf_r+0x7c>)
 800906a:	62b3      	str	r3, [r6, #40]	; 0x28
 800906c:	89a3      	ldrh	r3, [r4, #12]
 800906e:	6020      	str	r0, [r4, #0]
 8009070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009074:	81a3      	strh	r3, [r4, #12]
 8009076:	9b00      	ldr	r3, [sp, #0]
 8009078:	6163      	str	r3, [r4, #20]
 800907a:	9b01      	ldr	r3, [sp, #4]
 800907c:	6120      	str	r0, [r4, #16]
 800907e:	b15b      	cbz	r3, 8009098 <__smakebuf_r+0x74>
 8009080:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009084:	4630      	mov	r0, r6
 8009086:	f001 fa65 	bl	800a554 <_isatty_r>
 800908a:	b128      	cbz	r0, 8009098 <__smakebuf_r+0x74>
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	f023 0303 	bic.w	r3, r3, #3
 8009092:	f043 0301 	orr.w	r3, r3, #1
 8009096:	81a3      	strh	r3, [r4, #12]
 8009098:	89a0      	ldrh	r0, [r4, #12]
 800909a:	4305      	orrs	r5, r0
 800909c:	81a5      	strh	r5, [r4, #12]
 800909e:	e7cd      	b.n	800903c <__smakebuf_r+0x18>
 80090a0:	08008e01 	.word	0x08008e01

080090a4 <malloc>:
 80090a4:	4b02      	ldr	r3, [pc, #8]	; (80090b0 <malloc+0xc>)
 80090a6:	4601      	mov	r1, r0
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	f000 bc17 	b.w	80098dc <_malloc_r>
 80090ae:	bf00      	nop
 80090b0:	200000ec 	.word	0x200000ec

080090b4 <memcpy>:
 80090b4:	440a      	add	r2, r1
 80090b6:	4291      	cmp	r1, r2
 80090b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80090bc:	d100      	bne.n	80090c0 <memcpy+0xc>
 80090be:	4770      	bx	lr
 80090c0:	b510      	push	{r4, lr}
 80090c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090ca:	4291      	cmp	r1, r2
 80090cc:	d1f9      	bne.n	80090c2 <memcpy+0xe>
 80090ce:	bd10      	pop	{r4, pc}

080090d0 <_Balloc>:
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090d4:	4604      	mov	r4, r0
 80090d6:	460d      	mov	r5, r1
 80090d8:	b976      	cbnz	r6, 80090f8 <_Balloc+0x28>
 80090da:	2010      	movs	r0, #16
 80090dc:	f7ff ffe2 	bl	80090a4 <malloc>
 80090e0:	4602      	mov	r2, r0
 80090e2:	6260      	str	r0, [r4, #36]	; 0x24
 80090e4:	b920      	cbnz	r0, 80090f0 <_Balloc+0x20>
 80090e6:	4b18      	ldr	r3, [pc, #96]	; (8009148 <_Balloc+0x78>)
 80090e8:	4818      	ldr	r0, [pc, #96]	; (800914c <_Balloc+0x7c>)
 80090ea:	2166      	movs	r1, #102	; 0x66
 80090ec:	f001 f9f0 	bl	800a4d0 <__assert_func>
 80090f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090f4:	6006      	str	r6, [r0, #0]
 80090f6:	60c6      	str	r6, [r0, #12]
 80090f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80090fa:	68f3      	ldr	r3, [r6, #12]
 80090fc:	b183      	cbz	r3, 8009120 <_Balloc+0x50>
 80090fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009106:	b9b8      	cbnz	r0, 8009138 <_Balloc+0x68>
 8009108:	2101      	movs	r1, #1
 800910a:	fa01 f605 	lsl.w	r6, r1, r5
 800910e:	1d72      	adds	r2, r6, #5
 8009110:	0092      	lsls	r2, r2, #2
 8009112:	4620      	mov	r0, r4
 8009114:	f000 fb60 	bl	80097d8 <_calloc_r>
 8009118:	b160      	cbz	r0, 8009134 <_Balloc+0x64>
 800911a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800911e:	e00e      	b.n	800913e <_Balloc+0x6e>
 8009120:	2221      	movs	r2, #33	; 0x21
 8009122:	2104      	movs	r1, #4
 8009124:	4620      	mov	r0, r4
 8009126:	f000 fb57 	bl	80097d8 <_calloc_r>
 800912a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800912c:	60f0      	str	r0, [r6, #12]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1e4      	bne.n	80090fe <_Balloc+0x2e>
 8009134:	2000      	movs	r0, #0
 8009136:	bd70      	pop	{r4, r5, r6, pc}
 8009138:	6802      	ldr	r2, [r0, #0]
 800913a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800913e:	2300      	movs	r3, #0
 8009140:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009144:	e7f7      	b.n	8009136 <_Balloc+0x66>
 8009146:	bf00      	nop
 8009148:	0800a9a4 	.word	0x0800a9a4
 800914c:	0800aa88 	.word	0x0800aa88

08009150 <_Bfree>:
 8009150:	b570      	push	{r4, r5, r6, lr}
 8009152:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009154:	4605      	mov	r5, r0
 8009156:	460c      	mov	r4, r1
 8009158:	b976      	cbnz	r6, 8009178 <_Bfree+0x28>
 800915a:	2010      	movs	r0, #16
 800915c:	f7ff ffa2 	bl	80090a4 <malloc>
 8009160:	4602      	mov	r2, r0
 8009162:	6268      	str	r0, [r5, #36]	; 0x24
 8009164:	b920      	cbnz	r0, 8009170 <_Bfree+0x20>
 8009166:	4b09      	ldr	r3, [pc, #36]	; (800918c <_Bfree+0x3c>)
 8009168:	4809      	ldr	r0, [pc, #36]	; (8009190 <_Bfree+0x40>)
 800916a:	218a      	movs	r1, #138	; 0x8a
 800916c:	f001 f9b0 	bl	800a4d0 <__assert_func>
 8009170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009174:	6006      	str	r6, [r0, #0]
 8009176:	60c6      	str	r6, [r0, #12]
 8009178:	b13c      	cbz	r4, 800918a <_Bfree+0x3a>
 800917a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800917c:	6862      	ldr	r2, [r4, #4]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009184:	6021      	str	r1, [r4, #0]
 8009186:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800918a:	bd70      	pop	{r4, r5, r6, pc}
 800918c:	0800a9a4 	.word	0x0800a9a4
 8009190:	0800aa88 	.word	0x0800aa88

08009194 <__multadd>:
 8009194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009198:	690d      	ldr	r5, [r1, #16]
 800919a:	4607      	mov	r7, r0
 800919c:	460c      	mov	r4, r1
 800919e:	461e      	mov	r6, r3
 80091a0:	f101 0c14 	add.w	ip, r1, #20
 80091a4:	2000      	movs	r0, #0
 80091a6:	f8dc 3000 	ldr.w	r3, [ip]
 80091aa:	b299      	uxth	r1, r3
 80091ac:	fb02 6101 	mla	r1, r2, r1, r6
 80091b0:	0c1e      	lsrs	r6, r3, #16
 80091b2:	0c0b      	lsrs	r3, r1, #16
 80091b4:	fb02 3306 	mla	r3, r2, r6, r3
 80091b8:	b289      	uxth	r1, r1
 80091ba:	3001      	adds	r0, #1
 80091bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091c0:	4285      	cmp	r5, r0
 80091c2:	f84c 1b04 	str.w	r1, [ip], #4
 80091c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091ca:	dcec      	bgt.n	80091a6 <__multadd+0x12>
 80091cc:	b30e      	cbz	r6, 8009212 <__multadd+0x7e>
 80091ce:	68a3      	ldr	r3, [r4, #8]
 80091d0:	42ab      	cmp	r3, r5
 80091d2:	dc19      	bgt.n	8009208 <__multadd+0x74>
 80091d4:	6861      	ldr	r1, [r4, #4]
 80091d6:	4638      	mov	r0, r7
 80091d8:	3101      	adds	r1, #1
 80091da:	f7ff ff79 	bl	80090d0 <_Balloc>
 80091de:	4680      	mov	r8, r0
 80091e0:	b928      	cbnz	r0, 80091ee <__multadd+0x5a>
 80091e2:	4602      	mov	r2, r0
 80091e4:	4b0c      	ldr	r3, [pc, #48]	; (8009218 <__multadd+0x84>)
 80091e6:	480d      	ldr	r0, [pc, #52]	; (800921c <__multadd+0x88>)
 80091e8:	21b5      	movs	r1, #181	; 0xb5
 80091ea:	f001 f971 	bl	800a4d0 <__assert_func>
 80091ee:	6922      	ldr	r2, [r4, #16]
 80091f0:	3202      	adds	r2, #2
 80091f2:	f104 010c 	add.w	r1, r4, #12
 80091f6:	0092      	lsls	r2, r2, #2
 80091f8:	300c      	adds	r0, #12
 80091fa:	f7ff ff5b 	bl	80090b4 <memcpy>
 80091fe:	4621      	mov	r1, r4
 8009200:	4638      	mov	r0, r7
 8009202:	f7ff ffa5 	bl	8009150 <_Bfree>
 8009206:	4644      	mov	r4, r8
 8009208:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800920c:	3501      	adds	r5, #1
 800920e:	615e      	str	r6, [r3, #20]
 8009210:	6125      	str	r5, [r4, #16]
 8009212:	4620      	mov	r0, r4
 8009214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009218:	0800aa16 	.word	0x0800aa16
 800921c:	0800aa88 	.word	0x0800aa88

08009220 <__hi0bits>:
 8009220:	0c03      	lsrs	r3, r0, #16
 8009222:	041b      	lsls	r3, r3, #16
 8009224:	b9d3      	cbnz	r3, 800925c <__hi0bits+0x3c>
 8009226:	0400      	lsls	r0, r0, #16
 8009228:	2310      	movs	r3, #16
 800922a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800922e:	bf04      	itt	eq
 8009230:	0200      	lsleq	r0, r0, #8
 8009232:	3308      	addeq	r3, #8
 8009234:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009238:	bf04      	itt	eq
 800923a:	0100      	lsleq	r0, r0, #4
 800923c:	3304      	addeq	r3, #4
 800923e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009242:	bf04      	itt	eq
 8009244:	0080      	lsleq	r0, r0, #2
 8009246:	3302      	addeq	r3, #2
 8009248:	2800      	cmp	r0, #0
 800924a:	db05      	blt.n	8009258 <__hi0bits+0x38>
 800924c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009250:	f103 0301 	add.w	r3, r3, #1
 8009254:	bf08      	it	eq
 8009256:	2320      	moveq	r3, #32
 8009258:	4618      	mov	r0, r3
 800925a:	4770      	bx	lr
 800925c:	2300      	movs	r3, #0
 800925e:	e7e4      	b.n	800922a <__hi0bits+0xa>

08009260 <__lo0bits>:
 8009260:	6803      	ldr	r3, [r0, #0]
 8009262:	f013 0207 	ands.w	r2, r3, #7
 8009266:	4601      	mov	r1, r0
 8009268:	d00b      	beq.n	8009282 <__lo0bits+0x22>
 800926a:	07da      	lsls	r2, r3, #31
 800926c:	d423      	bmi.n	80092b6 <__lo0bits+0x56>
 800926e:	0798      	lsls	r0, r3, #30
 8009270:	bf49      	itett	mi
 8009272:	085b      	lsrmi	r3, r3, #1
 8009274:	089b      	lsrpl	r3, r3, #2
 8009276:	2001      	movmi	r0, #1
 8009278:	600b      	strmi	r3, [r1, #0]
 800927a:	bf5c      	itt	pl
 800927c:	600b      	strpl	r3, [r1, #0]
 800927e:	2002      	movpl	r0, #2
 8009280:	4770      	bx	lr
 8009282:	b298      	uxth	r0, r3
 8009284:	b9a8      	cbnz	r0, 80092b2 <__lo0bits+0x52>
 8009286:	0c1b      	lsrs	r3, r3, #16
 8009288:	2010      	movs	r0, #16
 800928a:	b2da      	uxtb	r2, r3
 800928c:	b90a      	cbnz	r2, 8009292 <__lo0bits+0x32>
 800928e:	3008      	adds	r0, #8
 8009290:	0a1b      	lsrs	r3, r3, #8
 8009292:	071a      	lsls	r2, r3, #28
 8009294:	bf04      	itt	eq
 8009296:	091b      	lsreq	r3, r3, #4
 8009298:	3004      	addeq	r0, #4
 800929a:	079a      	lsls	r2, r3, #30
 800929c:	bf04      	itt	eq
 800929e:	089b      	lsreq	r3, r3, #2
 80092a0:	3002      	addeq	r0, #2
 80092a2:	07da      	lsls	r2, r3, #31
 80092a4:	d403      	bmi.n	80092ae <__lo0bits+0x4e>
 80092a6:	085b      	lsrs	r3, r3, #1
 80092a8:	f100 0001 	add.w	r0, r0, #1
 80092ac:	d005      	beq.n	80092ba <__lo0bits+0x5a>
 80092ae:	600b      	str	r3, [r1, #0]
 80092b0:	4770      	bx	lr
 80092b2:	4610      	mov	r0, r2
 80092b4:	e7e9      	b.n	800928a <__lo0bits+0x2a>
 80092b6:	2000      	movs	r0, #0
 80092b8:	4770      	bx	lr
 80092ba:	2020      	movs	r0, #32
 80092bc:	4770      	bx	lr
	...

080092c0 <__i2b>:
 80092c0:	b510      	push	{r4, lr}
 80092c2:	460c      	mov	r4, r1
 80092c4:	2101      	movs	r1, #1
 80092c6:	f7ff ff03 	bl	80090d0 <_Balloc>
 80092ca:	4602      	mov	r2, r0
 80092cc:	b928      	cbnz	r0, 80092da <__i2b+0x1a>
 80092ce:	4b05      	ldr	r3, [pc, #20]	; (80092e4 <__i2b+0x24>)
 80092d0:	4805      	ldr	r0, [pc, #20]	; (80092e8 <__i2b+0x28>)
 80092d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80092d6:	f001 f8fb 	bl	800a4d0 <__assert_func>
 80092da:	2301      	movs	r3, #1
 80092dc:	6144      	str	r4, [r0, #20]
 80092de:	6103      	str	r3, [r0, #16]
 80092e0:	bd10      	pop	{r4, pc}
 80092e2:	bf00      	nop
 80092e4:	0800aa16 	.word	0x0800aa16
 80092e8:	0800aa88 	.word	0x0800aa88

080092ec <__multiply>:
 80092ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f0:	4691      	mov	r9, r2
 80092f2:	690a      	ldr	r2, [r1, #16]
 80092f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	bfb8      	it	lt
 80092fc:	460b      	movlt	r3, r1
 80092fe:	460c      	mov	r4, r1
 8009300:	bfbc      	itt	lt
 8009302:	464c      	movlt	r4, r9
 8009304:	4699      	movlt	r9, r3
 8009306:	6927      	ldr	r7, [r4, #16]
 8009308:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800930c:	68a3      	ldr	r3, [r4, #8]
 800930e:	6861      	ldr	r1, [r4, #4]
 8009310:	eb07 060a 	add.w	r6, r7, sl
 8009314:	42b3      	cmp	r3, r6
 8009316:	b085      	sub	sp, #20
 8009318:	bfb8      	it	lt
 800931a:	3101      	addlt	r1, #1
 800931c:	f7ff fed8 	bl	80090d0 <_Balloc>
 8009320:	b930      	cbnz	r0, 8009330 <__multiply+0x44>
 8009322:	4602      	mov	r2, r0
 8009324:	4b44      	ldr	r3, [pc, #272]	; (8009438 <__multiply+0x14c>)
 8009326:	4845      	ldr	r0, [pc, #276]	; (800943c <__multiply+0x150>)
 8009328:	f240 115d 	movw	r1, #349	; 0x15d
 800932c:	f001 f8d0 	bl	800a4d0 <__assert_func>
 8009330:	f100 0514 	add.w	r5, r0, #20
 8009334:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009338:	462b      	mov	r3, r5
 800933a:	2200      	movs	r2, #0
 800933c:	4543      	cmp	r3, r8
 800933e:	d321      	bcc.n	8009384 <__multiply+0x98>
 8009340:	f104 0314 	add.w	r3, r4, #20
 8009344:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009348:	f109 0314 	add.w	r3, r9, #20
 800934c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009350:	9202      	str	r2, [sp, #8]
 8009352:	1b3a      	subs	r2, r7, r4
 8009354:	3a15      	subs	r2, #21
 8009356:	f022 0203 	bic.w	r2, r2, #3
 800935a:	3204      	adds	r2, #4
 800935c:	f104 0115 	add.w	r1, r4, #21
 8009360:	428f      	cmp	r7, r1
 8009362:	bf38      	it	cc
 8009364:	2204      	movcc	r2, #4
 8009366:	9201      	str	r2, [sp, #4]
 8009368:	9a02      	ldr	r2, [sp, #8]
 800936a:	9303      	str	r3, [sp, #12]
 800936c:	429a      	cmp	r2, r3
 800936e:	d80c      	bhi.n	800938a <__multiply+0x9e>
 8009370:	2e00      	cmp	r6, #0
 8009372:	dd03      	ble.n	800937c <__multiply+0x90>
 8009374:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009378:	2b00      	cmp	r3, #0
 800937a:	d05a      	beq.n	8009432 <__multiply+0x146>
 800937c:	6106      	str	r6, [r0, #16]
 800937e:	b005      	add	sp, #20
 8009380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009384:	f843 2b04 	str.w	r2, [r3], #4
 8009388:	e7d8      	b.n	800933c <__multiply+0x50>
 800938a:	f8b3 a000 	ldrh.w	sl, [r3]
 800938e:	f1ba 0f00 	cmp.w	sl, #0
 8009392:	d024      	beq.n	80093de <__multiply+0xf2>
 8009394:	f104 0e14 	add.w	lr, r4, #20
 8009398:	46a9      	mov	r9, r5
 800939a:	f04f 0c00 	mov.w	ip, #0
 800939e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80093a2:	f8d9 1000 	ldr.w	r1, [r9]
 80093a6:	fa1f fb82 	uxth.w	fp, r2
 80093aa:	b289      	uxth	r1, r1
 80093ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80093b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80093b4:	f8d9 2000 	ldr.w	r2, [r9]
 80093b8:	4461      	add	r1, ip
 80093ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093be:	fb0a c20b 	mla	r2, sl, fp, ip
 80093c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80093c6:	b289      	uxth	r1, r1
 80093c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80093cc:	4577      	cmp	r7, lr
 80093ce:	f849 1b04 	str.w	r1, [r9], #4
 80093d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093d6:	d8e2      	bhi.n	800939e <__multiply+0xb2>
 80093d8:	9a01      	ldr	r2, [sp, #4]
 80093da:	f845 c002 	str.w	ip, [r5, r2]
 80093de:	9a03      	ldr	r2, [sp, #12]
 80093e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093e4:	3304      	adds	r3, #4
 80093e6:	f1b9 0f00 	cmp.w	r9, #0
 80093ea:	d020      	beq.n	800942e <__multiply+0x142>
 80093ec:	6829      	ldr	r1, [r5, #0]
 80093ee:	f104 0c14 	add.w	ip, r4, #20
 80093f2:	46ae      	mov	lr, r5
 80093f4:	f04f 0a00 	mov.w	sl, #0
 80093f8:	f8bc b000 	ldrh.w	fp, [ip]
 80093fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009400:	fb09 220b 	mla	r2, r9, fp, r2
 8009404:	4492      	add	sl, r2
 8009406:	b289      	uxth	r1, r1
 8009408:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800940c:	f84e 1b04 	str.w	r1, [lr], #4
 8009410:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009414:	f8be 1000 	ldrh.w	r1, [lr]
 8009418:	0c12      	lsrs	r2, r2, #16
 800941a:	fb09 1102 	mla	r1, r9, r2, r1
 800941e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009422:	4567      	cmp	r7, ip
 8009424:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009428:	d8e6      	bhi.n	80093f8 <__multiply+0x10c>
 800942a:	9a01      	ldr	r2, [sp, #4]
 800942c:	50a9      	str	r1, [r5, r2]
 800942e:	3504      	adds	r5, #4
 8009430:	e79a      	b.n	8009368 <__multiply+0x7c>
 8009432:	3e01      	subs	r6, #1
 8009434:	e79c      	b.n	8009370 <__multiply+0x84>
 8009436:	bf00      	nop
 8009438:	0800aa16 	.word	0x0800aa16
 800943c:	0800aa88 	.word	0x0800aa88

08009440 <__pow5mult>:
 8009440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009444:	4615      	mov	r5, r2
 8009446:	f012 0203 	ands.w	r2, r2, #3
 800944a:	4606      	mov	r6, r0
 800944c:	460f      	mov	r7, r1
 800944e:	d007      	beq.n	8009460 <__pow5mult+0x20>
 8009450:	4c25      	ldr	r4, [pc, #148]	; (80094e8 <__pow5mult+0xa8>)
 8009452:	3a01      	subs	r2, #1
 8009454:	2300      	movs	r3, #0
 8009456:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800945a:	f7ff fe9b 	bl	8009194 <__multadd>
 800945e:	4607      	mov	r7, r0
 8009460:	10ad      	asrs	r5, r5, #2
 8009462:	d03d      	beq.n	80094e0 <__pow5mult+0xa0>
 8009464:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009466:	b97c      	cbnz	r4, 8009488 <__pow5mult+0x48>
 8009468:	2010      	movs	r0, #16
 800946a:	f7ff fe1b 	bl	80090a4 <malloc>
 800946e:	4602      	mov	r2, r0
 8009470:	6270      	str	r0, [r6, #36]	; 0x24
 8009472:	b928      	cbnz	r0, 8009480 <__pow5mult+0x40>
 8009474:	4b1d      	ldr	r3, [pc, #116]	; (80094ec <__pow5mult+0xac>)
 8009476:	481e      	ldr	r0, [pc, #120]	; (80094f0 <__pow5mult+0xb0>)
 8009478:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800947c:	f001 f828 	bl	800a4d0 <__assert_func>
 8009480:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009484:	6004      	str	r4, [r0, #0]
 8009486:	60c4      	str	r4, [r0, #12]
 8009488:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800948c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009490:	b94c      	cbnz	r4, 80094a6 <__pow5mult+0x66>
 8009492:	f240 2171 	movw	r1, #625	; 0x271
 8009496:	4630      	mov	r0, r6
 8009498:	f7ff ff12 	bl	80092c0 <__i2b>
 800949c:	2300      	movs	r3, #0
 800949e:	f8c8 0008 	str.w	r0, [r8, #8]
 80094a2:	4604      	mov	r4, r0
 80094a4:	6003      	str	r3, [r0, #0]
 80094a6:	f04f 0900 	mov.w	r9, #0
 80094aa:	07eb      	lsls	r3, r5, #31
 80094ac:	d50a      	bpl.n	80094c4 <__pow5mult+0x84>
 80094ae:	4639      	mov	r1, r7
 80094b0:	4622      	mov	r2, r4
 80094b2:	4630      	mov	r0, r6
 80094b4:	f7ff ff1a 	bl	80092ec <__multiply>
 80094b8:	4639      	mov	r1, r7
 80094ba:	4680      	mov	r8, r0
 80094bc:	4630      	mov	r0, r6
 80094be:	f7ff fe47 	bl	8009150 <_Bfree>
 80094c2:	4647      	mov	r7, r8
 80094c4:	106d      	asrs	r5, r5, #1
 80094c6:	d00b      	beq.n	80094e0 <__pow5mult+0xa0>
 80094c8:	6820      	ldr	r0, [r4, #0]
 80094ca:	b938      	cbnz	r0, 80094dc <__pow5mult+0x9c>
 80094cc:	4622      	mov	r2, r4
 80094ce:	4621      	mov	r1, r4
 80094d0:	4630      	mov	r0, r6
 80094d2:	f7ff ff0b 	bl	80092ec <__multiply>
 80094d6:	6020      	str	r0, [r4, #0]
 80094d8:	f8c0 9000 	str.w	r9, [r0]
 80094dc:	4604      	mov	r4, r0
 80094de:	e7e4      	b.n	80094aa <__pow5mult+0x6a>
 80094e0:	4638      	mov	r0, r7
 80094e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094e6:	bf00      	nop
 80094e8:	0800abd8 	.word	0x0800abd8
 80094ec:	0800a9a4 	.word	0x0800a9a4
 80094f0:	0800aa88 	.word	0x0800aa88

080094f4 <__lshift>:
 80094f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094f8:	460c      	mov	r4, r1
 80094fa:	6849      	ldr	r1, [r1, #4]
 80094fc:	6923      	ldr	r3, [r4, #16]
 80094fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009502:	68a3      	ldr	r3, [r4, #8]
 8009504:	4607      	mov	r7, r0
 8009506:	4691      	mov	r9, r2
 8009508:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800950c:	f108 0601 	add.w	r6, r8, #1
 8009510:	42b3      	cmp	r3, r6
 8009512:	db0b      	blt.n	800952c <__lshift+0x38>
 8009514:	4638      	mov	r0, r7
 8009516:	f7ff fddb 	bl	80090d0 <_Balloc>
 800951a:	4605      	mov	r5, r0
 800951c:	b948      	cbnz	r0, 8009532 <__lshift+0x3e>
 800951e:	4602      	mov	r2, r0
 8009520:	4b2a      	ldr	r3, [pc, #168]	; (80095cc <__lshift+0xd8>)
 8009522:	482b      	ldr	r0, [pc, #172]	; (80095d0 <__lshift+0xdc>)
 8009524:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009528:	f000 ffd2 	bl	800a4d0 <__assert_func>
 800952c:	3101      	adds	r1, #1
 800952e:	005b      	lsls	r3, r3, #1
 8009530:	e7ee      	b.n	8009510 <__lshift+0x1c>
 8009532:	2300      	movs	r3, #0
 8009534:	f100 0114 	add.w	r1, r0, #20
 8009538:	f100 0210 	add.w	r2, r0, #16
 800953c:	4618      	mov	r0, r3
 800953e:	4553      	cmp	r3, sl
 8009540:	db37      	blt.n	80095b2 <__lshift+0xbe>
 8009542:	6920      	ldr	r0, [r4, #16]
 8009544:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009548:	f104 0314 	add.w	r3, r4, #20
 800954c:	f019 091f 	ands.w	r9, r9, #31
 8009550:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009554:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009558:	d02f      	beq.n	80095ba <__lshift+0xc6>
 800955a:	f1c9 0e20 	rsb	lr, r9, #32
 800955e:	468a      	mov	sl, r1
 8009560:	f04f 0c00 	mov.w	ip, #0
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	fa02 f209 	lsl.w	r2, r2, r9
 800956a:	ea42 020c 	orr.w	r2, r2, ip
 800956e:	f84a 2b04 	str.w	r2, [sl], #4
 8009572:	f853 2b04 	ldr.w	r2, [r3], #4
 8009576:	4298      	cmp	r0, r3
 8009578:	fa22 fc0e 	lsr.w	ip, r2, lr
 800957c:	d8f2      	bhi.n	8009564 <__lshift+0x70>
 800957e:	1b03      	subs	r3, r0, r4
 8009580:	3b15      	subs	r3, #21
 8009582:	f023 0303 	bic.w	r3, r3, #3
 8009586:	3304      	adds	r3, #4
 8009588:	f104 0215 	add.w	r2, r4, #21
 800958c:	4290      	cmp	r0, r2
 800958e:	bf38      	it	cc
 8009590:	2304      	movcc	r3, #4
 8009592:	f841 c003 	str.w	ip, [r1, r3]
 8009596:	f1bc 0f00 	cmp.w	ip, #0
 800959a:	d001      	beq.n	80095a0 <__lshift+0xac>
 800959c:	f108 0602 	add.w	r6, r8, #2
 80095a0:	3e01      	subs	r6, #1
 80095a2:	4638      	mov	r0, r7
 80095a4:	612e      	str	r6, [r5, #16]
 80095a6:	4621      	mov	r1, r4
 80095a8:	f7ff fdd2 	bl	8009150 <_Bfree>
 80095ac:	4628      	mov	r0, r5
 80095ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80095b6:	3301      	adds	r3, #1
 80095b8:	e7c1      	b.n	800953e <__lshift+0x4a>
 80095ba:	3904      	subs	r1, #4
 80095bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80095c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80095c4:	4298      	cmp	r0, r3
 80095c6:	d8f9      	bhi.n	80095bc <__lshift+0xc8>
 80095c8:	e7ea      	b.n	80095a0 <__lshift+0xac>
 80095ca:	bf00      	nop
 80095cc:	0800aa16 	.word	0x0800aa16
 80095d0:	0800aa88 	.word	0x0800aa88

080095d4 <__mcmp>:
 80095d4:	b530      	push	{r4, r5, lr}
 80095d6:	6902      	ldr	r2, [r0, #16]
 80095d8:	690c      	ldr	r4, [r1, #16]
 80095da:	1b12      	subs	r2, r2, r4
 80095dc:	d10e      	bne.n	80095fc <__mcmp+0x28>
 80095de:	f100 0314 	add.w	r3, r0, #20
 80095e2:	3114      	adds	r1, #20
 80095e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80095e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80095ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80095f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80095f4:	42a5      	cmp	r5, r4
 80095f6:	d003      	beq.n	8009600 <__mcmp+0x2c>
 80095f8:	d305      	bcc.n	8009606 <__mcmp+0x32>
 80095fa:	2201      	movs	r2, #1
 80095fc:	4610      	mov	r0, r2
 80095fe:	bd30      	pop	{r4, r5, pc}
 8009600:	4283      	cmp	r3, r0
 8009602:	d3f3      	bcc.n	80095ec <__mcmp+0x18>
 8009604:	e7fa      	b.n	80095fc <__mcmp+0x28>
 8009606:	f04f 32ff 	mov.w	r2, #4294967295
 800960a:	e7f7      	b.n	80095fc <__mcmp+0x28>

0800960c <__mdiff>:
 800960c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009610:	460c      	mov	r4, r1
 8009612:	4606      	mov	r6, r0
 8009614:	4611      	mov	r1, r2
 8009616:	4620      	mov	r0, r4
 8009618:	4690      	mov	r8, r2
 800961a:	f7ff ffdb 	bl	80095d4 <__mcmp>
 800961e:	1e05      	subs	r5, r0, #0
 8009620:	d110      	bne.n	8009644 <__mdiff+0x38>
 8009622:	4629      	mov	r1, r5
 8009624:	4630      	mov	r0, r6
 8009626:	f7ff fd53 	bl	80090d0 <_Balloc>
 800962a:	b930      	cbnz	r0, 800963a <__mdiff+0x2e>
 800962c:	4b3a      	ldr	r3, [pc, #232]	; (8009718 <__mdiff+0x10c>)
 800962e:	4602      	mov	r2, r0
 8009630:	f240 2132 	movw	r1, #562	; 0x232
 8009634:	4839      	ldr	r0, [pc, #228]	; (800971c <__mdiff+0x110>)
 8009636:	f000 ff4b 	bl	800a4d0 <__assert_func>
 800963a:	2301      	movs	r3, #1
 800963c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009640:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009644:	bfa4      	itt	ge
 8009646:	4643      	movge	r3, r8
 8009648:	46a0      	movge	r8, r4
 800964a:	4630      	mov	r0, r6
 800964c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009650:	bfa6      	itte	ge
 8009652:	461c      	movge	r4, r3
 8009654:	2500      	movge	r5, #0
 8009656:	2501      	movlt	r5, #1
 8009658:	f7ff fd3a 	bl	80090d0 <_Balloc>
 800965c:	b920      	cbnz	r0, 8009668 <__mdiff+0x5c>
 800965e:	4b2e      	ldr	r3, [pc, #184]	; (8009718 <__mdiff+0x10c>)
 8009660:	4602      	mov	r2, r0
 8009662:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009666:	e7e5      	b.n	8009634 <__mdiff+0x28>
 8009668:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800966c:	6926      	ldr	r6, [r4, #16]
 800966e:	60c5      	str	r5, [r0, #12]
 8009670:	f104 0914 	add.w	r9, r4, #20
 8009674:	f108 0514 	add.w	r5, r8, #20
 8009678:	f100 0e14 	add.w	lr, r0, #20
 800967c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009680:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009684:	f108 0210 	add.w	r2, r8, #16
 8009688:	46f2      	mov	sl, lr
 800968a:	2100      	movs	r1, #0
 800968c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009690:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009694:	fa1f f883 	uxth.w	r8, r3
 8009698:	fa11 f18b 	uxtah	r1, r1, fp
 800969c:	0c1b      	lsrs	r3, r3, #16
 800969e:	eba1 0808 	sub.w	r8, r1, r8
 80096a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80096a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80096aa:	fa1f f888 	uxth.w	r8, r8
 80096ae:	1419      	asrs	r1, r3, #16
 80096b0:	454e      	cmp	r6, r9
 80096b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80096b6:	f84a 3b04 	str.w	r3, [sl], #4
 80096ba:	d8e7      	bhi.n	800968c <__mdiff+0x80>
 80096bc:	1b33      	subs	r3, r6, r4
 80096be:	3b15      	subs	r3, #21
 80096c0:	f023 0303 	bic.w	r3, r3, #3
 80096c4:	3304      	adds	r3, #4
 80096c6:	3415      	adds	r4, #21
 80096c8:	42a6      	cmp	r6, r4
 80096ca:	bf38      	it	cc
 80096cc:	2304      	movcc	r3, #4
 80096ce:	441d      	add	r5, r3
 80096d0:	4473      	add	r3, lr
 80096d2:	469e      	mov	lr, r3
 80096d4:	462e      	mov	r6, r5
 80096d6:	4566      	cmp	r6, ip
 80096d8:	d30e      	bcc.n	80096f8 <__mdiff+0xec>
 80096da:	f10c 0203 	add.w	r2, ip, #3
 80096de:	1b52      	subs	r2, r2, r5
 80096e0:	f022 0203 	bic.w	r2, r2, #3
 80096e4:	3d03      	subs	r5, #3
 80096e6:	45ac      	cmp	ip, r5
 80096e8:	bf38      	it	cc
 80096ea:	2200      	movcc	r2, #0
 80096ec:	441a      	add	r2, r3
 80096ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80096f2:	b17b      	cbz	r3, 8009714 <__mdiff+0x108>
 80096f4:	6107      	str	r7, [r0, #16]
 80096f6:	e7a3      	b.n	8009640 <__mdiff+0x34>
 80096f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80096fc:	fa11 f288 	uxtah	r2, r1, r8
 8009700:	1414      	asrs	r4, r2, #16
 8009702:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009706:	b292      	uxth	r2, r2
 8009708:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800970c:	f84e 2b04 	str.w	r2, [lr], #4
 8009710:	1421      	asrs	r1, r4, #16
 8009712:	e7e0      	b.n	80096d6 <__mdiff+0xca>
 8009714:	3f01      	subs	r7, #1
 8009716:	e7ea      	b.n	80096ee <__mdiff+0xe2>
 8009718:	0800aa16 	.word	0x0800aa16
 800971c:	0800aa88 	.word	0x0800aa88

08009720 <__d2b>:
 8009720:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009724:	4689      	mov	r9, r1
 8009726:	2101      	movs	r1, #1
 8009728:	ec57 6b10 	vmov	r6, r7, d0
 800972c:	4690      	mov	r8, r2
 800972e:	f7ff fccf 	bl	80090d0 <_Balloc>
 8009732:	4604      	mov	r4, r0
 8009734:	b930      	cbnz	r0, 8009744 <__d2b+0x24>
 8009736:	4602      	mov	r2, r0
 8009738:	4b25      	ldr	r3, [pc, #148]	; (80097d0 <__d2b+0xb0>)
 800973a:	4826      	ldr	r0, [pc, #152]	; (80097d4 <__d2b+0xb4>)
 800973c:	f240 310a 	movw	r1, #778	; 0x30a
 8009740:	f000 fec6 	bl	800a4d0 <__assert_func>
 8009744:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009748:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800974c:	bb35      	cbnz	r5, 800979c <__d2b+0x7c>
 800974e:	2e00      	cmp	r6, #0
 8009750:	9301      	str	r3, [sp, #4]
 8009752:	d028      	beq.n	80097a6 <__d2b+0x86>
 8009754:	4668      	mov	r0, sp
 8009756:	9600      	str	r6, [sp, #0]
 8009758:	f7ff fd82 	bl	8009260 <__lo0bits>
 800975c:	9900      	ldr	r1, [sp, #0]
 800975e:	b300      	cbz	r0, 80097a2 <__d2b+0x82>
 8009760:	9a01      	ldr	r2, [sp, #4]
 8009762:	f1c0 0320 	rsb	r3, r0, #32
 8009766:	fa02 f303 	lsl.w	r3, r2, r3
 800976a:	430b      	orrs	r3, r1
 800976c:	40c2      	lsrs	r2, r0
 800976e:	6163      	str	r3, [r4, #20]
 8009770:	9201      	str	r2, [sp, #4]
 8009772:	9b01      	ldr	r3, [sp, #4]
 8009774:	61a3      	str	r3, [r4, #24]
 8009776:	2b00      	cmp	r3, #0
 8009778:	bf14      	ite	ne
 800977a:	2202      	movne	r2, #2
 800977c:	2201      	moveq	r2, #1
 800977e:	6122      	str	r2, [r4, #16]
 8009780:	b1d5      	cbz	r5, 80097b8 <__d2b+0x98>
 8009782:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009786:	4405      	add	r5, r0
 8009788:	f8c9 5000 	str.w	r5, [r9]
 800978c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009790:	f8c8 0000 	str.w	r0, [r8]
 8009794:	4620      	mov	r0, r4
 8009796:	b003      	add	sp, #12
 8009798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800979c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097a0:	e7d5      	b.n	800974e <__d2b+0x2e>
 80097a2:	6161      	str	r1, [r4, #20]
 80097a4:	e7e5      	b.n	8009772 <__d2b+0x52>
 80097a6:	a801      	add	r0, sp, #4
 80097a8:	f7ff fd5a 	bl	8009260 <__lo0bits>
 80097ac:	9b01      	ldr	r3, [sp, #4]
 80097ae:	6163      	str	r3, [r4, #20]
 80097b0:	2201      	movs	r2, #1
 80097b2:	6122      	str	r2, [r4, #16]
 80097b4:	3020      	adds	r0, #32
 80097b6:	e7e3      	b.n	8009780 <__d2b+0x60>
 80097b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80097c0:	f8c9 0000 	str.w	r0, [r9]
 80097c4:	6918      	ldr	r0, [r3, #16]
 80097c6:	f7ff fd2b 	bl	8009220 <__hi0bits>
 80097ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097ce:	e7df      	b.n	8009790 <__d2b+0x70>
 80097d0:	0800aa16 	.word	0x0800aa16
 80097d4:	0800aa88 	.word	0x0800aa88

080097d8 <_calloc_r>:
 80097d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097da:	fba1 2402 	umull	r2, r4, r1, r2
 80097de:	b94c      	cbnz	r4, 80097f4 <_calloc_r+0x1c>
 80097e0:	4611      	mov	r1, r2
 80097e2:	9201      	str	r2, [sp, #4]
 80097e4:	f000 f87a 	bl	80098dc <_malloc_r>
 80097e8:	9a01      	ldr	r2, [sp, #4]
 80097ea:	4605      	mov	r5, r0
 80097ec:	b930      	cbnz	r0, 80097fc <_calloc_r+0x24>
 80097ee:	4628      	mov	r0, r5
 80097f0:	b003      	add	sp, #12
 80097f2:	bd30      	pop	{r4, r5, pc}
 80097f4:	220c      	movs	r2, #12
 80097f6:	6002      	str	r2, [r0, #0]
 80097f8:	2500      	movs	r5, #0
 80097fa:	e7f8      	b.n	80097ee <_calloc_r+0x16>
 80097fc:	4621      	mov	r1, r4
 80097fe:	f7fd fcbd 	bl	800717c <memset>
 8009802:	e7f4      	b.n	80097ee <_calloc_r+0x16>

08009804 <_free_r>:
 8009804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009806:	2900      	cmp	r1, #0
 8009808:	d044      	beq.n	8009894 <_free_r+0x90>
 800980a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800980e:	9001      	str	r0, [sp, #4]
 8009810:	2b00      	cmp	r3, #0
 8009812:	f1a1 0404 	sub.w	r4, r1, #4
 8009816:	bfb8      	it	lt
 8009818:	18e4      	addlt	r4, r4, r3
 800981a:	f000 febd 	bl	800a598 <__malloc_lock>
 800981e:	4a1e      	ldr	r2, [pc, #120]	; (8009898 <_free_r+0x94>)
 8009820:	9801      	ldr	r0, [sp, #4]
 8009822:	6813      	ldr	r3, [r2, #0]
 8009824:	b933      	cbnz	r3, 8009834 <_free_r+0x30>
 8009826:	6063      	str	r3, [r4, #4]
 8009828:	6014      	str	r4, [r2, #0]
 800982a:	b003      	add	sp, #12
 800982c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009830:	f000 beb8 	b.w	800a5a4 <__malloc_unlock>
 8009834:	42a3      	cmp	r3, r4
 8009836:	d908      	bls.n	800984a <_free_r+0x46>
 8009838:	6825      	ldr	r5, [r4, #0]
 800983a:	1961      	adds	r1, r4, r5
 800983c:	428b      	cmp	r3, r1
 800983e:	bf01      	itttt	eq
 8009840:	6819      	ldreq	r1, [r3, #0]
 8009842:	685b      	ldreq	r3, [r3, #4]
 8009844:	1949      	addeq	r1, r1, r5
 8009846:	6021      	streq	r1, [r4, #0]
 8009848:	e7ed      	b.n	8009826 <_free_r+0x22>
 800984a:	461a      	mov	r2, r3
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	b10b      	cbz	r3, 8009854 <_free_r+0x50>
 8009850:	42a3      	cmp	r3, r4
 8009852:	d9fa      	bls.n	800984a <_free_r+0x46>
 8009854:	6811      	ldr	r1, [r2, #0]
 8009856:	1855      	adds	r5, r2, r1
 8009858:	42a5      	cmp	r5, r4
 800985a:	d10b      	bne.n	8009874 <_free_r+0x70>
 800985c:	6824      	ldr	r4, [r4, #0]
 800985e:	4421      	add	r1, r4
 8009860:	1854      	adds	r4, r2, r1
 8009862:	42a3      	cmp	r3, r4
 8009864:	6011      	str	r1, [r2, #0]
 8009866:	d1e0      	bne.n	800982a <_free_r+0x26>
 8009868:	681c      	ldr	r4, [r3, #0]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	6053      	str	r3, [r2, #4]
 800986e:	4421      	add	r1, r4
 8009870:	6011      	str	r1, [r2, #0]
 8009872:	e7da      	b.n	800982a <_free_r+0x26>
 8009874:	d902      	bls.n	800987c <_free_r+0x78>
 8009876:	230c      	movs	r3, #12
 8009878:	6003      	str	r3, [r0, #0]
 800987a:	e7d6      	b.n	800982a <_free_r+0x26>
 800987c:	6825      	ldr	r5, [r4, #0]
 800987e:	1961      	adds	r1, r4, r5
 8009880:	428b      	cmp	r3, r1
 8009882:	bf04      	itt	eq
 8009884:	6819      	ldreq	r1, [r3, #0]
 8009886:	685b      	ldreq	r3, [r3, #4]
 8009888:	6063      	str	r3, [r4, #4]
 800988a:	bf04      	itt	eq
 800988c:	1949      	addeq	r1, r1, r5
 800988e:	6021      	streq	r1, [r4, #0]
 8009890:	6054      	str	r4, [r2, #4]
 8009892:	e7ca      	b.n	800982a <_free_r+0x26>
 8009894:	b003      	add	sp, #12
 8009896:	bd30      	pop	{r4, r5, pc}
 8009898:	200007ac 	.word	0x200007ac

0800989c <sbrk_aligned>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	4e0e      	ldr	r6, [pc, #56]	; (80098d8 <sbrk_aligned+0x3c>)
 80098a0:	460c      	mov	r4, r1
 80098a2:	6831      	ldr	r1, [r6, #0]
 80098a4:	4605      	mov	r5, r0
 80098a6:	b911      	cbnz	r1, 80098ae <sbrk_aligned+0x12>
 80098a8:	f000 fd1c 	bl	800a2e4 <_sbrk_r>
 80098ac:	6030      	str	r0, [r6, #0]
 80098ae:	4621      	mov	r1, r4
 80098b0:	4628      	mov	r0, r5
 80098b2:	f000 fd17 	bl	800a2e4 <_sbrk_r>
 80098b6:	1c43      	adds	r3, r0, #1
 80098b8:	d00a      	beq.n	80098d0 <sbrk_aligned+0x34>
 80098ba:	1cc4      	adds	r4, r0, #3
 80098bc:	f024 0403 	bic.w	r4, r4, #3
 80098c0:	42a0      	cmp	r0, r4
 80098c2:	d007      	beq.n	80098d4 <sbrk_aligned+0x38>
 80098c4:	1a21      	subs	r1, r4, r0
 80098c6:	4628      	mov	r0, r5
 80098c8:	f000 fd0c 	bl	800a2e4 <_sbrk_r>
 80098cc:	3001      	adds	r0, #1
 80098ce:	d101      	bne.n	80098d4 <sbrk_aligned+0x38>
 80098d0:	f04f 34ff 	mov.w	r4, #4294967295
 80098d4:	4620      	mov	r0, r4
 80098d6:	bd70      	pop	{r4, r5, r6, pc}
 80098d8:	200007b0 	.word	0x200007b0

080098dc <_malloc_r>:
 80098dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e0:	1ccd      	adds	r5, r1, #3
 80098e2:	f025 0503 	bic.w	r5, r5, #3
 80098e6:	3508      	adds	r5, #8
 80098e8:	2d0c      	cmp	r5, #12
 80098ea:	bf38      	it	cc
 80098ec:	250c      	movcc	r5, #12
 80098ee:	2d00      	cmp	r5, #0
 80098f0:	4607      	mov	r7, r0
 80098f2:	db01      	blt.n	80098f8 <_malloc_r+0x1c>
 80098f4:	42a9      	cmp	r1, r5
 80098f6:	d905      	bls.n	8009904 <_malloc_r+0x28>
 80098f8:	230c      	movs	r3, #12
 80098fa:	603b      	str	r3, [r7, #0]
 80098fc:	2600      	movs	r6, #0
 80098fe:	4630      	mov	r0, r6
 8009900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009904:	4e2e      	ldr	r6, [pc, #184]	; (80099c0 <_malloc_r+0xe4>)
 8009906:	f000 fe47 	bl	800a598 <__malloc_lock>
 800990a:	6833      	ldr	r3, [r6, #0]
 800990c:	461c      	mov	r4, r3
 800990e:	bb34      	cbnz	r4, 800995e <_malloc_r+0x82>
 8009910:	4629      	mov	r1, r5
 8009912:	4638      	mov	r0, r7
 8009914:	f7ff ffc2 	bl	800989c <sbrk_aligned>
 8009918:	1c43      	adds	r3, r0, #1
 800991a:	4604      	mov	r4, r0
 800991c:	d14d      	bne.n	80099ba <_malloc_r+0xde>
 800991e:	6834      	ldr	r4, [r6, #0]
 8009920:	4626      	mov	r6, r4
 8009922:	2e00      	cmp	r6, #0
 8009924:	d140      	bne.n	80099a8 <_malloc_r+0xcc>
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	4631      	mov	r1, r6
 800992a:	4638      	mov	r0, r7
 800992c:	eb04 0803 	add.w	r8, r4, r3
 8009930:	f000 fcd8 	bl	800a2e4 <_sbrk_r>
 8009934:	4580      	cmp	r8, r0
 8009936:	d13a      	bne.n	80099ae <_malloc_r+0xd2>
 8009938:	6821      	ldr	r1, [r4, #0]
 800993a:	3503      	adds	r5, #3
 800993c:	1a6d      	subs	r5, r5, r1
 800993e:	f025 0503 	bic.w	r5, r5, #3
 8009942:	3508      	adds	r5, #8
 8009944:	2d0c      	cmp	r5, #12
 8009946:	bf38      	it	cc
 8009948:	250c      	movcc	r5, #12
 800994a:	4629      	mov	r1, r5
 800994c:	4638      	mov	r0, r7
 800994e:	f7ff ffa5 	bl	800989c <sbrk_aligned>
 8009952:	3001      	adds	r0, #1
 8009954:	d02b      	beq.n	80099ae <_malloc_r+0xd2>
 8009956:	6823      	ldr	r3, [r4, #0]
 8009958:	442b      	add	r3, r5
 800995a:	6023      	str	r3, [r4, #0]
 800995c:	e00e      	b.n	800997c <_malloc_r+0xa0>
 800995e:	6822      	ldr	r2, [r4, #0]
 8009960:	1b52      	subs	r2, r2, r5
 8009962:	d41e      	bmi.n	80099a2 <_malloc_r+0xc6>
 8009964:	2a0b      	cmp	r2, #11
 8009966:	d916      	bls.n	8009996 <_malloc_r+0xba>
 8009968:	1961      	adds	r1, r4, r5
 800996a:	42a3      	cmp	r3, r4
 800996c:	6025      	str	r5, [r4, #0]
 800996e:	bf18      	it	ne
 8009970:	6059      	strne	r1, [r3, #4]
 8009972:	6863      	ldr	r3, [r4, #4]
 8009974:	bf08      	it	eq
 8009976:	6031      	streq	r1, [r6, #0]
 8009978:	5162      	str	r2, [r4, r5]
 800997a:	604b      	str	r3, [r1, #4]
 800997c:	4638      	mov	r0, r7
 800997e:	f104 060b 	add.w	r6, r4, #11
 8009982:	f000 fe0f 	bl	800a5a4 <__malloc_unlock>
 8009986:	f026 0607 	bic.w	r6, r6, #7
 800998a:	1d23      	adds	r3, r4, #4
 800998c:	1af2      	subs	r2, r6, r3
 800998e:	d0b6      	beq.n	80098fe <_malloc_r+0x22>
 8009990:	1b9b      	subs	r3, r3, r6
 8009992:	50a3      	str	r3, [r4, r2]
 8009994:	e7b3      	b.n	80098fe <_malloc_r+0x22>
 8009996:	6862      	ldr	r2, [r4, #4]
 8009998:	42a3      	cmp	r3, r4
 800999a:	bf0c      	ite	eq
 800999c:	6032      	streq	r2, [r6, #0]
 800999e:	605a      	strne	r2, [r3, #4]
 80099a0:	e7ec      	b.n	800997c <_malloc_r+0xa0>
 80099a2:	4623      	mov	r3, r4
 80099a4:	6864      	ldr	r4, [r4, #4]
 80099a6:	e7b2      	b.n	800990e <_malloc_r+0x32>
 80099a8:	4634      	mov	r4, r6
 80099aa:	6876      	ldr	r6, [r6, #4]
 80099ac:	e7b9      	b.n	8009922 <_malloc_r+0x46>
 80099ae:	230c      	movs	r3, #12
 80099b0:	603b      	str	r3, [r7, #0]
 80099b2:	4638      	mov	r0, r7
 80099b4:	f000 fdf6 	bl	800a5a4 <__malloc_unlock>
 80099b8:	e7a1      	b.n	80098fe <_malloc_r+0x22>
 80099ba:	6025      	str	r5, [r4, #0]
 80099bc:	e7de      	b.n	800997c <_malloc_r+0xa0>
 80099be:	bf00      	nop
 80099c0:	200007ac 	.word	0x200007ac

080099c4 <_sungetc_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	1c4b      	adds	r3, r1, #1
 80099c8:	4614      	mov	r4, r2
 80099ca:	d103      	bne.n	80099d4 <_sungetc_r+0x10>
 80099cc:	f04f 35ff 	mov.w	r5, #4294967295
 80099d0:	4628      	mov	r0, r5
 80099d2:	bd38      	pop	{r3, r4, r5, pc}
 80099d4:	8993      	ldrh	r3, [r2, #12]
 80099d6:	f023 0320 	bic.w	r3, r3, #32
 80099da:	8193      	strh	r3, [r2, #12]
 80099dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099de:	6852      	ldr	r2, [r2, #4]
 80099e0:	b2cd      	uxtb	r5, r1
 80099e2:	b18b      	cbz	r3, 8009a08 <_sungetc_r+0x44>
 80099e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80099e6:	4293      	cmp	r3, r2
 80099e8:	dd08      	ble.n	80099fc <_sungetc_r+0x38>
 80099ea:	6823      	ldr	r3, [r4, #0]
 80099ec:	1e5a      	subs	r2, r3, #1
 80099ee:	6022      	str	r2, [r4, #0]
 80099f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80099f4:	6863      	ldr	r3, [r4, #4]
 80099f6:	3301      	adds	r3, #1
 80099f8:	6063      	str	r3, [r4, #4]
 80099fa:	e7e9      	b.n	80099d0 <_sungetc_r+0xc>
 80099fc:	4621      	mov	r1, r4
 80099fe:	f000 fd2d 	bl	800a45c <__submore>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	d0f1      	beq.n	80099ea <_sungetc_r+0x26>
 8009a06:	e7e1      	b.n	80099cc <_sungetc_r+0x8>
 8009a08:	6921      	ldr	r1, [r4, #16]
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	b151      	cbz	r1, 8009a24 <_sungetc_r+0x60>
 8009a0e:	4299      	cmp	r1, r3
 8009a10:	d208      	bcs.n	8009a24 <_sungetc_r+0x60>
 8009a12:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009a16:	42a9      	cmp	r1, r5
 8009a18:	d104      	bne.n	8009a24 <_sungetc_r+0x60>
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	3201      	adds	r2, #1
 8009a1e:	6023      	str	r3, [r4, #0]
 8009a20:	6062      	str	r2, [r4, #4]
 8009a22:	e7d5      	b.n	80099d0 <_sungetc_r+0xc>
 8009a24:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009a28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a2c:	6363      	str	r3, [r4, #52]	; 0x34
 8009a2e:	2303      	movs	r3, #3
 8009a30:	63a3      	str	r3, [r4, #56]	; 0x38
 8009a32:	4623      	mov	r3, r4
 8009a34:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e7dc      	b.n	80099f8 <_sungetc_r+0x34>

08009a3e <__ssrefill_r>:
 8009a3e:	b510      	push	{r4, lr}
 8009a40:	460c      	mov	r4, r1
 8009a42:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009a44:	b169      	cbz	r1, 8009a62 <__ssrefill_r+0x24>
 8009a46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a4a:	4299      	cmp	r1, r3
 8009a4c:	d001      	beq.n	8009a52 <__ssrefill_r+0x14>
 8009a4e:	f7ff fed9 	bl	8009804 <_free_r>
 8009a52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a54:	6063      	str	r3, [r4, #4]
 8009a56:	2000      	movs	r0, #0
 8009a58:	6360      	str	r0, [r4, #52]	; 0x34
 8009a5a:	b113      	cbz	r3, 8009a62 <__ssrefill_r+0x24>
 8009a5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009a5e:	6023      	str	r3, [r4, #0]
 8009a60:	bd10      	pop	{r4, pc}
 8009a62:	6923      	ldr	r3, [r4, #16]
 8009a64:	6023      	str	r3, [r4, #0]
 8009a66:	2300      	movs	r3, #0
 8009a68:	6063      	str	r3, [r4, #4]
 8009a6a:	89a3      	ldrh	r3, [r4, #12]
 8009a6c:	f043 0320 	orr.w	r3, r3, #32
 8009a70:	81a3      	strh	r3, [r4, #12]
 8009a72:	f04f 30ff 	mov.w	r0, #4294967295
 8009a76:	e7f3      	b.n	8009a60 <__ssrefill_r+0x22>

08009a78 <__ssvfiscanf_r>:
 8009a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009a82:	2100      	movs	r1, #0
 8009a84:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009a88:	49a6      	ldr	r1, [pc, #664]	; (8009d24 <__ssvfiscanf_r+0x2ac>)
 8009a8a:	91a0      	str	r1, [sp, #640]	; 0x280
 8009a8c:	f10d 0804 	add.w	r8, sp, #4
 8009a90:	49a5      	ldr	r1, [pc, #660]	; (8009d28 <__ssvfiscanf_r+0x2b0>)
 8009a92:	4fa6      	ldr	r7, [pc, #664]	; (8009d2c <__ssvfiscanf_r+0x2b4>)
 8009a94:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009d30 <__ssvfiscanf_r+0x2b8>
 8009a98:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	91a1      	str	r1, [sp, #644]	; 0x284
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	7813      	ldrb	r3, [r2, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f000 815a 	beq.w	8009d5e <__ssvfiscanf_r+0x2e6>
 8009aaa:	5dd9      	ldrb	r1, [r3, r7]
 8009aac:	f011 0108 	ands.w	r1, r1, #8
 8009ab0:	f102 0501 	add.w	r5, r2, #1
 8009ab4:	d019      	beq.n	8009aea <__ssvfiscanf_r+0x72>
 8009ab6:	6863      	ldr	r3, [r4, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	dd0f      	ble.n	8009adc <__ssvfiscanf_r+0x64>
 8009abc:	6823      	ldr	r3, [r4, #0]
 8009abe:	781a      	ldrb	r2, [r3, #0]
 8009ac0:	5cba      	ldrb	r2, [r7, r2]
 8009ac2:	0712      	lsls	r2, r2, #28
 8009ac4:	d401      	bmi.n	8009aca <__ssvfiscanf_r+0x52>
 8009ac6:	462a      	mov	r2, r5
 8009ac8:	e7eb      	b.n	8009aa2 <__ssvfiscanf_r+0x2a>
 8009aca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009acc:	3201      	adds	r2, #1
 8009ace:	9245      	str	r2, [sp, #276]	; 0x114
 8009ad0:	6862      	ldr	r2, [r4, #4]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	3a01      	subs	r2, #1
 8009ad6:	6062      	str	r2, [r4, #4]
 8009ad8:	6023      	str	r3, [r4, #0]
 8009ada:	e7ec      	b.n	8009ab6 <__ssvfiscanf_r+0x3e>
 8009adc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009ade:	4621      	mov	r1, r4
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	4798      	blx	r3
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d0e9      	beq.n	8009abc <__ssvfiscanf_r+0x44>
 8009ae8:	e7ed      	b.n	8009ac6 <__ssvfiscanf_r+0x4e>
 8009aea:	2b25      	cmp	r3, #37	; 0x25
 8009aec:	d012      	beq.n	8009b14 <__ssvfiscanf_r+0x9c>
 8009aee:	469a      	mov	sl, r3
 8009af0:	6863      	ldr	r3, [r4, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f340 8091 	ble.w	8009c1a <__ssvfiscanf_r+0x1a2>
 8009af8:	6822      	ldr	r2, [r4, #0]
 8009afa:	7813      	ldrb	r3, [r2, #0]
 8009afc:	4553      	cmp	r3, sl
 8009afe:	f040 812e 	bne.w	8009d5e <__ssvfiscanf_r+0x2e6>
 8009b02:	6863      	ldr	r3, [r4, #4]
 8009b04:	3b01      	subs	r3, #1
 8009b06:	6063      	str	r3, [r4, #4]
 8009b08:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009b0a:	3201      	adds	r2, #1
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	6022      	str	r2, [r4, #0]
 8009b10:	9345      	str	r3, [sp, #276]	; 0x114
 8009b12:	e7d8      	b.n	8009ac6 <__ssvfiscanf_r+0x4e>
 8009b14:	9141      	str	r1, [sp, #260]	; 0x104
 8009b16:	9143      	str	r1, [sp, #268]	; 0x10c
 8009b18:	7853      	ldrb	r3, [r2, #1]
 8009b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b1c:	bf02      	ittt	eq
 8009b1e:	2310      	moveq	r3, #16
 8009b20:	1c95      	addeq	r5, r2, #2
 8009b22:	9341      	streq	r3, [sp, #260]	; 0x104
 8009b24:	220a      	movs	r2, #10
 8009b26:	46aa      	mov	sl, r5
 8009b28:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009b2c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009b30:	2b09      	cmp	r3, #9
 8009b32:	d91d      	bls.n	8009b70 <__ssvfiscanf_r+0xf8>
 8009b34:	487e      	ldr	r0, [pc, #504]	; (8009d30 <__ssvfiscanf_r+0x2b8>)
 8009b36:	2203      	movs	r2, #3
 8009b38:	f7f6 fb62 	bl	8000200 <memchr>
 8009b3c:	b140      	cbz	r0, 8009b50 <__ssvfiscanf_r+0xd8>
 8009b3e:	2301      	movs	r3, #1
 8009b40:	eba0 0009 	sub.w	r0, r0, r9
 8009b44:	fa03 f000 	lsl.w	r0, r3, r0
 8009b48:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009b4a:	4318      	orrs	r0, r3
 8009b4c:	9041      	str	r0, [sp, #260]	; 0x104
 8009b4e:	4655      	mov	r5, sl
 8009b50:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009b54:	2b78      	cmp	r3, #120	; 0x78
 8009b56:	d806      	bhi.n	8009b66 <__ssvfiscanf_r+0xee>
 8009b58:	2b57      	cmp	r3, #87	; 0x57
 8009b5a:	d810      	bhi.n	8009b7e <__ssvfiscanf_r+0x106>
 8009b5c:	2b25      	cmp	r3, #37	; 0x25
 8009b5e:	d0c6      	beq.n	8009aee <__ssvfiscanf_r+0x76>
 8009b60:	d856      	bhi.n	8009c10 <__ssvfiscanf_r+0x198>
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d064      	beq.n	8009c30 <__ssvfiscanf_r+0x1b8>
 8009b66:	2303      	movs	r3, #3
 8009b68:	9347      	str	r3, [sp, #284]	; 0x11c
 8009b6a:	230a      	movs	r3, #10
 8009b6c:	9342      	str	r3, [sp, #264]	; 0x108
 8009b6e:	e071      	b.n	8009c54 <__ssvfiscanf_r+0x1dc>
 8009b70:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009b72:	fb02 1103 	mla	r1, r2, r3, r1
 8009b76:	3930      	subs	r1, #48	; 0x30
 8009b78:	9143      	str	r1, [sp, #268]	; 0x10c
 8009b7a:	4655      	mov	r5, sl
 8009b7c:	e7d3      	b.n	8009b26 <__ssvfiscanf_r+0xae>
 8009b7e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009b82:	2a20      	cmp	r2, #32
 8009b84:	d8ef      	bhi.n	8009b66 <__ssvfiscanf_r+0xee>
 8009b86:	a101      	add	r1, pc, #4	; (adr r1, 8009b8c <__ssvfiscanf_r+0x114>)
 8009b88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009b8c:	08009c3f 	.word	0x08009c3f
 8009b90:	08009b67 	.word	0x08009b67
 8009b94:	08009b67 	.word	0x08009b67
 8009b98:	08009c9d 	.word	0x08009c9d
 8009b9c:	08009b67 	.word	0x08009b67
 8009ba0:	08009b67 	.word	0x08009b67
 8009ba4:	08009b67 	.word	0x08009b67
 8009ba8:	08009b67 	.word	0x08009b67
 8009bac:	08009b67 	.word	0x08009b67
 8009bb0:	08009b67 	.word	0x08009b67
 8009bb4:	08009b67 	.word	0x08009b67
 8009bb8:	08009cb3 	.word	0x08009cb3
 8009bbc:	08009c89 	.word	0x08009c89
 8009bc0:	08009c17 	.word	0x08009c17
 8009bc4:	08009c17 	.word	0x08009c17
 8009bc8:	08009c17 	.word	0x08009c17
 8009bcc:	08009b67 	.word	0x08009b67
 8009bd0:	08009c8d 	.word	0x08009c8d
 8009bd4:	08009b67 	.word	0x08009b67
 8009bd8:	08009b67 	.word	0x08009b67
 8009bdc:	08009b67 	.word	0x08009b67
 8009be0:	08009b67 	.word	0x08009b67
 8009be4:	08009cc3 	.word	0x08009cc3
 8009be8:	08009c95 	.word	0x08009c95
 8009bec:	08009c37 	.word	0x08009c37
 8009bf0:	08009b67 	.word	0x08009b67
 8009bf4:	08009b67 	.word	0x08009b67
 8009bf8:	08009cbf 	.word	0x08009cbf
 8009bfc:	08009b67 	.word	0x08009b67
 8009c00:	08009c89 	.word	0x08009c89
 8009c04:	08009b67 	.word	0x08009b67
 8009c08:	08009b67 	.word	0x08009b67
 8009c0c:	08009c3f 	.word	0x08009c3f
 8009c10:	3b45      	subs	r3, #69	; 0x45
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d8a7      	bhi.n	8009b66 <__ssvfiscanf_r+0xee>
 8009c16:	2305      	movs	r3, #5
 8009c18:	e01b      	b.n	8009c52 <__ssvfiscanf_r+0x1da>
 8009c1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009c1c:	4621      	mov	r1, r4
 8009c1e:	4630      	mov	r0, r6
 8009c20:	4798      	blx	r3
 8009c22:	2800      	cmp	r0, #0
 8009c24:	f43f af68 	beq.w	8009af8 <__ssvfiscanf_r+0x80>
 8009c28:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	f040 808d 	bne.w	8009d4a <__ssvfiscanf_r+0x2d2>
 8009c30:	f04f 30ff 	mov.w	r0, #4294967295
 8009c34:	e08f      	b.n	8009d56 <__ssvfiscanf_r+0x2de>
 8009c36:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009c38:	f042 0220 	orr.w	r2, r2, #32
 8009c3c:	9241      	str	r2, [sp, #260]	; 0x104
 8009c3e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c44:	9241      	str	r2, [sp, #260]	; 0x104
 8009c46:	2210      	movs	r2, #16
 8009c48:	2b6f      	cmp	r3, #111	; 0x6f
 8009c4a:	9242      	str	r2, [sp, #264]	; 0x108
 8009c4c:	bf34      	ite	cc
 8009c4e:	2303      	movcc	r3, #3
 8009c50:	2304      	movcs	r3, #4
 8009c52:	9347      	str	r3, [sp, #284]	; 0x11c
 8009c54:	6863      	ldr	r3, [r4, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	dd42      	ble.n	8009ce0 <__ssvfiscanf_r+0x268>
 8009c5a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009c5c:	0659      	lsls	r1, r3, #25
 8009c5e:	d404      	bmi.n	8009c6a <__ssvfiscanf_r+0x1f2>
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	781a      	ldrb	r2, [r3, #0]
 8009c64:	5cba      	ldrb	r2, [r7, r2]
 8009c66:	0712      	lsls	r2, r2, #28
 8009c68:	d441      	bmi.n	8009cee <__ssvfiscanf_r+0x276>
 8009c6a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	dc50      	bgt.n	8009d12 <__ssvfiscanf_r+0x29a>
 8009c70:	466b      	mov	r3, sp
 8009c72:	4622      	mov	r2, r4
 8009c74:	a941      	add	r1, sp, #260	; 0x104
 8009c76:	4630      	mov	r0, r6
 8009c78:	f000 f9d0 	bl	800a01c <_scanf_chars>
 8009c7c:	2801      	cmp	r0, #1
 8009c7e:	d06e      	beq.n	8009d5e <__ssvfiscanf_r+0x2e6>
 8009c80:	2802      	cmp	r0, #2
 8009c82:	f47f af20 	bne.w	8009ac6 <__ssvfiscanf_r+0x4e>
 8009c86:	e7cf      	b.n	8009c28 <__ssvfiscanf_r+0x1b0>
 8009c88:	220a      	movs	r2, #10
 8009c8a:	e7dd      	b.n	8009c48 <__ssvfiscanf_r+0x1d0>
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	9342      	str	r3, [sp, #264]	; 0x108
 8009c90:	2303      	movs	r3, #3
 8009c92:	e7de      	b.n	8009c52 <__ssvfiscanf_r+0x1da>
 8009c94:	2308      	movs	r3, #8
 8009c96:	9342      	str	r3, [sp, #264]	; 0x108
 8009c98:	2304      	movs	r3, #4
 8009c9a:	e7da      	b.n	8009c52 <__ssvfiscanf_r+0x1da>
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	4640      	mov	r0, r8
 8009ca0:	f000 fb30 	bl	800a304 <__sccl>
 8009ca4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009caa:	9341      	str	r3, [sp, #260]	; 0x104
 8009cac:	4605      	mov	r5, r0
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e7cf      	b.n	8009c52 <__ssvfiscanf_r+0x1da>
 8009cb2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cb8:	9341      	str	r3, [sp, #260]	; 0x104
 8009cba:	2300      	movs	r3, #0
 8009cbc:	e7c9      	b.n	8009c52 <__ssvfiscanf_r+0x1da>
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	e7c7      	b.n	8009c52 <__ssvfiscanf_r+0x1da>
 8009cc2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009cc4:	06c3      	lsls	r3, r0, #27
 8009cc6:	f53f aefe 	bmi.w	8009ac6 <__ssvfiscanf_r+0x4e>
 8009cca:	9b00      	ldr	r3, [sp, #0]
 8009ccc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009cce:	1d19      	adds	r1, r3, #4
 8009cd0:	9100      	str	r1, [sp, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f010 0f01 	tst.w	r0, #1
 8009cd8:	bf14      	ite	ne
 8009cda:	801a      	strhne	r2, [r3, #0]
 8009cdc:	601a      	streq	r2, [r3, #0]
 8009cde:	e6f2      	b.n	8009ac6 <__ssvfiscanf_r+0x4e>
 8009ce0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009ce2:	4621      	mov	r1, r4
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	4798      	blx	r3
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	d0b6      	beq.n	8009c5a <__ssvfiscanf_r+0x1e2>
 8009cec:	e79c      	b.n	8009c28 <__ssvfiscanf_r+0x1b0>
 8009cee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009cf0:	3201      	adds	r2, #1
 8009cf2:	9245      	str	r2, [sp, #276]	; 0x114
 8009cf4:	6862      	ldr	r2, [r4, #4]
 8009cf6:	3a01      	subs	r2, #1
 8009cf8:	2a00      	cmp	r2, #0
 8009cfa:	6062      	str	r2, [r4, #4]
 8009cfc:	dd02      	ble.n	8009d04 <__ssvfiscanf_r+0x28c>
 8009cfe:	3301      	adds	r3, #1
 8009d00:	6023      	str	r3, [r4, #0]
 8009d02:	e7ad      	b.n	8009c60 <__ssvfiscanf_r+0x1e8>
 8009d04:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009d06:	4621      	mov	r1, r4
 8009d08:	4630      	mov	r0, r6
 8009d0a:	4798      	blx	r3
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d0a7      	beq.n	8009c60 <__ssvfiscanf_r+0x1e8>
 8009d10:	e78a      	b.n	8009c28 <__ssvfiscanf_r+0x1b0>
 8009d12:	2b04      	cmp	r3, #4
 8009d14:	dc0e      	bgt.n	8009d34 <__ssvfiscanf_r+0x2bc>
 8009d16:	466b      	mov	r3, sp
 8009d18:	4622      	mov	r2, r4
 8009d1a:	a941      	add	r1, sp, #260	; 0x104
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f000 f9d7 	bl	800a0d0 <_scanf_i>
 8009d22:	e7ab      	b.n	8009c7c <__ssvfiscanf_r+0x204>
 8009d24:	080099c5 	.word	0x080099c5
 8009d28:	08009a3f 	.word	0x08009a3f
 8009d2c:	0800a897 	.word	0x0800a897
 8009d30:	0800abe4 	.word	0x0800abe4
 8009d34:	4b0b      	ldr	r3, [pc, #44]	; (8009d64 <__ssvfiscanf_r+0x2ec>)
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f43f aec5 	beq.w	8009ac6 <__ssvfiscanf_r+0x4e>
 8009d3c:	466b      	mov	r3, sp
 8009d3e:	4622      	mov	r2, r4
 8009d40:	a941      	add	r1, sp, #260	; 0x104
 8009d42:	4630      	mov	r0, r6
 8009d44:	f3af 8000 	nop.w
 8009d48:	e798      	b.n	8009c7c <__ssvfiscanf_r+0x204>
 8009d4a:	89a3      	ldrh	r3, [r4, #12]
 8009d4c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009d50:	bf18      	it	ne
 8009d52:	f04f 30ff 	movne.w	r0, #4294967295
 8009d56:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d5e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009d60:	e7f9      	b.n	8009d56 <__ssvfiscanf_r+0x2de>
 8009d62:	bf00      	nop
 8009d64:	00000000 	.word	0x00000000

08009d68 <__sfputc_r>:
 8009d68:	6893      	ldr	r3, [r2, #8]
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	b410      	push	{r4}
 8009d70:	6093      	str	r3, [r2, #8]
 8009d72:	da08      	bge.n	8009d86 <__sfputc_r+0x1e>
 8009d74:	6994      	ldr	r4, [r2, #24]
 8009d76:	42a3      	cmp	r3, r4
 8009d78:	db01      	blt.n	8009d7e <__sfputc_r+0x16>
 8009d7a:	290a      	cmp	r1, #10
 8009d7c:	d103      	bne.n	8009d86 <__sfputc_r+0x1e>
 8009d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d82:	f7fd bffb 	b.w	8007d7c <__swbuf_r>
 8009d86:	6813      	ldr	r3, [r2, #0]
 8009d88:	1c58      	adds	r0, r3, #1
 8009d8a:	6010      	str	r0, [r2, #0]
 8009d8c:	7019      	strb	r1, [r3, #0]
 8009d8e:	4608      	mov	r0, r1
 8009d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <__sfputs_r>:
 8009d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d98:	4606      	mov	r6, r0
 8009d9a:	460f      	mov	r7, r1
 8009d9c:	4614      	mov	r4, r2
 8009d9e:	18d5      	adds	r5, r2, r3
 8009da0:	42ac      	cmp	r4, r5
 8009da2:	d101      	bne.n	8009da8 <__sfputs_r+0x12>
 8009da4:	2000      	movs	r0, #0
 8009da6:	e007      	b.n	8009db8 <__sfputs_r+0x22>
 8009da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dac:	463a      	mov	r2, r7
 8009dae:	4630      	mov	r0, r6
 8009db0:	f7ff ffda 	bl	8009d68 <__sfputc_r>
 8009db4:	1c43      	adds	r3, r0, #1
 8009db6:	d1f3      	bne.n	8009da0 <__sfputs_r+0xa>
 8009db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009dbc <_vfiprintf_r>:
 8009dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc0:	460d      	mov	r5, r1
 8009dc2:	b09d      	sub	sp, #116	; 0x74
 8009dc4:	4614      	mov	r4, r2
 8009dc6:	4698      	mov	r8, r3
 8009dc8:	4606      	mov	r6, r0
 8009dca:	b118      	cbz	r0, 8009dd4 <_vfiprintf_r+0x18>
 8009dcc:	6983      	ldr	r3, [r0, #24]
 8009dce:	b90b      	cbnz	r3, 8009dd4 <_vfiprintf_r+0x18>
 8009dd0:	f7ff f84a 	bl	8008e68 <__sinit>
 8009dd4:	4b89      	ldr	r3, [pc, #548]	; (8009ffc <_vfiprintf_r+0x240>)
 8009dd6:	429d      	cmp	r5, r3
 8009dd8:	d11b      	bne.n	8009e12 <_vfiprintf_r+0x56>
 8009dda:	6875      	ldr	r5, [r6, #4]
 8009ddc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dde:	07d9      	lsls	r1, r3, #31
 8009de0:	d405      	bmi.n	8009dee <_vfiprintf_r+0x32>
 8009de2:	89ab      	ldrh	r3, [r5, #12]
 8009de4:	059a      	lsls	r2, r3, #22
 8009de6:	d402      	bmi.n	8009dee <_vfiprintf_r+0x32>
 8009de8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dea:	f7ff f8e0 	bl	8008fae <__retarget_lock_acquire_recursive>
 8009dee:	89ab      	ldrh	r3, [r5, #12]
 8009df0:	071b      	lsls	r3, r3, #28
 8009df2:	d501      	bpl.n	8009df8 <_vfiprintf_r+0x3c>
 8009df4:	692b      	ldr	r3, [r5, #16]
 8009df6:	b9eb      	cbnz	r3, 8009e34 <_vfiprintf_r+0x78>
 8009df8:	4629      	mov	r1, r5
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f7fe f822 	bl	8007e44 <__swsetup_r>
 8009e00:	b1c0      	cbz	r0, 8009e34 <_vfiprintf_r+0x78>
 8009e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e04:	07dc      	lsls	r4, r3, #31
 8009e06:	d50e      	bpl.n	8009e26 <_vfiprintf_r+0x6a>
 8009e08:	f04f 30ff 	mov.w	r0, #4294967295
 8009e0c:	b01d      	add	sp, #116	; 0x74
 8009e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e12:	4b7b      	ldr	r3, [pc, #492]	; (800a000 <_vfiprintf_r+0x244>)
 8009e14:	429d      	cmp	r5, r3
 8009e16:	d101      	bne.n	8009e1c <_vfiprintf_r+0x60>
 8009e18:	68b5      	ldr	r5, [r6, #8]
 8009e1a:	e7df      	b.n	8009ddc <_vfiprintf_r+0x20>
 8009e1c:	4b79      	ldr	r3, [pc, #484]	; (800a004 <_vfiprintf_r+0x248>)
 8009e1e:	429d      	cmp	r5, r3
 8009e20:	bf08      	it	eq
 8009e22:	68f5      	ldreq	r5, [r6, #12]
 8009e24:	e7da      	b.n	8009ddc <_vfiprintf_r+0x20>
 8009e26:	89ab      	ldrh	r3, [r5, #12]
 8009e28:	0598      	lsls	r0, r3, #22
 8009e2a:	d4ed      	bmi.n	8009e08 <_vfiprintf_r+0x4c>
 8009e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e2e:	f7ff f8bf 	bl	8008fb0 <__retarget_lock_release_recursive>
 8009e32:	e7e9      	b.n	8009e08 <_vfiprintf_r+0x4c>
 8009e34:	2300      	movs	r3, #0
 8009e36:	9309      	str	r3, [sp, #36]	; 0x24
 8009e38:	2320      	movs	r3, #32
 8009e3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e42:	2330      	movs	r3, #48	; 0x30
 8009e44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a008 <_vfiprintf_r+0x24c>
 8009e48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e4c:	f04f 0901 	mov.w	r9, #1
 8009e50:	4623      	mov	r3, r4
 8009e52:	469a      	mov	sl, r3
 8009e54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e58:	b10a      	cbz	r2, 8009e5e <_vfiprintf_r+0xa2>
 8009e5a:	2a25      	cmp	r2, #37	; 0x25
 8009e5c:	d1f9      	bne.n	8009e52 <_vfiprintf_r+0x96>
 8009e5e:	ebba 0b04 	subs.w	fp, sl, r4
 8009e62:	d00b      	beq.n	8009e7c <_vfiprintf_r+0xc0>
 8009e64:	465b      	mov	r3, fp
 8009e66:	4622      	mov	r2, r4
 8009e68:	4629      	mov	r1, r5
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	f7ff ff93 	bl	8009d96 <__sfputs_r>
 8009e70:	3001      	adds	r0, #1
 8009e72:	f000 80aa 	beq.w	8009fca <_vfiprintf_r+0x20e>
 8009e76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e78:	445a      	add	r2, fp
 8009e7a:	9209      	str	r2, [sp, #36]	; 0x24
 8009e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 80a2 	beq.w	8009fca <_vfiprintf_r+0x20e>
 8009e86:	2300      	movs	r3, #0
 8009e88:	f04f 32ff 	mov.w	r2, #4294967295
 8009e8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e90:	f10a 0a01 	add.w	sl, sl, #1
 8009e94:	9304      	str	r3, [sp, #16]
 8009e96:	9307      	str	r3, [sp, #28]
 8009e98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e9c:	931a      	str	r3, [sp, #104]	; 0x68
 8009e9e:	4654      	mov	r4, sl
 8009ea0:	2205      	movs	r2, #5
 8009ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ea6:	4858      	ldr	r0, [pc, #352]	; (800a008 <_vfiprintf_r+0x24c>)
 8009ea8:	f7f6 f9aa 	bl	8000200 <memchr>
 8009eac:	9a04      	ldr	r2, [sp, #16]
 8009eae:	b9d8      	cbnz	r0, 8009ee8 <_vfiprintf_r+0x12c>
 8009eb0:	06d1      	lsls	r1, r2, #27
 8009eb2:	bf44      	itt	mi
 8009eb4:	2320      	movmi	r3, #32
 8009eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eba:	0713      	lsls	r3, r2, #28
 8009ebc:	bf44      	itt	mi
 8009ebe:	232b      	movmi	r3, #43	; 0x2b
 8009ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8009eca:	d015      	beq.n	8009ef8 <_vfiprintf_r+0x13c>
 8009ecc:	9a07      	ldr	r2, [sp, #28]
 8009ece:	4654      	mov	r4, sl
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	f04f 0c0a 	mov.w	ip, #10
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009edc:	3b30      	subs	r3, #48	; 0x30
 8009ede:	2b09      	cmp	r3, #9
 8009ee0:	d94e      	bls.n	8009f80 <_vfiprintf_r+0x1c4>
 8009ee2:	b1b0      	cbz	r0, 8009f12 <_vfiprintf_r+0x156>
 8009ee4:	9207      	str	r2, [sp, #28]
 8009ee6:	e014      	b.n	8009f12 <_vfiprintf_r+0x156>
 8009ee8:	eba0 0308 	sub.w	r3, r0, r8
 8009eec:	fa09 f303 	lsl.w	r3, r9, r3
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	9304      	str	r3, [sp, #16]
 8009ef4:	46a2      	mov	sl, r4
 8009ef6:	e7d2      	b.n	8009e9e <_vfiprintf_r+0xe2>
 8009ef8:	9b03      	ldr	r3, [sp, #12]
 8009efa:	1d19      	adds	r1, r3, #4
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	9103      	str	r1, [sp, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	bfbb      	ittet	lt
 8009f04:	425b      	neglt	r3, r3
 8009f06:	f042 0202 	orrlt.w	r2, r2, #2
 8009f0a:	9307      	strge	r3, [sp, #28]
 8009f0c:	9307      	strlt	r3, [sp, #28]
 8009f0e:	bfb8      	it	lt
 8009f10:	9204      	strlt	r2, [sp, #16]
 8009f12:	7823      	ldrb	r3, [r4, #0]
 8009f14:	2b2e      	cmp	r3, #46	; 0x2e
 8009f16:	d10c      	bne.n	8009f32 <_vfiprintf_r+0x176>
 8009f18:	7863      	ldrb	r3, [r4, #1]
 8009f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f1c:	d135      	bne.n	8009f8a <_vfiprintf_r+0x1ce>
 8009f1e:	9b03      	ldr	r3, [sp, #12]
 8009f20:	1d1a      	adds	r2, r3, #4
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	9203      	str	r2, [sp, #12]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	bfb8      	it	lt
 8009f2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f2e:	3402      	adds	r4, #2
 8009f30:	9305      	str	r3, [sp, #20]
 8009f32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a018 <_vfiprintf_r+0x25c>
 8009f36:	7821      	ldrb	r1, [r4, #0]
 8009f38:	2203      	movs	r2, #3
 8009f3a:	4650      	mov	r0, sl
 8009f3c:	f7f6 f960 	bl	8000200 <memchr>
 8009f40:	b140      	cbz	r0, 8009f54 <_vfiprintf_r+0x198>
 8009f42:	2340      	movs	r3, #64	; 0x40
 8009f44:	eba0 000a 	sub.w	r0, r0, sl
 8009f48:	fa03 f000 	lsl.w	r0, r3, r0
 8009f4c:	9b04      	ldr	r3, [sp, #16]
 8009f4e:	4303      	orrs	r3, r0
 8009f50:	3401      	adds	r4, #1
 8009f52:	9304      	str	r3, [sp, #16]
 8009f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f58:	482c      	ldr	r0, [pc, #176]	; (800a00c <_vfiprintf_r+0x250>)
 8009f5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f5e:	2206      	movs	r2, #6
 8009f60:	f7f6 f94e 	bl	8000200 <memchr>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d03f      	beq.n	8009fe8 <_vfiprintf_r+0x22c>
 8009f68:	4b29      	ldr	r3, [pc, #164]	; (800a010 <_vfiprintf_r+0x254>)
 8009f6a:	bb1b      	cbnz	r3, 8009fb4 <_vfiprintf_r+0x1f8>
 8009f6c:	9b03      	ldr	r3, [sp, #12]
 8009f6e:	3307      	adds	r3, #7
 8009f70:	f023 0307 	bic.w	r3, r3, #7
 8009f74:	3308      	adds	r3, #8
 8009f76:	9303      	str	r3, [sp, #12]
 8009f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f7a:	443b      	add	r3, r7
 8009f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f7e:	e767      	b.n	8009e50 <_vfiprintf_r+0x94>
 8009f80:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f84:	460c      	mov	r4, r1
 8009f86:	2001      	movs	r0, #1
 8009f88:	e7a5      	b.n	8009ed6 <_vfiprintf_r+0x11a>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	3401      	adds	r4, #1
 8009f8e:	9305      	str	r3, [sp, #20]
 8009f90:	4619      	mov	r1, r3
 8009f92:	f04f 0c0a 	mov.w	ip, #10
 8009f96:	4620      	mov	r0, r4
 8009f98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f9c:	3a30      	subs	r2, #48	; 0x30
 8009f9e:	2a09      	cmp	r2, #9
 8009fa0:	d903      	bls.n	8009faa <_vfiprintf_r+0x1ee>
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d0c5      	beq.n	8009f32 <_vfiprintf_r+0x176>
 8009fa6:	9105      	str	r1, [sp, #20]
 8009fa8:	e7c3      	b.n	8009f32 <_vfiprintf_r+0x176>
 8009faa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fae:	4604      	mov	r4, r0
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e7f0      	b.n	8009f96 <_vfiprintf_r+0x1da>
 8009fb4:	ab03      	add	r3, sp, #12
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	462a      	mov	r2, r5
 8009fba:	4b16      	ldr	r3, [pc, #88]	; (800a014 <_vfiprintf_r+0x258>)
 8009fbc:	a904      	add	r1, sp, #16
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	f7fd f984 	bl	80072cc <_printf_float>
 8009fc4:	4607      	mov	r7, r0
 8009fc6:	1c78      	adds	r0, r7, #1
 8009fc8:	d1d6      	bne.n	8009f78 <_vfiprintf_r+0x1bc>
 8009fca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fcc:	07d9      	lsls	r1, r3, #31
 8009fce:	d405      	bmi.n	8009fdc <_vfiprintf_r+0x220>
 8009fd0:	89ab      	ldrh	r3, [r5, #12]
 8009fd2:	059a      	lsls	r2, r3, #22
 8009fd4:	d402      	bmi.n	8009fdc <_vfiprintf_r+0x220>
 8009fd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fd8:	f7fe ffea 	bl	8008fb0 <__retarget_lock_release_recursive>
 8009fdc:	89ab      	ldrh	r3, [r5, #12]
 8009fde:	065b      	lsls	r3, r3, #25
 8009fe0:	f53f af12 	bmi.w	8009e08 <_vfiprintf_r+0x4c>
 8009fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fe6:	e711      	b.n	8009e0c <_vfiprintf_r+0x50>
 8009fe8:	ab03      	add	r3, sp, #12
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	462a      	mov	r2, r5
 8009fee:	4b09      	ldr	r3, [pc, #36]	; (800a014 <_vfiprintf_r+0x258>)
 8009ff0:	a904      	add	r1, sp, #16
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	f7fd fc0e 	bl	8007814 <_printf_i>
 8009ff8:	e7e4      	b.n	8009fc4 <_vfiprintf_r+0x208>
 8009ffa:	bf00      	nop
 8009ffc:	0800aa48 	.word	0x0800aa48
 800a000:	0800aa68 	.word	0x0800aa68
 800a004:	0800aa28 	.word	0x0800aa28
 800a008:	0800abe8 	.word	0x0800abe8
 800a00c:	0800abee 	.word	0x0800abee
 800a010:	080072cd 	.word	0x080072cd
 800a014:	08009d97 	.word	0x08009d97
 800a018:	0800abe4 	.word	0x0800abe4

0800a01c <_scanf_chars>:
 800a01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a020:	4615      	mov	r5, r2
 800a022:	688a      	ldr	r2, [r1, #8]
 800a024:	4680      	mov	r8, r0
 800a026:	460c      	mov	r4, r1
 800a028:	b932      	cbnz	r2, 800a038 <_scanf_chars+0x1c>
 800a02a:	698a      	ldr	r2, [r1, #24]
 800a02c:	2a00      	cmp	r2, #0
 800a02e:	bf0c      	ite	eq
 800a030:	2201      	moveq	r2, #1
 800a032:	f04f 32ff 	movne.w	r2, #4294967295
 800a036:	608a      	str	r2, [r1, #8]
 800a038:	6822      	ldr	r2, [r4, #0]
 800a03a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a0cc <_scanf_chars+0xb0>
 800a03e:	06d1      	lsls	r1, r2, #27
 800a040:	bf5f      	itttt	pl
 800a042:	681a      	ldrpl	r2, [r3, #0]
 800a044:	1d11      	addpl	r1, r2, #4
 800a046:	6019      	strpl	r1, [r3, #0]
 800a048:	6816      	ldrpl	r6, [r2, #0]
 800a04a:	2700      	movs	r7, #0
 800a04c:	69a0      	ldr	r0, [r4, #24]
 800a04e:	b188      	cbz	r0, 800a074 <_scanf_chars+0x58>
 800a050:	2801      	cmp	r0, #1
 800a052:	d107      	bne.n	800a064 <_scanf_chars+0x48>
 800a054:	682a      	ldr	r2, [r5, #0]
 800a056:	7811      	ldrb	r1, [r2, #0]
 800a058:	6962      	ldr	r2, [r4, #20]
 800a05a:	5c52      	ldrb	r2, [r2, r1]
 800a05c:	b952      	cbnz	r2, 800a074 <_scanf_chars+0x58>
 800a05e:	2f00      	cmp	r7, #0
 800a060:	d031      	beq.n	800a0c6 <_scanf_chars+0xaa>
 800a062:	e022      	b.n	800a0aa <_scanf_chars+0x8e>
 800a064:	2802      	cmp	r0, #2
 800a066:	d120      	bne.n	800a0aa <_scanf_chars+0x8e>
 800a068:	682b      	ldr	r3, [r5, #0]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a070:	071b      	lsls	r3, r3, #28
 800a072:	d41a      	bmi.n	800a0aa <_scanf_chars+0x8e>
 800a074:	6823      	ldr	r3, [r4, #0]
 800a076:	06da      	lsls	r2, r3, #27
 800a078:	bf5e      	ittt	pl
 800a07a:	682b      	ldrpl	r3, [r5, #0]
 800a07c:	781b      	ldrbpl	r3, [r3, #0]
 800a07e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a082:	682a      	ldr	r2, [r5, #0]
 800a084:	686b      	ldr	r3, [r5, #4]
 800a086:	3201      	adds	r2, #1
 800a088:	602a      	str	r2, [r5, #0]
 800a08a:	68a2      	ldr	r2, [r4, #8]
 800a08c:	3b01      	subs	r3, #1
 800a08e:	3a01      	subs	r2, #1
 800a090:	606b      	str	r3, [r5, #4]
 800a092:	3701      	adds	r7, #1
 800a094:	60a2      	str	r2, [r4, #8]
 800a096:	b142      	cbz	r2, 800a0aa <_scanf_chars+0x8e>
 800a098:	2b00      	cmp	r3, #0
 800a09a:	dcd7      	bgt.n	800a04c <_scanf_chars+0x30>
 800a09c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	4640      	mov	r0, r8
 800a0a4:	4798      	blx	r3
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	d0d0      	beq.n	800a04c <_scanf_chars+0x30>
 800a0aa:	6823      	ldr	r3, [r4, #0]
 800a0ac:	f013 0310 	ands.w	r3, r3, #16
 800a0b0:	d105      	bne.n	800a0be <_scanf_chars+0xa2>
 800a0b2:	68e2      	ldr	r2, [r4, #12]
 800a0b4:	3201      	adds	r2, #1
 800a0b6:	60e2      	str	r2, [r4, #12]
 800a0b8:	69a2      	ldr	r2, [r4, #24]
 800a0ba:	b102      	cbz	r2, 800a0be <_scanf_chars+0xa2>
 800a0bc:	7033      	strb	r3, [r6, #0]
 800a0be:	6923      	ldr	r3, [r4, #16]
 800a0c0:	443b      	add	r3, r7
 800a0c2:	6123      	str	r3, [r4, #16]
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ca:	bf00      	nop
 800a0cc:	0800a897 	.word	0x0800a897

0800a0d0 <_scanf_i>:
 800a0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d4:	4698      	mov	r8, r3
 800a0d6:	4b76      	ldr	r3, [pc, #472]	; (800a2b0 <_scanf_i+0x1e0>)
 800a0d8:	460c      	mov	r4, r1
 800a0da:	4682      	mov	sl, r0
 800a0dc:	4616      	mov	r6, r2
 800a0de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0e2:	b087      	sub	sp, #28
 800a0e4:	ab03      	add	r3, sp, #12
 800a0e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a0ea:	4b72      	ldr	r3, [pc, #456]	; (800a2b4 <_scanf_i+0x1e4>)
 800a0ec:	69a1      	ldr	r1, [r4, #24]
 800a0ee:	4a72      	ldr	r2, [pc, #456]	; (800a2b8 <_scanf_i+0x1e8>)
 800a0f0:	2903      	cmp	r1, #3
 800a0f2:	bf18      	it	ne
 800a0f4:	461a      	movne	r2, r3
 800a0f6:	68a3      	ldr	r3, [r4, #8]
 800a0f8:	9201      	str	r2, [sp, #4]
 800a0fa:	1e5a      	subs	r2, r3, #1
 800a0fc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a100:	bf88      	it	hi
 800a102:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a106:	4627      	mov	r7, r4
 800a108:	bf82      	ittt	hi
 800a10a:	eb03 0905 	addhi.w	r9, r3, r5
 800a10e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a112:	60a3      	strhi	r3, [r4, #8]
 800a114:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a118:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a11c:	bf98      	it	ls
 800a11e:	f04f 0900 	movls.w	r9, #0
 800a122:	6023      	str	r3, [r4, #0]
 800a124:	463d      	mov	r5, r7
 800a126:	f04f 0b00 	mov.w	fp, #0
 800a12a:	6831      	ldr	r1, [r6, #0]
 800a12c:	ab03      	add	r3, sp, #12
 800a12e:	7809      	ldrb	r1, [r1, #0]
 800a130:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a134:	2202      	movs	r2, #2
 800a136:	f7f6 f863 	bl	8000200 <memchr>
 800a13a:	b328      	cbz	r0, 800a188 <_scanf_i+0xb8>
 800a13c:	f1bb 0f01 	cmp.w	fp, #1
 800a140:	d159      	bne.n	800a1f6 <_scanf_i+0x126>
 800a142:	6862      	ldr	r2, [r4, #4]
 800a144:	b92a      	cbnz	r2, 800a152 <_scanf_i+0x82>
 800a146:	6822      	ldr	r2, [r4, #0]
 800a148:	2308      	movs	r3, #8
 800a14a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a14e:	6063      	str	r3, [r4, #4]
 800a150:	6022      	str	r2, [r4, #0]
 800a152:	6822      	ldr	r2, [r4, #0]
 800a154:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a158:	6022      	str	r2, [r4, #0]
 800a15a:	68a2      	ldr	r2, [r4, #8]
 800a15c:	1e51      	subs	r1, r2, #1
 800a15e:	60a1      	str	r1, [r4, #8]
 800a160:	b192      	cbz	r2, 800a188 <_scanf_i+0xb8>
 800a162:	6832      	ldr	r2, [r6, #0]
 800a164:	1c51      	adds	r1, r2, #1
 800a166:	6031      	str	r1, [r6, #0]
 800a168:	7812      	ldrb	r2, [r2, #0]
 800a16a:	f805 2b01 	strb.w	r2, [r5], #1
 800a16e:	6872      	ldr	r2, [r6, #4]
 800a170:	3a01      	subs	r2, #1
 800a172:	2a00      	cmp	r2, #0
 800a174:	6072      	str	r2, [r6, #4]
 800a176:	dc07      	bgt.n	800a188 <_scanf_i+0xb8>
 800a178:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a17c:	4631      	mov	r1, r6
 800a17e:	4650      	mov	r0, sl
 800a180:	4790      	blx	r2
 800a182:	2800      	cmp	r0, #0
 800a184:	f040 8085 	bne.w	800a292 <_scanf_i+0x1c2>
 800a188:	f10b 0b01 	add.w	fp, fp, #1
 800a18c:	f1bb 0f03 	cmp.w	fp, #3
 800a190:	d1cb      	bne.n	800a12a <_scanf_i+0x5a>
 800a192:	6863      	ldr	r3, [r4, #4]
 800a194:	b90b      	cbnz	r3, 800a19a <_scanf_i+0xca>
 800a196:	230a      	movs	r3, #10
 800a198:	6063      	str	r3, [r4, #4]
 800a19a:	6863      	ldr	r3, [r4, #4]
 800a19c:	4947      	ldr	r1, [pc, #284]	; (800a2bc <_scanf_i+0x1ec>)
 800a19e:	6960      	ldr	r0, [r4, #20]
 800a1a0:	1ac9      	subs	r1, r1, r3
 800a1a2:	f000 f8af 	bl	800a304 <__sccl>
 800a1a6:	f04f 0b00 	mov.w	fp, #0
 800a1aa:	68a3      	ldr	r3, [r4, #8]
 800a1ac:	6822      	ldr	r2, [r4, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d03d      	beq.n	800a22e <_scanf_i+0x15e>
 800a1b2:	6831      	ldr	r1, [r6, #0]
 800a1b4:	6960      	ldr	r0, [r4, #20]
 800a1b6:	f891 c000 	ldrb.w	ip, [r1]
 800a1ba:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d035      	beq.n	800a22e <_scanf_i+0x15e>
 800a1c2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a1c6:	d124      	bne.n	800a212 <_scanf_i+0x142>
 800a1c8:	0510      	lsls	r0, r2, #20
 800a1ca:	d522      	bpl.n	800a212 <_scanf_i+0x142>
 800a1cc:	f10b 0b01 	add.w	fp, fp, #1
 800a1d0:	f1b9 0f00 	cmp.w	r9, #0
 800a1d4:	d003      	beq.n	800a1de <_scanf_i+0x10e>
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	f109 39ff 	add.w	r9, r9, #4294967295
 800a1dc:	60a3      	str	r3, [r4, #8]
 800a1de:	6873      	ldr	r3, [r6, #4]
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	6073      	str	r3, [r6, #4]
 800a1e6:	dd1b      	ble.n	800a220 <_scanf_i+0x150>
 800a1e8:	6833      	ldr	r3, [r6, #0]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	6033      	str	r3, [r6, #0]
 800a1ee:	68a3      	ldr	r3, [r4, #8]
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	60a3      	str	r3, [r4, #8]
 800a1f4:	e7d9      	b.n	800a1aa <_scanf_i+0xda>
 800a1f6:	f1bb 0f02 	cmp.w	fp, #2
 800a1fa:	d1ae      	bne.n	800a15a <_scanf_i+0x8a>
 800a1fc:	6822      	ldr	r2, [r4, #0]
 800a1fe:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a202:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a206:	d1bf      	bne.n	800a188 <_scanf_i+0xb8>
 800a208:	2310      	movs	r3, #16
 800a20a:	6063      	str	r3, [r4, #4]
 800a20c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a210:	e7a2      	b.n	800a158 <_scanf_i+0x88>
 800a212:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a216:	6022      	str	r2, [r4, #0]
 800a218:	780b      	ldrb	r3, [r1, #0]
 800a21a:	f805 3b01 	strb.w	r3, [r5], #1
 800a21e:	e7de      	b.n	800a1de <_scanf_i+0x10e>
 800a220:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a224:	4631      	mov	r1, r6
 800a226:	4650      	mov	r0, sl
 800a228:	4798      	blx	r3
 800a22a:	2800      	cmp	r0, #0
 800a22c:	d0df      	beq.n	800a1ee <_scanf_i+0x11e>
 800a22e:	6823      	ldr	r3, [r4, #0]
 800a230:	05db      	lsls	r3, r3, #23
 800a232:	d50d      	bpl.n	800a250 <_scanf_i+0x180>
 800a234:	42bd      	cmp	r5, r7
 800a236:	d909      	bls.n	800a24c <_scanf_i+0x17c>
 800a238:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a23c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a240:	4632      	mov	r2, r6
 800a242:	4650      	mov	r0, sl
 800a244:	4798      	blx	r3
 800a246:	f105 39ff 	add.w	r9, r5, #4294967295
 800a24a:	464d      	mov	r5, r9
 800a24c:	42bd      	cmp	r5, r7
 800a24e:	d02d      	beq.n	800a2ac <_scanf_i+0x1dc>
 800a250:	6822      	ldr	r2, [r4, #0]
 800a252:	f012 0210 	ands.w	r2, r2, #16
 800a256:	d113      	bne.n	800a280 <_scanf_i+0x1b0>
 800a258:	702a      	strb	r2, [r5, #0]
 800a25a:	6863      	ldr	r3, [r4, #4]
 800a25c:	9e01      	ldr	r6, [sp, #4]
 800a25e:	4639      	mov	r1, r7
 800a260:	4650      	mov	r0, sl
 800a262:	47b0      	blx	r6
 800a264:	6821      	ldr	r1, [r4, #0]
 800a266:	f8d8 3000 	ldr.w	r3, [r8]
 800a26a:	f011 0f20 	tst.w	r1, #32
 800a26e:	d013      	beq.n	800a298 <_scanf_i+0x1c8>
 800a270:	1d1a      	adds	r2, r3, #4
 800a272:	f8c8 2000 	str.w	r2, [r8]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	6018      	str	r0, [r3, #0]
 800a27a:	68e3      	ldr	r3, [r4, #12]
 800a27c:	3301      	adds	r3, #1
 800a27e:	60e3      	str	r3, [r4, #12]
 800a280:	1bed      	subs	r5, r5, r7
 800a282:	44ab      	add	fp, r5
 800a284:	6925      	ldr	r5, [r4, #16]
 800a286:	445d      	add	r5, fp
 800a288:	6125      	str	r5, [r4, #16]
 800a28a:	2000      	movs	r0, #0
 800a28c:	b007      	add	sp, #28
 800a28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a292:	f04f 0b00 	mov.w	fp, #0
 800a296:	e7ca      	b.n	800a22e <_scanf_i+0x15e>
 800a298:	1d1a      	adds	r2, r3, #4
 800a29a:	f8c8 2000 	str.w	r2, [r8]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f011 0f01 	tst.w	r1, #1
 800a2a4:	bf14      	ite	ne
 800a2a6:	8018      	strhne	r0, [r3, #0]
 800a2a8:	6018      	streq	r0, [r3, #0]
 800a2aa:	e7e6      	b.n	800a27a <_scanf_i+0x1aa>
 800a2ac:	2001      	movs	r0, #1
 800a2ae:	e7ed      	b.n	800a28c <_scanf_i+0x1bc>
 800a2b0:	0800a7f8 	.word	0x0800a7f8
 800a2b4:	0800a459 	.word	0x0800a459
 800a2b8:	08007d65 	.word	0x08007d65
 800a2bc:	0800ac0e 	.word	0x0800ac0e

0800a2c0 <_read_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4d07      	ldr	r5, [pc, #28]	; (800a2e0 <_read_r+0x20>)
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	4608      	mov	r0, r1
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	602a      	str	r2, [r5, #0]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	f7f8 f91a 	bl	8002508 <_read>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	d102      	bne.n	800a2de <_read_r+0x1e>
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	b103      	cbz	r3, 800a2de <_read_r+0x1e>
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	bd38      	pop	{r3, r4, r5, pc}
 800a2e0:	200007b4 	.word	0x200007b4

0800a2e4 <_sbrk_r>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	4d06      	ldr	r5, [pc, #24]	; (800a300 <_sbrk_r+0x1c>)
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	4608      	mov	r0, r1
 800a2ee:	602b      	str	r3, [r5, #0]
 800a2f0:	f7f8 f95c 	bl	80025ac <_sbrk>
 800a2f4:	1c43      	adds	r3, r0, #1
 800a2f6:	d102      	bne.n	800a2fe <_sbrk_r+0x1a>
 800a2f8:	682b      	ldr	r3, [r5, #0]
 800a2fa:	b103      	cbz	r3, 800a2fe <_sbrk_r+0x1a>
 800a2fc:	6023      	str	r3, [r4, #0]
 800a2fe:	bd38      	pop	{r3, r4, r5, pc}
 800a300:	200007b4 	.word	0x200007b4

0800a304 <__sccl>:
 800a304:	b570      	push	{r4, r5, r6, lr}
 800a306:	780b      	ldrb	r3, [r1, #0]
 800a308:	4604      	mov	r4, r0
 800a30a:	2b5e      	cmp	r3, #94	; 0x5e
 800a30c:	bf0b      	itete	eq
 800a30e:	784b      	ldrbeq	r3, [r1, #1]
 800a310:	1c48      	addne	r0, r1, #1
 800a312:	1c88      	addeq	r0, r1, #2
 800a314:	2200      	movne	r2, #0
 800a316:	bf08      	it	eq
 800a318:	2201      	moveq	r2, #1
 800a31a:	1e61      	subs	r1, r4, #1
 800a31c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a320:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a324:	42a9      	cmp	r1, r5
 800a326:	d1fb      	bne.n	800a320 <__sccl+0x1c>
 800a328:	b90b      	cbnz	r3, 800a32e <__sccl+0x2a>
 800a32a:	3801      	subs	r0, #1
 800a32c:	bd70      	pop	{r4, r5, r6, pc}
 800a32e:	f082 0201 	eor.w	r2, r2, #1
 800a332:	54e2      	strb	r2, [r4, r3]
 800a334:	4605      	mov	r5, r0
 800a336:	4628      	mov	r0, r5
 800a338:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a33c:	292d      	cmp	r1, #45	; 0x2d
 800a33e:	d006      	beq.n	800a34e <__sccl+0x4a>
 800a340:	295d      	cmp	r1, #93	; 0x5d
 800a342:	d0f3      	beq.n	800a32c <__sccl+0x28>
 800a344:	b909      	cbnz	r1, 800a34a <__sccl+0x46>
 800a346:	4628      	mov	r0, r5
 800a348:	e7f0      	b.n	800a32c <__sccl+0x28>
 800a34a:	460b      	mov	r3, r1
 800a34c:	e7f1      	b.n	800a332 <__sccl+0x2e>
 800a34e:	786e      	ldrb	r6, [r5, #1]
 800a350:	2e5d      	cmp	r6, #93	; 0x5d
 800a352:	d0fa      	beq.n	800a34a <__sccl+0x46>
 800a354:	42b3      	cmp	r3, r6
 800a356:	dcf8      	bgt.n	800a34a <__sccl+0x46>
 800a358:	3502      	adds	r5, #2
 800a35a:	4619      	mov	r1, r3
 800a35c:	3101      	adds	r1, #1
 800a35e:	428e      	cmp	r6, r1
 800a360:	5462      	strb	r2, [r4, r1]
 800a362:	dcfb      	bgt.n	800a35c <__sccl+0x58>
 800a364:	1af1      	subs	r1, r6, r3
 800a366:	3901      	subs	r1, #1
 800a368:	1c58      	adds	r0, r3, #1
 800a36a:	42b3      	cmp	r3, r6
 800a36c:	bfa8      	it	ge
 800a36e:	2100      	movge	r1, #0
 800a370:	1843      	adds	r3, r0, r1
 800a372:	e7e0      	b.n	800a336 <__sccl+0x32>

0800a374 <_strtoul_l.constprop.0>:
 800a374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a378:	4f36      	ldr	r7, [pc, #216]	; (800a454 <_strtoul_l.constprop.0+0xe0>)
 800a37a:	4686      	mov	lr, r0
 800a37c:	460d      	mov	r5, r1
 800a37e:	4628      	mov	r0, r5
 800a380:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a384:	5de6      	ldrb	r6, [r4, r7]
 800a386:	f016 0608 	ands.w	r6, r6, #8
 800a38a:	d1f8      	bne.n	800a37e <_strtoul_l.constprop.0+0xa>
 800a38c:	2c2d      	cmp	r4, #45	; 0x2d
 800a38e:	d12f      	bne.n	800a3f0 <_strtoul_l.constprop.0+0x7c>
 800a390:	782c      	ldrb	r4, [r5, #0]
 800a392:	2601      	movs	r6, #1
 800a394:	1c85      	adds	r5, r0, #2
 800a396:	2b00      	cmp	r3, #0
 800a398:	d057      	beq.n	800a44a <_strtoul_l.constprop.0+0xd6>
 800a39a:	2b10      	cmp	r3, #16
 800a39c:	d109      	bne.n	800a3b2 <_strtoul_l.constprop.0+0x3e>
 800a39e:	2c30      	cmp	r4, #48	; 0x30
 800a3a0:	d107      	bne.n	800a3b2 <_strtoul_l.constprop.0+0x3e>
 800a3a2:	7828      	ldrb	r0, [r5, #0]
 800a3a4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a3a8:	2858      	cmp	r0, #88	; 0x58
 800a3aa:	d149      	bne.n	800a440 <_strtoul_l.constprop.0+0xcc>
 800a3ac:	786c      	ldrb	r4, [r5, #1]
 800a3ae:	2310      	movs	r3, #16
 800a3b0:	3502      	adds	r5, #2
 800a3b2:	f04f 38ff 	mov.w	r8, #4294967295
 800a3b6:	2700      	movs	r7, #0
 800a3b8:	fbb8 f8f3 	udiv	r8, r8, r3
 800a3bc:	fb03 f908 	mul.w	r9, r3, r8
 800a3c0:	ea6f 0909 	mvn.w	r9, r9
 800a3c4:	4638      	mov	r0, r7
 800a3c6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a3ca:	f1bc 0f09 	cmp.w	ip, #9
 800a3ce:	d814      	bhi.n	800a3fa <_strtoul_l.constprop.0+0x86>
 800a3d0:	4664      	mov	r4, ip
 800a3d2:	42a3      	cmp	r3, r4
 800a3d4:	dd22      	ble.n	800a41c <_strtoul_l.constprop.0+0xa8>
 800a3d6:	2f00      	cmp	r7, #0
 800a3d8:	db1d      	blt.n	800a416 <_strtoul_l.constprop.0+0xa2>
 800a3da:	4580      	cmp	r8, r0
 800a3dc:	d31b      	bcc.n	800a416 <_strtoul_l.constprop.0+0xa2>
 800a3de:	d101      	bne.n	800a3e4 <_strtoul_l.constprop.0+0x70>
 800a3e0:	45a1      	cmp	r9, r4
 800a3e2:	db18      	blt.n	800a416 <_strtoul_l.constprop.0+0xa2>
 800a3e4:	fb00 4003 	mla	r0, r0, r3, r4
 800a3e8:	2701      	movs	r7, #1
 800a3ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3ee:	e7ea      	b.n	800a3c6 <_strtoul_l.constprop.0+0x52>
 800a3f0:	2c2b      	cmp	r4, #43	; 0x2b
 800a3f2:	bf04      	itt	eq
 800a3f4:	782c      	ldrbeq	r4, [r5, #0]
 800a3f6:	1c85      	addeq	r5, r0, #2
 800a3f8:	e7cd      	b.n	800a396 <_strtoul_l.constprop.0+0x22>
 800a3fa:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a3fe:	f1bc 0f19 	cmp.w	ip, #25
 800a402:	d801      	bhi.n	800a408 <_strtoul_l.constprop.0+0x94>
 800a404:	3c37      	subs	r4, #55	; 0x37
 800a406:	e7e4      	b.n	800a3d2 <_strtoul_l.constprop.0+0x5e>
 800a408:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a40c:	f1bc 0f19 	cmp.w	ip, #25
 800a410:	d804      	bhi.n	800a41c <_strtoul_l.constprop.0+0xa8>
 800a412:	3c57      	subs	r4, #87	; 0x57
 800a414:	e7dd      	b.n	800a3d2 <_strtoul_l.constprop.0+0x5e>
 800a416:	f04f 37ff 	mov.w	r7, #4294967295
 800a41a:	e7e6      	b.n	800a3ea <_strtoul_l.constprop.0+0x76>
 800a41c:	2f00      	cmp	r7, #0
 800a41e:	da07      	bge.n	800a430 <_strtoul_l.constprop.0+0xbc>
 800a420:	2322      	movs	r3, #34	; 0x22
 800a422:	f8ce 3000 	str.w	r3, [lr]
 800a426:	f04f 30ff 	mov.w	r0, #4294967295
 800a42a:	b932      	cbnz	r2, 800a43a <_strtoul_l.constprop.0+0xc6>
 800a42c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a430:	b106      	cbz	r6, 800a434 <_strtoul_l.constprop.0+0xc0>
 800a432:	4240      	negs	r0, r0
 800a434:	2a00      	cmp	r2, #0
 800a436:	d0f9      	beq.n	800a42c <_strtoul_l.constprop.0+0xb8>
 800a438:	b107      	cbz	r7, 800a43c <_strtoul_l.constprop.0+0xc8>
 800a43a:	1e69      	subs	r1, r5, #1
 800a43c:	6011      	str	r1, [r2, #0]
 800a43e:	e7f5      	b.n	800a42c <_strtoul_l.constprop.0+0xb8>
 800a440:	2430      	movs	r4, #48	; 0x30
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1b5      	bne.n	800a3b2 <_strtoul_l.constprop.0+0x3e>
 800a446:	2308      	movs	r3, #8
 800a448:	e7b3      	b.n	800a3b2 <_strtoul_l.constprop.0+0x3e>
 800a44a:	2c30      	cmp	r4, #48	; 0x30
 800a44c:	d0a9      	beq.n	800a3a2 <_strtoul_l.constprop.0+0x2e>
 800a44e:	230a      	movs	r3, #10
 800a450:	e7af      	b.n	800a3b2 <_strtoul_l.constprop.0+0x3e>
 800a452:	bf00      	nop
 800a454:	0800a897 	.word	0x0800a897

0800a458 <_strtoul_r>:
 800a458:	f7ff bf8c 	b.w	800a374 <_strtoul_l.constprop.0>

0800a45c <__submore>:
 800a45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a460:	460c      	mov	r4, r1
 800a462:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a468:	4299      	cmp	r1, r3
 800a46a:	d11d      	bne.n	800a4a8 <__submore+0x4c>
 800a46c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a470:	f7ff fa34 	bl	80098dc <_malloc_r>
 800a474:	b918      	cbnz	r0, 800a47e <__submore+0x22>
 800a476:	f04f 30ff 	mov.w	r0, #4294967295
 800a47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a47e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a482:	63a3      	str	r3, [r4, #56]	; 0x38
 800a484:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a488:	6360      	str	r0, [r4, #52]	; 0x34
 800a48a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a48e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a492:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a496:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a49a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a49e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a4a2:	6020      	str	r0, [r4, #0]
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	e7e8      	b.n	800a47a <__submore+0x1e>
 800a4a8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a4aa:	0077      	lsls	r7, r6, #1
 800a4ac:	463a      	mov	r2, r7
 800a4ae:	f000 f87f 	bl	800a5b0 <_realloc_r>
 800a4b2:	4605      	mov	r5, r0
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	d0de      	beq.n	800a476 <__submore+0x1a>
 800a4b8:	eb00 0806 	add.w	r8, r0, r6
 800a4bc:	4601      	mov	r1, r0
 800a4be:	4632      	mov	r2, r6
 800a4c0:	4640      	mov	r0, r8
 800a4c2:	f7fe fdf7 	bl	80090b4 <memcpy>
 800a4c6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a4ca:	f8c4 8000 	str.w	r8, [r4]
 800a4ce:	e7e9      	b.n	800a4a4 <__submore+0x48>

0800a4d0 <__assert_func>:
 800a4d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4d2:	4614      	mov	r4, r2
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	4b09      	ldr	r3, [pc, #36]	; (800a4fc <__assert_func+0x2c>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4605      	mov	r5, r0
 800a4dc:	68d8      	ldr	r0, [r3, #12]
 800a4de:	b14c      	cbz	r4, 800a4f4 <__assert_func+0x24>
 800a4e0:	4b07      	ldr	r3, [pc, #28]	; (800a500 <__assert_func+0x30>)
 800a4e2:	9100      	str	r1, [sp, #0]
 800a4e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4e8:	4906      	ldr	r1, [pc, #24]	; (800a504 <__assert_func+0x34>)
 800a4ea:	462b      	mov	r3, r5
 800a4ec:	f000 f80e 	bl	800a50c <fiprintf>
 800a4f0:	f000 f89a 	bl	800a628 <abort>
 800a4f4:	4b04      	ldr	r3, [pc, #16]	; (800a508 <__assert_func+0x38>)
 800a4f6:	461c      	mov	r4, r3
 800a4f8:	e7f3      	b.n	800a4e2 <__assert_func+0x12>
 800a4fa:	bf00      	nop
 800a4fc:	200000ec 	.word	0x200000ec
 800a500:	0800ac10 	.word	0x0800ac10
 800a504:	0800ac1d 	.word	0x0800ac1d
 800a508:	0800ac4b 	.word	0x0800ac4b

0800a50c <fiprintf>:
 800a50c:	b40e      	push	{r1, r2, r3}
 800a50e:	b503      	push	{r0, r1, lr}
 800a510:	4601      	mov	r1, r0
 800a512:	ab03      	add	r3, sp, #12
 800a514:	4805      	ldr	r0, [pc, #20]	; (800a52c <fiprintf+0x20>)
 800a516:	f853 2b04 	ldr.w	r2, [r3], #4
 800a51a:	6800      	ldr	r0, [r0, #0]
 800a51c:	9301      	str	r3, [sp, #4]
 800a51e:	f7ff fc4d 	bl	8009dbc <_vfiprintf_r>
 800a522:	b002      	add	sp, #8
 800a524:	f85d eb04 	ldr.w	lr, [sp], #4
 800a528:	b003      	add	sp, #12
 800a52a:	4770      	bx	lr
 800a52c:	200000ec 	.word	0x200000ec

0800a530 <_fstat_r>:
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	4d07      	ldr	r5, [pc, #28]	; (800a550 <_fstat_r+0x20>)
 800a534:	2300      	movs	r3, #0
 800a536:	4604      	mov	r4, r0
 800a538:	4608      	mov	r0, r1
 800a53a:	4611      	mov	r1, r2
 800a53c:	602b      	str	r3, [r5, #0]
 800a53e:	f7f8 f80c 	bl	800255a <_fstat>
 800a542:	1c43      	adds	r3, r0, #1
 800a544:	d102      	bne.n	800a54c <_fstat_r+0x1c>
 800a546:	682b      	ldr	r3, [r5, #0]
 800a548:	b103      	cbz	r3, 800a54c <_fstat_r+0x1c>
 800a54a:	6023      	str	r3, [r4, #0]
 800a54c:	bd38      	pop	{r3, r4, r5, pc}
 800a54e:	bf00      	nop
 800a550:	200007b4 	.word	0x200007b4

0800a554 <_isatty_r>:
 800a554:	b538      	push	{r3, r4, r5, lr}
 800a556:	4d06      	ldr	r5, [pc, #24]	; (800a570 <_isatty_r+0x1c>)
 800a558:	2300      	movs	r3, #0
 800a55a:	4604      	mov	r4, r0
 800a55c:	4608      	mov	r0, r1
 800a55e:	602b      	str	r3, [r5, #0]
 800a560:	f7f8 f80b 	bl	800257a <_isatty>
 800a564:	1c43      	adds	r3, r0, #1
 800a566:	d102      	bne.n	800a56e <_isatty_r+0x1a>
 800a568:	682b      	ldr	r3, [r5, #0]
 800a56a:	b103      	cbz	r3, 800a56e <_isatty_r+0x1a>
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	bd38      	pop	{r3, r4, r5, pc}
 800a570:	200007b4 	.word	0x200007b4

0800a574 <__ascii_mbtowc>:
 800a574:	b082      	sub	sp, #8
 800a576:	b901      	cbnz	r1, 800a57a <__ascii_mbtowc+0x6>
 800a578:	a901      	add	r1, sp, #4
 800a57a:	b142      	cbz	r2, 800a58e <__ascii_mbtowc+0x1a>
 800a57c:	b14b      	cbz	r3, 800a592 <__ascii_mbtowc+0x1e>
 800a57e:	7813      	ldrb	r3, [r2, #0]
 800a580:	600b      	str	r3, [r1, #0]
 800a582:	7812      	ldrb	r2, [r2, #0]
 800a584:	1e10      	subs	r0, r2, #0
 800a586:	bf18      	it	ne
 800a588:	2001      	movne	r0, #1
 800a58a:	b002      	add	sp, #8
 800a58c:	4770      	bx	lr
 800a58e:	4610      	mov	r0, r2
 800a590:	e7fb      	b.n	800a58a <__ascii_mbtowc+0x16>
 800a592:	f06f 0001 	mvn.w	r0, #1
 800a596:	e7f8      	b.n	800a58a <__ascii_mbtowc+0x16>

0800a598 <__malloc_lock>:
 800a598:	4801      	ldr	r0, [pc, #4]	; (800a5a0 <__malloc_lock+0x8>)
 800a59a:	f7fe bd08 	b.w	8008fae <__retarget_lock_acquire_recursive>
 800a59e:	bf00      	nop
 800a5a0:	200007a8 	.word	0x200007a8

0800a5a4 <__malloc_unlock>:
 800a5a4:	4801      	ldr	r0, [pc, #4]	; (800a5ac <__malloc_unlock+0x8>)
 800a5a6:	f7fe bd03 	b.w	8008fb0 <__retarget_lock_release_recursive>
 800a5aa:	bf00      	nop
 800a5ac:	200007a8 	.word	0x200007a8

0800a5b0 <_realloc_r>:
 800a5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b4:	4680      	mov	r8, r0
 800a5b6:	4614      	mov	r4, r2
 800a5b8:	460e      	mov	r6, r1
 800a5ba:	b921      	cbnz	r1, 800a5c6 <_realloc_r+0x16>
 800a5bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c0:	4611      	mov	r1, r2
 800a5c2:	f7ff b98b 	b.w	80098dc <_malloc_r>
 800a5c6:	b92a      	cbnz	r2, 800a5d4 <_realloc_r+0x24>
 800a5c8:	f7ff f91c 	bl	8009804 <_free_r>
 800a5cc:	4625      	mov	r5, r4
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5d4:	f000 f82f 	bl	800a636 <_malloc_usable_size_r>
 800a5d8:	4284      	cmp	r4, r0
 800a5da:	4607      	mov	r7, r0
 800a5dc:	d802      	bhi.n	800a5e4 <_realloc_r+0x34>
 800a5de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5e2:	d812      	bhi.n	800a60a <_realloc_r+0x5a>
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	4640      	mov	r0, r8
 800a5e8:	f7ff f978 	bl	80098dc <_malloc_r>
 800a5ec:	4605      	mov	r5, r0
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d0ed      	beq.n	800a5ce <_realloc_r+0x1e>
 800a5f2:	42bc      	cmp	r4, r7
 800a5f4:	4622      	mov	r2, r4
 800a5f6:	4631      	mov	r1, r6
 800a5f8:	bf28      	it	cs
 800a5fa:	463a      	movcs	r2, r7
 800a5fc:	f7fe fd5a 	bl	80090b4 <memcpy>
 800a600:	4631      	mov	r1, r6
 800a602:	4640      	mov	r0, r8
 800a604:	f7ff f8fe 	bl	8009804 <_free_r>
 800a608:	e7e1      	b.n	800a5ce <_realloc_r+0x1e>
 800a60a:	4635      	mov	r5, r6
 800a60c:	e7df      	b.n	800a5ce <_realloc_r+0x1e>

0800a60e <__ascii_wctomb>:
 800a60e:	b149      	cbz	r1, 800a624 <__ascii_wctomb+0x16>
 800a610:	2aff      	cmp	r2, #255	; 0xff
 800a612:	bf85      	ittet	hi
 800a614:	238a      	movhi	r3, #138	; 0x8a
 800a616:	6003      	strhi	r3, [r0, #0]
 800a618:	700a      	strbls	r2, [r1, #0]
 800a61a:	f04f 30ff 	movhi.w	r0, #4294967295
 800a61e:	bf98      	it	ls
 800a620:	2001      	movls	r0, #1
 800a622:	4770      	bx	lr
 800a624:	4608      	mov	r0, r1
 800a626:	4770      	bx	lr

0800a628 <abort>:
 800a628:	b508      	push	{r3, lr}
 800a62a:	2006      	movs	r0, #6
 800a62c:	f000 f834 	bl	800a698 <raise>
 800a630:	2001      	movs	r0, #1
 800a632:	f7f7 ff5f 	bl	80024f4 <_exit>

0800a636 <_malloc_usable_size_r>:
 800a636:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a63a:	1f18      	subs	r0, r3, #4
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	bfbc      	itt	lt
 800a640:	580b      	ldrlt	r3, [r1, r0]
 800a642:	18c0      	addlt	r0, r0, r3
 800a644:	4770      	bx	lr

0800a646 <_raise_r>:
 800a646:	291f      	cmp	r1, #31
 800a648:	b538      	push	{r3, r4, r5, lr}
 800a64a:	4604      	mov	r4, r0
 800a64c:	460d      	mov	r5, r1
 800a64e:	d904      	bls.n	800a65a <_raise_r+0x14>
 800a650:	2316      	movs	r3, #22
 800a652:	6003      	str	r3, [r0, #0]
 800a654:	f04f 30ff 	mov.w	r0, #4294967295
 800a658:	bd38      	pop	{r3, r4, r5, pc}
 800a65a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a65c:	b112      	cbz	r2, 800a664 <_raise_r+0x1e>
 800a65e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a662:	b94b      	cbnz	r3, 800a678 <_raise_r+0x32>
 800a664:	4620      	mov	r0, r4
 800a666:	f000 f831 	bl	800a6cc <_getpid_r>
 800a66a:	462a      	mov	r2, r5
 800a66c:	4601      	mov	r1, r0
 800a66e:	4620      	mov	r0, r4
 800a670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a674:	f000 b818 	b.w	800a6a8 <_kill_r>
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d00a      	beq.n	800a692 <_raise_r+0x4c>
 800a67c:	1c59      	adds	r1, r3, #1
 800a67e:	d103      	bne.n	800a688 <_raise_r+0x42>
 800a680:	2316      	movs	r3, #22
 800a682:	6003      	str	r3, [r0, #0]
 800a684:	2001      	movs	r0, #1
 800a686:	e7e7      	b.n	800a658 <_raise_r+0x12>
 800a688:	2400      	movs	r4, #0
 800a68a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a68e:	4628      	mov	r0, r5
 800a690:	4798      	blx	r3
 800a692:	2000      	movs	r0, #0
 800a694:	e7e0      	b.n	800a658 <_raise_r+0x12>
	...

0800a698 <raise>:
 800a698:	4b02      	ldr	r3, [pc, #8]	; (800a6a4 <raise+0xc>)
 800a69a:	4601      	mov	r1, r0
 800a69c:	6818      	ldr	r0, [r3, #0]
 800a69e:	f7ff bfd2 	b.w	800a646 <_raise_r>
 800a6a2:	bf00      	nop
 800a6a4:	200000ec 	.word	0x200000ec

0800a6a8 <_kill_r>:
 800a6a8:	b538      	push	{r3, r4, r5, lr}
 800a6aa:	4d07      	ldr	r5, [pc, #28]	; (800a6c8 <_kill_r+0x20>)
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	4608      	mov	r0, r1
 800a6b2:	4611      	mov	r1, r2
 800a6b4:	602b      	str	r3, [r5, #0]
 800a6b6:	f7f7 ff0d 	bl	80024d4 <_kill>
 800a6ba:	1c43      	adds	r3, r0, #1
 800a6bc:	d102      	bne.n	800a6c4 <_kill_r+0x1c>
 800a6be:	682b      	ldr	r3, [r5, #0]
 800a6c0:	b103      	cbz	r3, 800a6c4 <_kill_r+0x1c>
 800a6c2:	6023      	str	r3, [r4, #0]
 800a6c4:	bd38      	pop	{r3, r4, r5, pc}
 800a6c6:	bf00      	nop
 800a6c8:	200007b4 	.word	0x200007b4

0800a6cc <_getpid_r>:
 800a6cc:	f7f7 befa 	b.w	80024c4 <_getpid>

0800a6d0 <_init>:
 800a6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d2:	bf00      	nop
 800a6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6d6:	bc08      	pop	{r3}
 800a6d8:	469e      	mov	lr, r3
 800a6da:	4770      	bx	lr

0800a6dc <_fini>:
 800a6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6de:	bf00      	nop
 800a6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e2:	bc08      	pop	{r3}
 800a6e4:	469e      	mov	lr, r3
 800a6e6:	4770      	bx	lr
