
task44.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ad0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08007c60  08007c60  00017c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e58  08007e58  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007e58  08007e58  00017e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e60  08007e60  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e60  08007e60  00017e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e64  08007e64  00017e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002208  20000074  08007edc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000227c  08007edc  0002227c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b307  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a0  00000000  00000000  0003b3ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  0003eb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e0  00000000  00000000  00040288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ff7  00000000  00000000  00041868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019af4  00000000  00000000  0004685f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001000db  00000000  00000000  00060353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016042e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006948  00000000  00000000  00160480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c48 	.word	0x08007c48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007c48 	.word	0x08007c48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
////////////////////////////////////////////////////////////////////////
int _write(int fd, char* ptr, int len)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	b29a      	uxth	r2, r3
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
 8000588:	68b9      	ldr	r1, [r7, #8]
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <_write+0x28>)
 800058c:	f002 fcca 	bl	8002f24 <HAL_UART_Transmit>
	return len;
 8000590:	687b      	ldr	r3, [r7, #4]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000090 	.word	0x20000090

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fb68 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f866 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f8e6 	bl	800077c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b0:	f000 f8b4 	bl	800071c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b4:	f003 f9f6 	bl	80039a4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 80005b8:	481d      	ldr	r0, [pc, #116]	; (8000630 <main+0x90>)
 80005ba:	f003 faea 	bl	8003b92 <osMutexNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <main+0x94>)
 80005c2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005c4:	4a1c      	ldr	r2, [pc, #112]	; (8000638 <main+0x98>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	481c      	ldr	r0, [pc, #112]	; (800063c <main+0x9c>)
 80005ca:	f003 fa35 	bl	8003a38 <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a1b      	ldr	r2, [pc, #108]	; (8000640 <main+0xa0>)
 80005d2:	6013      	str	r3, [r2, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask, (void*) &task1, &Task1_attributes);
 80005d4:	4a1b      	ldr	r2, [pc, #108]	; (8000644 <main+0xa4>)
 80005d6:	491c      	ldr	r1, [pc, #112]	; (8000648 <main+0xa8>)
 80005d8:	481c      	ldr	r0, [pc, #112]	; (800064c <main+0xac>)
 80005da:	f003 fa2d 	bl	8003a38 <osThreadNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a1b      	ldr	r2, [pc, #108]	; (8000650 <main+0xb0>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask, (void*) &task2, &Task2_attributes);
 80005e4:	4a1b      	ldr	r2, [pc, #108]	; (8000654 <main+0xb4>)
 80005e6:	491c      	ldr	r1, [pc, #112]	; (8000658 <main+0xb8>)
 80005e8:	4818      	ldr	r0, [pc, #96]	; (800064c <main+0xac>)
 80005ea:	f003 fa25 	bl	8003a38 <osThreadNew>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a1a      	ldr	r2, [pc, #104]	; (800065c <main+0xbc>)
 80005f2:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask, (void*) &task3, &Task3_attributes);
 80005f4:	4a1a      	ldr	r2, [pc, #104]	; (8000660 <main+0xc0>)
 80005f6:	491b      	ldr	r1, [pc, #108]	; (8000664 <main+0xc4>)
 80005f8:	4814      	ldr	r0, [pc, #80]	; (800064c <main+0xac>)
 80005fa:	f003 fa1d 	bl	8003a38 <osThreadNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a19      	ldr	r2, [pc, #100]	; (8000668 <main+0xc8>)
 8000602:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000604:	f003 f9f2 	bl	80039ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  task1.name = "task1" ;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <main+0xa8>)
 800060a:	4a18      	ldr	r2, [pc, #96]	; (800066c <main+0xcc>)
 800060c:	601a      	str	r2, [r3, #0]
  task2.name = "task2" ;
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <main+0xb8>)
 8000610:	4a17      	ldr	r2, [pc, #92]	; (8000670 <main+0xd0>)
 8000612:	601a      	str	r2, [r3, #0]
  task3.name = "task3" ;
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <main+0xc4>)
 8000616:	4a17      	ldr	r2, [pc, #92]	; (8000674 <main+0xd4>)
 8000618:	601a      	str	r2, [r3, #0]

  task1.delay_ms = 47;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <main+0xa8>)
 800061c:	222f      	movs	r2, #47	; 0x2f
 800061e:	605a      	str	r2, [r3, #4]
  task2.delay_ms = 57;
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <main+0xb8>)
 8000622:	2239      	movs	r2, #57	; 0x39
 8000624:	605a      	str	r2, [r3, #4]
  task3.delay_ms = 89;
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <main+0xc4>)
 8000628:	2259      	movs	r2, #89	; 0x59
 800062a:	605a      	str	r2, [r3, #4]

  while (1)
 800062c:	e7fe      	b.n	800062c <main+0x8c>
 800062e:	bf00      	nop
 8000630:	08007d68 	.word	0x08007d68
 8000634:	20000124 	.word	0x20000124
 8000638:	08007cd8 	.word	0x08007cd8
 800063c:	08000849 	.word	0x08000849
 8000640:	20000114 	.word	0x20000114
 8000644:	08007cfc 	.word	0x08007cfc
 8000648:	20000128 	.word	0x20000128
 800064c:	08000bcd 	.word	0x08000bcd
 8000650:	20000118 	.word	0x20000118
 8000654:	08007d20 	.word	0x08007d20
 8000658:	20000130 	.word	0x20000130
 800065c:	2000011c 	.word	0x2000011c
 8000660:	08007d44 	.word	0x08007d44
 8000664:	20000138 	.word	0x20000138
 8000668:	20000120 	.word	0x20000120
 800066c:	08007c90 	.word	0x08007c90
 8000670:	08007c98 	.word	0x08007c98
 8000674:	08007ca0 	.word	0x08007ca0

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b096      	sub	sp, #88	; 0x58
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2244      	movs	r2, #68	; 0x44
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f006 fb48 	bl	8006d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800069e:	f000 fddd 	bl	800125c <HAL_PWREx_ControlVoltageScaling>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006a8:	f000 f8e8 	bl	800087c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b6:	2310      	movs	r3, #16
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006be:	2302      	movs	r3, #2
 80006c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006c6:	230a      	movs	r3, #10
 80006c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ca:	2307      	movs	r3, #7
 80006cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fe14 	bl	8001308 <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006e6:	f000 f8c9 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2303      	movs	r3, #3
 80006f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006fe:	463b      	mov	r3, r7
 8000700:	2104      	movs	r1, #4
 8000702:	4618      	mov	r0, r3
 8000704:	f001 f9dc 	bl	8001ac0 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800070e:	f000 f8b5 	bl	800087c <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3758      	adds	r7, #88	; 0x58
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000722:	4a15      	ldr	r2, [pc, #84]	; (8000778 <MX_USART2_UART_Init+0x5c>)
 8000724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART2_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART2_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART2_UART_Init+0x58>)
 8000760:	f002 fb92 	bl	8002e88 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800076a:	f000 f887 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000090 	.word	0x20000090
 8000778:	40004400 	.word	0x40004400

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	4b2b      	ldr	r3, [pc, #172]	; (8000840 <MX_GPIO_Init+0xc4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a2a      	ldr	r2, [pc, #168]	; (8000840 <MX_GPIO_Init+0xc4>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b28      	ldr	r3, [pc, #160]	; (8000840 <MX_GPIO_Init+0xc4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	4b25      	ldr	r3, [pc, #148]	; (8000840 <MX_GPIO_Init+0xc4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a24      	ldr	r2, [pc, #144]	; (8000840 <MX_GPIO_Init+0xc4>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b22      	ldr	r3, [pc, #136]	; (8000840 <MX_GPIO_Init+0xc4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <MX_GPIO_Init+0xc4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a1e      	ldr	r2, [pc, #120]	; (8000840 <MX_GPIO_Init+0xc4>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_GPIO_Init+0xc4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_GPIO_Init+0xc4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a18      	ldr	r2, [pc, #96]	; (8000840 <MX_GPIO_Init+0xc4>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_GPIO_Init+0xc4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2120      	movs	r1, #32
 80007f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fa:	f000 fd09 	bl	8001210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000804:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	480b      	ldr	r0, [pc, #44]	; (8000844 <MX_GPIO_Init+0xc8>)
 8000816:	f000 fb51 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800081a:	2320      	movs	r3, #32
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000834:	f000 fb42 	bl	8000ebc <HAL_GPIO_Init>

}
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	; 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40021000 	.word	0x40021000
 8000844:	48000800 	.word	0x48000800

08000848 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f003 f983 	bl	8003b5c <osDelay>
 8000856:	e7fb      	b.n	8000850 <StartDefaultTask+0x8>

08000858 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a04      	ldr	r2, [pc, #16]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d101      	bne.n	800086e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800086a:	f000 fa25 	bl	8000cb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40014400 	.word	0x40014400

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	e7fe      	b.n	8000884 <Error_Handler+0x8>
	...

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <HAL_MspInit+0x4c>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000892:	4a10      	ldr	r2, [pc, #64]	; (80008d4 <HAL_MspInit+0x4c>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6613      	str	r3, [r2, #96]	; 0x60
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <HAL_MspInit+0x4c>)
 800089c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <HAL_MspInit+0x4c>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <HAL_MspInit+0x4c>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b0:	6593      	str	r3, [r2, #88]	; 0x58
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_MspInit+0x4c>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	210f      	movs	r1, #15
 80008c2:	f06f 0001 	mvn.w	r0, #1
 80008c6:	f000 facf 	bl	8000e68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000

080008d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0ac      	sub	sp, #176	; 0xb0
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2288      	movs	r2, #136	; 0x88
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f006 fa0f 	bl	8006d1c <memset>
  if(huart->Instance==USART2)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a21      	ldr	r2, [pc, #132]	; (8000988 <HAL_UART_MspInit+0xb0>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d13b      	bne.n	8000980 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000908:	2302      	movs	r3, #2
 800090a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800090c:	2300      	movs	r3, #0
 800090e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4618      	mov	r0, r3
 8000916:	f001 fb29 	bl	8001f6c <HAL_RCCEx_PeriphCLKConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000920:	f7ff ffac 	bl	800087c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000924:	4b19      	ldr	r3, [pc, #100]	; (800098c <HAL_UART_MspInit+0xb4>)
 8000926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000928:	4a18      	ldr	r2, [pc, #96]	; (800098c <HAL_UART_MspInit+0xb4>)
 800092a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092e:	6593      	str	r3, [r2, #88]	; 0x58
 8000930:	4b16      	ldr	r3, [pc, #88]	; (800098c <HAL_UART_MspInit+0xb4>)
 8000932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <HAL_UART_MspInit+0xb4>)
 800093e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000940:	4a12      	ldr	r2, [pc, #72]	; (800098c <HAL_UART_MspInit+0xb4>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000948:	4b10      	ldr	r3, [pc, #64]	; (800098c <HAL_UART_MspInit+0xb4>)
 800094a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000954:	230c      	movs	r3, #12
 8000956:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800096c:	2307      	movs	r3, #7
 800096e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000976:	4619      	mov	r1, r3
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f000 fa9e 	bl	8000ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000980:	bf00      	nop
 8000982:	37b0      	adds	r7, #176	; 0xb0
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40004400 	.word	0x40004400
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	2019      	movs	r0, #25
 80009a6:	f000 fa5f 	bl	8000e68 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009aa:	2019      	movs	r0, #25
 80009ac:	f000 fa78 	bl	8000ea0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <HAL_InitTick+0x9c>)
 80009b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b4:	4a1d      	ldr	r2, [pc, #116]	; (8000a2c <HAL_InitTick+0x9c>)
 80009b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ba:	6613      	str	r3, [r2, #96]	; 0x60
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <HAL_InitTick+0x9c>)
 80009be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c8:	f107 0210 	add.w	r2, r7, #16
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4611      	mov	r1, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 fa38 	bl	8001e48 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009d8:	f001 fa20 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 80009dc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e0:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <HAL_InitTick+0xa0>)
 80009e2:	fba2 2303 	umull	r2, r3, r2, r3
 80009e6:	0c9b      	lsrs	r3, r3, #18
 80009e8:	3b01      	subs	r3, #1
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_InitTick+0xa4>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <HAL_InitTick+0xa8>)
 80009f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <HAL_InitTick+0xa4>)
 80009f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f8:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80009fa:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <HAL_InitTick+0xa4>)
 80009fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fe:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <HAL_InitTick+0xa4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_InitTick+0xa4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8000a0c:	4809      	ldr	r0, [pc, #36]	; (8000a34 <HAL_InitTick+0xa4>)
 8000a0e:	f001 ff69 	bl	80028e4 <HAL_TIM_Base_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d104      	bne.n	8000a22 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8000a18:	4806      	ldr	r0, [pc, #24]	; (8000a34 <HAL_InitTick+0xa4>)
 8000a1a:	f001 ffc5 	bl	80029a8 <HAL_TIM_Base_Start_IT>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	e000      	b.n	8000a24 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3730      	adds	r7, #48	; 0x30
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	431bde83 	.word	0x431bde83
 8000a34:	20000140 	.word	0x20000140
 8000a38:	40014400 	.word	0x40014400

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a6e:	f002 f80b 	bl	8002a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000140 	.word	0x20000140

08000a7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	e00a      	b.n	8000aa4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a8e:	f3af 8000 	nop.w
 8000a92:	4601      	mov	r1, r0
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	60ba      	str	r2, [r7, #8]
 8000a9a:	b2ca      	uxtb	r2, r1
 8000a9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	dbf0      	blt.n	8000a8e <_read+0x12>
	}

return len;
 8000aac:	687b      	ldr	r3, [r7, #4]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
	return -1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ade:	605a      	str	r2, [r3, #4]
	return 0;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <_isatty>:

int _isatty(int file)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
	return 1;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b28:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <_sbrk+0x5c>)
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <_sbrk+0x60>)
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <_sbrk+0x64>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <_sbrk+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d207      	bcs.n	8000b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b50:	f006 f8ac 	bl	8006cac <__errno>
 8000b54:	4603      	mov	r3, r0
 8000b56:	220c      	movs	r2, #12
 8000b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	e009      	b.n	8000b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <_sbrk+0x64>)
 8000b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20018000 	.word	0x20018000
 8000b80:	00000400 	.word	0x00000400
 8000b84:	2000018c 	.word	0x2000018c
 8000b88:	20002280 	.word	0x20002280

08000b8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <myprint>:
#include "cmsis_os.h"

extern osMutexId_t myMutex01Handle;

void myprint(char* name)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	printf("HI! My name is %s \r\n", name );
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <myprint+0x18>)
 8000bbc:	f006 f8b6 	bl	8006d2c <iprintf>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	08007ca8 	.word	0x08007ca8

08000bcc <StartTask>:

void StartTask(void *argument)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask1 */
	PrintTask *task = (PrintTask*)argument;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	osMutexAcquire(myMutex01Handle , osWaitForever);
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <StartTask+0x54>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000be0:	4618      	mov	r0, r3
 8000be2:	f003 f85c 	bl	8003c9e <osMutexAcquire>
	for(int i=0;i<3; i++){
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	e00c      	b.n	8000c06 <StartTask+0x3a>
		myprint(task->name);
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ffdd 	bl	8000bb0 <myprint>
		osDelay(task->delay_ms);
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f002 ffae 	bl	8003b5c <osDelay>
	for(int i=0;i<3; i++){
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	3301      	adds	r3, #1
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	ddef      	ble.n	8000bec <StartTask+0x20>
	}
	osMutexRelease(myMutex01Handle);
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <StartTask+0x54>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 f88f 	bl	8003d34 <osMutexRelease>
	osDelay(1);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f002 ffa0 	bl	8003b5c <osDelay>
	osMutexAcquire(myMutex01Handle , osWaitForever);
 8000c1c:	e7dc      	b.n	8000bd8 <StartTask+0xc>
 8000c1e:	bf00      	nop
 8000c20:	20000124 	.word	0x20000124

08000c24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c28:	f7ff ffb0 	bl	8000b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2e:	490d      	ldr	r1, [pc, #52]	; (8000c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <LoopForever+0xe>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c44:	4c0a      	ldr	r4, [pc, #40]	; (8000c70 <LoopForever+0x16>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c52:	f006 f831 	bl	8006cb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c56:	f7ff fca3 	bl	80005a0 <main>

08000c5a <LoopForever>:

LoopForever:
    b LoopForever
 8000c5a:	e7fe      	b.n	8000c5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c68:	08007e68 	.word	0x08007e68
  ldr r2, =_sbss
 8000c6c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c70:	2000227c 	.word	0x2000227c

08000c74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC1_2_IRQHandler>
	...

08000c78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <HAL_Init+0x3c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <HAL_Init+0x3c>)
 8000c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8e:	2003      	movs	r0, #3
 8000c90:	f000 f8df 	bl	8000e52 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c94:	200f      	movs	r0, #15
 8000c96:	f7ff fe7b 	bl	8000990 <HAL_InitTick>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d002      	beq.n	8000ca6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	71fb      	strb	r3, [r7, #7]
 8000ca4:	e001      	b.n	8000caa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ca6:	f7ff fdef 	bl	8000888 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000caa:	79fb      	ldrb	r3, [r7, #7]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40022000 	.word	0x40022000

08000cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x24>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_IncTick+0x24>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000190 	.word	0x20000190

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000190 	.word	0x20000190

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db0b      	blt.n	8000d86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f003 021f 	and.w	r2, r3, #31
 8000d74:	4907      	ldr	r1, [pc, #28]	; (8000d94 <__NVIC_EnableIRQ+0x38>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	; (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	; (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
         );
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	; 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ff4c 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7a:	f7ff ff61 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000e7e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	68b9      	ldr	r1, [r7, #8]
 8000e84:	6978      	ldr	r0, [r7, #20]
 8000e86:	f7ff ffb1 	bl	8000dec <NVIC_EncodePriority>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff80 	bl	8000d98 <__NVIC_SetPriority>
}
 8000e98:	bf00      	nop
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ff54 	bl	8000d5c <__NVIC_EnableIRQ>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b087      	sub	sp, #28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eca:	e17f      	b.n	80011cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 8171 	beq.w	80011c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d005      	beq.n	8000efc <HAL_GPIO_Init+0x40>
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d130      	bne.n	8000f5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f32:	2201      	movs	r2, #1
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	091b      	lsrs	r3, r3, #4
 8000f48:	f003 0201 	and.w	r2, r3, #1
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d118      	bne.n	8000f9c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f70:	2201      	movs	r2, #1
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	08db      	lsrs	r3, r3, #3
 8000f86:	f003 0201 	and.w	r2, r3, #1
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d017      	beq.n	8000fd8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d123      	bne.n	800102c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	08da      	lsrs	r2, r3, #3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3208      	adds	r2, #8
 8000fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	691a      	ldr	r2, [r3, #16]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	08da      	lsrs	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3208      	adds	r2, #8
 8001026:	6939      	ldr	r1, [r7, #16]
 8001028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0203 	and.w	r2, r3, #3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80ac 	beq.w	80011c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	4b5f      	ldr	r3, [pc, #380]	; (80011ec <HAL_GPIO_Init+0x330>)
 8001070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001072:	4a5e      	ldr	r2, [pc, #376]	; (80011ec <HAL_GPIO_Init+0x330>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6613      	str	r3, [r2, #96]	; 0x60
 800107a:	4b5c      	ldr	r3, [pc, #368]	; (80011ec <HAL_GPIO_Init+0x330>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001086:	4a5a      	ldr	r2, [pc, #360]	; (80011f0 <HAL_GPIO_Init+0x334>)
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010b0:	d025      	beq.n	80010fe <HAL_GPIO_Init+0x242>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4f      	ldr	r2, [pc, #316]	; (80011f4 <HAL_GPIO_Init+0x338>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d01f      	beq.n	80010fa <HAL_GPIO_Init+0x23e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4e      	ldr	r2, [pc, #312]	; (80011f8 <HAL_GPIO_Init+0x33c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d019      	beq.n	80010f6 <HAL_GPIO_Init+0x23a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4d      	ldr	r2, [pc, #308]	; (80011fc <HAL_GPIO_Init+0x340>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d013      	beq.n	80010f2 <HAL_GPIO_Init+0x236>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4c      	ldr	r2, [pc, #304]	; (8001200 <HAL_GPIO_Init+0x344>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d00d      	beq.n	80010ee <HAL_GPIO_Init+0x232>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4b      	ldr	r2, [pc, #300]	; (8001204 <HAL_GPIO_Init+0x348>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d007      	beq.n	80010ea <HAL_GPIO_Init+0x22e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4a      	ldr	r2, [pc, #296]	; (8001208 <HAL_GPIO_Init+0x34c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d101      	bne.n	80010e6 <HAL_GPIO_Init+0x22a>
 80010e2:	2306      	movs	r3, #6
 80010e4:	e00c      	b.n	8001100 <HAL_GPIO_Init+0x244>
 80010e6:	2307      	movs	r3, #7
 80010e8:	e00a      	b.n	8001100 <HAL_GPIO_Init+0x244>
 80010ea:	2305      	movs	r3, #5
 80010ec:	e008      	b.n	8001100 <HAL_GPIO_Init+0x244>
 80010ee:	2304      	movs	r3, #4
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x244>
 80010f2:	2303      	movs	r3, #3
 80010f4:	e004      	b.n	8001100 <HAL_GPIO_Init+0x244>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_Init+0x244>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_GPIO_Init+0x244>
 80010fe:	2300      	movs	r3, #0
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	f002 0203 	and.w	r2, r2, #3
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	4093      	lsls	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001110:	4937      	ldr	r1, [pc, #220]	; (80011f0 <HAL_GPIO_Init+0x334>)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800111e:	4b3b      	ldr	r3, [pc, #236]	; (800120c <HAL_GPIO_Init+0x350>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001142:	4a32      	ldr	r2, [pc, #200]	; (800120c <HAL_GPIO_Init+0x350>)
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001148:	4b30      	ldr	r3, [pc, #192]	; (800120c <HAL_GPIO_Init+0x350>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	43db      	mvns	r3, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800116c:	4a27      	ldr	r2, [pc, #156]	; (800120c <HAL_GPIO_Init+0x350>)
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001172:	4b26      	ldr	r3, [pc, #152]	; (800120c <HAL_GPIO_Init+0x350>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	43db      	mvns	r3, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001196:	4a1d      	ldr	r2, [pc, #116]	; (800120c <HAL_GPIO_Init+0x350>)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_GPIO_Init+0x350>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011c0:	4a12      	ldr	r2, [pc, #72]	; (800120c <HAL_GPIO_Init+0x350>)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	3301      	adds	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa22 f303 	lsr.w	r3, r2, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f47f ae78 	bne.w	8000ecc <HAL_GPIO_Init+0x10>
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	371c      	adds	r7, #28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010000 	.word	0x40010000
 80011f4:	48000400 	.word	0x48000400
 80011f8:	48000800 	.word	0x48000800
 80011fc:	48000c00 	.word	0x48000c00
 8001200:	48001000 	.word	0x48001000
 8001204:	48001400 	.word	0x48001400
 8001208:	48001800 	.word	0x48001800
 800120c:	40010400 	.word	0x40010400

08001210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	807b      	strh	r3, [r7, #2]
 800121c:	4613      	mov	r3, r2
 800121e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001220:	787b      	ldrb	r3, [r7, #1]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001226:	887a      	ldrh	r2, [r7, #2]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800122c:	e002      	b.n	8001234 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <HAL_PWREx_GetVoltageRange+0x18>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40007000 	.word	0x40007000

0800125c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800126a:	d130      	bne.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001278:	d038      	beq.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001282:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001284:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001288:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2232      	movs	r2, #50	; 0x32
 8001290:	fb02 f303 	mul.w	r3, r2, r3
 8001294:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001296:	fba2 2303 	umull	r2, r3, r2, r3
 800129a:	0c9b      	lsrs	r3, r3, #18
 800129c:	3301      	adds	r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012a0:	e002      	b.n	80012a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b4:	d102      	bne.n	80012bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1f2      	bne.n	80012a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c8:	d110      	bne.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e00f      	b.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012da:	d007      	beq.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012e4:	4a05      	ldr	r2, [pc, #20]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40007000 	.word	0x40007000
 8001300:	20000000 	.word	0x20000000
 8001304:	431bde83 	.word	0x431bde83

08001308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e3ca      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800131a:	4b97      	ldr	r3, [pc, #604]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001324:	4b94      	ldr	r3, [pc, #592]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 80e4 	beq.w	8001504 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d007      	beq.n	8001352 <HAL_RCC_OscConfig+0x4a>
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	2b0c      	cmp	r3, #12
 8001346:	f040 808b 	bne.w	8001460 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2b01      	cmp	r3, #1
 800134e:	f040 8087 	bne.w	8001460 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001352:	4b89      	ldr	r3, [pc, #548]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d005      	beq.n	800136a <HAL_RCC_OscConfig+0x62>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e3a2      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1a      	ldr	r2, [r3, #32]
 800136e:	4b82      	ldr	r3, [pc, #520]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d004      	beq.n	8001384 <HAL_RCC_OscConfig+0x7c>
 800137a:	4b7f      	ldr	r3, [pc, #508]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001382:	e005      	b.n	8001390 <HAL_RCC_OscConfig+0x88>
 8001384:	4b7c      	ldr	r3, [pc, #496]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 8001386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800138a:	091b      	lsrs	r3, r3, #4
 800138c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001390:	4293      	cmp	r3, r2
 8001392:	d223      	bcs.n	80013dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4618      	mov	r0, r3
 800139a:	f000 fd87 	bl	8001eac <RCC_SetFlashLatencyFromMSIRange>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e383      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013a8:	4b73      	ldr	r3, [pc, #460]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a72      	ldr	r2, [pc, #456]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b70      	ldr	r3, [pc, #448]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	496d      	ldr	r1, [pc, #436]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013c6:	4b6c      	ldr	r3, [pc, #432]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	4968      	ldr	r1, [pc, #416]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	604b      	str	r3, [r1, #4]
 80013da:	e025      	b.n	8001428 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013dc:	4b66      	ldr	r3, [pc, #408]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a65      	ldr	r2, [pc, #404]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80013e2:	f043 0308 	orr.w	r3, r3, #8
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b63      	ldr	r3, [pc, #396]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	4960      	ldr	r1, [pc, #384]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013fa:	4b5f      	ldr	r3, [pc, #380]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	495b      	ldr	r1, [pc, #364]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 800140a:	4313      	orrs	r3, r2
 800140c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d109      	bne.n	8001428 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	4618      	mov	r0, r3
 800141a:	f000 fd47 	bl	8001eac <RCC_SetFlashLatencyFromMSIRange>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e343      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001428:	f000 fc4a 	bl	8001cc0 <HAL_RCC_GetSysClockFreq>
 800142c:	4602      	mov	r2, r0
 800142e:	4b52      	ldr	r3, [pc, #328]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	f003 030f 	and.w	r3, r3, #15
 8001438:	4950      	ldr	r1, [pc, #320]	; (800157c <HAL_RCC_OscConfig+0x274>)
 800143a:	5ccb      	ldrb	r3, [r1, r3]
 800143c:	f003 031f 	and.w	r3, r3, #31
 8001440:	fa22 f303 	lsr.w	r3, r2, r3
 8001444:	4a4e      	ldr	r2, [pc, #312]	; (8001580 <HAL_RCC_OscConfig+0x278>)
 8001446:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001448:	4b4e      	ldr	r3, [pc, #312]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fa9f 	bl	8000990 <HAL_InitTick>
 8001452:	4603      	mov	r3, r0
 8001454:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d052      	beq.n	8001502 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	e327      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d032      	beq.n	80014ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001468:	4b43      	ldr	r3, [pc, #268]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a42      	ldr	r2, [pc, #264]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001474:	f7ff fc34 	bl	8000ce0 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800147c:	f7ff fc30 	bl	8000ce0 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e310      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800148e:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800149a:	4b37      	ldr	r3, [pc, #220]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a36      	ldr	r2, [pc, #216]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	4931      	ldr	r1, [pc, #196]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014b8:	4b2f      	ldr	r3, [pc, #188]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	492c      	ldr	r1, [pc, #176]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
 80014cc:	e01a      	b.n	8001504 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014ce:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a29      	ldr	r2, [pc, #164]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014da:	f7ff fc01 	bl	8000ce0 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014e2:	f7ff fbfd 	bl	8000ce0 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e2dd      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014f4:	4b20      	ldr	r3, [pc, #128]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f0      	bne.n	80014e2 <HAL_RCC_OscConfig+0x1da>
 8001500:	e000      	b.n	8001504 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001502:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d074      	beq.n	80015fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	2b08      	cmp	r3, #8
 8001514:	d005      	beq.n	8001522 <HAL_RCC_OscConfig+0x21a>
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	2b0c      	cmp	r3, #12
 800151a:	d10e      	bne.n	800153a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d10b      	bne.n	800153a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d064      	beq.n	80015f8 <HAL_RCC_OscConfig+0x2f0>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d160      	bne.n	80015f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e2ba      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001542:	d106      	bne.n	8001552 <HAL_RCC_OscConfig+0x24a>
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 800154a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	e026      	b.n	80015a0 <HAL_RCC_OscConfig+0x298>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800155a:	d115      	bne.n	8001588 <HAL_RCC_OscConfig+0x280>
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a05      	ldr	r2, [pc, #20]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 8001562:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a02      	ldr	r2, [pc, #8]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 800156e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	e014      	b.n	80015a0 <HAL_RCC_OscConfig+0x298>
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000
 800157c:	08007d78 	.word	0x08007d78
 8001580:	20000000 	.word	0x20000000
 8001584:	20000004 	.word	0x20000004
 8001588:	4ba0      	ldr	r3, [pc, #640]	; (800180c <HAL_RCC_OscConfig+0x504>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a9f      	ldr	r2, [pc, #636]	; (800180c <HAL_RCC_OscConfig+0x504>)
 800158e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b9d      	ldr	r3, [pc, #628]	; (800180c <HAL_RCC_OscConfig+0x504>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a9c      	ldr	r2, [pc, #624]	; (800180c <HAL_RCC_OscConfig+0x504>)
 800159a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d013      	beq.n	80015d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a8:	f7ff fb9a 	bl	8000ce0 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b0:	f7ff fb96 	bl	8000ce0 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	; 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e276      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015c2:	4b92      	ldr	r3, [pc, #584]	; (800180c <HAL_RCC_OscConfig+0x504>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x2a8>
 80015ce:	e014      	b.n	80015fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d0:	f7ff fb86 	bl	8000ce0 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fb82 	bl	8000ce0 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	; 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e262      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ea:	4b88      	ldr	r3, [pc, #544]	; (800180c <HAL_RCC_OscConfig+0x504>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x2d0>
 80015f6:	e000      	b.n	80015fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d060      	beq.n	80016c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	2b04      	cmp	r3, #4
 800160a:	d005      	beq.n	8001618 <HAL_RCC_OscConfig+0x310>
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2b0c      	cmp	r3, #12
 8001610:	d119      	bne.n	8001646 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d116      	bne.n	8001646 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001618:	4b7c      	ldr	r3, [pc, #496]	; (800180c <HAL_RCC_OscConfig+0x504>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_RCC_OscConfig+0x328>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e23f      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4b76      	ldr	r3, [pc, #472]	; (800180c <HAL_RCC_OscConfig+0x504>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	061b      	lsls	r3, r3, #24
 800163e:	4973      	ldr	r1, [pc, #460]	; (800180c <HAL_RCC_OscConfig+0x504>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001644:	e040      	b.n	80016c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d023      	beq.n	8001696 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800164e:	4b6f      	ldr	r3, [pc, #444]	; (800180c <HAL_RCC_OscConfig+0x504>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a6e      	ldr	r2, [pc, #440]	; (800180c <HAL_RCC_OscConfig+0x504>)
 8001654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165a:	f7ff fb41 	bl	8000ce0 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001662:	f7ff fb3d 	bl	8000ce0 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e21d      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001674:	4b65      	ldr	r3, [pc, #404]	; (800180c <HAL_RCC_OscConfig+0x504>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001680:	4b62      	ldr	r3, [pc, #392]	; (800180c <HAL_RCC_OscConfig+0x504>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	061b      	lsls	r3, r3, #24
 800168e:	495f      	ldr	r1, [pc, #380]	; (800180c <HAL_RCC_OscConfig+0x504>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
 8001694:	e018      	b.n	80016c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001696:	4b5d      	ldr	r3, [pc, #372]	; (800180c <HAL_RCC_OscConfig+0x504>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a5c      	ldr	r2, [pc, #368]	; (800180c <HAL_RCC_OscConfig+0x504>)
 800169c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7ff fb1d 	bl	8000ce0 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016aa:	f7ff fb19 	bl	8000ce0 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e1f9      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016bc:	4b53      	ldr	r3, [pc, #332]	; (800180c <HAL_RCC_OscConfig+0x504>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f0      	bne.n	80016aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d03c      	beq.n	800174e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01c      	beq.n	8001716 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016dc:	4b4b      	ldr	r3, [pc, #300]	; (800180c <HAL_RCC_OscConfig+0x504>)
 80016de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e2:	4a4a      	ldr	r2, [pc, #296]	; (800180c <HAL_RCC_OscConfig+0x504>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ec:	f7ff faf8 	bl	8000ce0 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f4:	f7ff faf4 	bl	8000ce0 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e1d4      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001706:	4b41      	ldr	r3, [pc, #260]	; (800180c <HAL_RCC_OscConfig+0x504>)
 8001708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0ef      	beq.n	80016f4 <HAL_RCC_OscConfig+0x3ec>
 8001714:	e01b      	b.n	800174e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001716:	4b3d      	ldr	r3, [pc, #244]	; (800180c <HAL_RCC_OscConfig+0x504>)
 8001718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800171c:	4a3b      	ldr	r2, [pc, #236]	; (800180c <HAL_RCC_OscConfig+0x504>)
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001726:	f7ff fadb 	bl	8000ce0 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800172e:	f7ff fad7 	bl	8000ce0 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e1b7      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001740:	4b32      	ldr	r3, [pc, #200]	; (800180c <HAL_RCC_OscConfig+0x504>)
 8001742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1ef      	bne.n	800172e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 80a6 	beq.w	80018a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001760:	4b2a      	ldr	r3, [pc, #168]	; (800180c <HAL_RCC_OscConfig+0x504>)
 8001762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10d      	bne.n	8001788 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176c:	4b27      	ldr	r3, [pc, #156]	; (800180c <HAL_RCC_OscConfig+0x504>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	4a26      	ldr	r2, [pc, #152]	; (800180c <HAL_RCC_OscConfig+0x504>)
 8001772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001776:	6593      	str	r3, [r2, #88]	; 0x58
 8001778:	4b24      	ldr	r3, [pc, #144]	; (800180c <HAL_RCC_OscConfig+0x504>)
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001784:	2301      	movs	r3, #1
 8001786:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001788:	4b21      	ldr	r3, [pc, #132]	; (8001810 <HAL_RCC_OscConfig+0x508>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001790:	2b00      	cmp	r3, #0
 8001792:	d118      	bne.n	80017c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001794:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <HAL_RCC_OscConfig+0x508>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a1d      	ldr	r2, [pc, #116]	; (8001810 <HAL_RCC_OscConfig+0x508>)
 800179a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a0:	f7ff fa9e 	bl	8000ce0 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a8:	f7ff fa9a 	bl	8000ce0 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e17a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_RCC_OscConfig+0x508>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d108      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4d8>
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_RCC_OscConfig+0x504>)
 80017d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d4:	4a0d      	ldr	r2, [pc, #52]	; (800180c <HAL_RCC_OscConfig+0x504>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017de:	e029      	b.n	8001834 <HAL_RCC_OscConfig+0x52c>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b05      	cmp	r3, #5
 80017e6:	d115      	bne.n	8001814 <HAL_RCC_OscConfig+0x50c>
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_RCC_OscConfig+0x504>)
 80017ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ee:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_RCC_OscConfig+0x504>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <HAL_RCC_OscConfig+0x504>)
 80017fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fe:	4a03      	ldr	r2, [pc, #12]	; (800180c <HAL_RCC_OscConfig+0x504>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001808:	e014      	b.n	8001834 <HAL_RCC_OscConfig+0x52c>
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000
 8001810:	40007000 	.word	0x40007000
 8001814:	4b9c      	ldr	r3, [pc, #624]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 8001816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181a:	4a9b      	ldr	r2, [pc, #620]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 800181c:	f023 0301 	bic.w	r3, r3, #1
 8001820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001824:	4b98      	ldr	r3, [pc, #608]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 8001826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182a:	4a97      	ldr	r2, [pc, #604]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 800182c:	f023 0304 	bic.w	r3, r3, #4
 8001830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d016      	beq.n	800186a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183c:	f7ff fa50 	bl	8000ce0 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001842:	e00a      	b.n	800185a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001844:	f7ff fa4c 	bl	8000ce0 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e12a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800185a:	4b8b      	ldr	r3, [pc, #556]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 800185c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0ed      	beq.n	8001844 <HAL_RCC_OscConfig+0x53c>
 8001868:	e015      	b.n	8001896 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186a:	f7ff fa39 	bl	8000ce0 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001870:	e00a      	b.n	8001888 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f7ff fa35 	bl	8000ce0 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001880:	4293      	cmp	r3, r2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e113      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001888:	4b7f      	ldr	r3, [pc, #508]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 800188a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1ed      	bne.n	8001872 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001896:	7ffb      	ldrb	r3, [r7, #31]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d105      	bne.n	80018a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800189c:	4b7a      	ldr	r3, [pc, #488]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a0:	4a79      	ldr	r2, [pc, #484]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 80018a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80fe 	beq.w	8001aae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	f040 80d0 	bne.w	8001a5c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018bc:	4b72      	ldr	r3, [pc, #456]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f003 0203 	and.w	r2, r3, #3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d130      	bne.n	8001932 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	3b01      	subs	r3, #1
 80018dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d127      	bne.n	8001932 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d11f      	bne.n	8001932 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018fc:	2a07      	cmp	r2, #7
 80018fe:	bf14      	ite	ne
 8001900:	2201      	movne	r2, #1
 8001902:	2200      	moveq	r2, #0
 8001904:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001906:	4293      	cmp	r3, r2
 8001908:	d113      	bne.n	8001932 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001914:	085b      	lsrs	r3, r3, #1
 8001916:	3b01      	subs	r3, #1
 8001918:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800191a:	429a      	cmp	r2, r3
 800191c:	d109      	bne.n	8001932 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	085b      	lsrs	r3, r3, #1
 800192a:	3b01      	subs	r3, #1
 800192c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d06e      	beq.n	8001a10 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	2b0c      	cmp	r3, #12
 8001936:	d069      	beq.n	8001a0c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001938:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d105      	bne.n	8001950 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001944:	4b50      	ldr	r3, [pc, #320]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0ad      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001954:	4b4c      	ldr	r3, [pc, #304]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a4b      	ldr	r2, [pc, #300]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 800195a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800195e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001960:	f7ff f9be 	bl	8000ce0 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff f9ba 	bl	8000ce0 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e09a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197a:	4b43      	ldr	r3, [pc, #268]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001986:	4b40      	ldr	r3, [pc, #256]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	4b40      	ldr	r3, [pc, #256]	; (8001a8c <HAL_RCC_OscConfig+0x784>)
 800198c:	4013      	ands	r3, r2
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001996:	3a01      	subs	r2, #1
 8001998:	0112      	lsls	r2, r2, #4
 800199a:	4311      	orrs	r1, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019a0:	0212      	lsls	r2, r2, #8
 80019a2:	4311      	orrs	r1, r2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019a8:	0852      	lsrs	r2, r2, #1
 80019aa:	3a01      	subs	r2, #1
 80019ac:	0552      	lsls	r2, r2, #21
 80019ae:	4311      	orrs	r1, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019b4:	0852      	lsrs	r2, r2, #1
 80019b6:	3a01      	subs	r2, #1
 80019b8:	0652      	lsls	r2, r2, #25
 80019ba:	4311      	orrs	r1, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019c0:	0912      	lsrs	r2, r2, #4
 80019c2:	0452      	lsls	r2, r2, #17
 80019c4:	430a      	orrs	r2, r1
 80019c6:	4930      	ldr	r1, [pc, #192]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019cc:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a2d      	ldr	r2, [pc, #180]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 80019d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019d8:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4a2a      	ldr	r2, [pc, #168]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 80019de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019e4:	f7ff f97c 	bl	8000ce0 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff f978 	bl	8000ce0 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e058      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fe:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a0a:	e050      	b.n	8001aae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e04f      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a10:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d148      	bne.n	8001aae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a19      	ldr	r2, [pc, #100]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 8001a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a28:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4a16      	ldr	r2, [pc, #88]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 8001a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a34:	f7ff f954 	bl	8000ce0 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7ff f950 	bl	8000ce0 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e030      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x734>
 8001a5a:	e028      	b.n	8001aae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2b0c      	cmp	r3, #12
 8001a60:	d023      	beq.n	8001aaa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a08      	ldr	r2, [pc, #32]	; (8001a88 <HAL_RCC_OscConfig+0x780>)
 8001a68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6e:	f7ff f937 	bl	8000ce0 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a74:	e00c      	b.n	8001a90 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a76:	f7ff f933 	bl	8000ce0 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d905      	bls.n	8001a90 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e013      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1ec      	bne.n	8001a76 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	4905      	ldr	r1, [pc, #20]	; (8001ab8 <HAL_RCC_OscConfig+0x7b0>)
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_RCC_OscConfig+0x7b4>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60cb      	str	r3, [r1, #12]
 8001aa8:	e001      	b.n	8001aae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3720      	adds	r7, #32
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	feeefffc 	.word	0xfeeefffc

08001ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0e7      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b75      	ldr	r3, [pc, #468]	; (8001cac <HAL_RCC_ClockConfig+0x1ec>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d910      	bls.n	8001b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b72      	ldr	r3, [pc, #456]	; (8001cac <HAL_RCC_ClockConfig+0x1ec>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 0207 	bic.w	r2, r3, #7
 8001aea:	4970      	ldr	r1, [pc, #448]	; (8001cac <HAL_RCC_ClockConfig+0x1ec>)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b6e      	ldr	r3, [pc, #440]	; (8001cac <HAL_RCC_ClockConfig+0x1ec>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0cf      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d010      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	4b66      	ldr	r3, [pc, #408]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d908      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b20:	4b63      	ldr	r3, [pc, #396]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	4960      	ldr	r1, [pc, #384]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d04c      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b46:	4b5a      	ldr	r3, [pc, #360]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d121      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e0a6      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b5e:	4b54      	ldr	r3, [pc, #336]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d115      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e09a      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d107      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b76:	4b4e      	ldr	r3, [pc, #312]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d109      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e08e      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b86:	4b4a      	ldr	r3, [pc, #296]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e086      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b96:	4b46      	ldr	r3, [pc, #280]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f023 0203 	bic.w	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	4943      	ldr	r1, [pc, #268]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ba8:	f7ff f89a 	bl	8000ce0 <HAL_GetTick>
 8001bac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb0:	f7ff f896 	bl	8000ce0 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e06e      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 020c 	and.w	r2, r3, #12
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d1eb      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d010      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d208      	bcs.n	8001c06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf4:	4b2e      	ldr	r3, [pc, #184]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	492b      	ldr	r1, [pc, #172]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c06:	4b29      	ldr	r3, [pc, #164]	; (8001cac <HAL_RCC_ClockConfig+0x1ec>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d210      	bcs.n	8001c36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c14:	4b25      	ldr	r3, [pc, #148]	; (8001cac <HAL_RCC_ClockConfig+0x1ec>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 0207 	bic.w	r2, r3, #7
 8001c1c:	4923      	ldr	r1, [pc, #140]	; (8001cac <HAL_RCC_ClockConfig+0x1ec>)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c24:	4b21      	ldr	r3, [pc, #132]	; (8001cac <HAL_RCC_ClockConfig+0x1ec>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e036      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d008      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c42:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	4918      	ldr	r1, [pc, #96]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d009      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4910      	ldr	r1, [pc, #64]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c74:	f000 f824 	bl	8001cc0 <HAL_RCC_GetSysClockFreq>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	091b      	lsrs	r3, r3, #4
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	490b      	ldr	r1, [pc, #44]	; (8001cb4 <HAL_RCC_ClockConfig+0x1f4>)
 8001c86:	5ccb      	ldrb	r3, [r1, r3]
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c90:	4a09      	ldr	r2, [pc, #36]	; (8001cb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_RCC_ClockConfig+0x1fc>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fe79 	bl	8000990 <HAL_InitTick>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ca2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40022000 	.word	0x40022000
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	08007d78 	.word	0x08007d78
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	20000004 	.word	0x20000004

08001cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	; 0x24
 8001cc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cce:	4b3e      	ldr	r3, [pc, #248]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cd8:	4b3b      	ldr	r3, [pc, #236]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	2b0c      	cmp	r3, #12
 8001cec:	d121      	bne.n	8001d32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d11e      	bne.n	8001d32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cf4:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d107      	bne.n	8001d10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d00:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d06:	0a1b      	lsrs	r3, r3, #8
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	e005      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d10:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d1c:	4a2b      	ldr	r2, [pc, #172]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10d      	bne.n	8001d48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d102      	bne.n	8001d3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d38:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d3a:	61bb      	str	r3, [r7, #24]
 8001d3c:	e004      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d44:	4b23      	ldr	r3, [pc, #140]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	2b0c      	cmp	r3, #12
 8001d4c:	d134      	bne.n	8001db8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d003      	beq.n	8001d66 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d003      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0xac>
 8001d64:	e005      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d68:	617b      	str	r3, [r7, #20]
      break;
 8001d6a:	e005      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d6e:	617b      	str	r3, [r7, #20]
      break;
 8001d70:	e002      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	617b      	str	r3, [r7, #20]
      break;
 8001d76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	3301      	adds	r3, #1
 8001d84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	0a1b      	lsrs	r3, r3, #8
 8001d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	fb03 f202 	mul.w	r2, r3, r2
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	0e5b      	lsrs	r3, r3, #25
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	3301      	adds	r3, #1
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001db8:	69bb      	ldr	r3, [r7, #24]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3724      	adds	r7, #36	; 0x24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	08007d90 	.word	0x08007d90
 8001dd0:	00f42400 	.word	0x00f42400
 8001dd4:	007a1200 	.word	0x007a1200

08001dd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <HAL_RCC_GetHCLKFreq+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000000 	.word	0x20000000

08001df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001df4:	f7ff fff0 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4904      	ldr	r1, [pc, #16]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	08007d88 	.word	0x08007d88

08001e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e20:	f7ff ffda 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	0adb      	lsrs	r3, r3, #11
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	4904      	ldr	r1, [pc, #16]	; (8001e44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e32:	5ccb      	ldrb	r3, [r1, r3]
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000
 8001e44:	08007d88 	.word	0x08007d88

08001e48 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	220f      	movs	r2, #15
 8001e56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0203 	and.w	r2, r3, #3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	08db      	lsrs	r3, r3, #3
 8001e82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <HAL_RCC_GetClockConfig+0x60>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0207 	and.w	r2, r3, #7
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	601a      	str	r2, [r3, #0]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40022000 	.word	0x40022000

08001eac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001eb8:	4b2a      	ldr	r3, [pc, #168]	; (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ec4:	f7ff f9bc 	bl	8001240 <HAL_PWREx_GetVoltageRange>
 8001ec8:	6178      	str	r0, [r7, #20]
 8001eca:	e014      	b.n	8001ef6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ecc:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	4a24      	ldr	r2, [pc, #144]	; (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed8:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ee4:	f7ff f9ac 	bl	8001240 <HAL_PWREx_GetVoltageRange>
 8001ee8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001eea:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	4a1d      	ldr	r2, [pc, #116]	; (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001efc:	d10b      	bne.n	8001f16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b80      	cmp	r3, #128	; 0x80
 8001f02:	d919      	bls.n	8001f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2ba0      	cmp	r3, #160	; 0xa0
 8001f08:	d902      	bls.n	8001f10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	e013      	b.n	8001f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f10:	2301      	movs	r3, #1
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	e010      	b.n	8001f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b80      	cmp	r3, #128	; 0x80
 8001f1a:	d902      	bls.n	8001f22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	e00a      	b.n	8001f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b80      	cmp	r3, #128	; 0x80
 8001f26:	d102      	bne.n	8001f2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f28:	2302      	movs	r3, #2
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	e004      	b.n	8001f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b70      	cmp	r3, #112	; 0x70
 8001f32:	d101      	bne.n	8001f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f34:	2301      	movs	r3, #1
 8001f36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f023 0207 	bic.w	r2, r3, #7
 8001f40:	4909      	ldr	r1, [pc, #36]	; (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f48:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d001      	beq.n	8001f5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40022000 	.word	0x40022000

08001f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f74:	2300      	movs	r3, #0
 8001f76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f78:	2300      	movs	r3, #0
 8001f7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d041      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f90:	d02a      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f96:	d824      	bhi.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f9c:	d008      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fa2:	d81e      	bhi.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00a      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fac:	d010      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fae:	e018      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fb0:	4b86      	ldr	r3, [pc, #536]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	4a85      	ldr	r2, [pc, #532]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fbc:	e015      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 fabb 	bl	8002540 <RCCEx_PLLSAI1_Config>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fce:	e00c      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3320      	adds	r3, #32
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 fba6 	bl	8002728 <RCCEx_PLLSAI2_Config>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fe0:	e003      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	74fb      	strb	r3, [r7, #19]
      break;
 8001fe6:	e000      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fea:	7cfb      	ldrb	r3, [r7, #19]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10b      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ff0:	4b76      	ldr	r3, [pc, #472]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ffe:	4973      	ldr	r1, [pc, #460]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002006:	e001      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002008:	7cfb      	ldrb	r3, [r7, #19]
 800200a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d041      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800201c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002020:	d02a      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002022:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002026:	d824      	bhi.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002028:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800202c:	d008      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800202e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002032:	d81e      	bhi.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00a      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800203c:	d010      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800203e:	e018      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002040:	4b62      	ldr	r3, [pc, #392]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4a61      	ldr	r2, [pc, #388]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800204c:	e015      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3304      	adds	r3, #4
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f000 fa73 	bl	8002540 <RCCEx_PLLSAI1_Config>
 800205a:	4603      	mov	r3, r0
 800205c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800205e:	e00c      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3320      	adds	r3, #32
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f000 fb5e 	bl	8002728 <RCCEx_PLLSAI2_Config>
 800206c:	4603      	mov	r3, r0
 800206e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002070:	e003      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	74fb      	strb	r3, [r7, #19]
      break;
 8002076:	e000      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800207a:	7cfb      	ldrb	r3, [r7, #19]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10b      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002080:	4b52      	ldr	r3, [pc, #328]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800208e:	494f      	ldr	r1, [pc, #316]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002096:	e001      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002098:	7cfb      	ldrb	r3, [r7, #19]
 800209a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 80a0 	beq.w	80021ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020ae:	4b47      	ldr	r3, [pc, #284]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020be:	2300      	movs	r3, #0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00d      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c4:	4b41      	ldr	r3, [pc, #260]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	4a40      	ldr	r2, [pc, #256]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ce:	6593      	str	r3, [r2, #88]	; 0x58
 80020d0:	4b3e      	ldr	r3, [pc, #248]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020dc:	2301      	movs	r3, #1
 80020de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020e0:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a3a      	ldr	r2, [pc, #232]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020ec:	f7fe fdf8 	bl	8000ce0 <HAL_GetTick>
 80020f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020f2:	e009      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f4:	f7fe fdf4 	bl	8000ce0 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d902      	bls.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	74fb      	strb	r3, [r7, #19]
        break;
 8002106:	e005      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002108:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0ef      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002114:	7cfb      	ldrb	r3, [r7, #19]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d15c      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800211a:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002124:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01f      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	429a      	cmp	r2, r3
 8002136:	d019      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002138:	4b24      	ldr	r3, [pc, #144]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002142:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002144:	4b21      	ldr	r3, [pc, #132]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214a:	4a20      	ldr	r2, [pc, #128]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002154:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215a:	4a1c      	ldr	r2, [pc, #112]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002164:	4a19      	ldr	r2, [pc, #100]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d016      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002176:	f7fe fdb3 	bl	8000ce0 <HAL_GetTick>
 800217a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217c:	e00b      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217e:	f7fe fdaf 	bl	8000ce0 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d902      	bls.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	74fb      	strb	r3, [r7, #19]
            break;
 8002194:	e006      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002196:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0ec      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021a4:	7cfb      	ldrb	r3, [r7, #19]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ba:	4904      	ldr	r1, [pc, #16]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021c2:	e009      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021c4:	7cfb      	ldrb	r3, [r7, #19]
 80021c6:	74bb      	strb	r3, [r7, #18]
 80021c8:	e006      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d8:	7c7b      	ldrb	r3, [r7, #17]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d105      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021de:	4b9e      	ldr	r3, [pc, #632]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e2:	4a9d      	ldr	r2, [pc, #628]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021f6:	4b98      	ldr	r3, [pc, #608]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fc:	f023 0203 	bic.w	r2, r3, #3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002204:	4994      	ldr	r1, [pc, #592]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00a      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002218:	4b8f      	ldr	r3, [pc, #572]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221e:	f023 020c 	bic.w	r2, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002226:	498c      	ldr	r1, [pc, #560]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00a      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800223a:	4b87      	ldr	r3, [pc, #540]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002240:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	4983      	ldr	r1, [pc, #524]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00a      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800225c:	4b7e      	ldr	r3, [pc, #504]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	497b      	ldr	r1, [pc, #492]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800227e:	4b76      	ldr	r3, [pc, #472]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002284:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228c:	4972      	ldr	r1, [pc, #456]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228e:	4313      	orrs	r3, r2
 8002290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0320 	and.w	r3, r3, #32
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022a0:	4b6d      	ldr	r3, [pc, #436]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ae:	496a      	ldr	r1, [pc, #424]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00a      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022c2:	4b65      	ldr	r3, [pc, #404]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d0:	4961      	ldr	r1, [pc, #388]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022e4:	4b5c      	ldr	r3, [pc, #368]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f2:	4959      	ldr	r1, [pc, #356]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00a      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002306:	4b54      	ldr	r3, [pc, #336]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002314:	4950      	ldr	r1, [pc, #320]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002328:	4b4b      	ldr	r3, [pc, #300]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	4948      	ldr	r1, [pc, #288]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800234a:	4b43      	ldr	r3, [pc, #268]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002350:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	493f      	ldr	r1, [pc, #252]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d028      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800236c:	4b3a      	ldr	r3, [pc, #232]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002372:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800237a:	4937      	ldr	r1, [pc, #220]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002386:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800238a:	d106      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800238c:	4b32      	ldr	r3, [pc, #200]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a31      	ldr	r2, [pc, #196]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002396:	60d3      	str	r3, [r2, #12]
 8002398:	e011      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800239e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023a2:	d10c      	bne.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3304      	adds	r3, #4
 80023a8:	2101      	movs	r1, #1
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f8c8 	bl	8002540 <RCCEx_PLLSAI1_Config>
 80023b0:	4603      	mov	r3, r0
 80023b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023b4:	7cfb      	ldrb	r3, [r7, #19]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80023ba:	7cfb      	ldrb	r3, [r7, #19]
 80023bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d028      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023ca:	4b23      	ldr	r3, [pc, #140]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d8:	491f      	ldr	r1, [pc, #124]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023e8:	d106      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ea:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	4a1a      	ldr	r2, [pc, #104]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023f4:	60d3      	str	r3, [r2, #12]
 80023f6:	e011      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002400:	d10c      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3304      	adds	r3, #4
 8002406:	2101      	movs	r1, #1
 8002408:	4618      	mov	r0, r3
 800240a:	f000 f899 	bl	8002540 <RCCEx_PLLSAI1_Config>
 800240e:	4603      	mov	r3, r0
 8002410:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002412:	7cfb      	ldrb	r3, [r7, #19]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d02b      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002436:	4908      	ldr	r1, [pc, #32]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002446:	d109      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4a02      	ldr	r2, [pc, #8]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002452:	60d3      	str	r3, [r2, #12]
 8002454:	e014      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002460:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002464:	d10c      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3304      	adds	r3, #4
 800246a:	2101      	movs	r1, #1
 800246c:	4618      	mov	r0, r3
 800246e:	f000 f867 	bl	8002540 <RCCEx_PLLSAI1_Config>
 8002472:	4603      	mov	r3, r0
 8002474:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002476:	7cfb      	ldrb	r3, [r7, #19]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d02f      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800248c:	4b2b      	ldr	r3, [pc, #172]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800249a:	4928      	ldr	r1, [pc, #160]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024aa:	d10d      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3304      	adds	r3, #4
 80024b0:	2102      	movs	r1, #2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f844 	bl	8002540 <RCCEx_PLLSAI1_Config>
 80024b8:	4603      	mov	r3, r0
 80024ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d014      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024c2:	7cfb      	ldrb	r3, [r7, #19]
 80024c4:	74bb      	strb	r3, [r7, #18]
 80024c6:	e011      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024d0:	d10c      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3320      	adds	r3, #32
 80024d6:	2102      	movs	r1, #2
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 f925 	bl	8002728 <RCCEx_PLLSAI2_Config>
 80024de:	4603      	mov	r3, r0
 80024e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024e2:	7cfb      	ldrb	r3, [r7, #19]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024e8:	7cfb      	ldrb	r3, [r7, #19]
 80024ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024f8:	4b10      	ldr	r3, [pc, #64]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002506:	490d      	ldr	r1, [pc, #52]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002520:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800252a:	4904      	ldr	r1, [pc, #16]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002532:	7cbb      	ldrb	r3, [r7, #18]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000

08002540 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800254e:	4b75      	ldr	r3, [pc, #468]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d018      	beq.n	800258c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800255a:	4b72      	ldr	r3, [pc, #456]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f003 0203 	and.w	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d10d      	bne.n	8002586 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
       ||
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002572:	4b6c      	ldr	r3, [pc, #432]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
       ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d047      	beq.n	8002616 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	73fb      	strb	r3, [r7, #15]
 800258a:	e044      	b.n	8002616 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d018      	beq.n	80025c6 <RCCEx_PLLSAI1_Config+0x86>
 8002594:	2b03      	cmp	r3, #3
 8002596:	d825      	bhi.n	80025e4 <RCCEx_PLLSAI1_Config+0xa4>
 8002598:	2b01      	cmp	r3, #1
 800259a:	d002      	beq.n	80025a2 <RCCEx_PLLSAI1_Config+0x62>
 800259c:	2b02      	cmp	r3, #2
 800259e:	d009      	beq.n	80025b4 <RCCEx_PLLSAI1_Config+0x74>
 80025a0:	e020      	b.n	80025e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025a2:	4b60      	ldr	r3, [pc, #384]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d11d      	bne.n	80025ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b2:	e01a      	b.n	80025ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025b4:	4b5b      	ldr	r3, [pc, #364]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d116      	bne.n	80025ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c4:	e013      	b.n	80025ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025c6:	4b57      	ldr	r3, [pc, #348]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10f      	bne.n	80025f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025d2:	4b54      	ldr	r3, [pc, #336]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025e2:	e006      	b.n	80025f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
      break;
 80025e8:	e004      	b.n	80025f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ea:	bf00      	nop
 80025ec:	e002      	b.n	80025f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ee:	bf00      	nop
 80025f0:	e000      	b.n	80025f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10d      	bne.n	8002616 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025fa:	4b4a      	ldr	r3, [pc, #296]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6819      	ldr	r1, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	430b      	orrs	r3, r1
 8002610:	4944      	ldr	r1, [pc, #272]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002612:	4313      	orrs	r3, r2
 8002614:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d17d      	bne.n	8002718 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800261c:	4b41      	ldr	r3, [pc, #260]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a40      	ldr	r2, [pc, #256]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002622:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002628:	f7fe fb5a 	bl	8000ce0 <HAL_GetTick>
 800262c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800262e:	e009      	b.n	8002644 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002630:	f7fe fb56 	bl	8000ce0 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d902      	bls.n	8002644 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	73fb      	strb	r3, [r7, #15]
        break;
 8002642:	e005      	b.n	8002650 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002644:	4b37      	ldr	r3, [pc, #220]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1ef      	bne.n	8002630 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d160      	bne.n	8002718 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d111      	bne.n	8002680 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800265c:	4b31      	ldr	r3, [pc, #196]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6892      	ldr	r2, [r2, #8]
 800266c:	0211      	lsls	r1, r2, #8
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68d2      	ldr	r2, [r2, #12]
 8002672:	0912      	lsrs	r2, r2, #4
 8002674:	0452      	lsls	r2, r2, #17
 8002676:	430a      	orrs	r2, r1
 8002678:	492a      	ldr	r1, [pc, #168]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267a:	4313      	orrs	r3, r2
 800267c:	610b      	str	r3, [r1, #16]
 800267e:	e027      	b.n	80026d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d112      	bne.n	80026ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002686:	4b27      	ldr	r3, [pc, #156]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800268e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6892      	ldr	r2, [r2, #8]
 8002696:	0211      	lsls	r1, r2, #8
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6912      	ldr	r2, [r2, #16]
 800269c:	0852      	lsrs	r2, r2, #1
 800269e:	3a01      	subs	r2, #1
 80026a0:	0552      	lsls	r2, r2, #21
 80026a2:	430a      	orrs	r2, r1
 80026a4:	491f      	ldr	r1, [pc, #124]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	610b      	str	r3, [r1, #16]
 80026aa:	e011      	b.n	80026d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026ac:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6892      	ldr	r2, [r2, #8]
 80026bc:	0211      	lsls	r1, r2, #8
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6952      	ldr	r2, [r2, #20]
 80026c2:	0852      	lsrs	r2, r2, #1
 80026c4:	3a01      	subs	r2, #1
 80026c6:	0652      	lsls	r2, r2, #25
 80026c8:	430a      	orrs	r2, r1
 80026ca:	4916      	ldr	r1, [pc, #88]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026d0:	4b14      	ldr	r3, [pc, #80]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a13      	ldr	r2, [pc, #76]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026dc:	f7fe fb00 	bl	8000ce0 <HAL_GetTick>
 80026e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026e2:	e009      	b.n	80026f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026e4:	f7fe fafc 	bl	8000ce0 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d902      	bls.n	80026f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	73fb      	strb	r3, [r7, #15]
          break;
 80026f6:	e005      	b.n	8002704 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0ef      	beq.n	80026e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 800270c:	691a      	ldr	r2, [r3, #16]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	4904      	ldr	r1, [pc, #16]	; (8002724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002714:	4313      	orrs	r3, r2
 8002716:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002718:	7bfb      	ldrb	r3, [r7, #15]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000

08002728 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002736:	4b6a      	ldr	r3, [pc, #424]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d018      	beq.n	8002774 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002742:	4b67      	ldr	r3, [pc, #412]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f003 0203 	and.w	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d10d      	bne.n	800276e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
       ||
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800275a:	4b61      	ldr	r3, [pc, #388]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	091b      	lsrs	r3, r3, #4
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
       ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d047      	beq.n	80027fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	73fb      	strb	r3, [r7, #15]
 8002772:	e044      	b.n	80027fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b03      	cmp	r3, #3
 800277a:	d018      	beq.n	80027ae <RCCEx_PLLSAI2_Config+0x86>
 800277c:	2b03      	cmp	r3, #3
 800277e:	d825      	bhi.n	80027cc <RCCEx_PLLSAI2_Config+0xa4>
 8002780:	2b01      	cmp	r3, #1
 8002782:	d002      	beq.n	800278a <RCCEx_PLLSAI2_Config+0x62>
 8002784:	2b02      	cmp	r3, #2
 8002786:	d009      	beq.n	800279c <RCCEx_PLLSAI2_Config+0x74>
 8002788:	e020      	b.n	80027cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800278a:	4b55      	ldr	r3, [pc, #340]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d11d      	bne.n	80027d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800279a:	e01a      	b.n	80027d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800279c:	4b50      	ldr	r3, [pc, #320]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d116      	bne.n	80027d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ac:	e013      	b.n	80027d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027ae:	4b4c      	ldr	r3, [pc, #304]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10f      	bne.n	80027da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027ba:	4b49      	ldr	r3, [pc, #292]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027ca:	e006      	b.n	80027da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
      break;
 80027d0:	e004      	b.n	80027dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027d2:	bf00      	nop
 80027d4:	e002      	b.n	80027dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027d6:	bf00      	nop
 80027d8:	e000      	b.n	80027dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027da:	bf00      	nop
    }

    if(status == HAL_OK)
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10d      	bne.n	80027fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027e2:	4b3f      	ldr	r3, [pc, #252]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	430b      	orrs	r3, r1
 80027f8:	4939      	ldr	r1, [pc, #228]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d167      	bne.n	80028d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002804:	4b36      	ldr	r3, [pc, #216]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a35      	ldr	r2, [pc, #212]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800280a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800280e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002810:	f7fe fa66 	bl	8000ce0 <HAL_GetTick>
 8002814:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002816:	e009      	b.n	800282c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002818:	f7fe fa62 	bl	8000ce0 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d902      	bls.n	800282c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	73fb      	strb	r3, [r7, #15]
        break;
 800282a:	e005      	b.n	8002838 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800282c:	4b2c      	ldr	r3, [pc, #176]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1ef      	bne.n	8002818 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d14a      	bne.n	80028d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d111      	bne.n	8002868 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002844:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800284c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6892      	ldr	r2, [r2, #8]
 8002854:	0211      	lsls	r1, r2, #8
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68d2      	ldr	r2, [r2, #12]
 800285a:	0912      	lsrs	r2, r2, #4
 800285c:	0452      	lsls	r2, r2, #17
 800285e:	430a      	orrs	r2, r1
 8002860:	491f      	ldr	r1, [pc, #124]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002862:	4313      	orrs	r3, r2
 8002864:	614b      	str	r3, [r1, #20]
 8002866:	e011      	b.n	800288c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002868:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002870:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6892      	ldr	r2, [r2, #8]
 8002878:	0211      	lsls	r1, r2, #8
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6912      	ldr	r2, [r2, #16]
 800287e:	0852      	lsrs	r2, r2, #1
 8002880:	3a01      	subs	r2, #1
 8002882:	0652      	lsls	r2, r2, #25
 8002884:	430a      	orrs	r2, r1
 8002886:	4916      	ldr	r1, [pc, #88]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002888:	4313      	orrs	r3, r2
 800288a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800288c:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a13      	ldr	r2, [pc, #76]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002896:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002898:	f7fe fa22 	bl	8000ce0 <HAL_GetTick>
 800289c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800289e:	e009      	b.n	80028b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028a0:	f7fe fa1e 	bl	8000ce0 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d902      	bls.n	80028b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	73fb      	strb	r3, [r7, #15]
          break;
 80028b2:	e005      	b.n	80028c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0ef      	beq.n	80028a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c8:	695a      	ldr	r2, [r3, #20]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	4904      	ldr	r1, [pc, #16]	; (80028e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000

080028e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e049      	b.n	800298a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f841 	bl	8002992 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f000 f9f8 	bl	8002d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d001      	beq.n	80029c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e04f      	b.n	8002a60 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a23      	ldr	r2, [pc, #140]	; (8002a6c <HAL_TIM_Base_Start_IT+0xc4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d01d      	beq.n	8002a1e <HAL_TIM_Base_Start_IT+0x76>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ea:	d018      	beq.n	8002a1e <HAL_TIM_Base_Start_IT+0x76>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1f      	ldr	r2, [pc, #124]	; (8002a70 <HAL_TIM_Base_Start_IT+0xc8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d013      	beq.n	8002a1e <HAL_TIM_Base_Start_IT+0x76>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <HAL_TIM_Base_Start_IT+0xcc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00e      	beq.n	8002a1e <HAL_TIM_Base_Start_IT+0x76>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1c      	ldr	r2, [pc, #112]	; (8002a78 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d009      	beq.n	8002a1e <HAL_TIM_Base_Start_IT+0x76>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1b      	ldr	r2, [pc, #108]	; (8002a7c <HAL_TIM_Base_Start_IT+0xd4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d004      	beq.n	8002a1e <HAL_TIM_Base_Start_IT+0x76>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d115      	bne.n	8002a4a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b06      	cmp	r3, #6
 8002a2e:	d015      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0xb4>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a36:	d011      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0201 	orr.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a48:	e008      	b.n	8002a5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0201 	orr.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	e000      	b.n	8002a5e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	40012c00 	.word	0x40012c00
 8002a70:	40000400 	.word	0x40000400
 8002a74:	40000800 	.word	0x40000800
 8002a78:	40000c00 	.word	0x40000c00
 8002a7c:	40013400 	.word	0x40013400
 8002a80:	40014000 	.word	0x40014000
 8002a84:	00010007 	.word	0x00010007

08002a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d122      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d11b      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0202 	mvn.w	r2, #2
 8002ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f905 	bl	8002cda <HAL_TIM_IC_CaptureCallback>
 8002ad0:	e005      	b.n	8002ade <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8f7 	bl	8002cc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f908 	bl	8002cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d122      	bne.n	8002b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d11b      	bne.n	8002b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0204 	mvn.w	r2, #4
 8002b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f8db 	bl	8002cda <HAL_TIM_IC_CaptureCallback>
 8002b24:	e005      	b.n	8002b32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f8cd 	bl	8002cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f8de 	bl	8002cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d122      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d11b      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0208 	mvn.w	r2, #8
 8002b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2204      	movs	r2, #4
 8002b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f8b1 	bl	8002cda <HAL_TIM_IC_CaptureCallback>
 8002b78:	e005      	b.n	8002b86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f8a3 	bl	8002cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f8b4 	bl	8002cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b10      	cmp	r3, #16
 8002b98:	d122      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b10      	cmp	r3, #16
 8002ba6:	d11b      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0210 	mvn.w	r2, #16
 8002bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2208      	movs	r2, #8
 8002bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f887 	bl	8002cda <HAL_TIM_IC_CaptureCallback>
 8002bcc:	e005      	b.n	8002bda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f879 	bl	8002cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f88a 	bl	8002cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d10e      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d107      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f06f 0201 	mvn.w	r2, #1
 8002c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7fd fe26 	bl	8000858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c16:	2b80      	cmp	r3, #128	; 0x80
 8002c18:	d10e      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c24:	2b80      	cmp	r3, #128	; 0x80
 8002c26:	d107      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f914 	bl	8002e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c46:	d10e      	bne.n	8002c66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c52:	2b80      	cmp	r3, #128	; 0x80
 8002c54:	d107      	bne.n	8002c66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f907 	bl	8002e74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c70:	2b40      	cmp	r3, #64	; 0x40
 8002c72:	d10e      	bne.n	8002c92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b40      	cmp	r3, #64	; 0x40
 8002c80:	d107      	bne.n	8002c92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f838 	bl	8002d02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f003 0320 	and.w	r3, r3, #32
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d10e      	bne.n	8002cbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d107      	bne.n	8002cbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f06f 0220 	mvn.w	r2, #32
 8002cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f8c7 	bl	8002e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a40      	ldr	r2, [pc, #256]	; (8002e2c <TIM_Base_SetConfig+0x114>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d013      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d36:	d00f      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a3d      	ldr	r2, [pc, #244]	; (8002e30 <TIM_Base_SetConfig+0x118>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00b      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a3c      	ldr	r2, [pc, #240]	; (8002e34 <TIM_Base_SetConfig+0x11c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d007      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a3b      	ldr	r2, [pc, #236]	; (8002e38 <TIM_Base_SetConfig+0x120>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d003      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a3a      	ldr	r2, [pc, #232]	; (8002e3c <TIM_Base_SetConfig+0x124>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d108      	bne.n	8002d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a2f      	ldr	r2, [pc, #188]	; (8002e2c <TIM_Base_SetConfig+0x114>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01f      	beq.n	8002db2 <TIM_Base_SetConfig+0x9a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d78:	d01b      	beq.n	8002db2 <TIM_Base_SetConfig+0x9a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a2c      	ldr	r2, [pc, #176]	; (8002e30 <TIM_Base_SetConfig+0x118>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d017      	beq.n	8002db2 <TIM_Base_SetConfig+0x9a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a2b      	ldr	r2, [pc, #172]	; (8002e34 <TIM_Base_SetConfig+0x11c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d013      	beq.n	8002db2 <TIM_Base_SetConfig+0x9a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a2a      	ldr	r2, [pc, #168]	; (8002e38 <TIM_Base_SetConfig+0x120>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00f      	beq.n	8002db2 <TIM_Base_SetConfig+0x9a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <TIM_Base_SetConfig+0x124>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00b      	beq.n	8002db2 <TIM_Base_SetConfig+0x9a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a28      	ldr	r2, [pc, #160]	; (8002e40 <TIM_Base_SetConfig+0x128>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d007      	beq.n	8002db2 <TIM_Base_SetConfig+0x9a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a27      	ldr	r2, [pc, #156]	; (8002e44 <TIM_Base_SetConfig+0x12c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d003      	beq.n	8002db2 <TIM_Base_SetConfig+0x9a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <TIM_Base_SetConfig+0x130>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d108      	bne.n	8002dc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a10      	ldr	r2, [pc, #64]	; (8002e2c <TIM_Base_SetConfig+0x114>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00f      	beq.n	8002e10 <TIM_Base_SetConfig+0xf8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a12      	ldr	r2, [pc, #72]	; (8002e3c <TIM_Base_SetConfig+0x124>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00b      	beq.n	8002e10 <TIM_Base_SetConfig+0xf8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a11      	ldr	r2, [pc, #68]	; (8002e40 <TIM_Base_SetConfig+0x128>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d007      	beq.n	8002e10 <TIM_Base_SetConfig+0xf8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a10      	ldr	r2, [pc, #64]	; (8002e44 <TIM_Base_SetConfig+0x12c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d003      	beq.n	8002e10 <TIM_Base_SetConfig+0xf8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a0f      	ldr	r2, [pc, #60]	; (8002e48 <TIM_Base_SetConfig+0x130>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d103      	bne.n	8002e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	615a      	str	r2, [r3, #20]
}
 8002e1e:	bf00      	nop
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40012c00 	.word	0x40012c00
 8002e30:	40000400 	.word	0x40000400
 8002e34:	40000800 	.word	0x40000800
 8002e38:	40000c00 	.word	0x40000c00
 8002e3c:	40013400 	.word	0x40013400
 8002e40:	40014000 	.word	0x40014000
 8002e44:	40014400 	.word	0x40014400
 8002e48:	40014800 	.word	0x40014800

08002e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e040      	b.n	8002f1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fd fd14 	bl	80008d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2224      	movs	r2, #36	; 0x24
 8002eb4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0201 	bic.w	r2, r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f8c0 	bl	800304c <UART_SetConfig>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e022      	b.n	8002f1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fb6c 	bl	80035bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ef2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fbf3 	bl	8003700 <UART_CheckIdleState>
 8002f1a:	4603      	mov	r3, r0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	; 0x28
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	4613      	mov	r3, r2
 8002f32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	f040 8082 	bne.w	8003042 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <HAL_UART_Transmit+0x26>
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e07a      	b.n	8003044 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_UART_Transmit+0x38>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e073      	b.n	8003044 <HAL_UART_Transmit+0x120>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2221      	movs	r2, #33	; 0x21
 8002f70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f72:	f7fd feb5 	bl	8000ce0 <HAL_GetTick>
 8002f76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	88fa      	ldrh	r2, [r7, #6]
 8002f7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	88fa      	ldrh	r2, [r7, #6]
 8002f84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f90:	d108      	bne.n	8002fa4 <HAL_UART_Transmit+0x80>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d104      	bne.n	8002fa4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	e003      	b.n	8002fac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002fb4:	e02d      	b.n	8003012 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2180      	movs	r1, #128	; 0x80
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 fbe6 	bl	8003792 <UART_WaitOnFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e039      	b.n	8003044 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10b      	bne.n	8002fee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	881a      	ldrh	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fe2:	b292      	uxth	r2, r2
 8002fe4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	3302      	adds	r3, #2
 8002fea:	61bb      	str	r3, [r7, #24]
 8002fec:	e008      	b.n	8003000 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	781a      	ldrb	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	b292      	uxth	r2, r2
 8002ff8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003018:	b29b      	uxth	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1cb      	bne.n	8002fb6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2200      	movs	r2, #0
 8003026:	2140      	movs	r1, #64	; 0x40
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fbb2 	bl	8003792 <UART_WaitOnFlagUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e005      	b.n	8003044 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	e000      	b.n	8003044 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003042:	2302      	movs	r3, #2
  }
}
 8003044:	4618      	mov	r0, r3
 8003046:	3720      	adds	r7, #32
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800304c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003050:	b08a      	sub	sp, #40	; 0x28
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	431a      	orrs	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	431a      	orrs	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	4313      	orrs	r3, r2
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4ba4      	ldr	r3, [pc, #656]	; (800330c <UART_SetConfig+0x2c0>)
 800307c:	4013      	ands	r3, r2
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003084:	430b      	orrs	r3, r1
 8003086:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a99      	ldr	r2, [pc, #612]	; (8003310 <UART_SetConfig+0x2c4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d004      	beq.n	80030b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b4:	4313      	orrs	r3, r2
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c8:	430a      	orrs	r2, r1
 80030ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a90      	ldr	r2, [pc, #576]	; (8003314 <UART_SetConfig+0x2c8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d126      	bne.n	8003124 <UART_SetConfig+0xd8>
 80030d6:	4b90      	ldr	r3, [pc, #576]	; (8003318 <UART_SetConfig+0x2cc>)
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d81b      	bhi.n	800311c <UART_SetConfig+0xd0>
 80030e4:	a201      	add	r2, pc, #4	; (adr r2, 80030ec <UART_SetConfig+0xa0>)
 80030e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ea:	bf00      	nop
 80030ec:	080030fd 	.word	0x080030fd
 80030f0:	0800310d 	.word	0x0800310d
 80030f4:	08003105 	.word	0x08003105
 80030f8:	08003115 	.word	0x08003115
 80030fc:	2301      	movs	r3, #1
 80030fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003102:	e116      	b.n	8003332 <UART_SetConfig+0x2e6>
 8003104:	2302      	movs	r3, #2
 8003106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800310a:	e112      	b.n	8003332 <UART_SetConfig+0x2e6>
 800310c:	2304      	movs	r3, #4
 800310e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003112:	e10e      	b.n	8003332 <UART_SetConfig+0x2e6>
 8003114:	2308      	movs	r3, #8
 8003116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800311a:	e10a      	b.n	8003332 <UART_SetConfig+0x2e6>
 800311c:	2310      	movs	r3, #16
 800311e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003122:	e106      	b.n	8003332 <UART_SetConfig+0x2e6>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a7c      	ldr	r2, [pc, #496]	; (800331c <UART_SetConfig+0x2d0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d138      	bne.n	80031a0 <UART_SetConfig+0x154>
 800312e:	4b7a      	ldr	r3, [pc, #488]	; (8003318 <UART_SetConfig+0x2cc>)
 8003130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b0c      	cmp	r3, #12
 800313a:	d82d      	bhi.n	8003198 <UART_SetConfig+0x14c>
 800313c:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <UART_SetConfig+0xf8>)
 800313e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003142:	bf00      	nop
 8003144:	08003179 	.word	0x08003179
 8003148:	08003199 	.word	0x08003199
 800314c:	08003199 	.word	0x08003199
 8003150:	08003199 	.word	0x08003199
 8003154:	08003189 	.word	0x08003189
 8003158:	08003199 	.word	0x08003199
 800315c:	08003199 	.word	0x08003199
 8003160:	08003199 	.word	0x08003199
 8003164:	08003181 	.word	0x08003181
 8003168:	08003199 	.word	0x08003199
 800316c:	08003199 	.word	0x08003199
 8003170:	08003199 	.word	0x08003199
 8003174:	08003191 	.word	0x08003191
 8003178:	2300      	movs	r3, #0
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317e:	e0d8      	b.n	8003332 <UART_SetConfig+0x2e6>
 8003180:	2302      	movs	r3, #2
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003186:	e0d4      	b.n	8003332 <UART_SetConfig+0x2e6>
 8003188:	2304      	movs	r3, #4
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318e:	e0d0      	b.n	8003332 <UART_SetConfig+0x2e6>
 8003190:	2308      	movs	r3, #8
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003196:	e0cc      	b.n	8003332 <UART_SetConfig+0x2e6>
 8003198:	2310      	movs	r3, #16
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319e:	e0c8      	b.n	8003332 <UART_SetConfig+0x2e6>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a5e      	ldr	r2, [pc, #376]	; (8003320 <UART_SetConfig+0x2d4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d125      	bne.n	80031f6 <UART_SetConfig+0x1aa>
 80031aa:	4b5b      	ldr	r3, [pc, #364]	; (8003318 <UART_SetConfig+0x2cc>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031b4:	2b30      	cmp	r3, #48	; 0x30
 80031b6:	d016      	beq.n	80031e6 <UART_SetConfig+0x19a>
 80031b8:	2b30      	cmp	r3, #48	; 0x30
 80031ba:	d818      	bhi.n	80031ee <UART_SetConfig+0x1a2>
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d00a      	beq.n	80031d6 <UART_SetConfig+0x18a>
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d814      	bhi.n	80031ee <UART_SetConfig+0x1a2>
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <UART_SetConfig+0x182>
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d008      	beq.n	80031de <UART_SetConfig+0x192>
 80031cc:	e00f      	b.n	80031ee <UART_SetConfig+0x1a2>
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031d4:	e0ad      	b.n	8003332 <UART_SetConfig+0x2e6>
 80031d6:	2302      	movs	r3, #2
 80031d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031dc:	e0a9      	b.n	8003332 <UART_SetConfig+0x2e6>
 80031de:	2304      	movs	r3, #4
 80031e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031e4:	e0a5      	b.n	8003332 <UART_SetConfig+0x2e6>
 80031e6:	2308      	movs	r3, #8
 80031e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ec:	e0a1      	b.n	8003332 <UART_SetConfig+0x2e6>
 80031ee:	2310      	movs	r3, #16
 80031f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f4:	e09d      	b.n	8003332 <UART_SetConfig+0x2e6>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a4a      	ldr	r2, [pc, #296]	; (8003324 <UART_SetConfig+0x2d8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d125      	bne.n	800324c <UART_SetConfig+0x200>
 8003200:	4b45      	ldr	r3, [pc, #276]	; (8003318 <UART_SetConfig+0x2cc>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003206:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800320a:	2bc0      	cmp	r3, #192	; 0xc0
 800320c:	d016      	beq.n	800323c <UART_SetConfig+0x1f0>
 800320e:	2bc0      	cmp	r3, #192	; 0xc0
 8003210:	d818      	bhi.n	8003244 <UART_SetConfig+0x1f8>
 8003212:	2b80      	cmp	r3, #128	; 0x80
 8003214:	d00a      	beq.n	800322c <UART_SetConfig+0x1e0>
 8003216:	2b80      	cmp	r3, #128	; 0x80
 8003218:	d814      	bhi.n	8003244 <UART_SetConfig+0x1f8>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <UART_SetConfig+0x1d8>
 800321e:	2b40      	cmp	r3, #64	; 0x40
 8003220:	d008      	beq.n	8003234 <UART_SetConfig+0x1e8>
 8003222:	e00f      	b.n	8003244 <UART_SetConfig+0x1f8>
 8003224:	2300      	movs	r3, #0
 8003226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800322a:	e082      	b.n	8003332 <UART_SetConfig+0x2e6>
 800322c:	2302      	movs	r3, #2
 800322e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003232:	e07e      	b.n	8003332 <UART_SetConfig+0x2e6>
 8003234:	2304      	movs	r3, #4
 8003236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800323a:	e07a      	b.n	8003332 <UART_SetConfig+0x2e6>
 800323c:	2308      	movs	r3, #8
 800323e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003242:	e076      	b.n	8003332 <UART_SetConfig+0x2e6>
 8003244:	2310      	movs	r3, #16
 8003246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800324a:	e072      	b.n	8003332 <UART_SetConfig+0x2e6>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a35      	ldr	r2, [pc, #212]	; (8003328 <UART_SetConfig+0x2dc>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d12a      	bne.n	80032ac <UART_SetConfig+0x260>
 8003256:	4b30      	ldr	r3, [pc, #192]	; (8003318 <UART_SetConfig+0x2cc>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003264:	d01a      	beq.n	800329c <UART_SetConfig+0x250>
 8003266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800326a:	d81b      	bhi.n	80032a4 <UART_SetConfig+0x258>
 800326c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003270:	d00c      	beq.n	800328c <UART_SetConfig+0x240>
 8003272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003276:	d815      	bhi.n	80032a4 <UART_SetConfig+0x258>
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <UART_SetConfig+0x238>
 800327c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003280:	d008      	beq.n	8003294 <UART_SetConfig+0x248>
 8003282:	e00f      	b.n	80032a4 <UART_SetConfig+0x258>
 8003284:	2300      	movs	r3, #0
 8003286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800328a:	e052      	b.n	8003332 <UART_SetConfig+0x2e6>
 800328c:	2302      	movs	r3, #2
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003292:	e04e      	b.n	8003332 <UART_SetConfig+0x2e6>
 8003294:	2304      	movs	r3, #4
 8003296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800329a:	e04a      	b.n	8003332 <UART_SetConfig+0x2e6>
 800329c:	2308      	movs	r3, #8
 800329e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a2:	e046      	b.n	8003332 <UART_SetConfig+0x2e6>
 80032a4:	2310      	movs	r3, #16
 80032a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032aa:	e042      	b.n	8003332 <UART_SetConfig+0x2e6>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a17      	ldr	r2, [pc, #92]	; (8003310 <UART_SetConfig+0x2c4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d13a      	bne.n	800332c <UART_SetConfig+0x2e0>
 80032b6:	4b18      	ldr	r3, [pc, #96]	; (8003318 <UART_SetConfig+0x2cc>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032c4:	d01a      	beq.n	80032fc <UART_SetConfig+0x2b0>
 80032c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032ca:	d81b      	bhi.n	8003304 <UART_SetConfig+0x2b8>
 80032cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d0:	d00c      	beq.n	80032ec <UART_SetConfig+0x2a0>
 80032d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d6:	d815      	bhi.n	8003304 <UART_SetConfig+0x2b8>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <UART_SetConfig+0x298>
 80032dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e0:	d008      	beq.n	80032f4 <UART_SetConfig+0x2a8>
 80032e2:	e00f      	b.n	8003304 <UART_SetConfig+0x2b8>
 80032e4:	2300      	movs	r3, #0
 80032e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ea:	e022      	b.n	8003332 <UART_SetConfig+0x2e6>
 80032ec:	2302      	movs	r3, #2
 80032ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032f2:	e01e      	b.n	8003332 <UART_SetConfig+0x2e6>
 80032f4:	2304      	movs	r3, #4
 80032f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fa:	e01a      	b.n	8003332 <UART_SetConfig+0x2e6>
 80032fc:	2308      	movs	r3, #8
 80032fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003302:	e016      	b.n	8003332 <UART_SetConfig+0x2e6>
 8003304:	2310      	movs	r3, #16
 8003306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330a:	e012      	b.n	8003332 <UART_SetConfig+0x2e6>
 800330c:	efff69f3 	.word	0xefff69f3
 8003310:	40008000 	.word	0x40008000
 8003314:	40013800 	.word	0x40013800
 8003318:	40021000 	.word	0x40021000
 800331c:	40004400 	.word	0x40004400
 8003320:	40004800 	.word	0x40004800
 8003324:	40004c00 	.word	0x40004c00
 8003328:	40005000 	.word	0x40005000
 800332c:	2310      	movs	r3, #16
 800332e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a9f      	ldr	r2, [pc, #636]	; (80035b4 <UART_SetConfig+0x568>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d17a      	bne.n	8003432 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800333c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003340:	2b08      	cmp	r3, #8
 8003342:	d824      	bhi.n	800338e <UART_SetConfig+0x342>
 8003344:	a201      	add	r2, pc, #4	; (adr r2, 800334c <UART_SetConfig+0x300>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	08003371 	.word	0x08003371
 8003350:	0800338f 	.word	0x0800338f
 8003354:	08003379 	.word	0x08003379
 8003358:	0800338f 	.word	0x0800338f
 800335c:	0800337f 	.word	0x0800337f
 8003360:	0800338f 	.word	0x0800338f
 8003364:	0800338f 	.word	0x0800338f
 8003368:	0800338f 	.word	0x0800338f
 800336c:	08003387 	.word	0x08003387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003370:	f7fe fd3e 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 8003374:	61f8      	str	r0, [r7, #28]
        break;
 8003376:	e010      	b.n	800339a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003378:	4b8f      	ldr	r3, [pc, #572]	; (80035b8 <UART_SetConfig+0x56c>)
 800337a:	61fb      	str	r3, [r7, #28]
        break;
 800337c:	e00d      	b.n	800339a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337e:	f7fe fc9f 	bl	8001cc0 <HAL_RCC_GetSysClockFreq>
 8003382:	61f8      	str	r0, [r7, #28]
        break;
 8003384:	e009      	b.n	800339a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800338a:	61fb      	str	r3, [r7, #28]
        break;
 800338c:	e005      	b.n	800339a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003398:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80fb 	beq.w	8003598 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	4413      	add	r3, r2
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d305      	bcc.n	80033be <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033b8:	69fa      	ldr	r2, [r7, #28]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d903      	bls.n	80033c6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033c4:	e0e8      	b.n	8003598 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	2200      	movs	r2, #0
 80033ca:	461c      	mov	r4, r3
 80033cc:	4615      	mov	r5, r2
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	022b      	lsls	r3, r5, #8
 80033d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033dc:	0222      	lsls	r2, r4, #8
 80033de:	68f9      	ldr	r1, [r7, #12]
 80033e0:	6849      	ldr	r1, [r1, #4]
 80033e2:	0849      	lsrs	r1, r1, #1
 80033e4:	2000      	movs	r0, #0
 80033e6:	4688      	mov	r8, r1
 80033e8:	4681      	mov	r9, r0
 80033ea:	eb12 0a08 	adds.w	sl, r2, r8
 80033ee:	eb43 0b09 	adc.w	fp, r3, r9
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003400:	4650      	mov	r0, sl
 8003402:	4659      	mov	r1, fp
 8003404:	f7fc ff34 	bl	8000270 <__aeabi_uldivmod>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4613      	mov	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003416:	d308      	bcc.n	800342a <UART_SetConfig+0x3de>
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800341e:	d204      	bcs.n	800342a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	60da      	str	r2, [r3, #12]
 8003428:	e0b6      	b.n	8003598 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003430:	e0b2      	b.n	8003598 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800343a:	d15e      	bne.n	80034fa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800343c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003440:	2b08      	cmp	r3, #8
 8003442:	d828      	bhi.n	8003496 <UART_SetConfig+0x44a>
 8003444:	a201      	add	r2, pc, #4	; (adr r2, 800344c <UART_SetConfig+0x400>)
 8003446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344a:	bf00      	nop
 800344c:	08003471 	.word	0x08003471
 8003450:	08003479 	.word	0x08003479
 8003454:	08003481 	.word	0x08003481
 8003458:	08003497 	.word	0x08003497
 800345c:	08003487 	.word	0x08003487
 8003460:	08003497 	.word	0x08003497
 8003464:	08003497 	.word	0x08003497
 8003468:	08003497 	.word	0x08003497
 800346c:	0800348f 	.word	0x0800348f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003470:	f7fe fcbe 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 8003474:	61f8      	str	r0, [r7, #28]
        break;
 8003476:	e014      	b.n	80034a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003478:	f7fe fcd0 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 800347c:	61f8      	str	r0, [r7, #28]
        break;
 800347e:	e010      	b.n	80034a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003480:	4b4d      	ldr	r3, [pc, #308]	; (80035b8 <UART_SetConfig+0x56c>)
 8003482:	61fb      	str	r3, [r7, #28]
        break;
 8003484:	e00d      	b.n	80034a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003486:	f7fe fc1b 	bl	8001cc0 <HAL_RCC_GetSysClockFreq>
 800348a:	61f8      	str	r0, [r7, #28]
        break;
 800348c:	e009      	b.n	80034a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800348e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003492:	61fb      	str	r3, [r7, #28]
        break;
 8003494:	e005      	b.n	80034a2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d077      	beq.n	8003598 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	005a      	lsls	r2, r3, #1
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	441a      	add	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	2b0f      	cmp	r3, #15
 80034c2:	d916      	bls.n	80034f2 <UART_SetConfig+0x4a6>
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ca:	d212      	bcs.n	80034f2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	f023 030f 	bic.w	r3, r3, #15
 80034d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	085b      	lsrs	r3, r3, #1
 80034da:	b29b      	uxth	r3, r3
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	8afb      	ldrh	r3, [r7, #22]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	8afa      	ldrh	r2, [r7, #22]
 80034ee:	60da      	str	r2, [r3, #12]
 80034f0:	e052      	b.n	8003598 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034f8:	e04e      	b.n	8003598 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d827      	bhi.n	8003552 <UART_SetConfig+0x506>
 8003502:	a201      	add	r2, pc, #4	; (adr r2, 8003508 <UART_SetConfig+0x4bc>)
 8003504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003508:	0800352d 	.word	0x0800352d
 800350c:	08003535 	.word	0x08003535
 8003510:	0800353d 	.word	0x0800353d
 8003514:	08003553 	.word	0x08003553
 8003518:	08003543 	.word	0x08003543
 800351c:	08003553 	.word	0x08003553
 8003520:	08003553 	.word	0x08003553
 8003524:	08003553 	.word	0x08003553
 8003528:	0800354b 	.word	0x0800354b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800352c:	f7fe fc60 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 8003530:	61f8      	str	r0, [r7, #28]
        break;
 8003532:	e014      	b.n	800355e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003534:	f7fe fc72 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 8003538:	61f8      	str	r0, [r7, #28]
        break;
 800353a:	e010      	b.n	800355e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800353c:	4b1e      	ldr	r3, [pc, #120]	; (80035b8 <UART_SetConfig+0x56c>)
 800353e:	61fb      	str	r3, [r7, #28]
        break;
 8003540:	e00d      	b.n	800355e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003542:	f7fe fbbd 	bl	8001cc0 <HAL_RCC_GetSysClockFreq>
 8003546:	61f8      	str	r0, [r7, #28]
        break;
 8003548:	e009      	b.n	800355e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800354a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800354e:	61fb      	str	r3, [r7, #28]
        break;
 8003550:	e005      	b.n	800355e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800355c:	bf00      	nop
    }

    if (pclk != 0U)
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d019      	beq.n	8003598 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	085a      	lsrs	r2, r3, #1
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	441a      	add	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	fbb2 f3f3 	udiv	r3, r2, r3
 8003576:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	2b0f      	cmp	r3, #15
 800357c:	d909      	bls.n	8003592 <UART_SetConfig+0x546>
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003584:	d205      	bcs.n	8003592 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60da      	str	r2, [r3, #12]
 8003590:	e002      	b.n	8003598 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80035a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3728      	adds	r7, #40	; 0x28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035b2:	bf00      	nop
 80035b4:	40008000 	.word	0x40008000
 80035b8:	00f42400 	.word	0x00f42400

080035bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003698:	2b00      	cmp	r3, #0
 800369a:	d01a      	beq.n	80036d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ba:	d10a      	bne.n	80036d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	605a      	str	r2, [r3, #4]
  }
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af02      	add	r7, sp, #8
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003710:	f7fd fae6 	bl	8000ce0 <HAL_GetTick>
 8003714:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b08      	cmp	r3, #8
 8003722:	d10e      	bne.n	8003742 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003724:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f82d 	bl	8003792 <UART_WaitOnFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e023      	b.n	800378a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b04      	cmp	r3, #4
 800374e:	d10e      	bne.n	800376e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003750:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f817 	bl	8003792 <UART_WaitOnFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e00d      	b.n	800378a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2220      	movs	r2, #32
 8003772:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b09c      	sub	sp, #112	; 0x70
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	603b      	str	r3, [r7, #0]
 800379e:	4613      	mov	r3, r2
 80037a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a2:	e0a5      	b.n	80038f0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037aa:	f000 80a1 	beq.w	80038f0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ae:	f7fd fa97 	bl	8000ce0 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d302      	bcc.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80037be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d13e      	bne.n	8003842 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037cc:	e853 3f00 	ldrex	r3, [r3]
 80037d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037d8:	667b      	str	r3, [r7, #100]	; 0x64
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037ea:	e841 2300 	strex	r3, r2, [r1]
 80037ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e6      	bne.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3308      	adds	r3, #8
 80037fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003800:	e853 3f00 	ldrex	r3, [r3]
 8003804:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	663b      	str	r3, [r7, #96]	; 0x60
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3308      	adds	r3, #8
 8003814:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003816:	64ba      	str	r2, [r7, #72]	; 0x48
 8003818:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800381c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800381e:	e841 2300 	strex	r3, r2, [r1]
 8003822:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1e5      	bne.n	80037f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e067      	b.n	8003912 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d04f      	beq.n	80038f0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800385a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800385e:	d147      	bne.n	80038f0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003868:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	e853 3f00 	ldrex	r3, [r3]
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800387e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	461a      	mov	r2, r3
 8003886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003888:	637b      	str	r3, [r7, #52]	; 0x34
 800388a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800388e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003890:	e841 2300 	strex	r3, r2, [r1]
 8003894:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1e6      	bne.n	800386a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3308      	adds	r3, #8
 80038a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	613b      	str	r3, [r7, #16]
   return(result);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3308      	adds	r3, #8
 80038ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038bc:	623a      	str	r2, [r7, #32]
 80038be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	69f9      	ldr	r1, [r7, #28]
 80038c2:	6a3a      	ldr	r2, [r7, #32]
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e5      	bne.n	800389c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e010      	b.n	8003912 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	69da      	ldr	r2, [r3, #28]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	4013      	ands	r3, r2
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	bf0c      	ite	eq
 8003900:	2301      	moveq	r3, #1
 8003902:	2300      	movne	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	429a      	cmp	r2, r3
 800390c:	f43f af4a 	beq.w	80037a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3770      	adds	r7, #112	; 0x70
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <__NVIC_SetPriority>:
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	6039      	str	r1, [r7, #0]
 8003926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392c:	2b00      	cmp	r3, #0
 800392e:	db0a      	blt.n	8003946 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	b2da      	uxtb	r2, r3
 8003934:	490c      	ldr	r1, [pc, #48]	; (8003968 <__NVIC_SetPriority+0x4c>)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	0112      	lsls	r2, r2, #4
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	440b      	add	r3, r1
 8003940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003944:	e00a      	b.n	800395c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	b2da      	uxtb	r2, r3
 800394a:	4908      	ldr	r1, [pc, #32]	; (800396c <__NVIC_SetPriority+0x50>)
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	3b04      	subs	r3, #4
 8003954:	0112      	lsls	r2, r2, #4
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	440b      	add	r3, r1
 800395a:	761a      	strb	r2, [r3, #24]
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000e100 	.word	0xe000e100
 800396c:	e000ed00 	.word	0xe000ed00

08003970 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003974:	4b05      	ldr	r3, [pc, #20]	; (800398c <SysTick_Handler+0x1c>)
 8003976:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003978:	f002 f830 	bl	80059dc <xTaskGetSchedulerState>
 800397c:	4603      	mov	r3, r0
 800397e:	2b01      	cmp	r3, #1
 8003980:	d001      	beq.n	8003986 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003982:	f002 ff19 	bl	80067b8 <xPortSysTickHandler>
  }
}
 8003986:	bf00      	nop
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	e000e010 	.word	0xe000e010

08003990 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003994:	2100      	movs	r1, #0
 8003996:	f06f 0004 	mvn.w	r0, #4
 800399a:	f7ff ffbf 	bl	800391c <__NVIC_SetPriority>
#endif
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039aa:	f3ef 8305 	mrs	r3, IPSR
 80039ae:	603b      	str	r3, [r7, #0]
  return(result);
 80039b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80039b6:	f06f 0305 	mvn.w	r3, #5
 80039ba:	607b      	str	r3, [r7, #4]
 80039bc:	e00c      	b.n	80039d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80039be:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <osKernelInitialize+0x44>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d105      	bne.n	80039d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80039c6:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <osKernelInitialize+0x44>)
 80039c8:	2201      	movs	r2, #1
 80039ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	607b      	str	r3, [r7, #4]
 80039d0:	e002      	b.n	80039d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80039d2:	f04f 33ff 	mov.w	r3, #4294967295
 80039d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039d8:	687b      	ldr	r3, [r7, #4]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	20000194 	.word	0x20000194

080039ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039f2:	f3ef 8305 	mrs	r3, IPSR
 80039f6:	603b      	str	r3, [r7, #0]
  return(result);
 80039f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <osKernelStart+0x1a>
    stat = osErrorISR;
 80039fe:	f06f 0305 	mvn.w	r3, #5
 8003a02:	607b      	str	r3, [r7, #4]
 8003a04:	e010      	b.n	8003a28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a06:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <osKernelStart+0x48>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d109      	bne.n	8003a22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003a0e:	f7ff ffbf 	bl	8003990 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a12:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <osKernelStart+0x48>)
 8003a14:	2202      	movs	r2, #2
 8003a16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003a18:	f001 fb88 	bl	800512c <vTaskStartScheduler>
      stat = osOK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	607b      	str	r3, [r7, #4]
 8003a20:	e002      	b.n	8003a28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003a22:	f04f 33ff 	mov.w	r3, #4294967295
 8003a26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a28:	687b      	ldr	r3, [r7, #4]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000194 	.word	0x20000194

08003a38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08e      	sub	sp, #56	; 0x38
 8003a3c:	af04      	add	r7, sp, #16
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a48:	f3ef 8305 	mrs	r3, IPSR
 8003a4c:	617b      	str	r3, [r7, #20]
  return(result);
 8003a4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d17e      	bne.n	8003b52 <osThreadNew+0x11a>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d07b      	beq.n	8003b52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003a5a:	2380      	movs	r3, #128	; 0x80
 8003a5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003a5e:	2318      	movs	r3, #24
 8003a60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003a66:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d045      	beq.n	8003afe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <osThreadNew+0x48>
        name = attr->name;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <osThreadNew+0x6e>
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	2b38      	cmp	r3, #56	; 0x38
 8003a98:	d805      	bhi.n	8003aa6 <osThreadNew+0x6e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <osThreadNew+0x72>
        return (NULL);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	e054      	b.n	8003b54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	089b      	lsrs	r3, r3, #2
 8003ab8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00e      	beq.n	8003ae0 <osThreadNew+0xa8>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	2b5b      	cmp	r3, #91	; 0x5b
 8003ac8:	d90a      	bls.n	8003ae0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d006      	beq.n	8003ae0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <osThreadNew+0xa8>
        mem = 1;
 8003ada:	2301      	movs	r3, #1
 8003adc:	61bb      	str	r3, [r7, #24]
 8003ade:	e010      	b.n	8003b02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10c      	bne.n	8003b02 <osThreadNew+0xca>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d108      	bne.n	8003b02 <osThreadNew+0xca>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d104      	bne.n	8003b02 <osThreadNew+0xca>
          mem = 0;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	e001      	b.n	8003b02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d110      	bne.n	8003b2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b10:	9202      	str	r2, [sp, #8]
 8003b12:	9301      	str	r3, [sp, #4]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	6a3a      	ldr	r2, [r7, #32]
 8003b1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f001 f92e 	bl	8004d80 <xTaskCreateStatic>
 8003b24:	4603      	mov	r3, r0
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	e013      	b.n	8003b52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d110      	bne.n	8003b52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	f107 0310 	add.w	r3, r7, #16
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f001 f979 	bl	8004e3a <xTaskCreate>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d001      	beq.n	8003b52 <osThreadNew+0x11a>
            hTask = NULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b52:	693b      	ldr	r3, [r7, #16]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3728      	adds	r7, #40	; 0x28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b64:	f3ef 8305 	mrs	r3, IPSR
 8003b68:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b6a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <osDelay+0x1c>
    stat = osErrorISR;
 8003b70:	f06f 0305 	mvn.w	r3, #5
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	e007      	b.n	8003b88 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f001 fa9e 	bl	80050c4 <vTaskDelay>
    }
  }

  return (stat);
 8003b88:	68fb      	ldr	r3, [r7, #12]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b088      	sub	sp, #32
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b9e:	f3ef 8305 	mrs	r3, IPSR
 8003ba2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ba4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d174      	bne.n	8003c94 <osMutexNew+0x102>
    if (attr != NULL) {
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	e001      	b.n	8003bbc <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <osMutexNew+0x3a>
      rmtx = 1U;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	e001      	b.n	8003bd0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d15c      	bne.n	8003c94 <osMutexNew+0x102>
      mem = -1;
 8003bda:	f04f 33ff 	mov.w	r3, #4294967295
 8003bde:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d015      	beq.n	8003c12 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d006      	beq.n	8003bfc <osMutexNew+0x6a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	2b4f      	cmp	r3, #79	; 0x4f
 8003bf4:	d902      	bls.n	8003bfc <osMutexNew+0x6a>
          mem = 1;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	e00c      	b.n	8003c16 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d108      	bne.n	8003c16 <osMutexNew+0x84>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d104      	bne.n	8003c16 <osMutexNew+0x84>
            mem = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	e001      	b.n	8003c16 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d112      	bne.n	8003c42 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d007      	beq.n	8003c32 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	4619      	mov	r1, r3
 8003c28:	2004      	movs	r0, #4
 8003c2a:	f000 fb18 	bl	800425e <xQueueCreateMutexStatic>
 8003c2e:	61f8      	str	r0, [r7, #28]
 8003c30:	e016      	b.n	8003c60 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	4619      	mov	r1, r3
 8003c38:	2001      	movs	r0, #1
 8003c3a:	f000 fb10 	bl	800425e <xQueueCreateMutexStatic>
 8003c3e:	61f8      	str	r0, [r7, #28]
 8003c40:	e00e      	b.n	8003c60 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10b      	bne.n	8003c60 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d004      	beq.n	8003c58 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003c4e:	2004      	movs	r0, #4
 8003c50:	f000 faed 	bl	800422e <xQueueCreateMutex>
 8003c54:	61f8      	str	r0, [r7, #28]
 8003c56:	e003      	b.n	8003c60 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003c58:	2001      	movs	r0, #1
 8003c5a:	f000 fae8 	bl	800422e <xQueueCreateMutex>
 8003c5e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00c      	beq.n	8003c80 <osMutexNew+0xee>
        if (attr != NULL) {
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <osMutexNew+0xe2>
          name = attr->name;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	e001      	b.n	8003c78 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003c78:	68f9      	ldr	r1, [r7, #12]
 8003c7a:	69f8      	ldr	r0, [r7, #28]
 8003c7c:	f001 f822 	bl	8004cc4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d006      	beq.n	8003c94 <osMutexNew+0x102>
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003c94:	69fb      	ldr	r3, [r7, #28]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3720      	adds	r7, #32
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b086      	sub	sp, #24
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f023 0301 	bic.w	r3, r3, #1
 8003cae:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cbc:	f3ef 8305 	mrs	r3, IPSR
 8003cc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cc2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003cc8:	f06f 0305 	mvn.w	r3, #5
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	e02c      	b.n	8003d2a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d103      	bne.n	8003cde <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8003cd6:	f06f 0303 	mvn.w	r3, #3
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	e025      	b.n	8003d2a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d011      	beq.n	8003d08 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003ce4:	6839      	ldr	r1, [r7, #0]
 8003ce6:	6938      	ldr	r0, [r7, #16]
 8003ce8:	f000 fb08 	bl	80042fc <xQueueTakeMutexRecursive>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d01b      	beq.n	8003d2a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003cf8:	f06f 0301 	mvn.w	r3, #1
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	e014      	b.n	8003d2a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003d00:	f06f 0302 	mvn.w	r3, #2
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	e010      	b.n	8003d2a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003d08:	6839      	ldr	r1, [r7, #0]
 8003d0a:	6938      	ldr	r0, [r7, #16]
 8003d0c:	f000 fda6 	bl	800485c <xQueueSemaphoreTake>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d009      	beq.n	8003d2a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003d1c:	f06f 0301 	mvn.w	r3, #1
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	e002      	b.n	8003d2a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003d24:	f06f 0302 	mvn.w	r3, #2
 8003d28:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003d2a:	697b      	ldr	r3, [r7, #20]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d50:	f3ef 8305 	mrs	r3, IPSR
 8003d54:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d56:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <osMutexRelease+0x30>
    stat = osErrorISR;
 8003d5c:	f06f 0305 	mvn.w	r3, #5
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	e01f      	b.n	8003da4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d103      	bne.n	8003d72 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8003d6a:	f06f 0303 	mvn.w	r3, #3
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	e018      	b.n	8003da4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d009      	beq.n	8003d8c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003d78:	6938      	ldr	r0, [r7, #16]
 8003d7a:	f000 fa8b 	bl	8004294 <xQueueGiveMutexRecursive>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d00f      	beq.n	8003da4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003d84:	f06f 0302 	mvn.w	r3, #2
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	e00b      	b.n	8003da4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	2200      	movs	r2, #0
 8003d90:	2100      	movs	r1, #0
 8003d92:	6938      	ldr	r0, [r7, #16]
 8003d94:	f000 fae8 	bl	8004368 <xQueueGenericSend>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d002      	beq.n	8003da4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003d9e:	f06f 0302 	mvn.w	r3, #2
 8003da2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003da4:	697b      	ldr	r3, [r7, #20]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a07      	ldr	r2, [pc, #28]	; (8003ddc <vApplicationGetIdleTaskMemory+0x2c>)
 8003dc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	4a06      	ldr	r2, [pc, #24]	; (8003de0 <vApplicationGetIdleTaskMemory+0x30>)
 8003dc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2280      	movs	r2, #128	; 0x80
 8003dcc:	601a      	str	r2, [r3, #0]
}
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	20000198 	.word	0x20000198
 8003de0:	200001f4 	.word	0x200001f4

08003de4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4a07      	ldr	r2, [pc, #28]	; (8003e10 <vApplicationGetTimerTaskMemory+0x2c>)
 8003df4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	4a06      	ldr	r2, [pc, #24]	; (8003e14 <vApplicationGetTimerTaskMemory+0x30>)
 8003dfa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e02:	601a      	str	r2, [r3, #0]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	200003f4 	.word	0x200003f4
 8003e14:	20000450 	.word	0x20000450

08003e18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f103 0208 	add.w	r2, r3, #8
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f103 0208 	add.w	r2, r3, #8
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f103 0208 	add.w	r2, r3, #8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e72:	b480      	push	{r7}
 8003e74:	b085      	sub	sp, #20
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
 8003e7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	601a      	str	r2, [r3, #0]
}
 8003eae:	bf00      	nop
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b085      	sub	sp, #20
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d103      	bne.n	8003eda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	e00c      	b.n	8003ef4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3308      	adds	r3, #8
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	e002      	b.n	8003ee8 <vListInsert+0x2e>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d2f6      	bcs.n	8003ee2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	601a      	str	r2, [r3, #0]
}
 8003f20:	bf00      	nop
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6892      	ldr	r2, [r2, #8]
 8003f42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6852      	ldr	r2, [r2, #4]
 8003f4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d103      	bne.n	8003f60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	1e5a      	subs	r2, r3, #1
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10a      	bne.n	8003faa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003fa6:	bf00      	nop
 8003fa8:	e7fe      	b.n	8003fa8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003faa:	f002 fb73 	bl	8006694 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb6:	68f9      	ldr	r1, [r7, #12]
 8003fb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fba:	fb01 f303 	mul.w	r3, r1, r3
 8003fbe:	441a      	add	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	68f9      	ldr	r1, [r7, #12]
 8003fde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fe0:	fb01 f303 	mul.w	r3, r1, r3
 8003fe4:	441a      	add	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	22ff      	movs	r2, #255	; 0xff
 8003fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	22ff      	movs	r2, #255	; 0xff
 8003ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d114      	bne.n	800402a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01a      	beq.n	800403e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3310      	adds	r3, #16
 800400c:	4618      	mov	r0, r3
 800400e:	f001 fb17 	bl	8005640 <xTaskRemoveFromEventList>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d012      	beq.n	800403e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004018:	4b0c      	ldr	r3, [pc, #48]	; (800404c <xQueueGenericReset+0xcc>)
 800401a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	e009      	b.n	800403e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3310      	adds	r3, #16
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff fef2 	bl	8003e18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3324      	adds	r3, #36	; 0x24
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff feed 	bl	8003e18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800403e:	f002 fb59 	bl	80066f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004042:	2301      	movs	r3, #1
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	e000ed04 	.word	0xe000ed04

08004050 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08e      	sub	sp, #56	; 0x38
 8004054:	af02      	add	r7, sp, #8
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004076:	bf00      	nop
 8004078:	e7fe      	b.n	8004078 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004092:	bf00      	nop
 8004094:	e7fe      	b.n	8004094 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <xQueueGenericCreateStatic+0x52>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <xQueueGenericCreateStatic+0x56>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <xQueueGenericCreateStatic+0x58>
 80040a6:	2300      	movs	r3, #0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	623b      	str	r3, [r7, #32]
}
 80040be:	bf00      	nop
 80040c0:	e7fe      	b.n	80040c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d102      	bne.n	80040ce <xQueueGenericCreateStatic+0x7e>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <xQueueGenericCreateStatic+0x82>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <xQueueGenericCreateStatic+0x84>
 80040d2:	2300      	movs	r3, #0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	61fb      	str	r3, [r7, #28]
}
 80040ea:	bf00      	nop
 80040ec:	e7fe      	b.n	80040ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040ee:	2350      	movs	r3, #80	; 0x50
 80040f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2b50      	cmp	r3, #80	; 0x50
 80040f6:	d00a      	beq.n	800410e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	61bb      	str	r3, [r7, #24]
}
 800410a:	bf00      	nop
 800410c:	e7fe      	b.n	800410c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800410e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00d      	beq.n	8004136 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004122:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	4613      	mov	r3, r2
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f83f 	bl	80041b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004138:	4618      	mov	r0, r3
 800413a:	3730      	adds	r7, #48	; 0x30
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08a      	sub	sp, #40	; 0x28
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	4613      	mov	r3, r2
 800414c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10a      	bne.n	800416a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	613b      	str	r3, [r7, #16]
}
 8004166:	bf00      	nop
 8004168:	e7fe      	b.n	8004168 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	fb02 f303 	mul.w	r3, r2, r3
 8004172:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	3350      	adds	r3, #80	; 0x50
 8004178:	4618      	mov	r0, r3
 800417a:	f002 fbad 	bl	80068d8 <pvPortMalloc>
 800417e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d011      	beq.n	80041aa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	3350      	adds	r3, #80	; 0x50
 800418e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004198:	79fa      	ldrb	r2, [r7, #7]
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	4613      	mov	r3, r2
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	68b9      	ldr	r1, [r7, #8]
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f805 	bl	80041b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041aa:	69bb      	ldr	r3, [r7, #24]
	}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3720      	adds	r7, #32
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d103      	bne.n	80041d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e002      	b.n	80041d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041e2:	2101      	movs	r1, #1
 80041e4:	69b8      	ldr	r0, [r7, #24]
 80041e6:	f7ff fecb 	bl	8003f80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	78fa      	ldrb	r2, [r7, #3]
 80041ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b082      	sub	sp, #8
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00e      	beq.n	8004226 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800421a:	2300      	movs	r3, #0
 800421c:	2200      	movs	r2, #0
 800421e:	2100      	movs	r1, #0
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f8a1 	bl	8004368 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800422e:	b580      	push	{r7, lr}
 8004230:	b086      	sub	sp, #24
 8004232:	af00      	add	r7, sp, #0
 8004234:	4603      	mov	r3, r0
 8004236:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004238:	2301      	movs	r3, #1
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	2300      	movs	r3, #0
 800423e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004240:	79fb      	ldrb	r3, [r7, #7]
 8004242:	461a      	mov	r2, r3
 8004244:	6939      	ldr	r1, [r7, #16]
 8004246:	6978      	ldr	r0, [r7, #20]
 8004248:	f7ff ff7a 	bl	8004140 <xQueueGenericCreate>
 800424c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f7ff ffd3 	bl	80041fa <prvInitialiseMutex>

		return xNewQueue;
 8004254:	68fb      	ldr	r3, [r7, #12]
	}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800425e:	b580      	push	{r7, lr}
 8004260:	b088      	sub	sp, #32
 8004262:	af02      	add	r7, sp, #8
 8004264:	4603      	mov	r3, r0
 8004266:	6039      	str	r1, [r7, #0]
 8004268:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800426a:	2301      	movs	r3, #1
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	2300      	movs	r3, #0
 8004270:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2200      	movs	r2, #0
 800427a:	6939      	ldr	r1, [r7, #16]
 800427c:	6978      	ldr	r0, [r7, #20]
 800427e:	f7ff fee7 	bl	8004050 <xQueueGenericCreateStatic>
 8004282:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f7ff ffb8 	bl	80041fa <prvInitialiseMutex>

		return xNewQueue;
 800428a:	68fb      	ldr	r3, [r7, #12]
	}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004294:	b590      	push	{r4, r7, lr}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	60fb      	str	r3, [r7, #12]
}
 80042b8:	bf00      	nop
 80042ba:	e7fe      	b.n	80042ba <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	689c      	ldr	r4, [r3, #8]
 80042c0:	f001 fb7c 	bl	80059bc <xTaskGetCurrentTaskHandle>
 80042c4:	4603      	mov	r3, r0
 80042c6:	429c      	cmp	r4, r3
 80042c8:	d111      	bne.n	80042ee <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	1e5a      	subs	r2, r3, #1
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d105      	bne.n	80042e8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80042dc:	2300      	movs	r3, #0
 80042de:	2200      	movs	r2, #0
 80042e0:	2100      	movs	r1, #0
 80042e2:	6938      	ldr	r0, [r7, #16]
 80042e4:	f000 f840 	bl	8004368 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80042e8:	2301      	movs	r3, #1
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	e001      	b.n	80042f2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80042f2:	697b      	ldr	r3, [r7, #20]
	}
 80042f4:	4618      	mov	r0, r3
 80042f6:	371c      	adds	r7, #28
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd90      	pop	{r4, r7, pc}

080042fc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80042fc:	b590      	push	{r4, r7, lr}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10a      	bne.n	8004326 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	60fb      	str	r3, [r7, #12]
}
 8004322:	bf00      	nop
 8004324:	e7fe      	b.n	8004324 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	689c      	ldr	r4, [r3, #8]
 800432a:	f001 fb47 	bl	80059bc <xTaskGetCurrentTaskHandle>
 800432e:	4603      	mov	r3, r0
 8004330:	429c      	cmp	r4, r3
 8004332:	d107      	bne.n	8004344 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800433e:	2301      	movs	r3, #1
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	e00c      	b.n	800435e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004344:	6839      	ldr	r1, [r7, #0]
 8004346:	6938      	ldr	r0, [r7, #16]
 8004348:	f000 fa88 	bl	800485c <xQueueSemaphoreTake>
 800434c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d004      	beq.n	800435e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800435e:	697b      	ldr	r3, [r7, #20]
	}
 8004360:	4618      	mov	r0, r3
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	bd90      	pop	{r4, r7, pc}

08004368 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08e      	sub	sp, #56	; 0x38
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004376:	2300      	movs	r3, #0
 8004378:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800437e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <xQueueGenericSend+0x32>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004396:	bf00      	nop
 8004398:	e7fe      	b.n	8004398 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d103      	bne.n	80043a8 <xQueueGenericSend+0x40>
 80043a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <xQueueGenericSend+0x44>
 80043a8:	2301      	movs	r3, #1
 80043aa:	e000      	b.n	80043ae <xQueueGenericSend+0x46>
 80043ac:	2300      	movs	r3, #0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10a      	bne.n	80043c8 <xQueueGenericSend+0x60>
	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043c4:	bf00      	nop
 80043c6:	e7fe      	b.n	80043c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d103      	bne.n	80043d6 <xQueueGenericSend+0x6e>
 80043ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <xQueueGenericSend+0x72>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <xQueueGenericSend+0x74>
 80043da:	2300      	movs	r3, #0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10a      	bne.n	80043f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	623b      	str	r3, [r7, #32]
}
 80043f2:	bf00      	nop
 80043f4:	e7fe      	b.n	80043f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043f6:	f001 faf1 	bl	80059dc <xTaskGetSchedulerState>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d102      	bne.n	8004406 <xQueueGenericSend+0x9e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <xQueueGenericSend+0xa2>
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <xQueueGenericSend+0xa4>
 800440a:	2300      	movs	r3, #0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <xQueueGenericSend+0xbe>
	__asm volatile
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	61fb      	str	r3, [r7, #28]
}
 8004422:	bf00      	nop
 8004424:	e7fe      	b.n	8004424 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004426:	f002 f935 	bl	8006694 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004432:	429a      	cmp	r2, r3
 8004434:	d302      	bcc.n	800443c <xQueueGenericSend+0xd4>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d129      	bne.n	8004490 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004442:	f000 fb2f 	bl	8004aa4 <prvCopyDataToQueue>
 8004446:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	2b00      	cmp	r3, #0
 800444e:	d010      	beq.n	8004472 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004452:	3324      	adds	r3, #36	; 0x24
 8004454:	4618      	mov	r0, r3
 8004456:	f001 f8f3 	bl	8005640 <xTaskRemoveFromEventList>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d013      	beq.n	8004488 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004460:	4b3f      	ldr	r3, [pc, #252]	; (8004560 <xQueueGenericSend+0x1f8>)
 8004462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	e00a      	b.n	8004488 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	2b00      	cmp	r3, #0
 8004476:	d007      	beq.n	8004488 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004478:	4b39      	ldr	r3, [pc, #228]	; (8004560 <xQueueGenericSend+0x1f8>)
 800447a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004488:	f002 f934 	bl	80066f4 <vPortExitCritical>
				return pdPASS;
 800448c:	2301      	movs	r3, #1
 800448e:	e063      	b.n	8004558 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d103      	bne.n	800449e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004496:	f002 f92d 	bl	80066f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800449a:	2300      	movs	r3, #0
 800449c:	e05c      	b.n	8004558 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800449e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d106      	bne.n	80044b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044a4:	f107 0314 	add.w	r3, r7, #20
 80044a8:	4618      	mov	r0, r3
 80044aa:	f001 f92d 	bl	8005708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044ae:	2301      	movs	r3, #1
 80044b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044b2:	f002 f91f 	bl	80066f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044b6:	f000 fe9f 	bl	80051f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044ba:	f002 f8eb 	bl	8006694 <vPortEnterCritical>
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044c4:	b25b      	sxtb	r3, r3
 80044c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ca:	d103      	bne.n	80044d4 <xQueueGenericSend+0x16c>
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044da:	b25b      	sxtb	r3, r3
 80044dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e0:	d103      	bne.n	80044ea <xQueueGenericSend+0x182>
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044ea:	f002 f903 	bl	80066f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044ee:	1d3a      	adds	r2, r7, #4
 80044f0:	f107 0314 	add.w	r3, r7, #20
 80044f4:	4611      	mov	r1, r2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f001 f91c 	bl	8005734 <xTaskCheckForTimeOut>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d124      	bne.n	800454c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004502:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004504:	f000 fbc6 	bl	8004c94 <prvIsQueueFull>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d018      	beq.n	8004540 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800450e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004510:	3310      	adds	r3, #16
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	4611      	mov	r1, r2
 8004516:	4618      	mov	r0, r3
 8004518:	f001 f842 	bl	80055a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800451c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800451e:	f000 fb51 	bl	8004bc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004522:	f000 fe77 	bl	8005214 <xTaskResumeAll>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	f47f af7c 	bne.w	8004426 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800452e:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <xQueueGenericSend+0x1f8>)
 8004530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	e772      	b.n	8004426 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004542:	f000 fb3f 	bl	8004bc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004546:	f000 fe65 	bl	8005214 <xTaskResumeAll>
 800454a:	e76c      	b.n	8004426 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800454c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800454e:	f000 fb39 	bl	8004bc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004552:	f000 fe5f 	bl	8005214 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004556:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004558:	4618      	mov	r0, r3
 800455a:	3738      	adds	r7, #56	; 0x38
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	e000ed04 	.word	0xe000ed04

08004564 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b090      	sub	sp, #64	; 0x40
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10a      	bne.n	8004592 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800458e:	bf00      	nop
 8004590:	e7fe      	b.n	8004590 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d103      	bne.n	80045a0 <xQueueGenericSendFromISR+0x3c>
 8004598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <xQueueGenericSendFromISR+0x40>
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <xQueueGenericSendFromISR+0x42>
 80045a4:	2300      	movs	r3, #0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10a      	bne.n	80045c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80045aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045bc:	bf00      	nop
 80045be:	e7fe      	b.n	80045be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d103      	bne.n	80045ce <xQueueGenericSendFromISR+0x6a>
 80045c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <xQueueGenericSendFromISR+0x6e>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <xQueueGenericSendFromISR+0x70>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	623b      	str	r3, [r7, #32]
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045ee:	f002 f933 	bl	8006858 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045f2:	f3ef 8211 	mrs	r2, BASEPRI
 80045f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	61fa      	str	r2, [r7, #28]
 8004608:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800460a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800460c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800460e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004616:	429a      	cmp	r2, r3
 8004618:	d302      	bcc.n	8004620 <xQueueGenericSendFromISR+0xbc>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b02      	cmp	r3, #2
 800461e:	d12f      	bne.n	8004680 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800462a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004636:	f000 fa35 	bl	8004aa4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800463a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800463e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004642:	d112      	bne.n	800466a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	2b00      	cmp	r3, #0
 800464a:	d016      	beq.n	800467a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800464c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464e:	3324      	adds	r3, #36	; 0x24
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fff5 	bl	8005640 <xTaskRemoveFromEventList>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00e      	beq.n	800467a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00b      	beq.n	800467a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	e007      	b.n	800467a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800466a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800466e:	3301      	adds	r3, #1
 8004670:	b2db      	uxtb	r3, r3
 8004672:	b25a      	sxtb	r2, r3
 8004674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800467a:	2301      	movs	r3, #1
 800467c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800467e:	e001      	b.n	8004684 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004680:	2300      	movs	r3, #0
 8004682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004686:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800468e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004692:	4618      	mov	r0, r3
 8004694:	3740      	adds	r7, #64	; 0x40
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08c      	sub	sp, #48	; 0x30
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80046a8:	2300      	movs	r3, #0
 80046aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <xQueueReceive+0x30>
	__asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	623b      	str	r3, [r7, #32]
}
 80046c8:	bf00      	nop
 80046ca:	e7fe      	b.n	80046ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d103      	bne.n	80046da <xQueueReceive+0x3e>
 80046d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <xQueueReceive+0x42>
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <xQueueReceive+0x44>
 80046de:	2300      	movs	r3, #0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10a      	bne.n	80046fa <xQueueReceive+0x5e>
	__asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	61fb      	str	r3, [r7, #28]
}
 80046f6:	bf00      	nop
 80046f8:	e7fe      	b.n	80046f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046fa:	f001 f96f 	bl	80059dc <xTaskGetSchedulerState>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d102      	bne.n	800470a <xQueueReceive+0x6e>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <xQueueReceive+0x72>
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <xQueueReceive+0x74>
 800470e:	2300      	movs	r3, #0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10a      	bne.n	800472a <xQueueReceive+0x8e>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	61bb      	str	r3, [r7, #24]
}
 8004726:	bf00      	nop
 8004728:	e7fe      	b.n	8004728 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800472a:	f001 ffb3 	bl	8006694 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800472e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	2b00      	cmp	r3, #0
 8004738:	d01f      	beq.n	800477a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800473e:	f000 fa1b 	bl	8004b78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	1e5a      	subs	r2, r3, #1
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00f      	beq.n	8004772 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	3310      	adds	r3, #16
 8004756:	4618      	mov	r0, r3
 8004758:	f000 ff72 	bl	8005640 <xTaskRemoveFromEventList>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d007      	beq.n	8004772 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004762:	4b3d      	ldr	r3, [pc, #244]	; (8004858 <xQueueReceive+0x1bc>)
 8004764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004772:	f001 ffbf 	bl	80066f4 <vPortExitCritical>
				return pdPASS;
 8004776:	2301      	movs	r3, #1
 8004778:	e069      	b.n	800484e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d103      	bne.n	8004788 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004780:	f001 ffb8 	bl	80066f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004784:	2300      	movs	r3, #0
 8004786:	e062      	b.n	800484e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800478e:	f107 0310 	add.w	r3, r7, #16
 8004792:	4618      	mov	r0, r3
 8004794:	f000 ffb8 	bl	8005708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004798:	2301      	movs	r3, #1
 800479a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800479c:	f001 ffaa 	bl	80066f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047a0:	f000 fd2a 	bl	80051f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047a4:	f001 ff76 	bl	8006694 <vPortEnterCritical>
 80047a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047ae:	b25b      	sxtb	r3, r3
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b4:	d103      	bne.n	80047be <xQueueReceive+0x122>
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047c4:	b25b      	sxtb	r3, r3
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ca:	d103      	bne.n	80047d4 <xQueueReceive+0x138>
 80047cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047d4:	f001 ff8e 	bl	80066f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047d8:	1d3a      	adds	r2, r7, #4
 80047da:	f107 0310 	add.w	r3, r7, #16
 80047de:	4611      	mov	r1, r2
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 ffa7 	bl	8005734 <xTaskCheckForTimeOut>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d123      	bne.n	8004834 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ee:	f000 fa3b 	bl	8004c68 <prvIsQueueEmpty>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d017      	beq.n	8004828 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	3324      	adds	r3, #36	; 0x24
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	4611      	mov	r1, r2
 8004800:	4618      	mov	r0, r3
 8004802:	f000 fecd 	bl	80055a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004808:	f000 f9dc 	bl	8004bc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800480c:	f000 fd02 	bl	8005214 <xTaskResumeAll>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d189      	bne.n	800472a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004816:	4b10      	ldr	r3, [pc, #64]	; (8004858 <xQueueReceive+0x1bc>)
 8004818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	e780      	b.n	800472a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800482a:	f000 f9cb 	bl	8004bc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800482e:	f000 fcf1 	bl	8005214 <xTaskResumeAll>
 8004832:	e77a      	b.n	800472a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004836:	f000 f9c5 	bl	8004bc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800483a:	f000 fceb 	bl	8005214 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800483e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004840:	f000 fa12 	bl	8004c68 <prvIsQueueEmpty>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	f43f af6f 	beq.w	800472a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800484c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800484e:	4618      	mov	r0, r3
 8004850:	3730      	adds	r7, #48	; 0x30
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08e      	sub	sp, #56	; 0x38
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004866:	2300      	movs	r3, #0
 8004868:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800486e:	2300      	movs	r3, #0
 8004870:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	623b      	str	r3, [r7, #32]
}
 800488a:	bf00      	nop
 800488c:	e7fe      	b.n	800488c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800488e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	61fb      	str	r3, [r7, #28]
}
 80048a8:	bf00      	nop
 80048aa:	e7fe      	b.n	80048aa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048ac:	f001 f896 	bl	80059dc <xTaskGetSchedulerState>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d102      	bne.n	80048bc <xQueueSemaphoreTake+0x60>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <xQueueSemaphoreTake+0x64>
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <xQueueSemaphoreTake+0x66>
 80048c0:	2300      	movs	r3, #0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10a      	bne.n	80048dc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	61bb      	str	r3, [r7, #24]
}
 80048d8:	bf00      	nop
 80048da:	e7fe      	b.n	80048da <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048dc:	f001 feda 	bl	8006694 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80048e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80048e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d024      	beq.n	8004936 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	1e5a      	subs	r2, r3, #1
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d104      	bne.n	8004906 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80048fc:	f001 f9e4 	bl	8005cc8 <pvTaskIncrementMutexHeldCount>
 8004900:	4602      	mov	r2, r0
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00f      	beq.n	800492e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	3310      	adds	r3, #16
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fe94 	bl	8005640 <xTaskRemoveFromEventList>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800491e:	4b54      	ldr	r3, [pc, #336]	; (8004a70 <xQueueSemaphoreTake+0x214>)
 8004920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800492e:	f001 fee1 	bl	80066f4 <vPortExitCritical>
				return pdPASS;
 8004932:	2301      	movs	r3, #1
 8004934:	e097      	b.n	8004a66 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d111      	bne.n	8004960 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	617b      	str	r3, [r7, #20]
}
 8004954:	bf00      	nop
 8004956:	e7fe      	b.n	8004956 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004958:	f001 fecc 	bl	80066f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800495c:	2300      	movs	r3, #0
 800495e:	e082      	b.n	8004a66 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004966:	f107 030c 	add.w	r3, r7, #12
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fecc 	bl	8005708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004970:	2301      	movs	r3, #1
 8004972:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004974:	f001 febe 	bl	80066f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004978:	f000 fc3e 	bl	80051f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800497c:	f001 fe8a 	bl	8006694 <vPortEnterCritical>
 8004980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004982:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004986:	b25b      	sxtb	r3, r3
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498c:	d103      	bne.n	8004996 <xQueueSemaphoreTake+0x13a>
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800499c:	b25b      	sxtb	r3, r3
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a2:	d103      	bne.n	80049ac <xQueueSemaphoreTake+0x150>
 80049a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049ac:	f001 fea2 	bl	80066f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049b0:	463a      	mov	r2, r7
 80049b2:	f107 030c 	add.w	r3, r7, #12
 80049b6:	4611      	mov	r1, r2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 febb 	bl	8005734 <xTaskCheckForTimeOut>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d132      	bne.n	8004a2a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049c6:	f000 f94f 	bl	8004c68 <prvIsQueueEmpty>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d026      	beq.n	8004a1e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d109      	bne.n	80049ec <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80049d8:	f001 fe5c 	bl	8006694 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 f819 	bl	8005a18 <xTaskPriorityInherit>
 80049e6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80049e8:	f001 fe84 	bl	80066f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ee:	3324      	adds	r3, #36	; 0x24
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	4611      	mov	r1, r2
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fdd3 	bl	80055a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049fc:	f000 f8e2 	bl	8004bc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a00:	f000 fc08 	bl	8005214 <xTaskResumeAll>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f47f af68 	bne.w	80048dc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004a0c:	4b18      	ldr	r3, [pc, #96]	; (8004a70 <xQueueSemaphoreTake+0x214>)
 8004a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	e75e      	b.n	80048dc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004a1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a20:	f000 f8d0 	bl	8004bc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a24:	f000 fbf6 	bl	8005214 <xTaskResumeAll>
 8004a28:	e758      	b.n	80048dc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004a2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a2c:	f000 f8ca 	bl	8004bc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a30:	f000 fbf0 	bl	8005214 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a36:	f000 f917 	bl	8004c68 <prvIsQueueEmpty>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f43f af4d 	beq.w	80048dc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00d      	beq.n	8004a64 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004a48:	f001 fe24 	bl	8006694 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004a4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a4e:	f000 f811 	bl	8004a74 <prvGetDisinheritPriorityAfterTimeout>
 8004a52:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 f8b2 	bl	8005bc4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004a60:	f001 fe48 	bl	80066f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3738      	adds	r7, #56	; 0x38
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	e000ed04 	.word	0xe000ed04

08004a74 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d006      	beq.n	8004a92 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	e001      	b.n	8004a96 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004a96:	68fb      	ldr	r3, [r7, #12]
	}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10d      	bne.n	8004ade <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d14d      	bne.n	8004b66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f001 f80a 	bl	8005ae8 <xTaskPriorityDisinherit>
 8004ad4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	609a      	str	r2, [r3, #8]
 8004adc:	e043      	b.n	8004b66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d119      	bne.n	8004b18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6858      	ldr	r0, [r3, #4]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	461a      	mov	r2, r3
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	f002 f906 	bl	8006d00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	441a      	add	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d32b      	bcc.n	8004b66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	605a      	str	r2, [r3, #4]
 8004b16:	e026      	b.n	8004b66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	68d8      	ldr	r0, [r3, #12]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	461a      	mov	r2, r3
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	f002 f8ec 	bl	8006d00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	425b      	negs	r3, r3
 8004b32:	441a      	add	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d207      	bcs.n	8004b54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	425b      	negs	r3, r3
 8004b4e:	441a      	add	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d105      	bne.n	8004b66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b6e:	697b      	ldr	r3, [r7, #20]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d018      	beq.n	8004bbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	441a      	add	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d303      	bcc.n	8004bac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68d9      	ldr	r1, [r3, #12]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	6838      	ldr	r0, [r7, #0]
 8004bb8:	f002 f8a2 	bl	8006d00 <memcpy>
	}
}
 8004bbc:	bf00      	nop
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004bcc:	f001 fd62 	bl	8006694 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bd8:	e011      	b.n	8004bfe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d012      	beq.n	8004c08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3324      	adds	r3, #36	; 0x24
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fd2a 	bl	8005640 <xTaskRemoveFromEventList>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004bf2:	f000 fe01 	bl	80057f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	dce9      	bgt.n	8004bda <prvUnlockQueue+0x16>
 8004c06:	e000      	b.n	8004c0a <prvUnlockQueue+0x46>
					break;
 8004c08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	22ff      	movs	r2, #255	; 0xff
 8004c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c12:	f001 fd6f 	bl	80066f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c16:	f001 fd3d 	bl	8006694 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c22:	e011      	b.n	8004c48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d012      	beq.n	8004c52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3310      	adds	r3, #16
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fd05 	bl	8005640 <xTaskRemoveFromEventList>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c3c:	f000 fddc 	bl	80057f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c40:	7bbb      	ldrb	r3, [r7, #14]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	dce9      	bgt.n	8004c24 <prvUnlockQueue+0x60>
 8004c50:	e000      	b.n	8004c54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	22ff      	movs	r2, #255	; 0xff
 8004c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c5c:	f001 fd4a 	bl	80066f4 <vPortExitCritical>
}
 8004c60:	bf00      	nop
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c70:	f001 fd10 	bl	8006694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d102      	bne.n	8004c82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	e001      	b.n	8004c86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c86:	f001 fd35 	bl	80066f4 <vPortExitCritical>

	return xReturn;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c9c:	f001 fcfa 	bl	8006694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d102      	bne.n	8004cb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004cac:	2301      	movs	r3, #1
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	e001      	b.n	8004cb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cb6:	f001 fd1d 	bl	80066f4 <vPortExitCritical>

	return xReturn;
 8004cba:	68fb      	ldr	r3, [r7, #12]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	e014      	b.n	8004cfe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004cd4:	4a0f      	ldr	r2, [pc, #60]	; (8004d14 <vQueueAddToRegistry+0x50>)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10b      	bne.n	8004cf8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ce0:	490c      	ldr	r1, [pc, #48]	; (8004d14 <vQueueAddToRegistry+0x50>)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004cea:	4a0a      	ldr	r2, [pc, #40]	; (8004d14 <vQueueAddToRegistry+0x50>)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004cf6:	e006      	b.n	8004d06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b07      	cmp	r3, #7
 8004d02:	d9e7      	bls.n	8004cd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	20000850 	.word	0x20000850

08004d18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d28:	f001 fcb4 	bl	8006694 <vPortEnterCritical>
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d32:	b25b      	sxtb	r3, r3
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d103      	bne.n	8004d42 <vQueueWaitForMessageRestricted+0x2a>
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d48:	b25b      	sxtb	r3, r3
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d103      	bne.n	8004d58 <vQueueWaitForMessageRestricted+0x40>
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d58:	f001 fccc 	bl	80066f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d106      	bne.n	8004d72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	3324      	adds	r3, #36	; 0x24
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	68b9      	ldr	r1, [r7, #8]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 fc3b 	bl	80055e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d72:	6978      	ldr	r0, [r7, #20]
 8004d74:	f7ff ff26 	bl	8004bc4 <prvUnlockQueue>
	}
 8004d78:	bf00      	nop
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08e      	sub	sp, #56	; 0x38
 8004d84:	af04      	add	r7, sp, #16
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10a      	bne.n	8004daa <xTaskCreateStatic+0x2a>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	623b      	str	r3, [r7, #32]
}
 8004da6:	bf00      	nop
 8004da8:	e7fe      	b.n	8004da8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <xTaskCreateStatic+0x46>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	61fb      	str	r3, [r7, #28]
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004dc6:	235c      	movs	r3, #92	; 0x5c
 8004dc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	2b5c      	cmp	r3, #92	; 0x5c
 8004dce:	d00a      	beq.n	8004de6 <xTaskCreateStatic+0x66>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	61bb      	str	r3, [r7, #24]
}
 8004de2:	bf00      	nop
 8004de4:	e7fe      	b.n	8004de4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004de6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d01e      	beq.n	8004e2c <xTaskCreateStatic+0xac>
 8004dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01b      	beq.n	8004e2c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dfc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	2202      	movs	r2, #2
 8004e02:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e06:	2300      	movs	r3, #0
 8004e08:	9303      	str	r3, [sp, #12]
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	9302      	str	r3, [sp, #8]
 8004e0e:	f107 0314 	add.w	r3, r7, #20
 8004e12:	9301      	str	r3, [sp, #4]
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f850 	bl	8004ec4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e26:	f000 f8dd 	bl	8004fe4 <prvAddNewTaskToReadyList>
 8004e2a:	e001      	b.n	8004e30 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e30:	697b      	ldr	r3, [r7, #20]
	}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3728      	adds	r7, #40	; 0x28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b08c      	sub	sp, #48	; 0x30
 8004e3e:	af04      	add	r7, sp, #16
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	603b      	str	r3, [r7, #0]
 8004e46:	4613      	mov	r3, r2
 8004e48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e4a:	88fb      	ldrh	r3, [r7, #6]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f001 fd42 	bl	80068d8 <pvPortMalloc>
 8004e54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00e      	beq.n	8004e7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e5c:	205c      	movs	r0, #92	; 0x5c
 8004e5e:	f001 fd3b 	bl	80068d8 <pvPortMalloc>
 8004e62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30
 8004e70:	e005      	b.n	8004e7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e72:	6978      	ldr	r0, [r7, #20]
 8004e74:	f001 fdfc 	bl	8006a70 <vPortFree>
 8004e78:	e001      	b.n	8004e7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d017      	beq.n	8004eb4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e8c:	88fa      	ldrh	r2, [r7, #6]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	9303      	str	r3, [sp, #12]
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	9302      	str	r3, [sp, #8]
 8004e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e98:	9301      	str	r3, [sp, #4]
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f80e 	bl	8004ec4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ea8:	69f8      	ldr	r0, [r7, #28]
 8004eaa:	f000 f89b 	bl	8004fe4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	e002      	b.n	8004eba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004eba:	69bb      	ldr	r3, [r7, #24]
	}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	461a      	mov	r2, r3
 8004edc:	21a5      	movs	r1, #165	; 0xa5
 8004ede:	f001 ff1d 	bl	8006d1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004eec:	3b01      	subs	r3, #1
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	f023 0307 	bic.w	r3, r3, #7
 8004efa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	617b      	str	r3, [r7, #20]
}
 8004f18:	bf00      	nop
 8004f1a:	e7fe      	b.n	8004f1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d01f      	beq.n	8004f62 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f22:	2300      	movs	r3, #0
 8004f24:	61fb      	str	r3, [r7, #28]
 8004f26:	e012      	b.n	8004f4e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	7819      	ldrb	r1, [r3, #0]
 8004f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	4413      	add	r3, r2
 8004f36:	3334      	adds	r3, #52	; 0x34
 8004f38:	460a      	mov	r2, r1
 8004f3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	4413      	add	r3, r2
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d006      	beq.n	8004f56 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	2b0f      	cmp	r3, #15
 8004f52:	d9e9      	bls.n	8004f28 <prvInitialiseNewTask+0x64>
 8004f54:	e000      	b.n	8004f58 <prvInitialiseNewTask+0x94>
			{
				break;
 8004f56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f60:	e003      	b.n	8004f6a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6c:	2b37      	cmp	r3, #55	; 0x37
 8004f6e:	d901      	bls.n	8004f74 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f70:	2337      	movs	r3, #55	; 0x37
 8004f72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f82:	2200      	movs	r2, #0
 8004f84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f88:	3304      	adds	r3, #4
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fe ff64 	bl	8003e58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f92:	3318      	adds	r3, #24
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fe ff5f 	bl	8003e58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	68f9      	ldr	r1, [r7, #12]
 8004fc2:	69b8      	ldr	r0, [r7, #24]
 8004fc4:	f001 fa36 	bl	8006434 <pxPortInitialiseStack>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fda:	bf00      	nop
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fec:	f001 fb52 	bl	8006694 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ff0:	4b2d      	ldr	r3, [pc, #180]	; (80050a8 <prvAddNewTaskToReadyList+0xc4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	4a2c      	ldr	r2, [pc, #176]	; (80050a8 <prvAddNewTaskToReadyList+0xc4>)
 8004ff8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ffa:	4b2c      	ldr	r3, [pc, #176]	; (80050ac <prvAddNewTaskToReadyList+0xc8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d109      	bne.n	8005016 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005002:	4a2a      	ldr	r2, [pc, #168]	; (80050ac <prvAddNewTaskToReadyList+0xc8>)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005008:	4b27      	ldr	r3, [pc, #156]	; (80050a8 <prvAddNewTaskToReadyList+0xc4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d110      	bne.n	8005032 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005010:	f000 fc16 	bl	8005840 <prvInitialiseTaskLists>
 8005014:	e00d      	b.n	8005032 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005016:	4b26      	ldr	r3, [pc, #152]	; (80050b0 <prvAddNewTaskToReadyList+0xcc>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d109      	bne.n	8005032 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800501e:	4b23      	ldr	r3, [pc, #140]	; (80050ac <prvAddNewTaskToReadyList+0xc8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	429a      	cmp	r2, r3
 800502a:	d802      	bhi.n	8005032 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800502c:	4a1f      	ldr	r2, [pc, #124]	; (80050ac <prvAddNewTaskToReadyList+0xc8>)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005032:	4b20      	ldr	r3, [pc, #128]	; (80050b4 <prvAddNewTaskToReadyList+0xd0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3301      	adds	r3, #1
 8005038:	4a1e      	ldr	r2, [pc, #120]	; (80050b4 <prvAddNewTaskToReadyList+0xd0>)
 800503a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800503c:	4b1d      	ldr	r3, [pc, #116]	; (80050b4 <prvAddNewTaskToReadyList+0xd0>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005048:	4b1b      	ldr	r3, [pc, #108]	; (80050b8 <prvAddNewTaskToReadyList+0xd4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	429a      	cmp	r2, r3
 800504e:	d903      	bls.n	8005058 <prvAddNewTaskToReadyList+0x74>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	4a18      	ldr	r2, [pc, #96]	; (80050b8 <prvAddNewTaskToReadyList+0xd4>)
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4a15      	ldr	r2, [pc, #84]	; (80050bc <prvAddNewTaskToReadyList+0xd8>)
 8005066:	441a      	add	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3304      	adds	r3, #4
 800506c:	4619      	mov	r1, r3
 800506e:	4610      	mov	r0, r2
 8005070:	f7fe feff 	bl	8003e72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005074:	f001 fb3e 	bl	80066f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005078:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <prvAddNewTaskToReadyList+0xcc>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00e      	beq.n	800509e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005080:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <prvAddNewTaskToReadyList+0xc8>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508a:	429a      	cmp	r2, r3
 800508c:	d207      	bcs.n	800509e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800508e:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <prvAddNewTaskToReadyList+0xdc>)
 8005090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20000d64 	.word	0x20000d64
 80050ac:	20000890 	.word	0x20000890
 80050b0:	20000d70 	.word	0x20000d70
 80050b4:	20000d80 	.word	0x20000d80
 80050b8:	20000d6c 	.word	0x20000d6c
 80050bc:	20000894 	.word	0x20000894
 80050c0:	e000ed04 	.word	0xe000ed04

080050c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d017      	beq.n	8005106 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050d6:	4b13      	ldr	r3, [pc, #76]	; (8005124 <vTaskDelay+0x60>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <vTaskDelay+0x30>
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	60bb      	str	r3, [r7, #8]
}
 80050f0:	bf00      	nop
 80050f2:	e7fe      	b.n	80050f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80050f4:	f000 f880 	bl	80051f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050f8:	2100      	movs	r1, #0
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fdf8 	bl	8005cf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005100:	f000 f888 	bl	8005214 <xTaskResumeAll>
 8005104:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d107      	bne.n	800511c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800510c:	4b06      	ldr	r3, [pc, #24]	; (8005128 <vTaskDelay+0x64>)
 800510e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800511c:	bf00      	nop
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	20000d8c 	.word	0x20000d8c
 8005128:	e000ed04 	.word	0xe000ed04

0800512c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08a      	sub	sp, #40	; 0x28
 8005130:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005132:	2300      	movs	r3, #0
 8005134:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005136:	2300      	movs	r3, #0
 8005138:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800513a:	463a      	mov	r2, r7
 800513c:	1d39      	adds	r1, r7, #4
 800513e:	f107 0308 	add.w	r3, r7, #8
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe fe34 	bl	8003db0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005148:	6839      	ldr	r1, [r7, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	9202      	str	r2, [sp, #8]
 8005150:	9301      	str	r3, [sp, #4]
 8005152:	2300      	movs	r3, #0
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	2300      	movs	r3, #0
 8005158:	460a      	mov	r2, r1
 800515a:	4921      	ldr	r1, [pc, #132]	; (80051e0 <vTaskStartScheduler+0xb4>)
 800515c:	4821      	ldr	r0, [pc, #132]	; (80051e4 <vTaskStartScheduler+0xb8>)
 800515e:	f7ff fe0f 	bl	8004d80 <xTaskCreateStatic>
 8005162:	4603      	mov	r3, r0
 8005164:	4a20      	ldr	r2, [pc, #128]	; (80051e8 <vTaskStartScheduler+0xbc>)
 8005166:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005168:	4b1f      	ldr	r3, [pc, #124]	; (80051e8 <vTaskStartScheduler+0xbc>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005170:	2301      	movs	r3, #1
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	e001      	b.n	800517a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d102      	bne.n	8005186 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005180:	f000 fe0a 	bl	8005d98 <xTimerCreateTimerTask>
 8005184:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d116      	bne.n	80051ba <vTaskStartScheduler+0x8e>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	613b      	str	r3, [r7, #16]
}
 800519e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051a0:	4b12      	ldr	r3, [pc, #72]	; (80051ec <vTaskStartScheduler+0xc0>)
 80051a2:	f04f 32ff 	mov.w	r2, #4294967295
 80051a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051a8:	4b11      	ldr	r3, [pc, #68]	; (80051f0 <vTaskStartScheduler+0xc4>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80051ae:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <vTaskStartScheduler+0xc8>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051b4:	f001 f9cc 	bl	8006550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051b8:	e00e      	b.n	80051d8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d10a      	bne.n	80051d8 <vTaskStartScheduler+0xac>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	60fb      	str	r3, [r7, #12]
}
 80051d4:	bf00      	nop
 80051d6:	e7fe      	b.n	80051d6 <vTaskStartScheduler+0xaa>
}
 80051d8:	bf00      	nop
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	08007cc0 	.word	0x08007cc0
 80051e4:	08005811 	.word	0x08005811
 80051e8:	20000d88 	.word	0x20000d88
 80051ec:	20000d84 	.word	0x20000d84
 80051f0:	20000d70 	.word	0x20000d70
 80051f4:	20000d68 	.word	0x20000d68

080051f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80051fc:	4b04      	ldr	r3, [pc, #16]	; (8005210 <vTaskSuspendAll+0x18>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3301      	adds	r3, #1
 8005202:	4a03      	ldr	r2, [pc, #12]	; (8005210 <vTaskSuspendAll+0x18>)
 8005204:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005206:	bf00      	nop
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	20000d8c 	.word	0x20000d8c

08005214 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800521e:	2300      	movs	r3, #0
 8005220:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005222:	4b42      	ldr	r3, [pc, #264]	; (800532c <xTaskResumeAll+0x118>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10a      	bne.n	8005240 <xTaskResumeAll+0x2c>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	603b      	str	r3, [r7, #0]
}
 800523c:	bf00      	nop
 800523e:	e7fe      	b.n	800523e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005240:	f001 fa28 	bl	8006694 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005244:	4b39      	ldr	r3, [pc, #228]	; (800532c <xTaskResumeAll+0x118>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3b01      	subs	r3, #1
 800524a:	4a38      	ldr	r2, [pc, #224]	; (800532c <xTaskResumeAll+0x118>)
 800524c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800524e:	4b37      	ldr	r3, [pc, #220]	; (800532c <xTaskResumeAll+0x118>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d162      	bne.n	800531c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005256:	4b36      	ldr	r3, [pc, #216]	; (8005330 <xTaskResumeAll+0x11c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d05e      	beq.n	800531c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800525e:	e02f      	b.n	80052c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005260:	4b34      	ldr	r3, [pc, #208]	; (8005334 <xTaskResumeAll+0x120>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3318      	adds	r3, #24
 800526c:	4618      	mov	r0, r3
 800526e:	f7fe fe5d 	bl	8003f2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3304      	adds	r3, #4
 8005276:	4618      	mov	r0, r3
 8005278:	f7fe fe58 	bl	8003f2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005280:	4b2d      	ldr	r3, [pc, #180]	; (8005338 <xTaskResumeAll+0x124>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d903      	bls.n	8005290 <xTaskResumeAll+0x7c>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	4a2a      	ldr	r2, [pc, #168]	; (8005338 <xTaskResumeAll+0x124>)
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005294:	4613      	mov	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4a27      	ldr	r2, [pc, #156]	; (800533c <xTaskResumeAll+0x128>)
 800529e:	441a      	add	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	3304      	adds	r3, #4
 80052a4:	4619      	mov	r1, r3
 80052a6:	4610      	mov	r0, r2
 80052a8:	f7fe fde3 	bl	8003e72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b0:	4b23      	ldr	r3, [pc, #140]	; (8005340 <xTaskResumeAll+0x12c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d302      	bcc.n	80052c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80052ba:	4b22      	ldr	r3, [pc, #136]	; (8005344 <xTaskResumeAll+0x130>)
 80052bc:	2201      	movs	r2, #1
 80052be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052c0:	4b1c      	ldr	r3, [pc, #112]	; (8005334 <xTaskResumeAll+0x120>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1cb      	bne.n	8005260 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052ce:	f000 fb55 	bl	800597c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80052d2:	4b1d      	ldr	r3, [pc, #116]	; (8005348 <xTaskResumeAll+0x134>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d010      	beq.n	8005300 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052de:	f000 f847 	bl	8005370 <xTaskIncrementTick>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80052e8:	4b16      	ldr	r3, [pc, #88]	; (8005344 <xTaskResumeAll+0x130>)
 80052ea:	2201      	movs	r2, #1
 80052ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3b01      	subs	r3, #1
 80052f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f1      	bne.n	80052de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80052fa:	4b13      	ldr	r3, [pc, #76]	; (8005348 <xTaskResumeAll+0x134>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005300:	4b10      	ldr	r3, [pc, #64]	; (8005344 <xTaskResumeAll+0x130>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d009      	beq.n	800531c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005308:	2301      	movs	r3, #1
 800530a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800530c:	4b0f      	ldr	r3, [pc, #60]	; (800534c <xTaskResumeAll+0x138>)
 800530e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800531c:	f001 f9ea 	bl	80066f4 <vPortExitCritical>

	return xAlreadyYielded;
 8005320:	68bb      	ldr	r3, [r7, #8]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20000d8c 	.word	0x20000d8c
 8005330:	20000d64 	.word	0x20000d64
 8005334:	20000d24 	.word	0x20000d24
 8005338:	20000d6c 	.word	0x20000d6c
 800533c:	20000894 	.word	0x20000894
 8005340:	20000890 	.word	0x20000890
 8005344:	20000d78 	.word	0x20000d78
 8005348:	20000d74 	.word	0x20000d74
 800534c:	e000ed04 	.word	0xe000ed04

08005350 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005356:	4b05      	ldr	r3, [pc, #20]	; (800536c <xTaskGetTickCount+0x1c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800535c:	687b      	ldr	r3, [r7, #4]
}
 800535e:	4618      	mov	r0, r3
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	20000d68 	.word	0x20000d68

08005370 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005376:	2300      	movs	r3, #0
 8005378:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800537a:	4b4f      	ldr	r3, [pc, #316]	; (80054b8 <xTaskIncrementTick+0x148>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	f040 808f 	bne.w	80054a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005384:	4b4d      	ldr	r3, [pc, #308]	; (80054bc <xTaskIncrementTick+0x14c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3301      	adds	r3, #1
 800538a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800538c:	4a4b      	ldr	r2, [pc, #300]	; (80054bc <xTaskIncrementTick+0x14c>)
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d120      	bne.n	80053da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005398:	4b49      	ldr	r3, [pc, #292]	; (80054c0 <xTaskIncrementTick+0x150>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	603b      	str	r3, [r7, #0]
}
 80053b4:	bf00      	nop
 80053b6:	e7fe      	b.n	80053b6 <xTaskIncrementTick+0x46>
 80053b8:	4b41      	ldr	r3, [pc, #260]	; (80054c0 <xTaskIncrementTick+0x150>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	4b41      	ldr	r3, [pc, #260]	; (80054c4 <xTaskIncrementTick+0x154>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a3f      	ldr	r2, [pc, #252]	; (80054c0 <xTaskIncrementTick+0x150>)
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	4a3f      	ldr	r2, [pc, #252]	; (80054c4 <xTaskIncrementTick+0x154>)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	4b3e      	ldr	r3, [pc, #248]	; (80054c8 <xTaskIncrementTick+0x158>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3301      	adds	r3, #1
 80053d2:	4a3d      	ldr	r2, [pc, #244]	; (80054c8 <xTaskIncrementTick+0x158>)
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	f000 fad1 	bl	800597c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053da:	4b3c      	ldr	r3, [pc, #240]	; (80054cc <xTaskIncrementTick+0x15c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d349      	bcc.n	8005478 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053e4:	4b36      	ldr	r3, [pc, #216]	; (80054c0 <xTaskIncrementTick+0x150>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d104      	bne.n	80053f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ee:	4b37      	ldr	r3, [pc, #220]	; (80054cc <xTaskIncrementTick+0x15c>)
 80053f0:	f04f 32ff 	mov.w	r2, #4294967295
 80053f4:	601a      	str	r2, [r3, #0]
					break;
 80053f6:	e03f      	b.n	8005478 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053f8:	4b31      	ldr	r3, [pc, #196]	; (80054c0 <xTaskIncrementTick+0x150>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	429a      	cmp	r2, r3
 800540e:	d203      	bcs.n	8005418 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005410:	4a2e      	ldr	r2, [pc, #184]	; (80054cc <xTaskIncrementTick+0x15c>)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005416:	e02f      	b.n	8005478 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	3304      	adds	r3, #4
 800541c:	4618      	mov	r0, r3
 800541e:	f7fe fd85 	bl	8003f2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005426:	2b00      	cmp	r3, #0
 8005428:	d004      	beq.n	8005434 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	3318      	adds	r3, #24
 800542e:	4618      	mov	r0, r3
 8005430:	f7fe fd7c 	bl	8003f2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005438:	4b25      	ldr	r3, [pc, #148]	; (80054d0 <xTaskIncrementTick+0x160>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d903      	bls.n	8005448 <xTaskIncrementTick+0xd8>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	4a22      	ldr	r2, [pc, #136]	; (80054d0 <xTaskIncrementTick+0x160>)
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4a1f      	ldr	r2, [pc, #124]	; (80054d4 <xTaskIncrementTick+0x164>)
 8005456:	441a      	add	r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	3304      	adds	r3, #4
 800545c:	4619      	mov	r1, r3
 800545e:	4610      	mov	r0, r2
 8005460:	f7fe fd07 	bl	8003e72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005468:	4b1b      	ldr	r3, [pc, #108]	; (80054d8 <xTaskIncrementTick+0x168>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	429a      	cmp	r2, r3
 8005470:	d3b8      	bcc.n	80053e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005472:	2301      	movs	r3, #1
 8005474:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005476:	e7b5      	b.n	80053e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005478:	4b17      	ldr	r3, [pc, #92]	; (80054d8 <xTaskIncrementTick+0x168>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547e:	4915      	ldr	r1, [pc, #84]	; (80054d4 <xTaskIncrementTick+0x164>)
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d901      	bls.n	8005494 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005490:	2301      	movs	r3, #1
 8005492:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005494:	4b11      	ldr	r3, [pc, #68]	; (80054dc <xTaskIncrementTick+0x16c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800549c:	2301      	movs	r3, #1
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	e004      	b.n	80054ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80054a2:	4b0f      	ldr	r3, [pc, #60]	; (80054e0 <xTaskIncrementTick+0x170>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3301      	adds	r3, #1
 80054a8:	4a0d      	ldr	r2, [pc, #52]	; (80054e0 <xTaskIncrementTick+0x170>)
 80054aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80054ac:	697b      	ldr	r3, [r7, #20]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000d8c 	.word	0x20000d8c
 80054bc:	20000d68 	.word	0x20000d68
 80054c0:	20000d1c 	.word	0x20000d1c
 80054c4:	20000d20 	.word	0x20000d20
 80054c8:	20000d7c 	.word	0x20000d7c
 80054cc:	20000d84 	.word	0x20000d84
 80054d0:	20000d6c 	.word	0x20000d6c
 80054d4:	20000894 	.word	0x20000894
 80054d8:	20000890 	.word	0x20000890
 80054dc:	20000d78 	.word	0x20000d78
 80054e0:	20000d74 	.word	0x20000d74

080054e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054ea:	4b28      	ldr	r3, [pc, #160]	; (800558c <vTaskSwitchContext+0xa8>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054f2:	4b27      	ldr	r3, [pc, #156]	; (8005590 <vTaskSwitchContext+0xac>)
 80054f4:	2201      	movs	r2, #1
 80054f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054f8:	e041      	b.n	800557e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80054fa:	4b25      	ldr	r3, [pc, #148]	; (8005590 <vTaskSwitchContext+0xac>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005500:	4b24      	ldr	r3, [pc, #144]	; (8005594 <vTaskSwitchContext+0xb0>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	e010      	b.n	800552a <vTaskSwitchContext+0x46>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10a      	bne.n	8005524 <vTaskSwitchContext+0x40>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	607b      	str	r3, [r7, #4]
}
 8005520:	bf00      	nop
 8005522:	e7fe      	b.n	8005522 <vTaskSwitchContext+0x3e>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3b01      	subs	r3, #1
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	491b      	ldr	r1, [pc, #108]	; (8005598 <vTaskSwitchContext+0xb4>)
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4613      	mov	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	440b      	add	r3, r1
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0e4      	beq.n	8005508 <vTaskSwitchContext+0x24>
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4a13      	ldr	r2, [pc, #76]	; (8005598 <vTaskSwitchContext+0xb4>)
 800554a:	4413      	add	r3, r2
 800554c:	60bb      	str	r3, [r7, #8]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	605a      	str	r2, [r3, #4]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	3308      	adds	r3, #8
 8005560:	429a      	cmp	r2, r3
 8005562:	d104      	bne.n	800556e <vTaskSwitchContext+0x8a>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	605a      	str	r2, [r3, #4]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	4a09      	ldr	r2, [pc, #36]	; (800559c <vTaskSwitchContext+0xb8>)
 8005576:	6013      	str	r3, [r2, #0]
 8005578:	4a06      	ldr	r2, [pc, #24]	; (8005594 <vTaskSwitchContext+0xb0>)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6013      	str	r3, [r2, #0]
}
 800557e:	bf00      	nop
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	20000d8c 	.word	0x20000d8c
 8005590:	20000d78 	.word	0x20000d78
 8005594:	20000d6c 	.word	0x20000d6c
 8005598:	20000894 	.word	0x20000894
 800559c:	20000890 	.word	0x20000890

080055a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10a      	bne.n	80055c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	60fb      	str	r3, [r7, #12]
}
 80055c2:	bf00      	nop
 80055c4:	e7fe      	b.n	80055c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055c6:	4b07      	ldr	r3, [pc, #28]	; (80055e4 <vTaskPlaceOnEventList+0x44>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	3318      	adds	r3, #24
 80055cc:	4619      	mov	r1, r3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fe fc73 	bl	8003eba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055d4:	2101      	movs	r1, #1
 80055d6:	6838      	ldr	r0, [r7, #0]
 80055d8:	f000 fb8a 	bl	8005cf0 <prvAddCurrentTaskToDelayedList>
}
 80055dc:	bf00      	nop
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20000890 	.word	0x20000890

080055e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10a      	bne.n	8005610 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	617b      	str	r3, [r7, #20]
}
 800560c:	bf00      	nop
 800560e:	e7fe      	b.n	800560e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005610:	4b0a      	ldr	r3, [pc, #40]	; (800563c <vTaskPlaceOnEventListRestricted+0x54>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3318      	adds	r3, #24
 8005616:	4619      	mov	r1, r3
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f7fe fc2a 	bl	8003e72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005624:	f04f 33ff 	mov.w	r3, #4294967295
 8005628:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	68b8      	ldr	r0, [r7, #8]
 800562e:	f000 fb5f 	bl	8005cf0 <prvAddCurrentTaskToDelayedList>
	}
 8005632:	bf00      	nop
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20000890 	.word	0x20000890

08005640 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10a      	bne.n	800566c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	60fb      	str	r3, [r7, #12]
}
 8005668:	bf00      	nop
 800566a:	e7fe      	b.n	800566a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	3318      	adds	r3, #24
 8005670:	4618      	mov	r0, r3
 8005672:	f7fe fc5b 	bl	8003f2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005676:	4b1e      	ldr	r3, [pc, #120]	; (80056f0 <xTaskRemoveFromEventList+0xb0>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d11d      	bne.n	80056ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	3304      	adds	r3, #4
 8005682:	4618      	mov	r0, r3
 8005684:	f7fe fc52 	bl	8003f2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568c:	4b19      	ldr	r3, [pc, #100]	; (80056f4 <xTaskRemoveFromEventList+0xb4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	429a      	cmp	r2, r3
 8005692:	d903      	bls.n	800569c <xTaskRemoveFromEventList+0x5c>
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	4a16      	ldr	r2, [pc, #88]	; (80056f4 <xTaskRemoveFromEventList+0xb4>)
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4a13      	ldr	r2, [pc, #76]	; (80056f8 <xTaskRemoveFromEventList+0xb8>)
 80056aa:	441a      	add	r2, r3
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	3304      	adds	r3, #4
 80056b0:	4619      	mov	r1, r3
 80056b2:	4610      	mov	r0, r2
 80056b4:	f7fe fbdd 	bl	8003e72 <vListInsertEnd>
 80056b8:	e005      	b.n	80056c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	3318      	adds	r3, #24
 80056be:	4619      	mov	r1, r3
 80056c0:	480e      	ldr	r0, [pc, #56]	; (80056fc <xTaskRemoveFromEventList+0xbc>)
 80056c2:	f7fe fbd6 	bl	8003e72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ca:	4b0d      	ldr	r3, [pc, #52]	; (8005700 <xTaskRemoveFromEventList+0xc0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d905      	bls.n	80056e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056d4:	2301      	movs	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056d8:	4b0a      	ldr	r3, [pc, #40]	; (8005704 <xTaskRemoveFromEventList+0xc4>)
 80056da:	2201      	movs	r2, #1
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	e001      	b.n	80056e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80056e4:	697b      	ldr	r3, [r7, #20]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000d8c 	.word	0x20000d8c
 80056f4:	20000d6c 	.word	0x20000d6c
 80056f8:	20000894 	.word	0x20000894
 80056fc:	20000d24 	.word	0x20000d24
 8005700:	20000890 	.word	0x20000890
 8005704:	20000d78 	.word	0x20000d78

08005708 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005710:	4b06      	ldr	r3, [pc, #24]	; (800572c <vTaskInternalSetTimeOutState+0x24>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005718:	4b05      	ldr	r3, [pc, #20]	; (8005730 <vTaskInternalSetTimeOutState+0x28>)
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	605a      	str	r2, [r3, #4]
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	20000d7c 	.word	0x20000d7c
 8005730:	20000d68 	.word	0x20000d68

08005734 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10a      	bne.n	800575a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	613b      	str	r3, [r7, #16]
}
 8005756:	bf00      	nop
 8005758:	e7fe      	b.n	8005758 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10a      	bne.n	8005776 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	60fb      	str	r3, [r7, #12]
}
 8005772:	bf00      	nop
 8005774:	e7fe      	b.n	8005774 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005776:	f000 ff8d 	bl	8006694 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800577a:	4b1d      	ldr	r3, [pc, #116]	; (80057f0 <xTaskCheckForTimeOut+0xbc>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d102      	bne.n	800579a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005794:	2300      	movs	r3, #0
 8005796:	61fb      	str	r3, [r7, #28]
 8005798:	e023      	b.n	80057e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	4b15      	ldr	r3, [pc, #84]	; (80057f4 <xTaskCheckForTimeOut+0xc0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d007      	beq.n	80057b6 <xTaskCheckForTimeOut+0x82>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d302      	bcc.n	80057b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80057b0:	2301      	movs	r3, #1
 80057b2:	61fb      	str	r3, [r7, #28]
 80057b4:	e015      	b.n	80057e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d20b      	bcs.n	80057d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	1ad2      	subs	r2, r2, r3
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff ff9b 	bl	8005708 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	61fb      	str	r3, [r7, #28]
 80057d6:	e004      	b.n	80057e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057de:	2301      	movs	r3, #1
 80057e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057e2:	f000 ff87 	bl	80066f4 <vPortExitCritical>

	return xReturn;
 80057e6:	69fb      	ldr	r3, [r7, #28]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	20000d68 	.word	0x20000d68
 80057f4:	20000d7c 	.word	0x20000d7c

080057f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057fc:	4b03      	ldr	r3, [pc, #12]	; (800580c <vTaskMissedYield+0x14>)
 80057fe:	2201      	movs	r2, #1
 8005800:	601a      	str	r2, [r3, #0]
}
 8005802:	bf00      	nop
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	20000d78 	.word	0x20000d78

08005810 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005818:	f000 f852 	bl	80058c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800581c:	4b06      	ldr	r3, [pc, #24]	; (8005838 <prvIdleTask+0x28>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d9f9      	bls.n	8005818 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005824:	4b05      	ldr	r3, [pc, #20]	; (800583c <prvIdleTask+0x2c>)
 8005826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005834:	e7f0      	b.n	8005818 <prvIdleTask+0x8>
 8005836:	bf00      	nop
 8005838:	20000894 	.word	0x20000894
 800583c:	e000ed04 	.word	0xe000ed04

08005840 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005846:	2300      	movs	r3, #0
 8005848:	607b      	str	r3, [r7, #4]
 800584a:	e00c      	b.n	8005866 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4a12      	ldr	r2, [pc, #72]	; (80058a0 <prvInitialiseTaskLists+0x60>)
 8005858:	4413      	add	r3, r2
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe fadc 	bl	8003e18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3301      	adds	r3, #1
 8005864:	607b      	str	r3, [r7, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b37      	cmp	r3, #55	; 0x37
 800586a:	d9ef      	bls.n	800584c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800586c:	480d      	ldr	r0, [pc, #52]	; (80058a4 <prvInitialiseTaskLists+0x64>)
 800586e:	f7fe fad3 	bl	8003e18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005872:	480d      	ldr	r0, [pc, #52]	; (80058a8 <prvInitialiseTaskLists+0x68>)
 8005874:	f7fe fad0 	bl	8003e18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005878:	480c      	ldr	r0, [pc, #48]	; (80058ac <prvInitialiseTaskLists+0x6c>)
 800587a:	f7fe facd 	bl	8003e18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800587e:	480c      	ldr	r0, [pc, #48]	; (80058b0 <prvInitialiseTaskLists+0x70>)
 8005880:	f7fe faca 	bl	8003e18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005884:	480b      	ldr	r0, [pc, #44]	; (80058b4 <prvInitialiseTaskLists+0x74>)
 8005886:	f7fe fac7 	bl	8003e18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800588a:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <prvInitialiseTaskLists+0x78>)
 800588c:	4a05      	ldr	r2, [pc, #20]	; (80058a4 <prvInitialiseTaskLists+0x64>)
 800588e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005890:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <prvInitialiseTaskLists+0x7c>)
 8005892:	4a05      	ldr	r2, [pc, #20]	; (80058a8 <prvInitialiseTaskLists+0x68>)
 8005894:	601a      	str	r2, [r3, #0]
}
 8005896:	bf00      	nop
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20000894 	.word	0x20000894
 80058a4:	20000cf4 	.word	0x20000cf4
 80058a8:	20000d08 	.word	0x20000d08
 80058ac:	20000d24 	.word	0x20000d24
 80058b0:	20000d38 	.word	0x20000d38
 80058b4:	20000d50 	.word	0x20000d50
 80058b8:	20000d1c 	.word	0x20000d1c
 80058bc:	20000d20 	.word	0x20000d20

080058c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058c6:	e019      	b.n	80058fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058c8:	f000 fee4 	bl	8006694 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058cc:	4b10      	ldr	r3, [pc, #64]	; (8005910 <prvCheckTasksWaitingTermination+0x50>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fe fb27 	bl	8003f2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058de:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <prvCheckTasksWaitingTermination+0x54>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	4a0b      	ldr	r2, [pc, #44]	; (8005914 <prvCheckTasksWaitingTermination+0x54>)
 80058e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058e8:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <prvCheckTasksWaitingTermination+0x58>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	4a0a      	ldr	r2, [pc, #40]	; (8005918 <prvCheckTasksWaitingTermination+0x58>)
 80058f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058f2:	f000 feff 	bl	80066f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f810 	bl	800591c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058fc:	4b06      	ldr	r3, [pc, #24]	; (8005918 <prvCheckTasksWaitingTermination+0x58>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e1      	bne.n	80058c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000d38 	.word	0x20000d38
 8005914:	20000d64 	.word	0x20000d64
 8005918:	20000d4c 	.word	0x20000d4c

0800591c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800592a:	2b00      	cmp	r3, #0
 800592c:	d108      	bne.n	8005940 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	4618      	mov	r0, r3
 8005934:	f001 f89c 	bl	8006a70 <vPortFree>
				vPortFree( pxTCB );
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f001 f899 	bl	8006a70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800593e:	e018      	b.n	8005972 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005946:	2b01      	cmp	r3, #1
 8005948:	d103      	bne.n	8005952 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f001 f890 	bl	8006a70 <vPortFree>
	}
 8005950:	e00f      	b.n	8005972 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005958:	2b02      	cmp	r3, #2
 800595a:	d00a      	beq.n	8005972 <prvDeleteTCB+0x56>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	60fb      	str	r3, [r7, #12]
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <prvDeleteTCB+0x54>
	}
 8005972:	bf00      	nop
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
	...

0800597c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005982:	4b0c      	ldr	r3, [pc, #48]	; (80059b4 <prvResetNextTaskUnblockTime+0x38>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d104      	bne.n	8005996 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800598c:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <prvResetNextTaskUnblockTime+0x3c>)
 800598e:	f04f 32ff 	mov.w	r2, #4294967295
 8005992:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005994:	e008      	b.n	80059a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005996:	4b07      	ldr	r3, [pc, #28]	; (80059b4 <prvResetNextTaskUnblockTime+0x38>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	4a04      	ldr	r2, [pc, #16]	; (80059b8 <prvResetNextTaskUnblockTime+0x3c>)
 80059a6:	6013      	str	r3, [r2, #0]
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	20000d1c 	.word	0x20000d1c
 80059b8:	20000d84 	.word	0x20000d84

080059bc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80059c2:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <xTaskGetCurrentTaskHandle+0x1c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80059c8:	687b      	ldr	r3, [r7, #4]
	}
 80059ca:	4618      	mov	r0, r3
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	20000890 	.word	0x20000890

080059dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059e2:	4b0b      	ldr	r3, [pc, #44]	; (8005a10 <xTaskGetSchedulerState+0x34>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d102      	bne.n	80059f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059ea:	2301      	movs	r3, #1
 80059ec:	607b      	str	r3, [r7, #4]
 80059ee:	e008      	b.n	8005a02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059f0:	4b08      	ldr	r3, [pc, #32]	; (8005a14 <xTaskGetSchedulerState+0x38>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d102      	bne.n	80059fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059f8:	2302      	movs	r3, #2
 80059fa:	607b      	str	r3, [r7, #4]
 80059fc:	e001      	b.n	8005a02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059fe:	2300      	movs	r3, #0
 8005a00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a02:	687b      	ldr	r3, [r7, #4]
	}
 8005a04:	4618      	mov	r0, r3
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	20000d70 	.word	0x20000d70
 8005a14:	20000d8c 	.word	0x20000d8c

08005a18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005a24:	2300      	movs	r3, #0
 8005a26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d051      	beq.n	8005ad2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a32:	4b2a      	ldr	r3, [pc, #168]	; (8005adc <xTaskPriorityInherit+0xc4>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d241      	bcs.n	8005ac0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	db06      	blt.n	8005a52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a44:	4b25      	ldr	r3, [pc, #148]	; (8005adc <xTaskPriorityInherit+0xc4>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	6959      	ldr	r1, [r3, #20]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4a1f      	ldr	r2, [pc, #124]	; (8005ae0 <xTaskPriorityInherit+0xc8>)
 8005a64:	4413      	add	r3, r2
 8005a66:	4299      	cmp	r1, r3
 8005a68:	d122      	bne.n	8005ab0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fe fa5c 	bl	8003f2c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a74:	4b19      	ldr	r3, [pc, #100]	; (8005adc <xTaskPriorityInherit+0xc4>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a82:	4b18      	ldr	r3, [pc, #96]	; (8005ae4 <xTaskPriorityInherit+0xcc>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d903      	bls.n	8005a92 <xTaskPriorityInherit+0x7a>
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	4a15      	ldr	r2, [pc, #84]	; (8005ae4 <xTaskPriorityInherit+0xcc>)
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a96:	4613      	mov	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4a10      	ldr	r2, [pc, #64]	; (8005ae0 <xTaskPriorityInherit+0xc8>)
 8005aa0:	441a      	add	r2, r3
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	f7fe f9e2 	bl	8003e72 <vListInsertEnd>
 8005aae:	e004      	b.n	8005aba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <xTaskPriorityInherit+0xc4>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005aba:	2301      	movs	r3, #1
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	e008      	b.n	8005ad2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <xTaskPriorityInherit+0xc4>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d201      	bcs.n	8005ad2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
	}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	20000890 	.word	0x20000890
 8005ae0:	20000894 	.word	0x20000894
 8005ae4:	20000d6c 	.word	0x20000d6c

08005ae8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005af4:	2300      	movs	r3, #0
 8005af6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d056      	beq.n	8005bac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005afe:	4b2e      	ldr	r3, [pc, #184]	; (8005bb8 <xTaskPriorityDisinherit+0xd0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d00a      	beq.n	8005b1e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0c:	f383 8811 	msr	BASEPRI, r3
 8005b10:	f3bf 8f6f 	isb	sy
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	60fb      	str	r3, [r7, #12]
}
 8005b1a:	bf00      	nop
 8005b1c:	e7fe      	b.n	8005b1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10a      	bne.n	8005b3c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	60bb      	str	r3, [r7, #8]
}
 8005b38:	bf00      	nop
 8005b3a:	e7fe      	b.n	8005b3a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b40:	1e5a      	subs	r2, r3, #1
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d02c      	beq.n	8005bac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d128      	bne.n	8005bac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fe f9e4 	bl	8003f2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7c:	4b0f      	ldr	r3, [pc, #60]	; (8005bbc <xTaskPriorityDisinherit+0xd4>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d903      	bls.n	8005b8c <xTaskPriorityDisinherit+0xa4>
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	4a0c      	ldr	r2, [pc, #48]	; (8005bbc <xTaskPriorityDisinherit+0xd4>)
 8005b8a:	6013      	str	r3, [r2, #0]
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4a09      	ldr	r2, [pc, #36]	; (8005bc0 <xTaskPriorityDisinherit+0xd8>)
 8005b9a:	441a      	add	r2, r3
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	f7fe f965 	bl	8003e72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bac:	697b      	ldr	r3, [r7, #20]
	}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20000890 	.word	0x20000890
 8005bbc:	20000d6c 	.word	0x20000d6c
 8005bc0:	20000894 	.word	0x20000894

08005bc4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b088      	sub	sp, #32
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d06a      	beq.n	8005cb2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	60fb      	str	r3, [r7, #12]
}
 8005bf6:	bf00      	nop
 8005bf8:	e7fe      	b.n	8005bf8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d902      	bls.n	8005c0a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	61fb      	str	r3, [r7, #28]
 8005c08:	e002      	b.n	8005c10 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	69fa      	ldr	r2, [r7, #28]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d04b      	beq.n	8005cb2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d146      	bne.n	8005cb2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005c24:	4b25      	ldr	r3, [pc, #148]	; (8005cbc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d10a      	bne.n	8005c44 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	60bb      	str	r3, [r7, #8]
}
 8005c40:	bf00      	nop
 8005c42:	e7fe      	b.n	8005c42 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	69fa      	ldr	r2, [r7, #28]
 8005c4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	db04      	blt.n	8005c62 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	6959      	ldr	r1, [r3, #20]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4a13      	ldr	r2, [pc, #76]	; (8005cc0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005c72:	4413      	add	r3, r2
 8005c74:	4299      	cmp	r1, r3
 8005c76:	d11c      	bne.n	8005cb2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fe f955 	bl	8003f2c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c86:	4b0f      	ldr	r3, [pc, #60]	; (8005cc4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d903      	bls.n	8005c96 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c92:	4a0c      	ldr	r2, [pc, #48]	; (8005cc4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4a07      	ldr	r2, [pc, #28]	; (8005cc0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005ca4:	441a      	add	r2, r3
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	3304      	adds	r3, #4
 8005caa:	4619      	mov	r1, r3
 8005cac:	4610      	mov	r0, r2
 8005cae:	f7fe f8e0 	bl	8003e72 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cb2:	bf00      	nop
 8005cb4:	3720      	adds	r7, #32
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	20000890 	.word	0x20000890
 8005cc0:	20000894 	.word	0x20000894
 8005cc4:	20000d6c 	.word	0x20000d6c

08005cc8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005ccc:	4b07      	ldr	r3, [pc, #28]	; (8005cec <pvTaskIncrementMutexHeldCount+0x24>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d004      	beq.n	8005cde <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005cd4:	4b05      	ldr	r3, [pc, #20]	; (8005cec <pvTaskIncrementMutexHeldCount+0x24>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cda:	3201      	adds	r2, #1
 8005cdc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005cde:	4b03      	ldr	r3, [pc, #12]	; (8005cec <pvTaskIncrementMutexHeldCount+0x24>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
	}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	20000890 	.word	0x20000890

08005cf0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005cfa:	4b21      	ldr	r3, [pc, #132]	; (8005d80 <prvAddCurrentTaskToDelayedList+0x90>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d00:	4b20      	ldr	r3, [pc, #128]	; (8005d84 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3304      	adds	r3, #4
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fe f910 	bl	8003f2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d12:	d10a      	bne.n	8005d2a <prvAddCurrentTaskToDelayedList+0x3a>
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d007      	beq.n	8005d2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d1a:	4b1a      	ldr	r3, [pc, #104]	; (8005d84 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	4619      	mov	r1, r3
 8005d22:	4819      	ldr	r0, [pc, #100]	; (8005d88 <prvAddCurrentTaskToDelayedList+0x98>)
 8005d24:	f7fe f8a5 	bl	8003e72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d28:	e026      	b.n	8005d78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4413      	add	r3, r2
 8005d30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d32:	4b14      	ldr	r3, [pc, #80]	; (8005d84 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d209      	bcs.n	8005d56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d42:	4b12      	ldr	r3, [pc, #72]	; (8005d8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	4b0f      	ldr	r3, [pc, #60]	; (8005d84 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	f7fe f8b3 	bl	8003eba <vListInsert>
}
 8005d54:	e010      	b.n	8005d78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d56:	4b0e      	ldr	r3, [pc, #56]	; (8005d90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3304      	adds	r3, #4
 8005d60:	4619      	mov	r1, r3
 8005d62:	4610      	mov	r0, r2
 8005d64:	f7fe f8a9 	bl	8003eba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d68:	4b0a      	ldr	r3, [pc, #40]	; (8005d94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d202      	bcs.n	8005d78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d72:	4a08      	ldr	r2, [pc, #32]	; (8005d94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	6013      	str	r3, [r2, #0]
}
 8005d78:	bf00      	nop
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20000d68 	.word	0x20000d68
 8005d84:	20000890 	.word	0x20000890
 8005d88:	20000d50 	.word	0x20000d50
 8005d8c:	20000d20 	.word	0x20000d20
 8005d90:	20000d1c 	.word	0x20000d1c
 8005d94:	20000d84 	.word	0x20000d84

08005d98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08a      	sub	sp, #40	; 0x28
 8005d9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005da2:	f000 fb07 	bl	80063b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005da6:	4b1c      	ldr	r3, [pc, #112]	; (8005e18 <xTimerCreateTimerTask+0x80>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d021      	beq.n	8005df2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005db2:	2300      	movs	r3, #0
 8005db4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005db6:	1d3a      	adds	r2, r7, #4
 8005db8:	f107 0108 	add.w	r1, r7, #8
 8005dbc:	f107 030c 	add.w	r3, r7, #12
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fe f80f 	bl	8003de4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	9202      	str	r2, [sp, #8]
 8005dce:	9301      	str	r3, [sp, #4]
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	460a      	mov	r2, r1
 8005dd8:	4910      	ldr	r1, [pc, #64]	; (8005e1c <xTimerCreateTimerTask+0x84>)
 8005dda:	4811      	ldr	r0, [pc, #68]	; (8005e20 <xTimerCreateTimerTask+0x88>)
 8005ddc:	f7fe ffd0 	bl	8004d80 <xTaskCreateStatic>
 8005de0:	4603      	mov	r3, r0
 8005de2:	4a10      	ldr	r2, [pc, #64]	; (8005e24 <xTimerCreateTimerTask+0x8c>)
 8005de4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005de6:	4b0f      	ldr	r3, [pc, #60]	; (8005e24 <xTimerCreateTimerTask+0x8c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005dee:	2301      	movs	r3, #1
 8005df0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10a      	bne.n	8005e0e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	613b      	str	r3, [r7, #16]
}
 8005e0a:	bf00      	nop
 8005e0c:	e7fe      	b.n	8005e0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005e0e:	697b      	ldr	r3, [r7, #20]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3718      	adds	r7, #24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	20000dc0 	.word	0x20000dc0
 8005e1c:	08007cc8 	.word	0x08007cc8
 8005e20:	08005f5d 	.word	0x08005f5d
 8005e24:	20000dc4 	.word	0x20000dc4

08005e28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	; 0x28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10a      	bne.n	8005e56 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	623b      	str	r3, [r7, #32]
}
 8005e52:	bf00      	nop
 8005e54:	e7fe      	b.n	8005e54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e56:	4b1a      	ldr	r3, [pc, #104]	; (8005ec0 <xTimerGenericCommand+0x98>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d02a      	beq.n	8005eb4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b05      	cmp	r3, #5
 8005e6e:	dc18      	bgt.n	8005ea2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e70:	f7ff fdb4 	bl	80059dc <xTaskGetSchedulerState>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d109      	bne.n	8005e8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e7a:	4b11      	ldr	r3, [pc, #68]	; (8005ec0 <xTimerGenericCommand+0x98>)
 8005e7c:	6818      	ldr	r0, [r3, #0]
 8005e7e:	f107 0110 	add.w	r1, r7, #16
 8005e82:	2300      	movs	r3, #0
 8005e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e86:	f7fe fa6f 	bl	8004368 <xQueueGenericSend>
 8005e8a:	6278      	str	r0, [r7, #36]	; 0x24
 8005e8c:	e012      	b.n	8005eb4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e8e:	4b0c      	ldr	r3, [pc, #48]	; (8005ec0 <xTimerGenericCommand+0x98>)
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	f107 0110 	add.w	r1, r7, #16
 8005e96:	2300      	movs	r3, #0
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f7fe fa65 	bl	8004368 <xQueueGenericSend>
 8005e9e:	6278      	str	r0, [r7, #36]	; 0x24
 8005ea0:	e008      	b.n	8005eb4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ea2:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <xTimerGenericCommand+0x98>)
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	f107 0110 	add.w	r1, r7, #16
 8005eaa:	2300      	movs	r3, #0
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	f7fe fb59 	bl	8004564 <xQueueGenericSendFromISR>
 8005eb2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3728      	adds	r7, #40	; 0x28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000dc0 	.word	0x20000dc0

08005ec4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b088      	sub	sp, #32
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ece:	4b22      	ldr	r3, [pc, #136]	; (8005f58 <prvProcessExpiredTimer+0x94>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	3304      	adds	r3, #4
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fe f825 	bl	8003f2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d022      	beq.n	8005f36 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	699a      	ldr	r2, [r3, #24]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	18d1      	adds	r1, r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	6978      	ldr	r0, [r7, #20]
 8005efe:	f000 f8d1 	bl	80060a4 <prvInsertTimerInActiveList>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01f      	beq.n	8005f48 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f08:	2300      	movs	r3, #0
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	2100      	movs	r1, #0
 8005f12:	6978      	ldr	r0, [r7, #20]
 8005f14:	f7ff ff88 	bl	8005e28 <xTimerGenericCommand>
 8005f18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d113      	bne.n	8005f48 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	60fb      	str	r3, [r7, #12]
}
 8005f32:	bf00      	nop
 8005f34:	e7fe      	b.n	8005f34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f3c:	f023 0301 	bic.w	r3, r3, #1
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	6978      	ldr	r0, [r7, #20]
 8005f4e:	4798      	blx	r3
}
 8005f50:	bf00      	nop
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	20000db8 	.word	0x20000db8

08005f5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f64:	f107 0308 	add.w	r3, r7, #8
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 f857 	bl	800601c <prvGetNextExpireTime>
 8005f6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4619      	mov	r1, r3
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f803 	bl	8005f80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f7a:	f000 f8d5 	bl	8006128 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f7e:	e7f1      	b.n	8005f64 <prvTimerTask+0x8>

08005f80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005f8a:	f7ff f935 	bl	80051f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f8e:	f107 0308 	add.w	r3, r7, #8
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 f866 	bl	8006064 <prvSampleTimeNow>
 8005f98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d130      	bne.n	8006002 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10a      	bne.n	8005fbc <prvProcessTimerOrBlockTask+0x3c>
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d806      	bhi.n	8005fbc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005fae:	f7ff f931 	bl	8005214 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005fb2:	68f9      	ldr	r1, [r7, #12]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff ff85 	bl	8005ec4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005fba:	e024      	b.n	8006006 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d008      	beq.n	8005fd4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005fc2:	4b13      	ldr	r3, [pc, #76]	; (8006010 <prvProcessTimerOrBlockTask+0x90>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <prvProcessTimerOrBlockTask+0x50>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e000      	b.n	8005fd2 <prvProcessTimerOrBlockTask+0x52>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005fd4:	4b0f      	ldr	r3, [pc, #60]	; (8006014 <prvProcessTimerOrBlockTask+0x94>)
 8005fd6:	6818      	ldr	r0, [r3, #0]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	f7fe fe99 	bl	8004d18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005fe6:	f7ff f915 	bl	8005214 <xTaskResumeAll>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10a      	bne.n	8006006 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ff0:	4b09      	ldr	r3, [pc, #36]	; (8006018 <prvProcessTimerOrBlockTask+0x98>)
 8005ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	f3bf 8f6f 	isb	sy
}
 8006000:	e001      	b.n	8006006 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006002:	f7ff f907 	bl	8005214 <xTaskResumeAll>
}
 8006006:	bf00      	nop
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	20000dbc 	.word	0x20000dbc
 8006014:	20000dc0 	.word	0x20000dc0
 8006018:	e000ed04 	.word	0xe000ed04

0800601c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006024:	4b0e      	ldr	r3, [pc, #56]	; (8006060 <prvGetNextExpireTime+0x44>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <prvGetNextExpireTime+0x16>
 800602e:	2201      	movs	r2, #1
 8006030:	e000      	b.n	8006034 <prvGetNextExpireTime+0x18>
 8006032:	2200      	movs	r2, #0
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d105      	bne.n	800604c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006040:	4b07      	ldr	r3, [pc, #28]	; (8006060 <prvGetNextExpireTime+0x44>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	e001      	b.n	8006050 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006050:	68fb      	ldr	r3, [r7, #12]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	20000db8 	.word	0x20000db8

08006064 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800606c:	f7ff f970 	bl	8005350 <xTaskGetTickCount>
 8006070:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006072:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <prvSampleTimeNow+0x3c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	429a      	cmp	r2, r3
 800607a:	d205      	bcs.n	8006088 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800607c:	f000 f936 	bl	80062ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	e002      	b.n	800608e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800608e:	4a04      	ldr	r2, [pc, #16]	; (80060a0 <prvSampleTimeNow+0x3c>)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006094:	68fb      	ldr	r3, [r7, #12]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20000dc8 	.word	0x20000dc8

080060a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d812      	bhi.n	80060f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	1ad2      	subs	r2, r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d302      	bcc.n	80060de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80060d8:	2301      	movs	r3, #1
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	e01b      	b.n	8006116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80060de:	4b10      	ldr	r3, [pc, #64]	; (8006120 <prvInsertTimerInActiveList+0x7c>)
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3304      	adds	r3, #4
 80060e6:	4619      	mov	r1, r3
 80060e8:	4610      	mov	r0, r2
 80060ea:	f7fd fee6 	bl	8003eba <vListInsert>
 80060ee:	e012      	b.n	8006116 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d206      	bcs.n	8006106 <prvInsertTimerInActiveList+0x62>
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d302      	bcc.n	8006106 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006100:	2301      	movs	r3, #1
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	e007      	b.n	8006116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006106:	4b07      	ldr	r3, [pc, #28]	; (8006124 <prvInsertTimerInActiveList+0x80>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3304      	adds	r3, #4
 800610e:	4619      	mov	r1, r3
 8006110:	4610      	mov	r0, r2
 8006112:	f7fd fed2 	bl	8003eba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006116:	697b      	ldr	r3, [r7, #20]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	20000dbc 	.word	0x20000dbc
 8006124:	20000db8 	.word	0x20000db8

08006128 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b08e      	sub	sp, #56	; 0x38
 800612c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800612e:	e0ca      	b.n	80062c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	da18      	bge.n	8006168 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006136:	1d3b      	adds	r3, r7, #4
 8006138:	3304      	adds	r3, #4
 800613a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10a      	bne.n	8006158 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	61fb      	str	r3, [r7, #28]
}
 8006154:	bf00      	nop
 8006156:	e7fe      	b.n	8006156 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800615e:	6850      	ldr	r0, [r2, #4]
 8006160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006162:	6892      	ldr	r2, [r2, #8]
 8006164:	4611      	mov	r1, r2
 8006166:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	f2c0 80aa 	blt.w	80062c4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d004      	beq.n	8006186 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	3304      	adds	r3, #4
 8006180:	4618      	mov	r0, r3
 8006182:	f7fd fed3 	bl	8003f2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006186:	463b      	mov	r3, r7
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff ff6b 	bl	8006064 <prvSampleTimeNow>
 800618e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b09      	cmp	r3, #9
 8006194:	f200 8097 	bhi.w	80062c6 <prvProcessReceivedCommands+0x19e>
 8006198:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <prvProcessReceivedCommands+0x78>)
 800619a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619e:	bf00      	nop
 80061a0:	080061c9 	.word	0x080061c9
 80061a4:	080061c9 	.word	0x080061c9
 80061a8:	080061c9 	.word	0x080061c9
 80061ac:	0800623d 	.word	0x0800623d
 80061b0:	08006251 	.word	0x08006251
 80061b4:	0800629b 	.word	0x0800629b
 80061b8:	080061c9 	.word	0x080061c9
 80061bc:	080061c9 	.word	0x080061c9
 80061c0:	0800623d 	.word	0x0800623d
 80061c4:	08006251 	.word	0x08006251
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061ce:	f043 0301 	orr.w	r3, r3, #1
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	18d1      	adds	r1, r2, r3
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061e8:	f7ff ff5c 	bl	80060a4 <prvInsertTimerInActiveList>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d069      	beq.n	80062c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d05e      	beq.n	80062c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	441a      	add	r2, r3
 8006210:	2300      	movs	r3, #0
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	2300      	movs	r3, #0
 8006216:	2100      	movs	r1, #0
 8006218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800621a:	f7ff fe05 	bl	8005e28 <xTimerGenericCommand>
 800621e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d14f      	bne.n	80062c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	61bb      	str	r3, [r7, #24]
}
 8006238:	bf00      	nop
 800623a:	e7fe      	b.n	800623a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006242:	f023 0301 	bic.w	r3, r3, #1
 8006246:	b2da      	uxtb	r2, r3
 8006248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800624e:	e03a      	b.n	80062c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006256:	f043 0301 	orr.w	r3, r3, #1
 800625a:	b2da      	uxtb	r2, r3
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006266:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10a      	bne.n	8006286 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	617b      	str	r3, [r7, #20]
}
 8006282:	bf00      	nop
 8006284:	e7fe      	b.n	8006284 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006288:	699a      	ldr	r2, [r3, #24]
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	18d1      	adds	r1, r2, r3
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006294:	f7ff ff06 	bl	80060a4 <prvInsertTimerInActiveList>
					break;
 8006298:	e015      	b.n	80062c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062a0:	f003 0302 	and.w	r3, r3, #2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d103      	bne.n	80062b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80062a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062aa:	f000 fbe1 	bl	8006a70 <vPortFree>
 80062ae:	e00a      	b.n	80062c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062b6:	f023 0301 	bic.w	r3, r3, #1
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80062c2:	e000      	b.n	80062c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80062c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062c6:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <prvProcessReceivedCommands+0x1c0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	1d39      	adds	r1, r7, #4
 80062cc:	2200      	movs	r2, #0
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fe f9e4 	bl	800469c <xQueueReceive>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f47f af2a 	bne.w	8006130 <prvProcessReceivedCommands+0x8>
	}
}
 80062dc:	bf00      	nop
 80062de:	bf00      	nop
 80062e0:	3730      	adds	r7, #48	; 0x30
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20000dc0 	.word	0x20000dc0

080062ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062f2:	e048      	b.n	8006386 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062f4:	4b2d      	ldr	r3, [pc, #180]	; (80063ac <prvSwitchTimerLists+0xc0>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062fe:	4b2b      	ldr	r3, [pc, #172]	; (80063ac <prvSwitchTimerLists+0xc0>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	3304      	adds	r3, #4
 800630c:	4618      	mov	r0, r3
 800630e:	f7fd fe0d 	bl	8003f2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006320:	f003 0304 	and.w	r3, r3, #4
 8006324:	2b00      	cmp	r3, #0
 8006326:	d02e      	beq.n	8006386 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4413      	add	r3, r2
 8006330:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	429a      	cmp	r2, r3
 8006338:	d90e      	bls.n	8006358 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006346:	4b19      	ldr	r3, [pc, #100]	; (80063ac <prvSwitchTimerLists+0xc0>)
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3304      	adds	r3, #4
 800634e:	4619      	mov	r1, r3
 8006350:	4610      	mov	r0, r2
 8006352:	f7fd fdb2 	bl	8003eba <vListInsert>
 8006356:	e016      	b.n	8006386 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006358:	2300      	movs	r3, #0
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	2300      	movs	r3, #0
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	2100      	movs	r1, #0
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f7ff fd60 	bl	8005e28 <xTimerGenericCommand>
 8006368:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10a      	bne.n	8006386 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	603b      	str	r3, [r7, #0]
}
 8006382:	bf00      	nop
 8006384:	e7fe      	b.n	8006384 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006386:	4b09      	ldr	r3, [pc, #36]	; (80063ac <prvSwitchTimerLists+0xc0>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1b1      	bne.n	80062f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006390:	4b06      	ldr	r3, [pc, #24]	; (80063ac <prvSwitchTimerLists+0xc0>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006396:	4b06      	ldr	r3, [pc, #24]	; (80063b0 <prvSwitchTimerLists+0xc4>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a04      	ldr	r2, [pc, #16]	; (80063ac <prvSwitchTimerLists+0xc0>)
 800639c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800639e:	4a04      	ldr	r2, [pc, #16]	; (80063b0 <prvSwitchTimerLists+0xc4>)
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	6013      	str	r3, [r2, #0]
}
 80063a4:	bf00      	nop
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20000db8 	.word	0x20000db8
 80063b0:	20000dbc 	.word	0x20000dbc

080063b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80063ba:	f000 f96b 	bl	8006694 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80063be:	4b15      	ldr	r3, [pc, #84]	; (8006414 <prvCheckForValidListAndQueue+0x60>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d120      	bne.n	8006408 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80063c6:	4814      	ldr	r0, [pc, #80]	; (8006418 <prvCheckForValidListAndQueue+0x64>)
 80063c8:	f7fd fd26 	bl	8003e18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80063cc:	4813      	ldr	r0, [pc, #76]	; (800641c <prvCheckForValidListAndQueue+0x68>)
 80063ce:	f7fd fd23 	bl	8003e18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80063d2:	4b13      	ldr	r3, [pc, #76]	; (8006420 <prvCheckForValidListAndQueue+0x6c>)
 80063d4:	4a10      	ldr	r2, [pc, #64]	; (8006418 <prvCheckForValidListAndQueue+0x64>)
 80063d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80063d8:	4b12      	ldr	r3, [pc, #72]	; (8006424 <prvCheckForValidListAndQueue+0x70>)
 80063da:	4a10      	ldr	r2, [pc, #64]	; (800641c <prvCheckForValidListAndQueue+0x68>)
 80063dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80063de:	2300      	movs	r3, #0
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	4b11      	ldr	r3, [pc, #68]	; (8006428 <prvCheckForValidListAndQueue+0x74>)
 80063e4:	4a11      	ldr	r2, [pc, #68]	; (800642c <prvCheckForValidListAndQueue+0x78>)
 80063e6:	2110      	movs	r1, #16
 80063e8:	200a      	movs	r0, #10
 80063ea:	f7fd fe31 	bl	8004050 <xQueueGenericCreateStatic>
 80063ee:	4603      	mov	r3, r0
 80063f0:	4a08      	ldr	r2, [pc, #32]	; (8006414 <prvCheckForValidListAndQueue+0x60>)
 80063f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80063f4:	4b07      	ldr	r3, [pc, #28]	; (8006414 <prvCheckForValidListAndQueue+0x60>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d005      	beq.n	8006408 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80063fc:	4b05      	ldr	r3, [pc, #20]	; (8006414 <prvCheckForValidListAndQueue+0x60>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	490b      	ldr	r1, [pc, #44]	; (8006430 <prvCheckForValidListAndQueue+0x7c>)
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe fc5e 	bl	8004cc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006408:	f000 f974 	bl	80066f4 <vPortExitCritical>
}
 800640c:	bf00      	nop
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	20000dc0 	.word	0x20000dc0
 8006418:	20000d90 	.word	0x20000d90
 800641c:	20000da4 	.word	0x20000da4
 8006420:	20000db8 	.word	0x20000db8
 8006424:	20000dbc 	.word	0x20000dbc
 8006428:	20000e6c 	.word	0x20000e6c
 800642c:	20000dcc 	.word	0x20000dcc
 8006430:	08007cd0 	.word	0x08007cd0

08006434 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3b04      	subs	r3, #4
 8006444:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800644c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3b04      	subs	r3, #4
 8006452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f023 0201 	bic.w	r2, r3, #1
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3b04      	subs	r3, #4
 8006462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006464:	4a0c      	ldr	r2, [pc, #48]	; (8006498 <pxPortInitialiseStack+0x64>)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3b14      	subs	r3, #20
 800646e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	3b04      	subs	r3, #4
 800647a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f06f 0202 	mvn.w	r2, #2
 8006482:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	3b20      	subs	r3, #32
 8006488:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800648a:	68fb      	ldr	r3, [r7, #12]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	0800649d 	.word	0x0800649d

0800649c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064a6:	4b12      	ldr	r3, [pc, #72]	; (80064f0 <prvTaskExitError+0x54>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ae:	d00a      	beq.n	80064c6 <prvTaskExitError+0x2a>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	60fb      	str	r3, [r7, #12]
}
 80064c2:	bf00      	nop
 80064c4:	e7fe      	b.n	80064c4 <prvTaskExitError+0x28>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	60bb      	str	r3, [r7, #8]
}
 80064d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064da:	bf00      	nop
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0fc      	beq.n	80064dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064e2:	bf00      	nop
 80064e4:	bf00      	nop
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	2000000c 	.word	0x2000000c
	...

08006500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006500:	4b07      	ldr	r3, [pc, #28]	; (8006520 <pxCurrentTCBConst2>)
 8006502:	6819      	ldr	r1, [r3, #0]
 8006504:	6808      	ldr	r0, [r1, #0]
 8006506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650a:	f380 8809 	msr	PSP, r0
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f04f 0000 	mov.w	r0, #0
 8006516:	f380 8811 	msr	BASEPRI, r0
 800651a:	4770      	bx	lr
 800651c:	f3af 8000 	nop.w

08006520 <pxCurrentTCBConst2>:
 8006520:	20000890 	.word	0x20000890
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop

08006528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006528:	4808      	ldr	r0, [pc, #32]	; (800654c <prvPortStartFirstTask+0x24>)
 800652a:	6800      	ldr	r0, [r0, #0]
 800652c:	6800      	ldr	r0, [r0, #0]
 800652e:	f380 8808 	msr	MSP, r0
 8006532:	f04f 0000 	mov.w	r0, #0
 8006536:	f380 8814 	msr	CONTROL, r0
 800653a:	b662      	cpsie	i
 800653c:	b661      	cpsie	f
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	df00      	svc	0
 8006548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800654a:	bf00      	nop
 800654c:	e000ed08 	.word	0xe000ed08

08006550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006556:	4b46      	ldr	r3, [pc, #280]	; (8006670 <xPortStartScheduler+0x120>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a46      	ldr	r2, [pc, #280]	; (8006674 <xPortStartScheduler+0x124>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d10a      	bne.n	8006576 <xPortStartScheduler+0x26>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	613b      	str	r3, [r7, #16]
}
 8006572:	bf00      	nop
 8006574:	e7fe      	b.n	8006574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006576:	4b3e      	ldr	r3, [pc, #248]	; (8006670 <xPortStartScheduler+0x120>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a3f      	ldr	r2, [pc, #252]	; (8006678 <xPortStartScheduler+0x128>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d10a      	bne.n	8006596 <xPortStartScheduler+0x46>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	60fb      	str	r3, [r7, #12]
}
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006596:	4b39      	ldr	r3, [pc, #228]	; (800667c <xPortStartScheduler+0x12c>)
 8006598:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	22ff      	movs	r2, #255	; 0xff
 80065a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	4b31      	ldr	r3, [pc, #196]	; (8006680 <xPortStartScheduler+0x130>)
 80065bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065be:	4b31      	ldr	r3, [pc, #196]	; (8006684 <xPortStartScheduler+0x134>)
 80065c0:	2207      	movs	r2, #7
 80065c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065c4:	e009      	b.n	80065da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80065c6:	4b2f      	ldr	r3, [pc, #188]	; (8006684 <xPortStartScheduler+0x134>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3b01      	subs	r3, #1
 80065cc:	4a2d      	ldr	r2, [pc, #180]	; (8006684 <xPortStartScheduler+0x134>)
 80065ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065da:	78fb      	ldrb	r3, [r7, #3]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e2:	2b80      	cmp	r3, #128	; 0x80
 80065e4:	d0ef      	beq.n	80065c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80065e6:	4b27      	ldr	r3, [pc, #156]	; (8006684 <xPortStartScheduler+0x134>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f1c3 0307 	rsb	r3, r3, #7
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d00a      	beq.n	8006608 <xPortStartScheduler+0xb8>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	60bb      	str	r3, [r7, #8]
}
 8006604:	bf00      	nop
 8006606:	e7fe      	b.n	8006606 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006608:	4b1e      	ldr	r3, [pc, #120]	; (8006684 <xPortStartScheduler+0x134>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	021b      	lsls	r3, r3, #8
 800660e:	4a1d      	ldr	r2, [pc, #116]	; (8006684 <xPortStartScheduler+0x134>)
 8006610:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006612:	4b1c      	ldr	r3, [pc, #112]	; (8006684 <xPortStartScheduler+0x134>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800661a:	4a1a      	ldr	r2, [pc, #104]	; (8006684 <xPortStartScheduler+0x134>)
 800661c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	b2da      	uxtb	r2, r3
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006626:	4b18      	ldr	r3, [pc, #96]	; (8006688 <xPortStartScheduler+0x138>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a17      	ldr	r2, [pc, #92]	; (8006688 <xPortStartScheduler+0x138>)
 800662c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006630:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006632:	4b15      	ldr	r3, [pc, #84]	; (8006688 <xPortStartScheduler+0x138>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a14      	ldr	r2, [pc, #80]	; (8006688 <xPortStartScheduler+0x138>)
 8006638:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800663c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800663e:	f000 f8dd 	bl	80067fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006642:	4b12      	ldr	r3, [pc, #72]	; (800668c <xPortStartScheduler+0x13c>)
 8006644:	2200      	movs	r2, #0
 8006646:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006648:	f000 f8fc 	bl	8006844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800664c:	4b10      	ldr	r3, [pc, #64]	; (8006690 <xPortStartScheduler+0x140>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a0f      	ldr	r2, [pc, #60]	; (8006690 <xPortStartScheduler+0x140>)
 8006652:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006656:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006658:	f7ff ff66 	bl	8006528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800665c:	f7fe ff42 	bl	80054e4 <vTaskSwitchContext>
	prvTaskExitError();
 8006660:	f7ff ff1c 	bl	800649c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	e000ed00 	.word	0xe000ed00
 8006674:	410fc271 	.word	0x410fc271
 8006678:	410fc270 	.word	0x410fc270
 800667c:	e000e400 	.word	0xe000e400
 8006680:	20000ebc 	.word	0x20000ebc
 8006684:	20000ec0 	.word	0x20000ec0
 8006688:	e000ed20 	.word	0xe000ed20
 800668c:	2000000c 	.word	0x2000000c
 8006690:	e000ef34 	.word	0xe000ef34

08006694 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	607b      	str	r3, [r7, #4]
}
 80066ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066ae:	4b0f      	ldr	r3, [pc, #60]	; (80066ec <vPortEnterCritical+0x58>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3301      	adds	r3, #1
 80066b4:	4a0d      	ldr	r2, [pc, #52]	; (80066ec <vPortEnterCritical+0x58>)
 80066b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066b8:	4b0c      	ldr	r3, [pc, #48]	; (80066ec <vPortEnterCritical+0x58>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d10f      	bne.n	80066e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066c0:	4b0b      	ldr	r3, [pc, #44]	; (80066f0 <vPortEnterCritical+0x5c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	603b      	str	r3, [r7, #0]
}
 80066dc:	bf00      	nop
 80066de:	e7fe      	b.n	80066de <vPortEnterCritical+0x4a>
	}
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	2000000c 	.word	0x2000000c
 80066f0:	e000ed04 	.word	0xe000ed04

080066f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066fa:	4b12      	ldr	r3, [pc, #72]	; (8006744 <vPortExitCritical+0x50>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10a      	bne.n	8006718 <vPortExitCritical+0x24>
	__asm volatile
 8006702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	607b      	str	r3, [r7, #4]
}
 8006714:	bf00      	nop
 8006716:	e7fe      	b.n	8006716 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006718:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <vPortExitCritical+0x50>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3b01      	subs	r3, #1
 800671e:	4a09      	ldr	r2, [pc, #36]	; (8006744 <vPortExitCritical+0x50>)
 8006720:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006722:	4b08      	ldr	r3, [pc, #32]	; (8006744 <vPortExitCritical+0x50>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d105      	bne.n	8006736 <vPortExitCritical+0x42>
 800672a:	2300      	movs	r3, #0
 800672c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	f383 8811 	msr	BASEPRI, r3
}
 8006734:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	2000000c 	.word	0x2000000c
	...

08006750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006750:	f3ef 8009 	mrs	r0, PSP
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	4b15      	ldr	r3, [pc, #84]	; (80067b0 <pxCurrentTCBConst>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	f01e 0f10 	tst.w	lr, #16
 8006760:	bf08      	it	eq
 8006762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676a:	6010      	str	r0, [r2, #0]
 800676c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006774:	f380 8811 	msr	BASEPRI, r0
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f7fe feb0 	bl	80054e4 <vTaskSwitchContext>
 8006784:	f04f 0000 	mov.w	r0, #0
 8006788:	f380 8811 	msr	BASEPRI, r0
 800678c:	bc09      	pop	{r0, r3}
 800678e:	6819      	ldr	r1, [r3, #0]
 8006790:	6808      	ldr	r0, [r1, #0]
 8006792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006796:	f01e 0f10 	tst.w	lr, #16
 800679a:	bf08      	it	eq
 800679c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067a0:	f380 8809 	msr	PSP, r0
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	f3af 8000 	nop.w

080067b0 <pxCurrentTCBConst>:
 80067b0:	20000890 	.word	0x20000890
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop

080067b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	607b      	str	r3, [r7, #4]
}
 80067d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067d2:	f7fe fdcd 	bl	8005370 <xTaskIncrementTick>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067dc:	4b06      	ldr	r3, [pc, #24]	; (80067f8 <xPortSysTickHandler+0x40>)
 80067de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	2300      	movs	r3, #0
 80067e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	f383 8811 	msr	BASEPRI, r3
}
 80067ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80067f0:	bf00      	nop
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	e000ed04 	.word	0xe000ed04

080067fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80067fc:	b480      	push	{r7}
 80067fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006800:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <vPortSetupTimerInterrupt+0x34>)
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006806:	4b0b      	ldr	r3, [pc, #44]	; (8006834 <vPortSetupTimerInterrupt+0x38>)
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800680c:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <vPortSetupTimerInterrupt+0x3c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a0a      	ldr	r2, [pc, #40]	; (800683c <vPortSetupTimerInterrupt+0x40>)
 8006812:	fba2 2303 	umull	r2, r3, r2, r3
 8006816:	099b      	lsrs	r3, r3, #6
 8006818:	4a09      	ldr	r2, [pc, #36]	; (8006840 <vPortSetupTimerInterrupt+0x44>)
 800681a:	3b01      	subs	r3, #1
 800681c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800681e:	4b04      	ldr	r3, [pc, #16]	; (8006830 <vPortSetupTimerInterrupt+0x34>)
 8006820:	2207      	movs	r2, #7
 8006822:	601a      	str	r2, [r3, #0]
}
 8006824:	bf00      	nop
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	e000e010 	.word	0xe000e010
 8006834:	e000e018 	.word	0xe000e018
 8006838:	20000000 	.word	0x20000000
 800683c:	10624dd3 	.word	0x10624dd3
 8006840:	e000e014 	.word	0xe000e014

08006844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006844:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006854 <vPortEnableVFP+0x10>
 8006848:	6801      	ldr	r1, [r0, #0]
 800684a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800684e:	6001      	str	r1, [r0, #0]
 8006850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006852:	bf00      	nop
 8006854:	e000ed88 	.word	0xe000ed88

08006858 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800685e:	f3ef 8305 	mrs	r3, IPSR
 8006862:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b0f      	cmp	r3, #15
 8006868:	d914      	bls.n	8006894 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800686a:	4a17      	ldr	r2, [pc, #92]	; (80068c8 <vPortValidateInterruptPriority+0x70>)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4413      	add	r3, r2
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006874:	4b15      	ldr	r3, [pc, #84]	; (80068cc <vPortValidateInterruptPriority+0x74>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	7afa      	ldrb	r2, [r7, #11]
 800687a:	429a      	cmp	r2, r3
 800687c:	d20a      	bcs.n	8006894 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	607b      	str	r3, [r7, #4]
}
 8006890:	bf00      	nop
 8006892:	e7fe      	b.n	8006892 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006894:	4b0e      	ldr	r3, [pc, #56]	; (80068d0 <vPortValidateInterruptPriority+0x78>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800689c:	4b0d      	ldr	r3, [pc, #52]	; (80068d4 <vPortValidateInterruptPriority+0x7c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d90a      	bls.n	80068ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	603b      	str	r3, [r7, #0]
}
 80068b6:	bf00      	nop
 80068b8:	e7fe      	b.n	80068b8 <vPortValidateInterruptPriority+0x60>
	}
 80068ba:	bf00      	nop
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	e000e3f0 	.word	0xe000e3f0
 80068cc:	20000ebc 	.word	0x20000ebc
 80068d0:	e000ed0c 	.word	0xe000ed0c
 80068d4:	20000ec0 	.word	0x20000ec0

080068d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08a      	sub	sp, #40	; 0x28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80068e0:	2300      	movs	r3, #0
 80068e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80068e4:	f7fe fc88 	bl	80051f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80068e8:	4b5b      	ldr	r3, [pc, #364]	; (8006a58 <pvPortMalloc+0x180>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80068f0:	f000 f920 	bl	8006b34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80068f4:	4b59      	ldr	r3, [pc, #356]	; (8006a5c <pvPortMalloc+0x184>)
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4013      	ands	r3, r2
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f040 8093 	bne.w	8006a28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d01d      	beq.n	8006944 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006908:	2208      	movs	r2, #8
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4413      	add	r3, r2
 800690e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	2b00      	cmp	r3, #0
 8006918:	d014      	beq.n	8006944 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f023 0307 	bic.w	r3, r3, #7
 8006920:	3308      	adds	r3, #8
 8006922:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <pvPortMalloc+0x6c>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	617b      	str	r3, [r7, #20]
}
 8006940:	bf00      	nop
 8006942:	e7fe      	b.n	8006942 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d06e      	beq.n	8006a28 <pvPortMalloc+0x150>
 800694a:	4b45      	ldr	r3, [pc, #276]	; (8006a60 <pvPortMalloc+0x188>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	429a      	cmp	r2, r3
 8006952:	d869      	bhi.n	8006a28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006954:	4b43      	ldr	r3, [pc, #268]	; (8006a64 <pvPortMalloc+0x18c>)
 8006956:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006958:	4b42      	ldr	r3, [pc, #264]	; (8006a64 <pvPortMalloc+0x18c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800695e:	e004      	b.n	800696a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	429a      	cmp	r2, r3
 8006972:	d903      	bls.n	800697c <pvPortMalloc+0xa4>
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1f1      	bne.n	8006960 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800697c:	4b36      	ldr	r3, [pc, #216]	; (8006a58 <pvPortMalloc+0x180>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006982:	429a      	cmp	r2, r3
 8006984:	d050      	beq.n	8006a28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2208      	movs	r2, #8
 800698c:	4413      	add	r3, r2
 800698e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	1ad2      	subs	r2, r2, r3
 80069a0:	2308      	movs	r3, #8
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d91f      	bls.n	80069e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4413      	add	r3, r2
 80069ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <pvPortMalloc+0xf8>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	613b      	str	r3, [r7, #16]
}
 80069cc:	bf00      	nop
 80069ce:	e7fe      	b.n	80069ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	1ad2      	subs	r2, r2, r3
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069e2:	69b8      	ldr	r0, [r7, #24]
 80069e4:	f000 f908 	bl	8006bf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069e8:	4b1d      	ldr	r3, [pc, #116]	; (8006a60 <pvPortMalloc+0x188>)
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	4a1b      	ldr	r2, [pc, #108]	; (8006a60 <pvPortMalloc+0x188>)
 80069f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80069f6:	4b1a      	ldr	r3, [pc, #104]	; (8006a60 <pvPortMalloc+0x188>)
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	4b1b      	ldr	r3, [pc, #108]	; (8006a68 <pvPortMalloc+0x190>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d203      	bcs.n	8006a0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a02:	4b17      	ldr	r3, [pc, #92]	; (8006a60 <pvPortMalloc+0x188>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a18      	ldr	r2, [pc, #96]	; (8006a68 <pvPortMalloc+0x190>)
 8006a08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	4b13      	ldr	r3, [pc, #76]	; (8006a5c <pvPortMalloc+0x184>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	431a      	orrs	r2, r3
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006a1e:	4b13      	ldr	r3, [pc, #76]	; (8006a6c <pvPortMalloc+0x194>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3301      	adds	r3, #1
 8006a24:	4a11      	ldr	r2, [pc, #68]	; (8006a6c <pvPortMalloc+0x194>)
 8006a26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a28:	f7fe fbf4 	bl	8005214 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <pvPortMalloc+0x174>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	60fb      	str	r3, [r7, #12]
}
 8006a48:	bf00      	nop
 8006a4a:	e7fe      	b.n	8006a4a <pvPortMalloc+0x172>
	return pvReturn;
 8006a4c:	69fb      	ldr	r3, [r7, #28]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3728      	adds	r7, #40	; 0x28
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20002254 	.word	0x20002254
 8006a5c:	20002268 	.word	0x20002268
 8006a60:	20002258 	.word	0x20002258
 8006a64:	2000224c 	.word	0x2000224c
 8006a68:	2000225c 	.word	0x2000225c
 8006a6c:	20002260 	.word	0x20002260

08006a70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d04d      	beq.n	8006b1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a82:	2308      	movs	r3, #8
 8006a84:	425b      	negs	r3, r3
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4413      	add	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	4b24      	ldr	r3, [pc, #144]	; (8006b28 <vPortFree+0xb8>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4013      	ands	r3, r2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10a      	bne.n	8006ab4 <vPortFree+0x44>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	60fb      	str	r3, [r7, #12]
}
 8006ab0:	bf00      	nop
 8006ab2:	e7fe      	b.n	8006ab2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00a      	beq.n	8006ad2 <vPortFree+0x62>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	60bb      	str	r3, [r7, #8]
}
 8006ace:	bf00      	nop
 8006ad0:	e7fe      	b.n	8006ad0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	4b14      	ldr	r3, [pc, #80]	; (8006b28 <vPortFree+0xb8>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4013      	ands	r3, r2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d01e      	beq.n	8006b1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d11a      	bne.n	8006b1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	4b0e      	ldr	r3, [pc, #56]	; (8006b28 <vPortFree+0xb8>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	43db      	mvns	r3, r3
 8006af2:	401a      	ands	r2, r3
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006af8:	f7fe fb7e 	bl	80051f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <vPortFree+0xbc>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4413      	add	r3, r2
 8006b06:	4a09      	ldr	r2, [pc, #36]	; (8006b2c <vPortFree+0xbc>)
 8006b08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b0a:	6938      	ldr	r0, [r7, #16]
 8006b0c:	f000 f874 	bl	8006bf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006b10:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <vPortFree+0xc0>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3301      	adds	r3, #1
 8006b16:	4a06      	ldr	r2, [pc, #24]	; (8006b30 <vPortFree+0xc0>)
 8006b18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006b1a:	f7fe fb7b 	bl	8005214 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b1e:	bf00      	nop
 8006b20:	3718      	adds	r7, #24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20002268 	.word	0x20002268
 8006b2c:	20002258 	.word	0x20002258
 8006b30:	20002264 	.word	0x20002264

08006b34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8006b3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b40:	4b27      	ldr	r3, [pc, #156]	; (8006be0 <prvHeapInit+0xac>)
 8006b42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00c      	beq.n	8006b68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3307      	adds	r3, #7
 8006b52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0307 	bic.w	r3, r3, #7
 8006b5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	4a1f      	ldr	r2, [pc, #124]	; (8006be0 <prvHeapInit+0xac>)
 8006b64:	4413      	add	r3, r2
 8006b66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b6c:	4a1d      	ldr	r2, [pc, #116]	; (8006be4 <prvHeapInit+0xb0>)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b72:	4b1c      	ldr	r3, [pc, #112]	; (8006be4 <prvHeapInit+0xb0>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b80:	2208      	movs	r2, #8
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	1a9b      	subs	r3, r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f023 0307 	bic.w	r3, r3, #7
 8006b8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4a15      	ldr	r2, [pc, #84]	; (8006be8 <prvHeapInit+0xb4>)
 8006b94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b96:	4b14      	ldr	r3, [pc, #80]	; (8006be8 <prvHeapInit+0xb4>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b9e:	4b12      	ldr	r3, [pc, #72]	; (8006be8 <prvHeapInit+0xb4>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	1ad2      	subs	r2, r2, r3
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006bb4:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <prvHeapInit+0xb4>)
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	4a0a      	ldr	r2, [pc, #40]	; (8006bec <prvHeapInit+0xb8>)
 8006bc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	4a09      	ldr	r2, [pc, #36]	; (8006bf0 <prvHeapInit+0xbc>)
 8006bca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006bcc:	4b09      	ldr	r3, [pc, #36]	; (8006bf4 <prvHeapInit+0xc0>)
 8006bce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006bd2:	601a      	str	r2, [r3, #0]
}
 8006bd4:	bf00      	nop
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	20000ec4 	.word	0x20000ec4
 8006be4:	2000224c 	.word	0x2000224c
 8006be8:	20002254 	.word	0x20002254
 8006bec:	2000225c 	.word	0x2000225c
 8006bf0:	20002258 	.word	0x20002258
 8006bf4:	20002268 	.word	0x20002268

08006bf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c00:	4b28      	ldr	r3, [pc, #160]	; (8006ca4 <prvInsertBlockIntoFreeList+0xac>)
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	e002      	b.n	8006c0c <prvInsertBlockIntoFreeList+0x14>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d8f7      	bhi.n	8006c06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	4413      	add	r3, r2
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d108      	bne.n	8006c3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	441a      	add	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	441a      	add	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d118      	bne.n	8006c80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	4b15      	ldr	r3, [pc, #84]	; (8006ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d00d      	beq.n	8006c76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	441a      	add	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	e008      	b.n	8006c88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c76:	4b0c      	ldr	r3, [pc, #48]	; (8006ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	e003      	b.n	8006c88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d002      	beq.n	8006c96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c96:	bf00      	nop
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	2000224c 	.word	0x2000224c
 8006ca8:	20002254 	.word	0x20002254

08006cac <__errno>:
 8006cac:	4b01      	ldr	r3, [pc, #4]	; (8006cb4 <__errno+0x8>)
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	20000010 	.word	0x20000010

08006cb8 <__libc_init_array>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	4d0d      	ldr	r5, [pc, #52]	; (8006cf0 <__libc_init_array+0x38>)
 8006cbc:	4c0d      	ldr	r4, [pc, #52]	; (8006cf4 <__libc_init_array+0x3c>)
 8006cbe:	1b64      	subs	r4, r4, r5
 8006cc0:	10a4      	asrs	r4, r4, #2
 8006cc2:	2600      	movs	r6, #0
 8006cc4:	42a6      	cmp	r6, r4
 8006cc6:	d109      	bne.n	8006cdc <__libc_init_array+0x24>
 8006cc8:	4d0b      	ldr	r5, [pc, #44]	; (8006cf8 <__libc_init_array+0x40>)
 8006cca:	4c0c      	ldr	r4, [pc, #48]	; (8006cfc <__libc_init_array+0x44>)
 8006ccc:	f000 ffbc 	bl	8007c48 <_init>
 8006cd0:	1b64      	subs	r4, r4, r5
 8006cd2:	10a4      	asrs	r4, r4, #2
 8006cd4:	2600      	movs	r6, #0
 8006cd6:	42a6      	cmp	r6, r4
 8006cd8:	d105      	bne.n	8006ce6 <__libc_init_array+0x2e>
 8006cda:	bd70      	pop	{r4, r5, r6, pc}
 8006cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce0:	4798      	blx	r3
 8006ce2:	3601      	adds	r6, #1
 8006ce4:	e7ee      	b.n	8006cc4 <__libc_init_array+0xc>
 8006ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cea:	4798      	blx	r3
 8006cec:	3601      	adds	r6, #1
 8006cee:	e7f2      	b.n	8006cd6 <__libc_init_array+0x1e>
 8006cf0:	08007e60 	.word	0x08007e60
 8006cf4:	08007e60 	.word	0x08007e60
 8006cf8:	08007e60 	.word	0x08007e60
 8006cfc:	08007e64 	.word	0x08007e64

08006d00 <memcpy>:
 8006d00:	440a      	add	r2, r1
 8006d02:	4291      	cmp	r1, r2
 8006d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d08:	d100      	bne.n	8006d0c <memcpy+0xc>
 8006d0a:	4770      	bx	lr
 8006d0c:	b510      	push	{r4, lr}
 8006d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d16:	4291      	cmp	r1, r2
 8006d18:	d1f9      	bne.n	8006d0e <memcpy+0xe>
 8006d1a:	bd10      	pop	{r4, pc}

08006d1c <memset>:
 8006d1c:	4402      	add	r2, r0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d100      	bne.n	8006d26 <memset+0xa>
 8006d24:	4770      	bx	lr
 8006d26:	f803 1b01 	strb.w	r1, [r3], #1
 8006d2a:	e7f9      	b.n	8006d20 <memset+0x4>

08006d2c <iprintf>:
 8006d2c:	b40f      	push	{r0, r1, r2, r3}
 8006d2e:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <iprintf+0x2c>)
 8006d30:	b513      	push	{r0, r1, r4, lr}
 8006d32:	681c      	ldr	r4, [r3, #0]
 8006d34:	b124      	cbz	r4, 8006d40 <iprintf+0x14>
 8006d36:	69a3      	ldr	r3, [r4, #24]
 8006d38:	b913      	cbnz	r3, 8006d40 <iprintf+0x14>
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f000 f866 	bl	8006e0c <__sinit>
 8006d40:	ab05      	add	r3, sp, #20
 8006d42:	9a04      	ldr	r2, [sp, #16]
 8006d44:	68a1      	ldr	r1, [r4, #8]
 8006d46:	9301      	str	r3, [sp, #4]
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 f9bd 	bl	80070c8 <_vfiprintf_r>
 8006d4e:	b002      	add	sp, #8
 8006d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d54:	b004      	add	sp, #16
 8006d56:	4770      	bx	lr
 8006d58:	20000010 	.word	0x20000010

08006d5c <std>:
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	b510      	push	{r4, lr}
 8006d60:	4604      	mov	r4, r0
 8006d62:	e9c0 3300 	strd	r3, r3, [r0]
 8006d66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d6a:	6083      	str	r3, [r0, #8]
 8006d6c:	8181      	strh	r1, [r0, #12]
 8006d6e:	6643      	str	r3, [r0, #100]	; 0x64
 8006d70:	81c2      	strh	r2, [r0, #14]
 8006d72:	6183      	str	r3, [r0, #24]
 8006d74:	4619      	mov	r1, r3
 8006d76:	2208      	movs	r2, #8
 8006d78:	305c      	adds	r0, #92	; 0x5c
 8006d7a:	f7ff ffcf 	bl	8006d1c <memset>
 8006d7e:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <std+0x38>)
 8006d80:	6263      	str	r3, [r4, #36]	; 0x24
 8006d82:	4b05      	ldr	r3, [pc, #20]	; (8006d98 <std+0x3c>)
 8006d84:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d86:	4b05      	ldr	r3, [pc, #20]	; (8006d9c <std+0x40>)
 8006d88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d8a:	4b05      	ldr	r3, [pc, #20]	; (8006da0 <std+0x44>)
 8006d8c:	6224      	str	r4, [r4, #32]
 8006d8e:	6323      	str	r3, [r4, #48]	; 0x30
 8006d90:	bd10      	pop	{r4, pc}
 8006d92:	bf00      	nop
 8006d94:	08007671 	.word	0x08007671
 8006d98:	08007693 	.word	0x08007693
 8006d9c:	080076cb 	.word	0x080076cb
 8006da0:	080076ef 	.word	0x080076ef

08006da4 <_cleanup_r>:
 8006da4:	4901      	ldr	r1, [pc, #4]	; (8006dac <_cleanup_r+0x8>)
 8006da6:	f000 b8af 	b.w	8006f08 <_fwalk_reent>
 8006daa:	bf00      	nop
 8006dac:	080079c9 	.word	0x080079c9

08006db0 <__sfmoreglue>:
 8006db0:	b570      	push	{r4, r5, r6, lr}
 8006db2:	2268      	movs	r2, #104	; 0x68
 8006db4:	1e4d      	subs	r5, r1, #1
 8006db6:	4355      	muls	r5, r2
 8006db8:	460e      	mov	r6, r1
 8006dba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006dbe:	f000 f8e5 	bl	8006f8c <_malloc_r>
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	b140      	cbz	r0, 8006dd8 <__sfmoreglue+0x28>
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	e9c0 1600 	strd	r1, r6, [r0]
 8006dcc:	300c      	adds	r0, #12
 8006dce:	60a0      	str	r0, [r4, #8]
 8006dd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006dd4:	f7ff ffa2 	bl	8006d1c <memset>
 8006dd8:	4620      	mov	r0, r4
 8006dda:	bd70      	pop	{r4, r5, r6, pc}

08006ddc <__sfp_lock_acquire>:
 8006ddc:	4801      	ldr	r0, [pc, #4]	; (8006de4 <__sfp_lock_acquire+0x8>)
 8006dde:	f000 b8b3 	b.w	8006f48 <__retarget_lock_acquire_recursive>
 8006de2:	bf00      	nop
 8006de4:	2000226d 	.word	0x2000226d

08006de8 <__sfp_lock_release>:
 8006de8:	4801      	ldr	r0, [pc, #4]	; (8006df0 <__sfp_lock_release+0x8>)
 8006dea:	f000 b8ae 	b.w	8006f4a <__retarget_lock_release_recursive>
 8006dee:	bf00      	nop
 8006df0:	2000226d 	.word	0x2000226d

08006df4 <__sinit_lock_acquire>:
 8006df4:	4801      	ldr	r0, [pc, #4]	; (8006dfc <__sinit_lock_acquire+0x8>)
 8006df6:	f000 b8a7 	b.w	8006f48 <__retarget_lock_acquire_recursive>
 8006dfa:	bf00      	nop
 8006dfc:	2000226e 	.word	0x2000226e

08006e00 <__sinit_lock_release>:
 8006e00:	4801      	ldr	r0, [pc, #4]	; (8006e08 <__sinit_lock_release+0x8>)
 8006e02:	f000 b8a2 	b.w	8006f4a <__retarget_lock_release_recursive>
 8006e06:	bf00      	nop
 8006e08:	2000226e 	.word	0x2000226e

08006e0c <__sinit>:
 8006e0c:	b510      	push	{r4, lr}
 8006e0e:	4604      	mov	r4, r0
 8006e10:	f7ff fff0 	bl	8006df4 <__sinit_lock_acquire>
 8006e14:	69a3      	ldr	r3, [r4, #24]
 8006e16:	b11b      	cbz	r3, 8006e20 <__sinit+0x14>
 8006e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e1c:	f7ff bff0 	b.w	8006e00 <__sinit_lock_release>
 8006e20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e24:	6523      	str	r3, [r4, #80]	; 0x50
 8006e26:	4b13      	ldr	r3, [pc, #76]	; (8006e74 <__sinit+0x68>)
 8006e28:	4a13      	ldr	r2, [pc, #76]	; (8006e78 <__sinit+0x6c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e2e:	42a3      	cmp	r3, r4
 8006e30:	bf04      	itt	eq
 8006e32:	2301      	moveq	r3, #1
 8006e34:	61a3      	streq	r3, [r4, #24]
 8006e36:	4620      	mov	r0, r4
 8006e38:	f000 f820 	bl	8006e7c <__sfp>
 8006e3c:	6060      	str	r0, [r4, #4]
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f000 f81c 	bl	8006e7c <__sfp>
 8006e44:	60a0      	str	r0, [r4, #8]
 8006e46:	4620      	mov	r0, r4
 8006e48:	f000 f818 	bl	8006e7c <__sfp>
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	60e0      	str	r0, [r4, #12]
 8006e50:	2104      	movs	r1, #4
 8006e52:	6860      	ldr	r0, [r4, #4]
 8006e54:	f7ff ff82 	bl	8006d5c <std>
 8006e58:	68a0      	ldr	r0, [r4, #8]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	2109      	movs	r1, #9
 8006e5e:	f7ff ff7d 	bl	8006d5c <std>
 8006e62:	68e0      	ldr	r0, [r4, #12]
 8006e64:	2202      	movs	r2, #2
 8006e66:	2112      	movs	r1, #18
 8006e68:	f7ff ff78 	bl	8006d5c <std>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	61a3      	str	r3, [r4, #24]
 8006e70:	e7d2      	b.n	8006e18 <__sinit+0xc>
 8006e72:	bf00      	nop
 8006e74:	08007dc0 	.word	0x08007dc0
 8006e78:	08006da5 	.word	0x08006da5

08006e7c <__sfp>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	4607      	mov	r7, r0
 8006e80:	f7ff ffac 	bl	8006ddc <__sfp_lock_acquire>
 8006e84:	4b1e      	ldr	r3, [pc, #120]	; (8006f00 <__sfp+0x84>)
 8006e86:	681e      	ldr	r6, [r3, #0]
 8006e88:	69b3      	ldr	r3, [r6, #24]
 8006e8a:	b913      	cbnz	r3, 8006e92 <__sfp+0x16>
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	f7ff ffbd 	bl	8006e0c <__sinit>
 8006e92:	3648      	adds	r6, #72	; 0x48
 8006e94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	d503      	bpl.n	8006ea4 <__sfp+0x28>
 8006e9c:	6833      	ldr	r3, [r6, #0]
 8006e9e:	b30b      	cbz	r3, 8006ee4 <__sfp+0x68>
 8006ea0:	6836      	ldr	r6, [r6, #0]
 8006ea2:	e7f7      	b.n	8006e94 <__sfp+0x18>
 8006ea4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ea8:	b9d5      	cbnz	r5, 8006ee0 <__sfp+0x64>
 8006eaa:	4b16      	ldr	r3, [pc, #88]	; (8006f04 <__sfp+0x88>)
 8006eac:	60e3      	str	r3, [r4, #12]
 8006eae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006eb2:	6665      	str	r5, [r4, #100]	; 0x64
 8006eb4:	f000 f847 	bl	8006f46 <__retarget_lock_init_recursive>
 8006eb8:	f7ff ff96 	bl	8006de8 <__sfp_lock_release>
 8006ebc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ec0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ec4:	6025      	str	r5, [r4, #0]
 8006ec6:	61a5      	str	r5, [r4, #24]
 8006ec8:	2208      	movs	r2, #8
 8006eca:	4629      	mov	r1, r5
 8006ecc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ed0:	f7ff ff24 	bl	8006d1c <memset>
 8006ed4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ed8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006edc:	4620      	mov	r0, r4
 8006ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ee0:	3468      	adds	r4, #104	; 0x68
 8006ee2:	e7d9      	b.n	8006e98 <__sfp+0x1c>
 8006ee4:	2104      	movs	r1, #4
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	f7ff ff62 	bl	8006db0 <__sfmoreglue>
 8006eec:	4604      	mov	r4, r0
 8006eee:	6030      	str	r0, [r6, #0]
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	d1d5      	bne.n	8006ea0 <__sfp+0x24>
 8006ef4:	f7ff ff78 	bl	8006de8 <__sfp_lock_release>
 8006ef8:	230c      	movs	r3, #12
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	e7ee      	b.n	8006edc <__sfp+0x60>
 8006efe:	bf00      	nop
 8006f00:	08007dc0 	.word	0x08007dc0
 8006f04:	ffff0001 	.word	0xffff0001

08006f08 <_fwalk_reent>:
 8006f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f0c:	4606      	mov	r6, r0
 8006f0e:	4688      	mov	r8, r1
 8006f10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f14:	2700      	movs	r7, #0
 8006f16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f1a:	f1b9 0901 	subs.w	r9, r9, #1
 8006f1e:	d505      	bpl.n	8006f2c <_fwalk_reent+0x24>
 8006f20:	6824      	ldr	r4, [r4, #0]
 8006f22:	2c00      	cmp	r4, #0
 8006f24:	d1f7      	bne.n	8006f16 <_fwalk_reent+0xe>
 8006f26:	4638      	mov	r0, r7
 8006f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f2c:	89ab      	ldrh	r3, [r5, #12]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d907      	bls.n	8006f42 <_fwalk_reent+0x3a>
 8006f32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f36:	3301      	adds	r3, #1
 8006f38:	d003      	beq.n	8006f42 <_fwalk_reent+0x3a>
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	47c0      	blx	r8
 8006f40:	4307      	orrs	r7, r0
 8006f42:	3568      	adds	r5, #104	; 0x68
 8006f44:	e7e9      	b.n	8006f1a <_fwalk_reent+0x12>

08006f46 <__retarget_lock_init_recursive>:
 8006f46:	4770      	bx	lr

08006f48 <__retarget_lock_acquire_recursive>:
 8006f48:	4770      	bx	lr

08006f4a <__retarget_lock_release_recursive>:
 8006f4a:	4770      	bx	lr

08006f4c <sbrk_aligned>:
 8006f4c:	b570      	push	{r4, r5, r6, lr}
 8006f4e:	4e0e      	ldr	r6, [pc, #56]	; (8006f88 <sbrk_aligned+0x3c>)
 8006f50:	460c      	mov	r4, r1
 8006f52:	6831      	ldr	r1, [r6, #0]
 8006f54:	4605      	mov	r5, r0
 8006f56:	b911      	cbnz	r1, 8006f5e <sbrk_aligned+0x12>
 8006f58:	f000 fb7a 	bl	8007650 <_sbrk_r>
 8006f5c:	6030      	str	r0, [r6, #0]
 8006f5e:	4621      	mov	r1, r4
 8006f60:	4628      	mov	r0, r5
 8006f62:	f000 fb75 	bl	8007650 <_sbrk_r>
 8006f66:	1c43      	adds	r3, r0, #1
 8006f68:	d00a      	beq.n	8006f80 <sbrk_aligned+0x34>
 8006f6a:	1cc4      	adds	r4, r0, #3
 8006f6c:	f024 0403 	bic.w	r4, r4, #3
 8006f70:	42a0      	cmp	r0, r4
 8006f72:	d007      	beq.n	8006f84 <sbrk_aligned+0x38>
 8006f74:	1a21      	subs	r1, r4, r0
 8006f76:	4628      	mov	r0, r5
 8006f78:	f000 fb6a 	bl	8007650 <_sbrk_r>
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d101      	bne.n	8006f84 <sbrk_aligned+0x38>
 8006f80:	f04f 34ff 	mov.w	r4, #4294967295
 8006f84:	4620      	mov	r0, r4
 8006f86:	bd70      	pop	{r4, r5, r6, pc}
 8006f88:	20002274 	.word	0x20002274

08006f8c <_malloc_r>:
 8006f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f90:	1ccd      	adds	r5, r1, #3
 8006f92:	f025 0503 	bic.w	r5, r5, #3
 8006f96:	3508      	adds	r5, #8
 8006f98:	2d0c      	cmp	r5, #12
 8006f9a:	bf38      	it	cc
 8006f9c:	250c      	movcc	r5, #12
 8006f9e:	2d00      	cmp	r5, #0
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	db01      	blt.n	8006fa8 <_malloc_r+0x1c>
 8006fa4:	42a9      	cmp	r1, r5
 8006fa6:	d905      	bls.n	8006fb4 <_malloc_r+0x28>
 8006fa8:	230c      	movs	r3, #12
 8006faa:	603b      	str	r3, [r7, #0]
 8006fac:	2600      	movs	r6, #0
 8006fae:	4630      	mov	r0, r6
 8006fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb4:	4e2e      	ldr	r6, [pc, #184]	; (8007070 <_malloc_r+0xe4>)
 8006fb6:	f000 fdbb 	bl	8007b30 <__malloc_lock>
 8006fba:	6833      	ldr	r3, [r6, #0]
 8006fbc:	461c      	mov	r4, r3
 8006fbe:	bb34      	cbnz	r4, 800700e <_malloc_r+0x82>
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	f7ff ffc2 	bl	8006f4c <sbrk_aligned>
 8006fc8:	1c43      	adds	r3, r0, #1
 8006fca:	4604      	mov	r4, r0
 8006fcc:	d14d      	bne.n	800706a <_malloc_r+0xde>
 8006fce:	6834      	ldr	r4, [r6, #0]
 8006fd0:	4626      	mov	r6, r4
 8006fd2:	2e00      	cmp	r6, #0
 8006fd4:	d140      	bne.n	8007058 <_malloc_r+0xcc>
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	4631      	mov	r1, r6
 8006fda:	4638      	mov	r0, r7
 8006fdc:	eb04 0803 	add.w	r8, r4, r3
 8006fe0:	f000 fb36 	bl	8007650 <_sbrk_r>
 8006fe4:	4580      	cmp	r8, r0
 8006fe6:	d13a      	bne.n	800705e <_malloc_r+0xd2>
 8006fe8:	6821      	ldr	r1, [r4, #0]
 8006fea:	3503      	adds	r5, #3
 8006fec:	1a6d      	subs	r5, r5, r1
 8006fee:	f025 0503 	bic.w	r5, r5, #3
 8006ff2:	3508      	adds	r5, #8
 8006ff4:	2d0c      	cmp	r5, #12
 8006ff6:	bf38      	it	cc
 8006ff8:	250c      	movcc	r5, #12
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	4638      	mov	r0, r7
 8006ffe:	f7ff ffa5 	bl	8006f4c <sbrk_aligned>
 8007002:	3001      	adds	r0, #1
 8007004:	d02b      	beq.n	800705e <_malloc_r+0xd2>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	442b      	add	r3, r5
 800700a:	6023      	str	r3, [r4, #0]
 800700c:	e00e      	b.n	800702c <_malloc_r+0xa0>
 800700e:	6822      	ldr	r2, [r4, #0]
 8007010:	1b52      	subs	r2, r2, r5
 8007012:	d41e      	bmi.n	8007052 <_malloc_r+0xc6>
 8007014:	2a0b      	cmp	r2, #11
 8007016:	d916      	bls.n	8007046 <_malloc_r+0xba>
 8007018:	1961      	adds	r1, r4, r5
 800701a:	42a3      	cmp	r3, r4
 800701c:	6025      	str	r5, [r4, #0]
 800701e:	bf18      	it	ne
 8007020:	6059      	strne	r1, [r3, #4]
 8007022:	6863      	ldr	r3, [r4, #4]
 8007024:	bf08      	it	eq
 8007026:	6031      	streq	r1, [r6, #0]
 8007028:	5162      	str	r2, [r4, r5]
 800702a:	604b      	str	r3, [r1, #4]
 800702c:	4638      	mov	r0, r7
 800702e:	f104 060b 	add.w	r6, r4, #11
 8007032:	f000 fd83 	bl	8007b3c <__malloc_unlock>
 8007036:	f026 0607 	bic.w	r6, r6, #7
 800703a:	1d23      	adds	r3, r4, #4
 800703c:	1af2      	subs	r2, r6, r3
 800703e:	d0b6      	beq.n	8006fae <_malloc_r+0x22>
 8007040:	1b9b      	subs	r3, r3, r6
 8007042:	50a3      	str	r3, [r4, r2]
 8007044:	e7b3      	b.n	8006fae <_malloc_r+0x22>
 8007046:	6862      	ldr	r2, [r4, #4]
 8007048:	42a3      	cmp	r3, r4
 800704a:	bf0c      	ite	eq
 800704c:	6032      	streq	r2, [r6, #0]
 800704e:	605a      	strne	r2, [r3, #4]
 8007050:	e7ec      	b.n	800702c <_malloc_r+0xa0>
 8007052:	4623      	mov	r3, r4
 8007054:	6864      	ldr	r4, [r4, #4]
 8007056:	e7b2      	b.n	8006fbe <_malloc_r+0x32>
 8007058:	4634      	mov	r4, r6
 800705a:	6876      	ldr	r6, [r6, #4]
 800705c:	e7b9      	b.n	8006fd2 <_malloc_r+0x46>
 800705e:	230c      	movs	r3, #12
 8007060:	603b      	str	r3, [r7, #0]
 8007062:	4638      	mov	r0, r7
 8007064:	f000 fd6a 	bl	8007b3c <__malloc_unlock>
 8007068:	e7a1      	b.n	8006fae <_malloc_r+0x22>
 800706a:	6025      	str	r5, [r4, #0]
 800706c:	e7de      	b.n	800702c <_malloc_r+0xa0>
 800706e:	bf00      	nop
 8007070:	20002270 	.word	0x20002270

08007074 <__sfputc_r>:
 8007074:	6893      	ldr	r3, [r2, #8]
 8007076:	3b01      	subs	r3, #1
 8007078:	2b00      	cmp	r3, #0
 800707a:	b410      	push	{r4}
 800707c:	6093      	str	r3, [r2, #8]
 800707e:	da08      	bge.n	8007092 <__sfputc_r+0x1e>
 8007080:	6994      	ldr	r4, [r2, #24]
 8007082:	42a3      	cmp	r3, r4
 8007084:	db01      	blt.n	800708a <__sfputc_r+0x16>
 8007086:	290a      	cmp	r1, #10
 8007088:	d103      	bne.n	8007092 <__sfputc_r+0x1e>
 800708a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800708e:	f000 bb33 	b.w	80076f8 <__swbuf_r>
 8007092:	6813      	ldr	r3, [r2, #0]
 8007094:	1c58      	adds	r0, r3, #1
 8007096:	6010      	str	r0, [r2, #0]
 8007098:	7019      	strb	r1, [r3, #0]
 800709a:	4608      	mov	r0, r1
 800709c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <__sfputs_r>:
 80070a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a4:	4606      	mov	r6, r0
 80070a6:	460f      	mov	r7, r1
 80070a8:	4614      	mov	r4, r2
 80070aa:	18d5      	adds	r5, r2, r3
 80070ac:	42ac      	cmp	r4, r5
 80070ae:	d101      	bne.n	80070b4 <__sfputs_r+0x12>
 80070b0:	2000      	movs	r0, #0
 80070b2:	e007      	b.n	80070c4 <__sfputs_r+0x22>
 80070b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070b8:	463a      	mov	r2, r7
 80070ba:	4630      	mov	r0, r6
 80070bc:	f7ff ffda 	bl	8007074 <__sfputc_r>
 80070c0:	1c43      	adds	r3, r0, #1
 80070c2:	d1f3      	bne.n	80070ac <__sfputs_r+0xa>
 80070c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070c8 <_vfiprintf_r>:
 80070c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070cc:	460d      	mov	r5, r1
 80070ce:	b09d      	sub	sp, #116	; 0x74
 80070d0:	4614      	mov	r4, r2
 80070d2:	4698      	mov	r8, r3
 80070d4:	4606      	mov	r6, r0
 80070d6:	b118      	cbz	r0, 80070e0 <_vfiprintf_r+0x18>
 80070d8:	6983      	ldr	r3, [r0, #24]
 80070da:	b90b      	cbnz	r3, 80070e0 <_vfiprintf_r+0x18>
 80070dc:	f7ff fe96 	bl	8006e0c <__sinit>
 80070e0:	4b89      	ldr	r3, [pc, #548]	; (8007308 <_vfiprintf_r+0x240>)
 80070e2:	429d      	cmp	r5, r3
 80070e4:	d11b      	bne.n	800711e <_vfiprintf_r+0x56>
 80070e6:	6875      	ldr	r5, [r6, #4]
 80070e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070ea:	07d9      	lsls	r1, r3, #31
 80070ec:	d405      	bmi.n	80070fa <_vfiprintf_r+0x32>
 80070ee:	89ab      	ldrh	r3, [r5, #12]
 80070f0:	059a      	lsls	r2, r3, #22
 80070f2:	d402      	bmi.n	80070fa <_vfiprintf_r+0x32>
 80070f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070f6:	f7ff ff27 	bl	8006f48 <__retarget_lock_acquire_recursive>
 80070fa:	89ab      	ldrh	r3, [r5, #12]
 80070fc:	071b      	lsls	r3, r3, #28
 80070fe:	d501      	bpl.n	8007104 <_vfiprintf_r+0x3c>
 8007100:	692b      	ldr	r3, [r5, #16]
 8007102:	b9eb      	cbnz	r3, 8007140 <_vfiprintf_r+0x78>
 8007104:	4629      	mov	r1, r5
 8007106:	4630      	mov	r0, r6
 8007108:	f000 fb5a 	bl	80077c0 <__swsetup_r>
 800710c:	b1c0      	cbz	r0, 8007140 <_vfiprintf_r+0x78>
 800710e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007110:	07dc      	lsls	r4, r3, #31
 8007112:	d50e      	bpl.n	8007132 <_vfiprintf_r+0x6a>
 8007114:	f04f 30ff 	mov.w	r0, #4294967295
 8007118:	b01d      	add	sp, #116	; 0x74
 800711a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800711e:	4b7b      	ldr	r3, [pc, #492]	; (800730c <_vfiprintf_r+0x244>)
 8007120:	429d      	cmp	r5, r3
 8007122:	d101      	bne.n	8007128 <_vfiprintf_r+0x60>
 8007124:	68b5      	ldr	r5, [r6, #8]
 8007126:	e7df      	b.n	80070e8 <_vfiprintf_r+0x20>
 8007128:	4b79      	ldr	r3, [pc, #484]	; (8007310 <_vfiprintf_r+0x248>)
 800712a:	429d      	cmp	r5, r3
 800712c:	bf08      	it	eq
 800712e:	68f5      	ldreq	r5, [r6, #12]
 8007130:	e7da      	b.n	80070e8 <_vfiprintf_r+0x20>
 8007132:	89ab      	ldrh	r3, [r5, #12]
 8007134:	0598      	lsls	r0, r3, #22
 8007136:	d4ed      	bmi.n	8007114 <_vfiprintf_r+0x4c>
 8007138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800713a:	f7ff ff06 	bl	8006f4a <__retarget_lock_release_recursive>
 800713e:	e7e9      	b.n	8007114 <_vfiprintf_r+0x4c>
 8007140:	2300      	movs	r3, #0
 8007142:	9309      	str	r3, [sp, #36]	; 0x24
 8007144:	2320      	movs	r3, #32
 8007146:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800714a:	f8cd 800c 	str.w	r8, [sp, #12]
 800714e:	2330      	movs	r3, #48	; 0x30
 8007150:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007314 <_vfiprintf_r+0x24c>
 8007154:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007158:	f04f 0901 	mov.w	r9, #1
 800715c:	4623      	mov	r3, r4
 800715e:	469a      	mov	sl, r3
 8007160:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007164:	b10a      	cbz	r2, 800716a <_vfiprintf_r+0xa2>
 8007166:	2a25      	cmp	r2, #37	; 0x25
 8007168:	d1f9      	bne.n	800715e <_vfiprintf_r+0x96>
 800716a:	ebba 0b04 	subs.w	fp, sl, r4
 800716e:	d00b      	beq.n	8007188 <_vfiprintf_r+0xc0>
 8007170:	465b      	mov	r3, fp
 8007172:	4622      	mov	r2, r4
 8007174:	4629      	mov	r1, r5
 8007176:	4630      	mov	r0, r6
 8007178:	f7ff ff93 	bl	80070a2 <__sfputs_r>
 800717c:	3001      	adds	r0, #1
 800717e:	f000 80aa 	beq.w	80072d6 <_vfiprintf_r+0x20e>
 8007182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007184:	445a      	add	r2, fp
 8007186:	9209      	str	r2, [sp, #36]	; 0x24
 8007188:	f89a 3000 	ldrb.w	r3, [sl]
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 80a2 	beq.w	80072d6 <_vfiprintf_r+0x20e>
 8007192:	2300      	movs	r3, #0
 8007194:	f04f 32ff 	mov.w	r2, #4294967295
 8007198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800719c:	f10a 0a01 	add.w	sl, sl, #1
 80071a0:	9304      	str	r3, [sp, #16]
 80071a2:	9307      	str	r3, [sp, #28]
 80071a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071a8:	931a      	str	r3, [sp, #104]	; 0x68
 80071aa:	4654      	mov	r4, sl
 80071ac:	2205      	movs	r2, #5
 80071ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b2:	4858      	ldr	r0, [pc, #352]	; (8007314 <_vfiprintf_r+0x24c>)
 80071b4:	f7f9 f80c 	bl	80001d0 <memchr>
 80071b8:	9a04      	ldr	r2, [sp, #16]
 80071ba:	b9d8      	cbnz	r0, 80071f4 <_vfiprintf_r+0x12c>
 80071bc:	06d1      	lsls	r1, r2, #27
 80071be:	bf44      	itt	mi
 80071c0:	2320      	movmi	r3, #32
 80071c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071c6:	0713      	lsls	r3, r2, #28
 80071c8:	bf44      	itt	mi
 80071ca:	232b      	movmi	r3, #43	; 0x2b
 80071cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071d0:	f89a 3000 	ldrb.w	r3, [sl]
 80071d4:	2b2a      	cmp	r3, #42	; 0x2a
 80071d6:	d015      	beq.n	8007204 <_vfiprintf_r+0x13c>
 80071d8:	9a07      	ldr	r2, [sp, #28]
 80071da:	4654      	mov	r4, sl
 80071dc:	2000      	movs	r0, #0
 80071de:	f04f 0c0a 	mov.w	ip, #10
 80071e2:	4621      	mov	r1, r4
 80071e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071e8:	3b30      	subs	r3, #48	; 0x30
 80071ea:	2b09      	cmp	r3, #9
 80071ec:	d94e      	bls.n	800728c <_vfiprintf_r+0x1c4>
 80071ee:	b1b0      	cbz	r0, 800721e <_vfiprintf_r+0x156>
 80071f0:	9207      	str	r2, [sp, #28]
 80071f2:	e014      	b.n	800721e <_vfiprintf_r+0x156>
 80071f4:	eba0 0308 	sub.w	r3, r0, r8
 80071f8:	fa09 f303 	lsl.w	r3, r9, r3
 80071fc:	4313      	orrs	r3, r2
 80071fe:	9304      	str	r3, [sp, #16]
 8007200:	46a2      	mov	sl, r4
 8007202:	e7d2      	b.n	80071aa <_vfiprintf_r+0xe2>
 8007204:	9b03      	ldr	r3, [sp, #12]
 8007206:	1d19      	adds	r1, r3, #4
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	9103      	str	r1, [sp, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	bfbb      	ittet	lt
 8007210:	425b      	neglt	r3, r3
 8007212:	f042 0202 	orrlt.w	r2, r2, #2
 8007216:	9307      	strge	r3, [sp, #28]
 8007218:	9307      	strlt	r3, [sp, #28]
 800721a:	bfb8      	it	lt
 800721c:	9204      	strlt	r2, [sp, #16]
 800721e:	7823      	ldrb	r3, [r4, #0]
 8007220:	2b2e      	cmp	r3, #46	; 0x2e
 8007222:	d10c      	bne.n	800723e <_vfiprintf_r+0x176>
 8007224:	7863      	ldrb	r3, [r4, #1]
 8007226:	2b2a      	cmp	r3, #42	; 0x2a
 8007228:	d135      	bne.n	8007296 <_vfiprintf_r+0x1ce>
 800722a:	9b03      	ldr	r3, [sp, #12]
 800722c:	1d1a      	adds	r2, r3, #4
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	9203      	str	r2, [sp, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	bfb8      	it	lt
 8007236:	f04f 33ff 	movlt.w	r3, #4294967295
 800723a:	3402      	adds	r4, #2
 800723c:	9305      	str	r3, [sp, #20]
 800723e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007324 <_vfiprintf_r+0x25c>
 8007242:	7821      	ldrb	r1, [r4, #0]
 8007244:	2203      	movs	r2, #3
 8007246:	4650      	mov	r0, sl
 8007248:	f7f8 ffc2 	bl	80001d0 <memchr>
 800724c:	b140      	cbz	r0, 8007260 <_vfiprintf_r+0x198>
 800724e:	2340      	movs	r3, #64	; 0x40
 8007250:	eba0 000a 	sub.w	r0, r0, sl
 8007254:	fa03 f000 	lsl.w	r0, r3, r0
 8007258:	9b04      	ldr	r3, [sp, #16]
 800725a:	4303      	orrs	r3, r0
 800725c:	3401      	adds	r4, #1
 800725e:	9304      	str	r3, [sp, #16]
 8007260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007264:	482c      	ldr	r0, [pc, #176]	; (8007318 <_vfiprintf_r+0x250>)
 8007266:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800726a:	2206      	movs	r2, #6
 800726c:	f7f8 ffb0 	bl	80001d0 <memchr>
 8007270:	2800      	cmp	r0, #0
 8007272:	d03f      	beq.n	80072f4 <_vfiprintf_r+0x22c>
 8007274:	4b29      	ldr	r3, [pc, #164]	; (800731c <_vfiprintf_r+0x254>)
 8007276:	bb1b      	cbnz	r3, 80072c0 <_vfiprintf_r+0x1f8>
 8007278:	9b03      	ldr	r3, [sp, #12]
 800727a:	3307      	adds	r3, #7
 800727c:	f023 0307 	bic.w	r3, r3, #7
 8007280:	3308      	adds	r3, #8
 8007282:	9303      	str	r3, [sp, #12]
 8007284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007286:	443b      	add	r3, r7
 8007288:	9309      	str	r3, [sp, #36]	; 0x24
 800728a:	e767      	b.n	800715c <_vfiprintf_r+0x94>
 800728c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007290:	460c      	mov	r4, r1
 8007292:	2001      	movs	r0, #1
 8007294:	e7a5      	b.n	80071e2 <_vfiprintf_r+0x11a>
 8007296:	2300      	movs	r3, #0
 8007298:	3401      	adds	r4, #1
 800729a:	9305      	str	r3, [sp, #20]
 800729c:	4619      	mov	r1, r3
 800729e:	f04f 0c0a 	mov.w	ip, #10
 80072a2:	4620      	mov	r0, r4
 80072a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072a8:	3a30      	subs	r2, #48	; 0x30
 80072aa:	2a09      	cmp	r2, #9
 80072ac:	d903      	bls.n	80072b6 <_vfiprintf_r+0x1ee>
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0c5      	beq.n	800723e <_vfiprintf_r+0x176>
 80072b2:	9105      	str	r1, [sp, #20]
 80072b4:	e7c3      	b.n	800723e <_vfiprintf_r+0x176>
 80072b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80072ba:	4604      	mov	r4, r0
 80072bc:	2301      	movs	r3, #1
 80072be:	e7f0      	b.n	80072a2 <_vfiprintf_r+0x1da>
 80072c0:	ab03      	add	r3, sp, #12
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	462a      	mov	r2, r5
 80072c6:	4b16      	ldr	r3, [pc, #88]	; (8007320 <_vfiprintf_r+0x258>)
 80072c8:	a904      	add	r1, sp, #16
 80072ca:	4630      	mov	r0, r6
 80072cc:	f3af 8000 	nop.w
 80072d0:	4607      	mov	r7, r0
 80072d2:	1c78      	adds	r0, r7, #1
 80072d4:	d1d6      	bne.n	8007284 <_vfiprintf_r+0x1bc>
 80072d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072d8:	07d9      	lsls	r1, r3, #31
 80072da:	d405      	bmi.n	80072e8 <_vfiprintf_r+0x220>
 80072dc:	89ab      	ldrh	r3, [r5, #12]
 80072de:	059a      	lsls	r2, r3, #22
 80072e0:	d402      	bmi.n	80072e8 <_vfiprintf_r+0x220>
 80072e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072e4:	f7ff fe31 	bl	8006f4a <__retarget_lock_release_recursive>
 80072e8:	89ab      	ldrh	r3, [r5, #12]
 80072ea:	065b      	lsls	r3, r3, #25
 80072ec:	f53f af12 	bmi.w	8007114 <_vfiprintf_r+0x4c>
 80072f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072f2:	e711      	b.n	8007118 <_vfiprintf_r+0x50>
 80072f4:	ab03      	add	r3, sp, #12
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	462a      	mov	r2, r5
 80072fa:	4b09      	ldr	r3, [pc, #36]	; (8007320 <_vfiprintf_r+0x258>)
 80072fc:	a904      	add	r1, sp, #16
 80072fe:	4630      	mov	r0, r6
 8007300:	f000 f880 	bl	8007404 <_printf_i>
 8007304:	e7e4      	b.n	80072d0 <_vfiprintf_r+0x208>
 8007306:	bf00      	nop
 8007308:	08007de4 	.word	0x08007de4
 800730c:	08007e04 	.word	0x08007e04
 8007310:	08007dc4 	.word	0x08007dc4
 8007314:	08007e24 	.word	0x08007e24
 8007318:	08007e2e 	.word	0x08007e2e
 800731c:	00000000 	.word	0x00000000
 8007320:	080070a3 	.word	0x080070a3
 8007324:	08007e2a 	.word	0x08007e2a

08007328 <_printf_common>:
 8007328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800732c:	4616      	mov	r6, r2
 800732e:	4699      	mov	r9, r3
 8007330:	688a      	ldr	r2, [r1, #8]
 8007332:	690b      	ldr	r3, [r1, #16]
 8007334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007338:	4293      	cmp	r3, r2
 800733a:	bfb8      	it	lt
 800733c:	4613      	movlt	r3, r2
 800733e:	6033      	str	r3, [r6, #0]
 8007340:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007344:	4607      	mov	r7, r0
 8007346:	460c      	mov	r4, r1
 8007348:	b10a      	cbz	r2, 800734e <_printf_common+0x26>
 800734a:	3301      	adds	r3, #1
 800734c:	6033      	str	r3, [r6, #0]
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	0699      	lsls	r1, r3, #26
 8007352:	bf42      	ittt	mi
 8007354:	6833      	ldrmi	r3, [r6, #0]
 8007356:	3302      	addmi	r3, #2
 8007358:	6033      	strmi	r3, [r6, #0]
 800735a:	6825      	ldr	r5, [r4, #0]
 800735c:	f015 0506 	ands.w	r5, r5, #6
 8007360:	d106      	bne.n	8007370 <_printf_common+0x48>
 8007362:	f104 0a19 	add.w	sl, r4, #25
 8007366:	68e3      	ldr	r3, [r4, #12]
 8007368:	6832      	ldr	r2, [r6, #0]
 800736a:	1a9b      	subs	r3, r3, r2
 800736c:	42ab      	cmp	r3, r5
 800736e:	dc26      	bgt.n	80073be <_printf_common+0x96>
 8007370:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007374:	1e13      	subs	r3, r2, #0
 8007376:	6822      	ldr	r2, [r4, #0]
 8007378:	bf18      	it	ne
 800737a:	2301      	movne	r3, #1
 800737c:	0692      	lsls	r2, r2, #26
 800737e:	d42b      	bmi.n	80073d8 <_printf_common+0xb0>
 8007380:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007384:	4649      	mov	r1, r9
 8007386:	4638      	mov	r0, r7
 8007388:	47c0      	blx	r8
 800738a:	3001      	adds	r0, #1
 800738c:	d01e      	beq.n	80073cc <_printf_common+0xa4>
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	68e5      	ldr	r5, [r4, #12]
 8007392:	6832      	ldr	r2, [r6, #0]
 8007394:	f003 0306 	and.w	r3, r3, #6
 8007398:	2b04      	cmp	r3, #4
 800739a:	bf08      	it	eq
 800739c:	1aad      	subeq	r5, r5, r2
 800739e:	68a3      	ldr	r3, [r4, #8]
 80073a0:	6922      	ldr	r2, [r4, #16]
 80073a2:	bf0c      	ite	eq
 80073a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073a8:	2500      	movne	r5, #0
 80073aa:	4293      	cmp	r3, r2
 80073ac:	bfc4      	itt	gt
 80073ae:	1a9b      	subgt	r3, r3, r2
 80073b0:	18ed      	addgt	r5, r5, r3
 80073b2:	2600      	movs	r6, #0
 80073b4:	341a      	adds	r4, #26
 80073b6:	42b5      	cmp	r5, r6
 80073b8:	d11a      	bne.n	80073f0 <_printf_common+0xc8>
 80073ba:	2000      	movs	r0, #0
 80073bc:	e008      	b.n	80073d0 <_printf_common+0xa8>
 80073be:	2301      	movs	r3, #1
 80073c0:	4652      	mov	r2, sl
 80073c2:	4649      	mov	r1, r9
 80073c4:	4638      	mov	r0, r7
 80073c6:	47c0      	blx	r8
 80073c8:	3001      	adds	r0, #1
 80073ca:	d103      	bne.n	80073d4 <_printf_common+0xac>
 80073cc:	f04f 30ff 	mov.w	r0, #4294967295
 80073d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d4:	3501      	adds	r5, #1
 80073d6:	e7c6      	b.n	8007366 <_printf_common+0x3e>
 80073d8:	18e1      	adds	r1, r4, r3
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	2030      	movs	r0, #48	; 0x30
 80073de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073e2:	4422      	add	r2, r4
 80073e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073ec:	3302      	adds	r3, #2
 80073ee:	e7c7      	b.n	8007380 <_printf_common+0x58>
 80073f0:	2301      	movs	r3, #1
 80073f2:	4622      	mov	r2, r4
 80073f4:	4649      	mov	r1, r9
 80073f6:	4638      	mov	r0, r7
 80073f8:	47c0      	blx	r8
 80073fa:	3001      	adds	r0, #1
 80073fc:	d0e6      	beq.n	80073cc <_printf_common+0xa4>
 80073fe:	3601      	adds	r6, #1
 8007400:	e7d9      	b.n	80073b6 <_printf_common+0x8e>
	...

08007404 <_printf_i>:
 8007404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007408:	7e0f      	ldrb	r7, [r1, #24]
 800740a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800740c:	2f78      	cmp	r7, #120	; 0x78
 800740e:	4691      	mov	r9, r2
 8007410:	4680      	mov	r8, r0
 8007412:	460c      	mov	r4, r1
 8007414:	469a      	mov	sl, r3
 8007416:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800741a:	d807      	bhi.n	800742c <_printf_i+0x28>
 800741c:	2f62      	cmp	r7, #98	; 0x62
 800741e:	d80a      	bhi.n	8007436 <_printf_i+0x32>
 8007420:	2f00      	cmp	r7, #0
 8007422:	f000 80d8 	beq.w	80075d6 <_printf_i+0x1d2>
 8007426:	2f58      	cmp	r7, #88	; 0x58
 8007428:	f000 80a3 	beq.w	8007572 <_printf_i+0x16e>
 800742c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007430:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007434:	e03a      	b.n	80074ac <_printf_i+0xa8>
 8007436:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800743a:	2b15      	cmp	r3, #21
 800743c:	d8f6      	bhi.n	800742c <_printf_i+0x28>
 800743e:	a101      	add	r1, pc, #4	; (adr r1, 8007444 <_printf_i+0x40>)
 8007440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007444:	0800749d 	.word	0x0800749d
 8007448:	080074b1 	.word	0x080074b1
 800744c:	0800742d 	.word	0x0800742d
 8007450:	0800742d 	.word	0x0800742d
 8007454:	0800742d 	.word	0x0800742d
 8007458:	0800742d 	.word	0x0800742d
 800745c:	080074b1 	.word	0x080074b1
 8007460:	0800742d 	.word	0x0800742d
 8007464:	0800742d 	.word	0x0800742d
 8007468:	0800742d 	.word	0x0800742d
 800746c:	0800742d 	.word	0x0800742d
 8007470:	080075bd 	.word	0x080075bd
 8007474:	080074e1 	.word	0x080074e1
 8007478:	0800759f 	.word	0x0800759f
 800747c:	0800742d 	.word	0x0800742d
 8007480:	0800742d 	.word	0x0800742d
 8007484:	080075df 	.word	0x080075df
 8007488:	0800742d 	.word	0x0800742d
 800748c:	080074e1 	.word	0x080074e1
 8007490:	0800742d 	.word	0x0800742d
 8007494:	0800742d 	.word	0x0800742d
 8007498:	080075a7 	.word	0x080075a7
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	1d1a      	adds	r2, r3, #4
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	602a      	str	r2, [r5, #0]
 80074a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074ac:	2301      	movs	r3, #1
 80074ae:	e0a3      	b.n	80075f8 <_printf_i+0x1f4>
 80074b0:	6820      	ldr	r0, [r4, #0]
 80074b2:	6829      	ldr	r1, [r5, #0]
 80074b4:	0606      	lsls	r6, r0, #24
 80074b6:	f101 0304 	add.w	r3, r1, #4
 80074ba:	d50a      	bpl.n	80074d2 <_printf_i+0xce>
 80074bc:	680e      	ldr	r6, [r1, #0]
 80074be:	602b      	str	r3, [r5, #0]
 80074c0:	2e00      	cmp	r6, #0
 80074c2:	da03      	bge.n	80074cc <_printf_i+0xc8>
 80074c4:	232d      	movs	r3, #45	; 0x2d
 80074c6:	4276      	negs	r6, r6
 80074c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074cc:	485e      	ldr	r0, [pc, #376]	; (8007648 <_printf_i+0x244>)
 80074ce:	230a      	movs	r3, #10
 80074d0:	e019      	b.n	8007506 <_printf_i+0x102>
 80074d2:	680e      	ldr	r6, [r1, #0]
 80074d4:	602b      	str	r3, [r5, #0]
 80074d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074da:	bf18      	it	ne
 80074dc:	b236      	sxthne	r6, r6
 80074de:	e7ef      	b.n	80074c0 <_printf_i+0xbc>
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	6820      	ldr	r0, [r4, #0]
 80074e4:	1d19      	adds	r1, r3, #4
 80074e6:	6029      	str	r1, [r5, #0]
 80074e8:	0601      	lsls	r1, r0, #24
 80074ea:	d501      	bpl.n	80074f0 <_printf_i+0xec>
 80074ec:	681e      	ldr	r6, [r3, #0]
 80074ee:	e002      	b.n	80074f6 <_printf_i+0xf2>
 80074f0:	0646      	lsls	r6, r0, #25
 80074f2:	d5fb      	bpl.n	80074ec <_printf_i+0xe8>
 80074f4:	881e      	ldrh	r6, [r3, #0]
 80074f6:	4854      	ldr	r0, [pc, #336]	; (8007648 <_printf_i+0x244>)
 80074f8:	2f6f      	cmp	r7, #111	; 0x6f
 80074fa:	bf0c      	ite	eq
 80074fc:	2308      	moveq	r3, #8
 80074fe:	230a      	movne	r3, #10
 8007500:	2100      	movs	r1, #0
 8007502:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007506:	6865      	ldr	r5, [r4, #4]
 8007508:	60a5      	str	r5, [r4, #8]
 800750a:	2d00      	cmp	r5, #0
 800750c:	bfa2      	ittt	ge
 800750e:	6821      	ldrge	r1, [r4, #0]
 8007510:	f021 0104 	bicge.w	r1, r1, #4
 8007514:	6021      	strge	r1, [r4, #0]
 8007516:	b90e      	cbnz	r6, 800751c <_printf_i+0x118>
 8007518:	2d00      	cmp	r5, #0
 800751a:	d04d      	beq.n	80075b8 <_printf_i+0x1b4>
 800751c:	4615      	mov	r5, r2
 800751e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007522:	fb03 6711 	mls	r7, r3, r1, r6
 8007526:	5dc7      	ldrb	r7, [r0, r7]
 8007528:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800752c:	4637      	mov	r7, r6
 800752e:	42bb      	cmp	r3, r7
 8007530:	460e      	mov	r6, r1
 8007532:	d9f4      	bls.n	800751e <_printf_i+0x11a>
 8007534:	2b08      	cmp	r3, #8
 8007536:	d10b      	bne.n	8007550 <_printf_i+0x14c>
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	07de      	lsls	r6, r3, #31
 800753c:	d508      	bpl.n	8007550 <_printf_i+0x14c>
 800753e:	6923      	ldr	r3, [r4, #16]
 8007540:	6861      	ldr	r1, [r4, #4]
 8007542:	4299      	cmp	r1, r3
 8007544:	bfde      	ittt	le
 8007546:	2330      	movle	r3, #48	; 0x30
 8007548:	f805 3c01 	strble.w	r3, [r5, #-1]
 800754c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007550:	1b52      	subs	r2, r2, r5
 8007552:	6122      	str	r2, [r4, #16]
 8007554:	f8cd a000 	str.w	sl, [sp]
 8007558:	464b      	mov	r3, r9
 800755a:	aa03      	add	r2, sp, #12
 800755c:	4621      	mov	r1, r4
 800755e:	4640      	mov	r0, r8
 8007560:	f7ff fee2 	bl	8007328 <_printf_common>
 8007564:	3001      	adds	r0, #1
 8007566:	d14c      	bne.n	8007602 <_printf_i+0x1fe>
 8007568:	f04f 30ff 	mov.w	r0, #4294967295
 800756c:	b004      	add	sp, #16
 800756e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007572:	4835      	ldr	r0, [pc, #212]	; (8007648 <_printf_i+0x244>)
 8007574:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007578:	6829      	ldr	r1, [r5, #0]
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007580:	6029      	str	r1, [r5, #0]
 8007582:	061d      	lsls	r5, r3, #24
 8007584:	d514      	bpl.n	80075b0 <_printf_i+0x1ac>
 8007586:	07df      	lsls	r7, r3, #31
 8007588:	bf44      	itt	mi
 800758a:	f043 0320 	orrmi.w	r3, r3, #32
 800758e:	6023      	strmi	r3, [r4, #0]
 8007590:	b91e      	cbnz	r6, 800759a <_printf_i+0x196>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	f023 0320 	bic.w	r3, r3, #32
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	2310      	movs	r3, #16
 800759c:	e7b0      	b.n	8007500 <_printf_i+0xfc>
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	f043 0320 	orr.w	r3, r3, #32
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	2378      	movs	r3, #120	; 0x78
 80075a8:	4828      	ldr	r0, [pc, #160]	; (800764c <_printf_i+0x248>)
 80075aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075ae:	e7e3      	b.n	8007578 <_printf_i+0x174>
 80075b0:	0659      	lsls	r1, r3, #25
 80075b2:	bf48      	it	mi
 80075b4:	b2b6      	uxthmi	r6, r6
 80075b6:	e7e6      	b.n	8007586 <_printf_i+0x182>
 80075b8:	4615      	mov	r5, r2
 80075ba:	e7bb      	b.n	8007534 <_printf_i+0x130>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	6826      	ldr	r6, [r4, #0]
 80075c0:	6961      	ldr	r1, [r4, #20]
 80075c2:	1d18      	adds	r0, r3, #4
 80075c4:	6028      	str	r0, [r5, #0]
 80075c6:	0635      	lsls	r5, r6, #24
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	d501      	bpl.n	80075d0 <_printf_i+0x1cc>
 80075cc:	6019      	str	r1, [r3, #0]
 80075ce:	e002      	b.n	80075d6 <_printf_i+0x1d2>
 80075d0:	0670      	lsls	r0, r6, #25
 80075d2:	d5fb      	bpl.n	80075cc <_printf_i+0x1c8>
 80075d4:	8019      	strh	r1, [r3, #0]
 80075d6:	2300      	movs	r3, #0
 80075d8:	6123      	str	r3, [r4, #16]
 80075da:	4615      	mov	r5, r2
 80075dc:	e7ba      	b.n	8007554 <_printf_i+0x150>
 80075de:	682b      	ldr	r3, [r5, #0]
 80075e0:	1d1a      	adds	r2, r3, #4
 80075e2:	602a      	str	r2, [r5, #0]
 80075e4:	681d      	ldr	r5, [r3, #0]
 80075e6:	6862      	ldr	r2, [r4, #4]
 80075e8:	2100      	movs	r1, #0
 80075ea:	4628      	mov	r0, r5
 80075ec:	f7f8 fdf0 	bl	80001d0 <memchr>
 80075f0:	b108      	cbz	r0, 80075f6 <_printf_i+0x1f2>
 80075f2:	1b40      	subs	r0, r0, r5
 80075f4:	6060      	str	r0, [r4, #4]
 80075f6:	6863      	ldr	r3, [r4, #4]
 80075f8:	6123      	str	r3, [r4, #16]
 80075fa:	2300      	movs	r3, #0
 80075fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007600:	e7a8      	b.n	8007554 <_printf_i+0x150>
 8007602:	6923      	ldr	r3, [r4, #16]
 8007604:	462a      	mov	r2, r5
 8007606:	4649      	mov	r1, r9
 8007608:	4640      	mov	r0, r8
 800760a:	47d0      	blx	sl
 800760c:	3001      	adds	r0, #1
 800760e:	d0ab      	beq.n	8007568 <_printf_i+0x164>
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	079b      	lsls	r3, r3, #30
 8007614:	d413      	bmi.n	800763e <_printf_i+0x23a>
 8007616:	68e0      	ldr	r0, [r4, #12]
 8007618:	9b03      	ldr	r3, [sp, #12]
 800761a:	4298      	cmp	r0, r3
 800761c:	bfb8      	it	lt
 800761e:	4618      	movlt	r0, r3
 8007620:	e7a4      	b.n	800756c <_printf_i+0x168>
 8007622:	2301      	movs	r3, #1
 8007624:	4632      	mov	r2, r6
 8007626:	4649      	mov	r1, r9
 8007628:	4640      	mov	r0, r8
 800762a:	47d0      	blx	sl
 800762c:	3001      	adds	r0, #1
 800762e:	d09b      	beq.n	8007568 <_printf_i+0x164>
 8007630:	3501      	adds	r5, #1
 8007632:	68e3      	ldr	r3, [r4, #12]
 8007634:	9903      	ldr	r1, [sp, #12]
 8007636:	1a5b      	subs	r3, r3, r1
 8007638:	42ab      	cmp	r3, r5
 800763a:	dcf2      	bgt.n	8007622 <_printf_i+0x21e>
 800763c:	e7eb      	b.n	8007616 <_printf_i+0x212>
 800763e:	2500      	movs	r5, #0
 8007640:	f104 0619 	add.w	r6, r4, #25
 8007644:	e7f5      	b.n	8007632 <_printf_i+0x22e>
 8007646:	bf00      	nop
 8007648:	08007e35 	.word	0x08007e35
 800764c:	08007e46 	.word	0x08007e46

08007650 <_sbrk_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4d06      	ldr	r5, [pc, #24]	; (800766c <_sbrk_r+0x1c>)
 8007654:	2300      	movs	r3, #0
 8007656:	4604      	mov	r4, r0
 8007658:	4608      	mov	r0, r1
 800765a:	602b      	str	r3, [r5, #0]
 800765c:	f7f9 fa60 	bl	8000b20 <_sbrk>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d102      	bne.n	800766a <_sbrk_r+0x1a>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	b103      	cbz	r3, 800766a <_sbrk_r+0x1a>
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	bd38      	pop	{r3, r4, r5, pc}
 800766c:	20002278 	.word	0x20002278

08007670 <__sread>:
 8007670:	b510      	push	{r4, lr}
 8007672:	460c      	mov	r4, r1
 8007674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007678:	f000 fab2 	bl	8007be0 <_read_r>
 800767c:	2800      	cmp	r0, #0
 800767e:	bfab      	itete	ge
 8007680:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007682:	89a3      	ldrhlt	r3, [r4, #12]
 8007684:	181b      	addge	r3, r3, r0
 8007686:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800768a:	bfac      	ite	ge
 800768c:	6563      	strge	r3, [r4, #84]	; 0x54
 800768e:	81a3      	strhlt	r3, [r4, #12]
 8007690:	bd10      	pop	{r4, pc}

08007692 <__swrite>:
 8007692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007696:	461f      	mov	r7, r3
 8007698:	898b      	ldrh	r3, [r1, #12]
 800769a:	05db      	lsls	r3, r3, #23
 800769c:	4605      	mov	r5, r0
 800769e:	460c      	mov	r4, r1
 80076a0:	4616      	mov	r6, r2
 80076a2:	d505      	bpl.n	80076b0 <__swrite+0x1e>
 80076a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076a8:	2302      	movs	r3, #2
 80076aa:	2200      	movs	r2, #0
 80076ac:	f000 f9c8 	bl	8007a40 <_lseek_r>
 80076b0:	89a3      	ldrh	r3, [r4, #12]
 80076b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076ba:	81a3      	strh	r3, [r4, #12]
 80076bc:	4632      	mov	r2, r6
 80076be:	463b      	mov	r3, r7
 80076c0:	4628      	mov	r0, r5
 80076c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076c6:	f000 b869 	b.w	800779c <_write_r>

080076ca <__sseek>:
 80076ca:	b510      	push	{r4, lr}
 80076cc:	460c      	mov	r4, r1
 80076ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076d2:	f000 f9b5 	bl	8007a40 <_lseek_r>
 80076d6:	1c43      	adds	r3, r0, #1
 80076d8:	89a3      	ldrh	r3, [r4, #12]
 80076da:	bf15      	itete	ne
 80076dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80076de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076e6:	81a3      	strheq	r3, [r4, #12]
 80076e8:	bf18      	it	ne
 80076ea:	81a3      	strhne	r3, [r4, #12]
 80076ec:	bd10      	pop	{r4, pc}

080076ee <__sclose>:
 80076ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076f2:	f000 b8d3 	b.w	800789c <_close_r>
	...

080076f8 <__swbuf_r>:
 80076f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fa:	460e      	mov	r6, r1
 80076fc:	4614      	mov	r4, r2
 80076fe:	4605      	mov	r5, r0
 8007700:	b118      	cbz	r0, 800770a <__swbuf_r+0x12>
 8007702:	6983      	ldr	r3, [r0, #24]
 8007704:	b90b      	cbnz	r3, 800770a <__swbuf_r+0x12>
 8007706:	f7ff fb81 	bl	8006e0c <__sinit>
 800770a:	4b21      	ldr	r3, [pc, #132]	; (8007790 <__swbuf_r+0x98>)
 800770c:	429c      	cmp	r4, r3
 800770e:	d12b      	bne.n	8007768 <__swbuf_r+0x70>
 8007710:	686c      	ldr	r4, [r5, #4]
 8007712:	69a3      	ldr	r3, [r4, #24]
 8007714:	60a3      	str	r3, [r4, #8]
 8007716:	89a3      	ldrh	r3, [r4, #12]
 8007718:	071a      	lsls	r2, r3, #28
 800771a:	d52f      	bpl.n	800777c <__swbuf_r+0x84>
 800771c:	6923      	ldr	r3, [r4, #16]
 800771e:	b36b      	cbz	r3, 800777c <__swbuf_r+0x84>
 8007720:	6923      	ldr	r3, [r4, #16]
 8007722:	6820      	ldr	r0, [r4, #0]
 8007724:	1ac0      	subs	r0, r0, r3
 8007726:	6963      	ldr	r3, [r4, #20]
 8007728:	b2f6      	uxtb	r6, r6
 800772a:	4283      	cmp	r3, r0
 800772c:	4637      	mov	r7, r6
 800772e:	dc04      	bgt.n	800773a <__swbuf_r+0x42>
 8007730:	4621      	mov	r1, r4
 8007732:	4628      	mov	r0, r5
 8007734:	f000 f948 	bl	80079c8 <_fflush_r>
 8007738:	bb30      	cbnz	r0, 8007788 <__swbuf_r+0x90>
 800773a:	68a3      	ldr	r3, [r4, #8]
 800773c:	3b01      	subs	r3, #1
 800773e:	60a3      	str	r3, [r4, #8]
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	1c5a      	adds	r2, r3, #1
 8007744:	6022      	str	r2, [r4, #0]
 8007746:	701e      	strb	r6, [r3, #0]
 8007748:	6963      	ldr	r3, [r4, #20]
 800774a:	3001      	adds	r0, #1
 800774c:	4283      	cmp	r3, r0
 800774e:	d004      	beq.n	800775a <__swbuf_r+0x62>
 8007750:	89a3      	ldrh	r3, [r4, #12]
 8007752:	07db      	lsls	r3, r3, #31
 8007754:	d506      	bpl.n	8007764 <__swbuf_r+0x6c>
 8007756:	2e0a      	cmp	r6, #10
 8007758:	d104      	bne.n	8007764 <__swbuf_r+0x6c>
 800775a:	4621      	mov	r1, r4
 800775c:	4628      	mov	r0, r5
 800775e:	f000 f933 	bl	80079c8 <_fflush_r>
 8007762:	b988      	cbnz	r0, 8007788 <__swbuf_r+0x90>
 8007764:	4638      	mov	r0, r7
 8007766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007768:	4b0a      	ldr	r3, [pc, #40]	; (8007794 <__swbuf_r+0x9c>)
 800776a:	429c      	cmp	r4, r3
 800776c:	d101      	bne.n	8007772 <__swbuf_r+0x7a>
 800776e:	68ac      	ldr	r4, [r5, #8]
 8007770:	e7cf      	b.n	8007712 <__swbuf_r+0x1a>
 8007772:	4b09      	ldr	r3, [pc, #36]	; (8007798 <__swbuf_r+0xa0>)
 8007774:	429c      	cmp	r4, r3
 8007776:	bf08      	it	eq
 8007778:	68ec      	ldreq	r4, [r5, #12]
 800777a:	e7ca      	b.n	8007712 <__swbuf_r+0x1a>
 800777c:	4621      	mov	r1, r4
 800777e:	4628      	mov	r0, r5
 8007780:	f000 f81e 	bl	80077c0 <__swsetup_r>
 8007784:	2800      	cmp	r0, #0
 8007786:	d0cb      	beq.n	8007720 <__swbuf_r+0x28>
 8007788:	f04f 37ff 	mov.w	r7, #4294967295
 800778c:	e7ea      	b.n	8007764 <__swbuf_r+0x6c>
 800778e:	bf00      	nop
 8007790:	08007de4 	.word	0x08007de4
 8007794:	08007e04 	.word	0x08007e04
 8007798:	08007dc4 	.word	0x08007dc4

0800779c <_write_r>:
 800779c:	b538      	push	{r3, r4, r5, lr}
 800779e:	4d07      	ldr	r5, [pc, #28]	; (80077bc <_write_r+0x20>)
 80077a0:	4604      	mov	r4, r0
 80077a2:	4608      	mov	r0, r1
 80077a4:	4611      	mov	r1, r2
 80077a6:	2200      	movs	r2, #0
 80077a8:	602a      	str	r2, [r5, #0]
 80077aa:	461a      	mov	r2, r3
 80077ac:	f7f8 fee2 	bl	8000574 <_write>
 80077b0:	1c43      	adds	r3, r0, #1
 80077b2:	d102      	bne.n	80077ba <_write_r+0x1e>
 80077b4:	682b      	ldr	r3, [r5, #0]
 80077b6:	b103      	cbz	r3, 80077ba <_write_r+0x1e>
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	bd38      	pop	{r3, r4, r5, pc}
 80077bc:	20002278 	.word	0x20002278

080077c0 <__swsetup_r>:
 80077c0:	4b32      	ldr	r3, [pc, #200]	; (800788c <__swsetup_r+0xcc>)
 80077c2:	b570      	push	{r4, r5, r6, lr}
 80077c4:	681d      	ldr	r5, [r3, #0]
 80077c6:	4606      	mov	r6, r0
 80077c8:	460c      	mov	r4, r1
 80077ca:	b125      	cbz	r5, 80077d6 <__swsetup_r+0x16>
 80077cc:	69ab      	ldr	r3, [r5, #24]
 80077ce:	b913      	cbnz	r3, 80077d6 <__swsetup_r+0x16>
 80077d0:	4628      	mov	r0, r5
 80077d2:	f7ff fb1b 	bl	8006e0c <__sinit>
 80077d6:	4b2e      	ldr	r3, [pc, #184]	; (8007890 <__swsetup_r+0xd0>)
 80077d8:	429c      	cmp	r4, r3
 80077da:	d10f      	bne.n	80077fc <__swsetup_r+0x3c>
 80077dc:	686c      	ldr	r4, [r5, #4]
 80077de:	89a3      	ldrh	r3, [r4, #12]
 80077e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077e4:	0719      	lsls	r1, r3, #28
 80077e6:	d42c      	bmi.n	8007842 <__swsetup_r+0x82>
 80077e8:	06dd      	lsls	r5, r3, #27
 80077ea:	d411      	bmi.n	8007810 <__swsetup_r+0x50>
 80077ec:	2309      	movs	r3, #9
 80077ee:	6033      	str	r3, [r6, #0]
 80077f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80077f4:	81a3      	strh	r3, [r4, #12]
 80077f6:	f04f 30ff 	mov.w	r0, #4294967295
 80077fa:	e03e      	b.n	800787a <__swsetup_r+0xba>
 80077fc:	4b25      	ldr	r3, [pc, #148]	; (8007894 <__swsetup_r+0xd4>)
 80077fe:	429c      	cmp	r4, r3
 8007800:	d101      	bne.n	8007806 <__swsetup_r+0x46>
 8007802:	68ac      	ldr	r4, [r5, #8]
 8007804:	e7eb      	b.n	80077de <__swsetup_r+0x1e>
 8007806:	4b24      	ldr	r3, [pc, #144]	; (8007898 <__swsetup_r+0xd8>)
 8007808:	429c      	cmp	r4, r3
 800780a:	bf08      	it	eq
 800780c:	68ec      	ldreq	r4, [r5, #12]
 800780e:	e7e6      	b.n	80077de <__swsetup_r+0x1e>
 8007810:	0758      	lsls	r0, r3, #29
 8007812:	d512      	bpl.n	800783a <__swsetup_r+0x7a>
 8007814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007816:	b141      	cbz	r1, 800782a <__swsetup_r+0x6a>
 8007818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800781c:	4299      	cmp	r1, r3
 800781e:	d002      	beq.n	8007826 <__swsetup_r+0x66>
 8007820:	4630      	mov	r0, r6
 8007822:	f000 f991 	bl	8007b48 <_free_r>
 8007826:	2300      	movs	r3, #0
 8007828:	6363      	str	r3, [r4, #52]	; 0x34
 800782a:	89a3      	ldrh	r3, [r4, #12]
 800782c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007830:	81a3      	strh	r3, [r4, #12]
 8007832:	2300      	movs	r3, #0
 8007834:	6063      	str	r3, [r4, #4]
 8007836:	6923      	ldr	r3, [r4, #16]
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	89a3      	ldrh	r3, [r4, #12]
 800783c:	f043 0308 	orr.w	r3, r3, #8
 8007840:	81a3      	strh	r3, [r4, #12]
 8007842:	6923      	ldr	r3, [r4, #16]
 8007844:	b94b      	cbnz	r3, 800785a <__swsetup_r+0x9a>
 8007846:	89a3      	ldrh	r3, [r4, #12]
 8007848:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800784c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007850:	d003      	beq.n	800785a <__swsetup_r+0x9a>
 8007852:	4621      	mov	r1, r4
 8007854:	4630      	mov	r0, r6
 8007856:	f000 f92b 	bl	8007ab0 <__smakebuf_r>
 800785a:	89a0      	ldrh	r0, [r4, #12]
 800785c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007860:	f010 0301 	ands.w	r3, r0, #1
 8007864:	d00a      	beq.n	800787c <__swsetup_r+0xbc>
 8007866:	2300      	movs	r3, #0
 8007868:	60a3      	str	r3, [r4, #8]
 800786a:	6963      	ldr	r3, [r4, #20]
 800786c:	425b      	negs	r3, r3
 800786e:	61a3      	str	r3, [r4, #24]
 8007870:	6923      	ldr	r3, [r4, #16]
 8007872:	b943      	cbnz	r3, 8007886 <__swsetup_r+0xc6>
 8007874:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007878:	d1ba      	bne.n	80077f0 <__swsetup_r+0x30>
 800787a:	bd70      	pop	{r4, r5, r6, pc}
 800787c:	0781      	lsls	r1, r0, #30
 800787e:	bf58      	it	pl
 8007880:	6963      	ldrpl	r3, [r4, #20]
 8007882:	60a3      	str	r3, [r4, #8]
 8007884:	e7f4      	b.n	8007870 <__swsetup_r+0xb0>
 8007886:	2000      	movs	r0, #0
 8007888:	e7f7      	b.n	800787a <__swsetup_r+0xba>
 800788a:	bf00      	nop
 800788c:	20000010 	.word	0x20000010
 8007890:	08007de4 	.word	0x08007de4
 8007894:	08007e04 	.word	0x08007e04
 8007898:	08007dc4 	.word	0x08007dc4

0800789c <_close_r>:
 800789c:	b538      	push	{r3, r4, r5, lr}
 800789e:	4d06      	ldr	r5, [pc, #24]	; (80078b8 <_close_r+0x1c>)
 80078a0:	2300      	movs	r3, #0
 80078a2:	4604      	mov	r4, r0
 80078a4:	4608      	mov	r0, r1
 80078a6:	602b      	str	r3, [r5, #0]
 80078a8:	f7f9 f905 	bl	8000ab6 <_close>
 80078ac:	1c43      	adds	r3, r0, #1
 80078ae:	d102      	bne.n	80078b6 <_close_r+0x1a>
 80078b0:	682b      	ldr	r3, [r5, #0]
 80078b2:	b103      	cbz	r3, 80078b6 <_close_r+0x1a>
 80078b4:	6023      	str	r3, [r4, #0]
 80078b6:	bd38      	pop	{r3, r4, r5, pc}
 80078b8:	20002278 	.word	0x20002278

080078bc <__sflush_r>:
 80078bc:	898a      	ldrh	r2, [r1, #12]
 80078be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078c2:	4605      	mov	r5, r0
 80078c4:	0710      	lsls	r0, r2, #28
 80078c6:	460c      	mov	r4, r1
 80078c8:	d458      	bmi.n	800797c <__sflush_r+0xc0>
 80078ca:	684b      	ldr	r3, [r1, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	dc05      	bgt.n	80078dc <__sflush_r+0x20>
 80078d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	dc02      	bgt.n	80078dc <__sflush_r+0x20>
 80078d6:	2000      	movs	r0, #0
 80078d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078de:	2e00      	cmp	r6, #0
 80078e0:	d0f9      	beq.n	80078d6 <__sflush_r+0x1a>
 80078e2:	2300      	movs	r3, #0
 80078e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80078e8:	682f      	ldr	r7, [r5, #0]
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	d032      	beq.n	8007954 <__sflush_r+0x98>
 80078ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80078f0:	89a3      	ldrh	r3, [r4, #12]
 80078f2:	075a      	lsls	r2, r3, #29
 80078f4:	d505      	bpl.n	8007902 <__sflush_r+0x46>
 80078f6:	6863      	ldr	r3, [r4, #4]
 80078f8:	1ac0      	subs	r0, r0, r3
 80078fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078fc:	b10b      	cbz	r3, 8007902 <__sflush_r+0x46>
 80078fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007900:	1ac0      	subs	r0, r0, r3
 8007902:	2300      	movs	r3, #0
 8007904:	4602      	mov	r2, r0
 8007906:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007908:	6a21      	ldr	r1, [r4, #32]
 800790a:	4628      	mov	r0, r5
 800790c:	47b0      	blx	r6
 800790e:	1c43      	adds	r3, r0, #1
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	d106      	bne.n	8007922 <__sflush_r+0x66>
 8007914:	6829      	ldr	r1, [r5, #0]
 8007916:	291d      	cmp	r1, #29
 8007918:	d82c      	bhi.n	8007974 <__sflush_r+0xb8>
 800791a:	4a2a      	ldr	r2, [pc, #168]	; (80079c4 <__sflush_r+0x108>)
 800791c:	40ca      	lsrs	r2, r1
 800791e:	07d6      	lsls	r6, r2, #31
 8007920:	d528      	bpl.n	8007974 <__sflush_r+0xb8>
 8007922:	2200      	movs	r2, #0
 8007924:	6062      	str	r2, [r4, #4]
 8007926:	04d9      	lsls	r1, r3, #19
 8007928:	6922      	ldr	r2, [r4, #16]
 800792a:	6022      	str	r2, [r4, #0]
 800792c:	d504      	bpl.n	8007938 <__sflush_r+0x7c>
 800792e:	1c42      	adds	r2, r0, #1
 8007930:	d101      	bne.n	8007936 <__sflush_r+0x7a>
 8007932:	682b      	ldr	r3, [r5, #0]
 8007934:	b903      	cbnz	r3, 8007938 <__sflush_r+0x7c>
 8007936:	6560      	str	r0, [r4, #84]	; 0x54
 8007938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800793a:	602f      	str	r7, [r5, #0]
 800793c:	2900      	cmp	r1, #0
 800793e:	d0ca      	beq.n	80078d6 <__sflush_r+0x1a>
 8007940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007944:	4299      	cmp	r1, r3
 8007946:	d002      	beq.n	800794e <__sflush_r+0x92>
 8007948:	4628      	mov	r0, r5
 800794a:	f000 f8fd 	bl	8007b48 <_free_r>
 800794e:	2000      	movs	r0, #0
 8007950:	6360      	str	r0, [r4, #52]	; 0x34
 8007952:	e7c1      	b.n	80078d8 <__sflush_r+0x1c>
 8007954:	6a21      	ldr	r1, [r4, #32]
 8007956:	2301      	movs	r3, #1
 8007958:	4628      	mov	r0, r5
 800795a:	47b0      	blx	r6
 800795c:	1c41      	adds	r1, r0, #1
 800795e:	d1c7      	bne.n	80078f0 <__sflush_r+0x34>
 8007960:	682b      	ldr	r3, [r5, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d0c4      	beq.n	80078f0 <__sflush_r+0x34>
 8007966:	2b1d      	cmp	r3, #29
 8007968:	d001      	beq.n	800796e <__sflush_r+0xb2>
 800796a:	2b16      	cmp	r3, #22
 800796c:	d101      	bne.n	8007972 <__sflush_r+0xb6>
 800796e:	602f      	str	r7, [r5, #0]
 8007970:	e7b1      	b.n	80078d6 <__sflush_r+0x1a>
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007978:	81a3      	strh	r3, [r4, #12]
 800797a:	e7ad      	b.n	80078d8 <__sflush_r+0x1c>
 800797c:	690f      	ldr	r7, [r1, #16]
 800797e:	2f00      	cmp	r7, #0
 8007980:	d0a9      	beq.n	80078d6 <__sflush_r+0x1a>
 8007982:	0793      	lsls	r3, r2, #30
 8007984:	680e      	ldr	r6, [r1, #0]
 8007986:	bf08      	it	eq
 8007988:	694b      	ldreq	r3, [r1, #20]
 800798a:	600f      	str	r7, [r1, #0]
 800798c:	bf18      	it	ne
 800798e:	2300      	movne	r3, #0
 8007990:	eba6 0807 	sub.w	r8, r6, r7
 8007994:	608b      	str	r3, [r1, #8]
 8007996:	f1b8 0f00 	cmp.w	r8, #0
 800799a:	dd9c      	ble.n	80078d6 <__sflush_r+0x1a>
 800799c:	6a21      	ldr	r1, [r4, #32]
 800799e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079a0:	4643      	mov	r3, r8
 80079a2:	463a      	mov	r2, r7
 80079a4:	4628      	mov	r0, r5
 80079a6:	47b0      	blx	r6
 80079a8:	2800      	cmp	r0, #0
 80079aa:	dc06      	bgt.n	80079ba <__sflush_r+0xfe>
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079b2:	81a3      	strh	r3, [r4, #12]
 80079b4:	f04f 30ff 	mov.w	r0, #4294967295
 80079b8:	e78e      	b.n	80078d8 <__sflush_r+0x1c>
 80079ba:	4407      	add	r7, r0
 80079bc:	eba8 0800 	sub.w	r8, r8, r0
 80079c0:	e7e9      	b.n	8007996 <__sflush_r+0xda>
 80079c2:	bf00      	nop
 80079c4:	20400001 	.word	0x20400001

080079c8 <_fflush_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	690b      	ldr	r3, [r1, #16]
 80079cc:	4605      	mov	r5, r0
 80079ce:	460c      	mov	r4, r1
 80079d0:	b913      	cbnz	r3, 80079d8 <_fflush_r+0x10>
 80079d2:	2500      	movs	r5, #0
 80079d4:	4628      	mov	r0, r5
 80079d6:	bd38      	pop	{r3, r4, r5, pc}
 80079d8:	b118      	cbz	r0, 80079e2 <_fflush_r+0x1a>
 80079da:	6983      	ldr	r3, [r0, #24]
 80079dc:	b90b      	cbnz	r3, 80079e2 <_fflush_r+0x1a>
 80079de:	f7ff fa15 	bl	8006e0c <__sinit>
 80079e2:	4b14      	ldr	r3, [pc, #80]	; (8007a34 <_fflush_r+0x6c>)
 80079e4:	429c      	cmp	r4, r3
 80079e6:	d11b      	bne.n	8007a20 <_fflush_r+0x58>
 80079e8:	686c      	ldr	r4, [r5, #4]
 80079ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0ef      	beq.n	80079d2 <_fflush_r+0xa>
 80079f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80079f4:	07d0      	lsls	r0, r2, #31
 80079f6:	d404      	bmi.n	8007a02 <_fflush_r+0x3a>
 80079f8:	0599      	lsls	r1, r3, #22
 80079fa:	d402      	bmi.n	8007a02 <_fflush_r+0x3a>
 80079fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079fe:	f7ff faa3 	bl	8006f48 <__retarget_lock_acquire_recursive>
 8007a02:	4628      	mov	r0, r5
 8007a04:	4621      	mov	r1, r4
 8007a06:	f7ff ff59 	bl	80078bc <__sflush_r>
 8007a0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a0c:	07da      	lsls	r2, r3, #31
 8007a0e:	4605      	mov	r5, r0
 8007a10:	d4e0      	bmi.n	80079d4 <_fflush_r+0xc>
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	059b      	lsls	r3, r3, #22
 8007a16:	d4dd      	bmi.n	80079d4 <_fflush_r+0xc>
 8007a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a1a:	f7ff fa96 	bl	8006f4a <__retarget_lock_release_recursive>
 8007a1e:	e7d9      	b.n	80079d4 <_fflush_r+0xc>
 8007a20:	4b05      	ldr	r3, [pc, #20]	; (8007a38 <_fflush_r+0x70>)
 8007a22:	429c      	cmp	r4, r3
 8007a24:	d101      	bne.n	8007a2a <_fflush_r+0x62>
 8007a26:	68ac      	ldr	r4, [r5, #8]
 8007a28:	e7df      	b.n	80079ea <_fflush_r+0x22>
 8007a2a:	4b04      	ldr	r3, [pc, #16]	; (8007a3c <_fflush_r+0x74>)
 8007a2c:	429c      	cmp	r4, r3
 8007a2e:	bf08      	it	eq
 8007a30:	68ec      	ldreq	r4, [r5, #12]
 8007a32:	e7da      	b.n	80079ea <_fflush_r+0x22>
 8007a34:	08007de4 	.word	0x08007de4
 8007a38:	08007e04 	.word	0x08007e04
 8007a3c:	08007dc4 	.word	0x08007dc4

08007a40 <_lseek_r>:
 8007a40:	b538      	push	{r3, r4, r5, lr}
 8007a42:	4d07      	ldr	r5, [pc, #28]	; (8007a60 <_lseek_r+0x20>)
 8007a44:	4604      	mov	r4, r0
 8007a46:	4608      	mov	r0, r1
 8007a48:	4611      	mov	r1, r2
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	602a      	str	r2, [r5, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	f7f9 f858 	bl	8000b04 <_lseek>
 8007a54:	1c43      	adds	r3, r0, #1
 8007a56:	d102      	bne.n	8007a5e <_lseek_r+0x1e>
 8007a58:	682b      	ldr	r3, [r5, #0]
 8007a5a:	b103      	cbz	r3, 8007a5e <_lseek_r+0x1e>
 8007a5c:	6023      	str	r3, [r4, #0]
 8007a5e:	bd38      	pop	{r3, r4, r5, pc}
 8007a60:	20002278 	.word	0x20002278

08007a64 <__swhatbuf_r>:
 8007a64:	b570      	push	{r4, r5, r6, lr}
 8007a66:	460e      	mov	r6, r1
 8007a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a6c:	2900      	cmp	r1, #0
 8007a6e:	b096      	sub	sp, #88	; 0x58
 8007a70:	4614      	mov	r4, r2
 8007a72:	461d      	mov	r5, r3
 8007a74:	da08      	bge.n	8007a88 <__swhatbuf_r+0x24>
 8007a76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	602a      	str	r2, [r5, #0]
 8007a7e:	061a      	lsls	r2, r3, #24
 8007a80:	d410      	bmi.n	8007aa4 <__swhatbuf_r+0x40>
 8007a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a86:	e00e      	b.n	8007aa6 <__swhatbuf_r+0x42>
 8007a88:	466a      	mov	r2, sp
 8007a8a:	f000 f8bb 	bl	8007c04 <_fstat_r>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	dbf1      	blt.n	8007a76 <__swhatbuf_r+0x12>
 8007a92:	9a01      	ldr	r2, [sp, #4]
 8007a94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a9c:	425a      	negs	r2, r3
 8007a9e:	415a      	adcs	r2, r3
 8007aa0:	602a      	str	r2, [r5, #0]
 8007aa2:	e7ee      	b.n	8007a82 <__swhatbuf_r+0x1e>
 8007aa4:	2340      	movs	r3, #64	; 0x40
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	b016      	add	sp, #88	; 0x58
 8007aac:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ab0 <__smakebuf_r>:
 8007ab0:	898b      	ldrh	r3, [r1, #12]
 8007ab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ab4:	079d      	lsls	r5, r3, #30
 8007ab6:	4606      	mov	r6, r0
 8007ab8:	460c      	mov	r4, r1
 8007aba:	d507      	bpl.n	8007acc <__smakebuf_r+0x1c>
 8007abc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ac0:	6023      	str	r3, [r4, #0]
 8007ac2:	6123      	str	r3, [r4, #16]
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	6163      	str	r3, [r4, #20]
 8007ac8:	b002      	add	sp, #8
 8007aca:	bd70      	pop	{r4, r5, r6, pc}
 8007acc:	ab01      	add	r3, sp, #4
 8007ace:	466a      	mov	r2, sp
 8007ad0:	f7ff ffc8 	bl	8007a64 <__swhatbuf_r>
 8007ad4:	9900      	ldr	r1, [sp, #0]
 8007ad6:	4605      	mov	r5, r0
 8007ad8:	4630      	mov	r0, r6
 8007ada:	f7ff fa57 	bl	8006f8c <_malloc_r>
 8007ade:	b948      	cbnz	r0, 8007af4 <__smakebuf_r+0x44>
 8007ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ae4:	059a      	lsls	r2, r3, #22
 8007ae6:	d4ef      	bmi.n	8007ac8 <__smakebuf_r+0x18>
 8007ae8:	f023 0303 	bic.w	r3, r3, #3
 8007aec:	f043 0302 	orr.w	r3, r3, #2
 8007af0:	81a3      	strh	r3, [r4, #12]
 8007af2:	e7e3      	b.n	8007abc <__smakebuf_r+0xc>
 8007af4:	4b0d      	ldr	r3, [pc, #52]	; (8007b2c <__smakebuf_r+0x7c>)
 8007af6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007af8:	89a3      	ldrh	r3, [r4, #12]
 8007afa:	6020      	str	r0, [r4, #0]
 8007afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b00:	81a3      	strh	r3, [r4, #12]
 8007b02:	9b00      	ldr	r3, [sp, #0]
 8007b04:	6163      	str	r3, [r4, #20]
 8007b06:	9b01      	ldr	r3, [sp, #4]
 8007b08:	6120      	str	r0, [r4, #16]
 8007b0a:	b15b      	cbz	r3, 8007b24 <__smakebuf_r+0x74>
 8007b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b10:	4630      	mov	r0, r6
 8007b12:	f000 f889 	bl	8007c28 <_isatty_r>
 8007b16:	b128      	cbz	r0, 8007b24 <__smakebuf_r+0x74>
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	f023 0303 	bic.w	r3, r3, #3
 8007b1e:	f043 0301 	orr.w	r3, r3, #1
 8007b22:	81a3      	strh	r3, [r4, #12]
 8007b24:	89a0      	ldrh	r0, [r4, #12]
 8007b26:	4305      	orrs	r5, r0
 8007b28:	81a5      	strh	r5, [r4, #12]
 8007b2a:	e7cd      	b.n	8007ac8 <__smakebuf_r+0x18>
 8007b2c:	08006da5 	.word	0x08006da5

08007b30 <__malloc_lock>:
 8007b30:	4801      	ldr	r0, [pc, #4]	; (8007b38 <__malloc_lock+0x8>)
 8007b32:	f7ff ba09 	b.w	8006f48 <__retarget_lock_acquire_recursive>
 8007b36:	bf00      	nop
 8007b38:	2000226c 	.word	0x2000226c

08007b3c <__malloc_unlock>:
 8007b3c:	4801      	ldr	r0, [pc, #4]	; (8007b44 <__malloc_unlock+0x8>)
 8007b3e:	f7ff ba04 	b.w	8006f4a <__retarget_lock_release_recursive>
 8007b42:	bf00      	nop
 8007b44:	2000226c 	.word	0x2000226c

08007b48 <_free_r>:
 8007b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b4a:	2900      	cmp	r1, #0
 8007b4c:	d044      	beq.n	8007bd8 <_free_r+0x90>
 8007b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b52:	9001      	str	r0, [sp, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f1a1 0404 	sub.w	r4, r1, #4
 8007b5a:	bfb8      	it	lt
 8007b5c:	18e4      	addlt	r4, r4, r3
 8007b5e:	f7ff ffe7 	bl	8007b30 <__malloc_lock>
 8007b62:	4a1e      	ldr	r2, [pc, #120]	; (8007bdc <_free_r+0x94>)
 8007b64:	9801      	ldr	r0, [sp, #4]
 8007b66:	6813      	ldr	r3, [r2, #0]
 8007b68:	b933      	cbnz	r3, 8007b78 <_free_r+0x30>
 8007b6a:	6063      	str	r3, [r4, #4]
 8007b6c:	6014      	str	r4, [r2, #0]
 8007b6e:	b003      	add	sp, #12
 8007b70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b74:	f7ff bfe2 	b.w	8007b3c <__malloc_unlock>
 8007b78:	42a3      	cmp	r3, r4
 8007b7a:	d908      	bls.n	8007b8e <_free_r+0x46>
 8007b7c:	6825      	ldr	r5, [r4, #0]
 8007b7e:	1961      	adds	r1, r4, r5
 8007b80:	428b      	cmp	r3, r1
 8007b82:	bf01      	itttt	eq
 8007b84:	6819      	ldreq	r1, [r3, #0]
 8007b86:	685b      	ldreq	r3, [r3, #4]
 8007b88:	1949      	addeq	r1, r1, r5
 8007b8a:	6021      	streq	r1, [r4, #0]
 8007b8c:	e7ed      	b.n	8007b6a <_free_r+0x22>
 8007b8e:	461a      	mov	r2, r3
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	b10b      	cbz	r3, 8007b98 <_free_r+0x50>
 8007b94:	42a3      	cmp	r3, r4
 8007b96:	d9fa      	bls.n	8007b8e <_free_r+0x46>
 8007b98:	6811      	ldr	r1, [r2, #0]
 8007b9a:	1855      	adds	r5, r2, r1
 8007b9c:	42a5      	cmp	r5, r4
 8007b9e:	d10b      	bne.n	8007bb8 <_free_r+0x70>
 8007ba0:	6824      	ldr	r4, [r4, #0]
 8007ba2:	4421      	add	r1, r4
 8007ba4:	1854      	adds	r4, r2, r1
 8007ba6:	42a3      	cmp	r3, r4
 8007ba8:	6011      	str	r1, [r2, #0]
 8007baa:	d1e0      	bne.n	8007b6e <_free_r+0x26>
 8007bac:	681c      	ldr	r4, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	6053      	str	r3, [r2, #4]
 8007bb2:	4421      	add	r1, r4
 8007bb4:	6011      	str	r1, [r2, #0]
 8007bb6:	e7da      	b.n	8007b6e <_free_r+0x26>
 8007bb8:	d902      	bls.n	8007bc0 <_free_r+0x78>
 8007bba:	230c      	movs	r3, #12
 8007bbc:	6003      	str	r3, [r0, #0]
 8007bbe:	e7d6      	b.n	8007b6e <_free_r+0x26>
 8007bc0:	6825      	ldr	r5, [r4, #0]
 8007bc2:	1961      	adds	r1, r4, r5
 8007bc4:	428b      	cmp	r3, r1
 8007bc6:	bf04      	itt	eq
 8007bc8:	6819      	ldreq	r1, [r3, #0]
 8007bca:	685b      	ldreq	r3, [r3, #4]
 8007bcc:	6063      	str	r3, [r4, #4]
 8007bce:	bf04      	itt	eq
 8007bd0:	1949      	addeq	r1, r1, r5
 8007bd2:	6021      	streq	r1, [r4, #0]
 8007bd4:	6054      	str	r4, [r2, #4]
 8007bd6:	e7ca      	b.n	8007b6e <_free_r+0x26>
 8007bd8:	b003      	add	sp, #12
 8007bda:	bd30      	pop	{r4, r5, pc}
 8007bdc:	20002270 	.word	0x20002270

08007be0 <_read_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	4d07      	ldr	r5, [pc, #28]	; (8007c00 <_read_r+0x20>)
 8007be4:	4604      	mov	r4, r0
 8007be6:	4608      	mov	r0, r1
 8007be8:	4611      	mov	r1, r2
 8007bea:	2200      	movs	r2, #0
 8007bec:	602a      	str	r2, [r5, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	f7f8 ff44 	bl	8000a7c <_read>
 8007bf4:	1c43      	adds	r3, r0, #1
 8007bf6:	d102      	bne.n	8007bfe <_read_r+0x1e>
 8007bf8:	682b      	ldr	r3, [r5, #0]
 8007bfa:	b103      	cbz	r3, 8007bfe <_read_r+0x1e>
 8007bfc:	6023      	str	r3, [r4, #0]
 8007bfe:	bd38      	pop	{r3, r4, r5, pc}
 8007c00:	20002278 	.word	0x20002278

08007c04 <_fstat_r>:
 8007c04:	b538      	push	{r3, r4, r5, lr}
 8007c06:	4d07      	ldr	r5, [pc, #28]	; (8007c24 <_fstat_r+0x20>)
 8007c08:	2300      	movs	r3, #0
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	4608      	mov	r0, r1
 8007c0e:	4611      	mov	r1, r2
 8007c10:	602b      	str	r3, [r5, #0]
 8007c12:	f7f8 ff5c 	bl	8000ace <_fstat>
 8007c16:	1c43      	adds	r3, r0, #1
 8007c18:	d102      	bne.n	8007c20 <_fstat_r+0x1c>
 8007c1a:	682b      	ldr	r3, [r5, #0]
 8007c1c:	b103      	cbz	r3, 8007c20 <_fstat_r+0x1c>
 8007c1e:	6023      	str	r3, [r4, #0]
 8007c20:	bd38      	pop	{r3, r4, r5, pc}
 8007c22:	bf00      	nop
 8007c24:	20002278 	.word	0x20002278

08007c28 <_isatty_r>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	4d06      	ldr	r5, [pc, #24]	; (8007c44 <_isatty_r+0x1c>)
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4604      	mov	r4, r0
 8007c30:	4608      	mov	r0, r1
 8007c32:	602b      	str	r3, [r5, #0]
 8007c34:	f7f8 ff5b 	bl	8000aee <_isatty>
 8007c38:	1c43      	adds	r3, r0, #1
 8007c3a:	d102      	bne.n	8007c42 <_isatty_r+0x1a>
 8007c3c:	682b      	ldr	r3, [r5, #0]
 8007c3e:	b103      	cbz	r3, 8007c42 <_isatty_r+0x1a>
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	bd38      	pop	{r3, r4, r5, pc}
 8007c44:	20002278 	.word	0x20002278

08007c48 <_init>:
 8007c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4a:	bf00      	nop
 8007c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c4e:	bc08      	pop	{r3}
 8007c50:	469e      	mov	lr, r3
 8007c52:	4770      	bx	lr

08007c54 <_fini>:
 8007c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c56:	bf00      	nop
 8007c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c5a:	bc08      	pop	{r3}
 8007c5c:	469e      	mov	lr, r3
 8007c5e:	4770      	bx	lr
